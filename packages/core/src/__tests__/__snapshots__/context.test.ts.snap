// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`Context > Parse context 1`] = `
{
  "@type": "@builder.io/mitosis/context",
  "name": "SimpleExample",
  "value": {
    "content": {
      "code": "null",
      "propertyType": "normal",
      "type": "property",
    },
    "context": {
      "code": "{}",
      "propertyType": "normal",
      "type": "property",
    },
    "foo": {
      "code": "'bar'",
      "propertyType": "normal",
      "type": "property",
    },
    "fooUpperCase": {
      "code": "get fooUpperCase() {
  return this.foo.toUpperCase();
}",
      "type": "getter",
    },
    "someMethod": {
      "code": "someMethod() {
  return this.fooUpperCase.toLowercase();
}",
      "type": "method",
    },
    "state": {
      "code": "{}",
      "propertyType": "normal",
      "type": "property",
    },
  },
}
`;

exports[`Context > Parse context 2`] = `
"import { createContext } from \\"react\\";

export default createContext({
  foo: \\"bar\\",
  get fooUpperCase() {
    return this.foo.toUpperCase();
  },
  someMethod() {
    return this.fooUpperCase.toLowercase();
  },
  content: null,
  context: {},
  state: {},
});
"
`;

exports[`Context > Use and set context in complex components 1`] = `
{
  "@type": "@builder.io/mitosis/component",
  "children": [
    {
      "@type": "@builder.io/mitosis/node",
      "bindings": {},
      "children": [
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {
            "state.properties": {
              "code": "state.properties",
              "spreadType": "normal",
              "type": "spread",
            },
            "style": {
              "code": "state.css",
              "type": "single",
            },
          },
          "children": [
            {
              "@type": "@builder.io/mitosis/node",
              "bindings": {
                "block": {
                  "code": "state.useBlock",
                  "type": "single",
                },
              },
              "children": [],
              "meta": {},
              "name": "BlockStyles",
              "properties": {},
              "scope": {},
            },
            {
              "@type": "@builder.io/mitosis/node",
              "bindings": {
                "when": {
                  "code": "state.componentRef",
                  "type": "single",
                },
              },
              "children": [
                {
                  "@type": "@builder.io/mitosis/node",
                  "bindings": {
                    "children": {
                      "code": "state.useBlock.children",
                      "type": "single",
                    },
                    "state.componentOptions": {
                      "code": "state.componentOptions",
                      "spreadType": "normal",
                      "type": "spread",
                    },
                  },
                  "children": [],
                  "meta": {},
                  "name": "state.componentRef",
                  "properties": {},
                  "scope": {},
                },
              ],
              "meta": {},
              "name": "Show",
              "properties": {},
              "scope": {},
            },
            {
              "@type": "@builder.io/mitosis/node",
              "bindings": {
                "when": {
                  "code": "!state.componentRef && state.useBlock.children && state.useBlock.children.length",
                  "type": "single",
                },
              },
              "children": [
                {
                  "@type": "@builder.io/mitosis/node",
                  "bindings": {
                    "each": {
                      "code": "state.useBlock.children",
                      "type": "single",
                    },
                  },
                  "children": [
                    {
                      "@type": "@builder.io/mitosis/node",
                      "bindings": {
                        "block": {
                          "code": "child",
                          "type": "single",
                        },
                        "index": {
                          "code": "index",
                          "type": "single",
                        },
                      },
                      "children": [],
                      "meta": {},
                      "name": "RenderBlock",
                      "properties": {},
                      "scope": {},
                    },
                  ],
                  "meta": {},
                  "name": "For",
                  "properties": {},
                  "scope": {
                    "forName": "child",
                    "indexName": "index",
                  },
                },
              ],
              "meta": {},
              "name": "Show",
              "properties": {},
              "scope": {},
            },
          ],
          "meta": {},
          "name": "state.tagName",
          "properties": {},
          "scope": {},
        },
      ],
      "meta": {},
      "name": "Fragment",
      "properties": {},
      "scope": {},
    },
  ],
  "context": {
    "get": {
      "builderContext": {
        "name": "BuilderContext",
        "path": "../context/builder.context.lite:default",
      },
    },
    "set": {},
  },
  "exports": {},
  "hooks": {
    "onEvent": [],
    "onMount": [],
  },
  "imports": [
    {
      "importKind": "value",
      "imports": {
        "BuilderContext": "default",
      },
      "path": "../context/builder.context.lite",
    },
    {
      "importKind": "value",
      "imports": {
        "getBlockActions": "getBlockActions",
      },
      "path": "../functions/get-block-actions",
    },
    {
      "importKind": "value",
      "imports": {
        "getBlockComponentOptions": "getBlockComponentOptions",
      },
      "path": "../functions/get-block-component-options",
    },
    {
      "importKind": "value",
      "imports": {
        "getBlockProperties": "getBlockProperties",
      },
      "path": "../functions/get-block-properties",
    },
    {
      "importKind": "value",
      "imports": {
        "getBlockStyles": "getBlockStyles",
      },
      "path": "../functions/get-block-styles",
    },
    {
      "importKind": "value",
      "imports": {
        "getBlockTag": "getBlockTag",
      },
      "path": "../functions/get-block-tag",
    },
    {
      "importKind": "value",
      "imports": {
        "getProcessedBlock": "getProcessedBlock",
      },
      "path": "../functions/get-processed-block",
    },
    {
      "importKind": "value",
      "imports": {
        "components": "components",
      },
      "path": "../functions/register-component",
    },
    {
      "importKind": "value",
      "imports": {
        "BlockStyles": "default",
      },
      "path": "./block-styles.lite",
    },
  ],
  "inputs": [],
  "meta": {},
  "name": "RenderBlock",
  "refs": {},
  "state": {
    "actions": {
      "code": "get actions() {
  return getBlockActions({
    block: state.useBlock,
    state: builderContext.state,
    context: builderContext.context
  });
}",
      "type": "getter",
    },
    "component": {
      "code": "get component() {
  const componentName = state.useBlock.component?.name;

  if (!componentName) {
    return null;
  }

  const ref = components[state.useBlock.component?.name];

  if (componentName && !ref) {
    // TODO: Public doc page with more info about this message
    console.warn(\`
          Could not find a registered component named \\"\${componentName}\\".
          If you registered it, is the file that registered it imported by the file that needs to render it?\`);
  }

  return ref;
}",
      "type": "getter",
    },
    "componentInfo": {
      "code": "get componentInfo() {
  return state.component?.info;
}",
      "type": "getter",
    },
    "componentOptions": {
      "code": "get componentOptions() {
  return getBlockComponentOptions(state.useBlock);
}",
      "type": "getter",
    },
    "componentRef": {
      "code": "get componentRef() {
  return state.component?.component;
}",
      "type": "getter",
    },
    "css": {
      "code": "get css() {
  return getBlockStyles(state.useBlock);
}",
      "type": "getter",
    },
    "properties": {
      "code": "get properties() {
  return getBlockProperties(state.useBlock);
}",
      "type": "getter",
    },
    "tagName": {
      "code": "get tagName() {
  return getBlockTag(state.useBlock);
}",
      "type": "getter",
    },
    "useBlock": {
      "code": "get useBlock() {
  return getProcessedBlock({
    block: props.block,
    state: builderContext.state,
    context: builderContext.context
  });
}",
      "type": "getter",
    },
  },
  "subComponents": [],
}
`;

exports[`Context > Use and set context in components 1`] = `
{
  "@type": "@builder.io/mitosis/component",
  "children": [
    {
      "@type": "@builder.io/mitosis/node",
      "bindings": {},
      "children": [
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {},
          "children": [
            {
              "@type": "@builder.io/mitosis/node",
              "bindings": {
                "_text": {
                  "code": "foo.value",
                  "type": "single",
                },
              },
              "children": [],
              "meta": {},
              "name": "div",
              "properties": {},
              "scope": {},
            },
          ],
          "meta": {},
          "name": "Fragment",
          "properties": {},
          "scope": {},
        },
      ],
      "meta": {},
      "name": "Fragment",
      "properties": {},
      "scope": {},
    },
  ],
  "context": {
    "get": {
      "foo": {
        "name": "Context1",
        "path": "@dummy/1:default",
      },
    },
    "set": {
      "@dummy/1:default": {
        "name": "Context1",
        "value": {
          "content": {
            "code": "content() {
  return props.content;
}",
            "type": "method",
          },
          "foo": {
            "code": "'bar'",
            "propertyType": "normal",
            "type": "property",
          },
        },
      },
      "@dummy/2:default": {
        "name": "Context2",
        "value": {
          "bar": {
            "code": "'baz'",
            "propertyType": "normal",
            "type": "property",
          },
        },
      },
    },
  },
  "exports": {},
  "hooks": {
    "onEvent": [],
    "onMount": [],
  },
  "imports": [
    {
      "importKind": "value",
      "imports": {
        "Context1": "default",
      },
      "path": "@dummy/1",
    },
    {
      "importKind": "value",
      "imports": {
        "Context2": "default",
      },
      "path": "@dummy/2",
    },
  ],
  "inputs": [],
  "meta": {},
  "name": "ComponentWithContext",
  "refs": {},
  "state": {},
  "subComponents": [],
}
`;
