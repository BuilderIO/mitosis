// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Context Parse context 1`] = `
Object {
  "@type": "@builder.io/mitosis/context",
  "name": "SimpleExample",
  "value": Object {
    "content": null,
    "context": Object {},
    "foo": "bar",
    "fooUpperCase": "@builder.io/mitosis/method:get fooUpperCase() {
  return this.foo.toUpperCase();
}",
    "someMethod": "@builder.io/mitosis/method:someMethod() {
  return this.fooUpperCase.toLowercase();
}",
    "state": Object {},
  },
}
`;

exports[`Context Parse context 2`] = `
"import { createContext } from \\"react\\";

export default createContext({
  foo: \\"bar\\",
  get fooUpperCase() {
    return this.foo.toUpperCase();
  },
  someMethod() {
    return this.fooUpperCase.toLowercase();
  },
  content: null,
  context: {},
  state: {},
});
"
`;

exports[`Context Use and set context in complex components 1`] = `
Object {
  "@type": "@builder.io/mitosis/component",
  "children": Array [
    Object {
      "@type": "@builder.io/mitosis/node",
      "bindings": Object {},
      "children": Array [
        Object {
          "@type": "@builder.io/mitosis/node",
          "bindings": Object {},
          "children": Array [],
          "meta": Object {},
          "name": "div",
          "properties": Object {
            "_text": "
      ",
          },
        },
        Object {
          "@type": "@builder.io/mitosis/node",
          "bindings": Object {},
          "children": Array [],
          "meta": Object {},
          "name": "div",
          "properties": Object {
            "_text": "
      ",
          },
        },
        Object {
          "@type": "@builder.io/mitosis/node",
          "bindings": Object {},
          "children": Array [],
          "meta": Object {},
          "name": "div",
          "properties": Object {
            "_text": "
      ",
          },
        },
        Object {
          "@type": "@builder.io/mitosis/node",
          "bindings": Object {
            "_spread": "state.properties",
            "style": "state.css",
          },
          "children": Array [
            Object {
              "@type": "@builder.io/mitosis/node",
              "bindings": Object {},
              "children": Array [],
              "meta": Object {},
              "name": "div",
              "properties": Object {
                "_text": "
        ",
              },
            },
            Object {
              "@type": "@builder.io/mitosis/node",
              "bindings": Object {
                "block": "state.useBlock",
              },
              "children": Array [],
              "meta": Object {},
              "name": "BlockStyles",
              "properties": Object {},
            },
            Object {
              "@type": "@builder.io/mitosis/node",
              "bindings": Object {},
              "children": Array [],
              "meta": Object {},
              "name": "div",
              "properties": Object {
                "_text": "
        ",
              },
            },
            Object {
              "@type": "@builder.io/mitosis/node",
              "bindings": Object {
                "when": "state.componentRef",
              },
              "children": Array [
                Object {
                  "@type": "@builder.io/mitosis/node",
                  "bindings": Object {
                    "_spread": "state.componentOptions",
                    "children": "state.useBlock.children",
                  },
                  "children": Array [],
                  "meta": Object {},
                  "name": "state.componentRef",
                  "properties": Object {},
                },
              ],
              "meta": Object {},
              "name": "Show",
              "properties": Object {},
            },
            Object {
              "@type": "@builder.io/mitosis/node",
              "bindings": Object {},
              "children": Array [],
              "meta": Object {},
              "name": "div",
              "properties": Object {
                "_text": "
        ",
              },
            },
            Object {
              "@type": "@builder.io/mitosis/node",
              "bindings": Object {
                "when": "!state.componentRef && state.useBlock.children && state.useBlock.children.length",
              },
              "children": Array [
                Object {
                  "@type": "@builder.io/mitosis/node",
                  "bindings": Object {},
                  "children": Array [],
                  "meta": Object {},
                  "name": "div",
                  "properties": Object {
                    "_text": "
          ",
                  },
                },
                Object {
                  "@type": "@builder.io/mitosis/node",
                  "bindings": Object {
                    "each": "state.useBlock.children",
                  },
                  "children": Array [
                    Object {
                      "@type": "@builder.io/mitosis/node",
                      "bindings": Object {
                        "block": "child",
                        "index": "index",
                      },
                      "children": Array [],
                      "meta": Object {},
                      "name": "RenderBlock",
                      "properties": Object {},
                    },
                  ],
                  "meta": Object {},
                  "name": "For",
                  "properties": Object {
                    "_forName": "child",
                  },
                },
                Object {
                  "@type": "@builder.io/mitosis/node",
                  "bindings": Object {},
                  "children": Array [],
                  "meta": Object {},
                  "name": "div",
                  "properties": Object {
                    "_text": "
        ",
                  },
                },
              ],
              "meta": Object {},
              "name": "Show",
              "properties": Object {},
            },
            Object {
              "@type": "@builder.io/mitosis/node",
              "bindings": Object {},
              "children": Array [],
              "meta": Object {},
              "name": "div",
              "properties": Object {
                "_text": "
      ",
              },
            },
          ],
          "meta": Object {},
          "name": "state.tagName",
          "properties": Object {},
        },
        Object {
          "@type": "@builder.io/mitosis/node",
          "bindings": Object {},
          "children": Array [],
          "meta": Object {},
          "name": "div",
          "properties": Object {
            "_text": "
      ",
          },
        },
        Object {
          "@type": "@builder.io/mitosis/node",
          "bindings": Object {},
          "children": Array [],
          "meta": Object {},
          "name": "div",
          "properties": Object {
            "_text": "
    ",
          },
        },
      ],
      "meta": Object {},
      "name": "Fragment",
      "properties": Object {},
    },
  ],
  "context": Object {
    "get": Object {
      "builderContext": Object {
        "name": "BuilderContext",
        "path": "../context/builder.context.lite:default",
      },
    },
    "set": Object {},
  },
  "hooks": Object {},
  "imports": Array [
    Object {
      "imports": Object {
        "getBlockComponentOptions": "getBlockComponentOptions",
      },
      "path": "../functions/get-block-component-options",
    },
    Object {
      "imports": Object {
        "getBlockProperties": "getBlockProperties",
      },
      "path": "../functions/get-block-properties",
    },
    Object {
      "imports": Object {
        "getBlockStyles": "getBlockStyles",
      },
      "path": "../functions/get-block-styles",
    },
    Object {
      "imports": Object {
        "getBlockTag": "getBlockTag",
      },
      "path": "../functions/get-block-tag",
    },
    Object {
      "imports": Object {
        "components": "components",
      },
      "path": "../functions/register-component",
    },
    Object {
      "imports": Object {
        "BuilderContext": "default",
      },
      "path": "../context/builder.context.lite",
    },
    Object {
      "imports": Object {
        "getBlockActions": "getBlockActions",
      },
      "path": "../functions/get-block-actions",
    },
    Object {
      "imports": Object {
        "getProcessedBlock": "getProcessedBlock",
      },
      "path": "../functions/get-processed-block",
    },
    Object {
      "imports": Object {
        "BlockStyles": "default",
      },
      "path": "./block-styles.lite",
    },
  ],
  "inputs": Array [],
  "meta": Object {},
  "name": "RenderBlock",
  "state": Object {
    "actions": "@builder.io/mitosis/method:get actions() {
  return getBlockActions({
    block: state.useBlock,
    state: builderContext.state,
    context: builderContext.context
  });
}",
    "component": "@builder.io/mitosis/method:get component() {
  const componentName = state.useBlock.component?.name;

  if (!componentName) {
    return null;
  }

  const ref = components[state.useBlock.component?.name!];

  if (componentName && !ref) {
    // TODO: Public doc page with more info about this message
    console.warn(\`
          Could not find a registered component named \\"\${componentName}\\".
          If you registered it, is the file that registered it imported by the file that needs to render it?\`);
  }

  return ref;
}",
    "componentInfo": "@builder.io/mitosis/method:get componentInfo() {
  return state.component?.info;
}",
    "componentOptions": "@builder.io/mitosis/method:get componentOptions() {
  return getBlockComponentOptions(state.useBlock);
}",
    "componentRef": "@builder.io/mitosis/method:get componentRef() {
  return state.component?.component;
}",
    "css": "@builder.io/mitosis/method:get css() {
  return getBlockStyles(state.useBlock);
}",
    "properties": "@builder.io/mitosis/method:get properties() {
  return getBlockProperties(state.useBlock);
}",
    "tagName": "@builder.io/mitosis/method:get tagName() {
  return (getBlockTag(state.useBlock) as any);
}",
    "useBlock": "@builder.io/mitosis/method:get useBlock() {
  return getProcessedBlock({
    block: props.block,
    state: builderContext.state,
    context: builderContext.context
  });
}",
  },
  "subComponents": Array [],
}
`;

exports[`Context Use and set context in complex components 2`] = `
"import { useContext } from \\"react\\";
import { getBlockComponentOptions } from \\"../functions/get-block-component-options\\";
import { getBlockProperties } from \\"../functions/get-block-properties\\";
import { getBlockStyles } from \\"../functions/get-block-styles\\";
import { getBlockTag } from \\"../functions/get-block-tag\\";
import { components } from \\"../functions/register-component\\";
import BuilderContext from \\"../context/builder.context\\";
import { getBlockActions } from \\"../functions/get-block-actions\\";
import { getProcessedBlock } from \\"../functions/get-processed-block\\";
import BlockStyles from \\"./block-styles.lite\\";

export default function RenderBlock(props) {
  function component() {
    const componentName = useBlock().component?.name;

    if (!componentName) {
      return null;
    }

    const ref = components[useBlock().component?.name];

    if (componentName && !ref) {
      // TODO: Public doc page with more info about this message
      console.warn(\`
        Could not find a registered component named \\"\${componentName}\\".
        If you registered it, is the file that registered it imported by the file that needs to render it?\`);
    }

    return ref;
  }

  function componentInfo() {
    return component?.()?.info;
  }

  function componentRef() {
    return component?.()?.component;
  }

  function tagName() {
    return getBlockTag(useBlock());
  }

  function properties() {
    return getBlockProperties(useBlock());
  }

  function useBlock() {
    return getProcessedBlock({
      block: props.block,
      state: builderContext.state,
      context: builderContext.context,
    });
  }

  function actions() {
    return getBlockActions({
      block: useBlock(),
      state: builderContext.state,
      context: builderContext.context,
    });
  }

  function css() {
    return getBlockStyles(useBlock());
  }

  function componentOptions() {
    return getBlockComponentOptions(useBlock());
  }

  const builderContext = useContext(BuilderContext);

  const TagNameRef = tagName();
  const ComponentRefRef = componentRef();

  return (
    <>
      <TagNameRef {...properties()} style={css()}>
        <BlockStyles block={useBlock()} />

        {componentRef() ? (
          <ComponentRefRef
            {...componentOptions()}
            children={useBlock().children}
          />
        ) : null}

        {!componentRef() &&
        useBlock().children &&
        useBlock().children.length ? (
          <>
            {useBlock().children?.map((child, index) => (
              <RenderBlock index={index} block={child} />
            ))}
          </>
        ) : null}
      </TagNameRef>
    </>
  );
}
"
`;

exports[`Context Use and set context in components 1`] = `
Object {
  "@type": "@builder.io/mitosis/component",
  "children": Array [
    Object {
      "@type": "@builder.io/mitosis/node",
      "bindings": Object {},
      "children": Array [
        Object {
          "@type": "@builder.io/mitosis/node",
          "bindings": Object {},
          "children": Array [],
          "meta": Object {},
          "name": "div",
          "properties": Object {
            "_text": "
      ",
          },
        },
        Object {
          "@type": "@builder.io/mitosis/node",
          "bindings": Object {},
          "children": Array [
            Object {
              "@type": "@builder.io/mitosis/node",
              "bindings": Object {
                "_text": "foo.value",
              },
              "children": Array [],
              "meta": Object {},
              "name": "div",
              "properties": Object {},
            },
          ],
          "meta": Object {},
          "name": "Fragment",
          "properties": Object {},
        },
        Object {
          "@type": "@builder.io/mitosis/node",
          "bindings": Object {},
          "children": Array [],
          "meta": Object {},
          "name": "div",
          "properties": Object {
            "_text": "
    ",
          },
        },
      ],
      "meta": Object {},
      "name": "Fragment",
      "properties": Object {},
    },
  ],
  "context": Object {
    "get": Object {
      "foo": Object {
        "name": "Context1",
        "path": "@dummy/1:default",
      },
    },
    "set": Object {
      "@dummy/1:default": Object {
        "name": "Context1",
        "value": Object {
          "foo": "bar",
        },
      },
      "@dummy/2:default": Object {
        "name": "Context2",
        "value": Object {
          "bar": "baz",
        },
      },
    },
  },
  "hooks": Object {},
  "imports": Array [
    Object {
      "imports": Object {
        "Context1": "default",
      },
      "path": "@dummy/1",
    },
    Object {
      "imports": Object {
        "Context2": "default",
      },
      "path": "@dummy/2",
    },
  ],
  "inputs": Array [],
  "meta": Object {},
  "name": "ComponentWithContext",
  "state": Object {},
  "subComponents": Array [],
}
`;

exports[`Context Use and set context in components 2`] = `
"import { useContext } from \\"react\\";
import Context1 from \\"@dummy/1\\";
import Context2 from \\"@dummy/2\\";

export default function ComponentWithContext(props) {
  const foo = useContext(Context1);

  return (
    <Context2.Provider
      value={{
        bar: \\"baz\\",
      }}
    >
      <Context1.Provider
        value={{
          foo: \\"bar\\",
        }}
      >
        <>{foo.value}</>
      </Context1.Provider>
    </Context2.Provider>
  );
}
"
`;

exports[`Context Use and set context in components 3`] = `
"import * as React from \\"react\\";
import { View, StyleSheet, Image, Text } from \\"react-native\\";
import { useContext } from \\"react\\";
import Context1 from \\"@dummy/1\\";
import Context2 from \\"@dummy/2\\";

export default function ComponentWithContext(props) {
  const foo = useContext(Context1);

  return (
    <Context2.Provider
      value={{
        bar: \\"baz\\",
      }}
    >
      <Context1.Provider
        value={{
          foo: \\"bar\\",
        }}
      >
        <>
          <Text>{foo.value}</Text>
        </>
      </Context1.Provider>
    </Context2.Provider>
  );
}
"
`;
