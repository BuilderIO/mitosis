// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`qwik > Accordion 1`] = `
{
  "high.jsx": "export const __proxyMerge__ = function __proxyMerge__(state, local) {
  return new Proxy(state, {
    get: (obj, prop) => {
      if (local && prop in local) {
        return local[prop];
      } else {
        return state[prop];
      }
    },
    set: (obj, prop, value) => {
      obj[prop] = value;
      return true;
    },
  });
};
",
  "low.jsx": "import {
  Fragment,
  h,
  qrl,
  useStore,
  useStylesScopedQrl,
} from \\"@builder.io/qwik\\";

export const MyComponentStyles = \`.csw5022{display:flex;flex-direction:column;position:relative;flex-shrink:0;box-sizing:border-box;margin-top:20px;align-items:stretch}.csanagh{margin-top:10px;position:relative;display:flex;align-items:stretch;flex-direction:column;padding-bottom:10px}.c4qyc1p{position:relative;display:flex;align-items:stretch;flex-direction:column;margin-top:10px;padding-bottom:10px}.crwdrpw{text-align:left;display:flex;flex-direction:column}.ctcw2m4{padding-top:50px;text-align:left;display:flex;flex-direction:column;padding-bottom:50px}\`;
export const MyComponentOnMount = (p) => {
  const s = useStore(
    () => {
      const state = Object.assign(
        {},
        structuredClone(
          typeof __STATE__ === \\"object\\" && __STATE__[p.serverStateId]
        ),
        p
      );
      return state;
    },
    { deep: true }
  );
  const l = {};
  const state = __proxyMerge__(s, l);

  useStylesScopedQrl(qrl(\\"./low.js\\", \\"MyComponentStyles\\", []));

  return (
    <div
      builder-id=\\"builder-bb2f62792e464d73b7cb89258027f356\\"
      gridRowWidth=\\"25%\\"
      class=\\"csw5022 builder-block\\"
      items={[
        {
          title: [
            {
              \\"@type\\": \\"@builder.io/sdk:Element\\",
              \\"@version\\": 2,
              layerName: \\"Accordion item title\\",
              id: \\"builder-5fed2723c1cc4fb39e9d22b9c54ef179\\",
              children: [
                {
                  \\"@type\\": \\"@builder.io/sdk:Element\\",
                  \\"@version\\": 2,
                  id: \\"builder-2cad86b387ec405d82917895d7af0a12\\",
                  component: {
                    name: \\"Text\\",
                    options: { text: \\"<p>Item 1</p>\\" },
                  },
                  responsiveStyles: {
                    large: {
                      textAlign: \\"left\\",
                      display: \\"flex\\",
                      flexDirection: \\"column\\",
                    },
                  },
                },
              ],
              responsiveStyles: {
                large: {
                  marginTop: \\"10px\\",
                  position: \\"relative\\",
                  display: \\"flex\\",
                  alignItems: \\"stretch\\",
                  flexDirection: \\"column\\",
                  paddingBottom: \\"10px\\",
                },
              },
            },
          ],
          detail: [
            {
              \\"@type\\": \\"@builder.io/sdk:Element\\",
              \\"@version\\": 2,
              layerName: \\"Accordion item detail\\",
              id: \\"builder-18279a99b32240f19aa21d3f4b015cc9\\",
              children: [
                {
                  \\"@type\\": \\"@builder.io/sdk:Element\\",
                  \\"@version\\": 2,
                  id: \\"builder-2dbfa56b8988461c8566bbe759580e9b\\",
                  component: {
                    name: \\"Text\\",
                    options: { text: \\"<p>Item 1 content</p>\\" },
                  },
                  responsiveStyles: {
                    large: {
                      paddingTop: \\"50px\\",
                      textAlign: \\"left\\",
                      display: \\"flex\\",
                      flexDirection: \\"column\\",
                      paddingBottom: \\"50px\\",
                    },
                  },
                },
              ],
              responsiveStyles: {
                large: {
                  position: \\"relative\\",
                  display: \\"flex\\",
                  alignItems: \\"stretch\\",
                  flexDirection: \\"column\\",
                  marginTop: \\"10px\\",
                  paddingBottom: \\"10px\\",
                },
              },
            },
          ],
        },
        {
          title: [
            {
              \\"@type\\": \\"@builder.io/sdk:Element\\",
              \\"@version\\": 2,
              layerName: \\"Accordion item title\\",
              id: \\"builder-2a93def22a354cf7aa193c20d1ad6def\\",
              children: [
                {
                  \\"@type\\": \\"@builder.io/sdk:Element\\",
                  \\"@version\\": 2,
                  id: \\"builder-1365fc457ece45db82ad90dbe9819e7c\\",
                  component: {
                    name: \\"Text\\",
                    options: { text: \\"<p>Item 2</p>\\" },
                  },
                  responsiveStyles: {
                    large: {
                      textAlign: \\"left\\",
                      display: \\"flex\\",
                      flexDirection: \\"column\\",
                    },
                  },
                },
              ],
              responsiveStyles: {
                large: {
                  marginTop: \\"10px\\",
                  position: \\"relative\\",
                  display: \\"flex\\",
                  alignItems: \\"stretch\\",
                  flexDirection: \\"column\\",
                  paddingBottom: \\"10px\\",
                },
              },
            },
          ],
          detail: [
            {
              \\"@type\\": \\"@builder.io/sdk:Element\\",
              \\"@version\\": 2,
              layerName: \\"Accordion item detail\\",
              id: \\"builder-fd6ef41da6d040328fbd8b0801611fe5\\",
              children: [
                {
                  \\"@type\\": \\"@builder.io/sdk:Element\\",
                  \\"@version\\": 2,
                  id: \\"builder-7362f9fd64c647c5a400d9e75c74473f\\",
                  component: {
                    name: \\"Text\\",
                    options: { text: \\"<p>Item 2 content</p>\\" },
                  },
                  responsiveStyles: {
                    large: {
                      paddingTop: \\"50px\\",
                      textAlign: \\"left\\",
                      display: \\"flex\\",
                      flexDirection: \\"column\\",
                      paddingBottom: \\"50px\\",
                    },
                  },
                },
              ],
              responsiveStyles: {
                large: {
                  position: \\"relative\\",
                  display: \\"flex\\",
                  alignItems: \\"stretch\\",
                  flexDirection: \\"column\\",
                  marginTop: \\"10px\\",
                  paddingBottom: \\"10px\\",
                },
              },
            },
          ],
        },
      ]}
      animate={true}
    >
      <div>
        <div builder=\\"accordion\\">
          <div builder=\\"accordion-title\\">
            <div
              builder-id=\\"builder-5fed2723c1cc4fb39e9d22b9c54ef179\\"
              class=\\"csanagh\\"
            >
              <div
                builder-id=\\"builder-2cad86b387ec405d82917895d7af0a12\\"
                class=\\"crwdrpw\\"
              >
                <div
                  key=\\"builder-2cad86b387ec405d82917895d7af0a12\\"
                  dangerouslySetInnerHTML=\\"<p>Item 1</p>\\"
                  class=\\"builder-text\\"
                ></div>
              </div>
            </div>
          </div>
          <div builder=\\"accordion-detail\\">
            <div
              builder-id=\\"builder-18279a99b32240f19aa21d3f4b015cc9\\"
              class=\\"c4qyc1p\\"
            >
              <div
                builder-id=\\"builder-2dbfa56b8988461c8566bbe759580e9b\\"
                class=\\"ctcw2m4\\"
              >
                <div
                  key=\\"builder-2dbfa56b8988461c8566bbe759580e9b\\"
                  dangerouslySetInnerHTML=\\"<p>Item 1 content</p>\\"
                  class=\\"builder-text\\"
                ></div>
              </div>
            </div>
          </div>
        </div>
        <div builder=\\"accordion\\">
          <div builder=\\"accordion-title\\">
            <div
              builder-id=\\"builder-2a93def22a354cf7aa193c20d1ad6def\\"
              class=\\"csanagh\\"
            >
              <div
                builder-id=\\"builder-1365fc457ece45db82ad90dbe9819e7c\\"
                class=\\"crwdrpw\\"
              >
                <div
                  key=\\"builder-1365fc457ece45db82ad90dbe9819e7c\\"
                  dangerouslySetInnerHTML=\\"<p>Item 2</p>\\"
                  class=\\"builder-text\\"
                ></div>
              </div>
            </div>
          </div>
          <div builder=\\"accordion-detail\\">
            <div
              builder-id=\\"builder-fd6ef41da6d040328fbd8b0801611fe5\\"
              class=\\"c4qyc1p\\"
            >
              <div
                builder-id=\\"builder-7362f9fd64c647c5a400d9e75c74473f\\"
                class=\\"ctcw2m4\\"
              >
                <div
                  key=\\"builder-7362f9fd64c647c5a400d9e75c74473f\\"
                  dangerouslySetInnerHTML=\\"<p>Item 2 content</p>\\"
                  class=\\"builder-text\\"
                ></div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};
export const __proxyMerge__ = function __proxyMerge__(state, local) {
  return new Proxy(state, {
    get: (obj, prop) => {
      if (local && prop in local) {
        return local[prop];
      } else {
        return state[prop];
      }
    },
    set: (obj, prop, value) => {
      obj[prop] = value;
      return true;
    },
  });
};
",
  "med.jsx": "import { componentQrl, qrl } from \\"@builder.io/qwik\\";

export const MyComponent = componentQrl(
  qrl(\\"./low.js\\", \\"MyComponentOnMount\\", [])
);
export const __proxyMerge__ = function __proxyMerge__(state, local) {
  return new Proxy(state, {
    get: (obj, prop) => {
      if (local && prop in local) {
        return local[prop];
      } else {
        return state[prop];
      }
    },
    set: (obj, prop, value) => {
      obj[prop] = value;
      return true;
    },
  });
};
",
}
`;

exports[`qwik > For 1`] = `
{
  "high.jsx": "export const __proxyMerge__ = function __proxyMerge__(state, local) {
  return new Proxy(state, {
    get: (obj, prop) => {
      if (local && prop in local) {
        return local[prop];
      } else {
        return state[prop];
      }
    },
    set: (obj, prop, value) => {
      obj[prop] = value;
      return true;
    },
  });
};
",
  "low.jsx": "import {
  Fragment,
  h,
  qrl,
  useStore,
  useStylesScopedQrl,
} from \\"@builder.io/qwik\\";

export const MyComponentStyles = \`.cvdfnp5{display:flex;flex-direction:column;position:relative;flex-shrink:0;box-sizing:border-box;margin-top:0px;padding-left:20px;padding-right:20px;padding-top:50px;padding-bottom:50px;width:100vw;margin-left:calc(50% - 50vw)}.cygyoma{display:flex;flex-direction:column;position:relative;flex-shrink:0;box-sizing:border-box;margin-top:0px;padding-left:20px;padding-right:20px;padding-top:50px;padding-bottom:50px;width:100%;margin-left:auto;align-self:stretch;flex-grow:1;max-width:1200px;align-items:stretch;margin-right:auto}.cdrk993{text-align:center}\`;
export const MyComponentOnMount = (p) => {
  const s = useStore(
    () => {
      const state = Object.assign(
        {},
        structuredClone(
          typeof __STATE__ === \\"object\\" && __STATE__[p.serverStateId]
        ),
        p
      );
      return state;
    },
    { deep: true }
  );
  const l = {};
  const state = __proxyMerge__(s, l);

  useStylesScopedQrl(qrl(\\"./low.js\\", \\"MyComponentStyles\\", []));

  return (
    <div
      builder-id=\\"builder-a58a66676d9b4ecc826c1b8bc5ad91f1\\"
      class=\\"cvdfnp5 builder-block\\"
      maxWidth={1200}
    >
      <section
        builder-id=\\"builder-a58a66676d9b4ecc826c1b8bc5ad91f1\\"
        class=\\"cygyoma\\"
      >
        {(state.simpleList.results || []).map(
          ((item, $index) => {
            const l = {
              ...this,
              resultsItem: item == null ? {} : item,
              item: item,
              $index: $index,
            };
            const state = __proxyMerge__(s, l);
            return (
              <div
                builder-id=\\"builder-927e0013cb8142a9bd46a4f3811d0865\\"
                class=\\"cdrk993\\"
              >
                <div
                  key=\\"builder-927e0013cb8142a9bd46a4f3811d0865\\"
                  class=\\"builder-text\\"
                  dangerouslySetInnerHTML={state.resultsItem.data.title}
                ></div>
              </div>
            );
          }).bind(l)
        )}
      </section>
    </div>
  );
};
export const __proxyMerge__ = function __proxyMerge__(state, local) {
  return new Proxy(state, {
    get: (obj, prop) => {
      if (local && prop in local) {
        return local[prop];
      } else {
        return state[prop];
      }
    },
    set: (obj, prop, value) => {
      obj[prop] = value;
      return true;
    },
  });
};
",
  "med.jsx": "import { componentQrl, h, qrl } from \\"@builder.io/qwik\\";

export const MyComponent = componentQrl(
  qrl(\\"./low.js\\", \\"MyComponentOnMount\\", [])
);
export const __proxyMerge__ = function __proxyMerge__(state, local) {
  return new Proxy(state, {
    get: (obj, prop) => {
      if (local && prop in local) {
        return local[prop];
      } else {
        return state[prop];
      }
    },
    set: (obj, prop, value) => {
      obj[prop] = value;
      return true;
    },
  });
};
",
}
`;

exports[`qwik > Image 1`] = `
{
  "high.js": "import { useLexicalScope } from \\"@builder.io/qwik\\";

export const MyComponent_onClick_0 = (event) => {
  const [s, l] = useLexicalScope();
  const state = __proxyMerge__(s, l);
  try {
    return (state.myState = \\"changed value\\");
  } catch (err) {
    console.warn(\\"Builder code error\\", err);
  }
};
export const __proxyMerge__ = function __proxyMerge__(state, local) {
  return new Proxy(state, {
    get: (obj, prop) => {
      if (local && prop in local) {
        return local[prop];
      } else {
        return state[prop];
      }
    },
    set: (obj, prop, value) => {
      obj[prop] = value;
      return true;
    },
  });
};
",
  "low.js": "export const __proxyMerge__ = function __proxyMerge__(state, local) {
  return new Proxy(state, {
    get: (obj, prop) => {
      if (local && prop in local) {
        return local[prop];
      } else {
        return state[prop];
      }
    },
    set: (obj, prop, value) => {
      obj[prop] = value;
      return true;
    },
  });
};
",
  "med.js": "import {
  Fragment,
  componentQrl,
  h,
  qrl,
  useStore,
  useStylesScopedQrl,
} from \\"@builder.io/qwik\\";

export const MyComponentStyles = \`.cvk52jt{display:flex;flex-direction:column;position:relative;flex-shrink:0;box-sizing:border-box;margin-top:20px;min-height:20px;min-width:20px;overflow:hidden}.cjrqfb1{display:flex;flex-direction:column;position:relative;flex-shrink:0;box-sizing:border-box;margin-top:20px;line-height:normal;height:auto;text-align:center}\`;
export const MyComponentOnMount = (p) => {
  const s = useStore(
    () => {
      const state = Object.assign(
        {},
        structuredClone(
          typeof __STATE__ === \\"object\\" && __STATE__[p.serverStateId]
        ),
        p
      );
      if (!state.hasOwnProperty(\\"myState\\")) state.myState = \\"initialValue\\";
      return state;
    },
    { deep: true }
  );
  const l = {};
  const state = __proxyMerge__(s, l);

  useStylesScopedQrl(qrl(\\"./med.js\\", \\"MyComponentStyles\\", []));

  return h(
    Fragment,
    null,
    h(Image, {
      \\"builder-id\\": \\"builder-fa4480d2f48a44a7a2e98cf07c54927b\\",
      image:
        \\"https://cdn.builder.io/api/v1/image/assets%2F23dfd7cef1104af59f281d58ec525923%2F4ecf7b7554464b0183ab8250f67e797b?width=1160\\",
      backgroundSize: \\"cover\\",
      backgroundPosition: \\"center\\",
      srcset:
        \\"https://cdn.builder.io/api/v1/image/assets%2F23dfd7cef1104af59f281d58ec525923%2F4ecf7b7554464b0183ab8250f67e797b?width=100 100w, https://cdn.builder.io/api/v1/image/assets%2F23dfd7cef1104af59f281d58ec525923%2F4ecf7b7554464b0183ab8250f67e797b?width=200 200w, https://cdn.builder.io/api/v1/image/assets%2F23dfd7cef1104af59f281d58ec525923%2F4ecf7b7554464b0183ab8250f67e797b?width=400 400w, https://cdn.builder.io/api/v1/image/assets%2F23dfd7cef1104af59f281d58ec525923%2F4ecf7b7554464b0183ab8250f67e797b?width=800 800w, https://cdn.builder.io/api/v1/image/assets%2F23dfd7cef1104af59f281d58ec525923%2F4ecf7b7554464b0183ab8250f67e797b?width=1200 1200w, https://cdn.builder.io/api/v1/image/assets%2F23dfd7cef1104af59f281d58ec525923%2F4ecf7b7554464b0183ab8250f67e797b?width=1600 1600w, https://cdn.builder.io/api/v1/image/assets%2F23dfd7cef1104af59f281d58ec525923%2F4ecf7b7554464b0183ab8250f67e797b?width=2000 2000w, https://cdn.builder.io/api/v1/image/assets%2F23dfd7cef1104af59f281d58ec525923%2F4ecf7b7554464b0183ab8250f67e797b?width=1160 1160w, https://cdn.builder.io/api/v1/image/assets%2F23dfd7cef1104af59f281d58ec525923%2F4ecf7b7554464b0183ab8250f67e797b?width=598 598w, https://cdn.builder.io/api/v1/image/assets%2F23dfd7cef1104af59f281d58ec525923%2F4ecf7b7554464b0183ab8250f67e797b?width=958 958w\\",
      sizes: \\"(max-width: 638px) 94vw, (max-width: 998px) 96vw, 83vw\\",
      class: \\"cvk52jt builder-block\\",
      onClick$: qrl(\\"./high.js\\", \\"MyComponent_onClick_0\\", [s, l]),
      lazy: false,
      fitContent: true,
      aspectRatio: 1,
      height: 1300,
      width: 1300,
    }),
    h(
      \\"div\\",
      {
        \\"builder-id\\": \\"builder-1072afed47764e7cb37d088fd66f3a67\\",
        class: \\"cjrqfb1 builder-block\\",
      },
      h(\\"div\\", {
        key: \\"builder-1072afed47764e7cb37d088fd66f3a67\\",
        class: \\"builder-text\\",
        dangerouslySetInnerHTML: state.myState,
      })
    )
  );
};
export const MyComponent = componentQrl(
  qrl(\\"./med.js\\", \\"MyComponentOnMount\\", [])
);
export const Image = function Image(props) {
  let jsx = props.children || [];
  let image = props.image;
  if (image) {
    const isBuilderIoImage =
      !!(image || \\"\\").match(/\\\\.builder\\\\.io/) && !props.noWebp;
    const isPixel = props.builderBlock?.id.startsWith(\\"builder-pixel-\\");
    const imgProps = {
      src: props.image,
      style:
        \`object-fit:\${props.backgroundSize || \\"cover\\"};object-position:\${
          props.backgroundPosition || \\"center\\"
        };\` +
        (props.aspectRatio
          ? \\"position:absolute;height:100%;width:100%;top:0;left:0\\"
          : \\"\\"),
      sizes: props.sizes,
      alt: props.altText,
      role: !props.altText ? \\"presentation\\" : void 0,
      loading: isPixel ? \\"eager\\" : \\"lazy\\",
      srcset: void 0,
    };
    const qwikBugWorkaround = (imgProps2) =>
      Object.keys(imgProps2).forEach(
        (k) => imgProps2[k] === void 0 && delete imgProps2[k]
      );
    qwikBugWorkaround(imgProps);
    if (isBuilderIoImage) {
      const webpImage = updateQueryParam(image, \\"format\\", \\"webp\\");
      const srcset = [\\"100\\", \\"200\\", \\"400\\", \\"800\\", \\"1200\\", \\"1600\\", \\"2000\\"]
        .concat(props.srcsetSizes ? String(props.srcsetSizes).split(\\" \\") : [])
        .map((size) => {
          return updateQueryParam(webpImage, \\"width\\", size) + \\" \\" + size + \\"w\\";
        })
        .concat(tryAppendWidth(image))
        .join(\\",\\");
      imgProps.srcset = srcset;
      jsx = jsx = [
        h(\\"picture\\", {}, [
          h(\\"source\\", { type: \\"image/webp\\", srcset }),
          h(\\"img\\", imgProps, jsx),
        ]),
      ];
    } else {
      jsx = [h(\\"img\\", imgProps, jsx)];
    }
    if (
      props.aspectRatio &&
      !(props.fitContent && props.children && props.children.length)
    ) {
      const sizingDiv = h(\\"div\\", {
        class: \\"builder-image-sizer\\",
        style: \`width:100%;padding-top:\${
          (props.aspectRatio || 1) * 100
        }%;pointer-events:none;font-size:0\`,
      });
      jsx.push(sizingDiv);
    }
  }
  const children = props.children ? [jsx].concat(props.children) : [jsx];
  return h(
    props.href ? \\"a\\" : \\"div\\",
    __passThroughProps__({ href: props.href, class: props.class }, props),
    children
  );
  function updateQueryParam(uri = \\"\\", key, value) {
    const re = new RegExp(\\"([?&])\\" + key + \\"=.*?(&|$)\\", \\"i\\");
    const separator = uri.indexOf(\\"?\\") !== -1 ? \\"&\\" : \\"?\\";
    if (uri.match(re)) {
      return uri.replace(
        re,
        \\"$1\\" + key + \\"=\\" + encodeURIComponent(value) + \\"$2\\"
      );
    }
    return uri + separator + key + \\"=\\" + encodeURIComponent(value);
  }
  function tryAppendWidth(url) {
    const match = url.match(/[?&]width=(\\\\d+)/);
    const width = match && match[1];
    if (width) {
      return [url + \\" \\" + width + \\"w\\"];
    }
    return [];
  }
};
export const __passThroughProps__ = function __passThroughProps__(
  dstProps,
  srcProps
) {
  for (const key in srcProps) {
    if (
      Object.prototype.hasOwnProperty.call(srcProps, key) &&
      ((key.startsWith(\\"on\\") && key.endsWith(\\"$\\")) || key == \\"style\\")
    ) {
      dstProps[key] = srcProps[key];
    }
  }
  return dstProps;
};
export const __proxyMerge__ = function __proxyMerge__(state, local) {
  return new Proxy(state, {
    get: (obj, prop) => {
      if (local && prop in local) {
        return local[prop];
      } else {
        return state[prop];
      }
    },
    set: (obj, prop, value) => {
      obj[prop] = value;
      return true;
    },
  });
};
",
}
`;

exports[`qwik > Image.slow 1`] = `
{
  "high.js": "import { useLexicalScope } from \\"@builder.io/qwik\\";

export const MyComponent_onClick_0 = (event) => {
  const [s, l] = useLexicalScope();
  const state = __proxyMerge__(s, l);
  try {
    return (state.myState = \\"changed value\\");
  } catch (err) {
    console.warn(\\"Builder code error\\", err);
  }
};
export const __proxyMerge__ = function __proxyMerge__(state, local) {
  return new Proxy(state, {
    get: (obj, prop) => {
      if (local && prop in local) {
        return local[prop];
      } else {
        return state[prop];
      }
    },
    set: (obj, prop, value) => {
      obj[prop] = value;
      return true;
    },
  });
};
",
  "low.js": "export const __proxyMerge__ = function __proxyMerge__(state, local) {
  return new Proxy(state, {
    get: (obj, prop) => {
      if (local && prop in local) {
        return local[prop];
      } else {
        return state[prop];
      }
    },
    set: (obj, prop, value) => {
      obj[prop] = value;
      return true;
    },
  });
};
",
  "med.js": "import {
  Fragment,
  componentQrl,
  h,
  qrl,
  useStore,
  useStylesScopedQrl,
} from \\"@builder.io/qwik\\";

export const MyComponentStyles = \`.cvk52jt{display:flex;flex-direction:column;position:relative;flex-shrink:0;box-sizing:border-box;margin-top:20px;min-height:20px;min-width:20px;overflow:hidden}.cjrqfb1{display:flex;flex-direction:column;position:relative;flex-shrink:0;box-sizing:border-box;margin-top:20px;line-height:normal;height:auto;text-align:center}\`;
export const MyComponentOnMount = (p) => {
  const s = useStore(
    () => {
      const state = Object.assign(
        {},
        structuredClone(
          typeof __STATE__ === \\"object\\" && __STATE__[p.serverStateId]
        ),
        p
      );
      if (!state.hasOwnProperty(\\"myState\\")) state.myState = \\"initialValue\\";
      return state;
    },
    { deep: true }
  );
  const l = {};
  const state = __proxyMerge__(s, l);

  useStylesScopedQrl(qrl(\\"./med.js\\", \\"MyComponentStyles\\", []));

  return h(
    Fragment,
    null,
    h(Image, {
      \\"builder-id\\": \\"builder-fa4480d2f48a44a7a2e98cf07c54927b\\",
      image:
        \\"https://cdn.builder.io/api/v1/image/assets%2F23dfd7cef1104af59f281d58ec525923%2F4ecf7b7554464b0183ab8250f67e797b?width=1160\\",
      backgroundSize: \\"cover\\",
      backgroundPosition: \\"center\\",
      srcset:
        \\"https://cdn.builder.io/api/v1/image/assets%2F23dfd7cef1104af59f281d58ec525923%2F4ecf7b7554464b0183ab8250f67e797b?width=100 100w, https://cdn.builder.io/api/v1/image/assets%2F23dfd7cef1104af59f281d58ec525923%2F4ecf7b7554464b0183ab8250f67e797b?width=200 200w, https://cdn.builder.io/api/v1/image/assets%2F23dfd7cef1104af59f281d58ec525923%2F4ecf7b7554464b0183ab8250f67e797b?width=400 400w, https://cdn.builder.io/api/v1/image/assets%2F23dfd7cef1104af59f281d58ec525923%2F4ecf7b7554464b0183ab8250f67e797b?width=800 800w, https://cdn.builder.io/api/v1/image/assets%2F23dfd7cef1104af59f281d58ec525923%2F4ecf7b7554464b0183ab8250f67e797b?width=1200 1200w, https://cdn.builder.io/api/v1/image/assets%2F23dfd7cef1104af59f281d58ec525923%2F4ecf7b7554464b0183ab8250f67e797b?width=1600 1600w, https://cdn.builder.io/api/v1/image/assets%2F23dfd7cef1104af59f281d58ec525923%2F4ecf7b7554464b0183ab8250f67e797b?width=2000 2000w, https://cdn.builder.io/api/v1/image/assets%2F23dfd7cef1104af59f281d58ec525923%2F4ecf7b7554464b0183ab8250f67e797b?width=1160 1160w, https://cdn.builder.io/api/v1/image/assets%2F23dfd7cef1104af59f281d58ec525923%2F4ecf7b7554464b0183ab8250f67e797b?width=598 598w, https://cdn.builder.io/api/v1/image/assets%2F23dfd7cef1104af59f281d58ec525923%2F4ecf7b7554464b0183ab8250f67e797b?width=958 958w\\",
      sizes: \\"(max-width: 638px) 94vw, (max-width: 998px) 96vw, 83vw\\",
      class: \\"cvk52jt builder-block\\",
      onClick$: qrl(\\"./high.js\\", \\"MyComponent_onClick_0\\", [s, l]),
      lazy: false,
      fitContent: true,
      aspectRatio: 1,
      height: 1300,
      width: 1300,
    }),
    h(
      \\"div\\",
      {
        \\"builder-id\\": \\"builder-1072afed47764e7cb37d088fd66f3a67\\",
        class: \\"cjrqfb1 builder-block\\",
      },
      h(\\"div\\", {
        key: \\"builder-1072afed47764e7cb37d088fd66f3a67\\",
        class: \\"builder-text\\",
        dangerouslySetInnerHTML: state.myState,
      })
    )
  );
};
export const MyComponent = componentQrl(
  qrl(\\"./med.js\\", \\"MyComponentOnMount\\", [])
);
export const Image = function Image(props) {
  let jsx = props.children || [];
  let image = props.image;
  if (image) {
    const isBuilderIoImage =
      !!(image || \\"\\").match(/\\\\.builder\\\\.io/) && !props.noWebp;
    const isPixel = props.builderBlock?.id.startsWith(\\"builder-pixel-\\");
    const imgProps = {
      src: props.image,
      style:
        \`object-fit:\${props.backgroundSize || \\"cover\\"};object-position:\${
          props.backgroundPosition || \\"center\\"
        };\` +
        (props.aspectRatio
          ? \\"position:absolute;height:100%;width:100%;top:0;left:0\\"
          : \\"\\"),
      sizes: props.sizes,
      alt: props.altText,
      role: !props.altText ? \\"presentation\\" : void 0,
      loading: isPixel ? \\"eager\\" : \\"lazy\\",
      srcset: void 0,
    };
    const qwikBugWorkaround = (imgProps2) =>
      Object.keys(imgProps2).forEach(
        (k) => imgProps2[k] === void 0 && delete imgProps2[k]
      );
    qwikBugWorkaround(imgProps);
    if (isBuilderIoImage) {
      const webpImage = updateQueryParam(image, \\"format\\", \\"webp\\");
      const srcset = [\\"100\\", \\"200\\", \\"400\\", \\"800\\", \\"1200\\", \\"1600\\", \\"2000\\"]
        .concat(props.srcsetSizes ? String(props.srcsetSizes).split(\\" \\") : [])
        .map((size) => {
          return updateQueryParam(webpImage, \\"width\\", size) + \\" \\" + size + \\"w\\";
        })
        .concat(tryAppendWidth(image))
        .join(\\",\\");
      imgProps.srcset = srcset;
      jsx = jsx = [
        h(\\"picture\\", {}, [
          h(\\"source\\", { type: \\"image/webp\\", srcset }),
          h(\\"img\\", imgProps, jsx),
        ]),
      ];
    } else {
      jsx = [h(\\"img\\", imgProps, jsx)];
    }
    if (
      props.aspectRatio &&
      !(props.fitContent && props.children && props.children.length)
    ) {
      const sizingDiv = h(\\"div\\", {
        class: \\"builder-image-sizer\\",
        style: \`width:100%;padding-top:\${
          (props.aspectRatio || 1) * 100
        }%;pointer-events:none;font-size:0\`,
      });
      jsx.push(sizingDiv);
    }
  }
  const children = props.children ? [jsx].concat(props.children) : [jsx];
  return h(
    props.href ? \\"a\\" : \\"div\\",
    __passThroughProps__({ href: props.href, class: props.class }, props),
    children
  );
  function updateQueryParam(uri = \\"\\", key, value) {
    const re = new RegExp(\\"([?&])\\" + key + \\"=.*?(&|$)\\", \\"i\\");
    const separator = uri.indexOf(\\"?\\") !== -1 ? \\"&\\" : \\"?\\";
    if (uri.match(re)) {
      return uri.replace(
        re,
        \\"$1\\" + key + \\"=\\" + encodeURIComponent(value) + \\"$2\\"
      );
    }
    return uri + separator + key + \\"=\\" + encodeURIComponent(value);
  }
  function tryAppendWidth(url) {
    const match = url.match(/[?&]width=(\\\\d+)/);
    const width = match && match[1];
    if (width) {
      return [url + \\" \\" + width + \\"w\\"];
    }
    return [];
  }
};
export const __passThroughProps__ = function __passThroughProps__(
  dstProps,
  srcProps
) {
  for (const key in srcProps) {
    if (
      Object.prototype.hasOwnProperty.call(srcProps, key) &&
      ((key.startsWith(\\"on\\") && key.endsWith(\\"$\\")) || key == \\"style\\")
    ) {
      dstProps[key] = srcProps[key];
    }
  }
  return dstProps;
};
export const __proxyMerge__ = function __proxyMerge__(state, local) {
  return new Proxy(state, {
    get: (obj, prop) => {
      if (local && prop in local) {
        return local[prop];
      } else {
        return state[prop];
      }
    },
    set: (obj, prop, value) => {
      obj[prop] = value;
      return true;
    },
  });
};
",
}
`;

exports[`qwik > bindings 1`] = `
{
  "high.cjs": "const __proxyMerge__ = (exports.__proxyMerge__ = function __proxyMerge__(
  state,
  local
) {
  return new Proxy(state, {
    get: (obj, prop) => {
      if (local && prop in local) {
        return local[prop];
      } else {
        return state[prop];
      }
    },
    set: (obj, prop, value) => {
      obj[prop] = value;
      return true;
    },
  });
});
",
  "low.cjs": "const Fragment = require(\\"@builder.io/qwik\\").Fragment;
const h = require(\\"@builder.io/qwik\\").h;
const qrl = require(\\"@builder.io/qwik\\").qrl;
const useStore = require(\\"@builder.io/qwik\\").useStore;
const useStylesScopedQrl = require(\\"@builder.io/qwik\\").useStylesScopedQrl;

exports.MyComponentStyles = \`.cjrqfb1{display:flex;flex-direction:column;position:relative;flex-shrink:0;box-sizing:border-box;margin-top:20px;line-height:normal;height:auto;text-align:center}\`;
exports.MyComponentOnMount = (p) => {
  const s = useStore(
    () => {
      const state = Object.assign(
        {},
        structuredClone(
          typeof __STATE__ === \\"object\\" && __STATE__[p.serverStateId]
        ),
        p
      );
      if (!state.hasOwnProperty(\\"title\\")) state.title = '\\"Default title value\\"';
      if (!state.hasOwnProperty(\\"hiliteTitle\\")) state.hiliteTitle = true;
      return state;
    },
    { deep: true }
  );
  const l = {};
  const state = __proxyMerge__(s, l);

  useStylesScopedQrl(qrl(\\"./low.js\\", \\"MyComponentStyles\\", []));

  return h(
    \\"div\\",
    {
      \\"builder-id\\": \\"builder-192569f8d0a943398ec7ab9c327e104f\\",
      class: \\"cjrqfb1 builder-block\\",
      style: {
        backgroundColor: (() => {
          try {
            return state.hilitTitle ? \\"red\\" : \\"gray\\";
          } catch (err) {
            console.warn(\\"Builder code error\\", err);
          }
        })(),
      },
    },
    h(\\"div\\", {
      key: \\"builder-192569f8d0a943398ec7ab9c327e104f\\",
      class: \\"builder-text\\",
      dangerouslySetInnerHTML: state.title,
    })
  );
};
const __proxyMerge__ = (exports.__proxyMerge__ = function __proxyMerge__(
  state,
  local
) {
  return new Proxy(state, {
    get: (obj, prop) => {
      if (local && prop in local) {
        return local[prop];
      } else {
        return state[prop];
      }
    },
    set: (obj, prop, value) => {
      obj[prop] = value;
      return true;
    },
  });
});
",
  "med.cjs": "const componentQrl = require(\\"@builder.io/qwik\\").componentQrl;
const qrl = require(\\"@builder.io/qwik\\").qrl;

exports.MyComponent = componentQrl(qrl(\\"./low.js\\", \\"MyComponentOnMount\\", []));
const __proxyMerge__ = (exports.__proxyMerge__ = function __proxyMerge__(
  state,
  local
) {
  return new Proxy(state, {
    get: (obj, prop) => {
      if (local && prop in local) {
        return local[prop];
      } else {
        return state[prop];
      }
    },
    set: (obj, prop, value) => {
      obj[prop] = value;
      return true;
    },
  });
});
",
}
`;

exports[`qwik > button 1`] = `
{
  "high.js": "export const MyComponent_onClick_0 = (event) => {
  alert(\\"WORKS!\\");
};
export const __proxyMerge__ = function __proxyMerge__(state, local) {
  return new Proxy(state, {
    get: (obj, prop) => {
      if (local && prop in local) {
        return local[prop];
      } else {
        return state[prop];
      }
    },
    set: (obj, prop, value) => {
      obj[prop] = value;
      return true;
    },
  });
};
",
  "low.js": "import { CoreButton } from \\"./med.js\\";

import {
  Fragment,
  h,
  qrl,
  useStore,
  useStylesScopedQrl,
} from \\"@builder.io/qwik\\";

export const MyComponentStyles = \`.c9nzze9{display:flex;flex-direction:column;position:relative;flex-shrink:0;box-sizing:border-box;margin-top:20px;appearance:none;padding-top:15px;padding-bottom:15px;padding-left:25px;padding-right:25px;background-color:#3898EC;color:white;border-radius:4px;text-align:center;cursor:pointer}\`;
export const MyComponentOnMount = (p) => {
  const s = useStore(
    () => {
      const state = Object.assign(
        {},
        structuredClone(
          typeof __STATE__ === \\"object\\" && __STATE__[p.serverStateId]
        ),
        p
      );
      return state;
    },
    { deep: true }
  );
  const l = {};
  const state = __proxyMerge__(s, l);

  useStylesScopedQrl(qrl(\\"./low.js\\", \\"MyComponentStyles\\", []));

  return h(CoreButton, {
    text: \\"Click me!\\",
    class: \\"c9nzze9\\",
    onClick$: qrl(\\"./high.js\\", \\"MyComponent_onClick_0\\", [s, l]),
  });
};
export const __proxyMerge__ = function __proxyMerge__(state, local) {
  return new Proxy(state, {
    get: (obj, prop) => {
      if (local && prop in local) {
        return local[prop];
      } else {
        return state[prop];
      }
    },
    set: (obj, prop, value) => {
      obj[prop] = value;
      return true;
    },
  });
};
",
  "med.js": "import { componentQrl, h, qrl } from \\"@builder.io/qwik\\";

export const MyComponent = componentQrl(
  qrl(\\"./low.js\\", \\"MyComponentOnMount\\", [])
);
export const CoreButton = function CoreButton(props) {
  const hasLink = !!props.link;
  const hProps = {
    dangerouslySetInnerHTML: props.text || \\"\\",
    href: props.link,
    target: props.openInNewTab ? \\"_blank\\" : \\"_self\\",
    class: props.class,
  };
  return h(
    hasLink ? \\"a\\" : props.tagName$ || \\"span\\",
    __passThroughProps__(hProps, props)
  );
};
export const __passThroughProps__ = function __passThroughProps__(
  dstProps,
  srcProps
) {
  for (const key in srcProps) {
    if (
      Object.prototype.hasOwnProperty.call(srcProps, key) &&
      ((key.startsWith(\\"on\\") && key.endsWith(\\"$\\")) || key == \\"style\\")
    ) {
      dstProps[key] = srcProps[key];
    }
  }
  return dstProps;
};
export const __proxyMerge__ = function __proxyMerge__(state, local) {
  return new Proxy(state, {
    get: (obj, prop) => {
      if (local && prop in local) {
        return local[prop];
      } else {
        return state[prop];
      }
    },
    set: (obj, prop, value) => {
      obj[prop] = value;
      return true;
    },
  });
};
",
}
`;

exports[`qwik > component > bindings 1`] = `
{
  "ROOT_COMPONENT_STATE": {
    "deviceSize": "large",
    "location": {
      "path": "",
      "query": {},
    },
    "something": "works!",
  },
  "w8x6w6": {
    "deviceSize": "large",
    "location": {
      "path": "",
      "query": {},
    },
  },
}
`;

exports[`qwik > component > bindings 2`] = `
{
  "high.jsx": "export const __proxyMerge__ = function __proxyMerge__(state, local) {
  return new Proxy(state, {
    get: (obj, prop) => {
      if (local && prop in local) {
        return local[prop];
      } else {
        return state[prop];
      }
    },
    set: (obj, prop, value) => {
      obj[prop] = value;
      return true;
    },
  });
};
",
  "low.jsx": "import { ComponentD187055AF171488FAD843ACF045D6BF7 } from \\"./med.js\\";

import {
  Fragment,
  h,
  qrl,
  useStore,
  useStylesScopedQrl,
} from \\"@builder.io/qwik\\";

export const ComponentD187055AF171488FAD843ACF045D6BF7Styles = \`.cj49hqu{display:flex;flex-direction:column;position:relative;flex-shrink:0;box-sizing:border-box;margin-top:20px;height:auto;background-color:rgba(227, 227, 227, 1);border-radius:5px;border-style:solid;border-color:rgb(0, 0, 0);border-width:1px;padding-bottom:30px}.cjrqfb1{display:flex;flex-direction:column;position:relative;flex-shrink:0;box-sizing:border-box;margin-top:20px;line-height:normal;height:auto;text-align:center}\`;
export const ComponentD187055AF171488FAD843ACF045D6BF7OnMount = (p) => {
  const s = useStore(
    () => {
      const state = Object.assign(
        {},
        structuredClone(
          typeof __STATE__ === \\"object\\" && __STATE__[p.serverStateId]
        ),
        p
      );
      if (!state.hasOwnProperty(\\"title\\")) state.title = \\"default-title\\";
      return state;
    },
    { deep: true }
  );
  const l = {};
  const state = __proxyMerge__(s, l);

  useStylesScopedQrl(
    qrl(\\"./low.js\\", \\"ComponentD187055AF171488FAD843ACF045D6BF7Styles\\", [])
  );

  return (
    <div
      builder-id=\\"builder-139a8479536b4c4f9c2738e724ed0952\\"
      class=\\"cj49hqu builder-block\\"
    >
      <div
        builder-id=\\"builder-2ae3b4104cc0478e85eff49694792d9c\\"
        class=\\"cjrqfb1\\"
      >
        <div
          key=\\"builder-2ae3b4104cc0478e85eff49694792d9c\\"
          class=\\"builder-text\\"
          dangerouslySetInnerHTML={state.title}
        ></div>
      </div>
    </div>
  );
};
export const __proxyMerge__ = function __proxyMerge__(state, local) {
  return new Proxy(state, {
    get: (obj, prop) => {
      if (local && prop in local) {
        return local[prop];
      } else {
        return state[prop];
      }
    },
    set: (obj, prop, value) => {
      obj[prop] = value;
      return true;
    },
  });
};
export const MyComponentStyles = \`.c713ty2{display:flex;flex-direction:column;position:relative;flex-shrink:0;box-sizing:border-box;margin-top:20px}\`;
export const MyComponentOnMount = (p) => {
  const s = useStore(
    () => {
      const state = Object.assign(
        {},
        structuredClone(
          typeof __STATE__ === \\"object\\" && __STATE__[p.serverStateId]
        ),
        p
      );
      /*
       * Global objects available:
       *
       * state - builder state object - learn about state https://www.builder.io/c/docs/guides/state-and-actions
       * context - builder context object - learn about state https://github.com/BuilderIO/builder/tree/main/packages/react#passing-data-and-functions-down
       * fetch - Fetch API - https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API'
       * Builder - Builder object - useful values include: Builder.isServer, Builder.isBrowser, Builder.isPreviewing, Builder.isEditing
       *
       * visit https://www.builder.io/c/docs/guides/custom-code
       * for more information on writing custom code
       */
      async function main() {
        if (Builder.isServer) {
          // Place any code here you want to only run on the server. Any
          // data fetched on the server will be available to re-hydrate on the client
          // if added to the state object
        }

        if (Builder.isBrowser) {
          // Place code that you only want to run in the browser (client side only) here
          // For example, anything that uses document/window access or DOM manipulation
        }

        state.something = \\"works!\\";
      }
      return state;
    },
    { deep: true }
  );
  const l = {};
  const state = __proxyMerge__(s, l);

  useStylesScopedQrl(qrl(\\"./low.js\\", \\"MyComponentStyles\\", []));

  return (
    <>
      <div
        builder-id=\\"builder-50b2438beaa4498b985eb9d8a7659afa\\"
        builder-content-id=\\"d187055af171488fad843acf045d6bf7\\"
        class=\\"c713ty2 builder-block\\"
      >
        <ComponentD187055AF171488FAD843ACF045D6BF7
          builder-content-id=\\"d187055af171488fad843acf045d6bf7\\"
          builder-id=\\"builder-dbaw2p\\"
          title=\\"First title from parent\\"
          serverStateId=\\"w8x6w6\\"
        ></ComponentD187055AF171488FAD843ACF045D6BF7>
      </div>
      <div
        builder-id=\\"builder-33f427415bef4725b0c9fcd4fed325f2\\"
        builder-content-id=\\"d187055af171488fad843acf045d6bf7\\"
        class=\\"c713ty2 builder-block\\"
      >
        <ComponentD187055AF171488FAD843ACF045D6BF7
          builder-content-id=\\"d187055af171488fad843acf045d6bf7\\"
          builder-id=\\"builder-ahaljp\\"
          title=\\"Second title from parent\\"
          serverStateId=\\"w8x6w6\\"
        ></ComponentD187055AF171488FAD843ACF045D6BF7>
      </div>
    </>
  );
};
",
  "med.jsx": "import { componentQrl, qrl } from \\"@builder.io/qwik\\";

export const ComponentD187055AF171488FAD843ACF045D6BF7 = componentQrl(
  qrl(\\"./low.js\\", \\"ComponentD187055AF171488FAD843ACF045D6BF7OnMount\\", [])
);
export const __proxyMerge__ = function __proxyMerge__(state, local) {
  return new Proxy(state, {
    get: (obj, prop) => {
      if (local && prop in local) {
        return local[prop];
      } else {
        return state[prop];
      }
    },
    set: (obj, prop, value) => {
      obj[prop] = value;
      return true;
    },
  });
};
export const MyComponent = componentQrl(
  qrl(\\"./low.js\\", \\"MyComponentOnMount\\", [])
);
",
}
`;

exports[`qwik > component > component inputs 1`] = `{}`;

exports[`qwik > component > component inputs 2`] = `
{
  "high.cjsx": "const useLexicalScope = require(\\"@builder.io/qwik\\").useLexicalScope;

exports.MyComponent_onClick_0 = (event) => {
  const [s, l] = useLexicalScope();
  const state = __proxyMerge__(s, l);
  try {
    return (state.data = state.data + 1);
  } catch (err) {
    console.warn(\\"Builder code error\\", err);
  }
};
const __proxyMerge__ = (exports.__proxyMerge__ = function __proxyMerge__(
  state,
  local
) {
  return new Proxy(state, {
    get: (obj, prop) => {
      if (local && prop in local) {
        return local[prop];
      } else {
        return state[prop];
      }
    },
    set: (obj, prop, value) => {
      obj[prop] = value;
      return true;
    },
  });
});
",
  "low.cjsx": "const __proxyMerge__ = (exports.__proxyMerge__ = function __proxyMerge__(
  state,
  local
) {
  return new Proxy(state, {
    get: (obj, prop) => {
      if (local && prop in local) {
        return local[prop];
      } else {
        return state[prop];
      }
    },
    set: (obj, prop, value) => {
      obj[prop] = value;
      return true;
    },
  });
});
",
  "med.cjsx": "const Fragment = require(\\"@builder.io/qwik\\").Fragment;
const componentQrl = require(\\"@builder.io/qwik\\").componentQrl;
const h = require(\\"@builder.io/qwik\\").h;
const qrl = require(\\"@builder.io/qwik\\").qrl;
const useStore = require(\\"@builder.io/qwik\\").useStore;
const useStylesScopedQrl = require(\\"@builder.io/qwik\\").useStylesScopedQrl;

exports.MyComponentStyles = \`.cjrqfb1{display:flex;flex-direction:column;position:relative;flex-shrink:0;box-sizing:border-box;margin-top:20px;line-height:normal;height:auto;text-align:center}.c9nzze9{display:flex;flex-direction:column;position:relative;flex-shrink:0;box-sizing:border-box;margin-top:20px;appearance:none;padding-top:15px;padding-bottom:15px;padding-left:25px;padding-right:25px;background-color:#3898EC;color:white;border-radius:4px;text-align:center;cursor:pointer}\`;
exports.MyComponentOnMount = (p) => {
  const s = useStore(
    () => {
      const state = Object.assign(
        {},
        structuredClone(
          typeof __STATE__ === \\"object\\" && __STATE__[p.serverStateId]
        ),
        p
      );
      if (!state.hasOwnProperty(\\"data\\")) state.data = 0;
      return state;
    },
    { deep: true }
  );
  const l = {};
  const state = __proxyMerge__(s, l);

  useStylesScopedQrl(qrl(\\"./med.js\\", \\"MyComponentStyles\\", []));

  return (
    <>
      <div
        builder-id=\\"builder-71f26e4ffffe4e24940aa12e5250fa5f\\"
        class=\\"cjrqfb1 builder-block\\"
      >
        <div
          key=\\"builder-71f26e4ffffe4e24940aa12e5250fa5f\\"
          class=\\"builder-text\\"
          dangerouslySetInnerHTML={state.data}
        ></div>
      </div>
      <CoreButton
        builder-id=\\"builder-6f8fe6a1d2284f2890ae97657eed084a\\"
        text=\\"Something else\\"
        class=\\"c9nzze9 builder-block\\"
        onClick$={qrl(\\"./high.js\\", \\"MyComponent_onClick_0\\", [s, l])}
      ></CoreButton>
    </>
  );
};
exports.MyComponent = componentQrl(qrl(\\"./med.js\\", \\"MyComponentOnMount\\", []));
const CoreButton = (exports.CoreButton = function CoreButton(props) {
  const hasLink = !!props.link;
  const hProps = {
    dangerouslySetInnerHTML: props.text || \\"\\",
    href: props.link,
    target: props.openInNewTab ? \\"_blank\\" : \\"_self\\",
    class: props.class,
  };
  return h(
    hasLink ? \\"a\\" : props.tagName$ || \\"span\\",
    __passThroughProps__(hProps, props)
  );
});
const __passThroughProps__ = (exports.__passThroughProps__ =
  function __passThroughProps__(dstProps, srcProps) {
    for (const key in srcProps) {
      if (
        Object.prototype.hasOwnProperty.call(srcProps, key) &&
        ((key.startsWith(\\"on\\") && key.endsWith(\\"$\\")) || key == \\"style\\")
      ) {
        dstProps[key] = srcProps[key];
      }
    }
    return dstProps;
  });
const __proxyMerge__ = (exports.__proxyMerge__ = function __proxyMerge__(
  state,
  local
) {
  return new Proxy(state, {
    get: (obj, prop) => {
      if (local && prop in local) {
        return local[prop];
      } else {
        return state[prop];
      }
    },
    set: (obj, prop, value) => {
      obj[prop] = value;
      return true;
    },
  });
});
",
}
`;

exports[`qwik > for-loop.bindings 1`] = `
{
  "high.cjs": "const __proxyMerge__ = (exports.__proxyMerge__ = function __proxyMerge__(
  state,
  local
) {
  return new Proxy(state, {
    get: (obj, prop) => {
      if (local && prop in local) {
        return local[prop];
      } else {
        return state[prop];
      }
    },
    set: (obj, prop, value) => {
      obj[prop] = value;
      return true;
    },
  });
});
",
  "low.cjs": "const Component000013 = require(\\"./med.js\\").Component000013;

const Fragment = require(\\"@builder.io/qwik\\").Fragment;
const h = require(\\"@builder.io/qwik\\").h;
const qrl = require(\\"@builder.io/qwik\\").qrl;
const useStore = require(\\"@builder.io/qwik\\").useStore;
const useStylesScopedQrl = require(\\"@builder.io/qwik\\").useStylesScopedQrl;

exports.Component000012Styles = \`.cv6ku2d{display:flex;flex-direction:row;position:relative;flex-shrink:0;box-sizing:border-box;margin-top:20px;padding-bottom:30px;flex-wrap:wrap;width:calc(100%+3vw);height:100%;min-height:100%;margin-left:-1.5vw;margin-right:-1.5vw}.c3j7e6c{display:flex;flex-direction:column;position:relative;flex-shrink:0;box-sizing:border-box;margin-top:20px;width:33.3%}@media (max-width: 991px){.cv6ku2d{width:100%;margin-left:auto;margin-right:auto}}@media (max-width: 640px){.cv6ku2d{display:flex;flex-direction:column;align-items:stretch}}@media (max-width: 640px){.c3j7e6c{width:98%;margin-left:auto;margin-right:auto;margin-top:-10px}}\`;
exports.Component000012OnMount = (p) => {
  const s = useStore(
    () => {
      const state = Object.assign(
        {},
        structuredClone(
          typeof __STATE__ === \\"object\\" && __STATE__[p.serverStateId]
        ),
        p
      );
      if (!state.hasOwnProperty(\\"offset\\")) state.offset = \\"0\\";
      if (!state.hasOwnProperty(\\"limit\\")) state.limit = 3;
      if (!state.hasOwnProperty(\\"blogCategory\\"))
        state.blogCategory = {
          \\"@type\\": \\"@builder.io/core:Reference\\",
          id: \\"\\",
          model: \\"\\",
        };
      return state;
    },
    { deep: true }
  );
  const l = {};
  const state = __proxyMerge__(s, l);

  useStylesScopedQrl(qrl(\\"./low.js\\", \\"Component000012Styles\\", []));

  return h(
    \\"div\\",
    {
      \\"builder-id\\": \\"builder-d2b6ee30433348ffa51a17334b8b6c73\\",
      class: \\"cv6ku2d builder-block\\",
    },
    (state.hits || []).map(
      ((item) => {
        const l = { ...this, hitsItem: item == null ? {} : item, item: item };
        const state = __proxyMerge__(s, l);
        return h(
          \\"div\\",
          {
            \\"builder-id\\": \\"builder-cc43bc95cde743a59b269cb0157b99cd\\",
            class: \\"c3j7e6c\\",
          },
          h(Component000013, {
            \\"builder-id\\": \\"builder-cx8eewmyu3\\",
            altText: \\"\\",
            serverStateId: \\"woo8b6\\",
            title: state.hitsItem.name,
            linkUrl: state.hitsItem.url,
            subCategory: state.hitsItem.blogSubcategory,
            imageUrl: state.hitsItem.heroImage,
            publicationDate: state.hitsItem.createdDate,
            heroImageAltText: state.hitsItem.heroImageAltText,
          })
        );
      }).bind(l)
    )
  );
};
const __proxyMerge__ = (exports.__proxyMerge__ = function __proxyMerge__(
  state,
  local
) {
  return new Proxy(state, {
    get: (obj, prop) => {
      if (local && prop in local) {
        return local[prop];
      } else {
        return state[prop];
      }
    },
    set: (obj, prop, value) => {
      obj[prop] = value;
      return true;
    },
  });
});
",
  "med.cjs": "const componentQrl = require(\\"@builder.io/qwik\\").componentQrl;
const h = require(\\"@builder.io/qwik\\").h;
const qrl = require(\\"@builder.io/qwik\\").qrl;

exports.Component000012 = componentQrl(
  qrl(\\"./low.js\\", \\"Component000012OnMount\\", [])
);
const __proxyMerge__ = (exports.__proxyMerge__ = function __proxyMerge__(
  state,
  local
) {
  return new Proxy(state, {
    get: (obj, prop) => {
      if (local && prop in local) {
        return local[prop];
      } else {
        return state[prop];
      }
    },
    set: (obj, prop, value) => {
      obj[prop] = value;
      return true;
    },
  });
});
",
}
`;

exports[`qwik > hello_world > stylesheet 1`] = `
{
  "high.jsx": "export const __proxyMerge__ = function __proxyMerge__(state, local) {
  return new Proxy(state, {
    get: (obj, prop) => {
      if (local && prop in local) {
        return local[prop];
      } else {
        return state[prop];
      }
    },
    set: (obj, prop, value) => {
      obj[prop] = value;
      return true;
    },
  });
};
",
  "low.jsx": "import {
  Fragment,
  h,
  qrl,
  useStore,
  useStylesScopedQrl,
} from \\"@builder.io/qwik\\";

export const MyComponentStyles = \`.crt27f8{display:flex;flex-direction:column;position:relative;flex-shrink:0;box-sizing:border-box;margin-top:123px;line-height:normal;height:auto;text-align:center;margin-left:auto;margin-right:auto}\`;
export const MyComponentOnMount = (p) => {
  const s = useStore(
    () => {
      const state = Object.assign(
        {},
        structuredClone(
          typeof __STATE__ === \\"object\\" && __STATE__[p.serverStateId]
        ),
        p
      );
      return state;
    },
    { deep: true }
  );
  const l = {};
  const state = __proxyMerge__(s, l);

  useStylesScopedQrl(qrl(\\"./low.js\\", \\"MyComponentStyles\\", []));

  return (
    <div class=\\"crt27f8\\">
      <p>
        Hello <span class=\\"names\\">World</span>
      </p>
    </div>
  );
};
export const __proxyMerge__ = function __proxyMerge__(state, local) {
  return new Proxy(state, {
    get: (obj, prop) => {
      if (local && prop in local) {
        return local[prop];
      } else {
        return state[prop];
      }
    },
    set: (obj, prop, value) => {
      obj[prop] = value;
      return true;
    },
  });
};
",
  "med.jsx": "import { componentQrl, qrl } from \\"@builder.io/qwik\\";

export const MyComponent = componentQrl(
  qrl(\\"./low.js\\", \\"MyComponentOnMount\\", [])
);
export const __proxyMerge__ = function __proxyMerge__(state, local) {
  return new Proxy(state, {
    get: (obj, prop) => {
      if (local && prop in local) {
        return local[prop];
      } else {
        return state[prop];
      }
    },
    set: (obj, prop, value) => {
      obj[prop] = value;
      return true;
    },
  });
};
",
}
`;

exports[`qwik > jsx > Javascript Test > Basic 1`] = `
"import {
  $,
  Fragment,
  component$,
  h,
  useStore,
  useStylesScoped$,
} from \\"@builder.io/qwik\\";

export const DEFAULT_VALUES = {
  name: \\"Steve\\",
};
export const underscore_fn_name = function underscore_fn_name(props, state) {
  return \\"bar\\";
};
export const MyBasicComponent = component$((props) => {
  useStylesScoped$(STYLES);

  const state = useStore({ age: 1, name: \\"Steve\\", sports: [\\"\\"] });

  return (
    <div class=\\"test div-MyBasicComponent\\">
      <input
        value={DEFAULT_VALUES.name || state.name}
        onChange$={$((event) => (state.name = myEvent.target.value))}
      />
      Hello! I can run in React, Vue, Solid, or Liquid!
    </div>
  );
});

export default MyBasicComponent;

export const STYLES = \`
.div-MyBasicComponent {
  padding: 10px;
}
\`;
"
`;

exports[`qwik > jsx > Javascript Test > Basic 2`] = `
"import { $, Fragment, component$, h, useStore } from \\"@builder.io/qwik\\";

export const MyBasicForShowComponent = component$((props) => {
  const state = useStore({ name: \\"PatrickJS\\", names: [\\"Steve\\", \\"PatrickJS\\"] });

  return (
    <div>
      {(state.names || []).map((person) => {
        return person === state.name ? (
          <>
            <input
              value={state.name}
              onChange$={$((event) => {
                state.name = event.target.value + \\" and \\" + person;
              })}
            />
            Hello {person}! I can run in Qwik, Web Component, React, Vue, Solid,
            or Liquid!
          </>
        ) : null;
      })}
    </div>
  );
});

export default MyBasicForShowComponent;
"
`;

exports[`qwik > jsx > Javascript Test > Basic Context 1`] = `
"import {
  $,
  Fragment,
  component$,
  h,
  useContext,
  useContextProvider,
  useStore,
  useTask$,
  useVisibleTask$,
} from \\"@builder.io/qwik\\";

import { Injector, MyService, createInjector } from \\"@dummy/injection-js\\";

export const onChange = function onChange(props, state, myService) {
  const change = myService.method(\\"change\\");
  console.log(change);
};
export const MyBasicComponent = component$((props) => {
  const myService = useContext(MyService);
  const state = useStore({ name: \\"PatrickJS\\" });
  useContextProvider(Injector, createInjector());
  useVisibleTask$(() => {
    const bye = myService.method(\\"hi\\");
    console.log(bye);
  });
  useTask$(() => {
    const hi = myService.method(\\"hi\\");
    console.log(hi);
  });

  return (
    <div>
      {myService.method(\\"hello\\") + state.name}
      Hello! I can run in React, Vue, Solid, or Liquid!
      <input onChange$={$((event) => state.onChange)} />
    </div>
  );
});

export default MyBasicComponent;
"
`;

exports[`qwik > jsx > Javascript Test > Basic OnMount Update 1`] = `
"import {
  Fragment,
  component$,
  h,
  useStore,
  useTask$,
  useVisibleTask$,
} from \\"@builder.io/qwik\\";

export const MyBasicOnMountUpdateComponent = component$((props) => {
  const state = useStore({ name: \\"PatrickJS\\", names: [\\"Steve\\", \\"PatrickJS\\"] });
  useVisibleTask$(() => {
    state.name = \\"PatrickJS onMount\\" + props.bye;
  });
  useTask$(() => {
    state.name = \\"PatrickJS onInit\\" + props.hi;
  });

  return <div>Hello {state.name}</div>;
});

export default MyBasicOnMountUpdateComponent;
"
`;

exports[`qwik > jsx > Javascript Test > Basic Outputs 1`] = `
"import {
  Fragment,
  component$,
  h,
  useStore,
  useVisibleTask$,
} from \\"@builder.io/qwik\\";

export const MyBasicOutputsComponent = component$((props) => {
  const state = useStore({ name: \\"PatrickJS\\" });
  useVisibleTask$(() => {
    props.onMessage(state.name);
    props.onEvent(props.message);
  });

  return <div></div>;
});

export default MyBasicOutputsComponent;
"
`;

exports[`qwik > jsx > Javascript Test > Basic Outputs Meta 1`] = `
"import {
  Fragment,
  component$,
  h,
  useStore,
  useVisibleTask$,
} from \\"@builder.io/qwik\\";

export const MyBasicOutputsComponent = component$((props) => {
  const state = useStore({ name: \\"PatrickJS\\" });
  useVisibleTask$(() => {
    props.onMessage(state.name);
    props.onEvent(props.message);
  });

  return <div></div>;
});

export default MyBasicOutputsComponent;
"
`;

exports[`qwik > jsx > Javascript Test > BasicAttribute 1`] = `
"import { Fragment, component$, h } from \\"@builder.io/qwik\\";

export const MyComponent = component$((props) => {
  return <input autocapitalize=\\"on\\" autocomplete=\\"on\\" spellcheck={true} />;
});

export default MyComponent;
"
`;

exports[`qwik > jsx > Javascript Test > BasicBooleanAttribute 1`] = `
"import MyBooleanAttributeComponent from \\"./basic-boolean-attribute-component.raw\\";

import { Fragment, Slot, component$, h } from \\"@builder.io/qwik\\";

export const MyBooleanAttribute = component$((props) => {
  return (
    <div>
      {props.children ? (
        <>
          <Slot></Slot>
          {props.type}
        </>
      ) : null}
      <MyBooleanAttributeComponent toggle={true}></MyBooleanAttributeComponent>
      <MyBooleanAttributeComponent toggle={true}></MyBooleanAttributeComponent>
      <MyBooleanAttributeComponent list={null}></MyBooleanAttributeComponent>
    </div>
  );
});

export default MyBooleanAttribute;
"
`;

exports[`qwik > jsx > Javascript Test > BasicChildComponent 1`] = `
"import MyBasicOnMountUpdateComponent from \\"./basic-onMount-update.raw\\";

import MyBasicComponent from \\"./basic.raw\\";

import { Fragment, component$, h, useStore } from \\"@builder.io/qwik\\";

export const MyBasicChildComponent = component$((props) => {
  const state = useStore({ dev: \\"PatrickJS\\", name: \\"Steve\\" });

  return (
    <div>
      <MyBasicComponent id={state.dev}></MyBasicComponent>
      <div>
        <MyBasicOnMountUpdateComponent
          hi={state.name}
          bye={state.dev}
        ></MyBasicOnMountUpdateComponent>
      </div>
    </div>
  );
});

export default MyBasicChildComponent;
"
`;

exports[`qwik > jsx > Javascript Test > BasicFor 1`] = `
"import {
  $,
  Fragment,
  component$,
  h,
  useStore,
  useVisibleTask$,
} from \\"@builder.io/qwik\\";

export const MyBasicForComponent = component$((props) => {
  const state = useStore({ name: \\"PatrickJS\\", names: [\\"Steve\\", \\"PatrickJS\\"] });
  useVisibleTask$(() => {
    console.log(\\"onMount code\\");
  });

  return (
    <div>
      {(state.names || []).map((person) => {
        return (
          <Fragment>
            <input
              value={state.name}
              onChange$={$((event) => {
                state.name = event.target.value + \\" and \\" + person;
              })}
            />
            Hello {person}! I can run in Qwik, Web Component, React, Vue, Solid,
            or Liquid!
          </Fragment>
        );
      })}
    </div>
  );
});

export default MyBasicForComponent;
"
`;

exports[`qwik > jsx > Javascript Test > BasicRef 1`] = `
"import {
  $,
  Fragment,
  component$,
  h,
  useSignal,
  useStore,
  useStylesScoped$,
} from \\"@builder.io/qwik\\";

export const onBlur = function onBlur(props, state, inputRef, inputNoArgRef) {
  // Maintain focus
  inputRef.value.focus();
};
export const lowerCaseName = function lowerCaseName(
  props,
  state,
  inputRef,
  inputNoArgRef
) {
  return state.name.toLowerCase();
};
export const MyBasicRefComponent = component$((props) => {
  useStylesScoped$(STYLES);

  const inputRef = useSignal();
  const inputNoArgRef = useSignal();
  const state = useStore({ name: \\"PatrickJS\\" });

  return (
    <div>
      {props.showInput ? (
        <Fragment>
          <input
            class=\\"input-MyBasicRefComponent\\"
            ref={inputRef}
            value={state.name}
            onBlur$={$((event) => state.onBlur())}
            onChange$={$((event) => (state.name = event.target.value))}
          />
          <label for=\\"cars\\" ref={inputNoArgRef}>
            Choose a car:
          </label>
          <select name=\\"cars\\" id=\\"cars\\">
            <option value=\\"supra\\">GR Supra</option>
            <option value=\\"86\\">GR 86</option>
          </select>
        </Fragment>
      ) : null}
      Hello
      {state.lowerCaseName()}! I can run in React, Qwik, Vue, Solid, or Web
      Component!
    </div>
  );
});

export default MyBasicRefComponent;

export const STYLES = \`
.input-MyBasicRefComponent {
  color: red;
}
\`;
"
`;

exports[`qwik > jsx > Javascript Test > BasicRefAssignment 1`] = `
"import { $, Fragment, component$, h, useSignal } from \\"@builder.io/qwik\\";

export const handlerClick = function handlerClick(
  props,
  state,
  holdValueRef,
  event
) {
  event.preventDefault();
  console.log(\\"current value\\", holdValueRef.value);
  holdValueRef.value = holdValueRef.value + \\"JS\\";
};
export const MyBasicRefAssignmentComponent = component$((props) => {
  const holdValueRef = useSignal();
  const state = {};

  return (
    <div>
      <button onClick$={$((event) => state.handlerClick(evt))}>Click</button>
    </div>
  );
});

export default MyBasicRefAssignmentComponent;
"
`;

exports[`qwik > jsx > Javascript Test > BasicRefPrevious 1`] = `
"import {
  $,
  Fragment,
  component$,
  h,
  useSignal,
  useStore,
  useTask$,
} from \\"@builder.io/qwik\\";

export function usePrevious(value) {
  // The ref object is a generic container whose current property is mutable ...
  // ... and can hold any value, similar to an instance property on a class
  let ref = useRef(null); // Store current value in ref

  onUpdate(() => {
    ref = value;
  }, [value]); // Only re-run if value changes
  // Return previous value (happens before update in useEffect above)

  return ref;
}
export const MyPreviousComponent = component$((props) => {
  const prevCount = useSignal();
  const state = useStore({ count: 0 });
  useTask$(({ track }) => {
    track(() => state.count);
    prevCount.value = state.count;
  });

  return (
    <div>
      <h1>
        Now: {state.count}, before: {prevCount.value}
      </h1>
      <button onClick$={$((event) => (state.count += 1))}>Increment</button>
    </div>
  );
});

export default MyPreviousComponent;
"
`;

exports[`qwik > jsx > Javascript Test > Button 1`] = `
"import { Fragment, component$, h } from \\"@builder.io/qwik\\";

export const Button = component$((props) => {
  return (
    <div>
      {props.link ? (
        <a
          {...props.attributes}
          href={props.link}
          target={props.openLinkInNewTab ? \\"_blank\\" : undefined}
        >
          {props.text}
        </a>
      ) : null}
      {!props.link ? (
        <button type=\\"button\\" {...props.attributes}>
          {props.text}
        </button>
      ) : null}
    </div>
  );
});

export default Button;
"
`;

exports[`qwik > jsx > Javascript Test > Columns 1`] = `
"import { Fragment, component$, h, useStylesScoped$ } from \\"@builder.io/qwik\\";

export const getColumns = function getColumns(props, state) {
  return props.columns || [];
};
export const getGutterSize = function getGutterSize(props, state) {
  return typeof props.space === \\"number\\" ? props.space || 0 : 20;
};
export const getWidth = function getWidth(props, state, index) {
  const columns = getColumns(props, state);
  return (columns[index] && columns[index].width) || 100 / columns.length;
};
export const getColumnCssWidth = function getColumnCssWidth(
  props,
  state,
  index
) {
  const columns = getColumns(props, state);
  const gutterSize = getGutterSize(props, state);
  const subtractWidth = (gutterSize * (columns.length - 1)) / columns.length;
  return \`calc(\${getWidth(props, state, index)}% - \${subtractWidth}px)\`;
};
export const Column = component$((props) => {
  useStylesScoped$(STYLES);

  const state = {};

  return (
    <div class=\\"builder-columns div-Column\\">
      {(props.columns || []).map((column, index) => {
        return (
          <div class=\\"builder-column div-Column-2\\">
            {column.content}
            {index}
          </div>
        );
      })}
    </div>
  );
});

export default Column;

export const STYLES = \`
.div-Column {
  display: flex;
  flex-direction: column;
  align-items: stretch;
  line-height: normal;
}
@media (max-width: 999px) {
  .div-Column {
    flex-direction: row;
  }
}
@media (max-width: 639px) {
  .div-Column {
    flex-direction: row-reverse;
  }
}
.div-Column-2 {
  flex-grow: 1;
}
\`;
"
`;

exports[`qwik > jsx > Javascript Test > ContentSlotHtml 1`] = `
"import { Fragment, Slot, component$, h } from \\"@builder.io/qwik\\";

export const ContentSlotCode = component$((props) => {
  return (
    <div>
      <Slot name={props.slotTesting}></Slot>
      <div>
        <hr />
      </div>
      <div>
        <Slot></Slot>
      </div>
    </div>
  );
});

export default ContentSlotCode;
"
`;

exports[`qwik > jsx > Javascript Test > ContentSlotJSX 1`] = `
"import {
  $,
  Fragment,
  Slot,
  component$,
  h,
  useComputed$,
  useStore,
} from \\"@builder.io/qwik\\";

export const show = function show(props, state, cls) {
  props.slotContent ? 1 : \\"\\";
};
export const ContentSlotJsxCode = component$((props) => {
  const cls = useComputed$(() => {
    return props.slotContent && props.children ? \`\${state.name}-content\` : \\"\\";
  });
  const state = useStore({ name: \\"king\\", showContent: false });

  return (
    <>
      {props.slotReference ? (
        <div
          name={props.slotContent ? \\"name1\\" : \\"name2\\"}
          title={props.slotContent ? \\"title1\\" : \\"title2\\"}
          {...props.attributes}
          onClick$={$((event) => show(props, state, cls))}
          class={cls.value}
        >
          {state.showContent && props.slotContent ? (
            <Slot name=\\"content\\">{props.content}</Slot>
          ) : null}
          <div>
            <hr />
          </div>
          <div>
            <Slot></Slot>
          </div>
        </div>
      ) : null}
    </>
  );
});

export default ContentSlotJsxCode;
"
`;

exports[`qwik > jsx > Javascript Test > CustomCode 1`] = `
"import {
  Fragment,
  component$,
  h,
  useSignal,
  useStore,
  useVisibleTask$,
} from \\"@builder.io/qwik\\";

export const findAndRunScripts = function findAndRunScripts(
  props,
  state,
  elem
) {
  // TODO: Move this function to standalone one in '@builder.io/utils'
  if (elem.value && typeof window !== \\"undefined\\") {
    /** @type {HTMLScriptElement[]} */
    const scripts = elem.value.getElementsByTagName(\\"script\\");

    for (let i = 0; i < scripts.length; i++) {
      const script = scripts[i];

      if (script.src) {
        if (state.scriptsInserted.includes(script.src)) {
          continue;
        }

        state.scriptsInserted.push(script.src);
        const newScript = document.createElement(\\"script\\");
        newScript.async = true;
        newScript.src = script.src;
        document.head.appendChild(newScript);
      } else if (
        !script.type ||
        [
          \\"text/javascript\\",
          \\"application/javascript\\",
          \\"application/ecmascript\\",
        ].includes(script.type)
      ) {
        if (state.scriptsRun.includes(script.innerText)) {
          continue;
        }

        try {
          state.scriptsRun.push(script.innerText);
          new Function(script.innerText)();
        } catch (error) {
          console.warn(\\"\`CustomCode\`: Error running script:\\", error);
        }
      }
    }
  }
};
export const CustomCode = component$((props) => {
  const elem = useSignal();
  const state = useStore({ scriptsInserted: [], scriptsRun: [] });
  useVisibleTask$(() => {
    findAndRunScripts(props, state, elem);
  });

  return (
    <div
      ref={elem}
      class={
        \\"builder-custom-code\\" + (props.replaceNodes ? \\" replace-nodes\\" : \\"\\")
      }
      dangerouslySetInnerHTML={props.code}
    ></div>
  );
});

export default CustomCode;
"
`;

exports[`qwik > jsx > Javascript Test > Embed 1`] = `
"import {
  Fragment,
  component$,
  h,
  useSignal,
  useStore,
  useVisibleTask$,
} from \\"@builder.io/qwik\\";

export const findAndRunScripts = function findAndRunScripts(
  props,
  state,
  elem
) {
  // TODO: Move this function to standalone one in '@builder.io/utils'
  if (elem.value && typeof window !== \\"undefined\\") {
    /** @type {HTMLScriptElement[]} */
    const scripts = elem.value.getElementsByTagName(\\"script\\");

    for (let i = 0; i < scripts.length; i++) {
      const script = scripts[i];

      if (script.src) {
        if (state.scriptsInserted.includes(script.src)) {
          continue;
        }

        state.scriptsInserted.push(script.src);
        const newScript = document.createElement(\\"script\\");
        newScript.async = true;
        newScript.src = script.src;
        document.head.appendChild(newScript);
      } else if (
        !script.type ||
        [
          \\"text/javascript\\",
          \\"application/javascript\\",
          \\"application/ecmascript\\",
        ].includes(script.type)
      ) {
        if (state.scriptsRun.includes(script.innerText)) {
          continue;
        }

        try {
          state.scriptsRun.push(script.innerText);
          new Function(script.innerText)();
        } catch (error) {
          console.warn(\\"\`CustomCode\`: Error running script:\\", error);
        }
      }
    }
  }
};
export const CustomCode = component$((props) => {
  const elem = useSignal();
  const state = useStore({ scriptsInserted: [], scriptsRun: [] });
  useVisibleTask$(() => {
    findAndRunScripts(props, state, elem);
  });

  return (
    <div
      ref={elem}
      class={
        \\"builder-custom-code\\" + (props.replaceNodes ? \\" replace-nodes\\" : \\"\\")
      }
      dangerouslySetInnerHTML={props.code}
    ></div>
  );
});

export default CustomCode;
"
`;

exports[`qwik > jsx > Javascript Test > Form 1`] = `
"import {
  $,
  Fragment,
  component$,
  h,
  useComputed$,
  useSignal,
  useStore,
  useStylesScoped$,
} from \\"@builder.io/qwik\\";

import { Builder, builder } from \\"@builder.io/sdk\\";

import {
  BuilderBlock as BuilderBlockComponent,
  BuilderBlocks,
  get,
  set,
} from \\"@fake\\";

export const onSubmit = function onSubmit(
  props,
  state,
  submissionState,
  formRef,
  event
) {
  const sendWithJs = props.sendWithJs || props.sendSubmissionsTo === \\"email\\";

  if (props.sendSubmissionsTo === \\"zapier\\") {
    event.preventDefault();
  } else if (sendWithJs) {
    if (!(props.action || props.sendSubmissionsTo === \\"email\\")) {
      event.preventDefault();
      return;
    }

    event.preventDefault();
    const el = event.currentTarget;
    const headers = props.customHeaders || {};
    let body;
    const formData = new FormData(el); // TODO: maybe support null

    const formPairs = Array.from(
      event.currentTarget.querySelectorAll(\\"input,select,textarea\\")
    )
      .filter((el) => !!el.name)
      .map((el) => {
        let value;
        const key = el.name;

        if (el instanceof HTMLInputElement) {
          if (el.type === \\"radio\\") {
            if (el.checked) {
              value = el.name;
              return {
                key,
                value,
              };
            }
          } else if (el.type === \\"checkbox\\") {
            value = el.checked;
          } else if (el.type === \\"number\\" || el.type === \\"range\\") {
            const num = el.valueAsNumber;

            if (!isNaN(num)) {
              value = num;
            }
          } else if (el.type === \\"file\\") {
            // TODO: one vs multiple files
            value = el.files;
          } else {
            value = el.value;
          }
        } else {
          value = el.value;
        }

        return {
          key,
          value,
        };
      });
    let contentType = props.contentType;

    if (props.sendSubmissionsTo === \\"email\\") {
      contentType = \\"multipart/form-data\\";
    }

    Array.from(formPairs).forEach(({ value }) => {
      if (
        value instanceof File ||
        (Array.isArray(value) && value[0] instanceof File) ||
        value instanceof FileList
      ) {
        contentType = \\"multipart/form-data\\";
      }
    }); // TODO: send as urlEncoded or multipart by default
    // because of ease of use and reliability in browser API
    // for encoding the form?

    if (contentType !== \\"application/json\\") {
      body = formData;
    } else {
      // Json
      const json = {};
      Array.from(formPairs).forEach(({ value, key }) => {
        set(json, key, value);
      });
      body = JSON.stringify(json);
    }

    if (contentType && contentType !== \\"multipart/form-data\\") {
      if (
        /* Zapier doesn't allow content-type header to be sent from browsers */
        !(sendWithJs && props.action?.includes(\\"zapier.com\\"))
      ) {
        headers[\\"content-type\\"] = contentType;
      }
    }

    const presubmitEvent = new CustomEvent(\\"presubmit\\", {
      detail: {
        body,
      },
    });

    if (formRef.value) {
      formRef.value.dispatchEvent(presubmitEvent);

      if (presubmitEvent.defaultPrevented) {
        return;
      }
    }

    state.formState = \\"sending\\";
    const formUrl = \`\${
      builder.env === \\"dev\\" ? \\"http://localhost:5000\\" : \\"https://builder.io\\"
    }/api/v1/form-submit?apiKey=\${builder.apiKey}&to=\${btoa(
      props.sendSubmissionsToEmail || \\"\\"
    )}&name=\${encodeURIComponent(props.name || \\"\\")}\`;
    fetch(
      props.sendSubmissionsTo === \\"email\\" ? formUrl : props.action,
      /* TODO: throw error if no action URL */
      {
        body,
        headers,
        method: props.method || \\"post\\",
      }
    ).then(
      async (res) => {
        let body;
        const contentType = res.headers.get(\\"content-type\\");

        if (contentType && contentType.indexOf(\\"application/json\\") !== -1) {
          body = await res.json();
        } else {
          body = await res.text();
        }

        if (!res.ok && props.errorMessagePath) {
          /* TODO: allow supplying an error formatter function */
          let message = get(body, props.errorMessagePath);

          if (message) {
            if (typeof message !== \\"string\\") {
              /* TODO: ideally convert json to yaml so it woul dbe like
             error: - email has been taken */
              message = JSON.stringify(message);
            }

            state.formErrorMessage = message;
          }
        }

        state.responseData = body;
        state.formState = res.ok ? \\"success\\" : \\"error\\";

        if (res.ok) {
          const submitSuccessEvent = new CustomEvent(\\"submit:success\\", {
            detail: {
              res,
              body,
            },
          });

          if (formRef.value) {
            formRef.value.dispatchEvent(submitSuccessEvent);

            if (submitSuccessEvent.defaultPrevented) {
              return;
            }
            /* TODO: option to turn this on/off? */

            if (props.resetFormOnSubmit !== false) {
              formRef.value.reset();
            }
          }
          /* TODO: client side route event first that can be preventDefaulted */

          if (props.successUrl) {
            if (formRef.value) {
              const event = new CustomEvent(\\"route\\", {
                detail: {
                  url: props.successUrl,
                },
              });
              formRef.value.dispatchEvent(event);

              if (!event.defaultPrevented) {
                location.href = props.successUrl;
              }
            } else {
              location.href = props.successUrl;
            }
          }
        }
      },
      (err) => {
        const submitErrorEvent = new CustomEvent(\\"submit:error\\", {
          detail: {
            error: err,
          },
        });

        if (formRef.value) {
          formRef.value.dispatchEvent(submitErrorEvent);

          if (submitErrorEvent.defaultPrevented) {
            return;
          }
        }

        state.responseData = err;
        state.formState = \\"error\\";
      }
    );
  }
};
export const FormComponent = component$((props) => {
  useStylesScoped$(STYLES);

  const submissionState = useComputed$(() => {
    return (Builder.isEditing && props.previewState) || state.formState;
  });
  const formRef = useSignal();
  const state = useStore({
    formErrorMessage: \\"\\",
    formState: \\"unsubmitted\\",
    responseData: null,
  });

  return (
    <form
      validate={props.validate}
      ref={formRef}
      action={(() => {
        !props.sendWithJs && props.action;
      })()}
      method={props.method}
      name={props.name}
      onSubmit$={$((event) =>
        onSubmit(props, state, submissionState, formRef, event)
      )}
      {...props.attributes}
    >
      {props.builderBlock && props.builderBlock.children
        ? (props.builderBlock?.children || []).map((block, index) => {
            return (
              <BuilderBlockComponent
                key={block.id}
                block={block}
                index={index}
              ></BuilderBlockComponent>
            );
          })
        : null}
      {submissionState.value === \\"error\\" ? (
        <BuilderBlocks
          dataPath=\\"errorMessage\\"
          blocks={props.errorMessage}
        ></BuilderBlocks>
      ) : null}
      {submissionState.value === \\"sending\\" ? (
        <BuilderBlocks
          dataPath=\\"sendingMessage\\"
          blocks={props.sendingMessage}
        ></BuilderBlocks>
      ) : null}
      {submissionState.value === \\"error\\" && state.responseData ? (
        <pre class=\\"builder-form-error-text pre-FormComponent\\">
          {JSON.stringify(state.responseData, null, 2)}
        </pre>
      ) : null}
      {submissionState.value === \\"success\\" ? (
        <BuilderBlocks
          dataPath=\\"successMessage\\"
          blocks={props.successMessage}
        ></BuilderBlocks>
      ) : null}
    </form>
  );
});

export default FormComponent;

export const STYLES = \`
.pre-FormComponent {
  padding: 10px;
  color: red;
  text-align: center;
}
\`;
"
`;

exports[`qwik > jsx > Javascript Test > Image 1`] = `
"import {
  $,
  Fragment,
  Slot,
  component$,
  h,
  useSignal,
  useStore,
  useStylesScoped$,
  useVisibleTask$,
} from \\"@builder.io/qwik\\";

export const setLoaded = function setLoaded(props, state, pictureRef) {
  state.imageLoaded = true;
};
export const useLazyLoading = function useLazyLoading(
  props,
  state,
  pictureRef
) {
  // TODO: Add more checks here, like testing for real web browsers
  return !!props.lazy && state.isBrowser();
};
export const isBrowser = function isBrowser(props, state, pictureRef) {
  return (
    typeof window !== \\"undefined\\" && window.navigator.product != \\"ReactNative\\"
  );
};
export const Image = component$((props) => {
  useStylesScoped$(STYLES);

  const pictureRef = useSignal();
  const state = useStore({
    imageLoaded: false,
    load: false,
    scrollListener: null,
  });
  useVisibleTask$(() => {
    if (useLazyLoading(props, state, pictureRef)) {
      // throttled scroll capture listener
      const listener = () => {
        if (pictureRef.value) {
          const rect = pictureRef.value.getBoundingClientRect();
          const buffer = window.innerHeight / 2;

          if (rect.top < window.innerHeight + buffer) {
            state.load = true;
            state.scrollListener = null;
            window.removeEventListener(\\"scroll\\", listener);
          }
        }
      };

      state.scrollListener = listener;
      window.addEventListener(\\"scroll\\", listener, {
        capture: true,
        passive: true,
      });
      listener();
    }
  });

  return (
    <div>
      <picture ref={pictureRef}>
        {!useLazyLoading(props, state, pictureRef) || state.load ? (
          <img
            alt={props.altText}
            aria-role={props.altText ? \\"presentation\\" : undefined}
            class={
              \\"builder-image\\" +
              (props._class ? \\" \\" + props._class : \\"\\") +
              \\" img-Image\\"
            }
            src={props.image}
            onLoad$={$((event) => setLoaded(props, state, pictureRef))}
            srcset={props.srcset}
            sizes={props.sizes}
          />
        ) : null}
        <source srcset={props.srcset} />
      </picture>
      <Slot></Slot>
    </div>
  );
});

export default Image;

export const STYLES = \`
.img-Image {
  opacity: 1;
  transition: opacity 0.2s ease-in-out;
  object-fit: cover;
  object-position: center;
}
\`;
"
`;

exports[`qwik > jsx > Javascript Test > Image State 1`] = `
"import { Fragment, component$, h, useStore } from \\"@builder.io/qwik\\";

export const ImgStateComponent = component$((props) => {
  const state = useStore({
    canShow: true,
    images: [\\"http://example.com/qwik.png\\"],
  });

  return (
    <div>
      {(state.images || []).map((item, itemIndex) => {
        return (
          <Fragment>
            <img class=\\"custom-class\\" src={item} key={itemIndex} />
          </Fragment>
        );
      })}
    </div>
  );
});

export default ImgStateComponent;
"
`;

exports[`qwik > jsx > Javascript Test > Img 1`] = `
"import { Fragment, component$, h } from \\"@builder.io/qwik\\";

import { Builder } from \\"@builder.io/sdk\\";

export const ImgComponent = component$((props) => {
  return (
    <img
      style={{
        objectFit: props.backgroundSize || \\"cover\\",
        objectPosition: props.backgroundPosition || \\"center\\",
      }}
      {...props.attributes}
      key={(Builder.isEditing && props.imgSrc) || \\"default-key\\"}
      alt={props.altText}
      src={props.imgSrc}
    />
  );
});

export default ImgComponent;
"
`;

exports[`qwik > jsx > Javascript Test > Input 1`] = `
"import { $, Fragment, component$, h } from \\"@builder.io/qwik\\";

import { Builder } from \\"@builder.io/sdk\\";

export const FormInputComponent = component$((props) => {
  return (
    <input
      {...props.attributes}
      key={
        Builder.isEditing && props.defaultValue
          ? props.defaultValue
          : \\"default-key\\"
      }
      placeholder={props.placeholder}
      type={props.type}
      name={props.name}
      value={props.value}
      defaultValue={props.defaultValue}
      required={props.required}
      onChange$={$((event) => props.onChange?.(event.target.value))}
    />
  );
});

export default FormInputComponent;
"
`;

exports[`qwik > jsx > Javascript Test > InputParent 1`] = `
"import FormInputComponent from \\"./input.raw\\";

import { $, Fragment, component$, h } from \\"@builder.io/qwik\\";

export const handleChange = function handleChange(props, state, value) {
  console.log(value);
};
export const Stepper = component$((props) => {
  const state = {};

  return (
    <FormInputComponent
      name=\\"kingzez\\"
      type=\\"text\\"
      onChange$={$((event) => handleChange(props, state, value))}
    ></FormInputComponent>
  );
});

export default Stepper;
"
`;

exports[`qwik > jsx > Javascript Test > RawText 1`] = `
"import { Fragment, component$, h } from \\"@builder.io/qwik\\";

export const RawText = component$((props) => {
  return (
    <span
      class={props.attributes?.class || props.attributes?.className}
      dangerouslySetInnerHTML={props.text || \\"\\"}
    ></span>
  );
});

export default RawText;
"
`;

exports[`qwik > jsx > Javascript Test > Section 1`] = `
"import { Fragment, Slot, component$, h } from \\"@builder.io/qwik\\";

export const SectionComponent = component$((props) => {
  return (
    <section
      {...props.attributes}
      style={(() => {
        props.maxWidth && typeof props.maxWidth === \\"number\\"
          ? {
              maxWidth: props.maxWidth,
            }
          : undefined;
      })()}
    >
      <Slot></Slot>
    </section>
  );
});

export default SectionComponent;
"
`;

exports[`qwik > jsx > Javascript Test > Section 2`] = `
"import { Fragment, Slot, component$, h, useStore } from \\"@builder.io/qwik\\";

export const SectionStateComponent = component$((props) => {
  const state = useStore({ items: [42], max: 42 });

  return (
    <>
      {state.max
        ? (state.items || []).map((item) => {
            return (
              <section
                {...props.attributes}
                style={{
                  maxWidth: item + state.max,
                }}
              >
                <Slot></Slot>
              </section>
            );
          })
        : null}
    </>
  );
});

export default SectionStateComponent;
"
`;

exports[`qwik > jsx > Javascript Test > Select 1`] = `
"import { Fragment, component$, h } from \\"@builder.io/qwik\\";

import { Builder } from \\"@builder.io/sdk\\";

export const SelectComponent = component$((props) => {
  return (
    <select
      {...props.attributes}
      value={props.value}
      key={
        Builder.isEditing && props.defaultValue
          ? props.defaultValue
          : \\"default-key\\"
      }
      defaultValue={props.defaultValue}
      name={props.name}
    >
      {(props.options || []).map((option, index) => {
        return (
          <option value={option.value} data-index={index}>
            {option.name || option.value}
          </option>
        );
      })}
    </select>
  );
});

export default SelectComponent;
"
`;

exports[`qwik > jsx > Javascript Test > SlotDefault 1`] = `
"import { Fragment, Slot, component$, h } from \\"@builder.io/qwik\\";

export const SlotCode = component$((props) => {
  return (
    <div>
      <Slot>
        <div class=\\"default-slot\\">Default content</div>
      </Slot>
    </div>
  );
});

export default SlotCode;
"
`;

exports[`qwik > jsx > Javascript Test > SlotHtml 1`] = `
"import ContentSlotCode from \\"./content-slot-jsx.raw\\";

import { Fragment, Slot, component$, h } from \\"@builder.io/qwik\\";

export const SlotCode = component$((props) => {
  return (
    <div>
      <ContentSlotCode>
        <Slot
          testing={(() => {
            <div>Hello</div>;
          })()}
        ></Slot>
      </ContentSlotCode>
    </div>
  );
});

export default SlotCode;
"
`;

exports[`qwik > jsx > Javascript Test > SlotJsx 1`] = `
"import ContentSlotCode from \\"./content-slot-jsx.raw\\";

import { Fragment, component$, h } from \\"@builder.io/qwik\\";

export const SlotCode = component$((props) => {
  return (
    <div>
      <ContentSlotCode
        slotTesting={(() => {
          <div>Hello</div>;
        })()}
      ></ContentSlotCode>
    </div>
  );
});

export default SlotCode;
"
`;

exports[`qwik > jsx > Javascript Test > SlotNamed 1`] = `
"import { Fragment, Slot, component$, h } from \\"@builder.io/qwik\\";

export const SlotCode = component$((props) => {
  return (
    <div>
      <Slot name=\\"myAwesomeSlot\\"></Slot>
      <Slot name=\\"top\\"></Slot>
      <Slot name=\\"left\\">Default left</Slot>
      <Slot>Default Child</Slot>
    </div>
  );
});

export default SlotCode;
"
`;

exports[`qwik > jsx > Javascript Test > Stamped.io 1`] = `
"import {
  $,
  Fragment,
  component$,
  h,
  useStore,
  useStylesScoped$,
  useVisibleTask$,
} from \\"@builder.io/qwik\\";

import { kebabCase, snakeCase } from \\"lodash\\";

export const kebabCaseValue = function kebabCaseValue(props, state) {
  return kebabCase(\\"testThat\\");
};
export const snakeCaseValue = function snakeCaseValue(props, state) {
  return snakeCase(\\"testThis\\");
};
export const SmileReviews = component$((props) => {
  useStylesScoped$(STYLES);

  const state = useStore({
    name: \\"test\\",
    reviews: [],
    showReviewPrompt: false,
  });
  useVisibleTask$(() => {
    fetch(
      \`https://stamped.io/api/widget/reviews?storeUrl=builder-io.myshopify.com&apiKey=\${
        props.apiKey || \\"pubkey-8bbDq7W6w4sB3OWeM1HUy2s47702hM\\"
      }&productId=\${props.productId || \\"2410511106127\\"}\`
    )
      .then((res) => res.json())
      .then((data) => {
        state.reviews = data.data;
      });
  });

  return (
    <div data-user={state.name}>
      <button onClick$={$((event) => (state.showReviewPrompt = true))}>
        Write a review
      </button>
      {state.showReviewPrompt || \\"asdf\\" ? (
        <>
          <input placeholder=\\"Email\\" />
          <input placeholder=\\"Title\\" class=\\"input-SmileReviews\\" />
          <textarea
            placeholder=\\"How was your experience?\\"
            class=\\"textarea-SmileReviews\\"
          ></textarea>
          <button
            preventdefault:click
            class=\\"button-SmileReviews\\"
            onClick$={$((event) => {
              state.showReviewPrompt = false;
            })}
          >
            Submit
          </button>
        </>
      ) : null}
      {(state.reviews || []).map((review, index) => {
        return (
          <div class=\\"review-SmileReviews\\" key={review.id}>
            <img class=\\"img-SmileReviews\\" src={review.avatar} />
            <div class={state.showReviewPrompt ? \\"bg-primary\\" : \\"bg-secondary\\"}>
              <div>N: {index}</div>
              <div>{review.author}</div>
              <div>{review.reviewMessage}</div>
            </div>
          </div>
        );
      })}
    </div>
  );
});

export default SmileReviews;

export const STYLES = \`
.input-SmileReviews {
  display: block;
}
.textarea-SmileReviews {
  display: block;
}
.button-SmileReviews {
  display: block;
}
.review-SmileReviews {
  margin: 10px;
  padding: 10px;
  background: white;
  display: flex;
  border-radius: 5px;
  box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
  -webkit-font-smoothing: antialiased;
}
.img-SmileReviews {
  height: 30px;
  width: 30px;
  margin-right: 10px;
}
\`;
"
`;

exports[`qwik > jsx > Javascript Test > Submit 1`] = `
"import { Fragment, component$, h } from \\"@builder.io/qwik\\";

export const SubmitButton = component$((props) => {
  return (
    <button type=\\"submit\\" {...props.attributes}>
      {props.text}
    </button>
  );
});

export default SubmitButton;
"
`;

exports[`qwik > jsx > Javascript Test > Text 1`] = `
"import { Fragment, component$, h, useStore } from \\"@builder.io/qwik\\";

import { Builder } from \\"@builder.io/sdk\\";

export const Text = component$((props) => {
  const state = useStore({ name: \\"Decadef20\\" });

  return (
    <div
      contentEditable={allowEditingText || undefined}
      data-name={{
        test: state.name || \\"any name\\",
      }}
      dangerouslySetInnerHTML={
        props.text ||
        props.content ||
        state.name ||
        '<p class=\\"text-lg\\">my name</p>'
      }
    ></div>
  );
});

export default Text;
"
`;

exports[`qwik > jsx > Javascript Test > Textarea 1`] = `
"import { Fragment, component$, h } from \\"@builder.io/qwik\\";

export const Textarea = component$((props) => {
  return (
    <textarea
      {...props.attributes}
      placeholder={props.placeholder}
      name={props.name}
      value={props.value}
      defaultValue={props.defaultValue}
    ></textarea>
  );
});

export default Textarea;
"
`;

exports[`qwik > jsx > Javascript Test > Video 1`] = `
"import { Fragment, component$, h } from \\"@builder.io/qwik\\";

export const Video = component$((props) => {
  return (
    <video
      preload=\\"none\\"
      {...props.attributes}
      style={{
        width: \\"100%\\",
        height: \\"100%\\",
        ...props.attributes?.style,
        objectFit: props.fit,
        objectPosition: props.position,
        // Hack to get object fit to work as expected and
        // not have the video overflow
        borderRadius: 1,
      }}
      key={props.video || \\"no-src\\"}
      poster={props.posterImage}
      autoplay={props.autoPlay}
      muted={props.muted}
      controls={props.controls}
      loop={props.loop}
    ></video>
  );
});

export default Video;
"
`;

exports[`qwik > jsx > Javascript Test > arrowFunctionInUseStore 1`] = `
"import { Fragment, component$, h, useStore } from \\"@builder.io/qwik\\";

export const setName = function setName(props, state, value) {
  state.name = value;
};
export const updateNameWithArrowFn = function updateNameWithArrowFn(
  props,
  state,
  value
) {
  state.name = value;
};
export const MyComponent = component$((props) => {
  const state = useStore({ name: \\"steve\\" });

  return <div>Hello {state.name}</div>;
});

export default MyComponent;
"
`;

exports[`qwik > jsx > Javascript Test > basicForNoTagReference 1`] = `
"import {
  Fragment,
  component$,
  h,
  useComputed$,
  useStore,
} from \\"@builder.io/qwik\\";

export const MyBasicForNoTagRefComponent = component$((props) => {
  const TagNameGetter = useComputed$(() => {
    return \\"span\\";
  });
  const state = useStore({ TagName: \\"div\\", name: \\"VincentW\\", tag: \\"span\\" });

  return (
    <TagNameGetter.value>
      Hello <state.tag>{state.name}</state.tag>
      {(props.actions || []).map((action) => {
        return (
          <state.TagName>
            <action.icon></action.icon>
            <span>{action.text}</span>
          </state.TagName>
        );
      })}
    </TagNameGetter.value>
  );
});

export default MyBasicForNoTagRefComponent;
"
`;

exports[`qwik > jsx > Javascript Test > basicForwardRef 1`] = `
"import {
  $,
  Fragment,
  component$,
  h,
  useStore,
  useStylesScoped$,
} from \\"@builder.io/qwik\\";

export const MyBasicForwardRefComponent = component$((props) => {
  useStylesScoped$(STYLES);

  const state = useStore({ name: \\"PatrickJS\\" });

  return (
    <div>
      <input
        class=\\"input-MyBasicForwardRefComponent\\"
        ref={props.inputRef}
        value={state.name}
        onChange$={$((event) => (state.name = event.target.value))}
      />
    </div>
  );
});

export default MyBasicForwardRefComponent;

export const STYLES = \`
.input-MyBasicForwardRefComponent {
  color: red;
}
\`;
"
`;

exports[`qwik > jsx > Javascript Test > basicForwardRefMetadata 1`] = `
"import {
  $,
  Fragment,
  component$,
  h,
  useStore,
  useStylesScoped$,
} from \\"@builder.io/qwik\\";

export const MyBasicForwardRefComponent = component$((props) => {
  useStylesScoped$(STYLES);

  const state = useStore({ name: \\"PatrickJS\\" });

  return (
    <div>
      <input
        class=\\"input-MyBasicForwardRefComponent\\"
        ref={props.inputRef}
        value={state.name}
        onChange$={$((event) => (state.name = event.target.value))}
      />
    </div>
  );
});

export default MyBasicForwardRefComponent;

export const STYLES = \`
.input-MyBasicForwardRefComponent {
  color: red;
}
\`;
"
`;

exports[`qwik > jsx > Javascript Test > class + ClassName + css 1`] = `
"import { Fragment, component$, h, useStylesScoped$ } from \\"@builder.io/qwik\\";

export const MyBasicComponent = component$((props) => {
  useStylesScoped$(STYLES);

  return (
    <div class=\\"test2 test div-MyBasicComponent\\">
      Hello! I can run in React, Vue, Solid, or Liquid!
    </div>
  );
});

export default MyBasicComponent;

export const STYLES = \`
.div-MyBasicComponent {
  padding: 10px;
}
\`;
"
`;

exports[`qwik > jsx > Javascript Test > class + css 1`] = `
"import { Fragment, component$, h, useStylesScoped$ } from \\"@builder.io/qwik\\";

export const MyBasicComponent = component$((props) => {
  useStylesScoped$(STYLES);

  return (
    <div class=\\"test div-MyBasicComponent\\">
      Hello! I can run in React, Vue, Solid, or Liquid!
    </div>
  );
});

export default MyBasicComponent;

export const STYLES = \`
.div-MyBasicComponent {
  padding: 10px;
}
\`;
"
`;

exports[`qwik > jsx > Javascript Test > className + css 1`] = `
"import { Fragment, component$, h, useStylesScoped$ } from \\"@builder.io/qwik\\";

export const MyBasicComponent = component$((props) => {
  useStylesScoped$(STYLES);

  return (
    <div class=\\"test div-MyBasicComponent\\">
      Hello! I can run in React, Vue, Solid, or Liquid!
    </div>
  );
});

export default MyBasicComponent;

export const STYLES = \`
.div-MyBasicComponent {
  padding: 10px;
}
\`;
"
`;

exports[`qwik > jsx > Javascript Test > className 1`] = `
"import { Fragment, component$, h, useStore } from \\"@builder.io/qwik\\";

export const ClassNameCode = component$((props) => {
  const state = useStore({ bindings: \\"a binding\\" });

  return (
    <div>
      <div class=\\"no binding\\">Without Binding</div>
      <div class={state.bindings}>With binding</div>
    </div>
  );
});

export default ClassNameCode;
"
`;

exports[`qwik > jsx > Javascript Test > classState 1`] = `
"import {
  Fragment,
  component$,
  h,
  useStore,
  useStylesScoped$,
} from \\"@builder.io/qwik\\";

export const MyBasicComponent = component$((props) => {
  useStylesScoped$(STYLES);

  const state = useStore({
    classState: \\"testClassName\\",
    styleState: {
      color: \\"red\\",
    },
  });

  return (
    <div
      class={state.classState + \\" div-MyBasicComponent\\"}
      style={state.styleState}
    >
      Hello! I can run in React, Vue, Solid, or Liquid!
    </div>
  );
});

export default MyBasicComponent;

export const STYLES = \`
.div-MyBasicComponent {
  padding: 10px;
}
\`;
"
`;

exports[`qwik > jsx > Javascript Test > contentState 1`] = `
"import {
  Fragment,
  component$,
  h,
  useContextProvider,
  useStore,
} from \\"@builder.io/qwik\\";

import BuilderContext from \\"@dummy/context.js\\";

export const RenderContent = component$((props) => {
  useContextProvider(
    BuilderContext,
    useStore({
      content: props.content,
      registeredComponents: props.customComponents,
    })
  );

  return <div>setting context</div>;
});

export default RenderContent;
"
`;

exports[`qwik > jsx > Javascript Test > defaultProps 1`] = `
"import { $, Fragment, component$, h } from \\"@builder.io/qwik\\";

export const Button = component$((props) => {
  return (
    <div>
      {props.link ? (
        <a
          {...props.attributes}
          href={props.link}
          target={props.openLinkInNewTab ? \\"_blank\\" : undefined}
        >
          {props.text}
        </a>
      ) : null}
      {!props.link ? (
        <button
          type=\\"button\\"
          {...props.attributes}
          onClick$={$((event) => props.onClick(event))}
        >
          {props.buttonText}
        </button>
      ) : null}
    </div>
  );
});

export default Button;
"
`;

exports[`qwik > jsx > Javascript Test > defaultPropsOutsideComponent 1`] = `
"import { $, Fragment, component$, h } from \\"@builder.io/qwik\\";

export const Button = component$((props) => {
  return (
    <div>
      {props.link ? (
        <a
          {...props.attributes}
          href={props.link}
          target={props.openLinkInNewTab ? \\"_blank\\" : undefined}
        >
          {props.text}
        </a>
      ) : null}
      {!props.link ? (
        <button
          type=\\"button\\"
          {...props.attributes}
          onClick$={$((event) => props.onClick(event))}
        >
          {props.text}
        </button>
      ) : null}
    </div>
  );
});

export default Button;
"
`;

exports[`qwik > jsx > Javascript Test > defaultValsWithTypes 1`] = `
"import { Fragment, component$, h } from \\"@builder.io/qwik\\";

export const DEFAULT_VALUES = {
  name: \\"Sami\\",
};
export const ComponentWithTypes = component$((props) => {
  return <div> Hello {props.name || DEFAULT_VALUES.name}</div>;
});

export default ComponentWithTypes;
"
`;

exports[`qwik > jsx > Javascript Test > expressionState 1`] = `
"import { Fragment, component$, h, useStore } from \\"@builder.io/qwik\\";

export const MyComponent = component$((props) => {
  const state = useStore({
    refToUse: !(props.componentRef instanceof Function)
      ? props.componentRef
      : null,
  });

  return <div>{state.refToUse}</div>;
});

export default MyComponent;
"
`;

exports[`qwik > jsx > Javascript Test > getterState 1`] = `
"import { Fragment, component$, h, useComputed$ } from \\"@builder.io/qwik\\";

export const baz = function baz(props, state, foo2, bar, i) {
  return i + foo2.value.length;
};
export const Button = component$((props) => {
  const foo2 = useComputed$(() => {
    return props.foo + \\"foo\\";
  });
  const bar = useComputed$(() => {
    return \\"bar\\";
  });
  const state = {};

  return (
    <div>
      <p>{foo2.value}</p>
      <p>{bar.value}</p>
      <p>{baz(props, state, foo2, bar, 1)}</p>
    </div>
  );
});

export default Button;
"
`;

exports[`qwik > jsx > Javascript Test > import types 1`] = `
"import RenderBlock from \\"./builder-render-block.raw\\";

import { Fragment, component$, h } from \\"@builder.io/qwik\\";

export const getRenderContentProps = function getRenderContentProps(
  props,
  state,
  block,
  index
) {
  return {
    block: block,
    index: index,
  };
};
export const RenderContent = component$((props) => {
  const state = {};

  return (
    <RenderBlock
      {...getRenderContentProps(
        props,
        state,
        props.renderContentProps.block,
        0
      )}
    ></RenderBlock>
  );
});

export default RenderContent;
"
`;

exports[`qwik > jsx > Javascript Test > multipleOnUpdate 1`] = `
"import { Fragment, component$, h, useTask$ } from \\"@builder.io/qwik\\";

export const MultipleOnUpdate = component$((props) => {
  useTask$(({ track }) => {
    console.log(\\"Runs on every update/rerender\\");
  });
  useTask$(({ track }) => {
    console.log(\\"Runs on every update/rerender as well\\");
  });

  return <div></div>;
});

export default MultipleOnUpdate;
"
`;

exports[`qwik > jsx > Javascript Test > multipleOnUpdateWithDeps 1`] = `
"import { Fragment, component$, h, useStore, useTask$ } from \\"@builder.io/qwik\\";

export const MultipleOnUpdateWithDeps = component$((props) => {
  const state = useStore({ a: \\"a\\", b: \\"b\\", c: \\"c\\", d: \\"d\\" });
  useTask$(({ track }) => {
    track(() => state.a);
    track(() => state.b);
    console.log(\\"Runs when a or b changes\\", state.a, state.b);

    if (state.a === \\"a\\") {
      state.a = \\"b\\";
    }
  });
  useTask$(({ track }) => {
    track(() => state.c);
    track(() => state.d);
    console.log(\\"Runs when c or d changes\\", state.c, state.d);

    if (state.a === \\"a\\") {
      state.a = \\"b\\";
    }
  });

  return <div></div>;
});

export default MultipleOnUpdateWithDeps;
"
`;

exports[`qwik > jsx > Javascript Test > multipleSpreads 1`] = `
"import { Fragment, component$, h, useStore } from \\"@builder.io/qwik\\";

export const MyBasicComponent = component$((props) => {
  const state = useStore({
    attrs: {
      hello: \\"world\\",
    },
  });

  return <input {...state.attrs} {...props} />;
});

export default MyBasicComponent;
"
`;

exports[`qwik > jsx > Javascript Test > nestedShow 1`] = `
"import { Fragment, component$, h } from \\"@builder.io/qwik\\";

export const NestedShow = component$((props) => {
  return (
    <>
      {props.conditionA ? (
        !props.conditionB ? (
          <div>if condition A and condition B</div>
        ) : (
          <div>else-condition-B</div>
        )
      ) : (
        <div>else-condition-A</div>
      )}
    </>
  );
});

export default NestedShow;
"
`;

exports[`qwik > jsx > Javascript Test > nestedStyles 1`] = `
"import { Fragment, component$, h, useStylesScoped$ } from \\"@builder.io/qwik\\";

export const NestedStyles = component$((props) => {
  useStylesScoped$(STYLES);

  return <div class=\\"div-NestedStyles\\">Hello world</div>;
});

export default NestedStyles;

export const STYLES = \`
.div-NestedStyles {
  display: flex;
  --bar: red;
  color: var(--bar);
}
@media (max-width: env(--mobile)) {
  .div-NestedStyles {
    display: block;
  }
}
.div-NestedStyles:hover {
  display: flex;
}
.div-NestedStyles:active {
  display: inline;
}
.div-NestedStyles .nested-selector {
  display: grid;
}
.div-NestedStyles .nested-selector:hover {
  display: block;
}
.div-NestedStyles.nested-selector:active {
  display: inline-block;
}
\`;
"
`;

exports[`qwik > jsx > Javascript Test > onEvent 1`] = `
"import {
  $,
  Fragment,
  component$,
  h,
  useOn,
  useSignal,
  useVisibleTask$,
} from \\"@builder.io/qwik\\";

export const foo = function foo(props, state, elem, event) {
  console.log(\\"test2\\");
};
export const Embed = component$((props) => {
  const elem = useSignal();
  const state = {};
  useOn(
    \\"initEditingBldr\\",
    $((event, element) => {
      console.log(\\"test\\");
      foo(props, state, elem, event);
    }) as Parameters<typeof useOn>[1]
  );
  useVisibleTask$(() => {
    elem.value.dispatchEvent(new CustomEvent(\\"initEditingBldr\\"));
  });

  return (
    <div class=\\"builder-embed\\" ref={elem}>
      <div>Test</div>
    </div>
  );
});

export default Embed;
"
`;

exports[`qwik > jsx > Javascript Test > onInit & onMount 1`] = `
"import {
  Fragment,
  component$,
  h,
  useTask$,
  useVisibleTask$,
} from \\"@builder.io/qwik\\";

export const OnInit = component$((props) => {
  useVisibleTask$(() => {
    console.log(\\"onMount\\");
  });
  useTask$(() => {
    console.log(\\"onInit\\");
  });

  return <div></div>;
});

export default OnInit;
"
`;

exports[`qwik > jsx > Javascript Test > onInit 1`] = `
"import { Fragment, component$, h, useStore, useTask$ } from \\"@builder.io/qwik\\";

export const defaultValues = {
  name: \\"PatrickJS\\",
};
export const OnInit = component$((props) => {
  const state = useStore({ name: \\"\\" });
  useTask$(() => {
    state.name = defaultValues.name || props.name;
    console.log(\\"set defaults with props\\");
  });

  return <div>Default name defined by parent {state.name}</div>;
});

export default OnInit;
"
`;

exports[`qwik > jsx > Javascript Test > onMount 1`] = `
"import { Fragment, component$, h, useVisibleTask$ } from \\"@builder.io/qwik\\";

export const Comp = component$((props) => {
  useVisibleTask$(() => {
    console.log(\\"Runs on mount\\");
  });

  return <div></div>;
});

export default Comp;
"
`;

exports[`qwik > jsx > Javascript Test > onMountMultiple 1`] = `
"import {
  Fragment,
  component$,
  h,
  useTask$,
  useVisibleTask$,
} from \\"@builder.io/qwik\\";

export const Comp = component$((props) => {
  useVisibleTask$(() => {
    console.log(\\"Runs on mount\\");
  });
  useVisibleTask$(() => {
    console.log(\\"Another one runs on Mount\\");
  });
  useTask$(() => {
    console.log(\\"SSR runs on Mount\\");
  });

  return <div></div>;
});

export default Comp;
"
`;

exports[`qwik > jsx > Javascript Test > onUpdate 1`] = `
"import { Fragment, component$, h, useTask$ } from \\"@builder.io/qwik\\";

export const OnUpdate = component$((props) => {
  useTask$(({ track }) => {
    console.log(\\"Runs on every update/rerender\\");
  });

  return <div></div>;
});

export default OnUpdate;
"
`;

exports[`qwik > jsx > Javascript Test > onUpdateWithDeps 1`] = `
"import { Fragment, component$, h, useStore, useTask$ } from \\"@builder.io/qwik\\";

export const OnUpdateWithDeps = component$((props) => {
  const state = useStore({ a: \\"a\\", b: \\"b\\" });
  useTask$(({ track }) => {
    track(() => state.a);
    track(() => state.b);
    track(() => props.size);
    console.log(\\"Runs when a, b or size changes\\", state.a, state.b, props.size);
  });

  return <div></div>;
});

export default OnUpdateWithDeps;
"
`;

exports[`qwik > jsx > Javascript Test > preserveExportOrLocalStatement 1`] = `
"import { Fragment, component$, h } from \\"@builder.io/qwik\\";

export const b = 3;
export const foo = () => {};
export const a = 3;
export const bar = () => {};
export function run(value) {}
export const MyBasicComponent = component$((props) => {
  return <div></div>;
});

export default MyBasicComponent;
"
`;

exports[`qwik > jsx > Javascript Test > preserveTyping 1`] = `
"import { Fragment, component$, h } from \\"@builder.io/qwik\\";

export const MyBasicComponent = component$((props) => {
  return (
    <div>Hello! I can run in React, Vue, Solid, or Liquid! {props.name}</div>
  );
});

export default MyBasicComponent;
"
`;

exports[`qwik > jsx > Javascript Test > propsDestructure 1`] = `
"import { Fragment, Slot, component$, h, useStore } from \\"@builder.io/qwik\\";

export const MyBasicComponent = component$((props) => {
  const state = useStore({ name: \\"Decadef20\\" });

  return (
    <div>
      <Slot></Slot>
      {props.type}
      Hello! I can run in React, Vue, Solid, or Liquid!
    </div>
  );
});

export default MyBasicComponent;
"
`;

exports[`qwik > jsx > Javascript Test > propsInterface 1`] = `
"import { Fragment, component$, h } from \\"@builder.io/qwik\\";

export const MyBasicComponent = component$((props) => {
  return (
    <div>Hello! I can run in React, Vue, Solid, or Liquid! {props.name}</div>
  );
});

export default MyBasicComponent;
"
`;

exports[`qwik > jsx > Javascript Test > propsType 1`] = `
"import { Fragment, component$, h } from \\"@builder.io/qwik\\";

export const MyBasicComponent = component$((props) => {
  return (
    <div>Hello! I can run in React, Vue, Solid, or Liquid! {props.name}</div>
  );
});

export default MyBasicComponent;
"
`;

exports[`qwik > jsx > Javascript Test > referencingFunInsideHook 1`] = `
"import { Fragment, component$, h, useTask$ } from \\"@builder.io/qwik\\";

export const foo = function foo(props, state, params) {};
export const bar = function bar(props, state) {};
export const zoo = function zoo(props, state) {
  const params = {
    cb: state.bar,
  };
};
export const OnUpdate = component$((props) => {
  const state = {};
  useTask$(({ track }) => {
    state.foo({
      someOption: state.bar,
    });
  });

  return <div></div>;
});

export default OnUpdate;
"
`;

exports[`qwik > jsx > Javascript Test > renderBlock 1`] = `
"import { TARGET } from \\"../../constants/target.js\\";

import { evaluate } from \\"../../functions/evaluate.js\\";

import { extractTextStyles } from \\"../../functions/extract-text-styles.js\\";

import { getBlockActions } from \\"../../functions/get-block-actions.js\\";

import { getBlockComponentOptions } from \\"../../functions/get-block-component-options.js\\";

import { getBlockProperties } from \\"../../functions/get-block-properties.js\\";

import { getBlockTag } from \\"../../functions/get-block-tag.js\\";

import { getProcessedBlock } from \\"../../functions/get-processed-block.js\\";

import { getReactNativeBlockStyles } from \\"../../functions/get-react-native-block-styles.js\\";

import BlockStyles from \\"./block-styles.jsx\\";

import { isEmptyHtmlElement } from \\"./render-block.helpers.js\\";

import RenderComponentWithContext from \\"./render-component-with-context.js\\";

import RenderComponent from \\"./render-component.jsx\\";

import RenderRepeatedBlock from \\"./render-repeated-block.jsx\\";

import { Fragment, component$, h, useComputed$ } from \\"@builder.io/qwik\\";

export const RenderBlock = component$((props) => {
  const component = useComputed$(() => {
    const componentName = getProcessedBlock({
      block: props.block,
      state: props.context.state,
      context: props.context.context,
      shouldEvaluateBindings: false,
    }).component?.name;

    if (!componentName) {
      return null;
    }

    const ref = props.context.registeredComponents[componentName];

    if (!ref) {
      // TODO: Public doc page with more info about this message
      console.warn(\`
          Could not find a registered component named \\"\${componentName}\\". 
          If you registered it, is the file that registered it imported by the file that needs to render it?\`);
      return undefined;
    } else {
      return ref;
    }
  });
  const tag = useComputed$(() => {
    return getBlockTag(useBlock.value);
  });
  const useBlock = useComputed$(() => {
    return repeatItemData.value
      ? props.block
      : getProcessedBlock({
          block: props.block,
          state: props.context.state,
          context: props.context.context,
          shouldEvaluateBindings: true,
        });
  });
  const actions = useComputed$(() => {
    return getBlockActions({
      block: useBlock.value,
      state: props.context.state,
      context: props.context.context,
    });
  });
  const attributes = useComputed$(() => {
    const blockProperties = getBlockProperties(useBlock.value);
    return {
      ...blockProperties,
      ...(TARGET === \\"reactNative\\"
        ? {
            style: getReactNativeBlockStyles({
              block: useBlock.value,
              context: props.context,
              blockStyles: blockProperties.style,
            }),
          }
        : {}),
    };
  });
  const shouldWrap = useComputed$(() => {
    return !component.value?.noWrap;
  });
  const renderComponentProps = useComputed$(() => {
    return {
      blockChildren: useChildren.value,
      componentRef: component.value?.component,
      componentOptions: {
        ...getBlockComponentOptions(useBlock.value),

        /**
         * These attributes are passed to the wrapper element when there is one. If \`noWrap\` is set to true, then
         * they are provided to the component itself directly.
         */
        ...(shouldWrap.value
          ? {}
          : {
              attributes: { ...attributes.value, ...actions.value },
            }),
        customBreakpoints: childrenContext.value?.content?.meta?.breakpoints,
      },
      context: childrenContext.value,
    };
  });
  const useChildren = useComputed$(() => {
    // TO-DO: When should \`canHaveChildren\` dictate rendering?
    // This is currently commented out because some Builder components (e.g. Box) do not have \`canHaveChildren: true\`,
    // but still receive and need to render children.
    // return state.componentInfo?.canHaveChildren ? state.useBlock.children : [];
    return useBlock.value.children ?? [];
  });
  const childrenWithoutParentComponent = useComputed$(() => {
    /**
     * When there is no \`componentRef\`, there might still be children that need to be rendered. In this case,
     * we render them outside of \`componentRef\`.
     * NOTE: We make sure not to render this if \`repeatItemData\` is non-null, because that means we are rendering an array of
     * blocks, and the children will be repeated within those blocks.
     */
    const shouldRenderChildrenOutsideRef =
      !component.value?.component && !repeatItemData.value;
    return shouldRenderChildrenOutsideRef ? useChildren.value : [];
  });
  const repeatItemData = useComputed$(() => {
    /**
     * we don't use \`state.useBlock\` here because the processing done within its logic includes evaluating the block's bindings,
     * which will not work if there is a repeat.
     */
    const { repeat, ...blockWithoutRepeat } = props.block;

    if (!repeat?.collection) {
      return undefined;
    }

    const itemsArray = evaluate({
      code: repeat.collection,
      state: props.context.state,
      context: props.context.context,
    });

    if (!Array.isArray(itemsArray)) {
      return undefined;
    }

    const collectionName = repeat.collection.split(\\".\\").pop();
    const itemNameToUse =
      repeat.itemName || (collectionName ? collectionName + \\"Item\\" : \\"item\\");
    const repeatArray = itemsArray.map((item, index) => ({
      context: {
        ...props.context,
        state: {
          ...props.context.state,
          $index: index,
          $item: item,
          [itemNameToUse]: item,
          [\`$\${itemNameToUse}Index\`]: index,
        },
      },
      block: blockWithoutRepeat,
    }));
    return repeatArray;
  });
  const inheritedTextStyles = useComputed$(() => {
    if (TARGET !== \\"reactNative\\") {
      return {};
    }

    const styles = getReactNativeBlockStyles({
      block: useBlock.value,
      context: props.context,
      blockStyles: attributes.value.style,
    });
    return extractTextStyles(styles);
  });
  const childrenContext = useComputed$(() => {
    return {
      apiKey: props.context.apiKey,
      state: props.context.state,
      content: props.context.content,
      context: props.context.context,
      registeredComponents: props.context.registeredComponents,
      inheritedStyles: inheritedTextStyles.value,
    };
  });
  const renderComponentTag = useComputed$(() => {
    if (TARGET === \\"reactNative\\") {
      return RenderComponentWithContext;
    } else if (TARGET === \\"vue3\\") {
      // vue3 expects a string for the component tag
      return \\"RenderComponent\\";
    } else {
      return RenderComponent;
    }
  });
  const state = {};

  return (
    <>
      {shouldWrap.value ? (
        <>
          {isEmptyHtmlElement(tag.value) ? (
            <tag.value {...attributes.value} {...actions.value}></tag.value>
          ) : null}
          {!isEmptyHtmlElement(tag.value) && repeatItemData.value
            ? (repeatItemData.value || []).map((data, index) => {
                return (
                  <RenderRepeatedBlock
                    key={index}
                    repeatContext={data.context}
                    block={data.block}
                  ></RenderRepeatedBlock>
                );
              })
            : null}
          {!isEmptyHtmlElement(tag.value) && !repeatItemData.value ? (
            <tag.value {...attributes.value} {...actions.value}>
              <renderComponentTag.value
                {...renderComponentProps.value}
              ></renderComponentTag.value>
              {(childrenWithoutParentComponent.value || []).map((child) => {
                return (
                  <RenderBlock
                    key={\\"render-block-\\" + child.id}
                    block={child}
                    context={childrenContext.value}
                  ></RenderBlock>
                );
              })}
              {(childrenWithoutParentComponent.value || []).map((child) => {
                return (
                  <BlockStyles
                    key={\\"block-style-\\" + child.id}
                    block={child}
                    context={childrenContext.value}
                  ></BlockStyles>
                );
              })}
            </tag.value>
          ) : null}
        </>
      ) : (
        <renderComponentTag.value
          {...renderComponentProps.value}
        ></renderComponentTag.value>
      )}
    </>
  );
});

export default RenderBlock;
"
`;

exports[`qwik > jsx > Javascript Test > renderContentExample 1`] = `
"import {
  $,
  Fragment,
  component$,
  h,
  useContextProvider,
  useStore,
  useStylesScoped$,
  useTask$,
  useVisibleTask$,
} from \\"@builder.io/qwik\\";

import RenderBlocks from \\"@dummy/RenderBlocks.jsx\\";

import BuilderContext from \\"@dummy/context.js\\";

import {
  dispatchNewContentToVisualEditor,
  sendComponentsToVisualEditor,
  trackClick,
} from \\"@dummy/injection-js\\";

export const RenderContent = component$((props) => {
  useStylesScoped$(STYLES);

  useContextProvider(
    BuilderContext,
    useStore({
      content: (() => {
        return 3;
      })(),
      registeredComponents: (() => {
        return 4;
      })(),
    })
  );
  useVisibleTask$(() => {
    sendComponentsToVisualEditor(props.customComponents);
  });
  useTask$(({ track }) => {
    track(() => props.content);
    dispatchNewContentToVisualEditor(props.content);
  });

  return (
    <div
      class=\\"div-RenderContent\\"
      onClick$={$((event) => trackClick(props.content.id))}
    >
      <RenderBlocks blocks={props.content.blocks}></RenderBlocks>
    </div>
  );
});

export default RenderContent;

export const STYLES = \`
.div-RenderContent {
  display: flex;
  flex-direction: columns;
}
\`;
"
`;

exports[`qwik > jsx > Javascript Test > rootFragmentMultiNode 1`] = `
"import { Fragment, component$, h } from \\"@builder.io/qwik\\";

export const Button = component$((props) => {
  return (
    <Fragment>
      {props.link ? (
        <a
          {...props.attributes}
          href={props.link}
          target={props.openLinkInNewTab ? \\"_blank\\" : undefined}
        >
          {props.text}
        </a>
      ) : null}
      {!props.link ? (
        <button type=\\"button\\" {...props.attributes}>
          {props.text}
        </button>
      ) : null}
    </Fragment>
  );
});

export default Button;
"
`;

exports[`qwik > jsx > Javascript Test > rootShow 1`] = `
"import { Fragment, component$, h } from \\"@builder.io/qwik\\";

export const RenderStyles = component$((props) => {
  return <>{props.foo === \\"bar\\" ? <div>Bar</div> : <div>Foo</div>}</>;
});

export default RenderStyles;
"
`;

exports[`qwik > jsx > Javascript Test > self-referencing component 1`] = `
"import { Fragment, component$, h } from \\"@builder.io/qwik\\";

export const MyComponent = component$((props) => {
  return (
    <div>
      {props.name}
      {props.name === \\"Batman\\" ? (
        <MyComponent name=\\"Bruce Wayne\\"></MyComponent>
      ) : null}
    </div>
  );
});

export default MyComponent;
"
`;

exports[`qwik > jsx > Javascript Test > self-referencing component with children 1`] = `
"import { Fragment, Slot, component$, h } from \\"@builder.io/qwik\\";

export const MyComponent = component$((props) => {
  return (
    <div>
      {props.name}
      <Slot></Slot>
      {props.name === \\"Batman\\" ? (
        <MyComponent name=\\"Bruce\\">
          <div>Wayne</div>
        </MyComponent>
      ) : null}
    </div>
  );
});

export default MyComponent;
"
`;

exports[`qwik > jsx > Javascript Test > showExpressions 1`] = `
"SyntaxError: Expression expected. (5:115)
  3 | export const ShowWithOtherValues=component$((props)=>{
  4 |
> 5 | return (<div>{props.conditionA?<>Content0</>:<>ContentA</>}{props.conditionA?<>ContentA</>:null}{props.conditionA?:<>ContentA</>}{props.conditionA?<>ContentB</>:<>{undefined}</>}{props.conditionA?<>{undefined}</>:<>ContentB</>}{props.conditionA?<>ContentC</>:null}{props.conditionA?:<>ContentC</>}{props.conditionA?<>ContentD</>:null}{props.conditionA?:<>ContentD</>}{props.conditionA?<>ContentE</>:<>hello</>}{props.conditionA?<>hello</>:<>ContentE</>}{props.conditionA?<>ContentF</>:<>123</>}{props.conditionA?<>123</>:<>ContentF</>}{props.conditionA === 'Default'?<>4mb</>:props.conditionB === 'Complete'?<>20mb</>:<>9mb</>}{props.conditionA === 'Default'?props.conditionB === 'Complete'?<>20mb</>:<>9mb</>:<>4mb</>}</div>)});
    |                                                                                                                   ^
  6 |
  7 | export default ShowWithOtherValues;
========================================================================
import{Fragment,component$,h}from\\"@builder.io/qwik\\";

export const ShowWithOtherValues=component$((props)=>{

return (<div>{props.conditionA?<>Content0</>:<>ContentA</>}{props.conditionA?<>ContentA</>:null}{props.conditionA?:<>ContentA</>}{props.conditionA?<>ContentB</>:<>{undefined}</>}{props.conditionA?<>{undefined}</>:<>ContentB</>}{props.conditionA?<>ContentC</>:null}{props.conditionA?:<>ContentC</>}{props.conditionA?<>ContentD</>:null}{props.conditionA?:<>ContentD</>}{props.conditionA?<>ContentE</>:<>hello</>}{props.conditionA?<>hello</>:<>ContentE</>}{props.conditionA?<>ContentF</>:<>123</>}{props.conditionA?<>123</>:<>ContentF</>}{props.conditionA === 'Default'?<>4mb</>:props.conditionB === 'Complete'?<>20mb</>:<>9mb</>}{props.conditionA === 'Default'?props.conditionB === 'Complete'?<>20mb</>:<>9mb</>:<>4mb</>}</div>)});

export default ShowWithOtherValues;

========================================================================"
`;

exports[`qwik > jsx > Javascript Test > showWithFor 1`] = `
"import { Fragment, component$, h } from \\"@builder.io/qwik\\";

export const NestedShow = component$((props) => {
  return (
    <>
      {props.conditionA ? (
        (props.items || []).map((item, idx) => {
          return <div key={idx}>{item}</div>;
        })
      ) : (
        <div>else-condition-A</div>
      )}
    </>
  );
});

export default NestedShow;
"
`;

exports[`qwik > jsx > Javascript Test > showWithOtherValues 1`] = `
"import { Fragment, component$, h } from \\"@builder.io/qwik\\";

export const ShowWithOtherValues = component$((props) => {
  return (
    <div>
      {props.conditionA ? <>ContentA</> : null}
      {props.conditionA ? <>ContentB</> : <>{undefined}</>}
      {props.conditionA ? <>ContentC</> : null}
      {props.conditionA ? <>ContentD</> : null}
      {props.conditionA ? <>ContentE</> : <>hello</>}
      {props.conditionA ? <>ContentF</> : <>123</>}
    </div>
  );
});

export default ShowWithOtherValues;
"
`;

exports[`qwik > jsx > Javascript Test > showWithRootText 1`] = `
"import { Fragment, component$, h } from \\"@builder.io/qwik\\";

export const ShowRootText = component$((props) => {
  return <>{props.conditionA ? <>ContentA</> : <div>else-condition-A</div>}</>;
});

export default ShowRootText;
"
`;

exports[`qwik > jsx > Javascript Test > signalsOnUpdate 1`] = `
"import {
  Fragment,
  component$,
  h,
  useStylesScoped$,
  useTask$,
} from \\"@builder.io/qwik\\";

export const MyBasicComponent = component$((props) => {
  useStylesScoped$(STYLES);

  useTask$(({ track }) => {
    track(() => props.id);
    track(() => props.foo.value.bar.baz);
    console.log(\\"props.id changed\\", props.id);
    console.log(\\"props.foo.value.bar.baz changed\\", props.foo.value.bar.baz);
  });

  return (
    <div class=\\"test div-MyBasicComponent\\">
      {props.id}
      {props.foo.value.bar.baz}
    </div>
  );
});

export default MyBasicComponent;

export const STYLES = \`
.div-MyBasicComponent {
  padding: 10px;
}
\`;
"
`;

exports[`qwik > jsx > Javascript Test > spreadAttrs 1`] = `
"import { Fragment, component$, h } from \\"@builder.io/qwik\\";

export const MyBasicComponent = component$((props) => {
  return <input {...attrs} />;
});

export default MyBasicComponent;
"
`;

exports[`qwik > jsx > Javascript Test > spreadNestedProps 1`] = `
"import { Fragment, component$, h } from \\"@builder.io/qwik\\";

export const MyBasicComponent = component$((props) => {
  return <input {...props.nested} />;
});

export default MyBasicComponent;
"
`;

exports[`qwik > jsx > Javascript Test > spreadProps 1`] = `
"import { Fragment, component$, h } from \\"@builder.io/qwik\\";

export const MyBasicComponent = component$((props) => {
  return <input {...props} />;
});

export default MyBasicComponent;
"
`;

exports[`qwik > jsx > Javascript Test > string-literal-store 1`] = `
"import { Fragment, component$, h, useStore } from \\"@builder.io/qwik\\";

export const StringLiteralStore = component$((props) => {
  const state = useStore({ foo: 123 });

  return <div>{state.foo}</div>;
});

export default StringLiteralStore;
"
`;

exports[`qwik > jsx > Javascript Test > styleClassAndCss 1`] = `
"import { Fragment, component$, h, useStylesScoped$ } from \\"@builder.io/qwik\\";

export const MyComponent = component$((props) => {
  useStylesScoped$(STYLES);

  return (
    <div
      class=\\"builder-column div-MyComponent\\"
      style={{
        width: \\"100%\\",
      }}
    ></div>
  );
});

export default MyComponent;

export const STYLES = \`
.div-MyComponent {
  display: flex;
  flex-direction: column;
  align-items: stretch;
}
\`;
"
`;

exports[`qwik > jsx > Javascript Test > stylePropClassAndCss 1`] = `
"import { Fragment, component$, h, useStylesScoped$ } from \\"@builder.io/qwik\\";

export const StylePropClassAndCss = component$((props) => {
  useStylesScoped$(STYLES);

  return (
    <div
      style={props.attributes.style}
      class={props.attributes.class + \\" div-StylePropClassAndCss\\"}
    ></div>
  );
});

export default StylePropClassAndCss;

export const STYLES = \`
.div-StylePropClassAndCss {
  display: flex;
  flex-direction: column;
  align-items: stretch;
}
\`;
"
`;

exports[`qwik > jsx > Javascript Test > subComponent 1`] = `
"import Foo from \\"./foo-sub-component.jsx\\";

import { Fragment, component$, h } from \\"@builder.io/qwik\\";

export const SubComponent = component$((props) => {
  return <Foo></Foo>;
});

export default SubComponent;
"
`;

exports[`qwik > jsx > Javascript Test > svgComponent 1`] = `
"import { Fragment, component$, h } from \\"@builder.io/qwik\\";

export const SvgComponent = component$((props) => {
  return (
    <svg
      fill=\\"none\\"
      role=\\"img\\"
      viewBox={\\"0 0 \\" + 42 + \\" \\" + 42}
      width={42}
      height={42}
    >
      <defs>
        <filter id=\\"prefix__filter0_f\\" filterUnits=\\"userSpaceOnUse\\">
          <feFlood result=\\"BackgroundImageFix\\"></feFlood>
          <feBlend
            in=\\"SourceGraphic\\"
            in2=\\"BackgroundImageFix\\"
            result=\\"shape\\"
          ></feBlend>
          <feGaussianBlur
            result=\\"effect1_foregroundBlur\\"
            stdDeviation={7}
          ></feGaussianBlur>
        </filter>
      </defs>
    </svg>
  );
});

export default SvgComponent;
"
`;

exports[`qwik > jsx > Javascript Test > typeDependency 1`] = `
"import { Fragment, component$, h } from \\"@builder.io/qwik\\";

export const TypeDependency = component$((props) => {
  return <div>{props.foo}</div>;
});

export default TypeDependency;
"
`;

exports[`qwik > jsx > Javascript Test > use-style 1`] = `
"import { Fragment, component$, h, useStylesScoped$ } from \\"@builder.io/qwik\\";

export const MyComponent = component$((props) => {
  useStylesScoped$(STYLES);

  return <button type=\\"button\\">Button</button>;
});

export default MyComponent;

export const STYLES = \`
button {
  background: blue;
  color: white;
  font-size: 12px;
  outline: 1px solid black;
}
\`;
"
`;

exports[`qwik > jsx > Javascript Test > use-style-and-css 1`] = `
"import { Fragment, component$, h, useStylesScoped$ } from \\"@builder.io/qwik\\";

export const MyComponent = component$((props) => {
  useStylesScoped$(STYLES);

  return (
    <button type=\\"button\\" class=\\"button-MyComponent\\">
      Button
    </button>
  );
});

export default MyComponent;

export const STYLES = \`
button {
  font-size: 12px;
  outline: 1px solid black;
}

.button-MyComponent {
  background: blue;
  color: white;
}
\`;
"
`;

exports[`qwik > jsx > Javascript Test > use-style-outside-component 1`] = `
"import { Fragment, component$, h, useStylesScoped$ } from \\"@builder.io/qwik\\";

export const MyComponent = component$((props) => {
  useStylesScoped$(STYLES);

  return <button type=\\"button\\">Button</button>;
});

export default MyComponent;

export const STYLES = \`
button {
  background: blue;
  color: white;
  font-size: 12px;
  outline: 1px solid black;
}
\`;
"
`;

exports[`qwik > jsx > Javascript Test > useTarget 1`] = `
"import {
  Fragment,
  component$,
  h,
  useComputed$,
  useStore,
  useVisibleTask$,
} from \\"@builder.io/qwik\\";

export const UseTargetComponent = component$((props) => {
  const name = useComputed$(() => {
    const prefix = \\"q\\";
    return prefix + \\"foo\\";
  });
  const state = useStore({ lastName: \\"bar\\" });
  useVisibleTask$(() => {
    console.log(\\"qwik\\");
    state.lastName = \\"baz\\";
  });

  return <div>{name.value}</div>;
});

export default UseTargetComponent;
"
`;

exports[`qwik > jsx > Javascript Test > webComponent 1`] = `
"import { Fragment, component$, h, useTask$ } from \\"@builder.io/qwik\\";

import { register } from \\"swiper/element/bundle\\";

export const MyBasicWebComponent = component$((props) => {
  useTask$(() => {
    register();
  });

  return (
    <swiper-container slides-per-view=\\"3\\" navigation=\\"true\\" pagination=\\"true\\">
      <swiper-slide>Slide 1</swiper-slide>
      <swiper-slide>Slide 2</swiper-slide>
      <swiper-slide>Slide 3</swiper-slide>
    </swiper-container>
  );
});

export default MyBasicWebComponent;
"
`;

exports[`qwik > jsx > Remove Internal mitosis package 1`] = `
"import { Fragment, component$, h, useStore } from \\"@builder.io/qwik\\";

export const MyBasicComponent = component$((props) => {
  const state = useStore({ name: \\"PatrickJS\\" });

  return (
    <div>
      Hello {state.name}! I can run in React, Qwik, Vue, Solid, or Liquid!
    </div>
  );
});

export default MyBasicComponent;
"
`;

exports[`qwik > jsx > Typescript Test > Basic 1`] = `
"import {
  $,
  Fragment,
  component$,
  h,
  useStore,
  useStylesScoped$,
} from \\"@builder.io/qwik\\";

export interface MyBasicComponentProps {
  id: string;
}
export const DEFAULT_VALUES = {
  name: \\"Steve\\",
};
export const underscore_fn_name = function underscore_fn_name(props, state) {
  return \\"bar\\";
};
export const MyBasicComponent = component$((props: MyBasicComponentProps) => {
  useStylesScoped$(STYLES);

  const state = useStore<any>({ age: 1, name: \\"Steve\\", sports: [\\"\\"] });

  return (
    <div class=\\"test div-MyBasicComponent\\">
      <input
        value={DEFAULT_VALUES.name || state.name}
        onChange$={$((event) => (state.name = myEvent.target.value))}
      />
      Hello! I can run in React, Vue, Solid, or Liquid!
    </div>
  );
});

export default MyBasicComponent;

export const STYLES = \`
.div-MyBasicComponent {
  padding: 10px;
}
\`;
"
`;

exports[`qwik > jsx > Typescript Test > Basic 2`] = `
"import { $, Fragment, component$, h, useStore } from \\"@builder.io/qwik\\";

export const MyBasicForShowComponent = component$((props: any) => {
  const state = useStore<any>({
    name: \\"PatrickJS\\",
    names: [\\"Steve\\", \\"PatrickJS\\"],
  });

  return (
    <div>
      {(state.names || []).map((person) => {
        return person === state.name ? (
          <>
            <input
              value={state.name}
              onChange$={$((event) => {
                state.name = event.target.value + \\" and \\" + person;
              })}
            />
            Hello {person}! I can run in Qwik, Web Component, React, Vue, Solid,
            or Liquid!
          </>
        ) : null;
      })}
    </div>
  );
});

export default MyBasicForShowComponent;
"
`;

exports[`qwik > jsx > Typescript Test > Basic Context 1`] = `
"import {
  $,
  Fragment,
  component$,
  h,
  useContext,
  useContextProvider,
  useStore,
  useTask$,
  useVisibleTask$,
} from \\"@builder.io/qwik\\";

import { Injector, MyService, createInjector } from \\"@dummy/injection-js\\";

export const onChange = function onChange(props, state, myService) {
  const change = myService.method(\\"change\\");
  console.log(change);
};
export const MyBasicComponent = component$((props: any) => {
  const myService = useContext(MyService);
  const state = useStore<any>({ name: \\"PatrickJS\\" });
  useContextProvider(Injector, createInjector());
  useVisibleTask$(() => {
    const bye = myService.method(\\"hi\\");
    console.log(bye);
  });
  useTask$(() => {
    const hi = myService.method(\\"hi\\");
    console.log(hi);
  });

  return (
    <div>
      {myService.method(\\"hello\\") + state.name}
      Hello! I can run in React, Vue, Solid, or Liquid!
      <input onChange$={$((event) => state.onChange)} />
    </div>
  );
});

export default MyBasicComponent;
"
`;

exports[`qwik > jsx > Typescript Test > Basic OnMount Update 1`] = `
"import {
  Fragment,
  component$,
  h,
  useStore,
  useTask$,
  useVisibleTask$,
} from \\"@builder.io/qwik\\";

export interface Props {
  hi: string;
  bye: string;
}
export const MyBasicOnMountUpdateComponent = component$((props: Props) => {
  const state = useStore<any>({
    name: \\"PatrickJS\\",
    names: [\\"Steve\\", \\"PatrickJS\\"],
  });
  useVisibleTask$(() => {
    state.name = \\"PatrickJS onMount\\" + props.bye;
  });
  useTask$(() => {
    state.name = \\"PatrickJS onInit\\" + props.hi;
  });

  return <div>Hello {state.name}</div>;
});

export default MyBasicOnMountUpdateComponent;
"
`;

exports[`qwik > jsx > Typescript Test > Basic Outputs 1`] = `
"import {
  Fragment,
  component$,
  h,
  useStore,
  useVisibleTask$,
} from \\"@builder.io/qwik\\";

export const MyBasicOutputsComponent = component$((props: any) => {
  const state = useStore<any>({ name: \\"PatrickJS\\" });
  useVisibleTask$(() => {
    props.onMessage(state.name);
    props.onEvent(props.message);
  });

  return <div></div>;
});

export default MyBasicOutputsComponent;
"
`;

exports[`qwik > jsx > Typescript Test > Basic Outputs Meta 1`] = `
"import {
  Fragment,
  component$,
  h,
  useStore,
  useVisibleTask$,
} from \\"@builder.io/qwik\\";

export const MyBasicOutputsComponent = component$((props: any) => {
  const state = useStore<any>({ name: \\"PatrickJS\\" });
  useVisibleTask$(() => {
    props.onMessage(state.name);
    props.onEvent(props.message);
  });

  return <div></div>;
});

export default MyBasicOutputsComponent;
"
`;

exports[`qwik > jsx > Typescript Test > BasicAttribute 1`] = `
"import { Fragment, component$, h } from \\"@builder.io/qwik\\";

export const MyComponent = component$((props: any) => {
  return <input autocapitalize=\\"on\\" autocomplete=\\"on\\" spellcheck={true} />;
});

export default MyComponent;
"
`;

exports[`qwik > jsx > Typescript Test > BasicBooleanAttribute 1`] = `
"import MyBooleanAttributeComponent from \\"./basic-boolean-attribute-component.raw\\";

import { Fragment, Slot, component$, h } from \\"@builder.io/qwik\\";

type Props = {
  children: any;
  type: string;
};
export const MyBooleanAttribute = component$((props: Props) => {
  return (
    <div>
      {props.children ? (
        <>
          <Slot></Slot>
          {props.type}
        </>
      ) : null}
      <MyBooleanAttributeComponent toggle={true}></MyBooleanAttributeComponent>
      <MyBooleanAttributeComponent toggle={true}></MyBooleanAttributeComponent>
      <MyBooleanAttributeComponent list={null}></MyBooleanAttributeComponent>
    </div>
  );
});

export default MyBooleanAttribute;
"
`;

exports[`qwik > jsx > Typescript Test > BasicChildComponent 1`] = `
"import MyBasicOnMountUpdateComponent from \\"./basic-onMount-update.raw\\";

import MyBasicComponent from \\"./basic.raw\\";

import { Fragment, component$, h, useStore } from \\"@builder.io/qwik\\";

export const MyBasicChildComponent = component$((props: any) => {
  const state = useStore<any>({ dev: \\"PatrickJS\\", name: \\"Steve\\" });

  return (
    <div>
      <MyBasicComponent id={state.dev}></MyBasicComponent>
      <div>
        <MyBasicOnMountUpdateComponent
          hi={state.name}
          bye={state.dev}
        ></MyBasicOnMountUpdateComponent>
      </div>
    </div>
  );
});

export default MyBasicChildComponent;
"
`;

exports[`qwik > jsx > Typescript Test > BasicFor 1`] = `
"import {
  $,
  Fragment,
  component$,
  h,
  useStore,
  useVisibleTask$,
} from \\"@builder.io/qwik\\";

export const MyBasicForComponent = component$((props: any) => {
  const state = useStore<any>({
    name: \\"PatrickJS\\",
    names: [\\"Steve\\", \\"PatrickJS\\"],
  });
  useVisibleTask$(() => {
    console.log(\\"onMount code\\");
  });

  return (
    <div>
      {(state.names || []).map((person) => {
        return (
          <Fragment>
            <input
              value={state.name}
              onChange$={$((event) => {
                state.name = event.target.value + \\" and \\" + person;
              })}
            />
            Hello {person}! I can run in Qwik, Web Component, React, Vue, Solid,
            or Liquid!
          </Fragment>
        );
      })}
    </div>
  );
});

export default MyBasicForComponent;
"
`;

exports[`qwik > jsx > Typescript Test > BasicRef 1`] = `
"import {
  $,
  Fragment,
  component$,
  h,
  useSignal,
  useStore,
  useStylesScoped$,
} from \\"@builder.io/qwik\\";

export interface Props {
  showInput: boolean;
}
export const onBlur = function onBlur(props, state, inputRef, inputNoArgRef) {
  // Maintain focus
  inputRef.value.focus();
};
export const lowerCaseName = function lowerCaseName(
  props,
  state,
  inputRef,
  inputNoArgRef
) {
  return state.name.toLowerCase();
};
export const MyBasicRefComponent = component$((props: Props) => {
  useStylesScoped$(STYLES);

  const inputRef = useSignal<Element>();
  const inputNoArgRef = useSignal<Element>();
  const state = useStore<any>({ name: \\"PatrickJS\\" });

  return (
    <div>
      {props.showInput ? (
        <Fragment>
          <input
            class=\\"input-MyBasicRefComponent\\"
            ref={inputRef}
            value={state.name}
            onBlur$={$((event) => state.onBlur())}
            onChange$={$((event) => (state.name = event.target.value))}
          />
          <label for=\\"cars\\" ref={inputNoArgRef}>
            Choose a car:
          </label>
          <select name=\\"cars\\" id=\\"cars\\">
            <option value=\\"supra\\">GR Supra</option>
            <option value=\\"86\\">GR 86</option>
          </select>
        </Fragment>
      ) : null}
      Hello
      {state.lowerCaseName()}! I can run in React, Qwik, Vue, Solid, or Web
      Component!
    </div>
  );
});

export default MyBasicRefComponent;

export const STYLES = \`
.input-MyBasicRefComponent {
  color: red;
}
\`;
"
`;

exports[`qwik > jsx > Typescript Test > BasicRefAssignment 1`] = `
"import { $, Fragment, component$, h, useSignal } from \\"@builder.io/qwik\\";

export interface Props {
  showInput: boolean;
}
export const handlerClick = function handlerClick(
  props,
  state,
  holdValueRef,
  event: Event
) {
  event.preventDefault();
  console.log(\\"current value\\", holdValueRef.value);
  holdValueRef.value = holdValueRef.value + \\"JS\\";
};
export const MyBasicRefAssignmentComponent = component$((props: Props) => {
  const holdValueRef = useSignal<Element>();
  const state: any = {};

  return (
    <div>
      <button onClick$={$((event) => state.handlerClick(evt))}>Click</button>
    </div>
  );
});

export default MyBasicRefAssignmentComponent;
"
`;

exports[`qwik > jsx > Typescript Test > BasicRefPrevious 1`] = `
"import {
  $,
  Fragment,
  component$,
  h,
  useSignal,
  useStore,
  useTask$,
} from \\"@builder.io/qwik\\";

export interface Props {
  showInput: boolean;
}
export function usePrevious<T>(value: T) {
  // The ref object is a generic container whose current property is mutable ...
  // ... and can hold any value, similar to an instance property on a class
  let ref = useRef<T>(null); // Store current value in ref

  onUpdate(() => {
    ref = value;
  }, [value]); // Only re-run if value changes
  // Return previous value (happens before update in useEffect above)

  return ref;
}
export const MyPreviousComponent = component$((props: Props) => {
  const prevCount = useSignal<Element>();
  const state = useStore<any>({ count: 0 });
  useTask$(({ track }) => {
    track(() => state.count);
    prevCount.value = state.count;
  });

  return (
    <div>
      <h1>
        Now: {state.count}, before: {prevCount.value}
      </h1>
      <button onClick$={$((event) => (state.count += 1))}>Increment</button>
    </div>
  );
});

export default MyPreviousComponent;
"
`;

exports[`qwik > jsx > Typescript Test > Button 1`] = `
"import { Fragment, component$, h } from \\"@builder.io/qwik\\";

export interface ButtonProps {
  attributes?: any;
  text?: string;
  link?: string;
  openLinkInNewTab?: boolean;
}
export const Button = component$((props: ButtonProps) => {
  return (
    <div>
      {props.link ? (
        <a
          {...props.attributes}
          href={props.link}
          target={props.openLinkInNewTab ? \\"_blank\\" : undefined}
        >
          {props.text}
        </a>
      ) : null}
      {!props.link ? (
        <button type=\\"button\\" {...props.attributes}>
          {props.text}
        </button>
      ) : null}
    </div>
  );
});

export default Button;
"
`;

exports[`qwik > jsx > Typescript Test > Columns 1`] = `
"import { Fragment, component$, h, useStylesScoped$ } from \\"@builder.io/qwik\\";

type Column = {
  content: any; // TODO: Implement this when support for dynamic CSS lands

  width?: number;
};
export interface ColumnProps {
  columns?: Column[]; // TODO: Implement this when support for dynamic CSS lands

  space?: number; // TODO: Implement this when support for dynamic CSS lands

  stackColumnsAt?: \\"tablet\\" | \\"mobile\\" | \\"never\\"; // TODO: Implement this when support for dynamic CSS lands

  reverseColumnsWhenStacked?: boolean;
}
export const getColumns = function getColumns(props, state) {
  return props.columns || [];
};
export const getGutterSize = function getGutterSize(props, state) {
  return typeof props.space === \\"number\\" ? props.space || 0 : 20;
};
export const getWidth = function getWidth(props, state, index: number) {
  const columns = getColumns(props, state);
  return (columns[index] && columns[index].width) || 100 / columns.length;
};
export const getColumnCssWidth = function getColumnCssWidth(
  props,
  state,
  index: number
) {
  const columns = getColumns(props, state);
  const gutterSize = getGutterSize(props, state);
  const subtractWidth = (gutterSize * (columns.length - 1)) / columns.length;
  return \`calc(\${getWidth(props, state, index)}% - \${subtractWidth}px)\`;
};
export const Column = component$((props: ColumnProps) => {
  useStylesScoped$(STYLES);

  const state: any = {};

  return (
    <div class=\\"builder-columns div-Column\\">
      {(props.columns || []).map((column, index) => {
        return (
          <div class=\\"builder-column div-Column-2\\">
            {column.content}
            {index}
          </div>
        );
      })}
    </div>
  );
});

export default Column;

export const STYLES = \`
.div-Column {
  display: flex;
  flex-direction: column;
  align-items: stretch;
  line-height: normal;
}
@media (max-width: 999px) {
  .div-Column {
    flex-direction: row;
  }
}
@media (max-width: 639px) {
  .div-Column {
    flex-direction: row-reverse;
  }
}
.div-Column-2 {
  flex-grow: 1;
}
\`;
"
`;

exports[`qwik > jsx > Typescript Test > ContentSlotHtml 1`] = `
"import { JSX } from \\"../../../../jsx-runtime\\";

import { Fragment, Slot, component$, h } from \\"@builder.io/qwik\\";

type Props = {
  [key: string]: string | JSX.Element;
  slotTesting: JSX.Element;
};
export const ContentSlotCode = component$((props: Props) => {
  return (
    <div>
      <Slot name={props.slotTesting}></Slot>
      <div>
        <hr />
      </div>
      <div>
        <Slot></Slot>
      </div>
    </div>
  );
});

export default ContentSlotCode;
"
`;

exports[`qwik > jsx > Typescript Test > ContentSlotJSX 1`] = `
"import { JSX } from \\"../../../../jsx-runtime\\";

import {
  $,
  Fragment,
  Slot,
  component$,
  h,
  useComputed$,
  useStore,
} from \\"@builder.io/qwik\\";

type Props = {
  [key: string]: string | JSX.Element;
};
export const show = function show(props, state, cls) {
  props.slotContent ? 1 : \\"\\";
};
export const ContentSlotJsxCode = component$((props: Props) => {
  const cls = useComputed$(() => {
    return props.slotContent && props.children ? \`\${state.name}-content\` : \\"\\";
  });
  const state = useStore<any>({ name: \\"king\\", showContent: false });

  return (
    <>
      {props.slotReference ? (
        <div
          name={props.slotContent ? \\"name1\\" : \\"name2\\"}
          title={props.slotContent ? \\"title1\\" : \\"title2\\"}
          {...props.attributes}
          onClick$={$((event) => show(props, state, cls))}
          class={cls.value}
        >
          {state.showContent && props.slotContent ? (
            <Slot name=\\"content\\">{props.content}</Slot>
          ) : null}
          <div>
            <hr />
          </div>
          <div>
            <Slot></Slot>
          </div>
        </div>
      ) : null}
    </>
  );
});

export default ContentSlotJsxCode;
"
`;

exports[`qwik > jsx > Typescript Test > CustomCode 1`] = `
"import {
  Fragment,
  component$,
  h,
  useSignal,
  useStore,
  useVisibleTask$,
} from \\"@builder.io/qwik\\";

export interface CustomCodeProps {
  code: string;
  replaceNodes?: boolean;
}
export const findAndRunScripts = function findAndRunScripts(
  props,
  state,
  elem
) {
  // TODO: Move this function to standalone one in '@builder.io/utils'
  if (elem.value && typeof window !== \\"undefined\\") {
    /** @type {HTMLScriptElement[]} */
    const scripts = elem.value.getElementsByTagName(\\"script\\");

    for (let i = 0; i < scripts.length; i++) {
      const script = scripts[i];

      if (script.src) {
        if (state.scriptsInserted.includes(script.src)) {
          continue;
        }

        state.scriptsInserted.push(script.src);
        const newScript = document.createElement(\\"script\\");
        newScript.async = true;
        newScript.src = script.src;
        document.head.appendChild(newScript);
      } else if (
        !script.type ||
        [
          \\"text/javascript\\",
          \\"application/javascript\\",
          \\"application/ecmascript\\",
        ].includes(script.type)
      ) {
        if (state.scriptsRun.includes(script.innerText)) {
          continue;
        }

        try {
          state.scriptsRun.push(script.innerText);
          new Function(script.innerText)();
        } catch (error) {
          console.warn(\\"\`CustomCode\`: Error running script:\\", error);
        }
      }
    }
  }
};
export const CustomCode = component$((props: CustomCodeProps) => {
  const elem = useSignal<Element>();
  const state = useStore<any>({ scriptsInserted: [], scriptsRun: [] });
  useVisibleTask$(() => {
    findAndRunScripts(props, state, elem);
  });

  return (
    <div
      ref={elem}
      class={
        \\"builder-custom-code\\" + (props.replaceNodes ? \\" replace-nodes\\" : \\"\\")
      }
      dangerouslySetInnerHTML={props.code}
    ></div>
  );
});

export default CustomCode;
"
`;

exports[`qwik > jsx > Typescript Test > Embed 1`] = `
"import {
  Fragment,
  component$,
  h,
  useSignal,
  useStore,
  useVisibleTask$,
} from \\"@builder.io/qwik\\";

export interface CustomCodeProps {
  code: string;
  replaceNodes?: boolean;
}
export const findAndRunScripts = function findAndRunScripts(
  props,
  state,
  elem
) {
  // TODO: Move this function to standalone one in '@builder.io/utils'
  if (elem.value && typeof window !== \\"undefined\\") {
    /** @type {HTMLScriptElement[]} */
    const scripts = elem.value.getElementsByTagName(\\"script\\");

    for (let i = 0; i < scripts.length; i++) {
      const script = scripts[i];

      if (script.src) {
        if (state.scriptsInserted.includes(script.src)) {
          continue;
        }

        state.scriptsInserted.push(script.src);
        const newScript = document.createElement(\\"script\\");
        newScript.async = true;
        newScript.src = script.src;
        document.head.appendChild(newScript);
      } else if (
        !script.type ||
        [
          \\"text/javascript\\",
          \\"application/javascript\\",
          \\"application/ecmascript\\",
        ].includes(script.type)
      ) {
        if (state.scriptsRun.includes(script.innerText)) {
          continue;
        }

        try {
          state.scriptsRun.push(script.innerText);
          new Function(script.innerText)();
        } catch (error) {
          console.warn(\\"\`CustomCode\`: Error running script:\\", error);
        }
      }
    }
  }
};
export const CustomCode = component$((props: CustomCodeProps) => {
  const elem = useSignal<Element>();
  const state = useStore<any>({ scriptsInserted: [], scriptsRun: [] });
  useVisibleTask$(() => {
    findAndRunScripts(props, state, elem);
  });

  return (
    <div
      ref={elem}
      class={
        \\"builder-custom-code\\" + (props.replaceNodes ? \\" replace-nodes\\" : \\"\\")
      }
      dangerouslySetInnerHTML={props.code}
    ></div>
  );
});

export default CustomCode;
"
`;

exports[`qwik > jsx > Typescript Test > Form 1`] = `
"import {
  $,
  Fragment,
  component$,
  h,
  useComputed$,
  useSignal,
  useStore,
  useStylesScoped$,
} from \\"@builder.io/qwik\\";

import { Builder, BuilderElement, builder } from \\"@builder.io/sdk\\";

import {
  BuilderBlock as BuilderBlockComponent,
  BuilderBlocks,
  get,
  set,
} from \\"@fake\\";

export interface FormProps {
  attributes?: any;
  name?: string;
  action?: string;
  validate?: boolean;
  method?: string;
  builderBlock?: BuilderElement;
  sendSubmissionsTo?: string;
  sendSubmissionsToEmail?: string;
  sendWithJs?: boolean;
  contentType?: string;
  customHeaders?: {
    [key: string]: string;
  };
  successUrl?: string;
  previewState?: FormState;
  successMessage?: BuilderElement[];
  errorMessage?: BuilderElement[];
  sendingMessage?: BuilderElement[];
  resetFormOnSubmit?: boolean;
  errorMessagePath?: string;
}
export type FormState = \\"unsubmitted\\" | \\"sending\\" | \\"success\\" | \\"error\\";
export const onSubmit = function onSubmit(
  props,
  state,
  submissionState,
  formRef,
  event: Event & {
    currentTarget: HTMLFormElement;
  }
) {
  const sendWithJs = props.sendWithJs || props.sendSubmissionsTo === \\"email\\";

  if (props.sendSubmissionsTo === \\"zapier\\") {
    event.preventDefault();
  } else if (sendWithJs) {
    if (!(props.action || props.sendSubmissionsTo === \\"email\\")) {
      event.preventDefault();
      return;
    }

    event.preventDefault();
    const el = event.currentTarget;
    const headers = props.customHeaders || {};
    let body: any;
    const formData = new FormData(el); // TODO: maybe support null

    const formPairs: {
      key: string;
      value: File | boolean | number | string | FileList;
    }[] = Array.from(
      event.currentTarget.querySelectorAll(\\"input,select,textarea\\")
    )
      .filter((el) => !!(el as HTMLInputElement).name)
      .map((el) => {
        let value: any;
        const key = (el as HTMLImageElement).name;

        if (el instanceof HTMLInputElement) {
          if (el.type === \\"radio\\") {
            if (el.checked) {
              value = el.name;
              return {
                key,
                value,
              };
            }
          } else if (el.type === \\"checkbox\\") {
            value = el.checked;
          } else if (el.type === \\"number\\" || el.type === \\"range\\") {
            const num = el.valueAsNumber;

            if (!isNaN(num)) {
              value = num;
            }
          } else if (el.type === \\"file\\") {
            // TODO: one vs multiple files
            value = el.files;
          } else {
            value = el.value;
          }
        } else {
          value = (el as HTMLInputElement).value;
        }

        return {
          key,
          value,
        };
      });
    let contentType = props.contentType;

    if (props.sendSubmissionsTo === \\"email\\") {
      contentType = \\"multipart/form-data\\";
    }

    Array.from(formPairs).forEach(({ value }) => {
      if (
        value instanceof File ||
        (Array.isArray(value) && value[0] instanceof File) ||
        value instanceof FileList
      ) {
        contentType = \\"multipart/form-data\\";
      }
    }); // TODO: send as urlEncoded or multipart by default
    // because of ease of use and reliability in browser API
    // for encoding the form?

    if (contentType !== \\"application/json\\") {
      body = formData;
    } else {
      // Json
      const json = {};
      Array.from(formPairs).forEach(({ value, key }) => {
        set(json, key, value);
      });
      body = JSON.stringify(json);
    }

    if (contentType && contentType !== \\"multipart/form-data\\") {
      if (
        /* Zapier doesn't allow content-type header to be sent from browsers */
        !(sendWithJs && props.action?.includes(\\"zapier.com\\"))
      ) {
        headers[\\"content-type\\"] = contentType;
      }
    }

    const presubmitEvent = new CustomEvent(\\"presubmit\\", {
      detail: {
        body,
      },
    });

    if (formRef.value) {
      formRef.value.dispatchEvent(presubmitEvent);

      if (presubmitEvent.defaultPrevented) {
        return;
      }
    }

    state.formState = \\"sending\\";
    const formUrl = \`\${
      builder.env === \\"dev\\" ? \\"http://localhost:5000\\" : \\"https://builder.io\\"
    }/api/v1/form-submit?apiKey=\${builder.apiKey}&to=\${btoa(
      props.sendSubmissionsToEmail || \\"\\"
    )}&name=\${encodeURIComponent(props.name || \\"\\")}\`;
    fetch(
      props.sendSubmissionsTo === \\"email\\" ? formUrl : props.action!,
      /* TODO: throw error if no action URL */
      {
        body,
        headers,
        method: props.method || \\"post\\",
      }
    ).then(
      async (res) => {
        let body;
        const contentType = res.headers.get(\\"content-type\\");

        if (contentType && contentType.indexOf(\\"application/json\\") !== -1) {
          body = await res.json();
        } else {
          body = await res.text();
        }

        if (!res.ok && props.errorMessagePath) {
          /* TODO: allow supplying an error formatter function */
          let message = get(body, props.errorMessagePath);

          if (message) {
            if (typeof message !== \\"string\\") {
              /* TODO: ideally convert json to yaml so it woul dbe like
             error: - email has been taken */
              message = JSON.stringify(message);
            }

            state.formErrorMessage = message;
          }
        }

        state.responseData = body;
        state.formState = res.ok ? \\"success\\" : \\"error\\";

        if (res.ok) {
          const submitSuccessEvent = new CustomEvent(\\"submit:success\\", {
            detail: {
              res,
              body,
            },
          });

          if (formRef.value) {
            formRef.value.dispatchEvent(submitSuccessEvent);

            if (submitSuccessEvent.defaultPrevented) {
              return;
            }
            /* TODO: option to turn this on/off? */

            if (props.resetFormOnSubmit !== false) {
              formRef.value.reset();
            }
          }
          /* TODO: client side route event first that can be preventDefaulted */

          if (props.successUrl) {
            if (formRef.value) {
              const event = new CustomEvent(\\"route\\", {
                detail: {
                  url: props.successUrl,
                },
              });
              formRef.value.dispatchEvent(event);

              if (!event.defaultPrevented) {
                location.href = props.successUrl;
              }
            } else {
              location.href = props.successUrl;
            }
          }
        }
      },
      (err) => {
        const submitErrorEvent = new CustomEvent(\\"submit:error\\", {
          detail: {
            error: err,
          },
        });

        if (formRef.value) {
          formRef.value.dispatchEvent(submitErrorEvent);

          if (submitErrorEvent.defaultPrevented) {
            return;
          }
        }

        state.responseData = err;
        state.formState = \\"error\\";
      }
    );
  }
};
export const FormComponent = component$((props: FormProps) => {
  useStylesScoped$(STYLES);

  const submissionState = useComputed$(() => {
    return (Builder.isEditing && props.previewState) || state.formState;
  });
  const formRef = useSignal<Element>();
  const state = useStore<any>({
    formErrorMessage: \\"\\",
    formState: \\"unsubmitted\\",
    responseData: null,
  });

  return (
    <form
      validate={props.validate}
      ref={formRef}
      action={(() => {
        !props.sendWithJs && props.action;
      })()}
      method={props.method}
      name={props.name}
      onSubmit$={$((event) =>
        onSubmit(props, state, submissionState, formRef, event)
      )}
      {...props.attributes}
    >
      {props.builderBlock && props.builderBlock.children
        ? (props.builderBlock?.children || []).map((block, index) => {
            return (
              <BuilderBlockComponent
                key={block.id}
                block={block}
                index={index}
              ></BuilderBlockComponent>
            );
          })
        : null}
      {submissionState.value === \\"error\\" ? (
        <BuilderBlocks
          dataPath=\\"errorMessage\\"
          blocks={props.errorMessage!}
        ></BuilderBlocks>
      ) : null}
      {submissionState.value === \\"sending\\" ? (
        <BuilderBlocks
          dataPath=\\"sendingMessage\\"
          blocks={props.sendingMessage!}
        ></BuilderBlocks>
      ) : null}
      {submissionState.value === \\"error\\" && state.responseData ? (
        <pre class=\\"builder-form-error-text pre-FormComponent\\">
          {JSON.stringify(state.responseData, null, 2)}
        </pre>
      ) : null}
      {submissionState.value === \\"success\\" ? (
        <BuilderBlocks
          dataPath=\\"successMessage\\"
          blocks={props.successMessage!}
        ></BuilderBlocks>
      ) : null}
    </form>
  );
});

export default FormComponent;

export const STYLES = \`
.pre-FormComponent {
  padding: 10px;
  color: red;
  text-align: center;
}
\`;
"
`;

exports[`qwik > jsx > Typescript Test > Image 1`] = `
"import {
  $,
  Fragment,
  Slot,
  component$,
  h,
  useSignal,
  useStore,
  useStylesScoped$,
  useVisibleTask$,
} from \\"@builder.io/qwik\\";

// TODO: AMP Support?
export interface ImageProps {
  _class?: string;
  image: string;
  sizes?: string;
  lazy?: boolean;
  height?: number;
  width?: number;
  altText?: string;
  backgroundSize?: string;
  backgroundPosition?: string; // TODO: Support generating Builder.io and or Shopify \`srcset\`s when needed

  srcset?: string; // TODO: Implement support for custom aspect ratios

  aspectRatio?: number; // TODO: This might not work as expected in terms of positioning

  children?: any;
}
export const setLoaded = function setLoaded(props, state, pictureRef) {
  state.imageLoaded = true;
};
export const useLazyLoading = function useLazyLoading(
  props,
  state,
  pictureRef
) {
  // TODO: Add more checks here, like testing for real web browsers
  return !!props.lazy && state.isBrowser();
};
export const isBrowser = function isBrowser(props, state, pictureRef) {
  return (
    typeof window !== \\"undefined\\" && window.navigator.product != \\"ReactNative\\"
  );
};
export const Image = component$((props: ImageProps) => {
  useStylesScoped$(STYLES);

  const pictureRef = useSignal<Element>();
  const state = useStore<any>({
    imageLoaded: false,
    load: false,
    scrollListener: null,
  });
  useVisibleTask$(() => {
    if (useLazyLoading(props, state, pictureRef)) {
      // throttled scroll capture listener
      const listener = () => {
        if (pictureRef.value) {
          const rect = pictureRef.value.getBoundingClientRect();
          const buffer = window.innerHeight / 2;

          if (rect.top < window.innerHeight + buffer) {
            state.load = true;
            state.scrollListener = null;
            window.removeEventListener(\\"scroll\\", listener);
          }
        }
      };

      state.scrollListener = listener;
      window.addEventListener(\\"scroll\\", listener, {
        capture: true,
        passive: true,
      });
      listener();
    }
  });

  return (
    <div>
      <picture ref={pictureRef}>
        {!useLazyLoading(props, state, pictureRef) || state.load ? (
          <img
            alt={props.altText}
            aria-role={props.altText ? \\"presentation\\" : undefined}
            class={
              \\"builder-image\\" +
              (props._class ? \\" \\" + props._class : \\"\\") +
              \\" img-Image\\"
            }
            src={props.image}
            onLoad$={$((event) => setLoaded(props, state, pictureRef))}
            srcset={props.srcset}
            sizes={props.sizes}
          />
        ) : null}
        <source srcset={props.srcset} />
      </picture>
      <Slot></Slot>
    </div>
  );
});

export default Image;

export const STYLES = \`
.img-Image {
  opacity: 1;
  transition: opacity 0.2s ease-in-out;
  object-fit: cover;
  object-position: center;
}
\`;
"
`;

exports[`qwik > jsx > Typescript Test > Image State 1`] = `
"import { Fragment, component$, h, useStore } from \\"@builder.io/qwik\\";

export const ImgStateComponent = component$((props: any) => {
  const state = useStore<any>({
    canShow: true,
    images: [\\"http://example.com/qwik.png\\"],
  });

  return (
    <div>
      {(state.images || []).map((item, itemIndex) => {
        return (
          <Fragment>
            <img class=\\"custom-class\\" src={item} key={itemIndex} />
          </Fragment>
        );
      })}
    </div>
  );
});

export default ImgStateComponent;
"
`;

exports[`qwik > jsx > Typescript Test > Img 1`] = `
"import { Fragment, component$, h } from \\"@builder.io/qwik\\";

import { Builder } from \\"@builder.io/sdk\\";

export interface ImgProps {
  attributes?: any;
  imgSrc?: string;
  altText?: string;
  backgroundSize?: \\"cover\\" | \\"contain\\";
  backgroundPosition?:
    | \\"center\\"
    | \\"top\\"
    | \\"left\\"
    | \\"right\\"
    | \\"bottom\\"
    | \\"top left\\"
    | \\"top right\\"
    | \\"bottom left\\"
    | \\"bottom right\\";
}
export const ImgComponent = component$((props: ImgProps) => {
  return (
    <img
      style={{
        objectFit: props.backgroundSize || \\"cover\\",
        objectPosition: props.backgroundPosition || \\"center\\",
      }}
      {...props.attributes}
      key={(Builder.isEditing && props.imgSrc) || \\"default-key\\"}
      alt={props.altText}
      src={props.imgSrc}
    />
  );
});

export default ImgComponent;
"
`;

exports[`qwik > jsx > Typescript Test > Input 1`] = `
"import { $, Fragment, component$, h } from \\"@builder.io/qwik\\";

import { Builder } from \\"@builder.io/sdk\\";

export interface FormInputProps {
  type?: string;
  attributes?: any;
  name?: string;
  value?: string;
  placeholder?: string;
  defaultValue?: string;
  required?: boolean;
  onChange?: (value: string) => void;
}
export const FormInputComponent = component$((props: FormInputProps) => {
  return (
    <input
      {...props.attributes}
      key={
        Builder.isEditing && props.defaultValue
          ? props.defaultValue
          : \\"default-key\\"
      }
      placeholder={props.placeholder}
      type={props.type}
      name={props.name}
      value={props.value}
      defaultValue={props.defaultValue}
      required={props.required}
      onChange$={$((event) => props.onChange?.(event.target.value))}
    />
  );
});

export default FormInputComponent;
"
`;

exports[`qwik > jsx > Typescript Test > InputParent 1`] = `
"import FormInputComponent from \\"./input.raw\\";

import { $, Fragment, component$, h } from \\"@builder.io/qwik\\";

export const handleChange = function handleChange(props, state, value: string) {
  console.log(value);
};
export const Stepper = component$((props: any) => {
  const state: any = {};

  return (
    <FormInputComponent
      name=\\"kingzez\\"
      type=\\"text\\"
      onChange$={$((event) => handleChange(props, state, value))}
    ></FormInputComponent>
  );
});

export default Stepper;
"
`;

exports[`qwik > jsx > Typescript Test > RawText 1`] = `
"import { Fragment, component$, h } from \\"@builder.io/qwik\\";

export interface RawTextProps {
  attributes?: any;
  text?: string; // builderBlock?: any;
}
export const RawText = component$((props: RawTextProps) => {
  return (
    <span
      class={props.attributes?.class || props.attributes?.className}
      dangerouslySetInnerHTML={props.text || \\"\\"}
    ></span>
  );
});

export default RawText;
"
`;

exports[`qwik > jsx > Typescript Test > Section 1`] = `
"import { Fragment, Slot, component$, h } from \\"@builder.io/qwik\\";

export interface SectionProps {
  maxWidth?: number;
  attributes?: any;
  children?: any;
}
export const SectionComponent = component$((props: SectionProps) => {
  return (
    <section
      {...props.attributes}
      style={(() => {
        props.maxWidth && typeof props.maxWidth === \\"number\\"
          ? {
              maxWidth: props.maxWidth,
            }
          : undefined;
      })()}
    >
      <Slot></Slot>
    </section>
  );
});

export default SectionComponent;
"
`;

exports[`qwik > jsx > Typescript Test > Section 2`] = `
"import { Fragment, Slot, component$, h, useStore } from \\"@builder.io/qwik\\";

export interface SectionProps {
  maxWidth?: number;
  attributes?: any;
  children?: any;
}
export const SectionStateComponent = component$((props: SectionProps) => {
  const state = useStore<any>({ items: [42], max: 42 });

  return (
    <>
      {state.max
        ? (state.items || []).map((item) => {
            return (
              <section
                {...props.attributes}
                style={{
                  maxWidth: item + state.max,
                }}
              >
                <Slot></Slot>
              </section>
            );
          })
        : null}
    </>
  );
});

export default SectionStateComponent;
"
`;

exports[`qwik > jsx > Typescript Test > Select 1`] = `
"import { Fragment, component$, h } from \\"@builder.io/qwik\\";

import { Builder } from \\"@builder.io/sdk\\";

export interface FormSelectProps {
  options?: {
    name?: string;
    value: string;
  }[];
  attributes?: any;
  name?: string;
  value?: string;
  defaultValue?: string;
}
export const SelectComponent = component$((props: FormSelectProps) => {
  return (
    <select
      {...props.attributes}
      value={props.value}
      key={
        Builder.isEditing && props.defaultValue
          ? props.defaultValue
          : \\"default-key\\"
      }
      defaultValue={props.defaultValue}
      name={props.name}
    >
      {(props.options || []).map((option, index) => {
        return (
          <option value={option.value} data-index={index}>
            {option.name || option.value}
          </option>
        );
      })}
    </select>
  );
});

export default SelectComponent;
"
`;

exports[`qwik > jsx > Typescript Test > SlotDefault 1`] = `
"import { Fragment, Slot, component$, h } from \\"@builder.io/qwik\\";

type Props = {
  [key: string]: string;
};
export const SlotCode = component$((props: Props) => {
  return (
    <div>
      <Slot>
        <div class=\\"default-slot\\">Default content</div>
      </Slot>
    </div>
  );
});

export default SlotCode;
"
`;

exports[`qwik > jsx > Typescript Test > SlotHtml 1`] = `
"import ContentSlotCode from \\"./content-slot-jsx.raw\\";

import { Fragment, Slot, component$, h } from \\"@builder.io/qwik\\";

type Props = {
  [key: string]: string;
};
export const SlotCode = component$((props: Props) => {
  return (
    <div>
      <ContentSlotCode>
        <Slot
          testing={(() => {
            <div>Hello</div>;
          })()}
        ></Slot>
      </ContentSlotCode>
    </div>
  );
});

export default SlotCode;
"
`;

exports[`qwik > jsx > Typescript Test > SlotJsx 1`] = `
"import ContentSlotCode from \\"./content-slot-jsx.raw\\";

import { Fragment, component$, h } from \\"@builder.io/qwik\\";

type Props = {
  [key: string]: string;
};
export const SlotCode = component$((props: Props) => {
  return (
    <div>
      <ContentSlotCode
        slotTesting={(() => {
          <div>Hello</div>;
        })()}
      ></ContentSlotCode>
    </div>
  );
});

export default SlotCode;
"
`;

exports[`qwik > jsx > Typescript Test > SlotNamed 1`] = `
"import { Fragment, Slot, component$, h } from \\"@builder.io/qwik\\";

type Props = {
  [key: string]: string;
};
export const SlotCode = component$((props: Props) => {
  return (
    <div>
      <Slot name=\\"myAwesomeSlot\\"></Slot>
      <Slot name=\\"top\\"></Slot>
      <Slot name=\\"left\\">Default left</Slot>
      <Slot>Default Child</Slot>
    </div>
  );
});

export default SlotCode;
"
`;

exports[`qwik > jsx > Typescript Test > Stamped.io 1`] = `
"import {
  $,
  Fragment,
  component$,
  h,
  useStore,
  useStylesScoped$,
  useVisibleTask$,
} from \\"@builder.io/qwik\\";

import { kebabCase, snakeCase } from \\"lodash\\";

type SmileReviewsProps = {
  productId: string;
  apiKey: string;
};
export const kebabCaseValue = function kebabCaseValue(props, state) {
  return kebabCase(\\"testThat\\");
};
export const snakeCaseValue = function snakeCaseValue(props, state) {
  return snakeCase(\\"testThis\\");
};
export const SmileReviews = component$((props: SmileReviewsProps) => {
  useStylesScoped$(STYLES);

  const state = useStore<any>({
    name: \\"test\\",
    reviews: [],
    showReviewPrompt: false,
  });
  useVisibleTask$(() => {
    fetch(
      \`https://stamped.io/api/widget/reviews?storeUrl=builder-io.myshopify.com&apiKey=\${
        props.apiKey || \\"pubkey-8bbDq7W6w4sB3OWeM1HUy2s47702hM\\"
      }&productId=\${props.productId || \\"2410511106127\\"}\`
    )
      .then((res) => res.json())
      .then((data) => {
        state.reviews = data.data;
      });
  });

  return (
    <div data-user={state.name}>
      <button onClick$={$((event) => (state.showReviewPrompt = true))}>
        Write a review
      </button>
      {state.showReviewPrompt || \\"asdf\\" ? (
        <>
          <input placeholder=\\"Email\\" />
          <input placeholder=\\"Title\\" class=\\"input-SmileReviews\\" />
          <textarea
            placeholder=\\"How was your experience?\\"
            class=\\"textarea-SmileReviews\\"
          ></textarea>
          <button
            preventdefault:click
            class=\\"button-SmileReviews\\"
            onClick$={$((event) => {
              state.showReviewPrompt = false;
            })}
          >
            Submit
          </button>
        </>
      ) : null}
      {(state.reviews || []).map((review, index) => {
        return (
          <div class=\\"review-SmileReviews\\" key={review.id}>
            <img class=\\"img-SmileReviews\\" src={review.avatar} />
            <div class={state.showReviewPrompt ? \\"bg-primary\\" : \\"bg-secondary\\"}>
              <div>N: {index}</div>
              <div>{review.author}</div>
              <div>{review.reviewMessage}</div>
            </div>
          </div>
        );
      })}
    </div>
  );
});

export default SmileReviews;

export const STYLES = \`
.input-SmileReviews {
  display: block;
}
.textarea-SmileReviews {
  display: block;
}
.button-SmileReviews {
  display: block;
}
.review-SmileReviews {
  margin: 10px;
  padding: 10px;
  background: white;
  display: flex;
  border-radius: 5px;
  box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
  -webkit-font-smoothing: antialiased;
}
.img-SmileReviews {
  height: 30px;
  width: 30px;
  margin-right: 10px;
}
\`;
"
`;

exports[`qwik > jsx > Typescript Test > Submit 1`] = `
"import { Fragment, component$, h } from \\"@builder.io/qwik\\";

export interface ButtonProps {
  attributes?: any;
  text?: string;
}
export const SubmitButton = component$((props: ButtonProps) => {
  return (
    <button type=\\"submit\\" {...props.attributes}>
      {props.text}
    </button>
  );
});

export default SubmitButton;
"
`;

exports[`qwik > jsx > Typescript Test > Text 1`] = `
"import { Fragment, component$, h, useStore } from \\"@builder.io/qwik\\";

import { Builder } from \\"@builder.io/sdk\\";

export interface TextProps {
  attributes?: any;
  rtlMode: boolean;
  text?: string;
  content?: string;
  builderBlock?: any;
}
export const Text = component$((props: TextProps) => {
  const state = useStore<any>({ name: \\"Decadef20\\" });

  return (
    <div
      contentEditable={allowEditingText || undefined}
      data-name={{
        test: state.name || \\"any name\\",
      }}
      dangerouslySetInnerHTML={
        props.text ||
        props.content ||
        state.name ||
        '<p class=\\"text-lg\\">my name</p>'
      }
    ></div>
  );
});

export default Text;
"
`;

exports[`qwik > jsx > Typescript Test > Textarea 1`] = `
"import { Fragment, component$, h } from \\"@builder.io/qwik\\";

export interface TextareaProps {
  attributes?: any;
  name?: string;
  value?: string;
  defaultValue?: string;
  placeholder?: string;
}
export const Textarea = component$((props: TextareaProps) => {
  return (
    <textarea
      {...props.attributes}
      placeholder={props.placeholder}
      name={props.name}
      value={props.value}
      defaultValue={props.defaultValue}
    ></textarea>
  );
});

export default Textarea;
"
`;

exports[`qwik > jsx > Typescript Test > Video 1`] = `
"import { Fragment, component$, h } from \\"@builder.io/qwik\\";

export interface VideoProps {
  attributes?: any;
  video?: string;
  autoPlay?: boolean;
  controls?: boolean;
  muted?: boolean;
  loop?: boolean;
  playsInline?: boolean;
  aspectRatio?: number;
  width?: number;
  height?: number;
  fit?: \\"contain\\" | \\"cover\\" | \\"fill\\";
  position?:
    | \\"center\\"
    | \\"top\\"
    | \\"left\\"
    | \\"right\\"
    | \\"bottom\\"
    | \\"top left\\"
    | \\"top right\\"
    | \\"bottom left\\"
    | \\"bottom right\\";
  posterImage?: string;
  lazyLoad?: boolean;
}
export const Video = component$((props: VideoProps) => {
  return (
    <video
      preload=\\"none\\"
      {...props.attributes}
      style={{
        width: \\"100%\\",
        height: \\"100%\\",
        ...props.attributes?.style,
        objectFit: props.fit,
        objectPosition: props.position,
        // Hack to get object fit to work as expected and
        // not have the video overflow
        borderRadius: 1,
      }}
      key={props.video || \\"no-src\\"}
      poster={props.posterImage}
      autoplay={props.autoPlay}
      muted={props.muted}
      controls={props.controls}
      loop={props.loop}
    ></video>
  );
});

export default Video;
"
`;

exports[`qwik > jsx > Typescript Test > arrowFunctionInUseStore 1`] = `
"import { Fragment, component$, h, useStore } from \\"@builder.io/qwik\\";

export const setName = function setName(props, state, value) {
  state.name = value;
};
export const updateNameWithArrowFn = function updateNameWithArrowFn(
  props,
  state,
  value
) {
  state.name = value;
};
export const MyComponent = component$((props: any) => {
  const state = useStore<any>({ name: \\"steve\\" });

  return <div>Hello {state.name}</div>;
});

export default MyComponent;
"
`;

exports[`qwik > jsx > Typescript Test > basicForNoTagReference 1`] = `
"import {
  Fragment,
  component$,
  h,
  useComputed$,
  useStore,
} from \\"@builder.io/qwik\\";

export const MyBasicForNoTagRefComponent = component$((props: any) => {
  const TagNameGetter = useComputed$(() => {
    return \\"span\\";
  });
  const state = useStore<any>({
    TagName: \\"div\\",
    name: \\"VincentW\\",
    tag: \\"span\\",
  });

  return (
    <TagNameGetter.value>
      Hello <state.tag>{state.name}</state.tag>
      {(props.actions || []).map((action) => {
        return (
          <state.TagName>
            <action.icon></action.icon>
            <span>{action.text}</span>
          </state.TagName>
        );
      })}
    </TagNameGetter.value>
  );
});

export default MyBasicForNoTagRefComponent;
"
`;

exports[`qwik > jsx > Typescript Test > basicForwardRef 1`] = `
"import {
  $,
  Fragment,
  component$,
  h,
  useStore,
  useStylesScoped$,
} from \\"@builder.io/qwik\\";

export interface Props {
  showInput: boolean;
  inputRef: HTMLInputElement;
}
export const MyBasicForwardRefComponent = component$((props: Props) => {
  useStylesScoped$(STYLES);

  const state = useStore<any>({ name: \\"PatrickJS\\" });

  return (
    <div>
      <input
        class=\\"input-MyBasicForwardRefComponent\\"
        ref={props.inputRef}
        value={state.name}
        onChange$={$((event) => (state.name = event.target.value))}
      />
    </div>
  );
});

export default MyBasicForwardRefComponent;

export const STYLES = \`
.input-MyBasicForwardRefComponent {
  color: red;
}
\`;
"
`;

exports[`qwik > jsx > Typescript Test > basicForwardRefMetadata 1`] = `
"import {
  $,
  Fragment,
  component$,
  h,
  useStore,
  useStylesScoped$,
} from \\"@builder.io/qwik\\";

export interface Props {
  showInput: boolean;
  inputRef: HTMLInputElement;
}
export const MyBasicForwardRefComponent = component$((props: Props) => {
  useStylesScoped$(STYLES);

  const state = useStore<any>({ name: \\"PatrickJS\\" });

  return (
    <div>
      <input
        class=\\"input-MyBasicForwardRefComponent\\"
        ref={props.inputRef}
        value={state.name}
        onChange$={$((event) => (state.name = event.target.value))}
      />
    </div>
  );
});

export default MyBasicForwardRefComponent;

export const STYLES = \`
.input-MyBasicForwardRefComponent {
  color: red;
}
\`;
"
`;

exports[`qwik > jsx > Typescript Test > class + ClassName + css 1`] = `
"import { Fragment, component$, h, useStylesScoped$ } from \\"@builder.io/qwik\\";

export const MyBasicComponent = component$((props: any) => {
  useStylesScoped$(STYLES);

  return (
    <div class=\\"test2 test div-MyBasicComponent\\">
      Hello! I can run in React, Vue, Solid, or Liquid!
    </div>
  );
});

export default MyBasicComponent;

export const STYLES = \`
.div-MyBasicComponent {
  padding: 10px;
}
\`;
"
`;

exports[`qwik > jsx > Typescript Test > class + css 1`] = `
"import { Fragment, component$, h, useStylesScoped$ } from \\"@builder.io/qwik\\";

export const MyBasicComponent = component$((props: any) => {
  useStylesScoped$(STYLES);

  return (
    <div class=\\"test div-MyBasicComponent\\">
      Hello! I can run in React, Vue, Solid, or Liquid!
    </div>
  );
});

export default MyBasicComponent;

export const STYLES = \`
.div-MyBasicComponent {
  padding: 10px;
}
\`;
"
`;

exports[`qwik > jsx > Typescript Test > className + css 1`] = `
"import { Fragment, component$, h, useStylesScoped$ } from \\"@builder.io/qwik\\";

export const MyBasicComponent = component$((props: any) => {
  useStylesScoped$(STYLES);

  return (
    <div class=\\"test div-MyBasicComponent\\">
      Hello! I can run in React, Vue, Solid, or Liquid!
    </div>
  );
});

export default MyBasicComponent;

export const STYLES = \`
.div-MyBasicComponent {
  padding: 10px;
}
\`;
"
`;

exports[`qwik > jsx > Typescript Test > className 1`] = `
"import { JSX } from \\"../../../../jsx-runtime\\";

import { Fragment, component$, h, useStore } from \\"@builder.io/qwik\\";

type Props = {
  [key: string]: string | JSX.Element;
  slotTesting: JSX.Element;
};
export const ClassNameCode = component$((props: Props) => {
  const state = useStore<any>({ bindings: \\"a binding\\" });

  return (
    <div>
      <div class=\\"no binding\\">Without Binding</div>
      <div class={state.bindings}>With binding</div>
    </div>
  );
});

export default ClassNameCode;
"
`;

exports[`qwik > jsx > Typescript Test > classState 1`] = `
"import {
  Fragment,
  component$,
  h,
  useStore,
  useStylesScoped$,
} from \\"@builder.io/qwik\\";

export const MyBasicComponent = component$((props: any) => {
  useStylesScoped$(STYLES);

  const state = useStore<any>({
    classState: \\"testClassName\\",
    styleState: {
      color: \\"red\\",
    },
  });

  return (
    <div
      class={state.classState + \\" div-MyBasicComponent\\"}
      style={state.styleState}
    >
      Hello! I can run in React, Vue, Solid, or Liquid!
    </div>
  );
});

export default MyBasicComponent;

export const STYLES = \`
.div-MyBasicComponent {
  padding: 10px;
}
\`;
"
`;

exports[`qwik > jsx > Typescript Test > contentState 1`] = `
"import {
  Fragment,
  component$,
  h,
  useContextProvider,
  useStore,
} from \\"@builder.io/qwik\\";

import BuilderContext from \\"@dummy/context.js\\";

export const RenderContent = component$((props: any) => {
  useContextProvider(
    BuilderContext,
    useStore({
      content: props.content,
      registeredComponents: props.customComponents,
    })
  );

  return <div>setting context</div>;
});

export default RenderContent;
"
`;

exports[`qwik > jsx > Typescript Test > defaultProps 1`] = `
"import { $, Fragment, component$, h } from \\"@builder.io/qwik\\";

export interface ButtonProps {
  attributes?: any;
  text?: string;
  buttonText?: string; // no default value

  link?: string;
  openLinkInNewTab?: boolean;
  onClick?: () => void;
}
export const Button = component$((props: ButtonProps) => {
  return (
    <div>
      {props.link ? (
        <a
          {...props.attributes}
          href={props.link}
          target={props.openLinkInNewTab ? \\"_blank\\" : undefined}
        >
          {props.text}
        </a>
      ) : null}
      {!props.link ? (
        <button
          type=\\"button\\"
          {...props.attributes}
          onClick$={$((event) => props.onClick(event))}
        >
          {props.buttonText}
        </button>
      ) : null}
    </div>
  );
});

export default Button;
"
`;

exports[`qwik > jsx > Typescript Test > defaultPropsOutsideComponent 1`] = `
"import { $, Fragment, component$, h } from \\"@builder.io/qwik\\";

export interface ButtonProps {
  attributes?: any;
  text?: string;
  link?: string;
  openLinkInNewTab?: boolean;
  onClick: () => void;
}
export const Button = component$((props: ButtonProps) => {
  return (
    <div>
      {props.link ? (
        <a
          {...props.attributes}
          href={props.link}
          target={props.openLinkInNewTab ? \\"_blank\\" : undefined}
        >
          {props.text}
        </a>
      ) : null}
      {!props.link ? (
        <button
          type=\\"button\\"
          {...props.attributes}
          onClick$={$((event) => props.onClick(event))}
        >
          {props.text}
        </button>
      ) : null}
    </div>
  );
});

export default Button;
"
`;

exports[`qwik > jsx > Typescript Test > defaultValsWithTypes 1`] = `
"import { Fragment, component$, h } from \\"@builder.io/qwik\\";

type Props = {
  name: string;
};
export const DEFAULT_VALUES: Props = {
  name: \\"Sami\\",
};
export const ComponentWithTypes = component$((props: Props) => {
  return <div> Hello {props.name || DEFAULT_VALUES.name}</div>;
});

export default ComponentWithTypes;
"
`;

exports[`qwik > jsx > Typescript Test > expressionState 1`] = `
"import { Fragment, component$, h, useStore } from \\"@builder.io/qwik\\";

export const MyComponent = component$((props: any) => {
  const state = useStore<any>({
    refToUse: !(props.componentRef instanceof Function)
      ? props.componentRef
      : null,
  });

  return <div>{state.refToUse}</div>;
});

export default MyComponent;
"
`;

exports[`qwik > jsx > Typescript Test > getterState 1`] = `
"import { Fragment, component$, h, useComputed$ } from \\"@builder.io/qwik\\";

export interface ButtonProps {
  foo: string;
}
export const baz = function baz(props, state, foo2, bar, i: number) {
  return i + foo2.value.length;
};
export const Button = component$((props: ButtonProps) => {
  const foo2 = useComputed$(() => {
    return props.foo + \\"foo\\";
  });
  const bar = useComputed$(() => {
    return \\"bar\\";
  });
  const state: any = {};

  return (
    <div>
      <p>{foo2.value}</p>
      <p>{bar.value}</p>
      <p>{baz(props, state, foo2, bar, 1)}</p>
    </div>
  );
});

export default Button;
"
`;

exports[`qwik > jsx > Typescript Test > import types 1`] = `
"import {
  RenderBlockProps,
  default as RenderBlock,
} from \\"./builder-render-block.raw\\";

import { Fragment, component$, h } from \\"@builder.io/qwik\\";

import { BuilderContent, GetContentOptions } from \\"@builder.io/sdk\\";

type RenderContentProps = {
  options?: GetContentOptions;
  content: BuilderContent;
  renderContentProps: RenderBlockProps;
};
export const getRenderContentProps = function getRenderContentProps(
  props,
  state,
  block,
  index
) {
  return {
    block: block,
    index: index,
  };
};
export const RenderContent = component$((props: RenderContentProps) => {
  const state: any = {};

  return (
    <RenderBlock
      {...getRenderContentProps(
        props,
        state,
        props.renderContentProps.block,
        0
      )}
    ></RenderBlock>
  );
});

export default RenderContent;
"
`;

exports[`qwik > jsx > Typescript Test > multipleOnUpdate 1`] = `
"import { Fragment, component$, h, useTask$ } from \\"@builder.io/qwik\\";

export const MultipleOnUpdate = component$((props: any) => {
  useTask$(({ track }) => {
    console.log(\\"Runs on every update/rerender\\");
  });
  useTask$(({ track }) => {
    console.log(\\"Runs on every update/rerender as well\\");
  });

  return <div></div>;
});

export default MultipleOnUpdate;
"
`;

exports[`qwik > jsx > Typescript Test > multipleOnUpdateWithDeps 1`] = `
"import { Fragment, component$, h, useStore, useTask$ } from \\"@builder.io/qwik\\";

export const MultipleOnUpdateWithDeps = component$((props: any) => {
  const state = useStore<any>({ a: \\"a\\", b: \\"b\\", c: \\"c\\", d: \\"d\\" });
  useTask$(({ track }) => {
    track(() => state.a);
    track(() => state.b);
    console.log(\\"Runs when a or b changes\\", state.a, state.b);

    if (state.a === \\"a\\") {
      state.a = \\"b\\";
    }
  });
  useTask$(({ track }) => {
    track(() => state.c);
    track(() => state.d);
    console.log(\\"Runs when c or d changes\\", state.c, state.d);

    if (state.a === \\"a\\") {
      state.a = \\"b\\";
    }
  });

  return <div></div>;
});

export default MultipleOnUpdateWithDeps;
"
`;

exports[`qwik > jsx > Typescript Test > multipleSpreads 1`] = `
"import { Fragment, component$, h, useStore } from \\"@builder.io/qwik\\";

export const MyBasicComponent = component$((props: any) => {
  const state = useStore<any>({
    attrs: {
      hello: \\"world\\",
    },
  });

  return <input {...state.attrs} {...props} />;
});

export default MyBasicComponent;
"
`;

exports[`qwik > jsx > Typescript Test > nestedShow 1`] = `
"import { Fragment, component$, h } from \\"@builder.io/qwik\\";

interface Props {
  conditionA: boolean;
  conditionB: boolean;
}
export const NestedShow = component$((props: Props) => {
  return (
    <>
      {props.conditionA ? (
        !props.conditionB ? (
          <div>if condition A and condition B</div>
        ) : (
          <div>else-condition-B</div>
        )
      ) : (
        <div>else-condition-A</div>
      )}
    </>
  );
});

export default NestedShow;
"
`;

exports[`qwik > jsx > Typescript Test > nestedStyles 1`] = `
"import { Fragment, component$, h, useStylesScoped$ } from \\"@builder.io/qwik\\";

export const NestedStyles = component$((props: any) => {
  useStylesScoped$(STYLES);

  return <div class=\\"div-NestedStyles\\">Hello world</div>;
});

export default NestedStyles;

export const STYLES = \`
.div-NestedStyles {
  display: flex;
  --bar: red;
  color: var(--bar);
}
@media (max-width: env(--mobile)) {
  .div-NestedStyles {
    display: block;
  }
}
.div-NestedStyles:hover {
  display: flex;
}
.div-NestedStyles:active {
  display: inline;
}
.div-NestedStyles .nested-selector {
  display: grid;
}
.div-NestedStyles .nested-selector:hover {
  display: block;
}
.div-NestedStyles.nested-selector:active {
  display: inline-block;
}
\`;
"
`;

exports[`qwik > jsx > Typescript Test > onEvent 1`] = `
"import {
  $,
  Fragment,
  component$,
  h,
  useOn,
  useSignal,
  useVisibleTask$,
} from \\"@builder.io/qwik\\";

export const foo = function foo(props, state, elem, event) {
  console.log(\\"test2\\");
};
export const Embed = component$((props: any) => {
  const elem = useSignal<Element>();
  const state: any = {};
  useOn(
    \\"initEditingBldr\\",
    $((event, element) => {
      console.log(\\"test\\");
      foo(props, state, elem, event);
    }) as Parameters<typeof useOn>[1]
  );
  useVisibleTask$(() => {
    elem.value.dispatchEvent(new CustomEvent(\\"initEditingBldr\\"));
  });

  return (
    <div class=\\"builder-embed\\" ref={elem}>
      <div>Test</div>
    </div>
  );
});

export default Embed;
"
`;

exports[`qwik > jsx > Typescript Test > onInit & onMount 1`] = `
"import {
  Fragment,
  component$,
  h,
  useTask$,
  useVisibleTask$,
} from \\"@builder.io/qwik\\";

export const OnInit = component$((props: any) => {
  useVisibleTask$(() => {
    console.log(\\"onMount\\");
  });
  useTask$(() => {
    console.log(\\"onInit\\");
  });

  return <div></div>;
});

export default OnInit;
"
`;

exports[`qwik > jsx > Typescript Test > onInit 1`] = `
"import { Fragment, component$, h, useStore, useTask$ } from \\"@builder.io/qwik\\";

type Props = {
  name: string;
};
export const defaultValues = {
  name: \\"PatrickJS\\",
};
export const OnInit = component$((props: Props) => {
  const state = useStore<any>({ name: \\"\\" });
  useTask$(() => {
    state.name = defaultValues.name || props.name;
    console.log(\\"set defaults with props\\");
  });

  return <div>Default name defined by parent {state.name}</div>;
});

export default OnInit;
"
`;

exports[`qwik > jsx > Typescript Test > onMount 1`] = `
"import { Fragment, component$, h, useVisibleTask$ } from \\"@builder.io/qwik\\";

export const Comp = component$((props: any) => {
  useVisibleTask$(() => {
    console.log(\\"Runs on mount\\");
  });

  return <div></div>;
});

export default Comp;
"
`;

exports[`qwik > jsx > Typescript Test > onMountMultiple 1`] = `
"import {
  Fragment,
  component$,
  h,
  useTask$,
  useVisibleTask$,
} from \\"@builder.io/qwik\\";

export const Comp = component$((props: any) => {
  useVisibleTask$(() => {
    console.log(\\"Runs on mount\\");
  });
  useVisibleTask$(() => {
    console.log(\\"Another one runs on Mount\\");
  });
  useTask$(() => {
    console.log(\\"SSR runs on Mount\\");
  });

  return <div></div>;
});

export default Comp;
"
`;

exports[`qwik > jsx > Typescript Test > onUpdate 1`] = `
"import { Fragment, component$, h, useTask$ } from \\"@builder.io/qwik\\";

export const OnUpdate = component$((props: any) => {
  useTask$(({ track }) => {
    console.log(\\"Runs on every update/rerender\\");
  });

  return <div></div>;
});

export default OnUpdate;
"
`;

exports[`qwik > jsx > Typescript Test > onUpdateWithDeps 1`] = `
"import { Fragment, component$, h, useStore, useTask$ } from \\"@builder.io/qwik\\";

type Props = {
  size: string;
};
export const OnUpdateWithDeps = component$((props: Props) => {
  const state = useStore<any>({ a: \\"a\\", b: \\"b\\" });
  useTask$(({ track }) => {
    track(() => state.a);
    track(() => state.b);
    track(() => props.size);
    console.log(\\"Runs when a, b or size changes\\", state.a, state.b, props.size);
  });

  return <div></div>;
});

export default OnUpdateWithDeps;
"
`;

exports[`qwik > jsx > Typescript Test > preserveExportOrLocalStatement 1`] = `
"import { Fragment, component$, h } from \\"@builder.io/qwik\\";

type Types = {
  s: any[];
};
interface IPost {
  len: number;
}
export interface MyBasicComponentProps {
  id: string;
}
export const b = 3;
export const foo = () => {};
export const a = 3;
export const bar = () => {};
export function run<T>(value: T) {}
export const MyBasicComponent = component$((props: MyBasicComponentProps) => {
  return <div></div>;
});

export default MyBasicComponent;
"
`;

exports[`qwik > jsx > Typescript Test > preserveTyping 1`] = `
"import { Fragment, component$, h } from \\"@builder.io/qwik\\";

export type A = \\"test\\";
export interface C {
  n: \\"test\\";
}
type B = \\"test2\\";
interface D {
  n: \\"test\\";
}
export interface MyBasicComponentProps {
  name: string;
  age?: number;
}
export const MyBasicComponent = component$((props: MyBasicComponentProps) => {
  return (
    <div>Hello! I can run in React, Vue, Solid, or Liquid! {props.name}</div>
  );
});

export default MyBasicComponent;
"
`;

exports[`qwik > jsx > Typescript Test > propsDestructure 1`] = `
"import { Fragment, Slot, component$, h, useStore } from \\"@builder.io/qwik\\";

type Props = {
  children: any;
  type: string;
};
export const MyBasicComponent = component$((props: Props) => {
  const state = useStore<any>({ name: \\"Decadef20\\" });

  return (
    <div>
      <Slot></Slot>
      {props.type}
      Hello! I can run in React, Vue, Solid, or Liquid!
    </div>
  );
});

export default MyBasicComponent;
"
`;

exports[`qwik > jsx > Typescript Test > propsInterface 1`] = `
"import { Fragment, component$, h } from \\"@builder.io/qwik\\";

interface Person {
  name: string;
  age?: number;
}
export const MyBasicComponent = component$((props: Person | never) => {
  return (
    <div>Hello! I can run in React, Vue, Solid, or Liquid! {props.name}</div>
  );
});

export default MyBasicComponent;
"
`;

exports[`qwik > jsx > Typescript Test > propsType 1`] = `
"import { Fragment, component$, h } from \\"@builder.io/qwik\\";

type Person = {
  name: string;
  age?: number;
};
export const MyBasicComponent = component$((props: Person) => {
  return (
    <div>Hello! I can run in React, Vue, Solid, or Liquid! {props.name}</div>
  );
});

export default MyBasicComponent;
"
`;

exports[`qwik > jsx > Typescript Test > referencingFunInsideHook 1`] = `
"import { Fragment, component$, h, useTask$ } from \\"@builder.io/qwik\\";

export const foo = function foo(props, state, params) {};
export const bar = function bar(props, state) {};
export const zoo = function zoo(props, state) {
  const params = {
    cb: state.bar,
  };
};
export const OnUpdate = component$((props: any) => {
  const state: any = {};
  useTask$(({ track }) => {
    state.foo({
      someOption: state.bar,
    });
  });

  return <div></div>;
});

export default OnUpdate;
"
`;

exports[`qwik > jsx > Typescript Test > renderBlock 1`] = `
"import { TARGET } from \\"../../constants/target.js\\";

import {
  BuilderContextInterface,
  RegisteredComponent,
} from \\"../../context/types.js\\";

import { evaluate } from \\"../../functions/evaluate.js\\";

import { extractTextStyles } from \\"../../functions/extract-text-styles.js\\";

import { getBlockActions } from \\"../../functions/get-block-actions.js\\";

import { getBlockComponentOptions } from \\"../../functions/get-block-component-options.js\\";

import { getBlockProperties } from \\"../../functions/get-block-properties.js\\";

import { getBlockTag } from \\"../../functions/get-block-tag.js\\";

import { getProcessedBlock } from \\"../../functions/get-processed-block.js\\";

import { getReactNativeBlockStyles } from \\"../../functions/get-react-native-block-styles.js\\";

import { BuilderBlock } from \\"../../types/builder-block.js\\";

import { Nullable } from \\"../../types/typescript.js\\";

import BlockStyles from \\"./block-styles.jsx\\";

import { isEmptyHtmlElement } from \\"./render-block.helpers.js\\";

import RenderComponentWithContext from \\"./render-component-with-context.js\\";

import {
  RenderComponentProps,
  default as RenderComponent,
} from \\"./render-component.jsx\\";

import RenderRepeatedBlock from \\"./render-repeated-block.jsx\\";

import { RepeatData } from \\"./types.js\\";

import { Fragment, component$, h, useComputed$ } from \\"@builder.io/qwik\\";

export type RenderBlockProps = {
  block: BuilderBlock;
  context: BuilderContextInterface;
};
export const RenderBlock = component$((props: RenderBlockProps) => {
  const component = useComputed$(() => {
    const componentName = getProcessedBlock({
      block: props.block,
      state: props.context.state,
      context: props.context.context,
      shouldEvaluateBindings: false,
    }).component?.name;

    if (!componentName) {
      return null;
    }

    const ref = props.context.registeredComponents[componentName];

    if (!ref) {
      // TODO: Public doc page with more info about this message
      console.warn(\`
          Could not find a registered component named \\"\${componentName}\\". 
          If you registered it, is the file that registered it imported by the file that needs to render it?\`);
      return undefined;
    } else {
      return ref;
    }
  });
  const tag = useComputed$(() => {
    return getBlockTag(useBlock.value);
  });
  const useBlock = useComputed$(() => {
    return repeatItemData.value
      ? props.block
      : getProcessedBlock({
          block: props.block,
          state: props.context.state,
          context: props.context.context,
          shouldEvaluateBindings: true,
        });
  });
  const actions = useComputed$(() => {
    return getBlockActions({
      block: useBlock.value,
      state: props.context.state,
      context: props.context.context,
    });
  });
  const attributes = useComputed$(() => {
    const blockProperties = getBlockProperties(useBlock.value);
    return {
      ...blockProperties,
      ...(TARGET === \\"reactNative\\"
        ? {
            style: getReactNativeBlockStyles({
              block: useBlock.value,
              context: props.context,
              blockStyles: blockProperties.style,
            }),
          }
        : {}),
    };
  });
  const shouldWrap = useComputed$(() => {
    return !component.value?.noWrap;
  });
  const renderComponentProps = useComputed$(() => {
    return {
      blockChildren: useChildren.value,
      componentRef: component.value?.component,
      componentOptions: {
        ...getBlockComponentOptions(useBlock.value),

        /**
         * These attributes are passed to the wrapper element when there is one. If \`noWrap\` is set to true, then
         * they are provided to the component itself directly.
         */
        ...(shouldWrap.value
          ? {}
          : {
              attributes: { ...attributes.value, ...actions.value },
            }),
        customBreakpoints: childrenContext.value?.content?.meta?.breakpoints,
      },
      context: childrenContext.value,
    };
  });
  const useChildren = useComputed$(() => {
    // TO-DO: When should \`canHaveChildren\` dictate rendering?
    // This is currently commented out because some Builder components (e.g. Box) do not have \`canHaveChildren: true\`,
    // but still receive and need to render children.
    // return state.componentInfo?.canHaveChildren ? state.useBlock.children : [];
    return useBlock.value.children ?? [];
  });
  const childrenWithoutParentComponent = useComputed$(() => {
    /**
     * When there is no \`componentRef\`, there might still be children that need to be rendered. In this case,
     * we render them outside of \`componentRef\`.
     * NOTE: We make sure not to render this if \`repeatItemData\` is non-null, because that means we are rendering an array of
     * blocks, and the children will be repeated within those blocks.
     */
    const shouldRenderChildrenOutsideRef =
      !component.value?.component && !repeatItemData.value;
    return shouldRenderChildrenOutsideRef ? useChildren.value : [];
  });
  const repeatItemData = useComputed$(() => {
    /**
     * we don't use \`state.useBlock\` here because the processing done within its logic includes evaluating the block's bindings,
     * which will not work if there is a repeat.
     */
    const { repeat, ...blockWithoutRepeat } = props.block;

    if (!repeat?.collection) {
      return undefined;
    }

    const itemsArray = evaluate({
      code: repeat.collection,
      state: props.context.state,
      context: props.context.context,
    });

    if (!Array.isArray(itemsArray)) {
      return undefined;
    }

    const collectionName = repeat.collection.split(\\".\\").pop();
    const itemNameToUse =
      repeat.itemName || (collectionName ? collectionName + \\"Item\\" : \\"item\\");
    const repeatArray = itemsArray.map<RepeatData>((item, index) => ({
      context: {
        ...props.context,
        state: {
          ...props.context.state,
          $index: index,
          $item: item,
          [itemNameToUse]: item,
          [\`$\${itemNameToUse}Index\`]: index,
        },
      },
      block: blockWithoutRepeat,
    }));
    return repeatArray;
  });
  const inheritedTextStyles = useComputed$(() => {
    if (TARGET !== \\"reactNative\\") {
      return {};
    }

    const styles = getReactNativeBlockStyles({
      block: useBlock.value,
      context: props.context,
      blockStyles: attributes.value.style,
    });
    return extractTextStyles(styles);
  });
  const childrenContext = useComputed$(() => {
    return {
      apiKey: props.context.apiKey,
      state: props.context.state,
      content: props.context.content,
      context: props.context.context,
      registeredComponents: props.context.registeredComponents,
      inheritedStyles: inheritedTextStyles.value,
    };
  });
  const renderComponentTag = useComputed$(() => {
    if (TARGET === \\"reactNative\\") {
      return RenderComponentWithContext;
    } else if (TARGET === \\"vue3\\") {
      // vue3 expects a string for the component tag
      return \\"RenderComponent\\";
    } else {
      return RenderComponent;
    }
  });
  const state: any = {};

  return (
    <>
      {shouldWrap.value ? (
        <>
          {isEmptyHtmlElement(tag.value) ? (
            <tag.value {...attributes.value} {...actions.value}></tag.value>
          ) : null}
          {!isEmptyHtmlElement(tag.value) && repeatItemData.value
            ? (repeatItemData.value || []).map((data, index) => {
                return (
                  <RenderRepeatedBlock
                    key={index}
                    repeatContext={data.context}
                    block={data.block}
                  ></RenderRepeatedBlock>
                );
              })
            : null}
          {!isEmptyHtmlElement(tag.value) && !repeatItemData.value ? (
            <tag.value {...attributes.value} {...actions.value}>
              <renderComponentTag.value
                {...renderComponentProps.value}
              ></renderComponentTag.value>
              {(childrenWithoutParentComponent.value || []).map((child) => {
                return (
                  <RenderBlock
                    key={\\"render-block-\\" + child.id}
                    block={child}
                    context={childrenContext.value}
                  ></RenderBlock>
                );
              })}
              {(childrenWithoutParentComponent.value || []).map((child) => {
                return (
                  <BlockStyles
                    key={\\"block-style-\\" + child.id}
                    block={child}
                    context={childrenContext.value}
                  ></BlockStyles>
                );
              })}
            </tag.value>
          ) : null}
        </>
      ) : (
        <renderComponentTag.value
          {...renderComponentProps.value}
        ></renderComponentTag.value>
      )}
    </>
  );
});

export default RenderBlock;
"
`;

exports[`qwik > jsx > Typescript Test > renderContentExample 1`] = `
"import {
  $,
  Fragment,
  component$,
  h,
  useContextProvider,
  useStore,
  useStylesScoped$,
  useTask$,
  useVisibleTask$,
} from \\"@builder.io/qwik\\";

import RenderBlocks from \\"@dummy/RenderBlocks.jsx\\";

import BuilderContext from \\"@dummy/context.js\\";

import {
  dispatchNewContentToVisualEditor,
  sendComponentsToVisualEditor,
  trackClick,
} from \\"@dummy/injection-js\\";

type Props = {
  customComponents: string[];
  content: {
    blocks: any[];
    id: string;
  };
};
export const RenderContent = component$((props: Props) => {
  useStylesScoped$(STYLES);

  useContextProvider(
    BuilderContext,
    useStore({
      content: (() => {
        return 3;
      })(),
      registeredComponents: (() => {
        return 4;
      })(),
    })
  );
  useVisibleTask$(() => {
    sendComponentsToVisualEditor(props.customComponents);
  });
  useTask$(({ track }) => {
    track(() => props.content);
    dispatchNewContentToVisualEditor(props.content);
  });

  return (
    <div
      class=\\"div-RenderContent\\"
      onClick$={$((event) => trackClick(props.content.id))}
    >
      <RenderBlocks blocks={props.content.blocks}></RenderBlocks>
    </div>
  );
});

export default RenderContent;

export const STYLES = \`
.div-RenderContent {
  display: flex;
  flex-direction: columns;
}
\`;
"
`;

exports[`qwik > jsx > Typescript Test > rootFragmentMultiNode 1`] = `
"import { Fragment, component$, h } from \\"@builder.io/qwik\\";

export interface ButtonProps {
  attributes?: any;
  text?: string;
  link?: string;
  openLinkInNewTab?: boolean;
}
export const Button = component$((props: ButtonProps) => {
  return (
    <Fragment>
      {props.link ? (
        <a
          {...props.attributes}
          href={props.link}
          target={props.openLinkInNewTab ? \\"_blank\\" : undefined}
        >
          {props.text}
        </a>
      ) : null}
      {!props.link ? (
        <button type=\\"button\\" {...props.attributes}>
          {props.text}
        </button>
      ) : null}
    </Fragment>
  );
});

export default Button;
"
`;

exports[`qwik > jsx > Typescript Test > rootShow 1`] = `
"import { Fragment, component$, h } from \\"@builder.io/qwik\\";

export interface RenderStylesProps {
  foo: string;
}
export const RenderStyles = component$((props: RenderStylesProps) => {
  return <>{props.foo === \\"bar\\" ? <div>Bar</div> : <div>Foo</div>}</>;
});

export default RenderStyles;
"
`;

exports[`qwik > jsx > Typescript Test > self-referencing component 1`] = `
"import { Fragment, component$, h } from \\"@builder.io/qwik\\";

export const MyComponent = component$((props: any) => {
  return (
    <div>
      {props.name}
      {props.name === \\"Batman\\" ? (
        <MyComponent name=\\"Bruce Wayne\\"></MyComponent>
      ) : null}
    </div>
  );
});

export default MyComponent;
"
`;

exports[`qwik > jsx > Typescript Test > self-referencing component with children 1`] = `
"import { Fragment, Slot, component$, h } from \\"@builder.io/qwik\\";

export const MyComponent = component$((props: any) => {
  return (
    <div>
      {props.name}
      <Slot></Slot>
      {props.name === \\"Batman\\" ? (
        <MyComponent name=\\"Bruce\\">
          <div>Wayne</div>
        </MyComponent>
      ) : null}
    </div>
  );
});

export default MyComponent;
"
`;

exports[`qwik > jsx > Typescript Test > showExpressions 1`] = `
"SyntaxError: Expression expected. (9:115)
   7 | export const ShowWithOtherValues=component$((props:Props)=>{
   8 |
>  9 | return (<div>{props.conditionA?<>Content0</>:<>ContentA</>}{props.conditionA?<>ContentA</>:null}{props.conditionA?:<>ContentA</>}{props.conditionA?<>ContentB</>:<>{undefined}</>}{props.conditionA?<>{undefined}</>:<>ContentB</>}{props.conditionA?<>ContentC</>:null}{props.conditionA?:<>ContentC</>}{props.conditionA?<>ContentD</>:null}{props.conditionA?:<>ContentD</>}{props.conditionA?<>ContentE</>:<>hello</>}{props.conditionA?<>hello</>:<>ContentE</>}{props.conditionA?<>ContentF</>:<>123</>}{props.conditionA?<>123</>:<>ContentF</>}{props.conditionA === 'Default'?<>4mb</>:props.conditionB === 'Complete'?<>20mb</>:<>9mb</>}{props.conditionA === 'Default'?props.conditionB === 'Complete'?<>20mb</>:<>9mb</>:<>4mb</>}</div>)});
     |                                                                                                                   ^
  10 |
  11 | export default ShowWithOtherValues;
========================================================================
import{Fragment,component$,h}from\\"@builder.io/qwik\\";

interface Props {
  conditionA: boolean;
  conditionB: boolean;
}
export const ShowWithOtherValues=component$((props:Props)=>{

return (<div>{props.conditionA?<>Content0</>:<>ContentA</>}{props.conditionA?<>ContentA</>:null}{props.conditionA?:<>ContentA</>}{props.conditionA?<>ContentB</>:<>{undefined}</>}{props.conditionA?<>{undefined}</>:<>ContentB</>}{props.conditionA?<>ContentC</>:null}{props.conditionA?:<>ContentC</>}{props.conditionA?<>ContentD</>:null}{props.conditionA?:<>ContentD</>}{props.conditionA?<>ContentE</>:<>hello</>}{props.conditionA?<>hello</>:<>ContentE</>}{props.conditionA?<>ContentF</>:<>123</>}{props.conditionA?<>123</>:<>ContentF</>}{props.conditionA === 'Default'?<>4mb</>:props.conditionB === 'Complete'?<>20mb</>:<>9mb</>}{props.conditionA === 'Default'?props.conditionB === 'Complete'?<>20mb</>:<>9mb</>:<>4mb</>}</div>)});

export default ShowWithOtherValues;

========================================================================"
`;

exports[`qwik > jsx > Typescript Test > showWithFor 1`] = `
"import { Fragment, component$, h } from \\"@builder.io/qwik\\";

interface Props {
  conditionA: boolean;
  items: string[];
}
export const NestedShow = component$((props: Props) => {
  return (
    <>
      {props.conditionA ? (
        (props.items || []).map((item, idx) => {
          return <div key={idx}>{item}</div>;
        })
      ) : (
        <div>else-condition-A</div>
      )}
    </>
  );
});

export default NestedShow;
"
`;

exports[`qwik > jsx > Typescript Test > showWithOtherValues 1`] = `
"import { Fragment, component$, h } from \\"@builder.io/qwik\\";

interface Props {
  conditionA: boolean;
}
export const ShowWithOtherValues = component$((props: Props) => {
  return (
    <div>
      {props.conditionA ? <>ContentA</> : null}
      {props.conditionA ? <>ContentB</> : <>{undefined}</>}
      {props.conditionA ? <>ContentC</> : null}
      {props.conditionA ? <>ContentD</> : null}
      {props.conditionA ? <>ContentE</> : <>hello</>}
      {props.conditionA ? <>ContentF</> : <>123</>}
    </div>
  );
});

export default ShowWithOtherValues;
"
`;

exports[`qwik > jsx > Typescript Test > showWithRootText 1`] = `
"import { Fragment, component$, h } from \\"@builder.io/qwik\\";

interface Props {
  conditionA: boolean;
}
export const ShowRootText = component$((props: Props) => {
  return <>{props.conditionA ? <>ContentA</> : <div>else-condition-A</div>}</>;
});

export default ShowRootText;
"
`;

exports[`qwik > jsx > Typescript Test > signalsOnUpdate 1`] = `
"import {
  Fragment,
  component$,
  h,
  useStylesScoped$,
  useTask$,
} from \\"@builder.io/qwik\\";

type Props = {
  id: string;
  foo: {
    bar: {
      baz: number;
    };
  };
};
export const MyBasicComponent = component$((props: Props) => {
  useStylesScoped$(STYLES);

  useTask$(({ track }) => {
    track(() => props.id);
    track(() => props.foo.bar.baz);
    console.log(\\"props.id changed\\", props.id);
    console.log(\\"props.foo.value.bar.baz changed\\", props.foo.bar.baz);
  });

  return (
    <div class=\\"test div-MyBasicComponent\\">
      {props.id}
      {props.foo.bar.baz}
    </div>
  );
});

export default MyBasicComponent;

export const STYLES = \`
.div-MyBasicComponent {
  padding: 10px;
}
\`;
"
`;

exports[`qwik > jsx > Typescript Test > spreadAttrs 1`] = `
"import { Fragment, component$, h } from \\"@builder.io/qwik\\";

export const MyBasicComponent = component$((props: any) => {
  return <input {...attrs} />;
});

export default MyBasicComponent;
"
`;

exports[`qwik > jsx > Typescript Test > spreadNestedProps 1`] = `
"import { Fragment, component$, h } from \\"@builder.io/qwik\\";

export const MyBasicComponent = component$((props: any) => {
  return <input {...props.nested} />;
});

export default MyBasicComponent;
"
`;

exports[`qwik > jsx > Typescript Test > spreadProps 1`] = `
"import { Fragment, component$, h } from \\"@builder.io/qwik\\";

export const MyBasicComponent = component$((props: any) => {
  return <input {...props} />;
});

export default MyBasicComponent;
"
`;

exports[`qwik > jsx > Typescript Test > string-literal-store 1`] = `
"import { Fragment, component$, h, useStore } from \\"@builder.io/qwik\\";

export const StringLiteralStore = component$((props: any) => {
  const state = useStore<any>({ foo: 123 });

  return <div>{state.foo}</div>;
});

export default StringLiteralStore;
"
`;

exports[`qwik > jsx > Typescript Test > styleClassAndCss 1`] = `
"import { Fragment, component$, h, useStylesScoped$ } from \\"@builder.io/qwik\\";

export const MyComponent = component$((props: any) => {
  useStylesScoped$(STYLES);

  return (
    <div
      class=\\"builder-column div-MyComponent\\"
      style={{
        width: \\"100%\\",
      }}
    ></div>
  );
});

export default MyComponent;

export const STYLES = \`
.div-MyComponent {
  display: flex;
  flex-direction: column;
  align-items: stretch;
}
\`;
"
`;

exports[`qwik > jsx > Typescript Test > stylePropClassAndCss 1`] = `
"import { Fragment, component$, h, useStylesScoped$ } from \\"@builder.io/qwik\\";

export const StylePropClassAndCss = component$((props: any) => {
  useStylesScoped$(STYLES);

  return (
    <div
      style={props.attributes.style}
      class={props.attributes.class + \\" div-StylePropClassAndCss\\"}
    ></div>
  );
});

export default StylePropClassAndCss;

export const STYLES = \`
.div-StylePropClassAndCss {
  display: flex;
  flex-direction: column;
  align-items: stretch;
}
\`;
"
`;

exports[`qwik > jsx > Typescript Test > subComponent 1`] = `
"import Foo from \\"./foo-sub-component.jsx\\";

import { Fragment, component$, h } from \\"@builder.io/qwik\\";

export const SubComponent = component$((props: any) => {
  return <Foo></Foo>;
});

export default SubComponent;
"
`;

exports[`qwik > jsx > Typescript Test > svgComponent 1`] = `
"import { Fragment, component$, h } from \\"@builder.io/qwik\\";

export const SvgComponent = component$((props: any) => {
  return (
    <svg
      fill=\\"none\\"
      role=\\"img\\"
      viewBox={\\"0 0 \\" + 42 + \\" \\" + 42}
      width={42}
      height={42}
    >
      <defs>
        <filter id=\\"prefix__filter0_f\\" filterUnits=\\"userSpaceOnUse\\">
          <feFlood result=\\"BackgroundImageFix\\"></feFlood>
          <feBlend
            in=\\"SourceGraphic\\"
            in2=\\"BackgroundImageFix\\"
            result=\\"shape\\"
          ></feBlend>
          <feGaussianBlur
            result=\\"effect1_foregroundBlur\\"
            stdDeviation={7}
          ></feGaussianBlur>
        </filter>
      </defs>
    </svg>
  );
});

export default SvgComponent;
"
`;

exports[`qwik > jsx > Typescript Test > typeDependency 1`] = `
"import { Foo } from \\"./foo-type\\";

import { Foo as Foo2 } from \\"./type-export.jsx\\";

import { Fragment, component$, h } from \\"@builder.io/qwik\\";

export type TypeDependencyProps = {
  foo: Foo;
  foo2: Foo2;
};
export const TypeDependency = component$((props: TypeDependencyProps) => {
  return <div>{props.foo}</div>;
});

export default TypeDependency;
"
`;

exports[`qwik > jsx > Typescript Test > use-style 1`] = `
"import { Fragment, component$, h, useStylesScoped$ } from \\"@builder.io/qwik\\";

export const MyComponent = component$((props: any) => {
  useStylesScoped$(STYLES);

  return <button type=\\"button\\">Button</button>;
});

export default MyComponent;

export const STYLES = \`
button {
  background: blue;
  color: white;
  font-size: 12px;
  outline: 1px solid black;
}
\`;
"
`;

exports[`qwik > jsx > Typescript Test > use-style-and-css 1`] = `
"import { Fragment, component$, h, useStylesScoped$ } from \\"@builder.io/qwik\\";

export const MyComponent = component$((props: any) => {
  useStylesScoped$(STYLES);

  return (
    <button type=\\"button\\" class=\\"button-MyComponent\\">
      Button
    </button>
  );
});

export default MyComponent;

export const STYLES = \`
button {
  font-size: 12px;
  outline: 1px solid black;
}

.button-MyComponent {
  background: blue;
  color: white;
}
\`;
"
`;

exports[`qwik > jsx > Typescript Test > use-style-outside-component 1`] = `
"import { Fragment, component$, h, useStylesScoped$ } from \\"@builder.io/qwik\\";

export const MyComponent = component$((props: any) => {
  useStylesScoped$(STYLES);

  return <button type=\\"button\\">Button</button>;
});

export default MyComponent;

export const STYLES = \`
button {
  background: blue;
  color: white;
  font-size: 12px;
  outline: 1px solid black;
}
\`;
"
`;

exports[`qwik > jsx > Typescript Test > useTarget 1`] = `
"import {
  Fragment,
  component$,
  h,
  useComputed$,
  useStore,
  useVisibleTask$,
} from \\"@builder.io/qwik\\";

export const UseTargetComponent = component$((props: any) => {
  const name = useComputed$(() => {
    const prefix = \\"q\\";
    return prefix + \\"foo\\";
  });
  const state = useStore<any>({ lastName: \\"bar\\" });
  useVisibleTask$(() => {
    console.log(\\"qwik\\");
    state.lastName = \\"baz\\";
  });

  return <div>{name.value}</div>;
});

export default UseTargetComponent;
"
`;

exports[`qwik > jsx > Typescript Test > webComponent 1`] = `
"import { Fragment, component$, h, useTask$ } from \\"@builder.io/qwik\\";

import { register } from \\"swiper/element/bundle\\";

export const MyBasicWebComponent = component$((props: any) => {
  useTask$(() => {
    register();
  });

  return (
    <swiper-container slides-per-view=\\"3\\" navigation=\\"true\\" pagination=\\"true\\">
      <swiper-slide>Slide 1</swiper-slide>
      <swiper-slide>Slide 2</swiper-slide>
      <swiper-slide>Slide 3</swiper-slide>
    </swiper-container>
  );
});

export default MyBasicWebComponent;
"
`;

exports[`qwik > mount 1`] = `
{
  "high.cjs": "const __proxyMerge__ = (exports.__proxyMerge__ = function __proxyMerge__(
  state,
  local
) {
  return new Proxy(state, {
    get: (obj, prop) => {
      if (local && prop in local) {
        return local[prop];
      } else {
        return state[prop];
      }
    },
    set: (obj, prop, value) => {
      obj[prop] = value;
      return true;
    },
  });
});
",
  "low.cjs": "const Fragment = require(\\"@builder.io/qwik\\").Fragment;
const h = require(\\"@builder.io/qwik\\").h;
const qrl = require(\\"@builder.io/qwik\\").qrl;
const useStore = require(\\"@builder.io/qwik\\").useStore;
const useStylesScopedQrl = require(\\"@builder.io/qwik\\").useStylesScopedQrl;

exports.MyComponentStyles = \`.cjrqfb1{display:flex;flex-direction:column;position:relative;flex-shrink:0;box-sizing:border-box;margin-top:20px;line-height:normal;height:auto;text-align:center}\`;
exports.MyComponentOnMount = (p) => {
  const s = useStore(
    () => {
      const state = Object.assign(
        {},
        structuredClone(
          typeof __STATE__ === \\"object\\" && __STATE__[p.serverStateId]
        ),
        p
      );
      if (!state.hasOwnProperty(\\"title\\")) state.title = '\\"Default title value\\"';
      if (!state.hasOwnProperty(\\"hiliteTitle\\")) state.hiliteTitle = true;
      var _virtual_index = 1234;
      _virtual_index;
      return state;
    },
    { deep: true }
  );
  const l = {};
  const state = __proxyMerge__(s, l);

  useStylesScopedQrl(qrl(\\"./low.js\\", \\"MyComponentStyles\\", []));

  return h(
    \\"div\\",
    {
      \\"builder-id\\": \\"builder-192569f8d0a943398ec7ab9c327e104f\\",
      class: \\"cjrqfb1 builder-block\\",
      style: {
        backgroundColor: (() => {
          try {
            return state.hilitTitle ? \\"red\\" : \\"gray\\";
          } catch (err) {
            console.warn(\\"Builder code error\\", err);
          }
        })(),
      },
    },
    h(\\"div\\", {
      key: \\"builder-192569f8d0a943398ec7ab9c327e104f\\",
      class: \\"builder-text\\",
      dangerouslySetInnerHTML: state.title,
    })
  );
};
const __proxyMerge__ = (exports.__proxyMerge__ = function __proxyMerge__(
  state,
  local
) {
  return new Proxy(state, {
    get: (obj, prop) => {
      if (local && prop in local) {
        return local[prop];
      } else {
        return state[prop];
      }
    },
    set: (obj, prop, value) => {
      obj[prop] = value;
      return true;
    },
  });
});
",
  "med.cjs": "const componentQrl = require(\\"@builder.io/qwik\\").componentQrl;
const qrl = require(\\"@builder.io/qwik\\").qrl;

exports.MyComponent = componentQrl(qrl(\\"./low.js\\", \\"MyComponentOnMount\\", []));
const __proxyMerge__ = (exports.__proxyMerge__ = function __proxyMerge__(
  state,
  local
) {
  return new Proxy(state, {
    get: (obj, prop) => {
      if (local && prop in local) {
        return local[prop];
      } else {
        return state[prop];
      }
    },
    set: (obj, prop, value) => {
      obj[prop] = value;
      return true;
    },
  });
});
",
}
`;

exports[`qwik > page-with-symbol 1`] = `
{
  "high.js": "export const __proxyMerge__ = function __proxyMerge__(state, local) {
  return new Proxy(state, {
    get: (obj, prop) => {
      if (local && prop in local) {
        return local[prop];
      } else {
        return state[prop];
      }
    },
    set: (obj, prop, value) => {
      obj[prop] = value;
      return true;
    },
  });
};
",
  "low.js": "import { Symbol1 } from \\"./med.js\\";

import {
  Fragment,
  h,
  qrl,
  useStore,
  useStylesScopedQrl,
} from \\"@builder.io/qwik\\";

export const MyComponentStyles = \`.c713ty2{display:flex;flex-direction:column;position:relative;flex-shrink:0;box-sizing:border-box;margin-top:20px}.cxvcn5v{display:flex;flex-direction:column;position:relative;flex-shrink:0;box-sizing:border-box;margin-top:20px;line-height:normal;height:auto;text-align:center;padding-top:1em;padding-bottom:1em;font-weight:700;font-size:24px}\`;
export const MyComponentOnMount = (p) => {
  const s = useStore(
    () => {
      const state = Object.assign(
        {},
        structuredClone(
          typeof __STATE__ === \\"object\\" && __STATE__[p.serverStateId]
        ),
        p
      );
      return state;
    },
    { deep: true }
  );
  const l = {};
  const state = __proxyMerge__(s, l);

  useStylesScopedQrl(qrl(\\"./low.js\\", \\"MyComponentStyles\\", []));

  return h(
    Fragment,
    null,
    h(Symbol1, {
      class: \\"c713ty2\\",
      symbol: {
        model: \\"page\\",
        entry: \\"36da1052e57e47f084ea8b1fbde248e4\\",
        data: {},
      },
    }),
    h(\\"div\\", { class: \\"cxvcn5v\\" }, \\"<p>Main Text</p>\\")
  );
};
export const __proxyMerge__ = function __proxyMerge__(state, local) {
  return new Proxy(state, {
    get: (obj, prop) => {
      if (local && prop in local) {
        return local[prop];
      } else {
        return state[prop];
      }
    },
    set: (obj, prop, value) => {
      obj[prop] = value;
      return true;
    },
  });
};
",
  "med.js": "import { componentQrl, qrl } from \\"@builder.io/qwik\\";

export const MyComponent = componentQrl(
  qrl(\\"./low.js\\", \\"MyComponentOnMount\\", [])
);
export const __proxyMerge__ = function __proxyMerge__(state, local) {
  return new Proxy(state, {
    get: (obj, prop) => {
      if (local && prop in local) {
        return local[prop];
      } else {
        return state[prop];
      }
    },
    set: (obj, prop, value) => {
      obj[prop] = value;
      return true;
    },
  });
};
",
}
`;

exports[`qwik > show-hide 1`] = `{}`;

exports[`qwik > show-hide 2`] = `
{
  "high.jsx": "import { useLexicalScope } from \\"@builder.io/qwik\\";

export const MyComponent_onClick_0 = (event) => {
  const [s, l] = useLexicalScope();
  const state = __proxyMerge__(s, l);
  try {
    return (state.visible = !state.visible);
  } catch (err) {
    console.warn(\\"Builder code error\\", err);
  }
};
export const __proxyMerge__ = function __proxyMerge__(state, local) {
  return new Proxy(state, {
    get: (obj, prop) => {
      if (local && prop in local) {
        return local[prop];
      } else {
        return state[prop];
      }
    },
    set: (obj, prop, value) => {
      obj[prop] = value;
      return true;
    },
  });
};
",
  "low.jsx": "export const __proxyMerge__ = function __proxyMerge__(state, local) {
  return new Proxy(state, {
    get: (obj, prop) => {
      if (local && prop in local) {
        return local[prop];
      } else {
        return state[prop];
      }
    },
    set: (obj, prop, value) => {
      obj[prop] = value;
      return true;
    },
  });
};
",
  "med.jsx": "import {
  Fragment,
  componentQrl,
  h,
  qrl,
  useStore,
  useStylesScopedQrl,
} from \\"@builder.io/qwik\\";

export const MyComponentStyles = \`.c9nzze9{display:flex;flex-direction:column;position:relative;flex-shrink:0;box-sizing:border-box;margin-top:20px;appearance:none;padding-top:15px;padding-bottom:15px;padding-left:25px;padding-right:25px;background-color:#3898EC;color:white;border-radius:4px;text-align:center;cursor:pointer}.cjrqfb1{display:flex;flex-direction:column;position:relative;flex-shrink:0;box-sizing:border-box;margin-top:20px;line-height:normal;height:auto;text-align:center}.c837pqv{display:flex;flex-direction:column;position:relative;flex-shrink:0;box-sizing:border-box;margin-top:20px;width:100%;min-height:20px;min-width:20px;overflow:hidden}\`;
export const MyComponentOnMount = (p) => {
  const s = useStore(
    () => {
      const state = Object.assign(
        {},
        structuredClone(
          typeof __STATE__ === \\"object\\" && __STATE__[p.serverStateId]
        ),
        p
      );
      if (!state.hasOwnProperty(\\"visible\\")) state.visible = false;
      return state;
    },
    { deep: true }
  );
  const l = {};
  const state = __proxyMerge__(s, l);

  useStylesScopedQrl(qrl(\\"./med.js\\", \\"MyComponentStyles\\", []));

  return (
    <>
      <CoreButton
        builder-id=\\"builder-7ac4d7c20b01404ca338b2f4c59b3f82\\"
        text=\\"Toggle\\"
        class=\\"c9nzze9 builder-block\\"
        onClick$={qrl(\\"./high.js\\", \\"MyComponent_onClick_0\\", [s, l])}
      ></CoreButton>
      {state.visible ? (
        <div
          builder-id=\\"builder-845ebd803c89485383568d433b6fd517\\"
          class=\\"cjrqfb1\\"
        >
          <div
            key=\\"builder-845ebd803c89485383568d433b6fd517\\"
            dangerouslySetInnerHTML=\\"<p>Show when visible=true</p>\\"
            class=\\"builder-text\\"
          ></div>
        </div>
      ) : null}
      {!state.visible ? (
        <div
          builder-id=\\"builder-67baa3b2073942b99017e846759776aa\\"
          class=\\"cjrqfb1\\"
        >
          <div
            key=\\"builder-67baa3b2073942b99017e846759776aa\\"
            dangerouslySetInnerHTML=\\"<p>Show when visible=false</p>\\"
            class=\\"builder-text\\"
          ></div>
        </div>
      ) : null}
      {!visible ? (
        <Image
          builder-id=\\"builder-e42f7b40d40a442ea72dac7a1ceb2021\\"
          image=\\"https://cdn.builder.io/api/v1/image/assets%2F23dfd7cef1104af59f281d58ec525923%2F4ecf7b7554464b0183ab8250f67e797b?width=1160\\"
          backgroundSize=\\"cover\\"
          backgroundPosition=\\"center\\"
          sizes=\\"(max-width: 638px) 94vw, (max-width: 998px) 96vw, 83vw\\"
          srcset=\\"https://cdn.builder.io/api/v1/image/assets%2F23dfd7cef1104af59f281d58ec525923%2F4ecf7b7554464b0183ab8250f67e797b?width=100 100w, https://cdn.builder.io/api/v1/image/assets%2F23dfd7cef1104af59f281d58ec525923%2F4ecf7b7554464b0183ab8250f67e797b?width=200 200w, https://cdn.builder.io/api/v1/image/assets%2F23dfd7cef1104af59f281d58ec525923%2F4ecf7b7554464b0183ab8250f67e797b?width=400 400w, https://cdn.builder.io/api/v1/image/assets%2F23dfd7cef1104af59f281d58ec525923%2F4ecf7b7554464b0183ab8250f67e797b?width=800 800w, https://cdn.builder.io/api/v1/image/assets%2F23dfd7cef1104af59f281d58ec525923%2F4ecf7b7554464b0183ab8250f67e797b?width=1200 1200w, https://cdn.builder.io/api/v1/image/assets%2F23dfd7cef1104af59f281d58ec525923%2F4ecf7b7554464b0183ab8250f67e797b?width=1600 1600w, https://cdn.builder.io/api/v1/image/assets%2F23dfd7cef1104af59f281d58ec525923%2F4ecf7b7554464b0183ab8250f67e797b?width=2000 2000w, https://cdn.builder.io/api/v1/image/assets%2F23dfd7cef1104af59f281d58ec525923%2F4ecf7b7554464b0183ab8250f67e797b?width=1160 1160w, https://cdn.builder.io/api/v1/image/assets%2F23dfd7cef1104af59f281d58ec525923%2F4ecf7b7554464b0183ab8250f67e797b?width=598 598w, https://cdn.builder.io/api/v1/image/assets%2F23dfd7cef1104af59f281d58ec525923%2F4ecf7b7554464b0183ab8250f67e797b?width=958 958w\\"
          class=\\"c837pqv\\"
          lazy={false}
          fitContent={true}
          aspectRatio={1}
          height={1300}
          width={1300}
        ></Image>
      ) : null}
    </>
  );
};
export const MyComponent = componentQrl(
  qrl(\\"./med.js\\", \\"MyComponentOnMount\\", [])
);
export const CoreButton = function CoreButton(props) {
  const hasLink = !!props.link;
  const hProps = {
    dangerouslySetInnerHTML: props.text || \\"\\",
    href: props.link,
    target: props.openInNewTab ? \\"_blank\\" : \\"_self\\",
    class: props.class,
  };
  return h(
    hasLink ? \\"a\\" : props.tagName$ || \\"span\\",
    __passThroughProps__(hProps, props)
  );
};
export const __passThroughProps__ = function __passThroughProps__(
  dstProps,
  srcProps
) {
  for (const key in srcProps) {
    if (
      Object.prototype.hasOwnProperty.call(srcProps, key) &&
      ((key.startsWith(\\"on\\") && key.endsWith(\\"$\\")) || key == \\"style\\")
    ) {
      dstProps[key] = srcProps[key];
    }
  }
  return dstProps;
};
export const Image = function Image(props) {
  let jsx = props.children || [];
  let image = props.image;
  if (image) {
    const isBuilderIoImage =
      !!(image || \\"\\").match(/\\\\.builder\\\\.io/) && !props.noWebp;
    const isPixel = props.builderBlock?.id.startsWith(\\"builder-pixel-\\");
    const imgProps = {
      src: props.image,
      style:
        \`object-fit:\${props.backgroundSize || \\"cover\\"};object-position:\${
          props.backgroundPosition || \\"center\\"
        };\` +
        (props.aspectRatio
          ? \\"position:absolute;height:100%;width:100%;top:0;left:0\\"
          : \\"\\"),
      sizes: props.sizes,
      alt: props.altText,
      role: !props.altText ? \\"presentation\\" : void 0,
      loading: isPixel ? \\"eager\\" : \\"lazy\\",
      srcset: void 0,
    };
    const qwikBugWorkaround = (imgProps2) =>
      Object.keys(imgProps2).forEach(
        (k) => imgProps2[k] === void 0 && delete imgProps2[k]
      );
    qwikBugWorkaround(imgProps);
    if (isBuilderIoImage) {
      const webpImage = updateQueryParam(image, \\"format\\", \\"webp\\");
      const srcset = [\\"100\\", \\"200\\", \\"400\\", \\"800\\", \\"1200\\", \\"1600\\", \\"2000\\"]
        .concat(props.srcsetSizes ? String(props.srcsetSizes).split(\\" \\") : [])
        .map((size) => {
          return updateQueryParam(webpImage, \\"width\\", size) + \\" \\" + size + \\"w\\";
        })
        .concat(tryAppendWidth(image))
        .join(\\",\\");
      imgProps.srcset = srcset;
      jsx = jsx = [
        h(\\"picture\\", {}, [
          h(\\"source\\", { type: \\"image/webp\\", srcset }),
          h(\\"img\\", imgProps, jsx),
        ]),
      ];
    } else {
      jsx = [h(\\"img\\", imgProps, jsx)];
    }
    if (
      props.aspectRatio &&
      !(props.fitContent && props.children && props.children.length)
    ) {
      const sizingDiv = h(\\"div\\", {
        class: \\"builder-image-sizer\\",
        style: \`width:100%;padding-top:\${
          (props.aspectRatio || 1) * 100
        }%;pointer-events:none;font-size:0\`,
      });
      jsx.push(sizingDiv);
    }
  }
  const children = props.children ? [jsx].concat(props.children) : [jsx];
  return h(
    props.href ? \\"a\\" : \\"div\\",
    __passThroughProps__({ href: props.href, class: props.class }, props),
    children
  );
  function updateQueryParam(uri = \\"\\", key, value) {
    const re = new RegExp(\\"([?&])\\" + key + \\"=.*?(&|$)\\", \\"i\\");
    const separator = uri.indexOf(\\"?\\") !== -1 ? \\"&\\" : \\"?\\";
    if (uri.match(re)) {
      return uri.replace(
        re,
        \\"$1\\" + key + \\"=\\" + encodeURIComponent(value) + \\"$2\\"
      );
    }
    return uri + separator + key + \\"=\\" + encodeURIComponent(value);
  }
  function tryAppendWidth(url) {
    const match = url.match(/[?&]width=(\\\\d+)/);
    const width = match && match[1];
    if (width) {
      return [url + \\" \\" + width + \\"w\\"];
    }
    return [];
  }
};
export const __proxyMerge__ = function __proxyMerge__(state, local) {
  return new Proxy(state, {
    get: (obj, prop) => {
      if (local && prop in local) {
        return local[prop];
      } else {
        return state[prop];
      }
    },
    set: (obj, prop, value) => {
      obj[prop] = value;
      return true;
    },
  });
};
",
}
`;

exports[`qwik > svelte > Javascript Test > basic 1`] = `
"import { $, Fragment, component$, h, useStore } from \\"@builder.io/qwik\\";

export const MyComponent = component$((props) => {
  const state = useStore({ name: \\"Steve\\" });

  return (
    <div>
      <input
        onChange$={$((event) => (state.name = event.target.value))}
        value={state.name}
      />
      Hello! I can run in React, Vue, Solid, or Liquid!
    </div>
  );
});

export default MyComponent;
"
`;

exports[`qwik > svelte > Javascript Test > bindGroup 1`] = `
"import { $, Fragment, component$, h, useStore } from \\"@builder.io/qwik\\";

export const MyComponent = component$((props) => {
  const state = useStore({ fillings: [], tortilla: \\"Plain\\" });

  return (
    <div>
      <input
        type=\\"radio\\"
        value=\\"Plain\\"
        checked={(() => {
          state.tortilla === \\"Plain\\";
        })()}
        onChange$={$((event) => (state.tortilla = event.target.value))}
      />
      <input
        type=\\"radio\\"
        value=\\"Whole wheat\\"
        checked={(() => {
          state.tortilla === \\"Whole wheat\\";
        })()}
        onChange$={$((event) => (state.tortilla = event.target.value))}
      />
      <input
        type=\\"radio\\"
        value=\\"Spinach\\"
        checked={(() => {
          state.tortilla === \\"Spinach\\";
        })()}
        onChange$={$((event) => (state.tortilla = event.target.value))}
      />
      <br />
      <br />
      <input
        type=\\"checkbox\\"
        value=\\"Rice\\"
        checked={(() => {
          state.fillings === \\"Rice\\";
        })()}
        onChange$={$((event) => (state.fillings = event.target.value))}
      />
      <input
        type=\\"checkbox\\"
        value=\\"Beans\\"
        checked={(() => {
          state.fillings === \\"Beans\\";
        })()}
        onChange$={$((event) => (state.fillings = event.target.value))}
      />
      <input
        type=\\"checkbox\\"
        value=\\"Cheese\\"
        checked={(() => {
          state.fillings === \\"Cheese\\";
        })()}
        onChange$={$((event) => (state.fillings = event.target.value))}
      />
      <input
        type=\\"checkbox\\"
        value=\\"Guac (extra)\\"
        checked={(() => {
          state.fillings === \\"Guac (extra)\\";
        })()}
        onChange$={$((event) => (state.fillings = event.target.value))}
      />
      <p>Tortilla: {state.tortilla}</p>
      <p>Fillings: {state.fillings}</p>
    </div>
  );
});

export default MyComponent;
"
`;

exports[`qwik > svelte > Javascript Test > bindProperty 1`] = `
"import { Fragment, component$, h, useStore } from \\"@builder.io/qwik\\";

export const MyComponent = component$((props) => {
  const state = useStore({ value: \\"hello\\" });

  return <input value={state.value} />;
});

export default MyComponent;
"
`;

exports[`qwik > svelte > Javascript Test > classDirective 1`] = `
"import { Fragment, component$, h, useStore } from \\"@builder.io/qwik\\";

export const MyComponent = component$((props) => {
  const state = useStore({ focus: true });

  return (
    <input
      class={\`form-input \${props.disabled ? \\"disabled\\" : \\"\\"} \${
        state.focus ? \\"focus\\" : \\"\\"
      }\`}
    />
  );
});

export default MyComponent;
"
`;

exports[`qwik > svelte > Javascript Test > context 1`] = `
"import {
  Fragment,
  component$,
  h,
  useContext,
  useContextProvider,
  useStore,
} from \\"@builder.io/qwik\\";

export const MyComponent = component$((props) => {
  const disabled = useContext(\\"disabled\\");
  const state = useStore({ activeTab: 0 });
  useContextProvider(\\"activeTab\\", state.activeTab);

  return <div>{state.activeTab}</div>;
});

export default MyComponent;
"
`;

exports[`qwik > svelte > Javascript Test > each 1`] = `
"import { Fragment, component$, h, useStore } from \\"@builder.io/qwik\\";

export const MyComponent = component$((props) => {
  const state = useStore({ numbers: [\\"one\\", \\"two\\", \\"three\\"] });

  return (
    <ul>
      {(state.numbers || []).map((num) => {
        return <li>{num}</li>;
      })}
    </ul>
  );
});

export default MyComponent;
"
`;

exports[`qwik > svelte > Javascript Test > eventHandlers 1`] = `
"import { $, Fragment, component$, h } from \\"@builder.io/qwik\\";

export const log = function log(props, state, msg = \\"hello\\") {
  console.log(msg);
};
export const MyComponent = component$((props) => {
  const state = {};

  return (
    <div>
      <button onClick$={$((event) => state.log(\\"hi\\"))}>Log</button>
      <button onClick$={$((event) => state.log(event))}>Log</button>
      <button onClick$={$((event) => state.log(event))}>Log</button>
    </div>
  );
});

export default MyComponent;
"
`;

exports[`qwik > svelte > Javascript Test > html 1`] = `
"import { Fragment, component$, h, useStore } from \\"@builder.io/qwik\\";

export const MyComponent = component$((props) => {
  const state = useStore({ html: \\"<b>bold</b>\\" });

  return <div dangerouslySetInnerHTML={state.html}></div>;
});

export default MyComponent;
"
`;

exports[`qwik > svelte > Javascript Test > ifElse 1`] = `
"import { $, Fragment, component$, h, useStore } from \\"@builder.io/qwik\\";

export const toggle = function toggle(props, state) {
  state.show = !state.show;
};
export const MyComponent = component$((props) => {
  const state = useStore({ show: true });

  return (
    <>
      {state.show ? (
        <button onClick$={$((event) => state.toggle(event))}> Hide </button>
      ) : (
        <button onClick$={$((event) => state.toggle(event))}> Show </button>
      )}
    </>
  );
});

export default MyComponent;
"
`;

exports[`qwik > svelte > Javascript Test > imports 1`] = `
"import Button from \\"./Button.jsx\\";

import { Fragment, Slot, component$, h, useStore } from \\"@builder.io/qwik\\";

export const MyComponent = component$((props) => {
  const state = useStore({ disabled: false });

  return (
    <div>
      <Button type=\\"button\\" disabled={state.disabled}>
        <Slot></Slot>
      </Button>
    </div>
  );
});

export default MyComponent;
"
`;

exports[`qwik > svelte > Javascript Test > lifecycleHooks 1`] = `
"import {
  Fragment,
  component$,
  h,
  useTask$,
  useVisibleTask$,
} from \\"@builder.io/qwik\\";

export const MyComponent = component$((props) => {
  useVisibleTask$(() => {
    console.log(\\"onMount\\");
  });
  useTask$(({ track }) => {
    console.log(\\"onAfterUpdate\\");
  });

  return <div></div>;
});

export default MyComponent;
"
`;

exports[`qwik > svelte > Javascript Test > reactive 1`] = `
"import {
  Fragment,
  component$,
  h,
  useComputed$,
  useStore,
} from \\"@builder.io/qwik\\";

export const MyComponent = component$((props) => {
  const lowercaseName = useComputed$(() => {
    return state.name.toLowerCase();
  });
  const state = useStore({ name: \\"Steve\\" });

  return (
    <div>
      <input value={state.name} />
      Lowercase: {lowercaseName.value}
    </div>
  );
});

export default MyComponent;
"
`;

exports[`qwik > svelte > Javascript Test > reactiveWithFn 1`] = `
"import {
  $,
  Fragment,
  component$,
  h,
  useStore,
  useTask$,
} from \\"@builder.io/qwik\\";

export const calculateResult = function calculateResult(props, state, a_, b_) {
  state.result = a_ * b_;
};
export const MyComponent = component$((props) => {
  const state = useStore({ a: 2, b: 5, result: null });
  useTask$(({ track }) => {
    track(() => state.a);
    track(() => state.b);
    state.calculateResult(state.a, state.b);
  });

  return (
    <div>
      <input
        type=\\"number\\"
        onChange$={$((event) => (state.a = event.target.value))}
        value={state.a}
      />
      <input
        type=\\"number\\"
        onChange$={$((event) => (state.b = event.target.value))}
        value={state.b}
      />
      Result: {state.result}
    </div>
  );
});

export default MyComponent;
"
`;

exports[`qwik > svelte > Javascript Test > slots 1`] = `
"import { Fragment, Slot, component$, h } from \\"@builder.io/qwik\\";

export const MyComponent = component$((props) => {
  return (
    <div>
      <Slot>default</Slot>
      <Slot name=\\"Test\\">
        <div>default</div>
      </Slot>
    </div>
  );
});

export default MyComponent;
"
`;

exports[`qwik > svelte > Javascript Test > style 1`] = `
"import { Fragment, component$, h, useStylesScoped$ } from \\"@builder.io/qwik\\";

export const MyComponent = component$((props) => {
  useStylesScoped$(STYLES);

  return <input class=\\"form-input\\" />;
});

export default MyComponent;

export const STYLES = \`
input {
  color: red;
  font-size: 12px;
}

.form-input:focus {
  outline: 1px solid blue;
}
\`;
"
`;

exports[`qwik > svelte > Javascript Test > textExpressions 1`] = `
"import { Fragment, component$, h, useStore } from \\"@builder.io/qwik\\";

export const MyComponent = component$((props) => {
  const state = useStore({ a: 5, b: 12 });

  return (
    <div>
      normal:
      {state.a + state.b}
      <br />
      conditional
      {state.a > 2 ? \\"hello\\" : \\"bye\\"}
    </div>
  );
});

export default MyComponent;
"
`;

exports[`qwik > svelte > Typescript Test > basic 1`] = `
"import { $, Fragment, component$, h, useStore } from \\"@builder.io/qwik\\";

export const MyComponent = component$((props: any) => {
  const state = useStore<any>({ name: \\"Steve\\" });

  return (
    <div>
      <input
        onChange$={$((event) => (state.name = event.target.value))}
        value={state.name}
      />
      Hello! I can run in React, Vue, Solid, or Liquid!
    </div>
  );
});

export default MyComponent;
"
`;

exports[`qwik > svelte > Typescript Test > bindGroup 1`] = `
"import { $, Fragment, component$, h, useStore } from \\"@builder.io/qwik\\";

export const MyComponent = component$((props: any) => {
  const state = useStore<any>({ fillings: [], tortilla: \\"Plain\\" });

  return (
    <div>
      <input
        type=\\"radio\\"
        value=\\"Plain\\"
        checked={(() => {
          state.tortilla === \\"Plain\\";
        })()}
        onChange$={$((event) => (state.tortilla = event.target.value))}
      />
      <input
        type=\\"radio\\"
        value=\\"Whole wheat\\"
        checked={(() => {
          state.tortilla === \\"Whole wheat\\";
        })()}
        onChange$={$((event) => (state.tortilla = event.target.value))}
      />
      <input
        type=\\"radio\\"
        value=\\"Spinach\\"
        checked={(() => {
          state.tortilla === \\"Spinach\\";
        })()}
        onChange$={$((event) => (state.tortilla = event.target.value))}
      />
      <br />
      <br />
      <input
        type=\\"checkbox\\"
        value=\\"Rice\\"
        checked={(() => {
          state.fillings === \\"Rice\\";
        })()}
        onChange$={$((event) => (state.fillings = event.target.value))}
      />
      <input
        type=\\"checkbox\\"
        value=\\"Beans\\"
        checked={(() => {
          state.fillings === \\"Beans\\";
        })()}
        onChange$={$((event) => (state.fillings = event.target.value))}
      />
      <input
        type=\\"checkbox\\"
        value=\\"Cheese\\"
        checked={(() => {
          state.fillings === \\"Cheese\\";
        })()}
        onChange$={$((event) => (state.fillings = event.target.value))}
      />
      <input
        type=\\"checkbox\\"
        value=\\"Guac (extra)\\"
        checked={(() => {
          state.fillings === \\"Guac (extra)\\";
        })()}
        onChange$={$((event) => (state.fillings = event.target.value))}
      />
      <p>Tortilla: {state.tortilla}</p>
      <p>Fillings: {state.fillings}</p>
    </div>
  );
});

export default MyComponent;
"
`;

exports[`qwik > svelte > Typescript Test > bindProperty 1`] = `
"import { Fragment, component$, h, useStore } from \\"@builder.io/qwik\\";

export const MyComponent = component$((props: any) => {
  const state = useStore<any>({ value: \\"hello\\" });

  return <input value={state.value} />;
});

export default MyComponent;
"
`;

exports[`qwik > svelte > Typescript Test > classDirective 1`] = `
"import { Fragment, component$, h, useStore } from \\"@builder.io/qwik\\";

export const MyComponent = component$((props: any) => {
  const state = useStore<any>({ focus: true });

  return (
    <input
      class={\`form-input \${props.disabled ? \\"disabled\\" : \\"\\"} \${
        state.focus ? \\"focus\\" : \\"\\"
      }\`}
    />
  );
});

export default MyComponent;
"
`;

exports[`qwik > svelte > Typescript Test > context 1`] = `
"import {
  Fragment,
  component$,
  h,
  useContext,
  useContextProvider,
  useStore,
} from \\"@builder.io/qwik\\";

export const MyComponent = component$((props: any) => {
  const disabled = useContext(\\"disabled\\");
  const state = useStore<any>({ activeTab: 0 });
  useContextProvider(\\"activeTab\\", state.activeTab);

  return <div>{state.activeTab}</div>;
});

export default MyComponent;
"
`;

exports[`qwik > svelte > Typescript Test > each 1`] = `
"import { Fragment, component$, h, useStore } from \\"@builder.io/qwik\\";

export const MyComponent = component$((props: any) => {
  const state = useStore<any>({ numbers: [\\"one\\", \\"two\\", \\"three\\"] });

  return (
    <ul>
      {(state.numbers || []).map((num) => {
        return <li>{num}</li>;
      })}
    </ul>
  );
});

export default MyComponent;
"
`;

exports[`qwik > svelte > Typescript Test > eventHandlers 1`] = `
"import { $, Fragment, component$, h } from \\"@builder.io/qwik\\";

export const log = function log(props, state, msg = \\"hello\\") {
  console.log(msg);
};
export const MyComponent = component$((props: any) => {
  const state: any = {};

  return (
    <div>
      <button onClick$={$((event) => state.log(\\"hi\\"))}>Log</button>
      <button onClick$={$((event) => state.log(event))}>Log</button>
      <button onClick$={$((event) => state.log(event))}>Log</button>
    </div>
  );
});

export default MyComponent;
"
`;

exports[`qwik > svelte > Typescript Test > html 1`] = `
"import { Fragment, component$, h, useStore } from \\"@builder.io/qwik\\";

export const MyComponent = component$((props: any) => {
  const state = useStore<any>({ html: \\"<b>bold</b>\\" });

  return <div dangerouslySetInnerHTML={state.html}></div>;
});

export default MyComponent;
"
`;

exports[`qwik > svelte > Typescript Test > ifElse 1`] = `
"import { $, Fragment, component$, h, useStore } from \\"@builder.io/qwik\\";

export const toggle = function toggle(props, state) {
  state.show = !state.show;
};
export const MyComponent = component$((props: any) => {
  const state = useStore<any>({ show: true });

  return (
    <>
      {state.show ? (
        <button onClick$={$((event) => state.toggle(event))}> Hide </button>
      ) : (
        <button onClick$={$((event) => state.toggle(event))}> Show </button>
      )}
    </>
  );
});

export default MyComponent;
"
`;

exports[`qwik > svelte > Typescript Test > imports 1`] = `
"import Button from \\"./Button.jsx\\";

import { Fragment, Slot, component$, h, useStore } from \\"@builder.io/qwik\\";

export const MyComponent = component$((props: any) => {
  const state = useStore<any>({ disabled: false });

  return (
    <div>
      <Button type=\\"button\\" disabled={state.disabled}>
        <Slot></Slot>
      </Button>
    </div>
  );
});

export default MyComponent;
"
`;

exports[`qwik > svelte > Typescript Test > lifecycleHooks 1`] = `
"import {
  Fragment,
  component$,
  h,
  useTask$,
  useVisibleTask$,
} from \\"@builder.io/qwik\\";

export const MyComponent = component$((props: any) => {
  useVisibleTask$(() => {
    console.log(\\"onMount\\");
  });
  useTask$(({ track }) => {
    console.log(\\"onAfterUpdate\\");
  });

  return <div></div>;
});

export default MyComponent;
"
`;

exports[`qwik > svelte > Typescript Test > reactive 1`] = `
"import {
  Fragment,
  component$,
  h,
  useComputed$,
  useStore,
} from \\"@builder.io/qwik\\";

export const MyComponent = component$((props: any) => {
  const lowercaseName = useComputed$(() => {
    return state.name.toLowerCase();
  });
  const state = useStore<any>({ name: \\"Steve\\" });

  return (
    <div>
      <input value={state.name} />
      Lowercase: {lowercaseName.value}
    </div>
  );
});

export default MyComponent;
"
`;

exports[`qwik > svelte > Typescript Test > reactiveWithFn 1`] = `
"import {
  $,
  Fragment,
  component$,
  h,
  useStore,
  useTask$,
} from \\"@builder.io/qwik\\";

export const calculateResult = function calculateResult(props, state, a_, b_) {
  state.result = a_ * b_;
};
export const MyComponent = component$((props: any) => {
  const state = useStore<any>({ a: 2, b: 5, result: null });
  useTask$(({ track }) => {
    track(() => state.a);
    track(() => state.b);
    state.calculateResult(state.a, state.b);
  });

  return (
    <div>
      <input
        type=\\"number\\"
        onChange$={$((event) => (state.a = event.target.value))}
        value={state.a}
      />
      <input
        type=\\"number\\"
        onChange$={$((event) => (state.b = event.target.value))}
        value={state.b}
      />
      Result: {state.result}
    </div>
  );
});

export default MyComponent;
"
`;

exports[`qwik > svelte > Typescript Test > slots 1`] = `
"import { Fragment, Slot, component$, h } from \\"@builder.io/qwik\\";

export const MyComponent = component$((props: any) => {
  return (
    <div>
      <Slot>default</Slot>
      <Slot name=\\"Test\\">
        <div>default</div>
      </Slot>
    </div>
  );
});

export default MyComponent;
"
`;

exports[`qwik > svelte > Typescript Test > style 1`] = `
"import { Fragment, component$, h, useStylesScoped$ } from \\"@builder.io/qwik\\";

export const MyComponent = component$((props: any) => {
  useStylesScoped$(STYLES);

  return <input class=\\"form-input\\" />;
});

export default MyComponent;

export const STYLES = \`
input {
  color: red;
  font-size: 12px;
}

.form-input:focus {
  outline: 1px solid blue;
}
\`;
"
`;

exports[`qwik > svelte > Typescript Test > textExpressions 1`] = `
"import { Fragment, component$, h, useStore } from \\"@builder.io/qwik\\";

export const MyComponent = component$((props: any) => {
  const state = useStore<any>({ a: 5, b: 12 });

  return (
    <div>
      normal:
      {state.a + state.b}
      <br />
      conditional
      {state.a > 2 ? \\"hello\\" : \\"bye\\"}
    </div>
  );
});

export default MyComponent;
"
`;

exports[`qwik > svg 1`] = `
{
  "high.js": "export const __proxyMerge__ = function __proxyMerge__(state, local) {
  return new Proxy(state, {
    get: (obj, prop) => {
      if (local && prop in local) {
        return local[prop];
      } else {
        return state[prop];
      }
    },
    set: (obj, prop, value) => {
      obj[prop] = value;
      return true;
    },
  });
};
",
  "low.js": "import {
  Fragment,
  h,
  qrl,
  useStore,
  useStylesScopedQrl,
} from \\"@builder.io/qwik\\";

export const MyComponentStyles = \`.c8xlkz3{display:flex;flex-direction:column;align-items:stretch;position:relative;flex-shrink:0;box-sizing:border-box;margin-top:auto;margin-bottom:auto}\`;
export const MyComponentOnMount = (p) => {
  const s = useStore(
    () => {
      const state = Object.assign(
        {},
        structuredClone(
          typeof __STATE__ === \\"object\\" && __STATE__[p.serverStateId]
        ),
        p
      );
      return state;
    },
    { deep: true }
  );
  const l = {};
  const state = __proxyMerge__(s, l);

  useStylesScopedQrl(qrl(\\"./low.js\\", \\"MyComponentStyles\\", []));

  return h(
    \\"div\\",
    {
      \\"builder-id\\": \\"builder-5bdc93549f3a4c30b28e85aa1fd91a1c\\",
      class: \\"c8xlkz3 builder-block\\",
    },
    h(\\"div\\", {
      key: \\"builder-5bdc93549f3a4c30b28e85aa1fd91a1c\\",
      dangerouslySetInnerHTML:
        '<svg\\\\n  width=\\"42\\"\\\\n  height=\\"42\\"\\\\n  viewBox=\\"0 0 42 42\\"\\\\n  fill=\\"none\\"\\\\n  xmlns=\\"http://www.w3.org/2000/svg\\"\\\\n>\\\\n  <path\\\\n    d=\\"M19.626 0.0327762C19.5357 0.0409786 19.2486 0.0696867 18.9903 0.0901925C13.0313 0.627445 7.4496 3.84276 3.9144 8.78466C1.94585 11.5324 0.686788 14.6493 0.211053 17.9508C0.0429057 19.1032 0.0223999 19.4436 0.0223999 21.0061C0.0223999 22.5687 0.0429057 22.9091 0.211053 24.0615C1.35118 31.9398 6.95747 38.5591 14.561 41.0116C15.9226 41.4504 17.358 41.7498 18.9903 41.9302C19.626 42 22.3737 42 23.0094 41.9302C25.8269 41.6186 28.2138 40.9214 30.5679 39.7197C30.9288 39.5352 30.9985 39.486 30.9493 39.4449C30.9165 39.4203 29.3785 37.3575 27.533 34.8639L24.1782 30.3322L19.9746 24.1107C17.6615 20.6903 15.7586 17.8933 15.7422 17.8933C15.7257 17.8892 15.7093 20.6534 15.7011 24.0287C15.6888 29.9385 15.6847 30.1763 15.6109 30.3158C15.5043 30.5167 15.4223 30.5987 15.25 30.689C15.1188 30.7546 15.0039 30.7669 14.3847 30.7669H13.6752L13.4865 30.648C13.3635 30.57 13.2733 30.4675 13.2117 30.3486L13.1256 30.164L13.1338 21.9412L13.1461 13.7143L13.2733 13.5543C13.3389 13.4682 13.4783 13.3575 13.5767 13.3041C13.7449 13.2221 13.8105 13.2139 14.52 13.2139C15.3566 13.2139 15.4961 13.2467 15.7134 13.4846C15.775 13.5502 18.0511 16.9788 20.7743 21.1086C23.4975 25.2385 27.2213 30.8776 29.0504 33.6459L32.3724 38.678L32.5405 38.5673C34.0292 37.5994 35.6041 36.2214 36.8508 34.786C39.5043 31.7389 41.2145 28.0232 41.7886 24.0615C41.9568 22.9091 41.9773 22.5687 41.9773 21.0061C41.9773 19.4436 41.9568 19.1032 41.7886 17.9508C40.6485 10.0724 35.0422 3.45315 27.4387 1.00065C26.0976 0.565927 24.6704 0.266542 23.0709 0.0860913C22.6772 0.0450797 19.9664 -3.30508e-05 19.626 0.0327762ZM28.2138 12.7218C28.4106 12.8202 28.5706 13.0089 28.628 13.2057C28.6608 13.3123 28.669 15.5926 28.6608 20.7313L28.6485 28.1052L27.3484 26.1121L26.0443 24.1189V18.7587C26.0443 15.2932 26.0607 13.3451 26.0853 13.2508C26.1509 13.0212 26.2944 12.8407 26.4913 12.7341C26.6595 12.648 26.721 12.6397 27.3649 12.6397C27.9718 12.6397 28.0785 12.648 28.2138 12.7218Z\\"\\\\n    fill=\\"#9CD3D7\\"\\\\n  />\\\\n  <path\\\\n    d=\\"M32.1674 38.7681C32.0239 38.8584 31.9787 38.9199 32.1059 38.8502C32.1961 38.7968 32.3437 38.6861 32.3191 38.682C32.3068 38.682 32.2371 38.723 32.1674 38.7681ZM31.8844 38.9527C31.8106 39.0101 31.8106 39.0142 31.9008 38.9691C31.95 38.9445 31.991 38.9158 31.991 38.9076C31.991 38.8748 31.9705 38.883 31.8844 38.9527ZM31.6794 39.0757C31.6055 39.1331 31.6055 39.1372 31.6958 39.0921C31.745 39.0675 31.786 39.0388 31.786 39.0306C31.786 38.9978 31.7655 39.006 31.6794 39.0757ZM31.4743 39.1988C31.4005 39.2562 31.4005 39.2603 31.4907 39.2152C31.5399 39.1906 31.5809 39.1618 31.5809 39.1536C31.5809 39.1208 31.5604 39.129 31.4743 39.1988ZM31.1626 39.3628C31.0068 39.4448 31.015 39.4776 31.1708 39.3997C31.2405 39.3628 31.2938 39.3259 31.2938 39.3177C31.2938 39.289 31.2897 39.2931 31.1626 39.3628Z\\"\\\\n    fill=\\"#9CD3D7\\"\\\\n  />\\\\n</svg>\\\\n',
    })
  );
};
export const __proxyMerge__ = function __proxyMerge__(state, local) {
  return new Proxy(state, {
    get: (obj, prop) => {
      if (local && prop in local) {
        return local[prop];
      } else {
        return state[prop];
      }
    },
    set: (obj, prop, value) => {
      obj[prop] = value;
      return true;
    },
  });
};
",
  "med.js": "import { componentQrl, qrl } from \\"@builder.io/qwik\\";

export const MyComponent = componentQrl(
  qrl(\\"./low.js\\", \\"MyComponentOnMount\\", [])
);
export const __proxyMerge__ = function __proxyMerge__(state, local) {
  return new Proxy(state, {
    get: (obj, prop) => {
      if (local && prop in local) {
        return local[prop];
      } else {
        return state[prop];
      }
    },
    set: (obj, prop, value) => {
      obj[prop] = value;
      return true;
    },
  });
};
",
}
`;

exports[`qwik > todo > Todo.cjs 1`] = `
{
  "high.cjs": "const useLexicalScope = require(\\"@builder.io/qwik\\").useLexicalScope;

exports.Todo_onClick_0 = (event) => {
  const [s, l] = useLexicalScope();
  const state = __proxyMerge__(s, l);
  state.toggle();
};
exports.Todo_onDblClick_1 = (event) => {
  const [s, l] = useLexicalScope();
  const state = __proxyMerge__(s, l);
  state.editing = true;
};
exports.Todo_onClick_2 = (event) => {
  todosState.todos.splice(todosState.todos.indexOf(props.todo));
};
exports.Todo_onBlur_3 = (event) => {
  const [s, l] = useLexicalScope();
  const state = __proxyMerge__(s, l);
  state.editing = false;
};
exports.Todo_onKeyUp_4 = (event) => {
  props.todo.text = event.target.value;
};
const __proxyMerge__ = (exports.__proxyMerge__ = function __proxyMerge__(
  state,
  local
) {
  return new Proxy(state, {
    get: (obj, prop) => {
      if (local && prop in local) {
        return local[prop];
      } else {
        return state[prop];
      }
    },
    set: (obj, prop, value) => {
      obj[prop] = value;
      return true;
    },
  });
});
",
  "low.cjs": "const __proxyMerge__ = (exports.__proxyMerge__ = function __proxyMerge__(
  state,
  local
) {
  return new Proxy(state, {
    get: (obj, prop) => {
      if (local && prop in local) {
        return local[prop];
      } else {
        return state[prop];
      }
    },
    set: (obj, prop, value) => {
      obj[prop] = value;
      return true;
    },
  });
});
",
  "med.cjs": "const Fragment = require(\\"@builder.io/qwik\\").Fragment;
const componentQrl = require(\\"@builder.io/qwik\\").componentQrl;
const h = require(\\"@builder.io/qwik\\").h;
const qrl = require(\\"@builder.io/qwik\\").qrl;
const useStore = require(\\"@builder.io/qwik\\").useStore;

exports.TodoOnMount = (p) => {
  const s = useStore(
    () => {
      const state = Object.assign(
        {},
        structuredClone(
          typeof __STATE__ === \\"object\\" && __STATE__[p.serverStateId]
        ),
        p
      );
      return state;
    },
    { deep: true }
  );
  const l = {};
  const state = __proxyMerge__(s, l);
  return h(
    \\"li\\",
    {
      class: \`\${props.todo.completed ? \\"completed\\" : \\"\\"} \${
        state.editing ? \\"editing\\" : \\"\\"
      }\`,
    },
    h(
      \\"div\\",
      { class: \\"view\\" },
      h(\\"input\\", {
        class: \\"toggle\\",
        type: \\"checkbox\\",
        checked: props.todo.completed,
        onClick$: qrl(\\"./high.js\\", \\"Todo_onClick_0\\", [s, l]),
      }),
      h(
        \\"label\\",
        { onDblClick$: qrl(\\"./high.js\\", \\"Todo_onDblClick_1\\", [s, l]) },
        props.todo.text
      ),
      h(\\"button\\", {
        class: \\"destroy\\",
        onClick$: qrl(\\"./high.js\\", \\"Todo_onClick_2\\", [s, l]),
      })
    ),
    state.editing
      ? h(\\"input\\", {
          class: \\"edit\\",
          value: props.todo.text,
          onBlur$: qrl(\\"./high.js\\", \\"Todo_onBlur_3\\", [s, l]),
          onKeyUp$: qrl(\\"./high.js\\", \\"Todo_onKeyUp_4\\", [s, l]),
        })
      : null
  );
};
exports.Todo = componentQrl(qrl(\\"./med.js\\", \\"TodoOnMount\\", []));
const __proxyMerge__ = (exports.__proxyMerge__ = function __proxyMerge__(
  state,
  local
) {
  return new Proxy(state, {
    get: (obj, prop) => {
      if (local && prop in local) {
        return local[prop];
      } else {
        return state[prop];
      }
    },
    set: (obj, prop, value) => {
      obj[prop] = value;
      return true;
    },
  });
});
",
}
`;

exports[`qwik > todo > Todo.js 1`] = `
{
  "high.js": "import { useLexicalScope } from \\"@builder.io/qwik\\";

export const Todo_onClick_0 = (event) => {
  const [s, l] = useLexicalScope();
  const state = __proxyMerge__(s, l);
  state.toggle();
};
export const Todo_onDblClick_1 = (event) => {
  const [s, l] = useLexicalScope();
  const state = __proxyMerge__(s, l);
  state.editing = true;
};
export const Todo_onClick_2 = (event) => {
  todosState.todos.splice(todosState.todos.indexOf(props.todo));
};
export const Todo_onBlur_3 = (event) => {
  const [s, l] = useLexicalScope();
  const state = __proxyMerge__(s, l);
  state.editing = false;
};
export const Todo_onKeyUp_4 = (event) => {
  props.todo.text = event.target.value;
};
export const __proxyMerge__ = function __proxyMerge__(state, local) {
  return new Proxy(state, {
    get: (obj, prop) => {
      if (local && prop in local) {
        return local[prop];
      } else {
        return state[prop];
      }
    },
    set: (obj, prop, value) => {
      obj[prop] = value;
      return true;
    },
  });
};
",
  "low.js": "export const __proxyMerge__ = function __proxyMerge__(state, local) {
  return new Proxy(state, {
    get: (obj, prop) => {
      if (local && prop in local) {
        return local[prop];
      } else {
        return state[prop];
      }
    },
    set: (obj, prop, value) => {
      obj[prop] = value;
      return true;
    },
  });
};
",
  "med.js": "import { Fragment, componentQrl, h, qrl, useStore } from \\"@builder.io/qwik\\";

export const TodoOnMount = (p) => {
  const s = useStore(
    () => {
      const state = Object.assign(
        {},
        structuredClone(
          typeof __STATE__ === \\"object\\" && __STATE__[p.serverStateId]
        ),
        p
      );
      return state;
    },
    { deep: true }
  );
  const l = {};
  const state = __proxyMerge__(s, l);
  return h(
    \\"li\\",
    {
      class: \`\${props.todo.completed ? \\"completed\\" : \\"\\"} \${
        state.editing ? \\"editing\\" : \\"\\"
      }\`,
    },
    h(
      \\"div\\",
      { class: \\"view\\" },
      h(\\"input\\", {
        class: \\"toggle\\",
        type: \\"checkbox\\",
        checked: props.todo.completed,
        onClick$: qrl(\\"./high.js\\", \\"Todo_onClick_0\\", [s, l]),
      }),
      h(
        \\"label\\",
        { onDblClick$: qrl(\\"./high.js\\", \\"Todo_onDblClick_1\\", [s, l]) },
        props.todo.text
      ),
      h(\\"button\\", {
        class: \\"destroy\\",
        onClick$: qrl(\\"./high.js\\", \\"Todo_onClick_2\\", [s, l]),
      })
    ),
    state.editing
      ? h(\\"input\\", {
          class: \\"edit\\",
          value: props.todo.text,
          onBlur$: qrl(\\"./high.js\\", \\"Todo_onBlur_3\\", [s, l]),
          onKeyUp$: qrl(\\"./high.js\\", \\"Todo_onKeyUp_4\\", [s, l]),
        })
      : null
  );
};
export const Todo = componentQrl(qrl(\\"./med.js\\", \\"TodoOnMount\\", []));
export const __proxyMerge__ = function __proxyMerge__(state, local) {
  return new Proxy(state, {
    get: (obj, prop) => {
      if (local && prop in local) {
        return local[prop];
      } else {
        return state[prop];
      }
    },
    set: (obj, prop, value) => {
      obj[prop] = value;
      return true;
    },
  });
};
",
}
`;

exports[`qwik > todo > Todo.tsx 1`] = `
{
  "high.tsx": "import { useLexicalScope } from \\"@builder.io/qwik\\";

export const Todo_onClick_0 = (event) => {
  const [s, l] = useLexicalScope();
  const state = __proxyMerge__(s, l);
  state.toggle();
};
export const Todo_onDblClick_1 = (event) => {
  const [s, l] = useLexicalScope();
  const state = __proxyMerge__(s, l);
  state.editing = true;
};
export const Todo_onClick_2 = (event) => {
  todosState.todos.splice(todosState.todos.indexOf(props.todo));
};
export const Todo_onBlur_3 = (event) => {
  const [s, l] = useLexicalScope();
  const state = __proxyMerge__(s, l);
  state.editing = false;
};
export const Todo_onKeyUp_4 = (event) => {
  props.todo.text = event.target.value;
};
export const __proxyMerge__ = function __proxyMerge__(state, local) {
  return new Proxy(state, {
    get: (obj, prop) => {
      if (local && prop in local) {
        return local[prop];
      } else {
        return state[prop];
      }
    },
    set: (obj, prop, value) => {
      obj[prop] = value;
      return true;
    },
  });
};
",
  "low.tsx": "export const __proxyMerge__ = function __proxyMerge__(state, local) {
  return new Proxy(state, {
    get: (obj, prop) => {
      if (local && prop in local) {
        return local[prop];
      } else {
        return state[prop];
      }
    },
    set: (obj, prop, value) => {
      obj[prop] = value;
      return true;
    },
  });
};
",
  "med.tsx": "import { Fragment, componentQrl, h, qrl, useStore } from \\"@builder.io/qwik\\";

export const TodoOnMount = (p) => {
  const s = useStore(
    () => {
      const state = Object.assign(
        {},
        structuredClone(
          typeof __STATE__ === \\"object\\" && __STATE__[p.serverStateId]
        ),
        p
      );
      return state;
    },
    { deep: true }
  );
  const l = {};
  const state = __proxyMerge__(s, l);
  return (
    <li
      class={\`\${props.todo.completed ? \\"completed\\" : \\"\\"} \${
        state.editing ? \\"editing\\" : \\"\\"
      }\`}
    >
      <div class=\\"view\\">
        <input
          class=\\"toggle\\"
          type=\\"checkbox\\"
          checked={props.todo.completed}
          onClick$={qrl(\\"./high.js\\", \\"Todo_onClick_0\\", [s, l])}
        />
        <label onDblClick$={qrl(\\"./high.js\\", \\"Todo_onDblClick_1\\", [s, l])}>
          {props.todo.text}
        </label>
        <button
          class=\\"destroy\\"
          onClick$={qrl(\\"./high.js\\", \\"Todo_onClick_2\\", [s, l])}
        ></button>
      </div>
      {state.editing ? (
        <input
          class=\\"edit\\"
          value={props.todo.text}
          onBlur$={qrl(\\"./high.js\\", \\"Todo_onBlur_3\\", [s, l])}
          onKeyUp$={qrl(\\"./high.js\\", \\"Todo_onKeyUp_4\\", [s, l])}
        />
      ) : null}
    </li>
  );
};
export const Todo = componentQrl<any, any>(qrl(\\"./med.js\\", \\"TodoOnMount\\", []));
export const __proxyMerge__ = function __proxyMerge__(state, local) {
  return new Proxy(state, {
    get: (obj, prop) => {
      if (local && prop in local) {
        return local[prop];
      } else {
        return state[prop];
      }
    },
    set: (obj, prop, value) => {
      obj[prop] = value;
      return true;
    },
  });
};
",
}
`;

exports[`qwik > todos > Todo.tsx 1`] = `
{
  "high.tsx": "export const Todos_onClick_0 = (event) => {
  const newValue = !todosState.allCompleted;

  for (const todoItem of todosState.todos) {
    todoItem.completed = newValue;
  }
};
export const __proxyMerge__ = function __proxyMerge__(state, local) {
  return new Proxy(state, {
    get: (obj, prop) => {
      if (local && prop in local) {
        return local[prop];
      } else {
        return state[prop];
      }
    },
    set: (obj, prop, value) => {
      obj[prop] = value;
      return true;
    },
  });
};
",
  "low.tsx": "import { Header, Todo } from \\"./med.js\\";

import { Fragment, h, qrl, useStore } from \\"@builder.io/qwik\\";

export const TodosOnMount = (p) => {
  const s = useStore(
    () => {
      const state = Object.assign(
        {},
        structuredClone(
          typeof __STATE__ === \\"object\\" && __STATE__[p.serverStateId]
        ),
        p
      );
      return state;
    },
    { deep: true }
  );
  const l = {};
  const state = __proxyMerge__(s, l);
  return (
    <section class=\\"main\\">
      <Header name=\\"World\\">Hello</Header>
      {todosState.todos.length ? (
        <input
          class=\\"toggle-all\\"
          type=\\"checkbox\\"
          checked={todosState.allCompleted}
          onClick$={qrl(\\"./high.js\\", \\"Todos_onClick_0\\", [s, l])}
        />
      ) : null}
      <ul class=\\"todo-list\\">
        {(todosState.todos || []).map(
          ((todo) => {
            const l = {
              ...this,
              todosItem: todo == null ? {} : todo,
              todo: todo,
            };
            const state = __proxyMerge__(s, l);
            return <Todo todo={todo}></Todo>;
          }).bind(l)
        )}
      </ul>
    </section>
  );
};
export const __proxyMerge__ = function __proxyMerge__(state, local) {
  return new Proxy(state, {
    get: (obj, prop) => {
      if (local && prop in local) {
        return local[prop];
      } else {
        return state[prop];
      }
    },
    set: (obj, prop, value) => {
      obj[prop] = value;
      return true;
    },
  });
};
",
  "med.tsx": "import { componentQrl, h, qrl } from \\"@builder.io/qwik\\";

export const Todos = componentQrl<any, any>(
  qrl(\\"./low.js\\", \\"TodosOnMount\\", [])
);
export const __proxyMerge__ = function __proxyMerge__(state, local) {
  return new Proxy(state, {
    get: (obj, prop) => {
      if (local && prop in local) {
        return local[prop];
      } else {
        return state[prop];
      }
    },
    set: (obj, prop, value) => {
      obj[prop] = value;
      return true;
    },
  });
};
",
}
`;
