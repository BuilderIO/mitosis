// Vitest Snapshot v1

exports[`Marko > formatting 1`] = `
"
      <div>
        <if _=\\"input.foo === 'bar'\\">
          Hello
        </if>
        <for |items| of=\\"(some.long ? expression : yo)\\">
          World
        </for>
        <input 
          placeholder=\\"Hello world...\\"
          value=\\"(this.state.name)\\" 
          on-click=\\"(event => {&#10;            console.log('hello', &quot;world&quot;)&#10;          })\\"
          on-input=\\"(event => this.state.name = event.target.value)\\" /> 
          
          Hello! I can run in React, Vue, Solid, or Liquid!
      </div>"
`;

exports[`Marko > formatting 2`] = `
"
      <div>
        <if(input.foo === 'bar')>
          Hello
        </if>
        <for|items| of=(some.long ? expression : yo)>
          World
        </for>
        <input 
          placeholder=\\"Hello world...\\"
          value=(this.state.name) 
          on-click=(event => {
            console.log('hello', \\"world\\")
          })
          on-input=(event => this.state.name = event.target.value) /> 
          
          Hello! I can run in React, Vue, Solid, or Liquid!
      </div>"
`;

exports[`Marko > formatting 3`] = `
"<div>
  <if(input.foo === 'bar')> Hello </if>
  <for|items| of=(some.long ? expression : yo)> World </for>
  <input
    placeholder=\\"Hello world...\\"
    value=(this.state.name)
    on-click=(event => {
            console.log('hello', \\"world\\")
          })
    on-input=(event => this.state.name = event.target.value)
  />

  Hello! I can run in React, Vue, Solid, or Liquid!
</div>
"
`;

exports[`Marko > jsx > Javascript Test > AdvancedRef 1`] = `
"class {
  onBlur = function onBlur() {
    // Maintain focus
    this.inputRef.focus();
  };
  lowerCaseName = function lowerCaseName() {
    return this.state.name.toLowerCase();
  };

  onCreate(input) {
    this.state = { name: \\"PatrickJS\\" };
  }

  get inputRef() {
    return this.getEl(\\"inputRef\\");
  }
  get inputNoArgRef() {
    return this.getEl(\\"inputNoArgRef\\");
  }

  onRender() {
    console.log(\\"Received an update\\");
  }
}

style { 
  .input-790d468a {
    color: red;
  }
}
<div>
  <div></div>
  <if(input.showInput)>
    <div></div>
    <input
      onblur=(event => component.onBlur())
      onchange=(event => state.name = event.target.value) />
    <div></div>
    <label><div></div></label>
    <div></div>
    <select name=\\"cars\\">
      <div></div>
      <option><div></div></option>
      <div></div>
      <option><div></div></option>
      <div></div>
    </select>
    <div></div></if>

  <div></div>
  <div></div>
  <div></div>
</div>"
`;

exports[`Marko > jsx > Javascript Test > Basic 1`] = `
"export const DEFAULT_VALUES = {
  name: \\"Steve\\",
};

class {
  underscore_fn_name() {
    return \\"bar\\";
  }

  onCreate() {
    this.state = { name: \\"Steve\\", age: 1, sports: [\\"\\"] };
  }
}

style { 
  .div-48c79144 {
    padding: 10px;
  }
}
<div>
  <div></div>
  <input onchange=(myEvent => state.name = myEvent.target.value) />
  <div></div>
</div>"
`;

exports[`Marko > jsx > Javascript Test > Basic 2`] = `
"class {
  onCreate() {
    this.state = { name: \\"PatrickJS\\", names: [\\"Steve\\", \\"PatrickJS\\"] };
  }
}

<div>
  <div></div>
  <for|person| of=(state.names)>
    <if(person === state.name)>
      <div></div>
      <input
        onchange=(event => {
  state.name = event.target.value + ' and ' + person;
}) />
      <div></div>
      <div></div>
      <div></div></if>
  </for>
  <div></div>
</div>"
`;

exports[`Marko > jsx > Javascript Test > Basic Context 1`] = `
"import { Injector, createInjector, MyService } from \\"@dummy/injection-js\\";

class {
  onChange = function onChange() {
    const change = myService.method(\\"change\\");
    console.log(change);
  };

  onCreate() {
    this.state = { name: \\"PatrickJS\\" };
  }

  onMount() {
    const bye = myService.method(\\"hi\\");
    console.log(bye);
  }
}

<div>
  <div></div>
  <div></div>
  <div></div>
  <input onchange=(event => component.onChange) />
  <div></div>
</div>"
`;

exports[`Marko > jsx > Javascript Test > Basic OnMount Update 1`] = `
"class {
  onCreate(input) {
    this.state = { name: \\"PatrickJS\\", names: [\\"Steve\\", \\"PatrickJS\\"] };
  }

  onMount() {
    this.state.name = \\"PatrickJS onMount\\" + this.input.bye;
  }
}

<div>
  <div></div>
  <div></div>
</div>"
`;

exports[`Marko > jsx > Javascript Test > Basic Outputs 1`] = `
"class {
  onCreate(input) {
    this.state = { name: \\"PatrickJS\\" };
  }

  onMount() {
    this.input.onMessage(this.state.name);
    this.input.onEvent(this.input.message);
  }
}

<div></div>"
`;

exports[`Marko > jsx > Javascript Test > Basic Outputs Meta 1`] = `
"class {
  onCreate(input) {
    this.state = { name: \\"PatrickJS\\" };
  }

  onMount() {
    this.input.onMessage(this.state.name);
    this.input.onEvent(this.input.message);
  }
}

<div></div>"
`;

exports[`Marko > jsx > Javascript Test > BasicAttribute 1`] = `
"class {}

<input />"
`;

exports[`Marko > jsx > Javascript Test > BasicBooleanAttribute 1`] = `
"import MyBooleanAttributeComponent from \\"./basic-boolean-attribute-component.raw\\";

class {}

<div>
  <div></div>
  <div></div>
  <div></div>
  <div></div>
  <div></div>
  <MyBooleanAttributeComponent toggle=(true)></MyBooleanAttributeComponent>
  <div></div>
  <MyBooleanAttributeComponent toggle=(true)></MyBooleanAttributeComponent>
  <div></div>
  <MyBooleanAttributeComponent list=(null)></MyBooleanAttributeComponent>
  <div></div>
</div>"
`;

exports[`Marko > jsx > Javascript Test > BasicChildComponent 1`] = `
"import MyBasicComponent from \\"./basic.raw\\";
import MyBasicOnMountUpdateComponent from \\"./basic-onMount-update.raw\\";

class {
  onCreate() {
    this.state = { name: \\"Steve\\", dev: \\"PatrickJS\\" };
  }
}

<div>
  <div></div>
  <MyBasicComponent id=(state.dev)></MyBasicComponent>
  <div></div>
  <div>
    <div></div>
    <MyBasicOnMountUpdateComponent
      hi=(state.name)
      bye=(state.dev)
    ></MyBasicOnMountUpdateComponent>
    <div></div>
  </div>
  <div></div>
</div>"
`;

exports[`Marko > jsx > Javascript Test > BasicFor 1`] = `
"class {
  onCreate() {
    this.state = { name: \\"PatrickJS\\", names: [\\"Steve\\", \\"PatrickJS\\"] };
  }

  onMount() {
    console.log(\\"onMount code\\");
  }
}

<div>
  <div></div>
  <for|person| of=(state.names)>
    <div></div>
    <input
      onchange=(event => {
  state.name = event.target.value + ' and ' + person;
})
    />
    <div></div>
    <div></div>
    <div></div>
  </for>
  <div></div>
</div>"
`;

exports[`Marko > jsx > Javascript Test > BasicRef 1`] = `
"class {
  onBlur = function onBlur() {
    // Maintain focus
    this.inputRef.focus();
  };
  lowerCaseName = function lowerCaseName() {
    return this.state.name.toLowerCase();
  };

  onCreate(input) {
    this.state = { name: \\"PatrickJS\\" };
  }

  get inputRef() {
    return this.getEl(\\"inputRef\\");
  }
  get inputNoArgRef() {
    return this.getEl(\\"inputNoArgRef\\");
  }
}

style { 
  .input-cbb647ea {
    color: red;
  }
}
<div>
  <div></div>
  <if(input.showInput)>
    <div></div>
    <input
      onblur=(event => component.onBlur())
      onchange=(event => state.name = event.target.value) />
    <div></div>
    <label><div></div></label>
    <div></div>
    <select name=\\"cars\\">
      <div></div>
      <option><div></div></option>
      <div></div>
      <option><div></div></option>
      <div></div>
    </select>
    <div></div></if>

  <div></div>
  <div></div>
  <div></div>
</div>"
`;

exports[`Marko > jsx > Javascript Test > BasicRefAssignment 1`] = `
"class {
  handlerClick = function handlerClick(event) {
    event.preventDefault();
    console.log(\\"current value\\", this.holdValueRef);
    this.holdValueRef = this.holdValueRef + \\"JS\\";
  };
}

<div>
  <div></div>
  <button onclick=(evt => component.handlerClick(evt))><div></div></button>
  <div></div>
</div>"
`;

exports[`Marko > jsx > Javascript Test > BasicRefPrevious 1`] = `
"export function usePrevious<T>(value: T) {
  // The ref object is a generic container whose current property is mutable ...
  // ... and can hold any value, similar to an instance property on a class
  let ref = useRef<T>(null); // Store current value in ref

  onUpdate(() => {
    ref = value;
  }, [value]); // Only re-run if value changes
  // Return previous value (happens before update in useEffect above)

  return ref;
}

class {
  onCreate() {
    this.state = { count: 0 };
  }

  onRender() {
    this.prevCount = this.state.count;
  }
}

<div>
  <div></div>
  <h1>
    <div></div>
    <div></div>
    <div></div>
    <div></div>
    <div></div>
  </h1>
  <div></div>
  <button onclick=(event => state.count += 1)><div></div></button>
  <div></div>
</div>"
`;

exports[`Marko > jsx > Javascript Test > Button 1`] = `
"class {}

<div>
  <div></div>
  <if(input.link)>
    <div></div>
    <a
      ><div></div>
      <div></div>
      <div></div></a>
    <div></div></if>

  <div></div>
  <if(!input.link)>
    <div></div>
    <button>
      <div></div>
      <div></div>
      <div></div>
    </button>
    <div></div></if>

  <div></div>
</div>"
`;

exports[`Marko > jsx > Javascript Test > Columns 1`] = `
"class {
  getColumns() {
    return this.input.columns || [];
  }
  getGutterSize() {
    return typeof this.input.space === \\"number\\" ? this.input.space || 0 : 20;
  }
  getWidth(index) {
    const columns = this.getColumns();
    return (columns[index] && columns[index].width) || 100 / columns.length;
  }
  getColumnCssWidth(index) {
    const columns = this.getColumns();
    const gutterSize = this.getGutterSize();
    const subtractWidth = (gutterSize * (columns.length - 1)) / columns.length;
    return \`calc(\${this.getWidth(index)}% - \${subtractWidth}px)\`;
  }
}

style { 
  .div-f5d75200 {
    display: flex;
    flex-direction: column;
    align-items: stretch;
    line-height: normal;
  }
  @media (max-width: 999px) {
    .div-f5d75200 {
      flex-direction: row;
    }
  }
  @media (max-width: 639px) {
    .div-f5d75200 {
      flex-direction: row-reverse;
    }
  }
  .div-f5d75200-2 {
    flex-grow: 1;
  }
}
<div>
  <div></div>
  <for|column,index| of=(input.columns)>
    <div>
      <div></div>
      <div></div>
      <div></div>
      <div></div>
      <div></div>
    </div>
  </for>
  <div></div>
</div>"
`;

exports[`Marko > jsx > Javascript Test > ContentSlotHtml 1`] = `
"class {}

<div>
  <div></div>
  <slot name=(input.slotTesting)></slot>
  <div></div>
  <div>
    <div></div>
    <hr />
    <div></div>
  </div>
  <div></div>
  <div>
    <div></div>
    <slot></slot>
    <div></div>
  </div>
  <div></div>
</div>"
`;

exports[`Marko > jsx > Javascript Test > ContentSlotJSX 1`] = `
"class {
  get cls() {
    return this.input.slotContent && this.input.children
      ? \`\${this.state.name}-content\`
      : \\"\\";
  }
  show() {
    this.input.slotContent ? 1 : \\"\\";
  }

  onCreate(input) {
    this.state = { name: \\"king\\", showContent: false };
  }
}

<if(input.slotReference)>
  <div></div>
  <div
    name=(input.slotContent ? 'name1' : 'name2')
    onclick=(event => component.show())
  >
    <div></div>
    <if(state.showContent && input.slotContent)>
      <div></div>
      <slot name=\\"content\\"><div></div></slot>
      <div></div></if>

    <div></div>
    <div>
      <div></div>
      <hr />
      <div></div>
    </div>
    <div></div>
    <div><div></div></div>
    <div></div>
  </div>
  <div></div></if>"
`;

exports[`Marko > jsx > Javascript Test > CustomCode 1`] = `
"class {
  findAndRunScripts() {
    // TODO: Move this function to standalone one in '@builder.io/utils'
    if (this.elem && typeof window !== \\"undefined\\") {
      /** @type {HTMLScriptElement[]} */
      const scripts = this.elem.getElementsByTagName(\\"script\\");

      for (let i = 0; i < scripts.length; i++) {
        const script = scripts[i];

        if (script.src) {
          if (this.state.scriptsInserted.includes(script.src)) {
            continue;
          }

          this.state.scriptsInserted.push(script.src);
          const newScript = document.createElement(\\"script\\");
          newScript.async = true;
          newScript.src = script.src;
          document.head.appendChild(newScript);
        } else if (
          !script.type ||
          [
            \\"text/javascript\\",
            \\"application/javascript\\",
            \\"application/ecmascript\\",
          ].includes(script.type)
        ) {
          if (this.state.scriptsRun.includes(script.innerText)) {
            continue;
          }

          try {
            this.state.scriptsRun.push(script.innerText);
            new Function(script.innerText)();
          } catch (error) {
            console.warn(\\"\`CustomCode\`: Error running script:\\", error);
          }
        }
      }
    }
  }

  onCreate(input) {
    this.state = { scriptsInserted: [], scriptsRun: [] };
  }

  get elem() {
    return this.getEl(\\"elem\\");
  }

  onMount() {
    this.findAndRunScripts();
  }
}

<div innerhtml=(input.code)></div>"
`;

exports[`Marko > jsx > Javascript Test > Embed 1`] = `
"class {
  findAndRunScripts() {
    // TODO: Move this function to standalone one in '@builder.io/utils'
    if (this.elem && typeof window !== \\"undefined\\") {
      /** @type {HTMLScriptElement[]} */
      const scripts = this.elem.getElementsByTagName(\\"script\\");

      for (let i = 0; i < scripts.length; i++) {
        const script = scripts[i];

        if (script.src) {
          if (this.state.scriptsInserted.includes(script.src)) {
            continue;
          }

          this.state.scriptsInserted.push(script.src);
          const newScript = document.createElement(\\"script\\");
          newScript.async = true;
          newScript.src = script.src;
          document.head.appendChild(newScript);
        } else if (
          !script.type ||
          [
            \\"text/javascript\\",
            \\"application/javascript\\",
            \\"application/ecmascript\\",
          ].includes(script.type)
        ) {
          if (this.state.scriptsRun.includes(script.innerText)) {
            continue;
          }

          try {
            this.state.scriptsRun.push(script.innerText);
            new Function(script.innerText)();
          } catch (error) {
            console.warn(\\"\`CustomCode\`: Error running script:\\", error);
          }
        }
      }
    }
  }

  onCreate(input) {
    this.state = { scriptsInserted: [], scriptsRun: [] };
  }

  get elem() {
    return this.getEl(\\"elem\\");
  }

  onMount() {
    this.findAndRunScripts();
  }
}

<div innerhtml=(input.code)></div>"
`;

exports[`Marko > jsx > Javascript Test > Form 1`] = `
"import { BuilderBlock as BuilderBlockComponent } from \\"@fake\\";
import { Builder, builder } from \\"@builder.io/sdk\\";
import { BuilderBlocks } from \\"@fake\\";
import { set } from \\"@fake\\";
import { get } from \\"@fake\\";

class {
  get submissionState() {
    return (
      (Builder.isEditing && this.input.previewState) || this.state.formState
    );
  }
  onSubmit(event) {
    const sendWithJs =
      this.input.sendWithJs || this.input.sendSubmissionsTo === \\"email\\";

    if (this.input.sendSubmissionsTo === \\"zapier\\") {
      event.preventDefault();
    } else if (sendWithJs) {
      if (!(this.input.action || this.input.sendSubmissionsTo === \\"email\\")) {
        event.preventDefault();
        return;
      }

      event.preventDefault();
      const el = event.currentTarget;
      const headers = this.input.customHeaders || {};
      let body;
      const formData = new FormData(el); // TODO: maybe support null

      const formPairs = Array.from(
        event.currentTarget.querySelectorAll(\\"input,select,textarea\\")
      )
        .filter((el) => !!el.name)
        .map((el) => {
          let value;
          const key = el.name;

          if (el instanceof HTMLInputElement) {
            if (el.type === \\"radio\\") {
              if (el.checked) {
                value = el.name;
                return {
                  key,
                  value,
                };
              }
            } else if (el.type === \\"checkbox\\") {
              value = el.checked;
            } else if (el.type === \\"number\\" || el.type === \\"range\\") {
              const num = el.valueAsNumber;

              if (!isNaN(num)) {
                value = num;
              }
            } else if (el.type === \\"file\\") {
              // TODO: one vs multiple files
              value = el.files;
            } else {
              value = el.value;
            }
          } else {
            value = el.value;
          }

          return {
            key,
            value,
          };
        });
      let contentType = this.input.contentType;

      if (this.input.sendSubmissionsTo === \\"email\\") {
        contentType = \\"multipart/form-data\\";
      }

      Array.from(formPairs).forEach(({ value }) => {
        if (
          value instanceof File ||
          (Array.isArray(value) && value[0] instanceof File) ||
          value instanceof FileList
        ) {
          contentType = \\"multipart/form-data\\";
        }
      }); // TODO: send as urlEncoded or multipart by default
      // because of ease of use and reliability in browser API
      // for encoding the form?

      if (contentType !== \\"application/json\\") {
        body = formData;
      } else {
        // Json
        const json = {};
        Array.from(formPairs).forEach(({ value, key }) => {
          set(json, key, value);
        });
        body = JSON.stringify(json);
      }

      if (contentType && contentType !== \\"multipart/form-data\\") {
        if (
          /* Zapier doesn't allow content-type header to be sent from browsers */
          !(sendWithJs && this.input.action?.includes(\\"zapier.com\\"))
        ) {
          headers[\\"content-type\\"] = contentType;
        }
      }

      const presubmitEvent = new CustomEvent(\\"presubmit\\", {
        detail: {
          body,
        },
      });

      if (this.formRef) {
        this.formRef.dispatchEvent(presubmitEvent);

        if (presubmitEvent.defaultPrevented) {
          return;
        }
      }

      this.state.formState = \\"sending\\";
      const formUrl = \`\${
        builder.env === \\"dev\\" ? \\"http://localhost:5000\\" : \\"https://builder.io\\"
      }/api/v1/form-submit?apiKey=\${builder.apiKey}&to=\${btoa(
        this.input.sendSubmissionsToEmail || \\"\\"
      )}&name=\${encodeURIComponent(this.input.name || \\"\\")}\`;
      fetch(
        this.input.sendSubmissionsTo === \\"email\\" ? formUrl : this.input.action,
        /* TODO: throw error if no action URL */
        {
          body,
          headers,
          method: this.input.method || \\"post\\",
        }
      ).then(
        async (res) => {
          let body;
          const contentType = res.headers.get(\\"content-type\\");

          if (contentType && contentType.indexOf(\\"application/json\\") !== -1) {
            body = await res.json();
          } else {
            body = await res.text();
          }

          if (!res.ok && this.input.errorMessagePath) {
            /* TODO: allow supplying an error formatter function */
            let message = get(body, this.input.errorMessagePath);

            if (message) {
              if (typeof message !== \\"string\\") {
                /* TODO: ideally convert json to yaml so it woul dbe like
            error: - email has been taken */
                message = JSON.stringify(message);
              }

              this.state.formErrorMessage = message;
            }
          }

          this.state.responseData = body;
          this.state.formState = res.ok ? \\"success\\" : \\"error\\";

          if (res.ok) {
            const submitSuccessEvent = new CustomEvent(\\"submit:success\\", {
              detail: {
                res,
                body,
              },
            });

            if (this.formRef) {
              this.formRef.dispatchEvent(submitSuccessEvent);

              if (submitSuccessEvent.defaultPrevented) {
                return;
              }
              /* TODO: option to turn this on/off? */

              if (this.input.resetFormOnSubmit !== false) {
                this.formRef.reset();
              }
            }
            /* TODO: client side route event first that can be preventDefaulted */

            if (this.input.successUrl) {
              if (this.formRef) {
                const event = new CustomEvent(\\"route\\", {
                  detail: {
                    url: this.input.successUrl,
                  },
                });
                this.formRef.dispatchEvent(event);

                if (!event.defaultPrevented) {
                  location.href = this.input.successUrl;
                }
              } else {
                location.href = this.input.successUrl;
              }
            }
          }
        },
        (err) => {
          const submitErrorEvent = new CustomEvent(\\"submit:error\\", {
            detail: {
              error: err,
            },
          });

          if (this.formRef) {
            this.formRef.dispatchEvent(submitErrorEvent);

            if (submitErrorEvent.defaultPrevented) {
              return;
            }
          }

          this.state.responseData = err;
          this.state.formState = \\"error\\";
        }
      );
    }
  }

  onCreate(input) {
    this.state = {
      formState: \\"unsubmitted\\",
      responseData: null,
      formErrorMessage: \\"\\",
    };
  }

  get formRef() {
    return this.getEl(\\"formRef\\");
  }
}

style { 
  .pre-8989dad4 {
    padding: 10px;
    color: red;
    text-align: center;
  }
}
<form name=(input.name) onsubmit=(event => component.onSubmit(event))>
  <div></div>
  <if(input.builderBlock && input.builderBlock.children)>
    <div></div>
    <for|block,index| of=(input.builderBlock?.children)>
      <BuilderBlockComponent
        key=(block.id)
        block=(block)
        index=(index)
      ></BuilderBlockComponent>
    </for>
    <div></div></if>

  <div></div>
  <if(component.submissionState === 'error')>
    <div></div>
    <BuilderBlocks
      dataPath=\\"errorMessage\\"
      blocks=(input.errorMessage)
    ></BuilderBlocks>
    <div></div></if>

  <div></div>
  <if(component.submissionState === 'sending')>
    <div></div>
    <BuilderBlocks
      dataPath=\\"sendingMessage\\"
      blocks=(input.sendingMessage)
    ></BuilderBlocks>
    <div></div></if>

  <div></div>
  <if(component.submissionState === 'error' && state.responseData)>
    <div></div>
    <pre><div ></div>
<div ></div>
<div ></div></pre>
    <div></div></if>

  <div></div>
  <if(component.submissionState === 'success')>
    <div></div>
    <BuilderBlocks
      dataPath=\\"successMessage\\"
      blocks=(input.successMessage)
    ></BuilderBlocks>
    <div></div></if>

  <div></div>
</form>"
`;

exports[`Marko > jsx > Javascript Test > Image 1`] = `
"class {
  setLoaded() {
    this.state.imageLoaded = true;
  }
  useLazyLoading() {
    // TODO: Add more checks here, like testing for real web browsers
    return !!this.input.lazy && isBrowser();
  }
  isBrowser = function isBrowser() {
    return (
      typeof window !== \\"undefined\\" && window.navigator.product != \\"ReactNative\\"
    );
  };

  onCreate(input) {
    this.state = { scrollListener: null, imageLoaded: false, load: false };
  }

  get pictureRef() {
    return this.getEl(\\"pictureRef\\");
  }

  onMount() {
    if (this.useLazyLoading()) {
      // throttled scroll capture listener
      const listener = () => {
        if (this.pictureRef) {
          const rect = this.pictureRef.getBoundingClientRect();
          const buffer = window.innerHeight / 2;

          if (rect.top < window.innerHeight + buffer) {
            setLoad(true);
            this.state.scrollListener = null;
            window.removeEventListener(\\"scroll\\", listener);
          }
        }
      };

      this.state.scrollListener = listener;
      window.addEventListener(\\"scroll\\", listener, {
        capture: true,
        passive: true,
      });
      listener();
    }
  }
  onDestroy() {
    if (this.state.scrollListener) {
      window.removeEventListener(\\"scroll\\", this.state.scrollListener);
    }
  }
}

style { 
  .img-45432c52 {
    opacity: 1;
    transition: opacity 0.2s ease-in-out;
    object-fit: cover;
    object-position: center;
  }
}
<div>
  <div></div>
  <picture
    ><div></div>
    <if(!component.useLazyLoading() || state.load)>
      <div></div>
      <img
        aria-role=(input.altText ? 'presentation' : undefined)
        onload=(event => component.setLoaded()) />
      <div></div></if>

    <div></div>
    <source />
    <div></div></picture>
  <div></div>
  <div></div>
  <div></div>
</div>"
`;

exports[`Marko > jsx > Javascript Test > Image State 1`] = `
"class {
  onCreate() {
    this.state = { canShow: true, images: [\\"http://example.com/qwik.png\\"] };
  }
}

<div>
  <div></div>
  <for|item,itemIndex| of=(state.images)>
    <div></div>
    <img />
    <div></div>
  </for>
  <div></div>
</div>"
`;

exports[`Marko > jsx > Javascript Test > Img 1`] = `
"import { Builder } from \\"@builder.io/sdk\\";

class {}

<img />"
`;

exports[`Marko > jsx > Javascript Test > Input 1`] = `
"import { Builder } from \\"@builder.io/sdk\\";

class {}

<input name=(input.name) defaultvalue=(input.defaultValue) />"
`;

exports[`Marko > jsx > Javascript Test > RawText 1`] = `
"class {}

<span innerhtml=(input.text || '')></span>"
`;

exports[`Marko > jsx > Javascript Test > Section 1`] = `
"class {}

<section>
  <div></div>
  <div></div>
  <div></div>
</section>"
`;

exports[`Marko > jsx > Javascript Test > Section 2`] = `
"class {
  onCreate() {
    this.state = { max: 42, items: [42] };
  }
}

<if(state.max)>
  <div></div>
  <for|item| of=(state.items)>
    <section>
      <div></div>
      <div></div>
      <div></div>
    </section>
  </for>
  <div></div></if>"
`;

exports[`Marko > jsx > Javascript Test > Select 1`] = `
"import { Builder } from \\"@builder.io/sdk\\";

class {}

<select name=(input.name) defaultvalue=(input.defaultValue)>
  <div></div>
  <for|option,index| of=(input.options)>
    <option data-index=(index)>
      <div></div>
      <div></div>
      <div></div>
    </option>
  </for>
  <div></div>
</select>"
`;

exports[`Marko > jsx > Javascript Test > SlotDefault 1`] = `
"class {}

<div>
  <div></div>
  <slot
    ><div></div>
    <div><div></div></div>
    <div></div></slot>
  <div></div>
</div>"
`;

exports[`Marko > jsx > Javascript Test > SlotHtml 1`] = `
"import ContentSlotCode from \\"./content-slot-jsx.raw\\";

class {}

<div>
  <div></div>
  <ContentSlotCode
    ><div></div>
    <slot testing=(<div>Hello</div>)></slot>
    <div></div></ContentSlotCode>
  <div></div>
</div>"
`;

exports[`Marko > jsx > Javascript Test > SlotJsx 1`] = `
"import ContentSlotCode from \\"./content-slot-jsx.raw\\";

class {}

<div>
  <div></div>
  <ContentSlotCode slotTesting=(<div>Hello</div>)></ContentSlotCode>
  <div></div>
</div>"
`;

exports[`Marko > jsx > Javascript Test > SlotNamed 1`] = `
"class {}

<div>
  <div></div>
  <slot name=\\"top\\"></slot>
  <div></div>
  <slot name=\\"left\\"><div></div></slot>
  <div></div>
  <slot><div></div></slot>
  <div></div>
</div>"
`;

exports[`Marko > jsx > Javascript Test > Stamped.io 1`] = `
"import { kebabCase } from \\"lodash\\";
import { snakeCase } from \\"lodash\\";

class {
  kebabCaseValue() {
    return kebabCase(\\"testThat\\");
  }
  snakeCaseValue() {
    return snakeCase(\\"testThis\\");
  }

  onCreate(input) {
    this.state = { reviews: [], name: \\"test\\", showReviewPrompt: false };
  }

  onMount() {
    fetch(
      \`https://stamped.io/api/widget/reviews?storeUrl=builder-io.myshopify.com&apiKey=\${
        this.input.apiKey || \\"pubkey-8bbDq7W6w4sB3OWeM1HUy2s47702hM\\"
      }&productId=\${this.input.productId || \\"2410511106127\\"}\`
    )
      .then((res) => res.json())
      .then((data) => {
        this.state.reviews = data.data;
      });
  }
}

style { 
  .input-c3470f28 {
    display: block;
  }
  .textarea-c3470f28 {
    display: block;
  }
  .button-c3470f28 {
    display: block;
  }
  .review-c3470f28 {
    margin: 10px;
    padding: 10px;
    background: white;
    display: flex;
    border-radius: 5px;
    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
  }
  .img-c3470f28 {
    height: 30px;
    width: 30px;
    margin-right: 10px;
  }
}
<div data-user=(state.name)>
  <div></div>
  <button onclick=(event => state.showReviewPrompt = true)>
    <div></div>
  </button>
  <div></div>
  <if(state.showReviewPrompt || 'asdf')>
    <div></div>
    <input />
    <div></div>
    <input />
    <div></div>
    <textarea></textarea>
    <div></div>
    <button
      onclick=(event => {
  event.preventDefault();
  state.showReviewPrompt = false;
})
    >
      <div></div>
    </button>
    <div></div></if>

  <div></div>
  <for|review,index| of=(state.reviews)>
    <div>
      <div></div>
      <img />
      <div></div>
      <div>
        <div></div>
        <div>
          <div></div>
          <div></div>
        </div>
        <div></div>
        <div><div></div></div>
        <div></div>
        <div><div></div></div>
        <div></div>
      </div>
      <div></div>
    </div>
  </for>
  <div></div>
</div>"
`;

exports[`Marko > jsx > Javascript Test > Submit 1`] = `
"class {}

<button>
  <div></div>
  <div></div>
  <div></div>
</button>"
`;

exports[`Marko > jsx > Javascript Test > Text 1`] = `
"import { Builder } from \\"@builder.io/sdk\\";

class {
  onCreate(input) {
    this.state = { name: \\"Decadef20\\" };
  }
}

<div
  data-name=({
  test: state.name || 'any name'
})
  contenteditable=(allowEditingText || undefined)
  innerhtml=(input.text || input.content || state.name || '<p class=\\"text-lg\\">my name</p>')
></div>"
`;

exports[`Marko > jsx > Javascript Test > Textarea 1`] = `
"class {}

<textarea name=(input.name) defaultvalue=(input.defaultValue)></textarea>"
`;

exports[`Marko > jsx > Javascript Test > Video 1`] = `
"class {}

<video></video>"
`;

exports[`Marko > jsx > Javascript Test > arrowFunctionInUseStore 1`] = `
"class {
  setName(value) {
    this.state.name = value;
  }
  updateNameWithArrowFn(value) {
    this.state.name = value;
  }

  onCreate() {
    this.state = { name: \\"steve\\" };
  }
}

<div>
  <div></div>
  <div></div>
</div>"
`;

exports[`Marko > jsx > Javascript Test > basicForwardRef 1`] = `
"class {
  onCreate() {
    this.state = { name: \\"PatrickJS\\" };
  }

  get propsInputRef() {
    return this.getEl(\\"propsInputRef\\");
  }
}

style { 
  .input-014e706f {
    color: red;
  }
}
<div>
  <div></div>
  <input onchange=(event => state.name = event.target.value) />
  <div></div>
</div>"
`;

exports[`Marko > jsx > Javascript Test > basicForwardRefMetadata 1`] = `
"class {
  onCreate() {
    this.state = { name: \\"PatrickJS\\" };
  }

  get propsInputRef() {
    return this.getEl(\\"propsInputRef\\");
  }
}

style { 
  .input-53a59b24 {
    color: red;
  }
}
<div>
  <div></div>
  <input onchange=(event => state.name = event.target.value) />
  <div></div>
</div>"
`;

exports[`Marko > jsx > Javascript Test > basicOnUpdateReturn 1`] = `
"class {
  onCreate() {
    this.state = { name: \\"PatrickJS\\" };
  }

  onRender() {
    const controller = new AbortController();
    const signal = controller.signal;
    fetch(\\"https://patrickjs.com/api/resource.json\\", {
      signal,
    })
      .then((response) => response.json())
      .then((data) => {
        this.state.name = data.name;
      });
    return () => {
      if (!signal.aborted) {
        controller.abort();
      }
    };
  }
}

<div>
  <div></div>
  <div></div>
</div>"
`;

exports[`Marko > jsx > Javascript Test > camelCasedAttributes 1`] = `
"import React from \\"@builder.io/react\\";

class {
  onCreate() {
    this.state = { name: \\"Steve\\" };
  }
}

<div>
  <div></div>
  <img srcset=\\"http://example.com\\" />
  <div></div>
</div>"
`;

exports[`Marko > jsx > Javascript Test > class + ClassName + css 1`] = `
"class {}

style { 
  .div-240d4a4d {
    padding: 10px;
  }
}
<div><div></div></div>"
`;

exports[`Marko > jsx > Javascript Test > class + css 1`] = `
"class {}

style { 
  .div-210be817 {
    padding: 10px;
  }
}
<div><div></div></div>"
`;

exports[`Marko > jsx > Javascript Test > className + css 1`] = `
"class {}

style { 
  .div-210be817 {
    padding: 10px;
  }
}
<div><div></div></div>"
`;

exports[`Marko > jsx > Javascript Test > className 1`] = `
"class {
  onCreate() {
    this.state = { bindings: \\"a binding\\" };
  }
}

<div>
  <div></div>
  <div></div>
  <div><div></div></div>
  <div></div>
  <div></div>
  <div><div></div></div>
  <div></div>
</div>"
`;

exports[`Marko > jsx > Javascript Test > classState 1`] = `
"class {
  onCreate() {
    this.state = {
      classState: \\"testClassName\\",
      styleState: {
        color: \\"red\\",
      },
    };
  }
}

style { 
  .div-52624371 {
    padding: 10px;
  }
}
<div><div></div></div>"
`;

exports[`Marko > jsx > Javascript Test > componentWithContext 1`] = `
"import Context1 from \\"@dummy/1\\";
import Context2 from \\"@dummy/2\\";

class {}

<div></div>
<div></div>
<div></div>"
`;

exports[`Marko > jsx > Javascript Test > componentWithContextMultiRoot 1`] = `
"import Context1 from \\"@dummy/1\\";
import Context2 from \\"@dummy/2\\";

class {}

<div></div>
<div></div>
<div></div>
<div><div></div></div>
<div></div>"
`;

exports[`Marko > jsx > Javascript Test > contentState 1`] = `
"import BuilderContext from \\"@dummy/context.marko\\";

class {}

<div><div></div></div>"
`;

exports[`Marko > jsx > Javascript Test > defaultProps 1`] = `
"class {}

<div>
  <div></div>
  <if(input.link)>
    <div></div>
    <a
      ><div></div>
      <div></div>
      <div></div></a>
    <div></div></if>

  <div></div>
  <if(!input.link)>
    <div></div>
    <button onclick=(event => input.onClick(event))>
      <div></div>
      <div></div>
      <div></div>
    </button>
    <div></div></if>

  <div></div>
</div>"
`;

exports[`Marko > jsx > Javascript Test > defaultPropsOutsideComponent 1`] = `
"class {}

<div>
  <div></div>
  <if(input.link)>
    <div></div>
    <a
      ><div></div>
      <div></div>
      <div></div></a>
    <div></div></if>

  <div></div>
  <if(!input.link)>
    <div></div>
    <button onclick=(event => input.onClick(event))>
      <div></div>
      <div></div>
      <div></div>
    </button>
    <div></div></if>

  <div></div>
</div>"
`;

exports[`Marko > jsx > Javascript Test > defaultValsWithTypes 1`] = `
"const DEFAULT_VALUES: Props = {
  name: \\"Sami\\",
};

class {}

<div>
  <div></div>
  <div></div>
</div>"
`;

exports[`Marko > jsx > Javascript Test > expressionState 1`] = `
"class {
  onCreate(input) {
    this.state = {
      refToUse: !(input.componentRef instanceof Function)
        ? input.componentRef
        : null,
    };
  }
}

<div><div></div></div>"
`;

exports[`Marko > jsx > Javascript Test > import types 1`] = `
"import RenderBlock from \\"./builder-render-block.raw\\";

class {
  getRenderContentProps(block, index) {
    return {
      block: block,
      index: index,
    };
  }
}

<RenderBlock
  ...(state.getRenderContentProps(props.renderContentProps.block,
  0))
></RenderBlock>"
`;

exports[`Marko > jsx > Javascript Test > multipleOnUpdate 1`] = `
"class {
  onRender() {
    console.log(\\"Runs on every update/rerender\\");

    console.log(\\"Runs on every update/rerender as well\\");
  }
}

<div></div>"
`;

exports[`Marko > jsx > Javascript Test > multipleOnUpdateWithDeps 1`] = `
"class {
  onCreate() {
    this.state = { a: \\"a\\", b: \\"b\\", c: \\"c\\", d: \\"d\\" };
  }

  onRender() {
    console.log(\\"Runs when a or b changes\\", this.state.a, this.state.b);

    if (this.state.a === \\"a\\") {
      this.state.a = \\"b\\";
    }

    console.log(\\"Runs when c or d changes\\", this.state.c, this.state.d);

    if (this.state.a === \\"a\\") {
      this.state.a = \\"b\\";
    }
  }
}

<div></div>"
`;

exports[`Marko > jsx > Javascript Test > multipleSpreads 1`] = `
"class {
  onCreate() {
    this.state = {
      attrs: {
        hello: \\"world\\",
      },
    };
  }
}

<input />"
`;

exports[`Marko > jsx > Javascript Test > nestedShow 1`] = `
"class {}

<if(input.conditionA)>
  <div></div>
  <if(!input.conditionB)>
    <div></div>
    <div><div></div></div>
    <div></div></if>
  <else
    ><div><div></div></div></else>
  <div></div></if>
<else
  ><div><div></div></div></else>"
`;

exports[`Marko > jsx > Javascript Test > nestedStyles 1`] = `
"class {}

style { 
  .div-04b41bf9 {
    display: flex;
    foo: var(--bar);
  }
  @media (max-width: env(--mobile)) {
    .div-04b41bf9 {
      display: block;
    }
  }
  .div-04b41bf9:hover {
    display: flex;
  }
  .div-04b41bf9 .nested-selector {
    display: grid;
  }
}
<div><div></div></div>"
`;

exports[`Marko > jsx > Javascript Test > onInit & onMount 1`] = `
"class {
  onMount() {
    console.log(\\"onMount\\");
  }
}

<div></div>"
`;

exports[`Marko > jsx > Javascript Test > onInit 1`] = `
"export const defaultValues = {
  name: \\"PatrickJS\\",
};

class {
  onCreate(input) {
    this.state = { name: \\"\\" };
  }
}

<div>
  <div></div>
  <div></div>
</div>"
`;

exports[`Marko > jsx > Javascript Test > onMount 1`] = `
"class {
  onMount() {
    console.log(\\"Runs on mount\\");
  }
  onDestroy() {
    console.log(\\"Runs on unMount\\");
  }
}

<div></div>"
`;

exports[`Marko > jsx > Javascript Test > onUpdate 1`] = `
"class {
  onRender() {
    console.log(\\"Runs on every update/rerender\\");
  }
}

<div></div>"
`;

exports[`Marko > jsx > Javascript Test > onUpdateWithDeps 1`] = `
"class {
  onCreate(input) {
    this.state = { a: \\"a\\", b: \\"b\\" };
  }

  onRender() {
    console.log(
      \\"Runs when a, b or size changes\\",
      this.state.a,
      this.state.b,
      this.input.size
    );
  }
}

<div></div>"
`;

exports[`Marko > jsx > Javascript Test > preserveExportOrLocalStatement 1`] = `
"const b = 3;
const foo = () => {};
export const a = 3;
export const bar = () => {};
export function run<T>(value: T) {}

class {}

<div></div>"
`;

exports[`Marko > jsx > Javascript Test > preserveTyping 1`] = `
"class {}

<div>
  <div></div>
  <div></div>
</div>"
`;

exports[`Marko > jsx > Javascript Test > propsDestructure 1`] = `
"class {
  onCreate() {
    this.state = { name: \\"Decadef20\\" };
  }
}

<div>
  <div></div>
  <div></div>
  <div></div>
  <div></div>
  <div></div>
</div>"
`;

exports[`Marko > jsx > Javascript Test > propsInterface 1`] = `
"class {}

<div>
  <div></div>
  <div></div>
</div>"
`;

exports[`Marko > jsx > Javascript Test > propsType 1`] = `
"class {}

<div>
  <div></div>
  <div></div>
</div>"
`;

exports[`Marko > jsx > Javascript Test > referencingFunInsideHook 1`] = `
"class {
  foo = function foo(params) {};
  bar = function bar() {};
  zoo = function zoo() {
    const params = {
      cb: this.bar,
    };
  };

  onRender() {
    foo({
      someOption: bar,
    });
  }
}

<div></div>"
`;

exports[`Marko > jsx > Javascript Test > renderBlock 1`] = `
"import { getBlockActions } from \\"../../functions/get-block-actions.js\\";
import { getBlockComponentOptions } from \\"../../functions/get-block-component-options.js\\";
import { getBlockProperties } from \\"../../functions/get-block-properties.js\\";
import { getBlockTag } from \\"../../functions/get-block-tag.js\\";
import { getProcessedBlock } from \\"../../functions/get-processed-block.js\\";
import { evaluate } from \\"../../functions/evaluate.js\\";
import BlockStyles from \\"./block-styles.marko\\";
import { isEmptyHtmlElement } from \\"./render-block.helpers.js\\";
import RenderRepeatedBlock from \\"./render-repeated-block.marko\\";
import { TARGET } from \\"../../constants/target.js\\";
import { extractTextStyles } from \\"../../functions/extract-text-styles.js\\";
import RenderComponentWithContext from \\"./render-component-with-context.marko\\";
import RenderComponent from \\"./render-component.marko\\";
import { getReactNativeBlockStyles } from \\"../../functions/get-react-native-block-styles.js\\";

class {
  get component() {
    const componentName = getProcessedBlock({
      block: this.input.block,
      state: this.input.context.state,
      context: this.input.context.context,
      shouldEvaluateBindings: false,
    }).component?.name;

    if (!componentName) {
      return null;
    }

    const ref = this.input.context.registeredComponents[componentName];

    if (!ref) {
      // TODO: Public doc page with more info about this message
      console.warn(\`
         Could not find a registered component named \\"\${componentName}\\". 
         If you registered it, is the file that registered it imported by the file that needs to render it?\`);
      return undefined;
    } else {
      return ref;
    }
  }
  get tag() {
    return getBlockTag(this.useBlock);
  }
  get useBlock() {
    return this.repeatItemData
      ? this.input.block
      : getProcessedBlock({
          block: this.input.block,
          state: this.input.context.state,
          context: this.input.context.context,
          shouldEvaluateBindings: true,
        });
  }
  get actions() {
    return getBlockActions({
      block: this.useBlock,
      state: this.input.context.state,
      context: this.input.context.context,
    });
  }
  get attributes() {
    const blockProperties = getBlockProperties(this.useBlock);
    return {
      ...blockProperties,
      ...(TARGET === \\"reactNative\\"
        ? {
            style: getReactNativeBlockStyles({
              block: this.useBlock,
              context: this.input.context,
              blockStyles: blockProperties.style,
            }),
          }
        : {}),
    };
  }
  get shouldWrap() {
    return !this.component?.noWrap;
  }
  get renderComponentProps() {
    return {
      blockChildren: this.useChildren,
      componentRef: this.component?.component,
      componentOptions: {
        ...getBlockComponentOptions(this.useBlock),

        /**
         * These attributes are passed to the wrapper element when there is one. If \`noWrap\` is set to true, then
         * they are provided to the component itself directly.
         */
        ...(this.shouldWrap
          ? {}
          : {
              attributes: { ...this.attributes, ...this.actions },
            }),
        customBreakpoints: this.childrenContext?.content?.meta?.breakpoints,
      },
      context: this.childrenContext,
    };
  }
  get useChildren() {
    // TO-DO: When should \`canHaveChildren\` dictate rendering?
    // This is currently commented out because some Builder components (e.g. Box) do not have \`canHaveChildren: true\`,
    // but still receive and need to render children.
    // return state.componentInfo?.canHaveChildren ? state.useBlock.children : [];
    return this.useBlock.children ?? [];
  }
  get childrenWithoutParentComponent() {
    /**
     * When there is no \`componentRef\`, there might still be children that need to be rendered. In this case,
     * we render them outside of \`componentRef\`.
     * NOTE: We make sure not to render this if \`repeatItemData\` is non-null, because that means we are rendering an array of
     * blocks, and the children will be repeated within those blocks.
     */
    const shouldRenderChildrenOutsideRef =
      !this.component?.component && !this.repeatItemData;
    return shouldRenderChildrenOutsideRef ? this.useChildren : [];
  }
  get repeatItemData() {
    /**
     * we don't use \`state.useBlock\` here because the processing done within its logic includes evaluating the block's bindings,
     * which will not work if there is a repeat.
     */
    const { repeat, ...blockWithoutRepeat } = this.input.block;

    if (!repeat?.collection) {
      return undefined;
    }

    const itemsArray = evaluate({
      code: repeat.collection,
      state: this.input.context.state,
      context: this.input.context.context,
    });

    if (!Array.isArray(itemsArray)) {
      return undefined;
    }

    const collectionName = repeat.collection.split(\\".\\").pop();
    const itemNameToUse =
      repeat.itemName || (collectionName ? collectionName + \\"Item\\" : \\"item\\");
    const repeatArray = itemsArray.map((item, index) => ({
      context: {
        ...this.input.context,
        state: {
          ...this.input.context.state,
          $index: index,
          $item: item,
          [itemNameToUse]: item,
          [\`$\${itemNameToUse}Index\`]: index,
        },
      },
      block: blockWithoutRepeat,
    }));
    return repeatArray;
  }
  get inheritedTextStyles() {
    if (TARGET !== \\"reactNative\\") {
      return {};
    }

    const styles = getReactNativeBlockStyles({
      block: this.useBlock,
      context: this.input.context,
      blockStyles: this.attributes.style,
    });
    return extractTextStyles(styles);
  }
  get childrenContext() {
    return {
      apiKey: this.input.context.apiKey,
      state: this.input.context.state,
      content: this.input.context.content,
      context: this.input.context.context,
      registeredComponents: this.input.context.registeredComponents,
      inheritedStyles: this.inheritedTextStyles,
    };
  }
  get renderComponentTag() {
    if (TARGET === \\"reactNative\\") {
      return RenderComponentWithContext;
    } else if (TARGET === \\"vue3\\") {
      // vue3 expects a string for the component tag
      return \\"RenderComponent\\";
    } else {
      return RenderComponent;
    }
  }
}

<if(component.shouldWrap)>
  <div></div>
  <div></div>
  <if(isEmptyHtmlElement(component.tag))>
    <div></div>
    <state.tag></state.tag>
    <div></div></if>

  <div></div>
  <if(!isEmptyHtmlElement(component.tag) && component.repeatItemData)>
    <div></div>
    <for|data,index| of=(component.repeatItemData)>
      <RenderRepeatedBlock
        key=(index)
        repeatContext=(data.context)
        block=(data.block)
      ></RenderRepeatedBlock>
    </for>
    <div></div></if>

  <div></div>
  <if(!isEmptyHtmlElement(component.tag) && !component.repeatItemData)>
    <div></div>
    <state.tag
      ><div></div>
      <state.renderComponentTag
        ...(state.renderComponentProps)
      ></state.renderComponentTag>
      <div></div>
      <div></div>
      <for|child| of=(component.childrenWithoutParentComponent)>
        <RenderBlock
          key=('render-block-' + child.id)
          block=(child)
          context=(component.childrenContext)
        ></RenderBlock>
      </for>
      <div></div>
      <for|child| of=(component.childrenWithoutParentComponent)>
        <BlockStyles
          key=('block-style-' + child.id)
          block=(child)
          context=(component.childrenContext)
        ></BlockStyles>
      </for>
      <div></div></state.tag>
    <div></div></if>

  <div></div></if>
<else
  ><state.renderComponentTag
    ...(state.renderComponentProps)
  ></state.renderComponentTag
></else>"
`;

exports[`Marko > jsx > Javascript Test > renderContentExample 1`] = `
"import {
  sendComponentsToVisualEditor,
  dispatchNewContentToVisualEditor,
  trackClick,
} from \\"@dummy/injection-js\\";
import BuilderContext from \\"@dummy/context.marko\\";
import RenderBlocks from \\"@dummy/RenderBlocks.lite.tsx\\";

class {
  onMount() {
    sendComponentsToVisualEditor(this.input.customComponents);
  }

  onRender() {
    dispatchNewContentToVisualEditor(this.input.content);
  }
}

style { 
  .div-c8eb54c0 {
    display: flex;
    flex-direction: columns;
  }
}
<div onclick=(event => trackClick(input.content.id))>
  <div></div>
  <RenderBlocks blocks=(input.content.blocks)></RenderBlocks>
  <div></div>
</div>"
`;

exports[`Marko > jsx > Javascript Test > rootFragmentMultiNode 1`] = `
"class {}

<div></div>
<if(input.link)>
  <div></div>
  <a
    ><div></div>
    <div></div>
    <div></div></a>
  <div></div></if>

<div></div>
<if(!input.link)>
  <div></div>
  <button>
    <div></div>
    <div></div>
    <div></div>
  </button>
  <div></div></if>

<div></div>"
`;

exports[`Marko > jsx > Javascript Test > rootShow 1`] = `
"class {}

<if(input.foo === 'bar')>
  <div></div>
  <div><div></div></div>
  <div></div></if>
<else
  ><div><div></div></div></else>"
`;

exports[`Marko > jsx > Javascript Test > self-referencing component 1`] = `
"class {}

<div>
  <div></div>
  <div></div>
  <div></div>
  <if(input.name === 'Batman')>
    <div></div>
    <MyComponent name=\\"Bruce Wayne\\"></MyComponent>
    <div></div></if>

  <div></div>
</div>"
`;

exports[`Marko > jsx > Javascript Test > self-referencing component with children 1`] = `
"class {}

<div>
  <div></div>
  <div></div>
  <div></div>
  <div></div>
  <div></div>
  <if(input.name === 'Batman')>
    <div></div>
    <MyComponent name=\\"Bruce\\"
      ><div></div>
      <div><div></div></div>
      <div></div></MyComponent>
    <div></div></if>

  <div></div>
</div>"
`;

exports[`Marko > jsx > Javascript Test > showWithFor 1`] = `
"class {}

<if(input.conditionA)>
  <div></div>
  <for|item,idx| of=(input.items)>
    <div><div></div></div>
  </for>
  <div></div></if>
<else
  ><div><div></div></div></else>"
`;

exports[`Marko > jsx > Javascript Test > spreadAttrs 1`] = `
"class {}

<input />"
`;

exports[`Marko > jsx > Javascript Test > spreadNestedProps 1`] = `
"class {}

<input />"
`;

exports[`Marko > jsx > Javascript Test > spreadProps 1`] = `
"class {}

<input />"
`;

exports[`Marko > jsx > Javascript Test > styleClassAndCss 1`] = `
"class {}

style { 
  .div-644d49ee {
    display: flex;
    flex-direction: column;
    align-items: stretch;
  }
}
<div></div>"
`;

exports[`Marko > jsx > Javascript Test > subComponent 1`] = `
"import Foo from \\"./foo-sub-component.marko\\";

class {}

<Foo></Foo>"
`;

exports[`Marko > jsx > Javascript Test > svgComponent 1`] = `
"class {}

<svg viewbox=('0 0 ' + 42 + ' ' + 42)>
  <div></div>
  <defs>
    <div></div>
    <filter filterunits=\\"userSpaceOnUse\\">
      <div></div>
      <feFlood></feFlood>
      <div></div>
      <feBlend></feBlend>
      <div></div>
      <feGaussianBlur stddeviation=(7)></feGaussianBlur>
      <div></div>
    </filter>
    <div></div>
  </defs>
  <div></div>
</svg>"
`;

exports[`Marko > jsx > Javascript Test > typeDependency 1`] = `
"class {}

<div><div></div></div>"
`;

exports[`Marko > jsx > Javascript Test > use-style 1`] = `
"class {}

style { 
  button {
    background: blue;
    color: white;
    font-size: 12px;
    outline: 1px solid black;
  }
}
<button><div></div></button>"
`;

exports[`Marko > jsx > Javascript Test > use-style-and-css 1`] = `
"class {}

style { 
  .button-0b7811fa {
    background: blue;
    color: white;
  }

  button {
    font-size: 12px;
    outline: 1px solid black;
  }
}
<button><div></div></button>"
`;

exports[`Marko > jsx > Javascript Test > use-style-outside-component 1`] = `
"class {}

style { 
  button {
    background: blue;
    color: white;
    font-size: 12px;
    outline: 1px solid black;
  }
}
<button><div></div></button>"
`;

exports[`Marko > jsx > Remove Internal mitosis package 1`] = `
"class {
  onCreate() {
    this.state = { name: \\"PatrickJS\\" };
  }
}

<div>
  <div></div>
  <div></div>
  <div></div>
</div>"
`;

exports[`Marko > jsx > Typescript Test > AdvancedRef 1`] = `
"class {
  onBlur = function onBlur() {
    // Maintain focus
    this.inputRef.focus();
  };
  lowerCaseName = function lowerCaseName() {
    return this.state.name.toLowerCase();
  };

  onCreate(input) {
    this.state = { name: \\"PatrickJS\\" };
  }

  get inputRef() {
    return this.getEl(\\"inputRef\\");
  }
  get inputNoArgRef() {
    return this.getEl(\\"inputNoArgRef\\");
  }

  onRender() {
    console.log(\\"Received an update\\");
  }
}

style { 
  .input-790d468a {
    color: red;
  }
}
<div>
  <div></div>
  <if(input.showInput)>
    <div></div>
    <input
      onblur=(event => component.onBlur())
      onchange=(event => state.name = event.target.value) />
    <div></div>
    <label><div></div></label>
    <div></div>
    <select name=\\"cars\\">
      <div></div>
      <option><div></div></option>
      <div></div>
      <option><div></div></option>
      <div></div>
    </select>
    <div></div></if>

  <div></div>
  <div></div>
  <div></div>
</div>"
`;

exports[`Marko > jsx > Typescript Test > Basic 1`] = `
"export const DEFAULT_VALUES = {
  name: \\"Steve\\",
};

class {
  underscore_fn_name() {
    return \\"bar\\";
  }

  onCreate() {
    this.state = { name: \\"Steve\\", age: 1, sports: [\\"\\"] };
  }
}

style { 
  .div-48c79144 {
    padding: 10px;
  }
}
<div>
  <div></div>
  <input onchange=(myEvent => state.name = myEvent.target.value) />
  <div></div>
</div>"
`;

exports[`Marko > jsx > Typescript Test > Basic 2`] = `
"class {
  onCreate() {
    this.state = { name: \\"PatrickJS\\", names: [\\"Steve\\", \\"PatrickJS\\"] };
  }
}

<div>
  <div></div>
  <for|person| of=(state.names)>
    <if(person === state.name)>
      <div></div>
      <input
        onchange=(event => {
  state.name = event.target.value + ' and ' + person;
}) />
      <div></div>
      <div></div>
      <div></div></if>
  </for>
  <div></div>
</div>"
`;

exports[`Marko > jsx > Typescript Test > Basic Context 1`] = `
"import { Injector, createInjector, MyService } from \\"@dummy/injection-js\\";

class {
  onChange = function onChange() {
    const change = myService.method(\\"change\\");
    console.log(change);
  };

  onCreate() {
    this.state = { name: \\"PatrickJS\\" };
  }

  onMount() {
    const bye = myService.method(\\"hi\\");
    console.log(bye);
  }
}

<div>
  <div></div>
  <div></div>
  <div></div>
  <input onchange=(event => component.onChange) />
  <div></div>
</div>"
`;

exports[`Marko > jsx > Typescript Test > Basic OnMount Update 1`] = `
"class {
  onCreate(input) {
    this.state = { name: \\"PatrickJS\\", names: [\\"Steve\\", \\"PatrickJS\\"] };
  }

  onMount() {
    this.state.name = \\"PatrickJS onMount\\" + this.input.bye;
  }
}

<div>
  <div></div>
  <div></div>
</div>"
`;

exports[`Marko > jsx > Typescript Test > Basic Outputs 1`] = `
"class {
  onCreate(input) {
    this.state = { name: \\"PatrickJS\\" };
  }

  onMount() {
    this.input.onMessage(this.state.name);
    this.input.onEvent(this.input.message);
  }
}

<div></div>"
`;

exports[`Marko > jsx > Typescript Test > Basic Outputs Meta 1`] = `
"class {
  onCreate(input) {
    this.state = { name: \\"PatrickJS\\" };
  }

  onMount() {
    this.input.onMessage(this.state.name);
    this.input.onEvent(this.input.message);
  }
}

<div></div>"
`;

exports[`Marko > jsx > Typescript Test > BasicAttribute 1`] = `
"class {}

<input />"
`;

exports[`Marko > jsx > Typescript Test > BasicBooleanAttribute 1`] = `
"import MyBooleanAttributeComponent from \\"./basic-boolean-attribute-component.raw\\";

class {}

<div>
  <div></div>
  <div></div>
  <div></div>
  <div></div>
  <div></div>
  <MyBooleanAttributeComponent toggle=(true)></MyBooleanAttributeComponent>
  <div></div>
  <MyBooleanAttributeComponent toggle=(true)></MyBooleanAttributeComponent>
  <div></div>
  <MyBooleanAttributeComponent list=(null)></MyBooleanAttributeComponent>
  <div></div>
</div>"
`;

exports[`Marko > jsx > Typescript Test > BasicChildComponent 1`] = `
"import MyBasicComponent from \\"./basic.raw\\";
import MyBasicOnMountUpdateComponent from \\"./basic-onMount-update.raw\\";

class {
  onCreate() {
    this.state = { name: \\"Steve\\", dev: \\"PatrickJS\\" };
  }
}

<div>
  <div></div>
  <MyBasicComponent id=(state.dev)></MyBasicComponent>
  <div></div>
  <div>
    <div></div>
    <MyBasicOnMountUpdateComponent
      hi=(state.name)
      bye=(state.dev)
    ></MyBasicOnMountUpdateComponent>
    <div></div>
  </div>
  <div></div>
</div>"
`;

exports[`Marko > jsx > Typescript Test > BasicFor 1`] = `
"class {
  onCreate() {
    this.state = { name: \\"PatrickJS\\", names: [\\"Steve\\", \\"PatrickJS\\"] };
  }

  onMount() {
    console.log(\\"onMount code\\");
  }
}

<div>
  <div></div>
  <for|person| of=(state.names)>
    <div></div>
    <input
      onchange=(event => {
  state.name = event.target.value + ' and ' + person;
})
    />
    <div></div>
    <div></div>
    <div></div>
  </for>
  <div></div>
</div>"
`;

exports[`Marko > jsx > Typescript Test > BasicRef 1`] = `
"class {
  onBlur = function onBlur() {
    // Maintain focus
    this.inputRef.focus();
  };
  lowerCaseName = function lowerCaseName() {
    return this.state.name.toLowerCase();
  };

  onCreate(input) {
    this.state = { name: \\"PatrickJS\\" };
  }

  get inputRef() {
    return this.getEl(\\"inputRef\\");
  }
  get inputNoArgRef() {
    return this.getEl(\\"inputNoArgRef\\");
  }
}

style { 
  .input-cbb647ea {
    color: red;
  }
}
<div>
  <div></div>
  <if(input.showInput)>
    <div></div>
    <input
      onblur=(event => component.onBlur())
      onchange=(event => state.name = event.target.value) />
    <div></div>
    <label><div></div></label>
    <div></div>
    <select name=\\"cars\\">
      <div></div>
      <option><div></div></option>
      <div></div>
      <option><div></div></option>
      <div></div>
    </select>
    <div></div></if>

  <div></div>
  <div></div>
  <div></div>
</div>"
`;

exports[`Marko > jsx > Typescript Test > BasicRefAssignment 1`] = `
"class {
  handlerClick = function handlerClick(event) {
    event.preventDefault();
    console.log(\\"current value\\", this.holdValueRef);
    this.holdValueRef = this.holdValueRef + \\"JS\\";
  };
}

<div>
  <div></div>
  <button onclick=(evt => component.handlerClick(evt))><div></div></button>
  <div></div>
</div>"
`;

exports[`Marko > jsx > Typescript Test > BasicRefPrevious 1`] = `
"export function usePrevious<T>(value: T) {
  // The ref object is a generic container whose current property is mutable ...
  // ... and can hold any value, similar to an instance property on a class
  let ref = useRef<T>(null); // Store current value in ref

  onUpdate(() => {
    ref = value;
  }, [value]); // Only re-run if value changes
  // Return previous value (happens before update in useEffect above)

  return ref;
}

class {
  onCreate() {
    this.state = { count: 0 };
  }

  onRender() {
    this.prevCount = this.state.count;
  }
}

<div>
  <div></div>
  <h1>
    <div></div>
    <div></div>
    <div></div>
    <div></div>
    <div></div>
  </h1>
  <div></div>
  <button onclick=(event => state.count += 1)><div></div></button>
  <div></div>
</div>"
`;

exports[`Marko > jsx > Typescript Test > Button 1`] = `
"class {}

<div>
  <div></div>
  <if(input.link)>
    <div></div>
    <a
      ><div></div>
      <div></div>
      <div></div></a>
    <div></div></if>

  <div></div>
  <if(!input.link)>
    <div></div>
    <button>
      <div></div>
      <div></div>
      <div></div>
    </button>
    <div></div></if>

  <div></div>
</div>"
`;

exports[`Marko > jsx > Typescript Test > Columns 1`] = `
"class {
  getColumns() {
    return this.input.columns || [];
  }
  getGutterSize() {
    return typeof this.input.space === \\"number\\" ? this.input.space || 0 : 20;
  }
  getWidth(index) {
    const columns = this.getColumns();
    return (columns[index] && columns[index].width) || 100 / columns.length;
  }
  getColumnCssWidth(index) {
    const columns = this.getColumns();
    const gutterSize = this.getGutterSize();
    const subtractWidth = (gutterSize * (columns.length - 1)) / columns.length;
    return \`calc(\${this.getWidth(index)}% - \${subtractWidth}px)\`;
  }
}

style { 
  .div-f5d75200 {
    display: flex;
    flex-direction: column;
    align-items: stretch;
    line-height: normal;
  }
  @media (max-width: 999px) {
    .div-f5d75200 {
      flex-direction: row;
    }
  }
  @media (max-width: 639px) {
    .div-f5d75200 {
      flex-direction: row-reverse;
    }
  }
  .div-f5d75200-2 {
    flex-grow: 1;
  }
}
<div>
  <div></div>
  <for|column,index| of=(input.columns)>
    <div>
      <div></div>
      <div></div>
      <div></div>
      <div></div>
      <div></div>
    </div>
  </for>
  <div></div>
</div>"
`;

exports[`Marko > jsx > Typescript Test > ContentSlotHtml 1`] = `
"class {}

<div>
  <div></div>
  <slot name=(input.slotTesting)></slot>
  <div></div>
  <div>
    <div></div>
    <hr />
    <div></div>
  </div>
  <div></div>
  <div>
    <div></div>
    <slot></slot>
    <div></div>
  </div>
  <div></div>
</div>"
`;

exports[`Marko > jsx > Typescript Test > ContentSlotJSX 1`] = `
"class {
  get cls() {
    return this.input.slotContent && this.input.children
      ? \`\${this.state.name}-content\`
      : \\"\\";
  }
  show() {
    this.input.slotContent ? 1 : \\"\\";
  }

  onCreate(input) {
    this.state = { name: \\"king\\", showContent: false };
  }
}

<if(input.slotReference)>
  <div></div>
  <div
    name=(input.slotContent ? 'name1' : 'name2')
    onclick=(event => component.show())
  >
    <div></div>
    <if(state.showContent && input.slotContent)>
      <div></div>
      <slot name=\\"content\\"><div></div></slot>
      <div></div></if>

    <div></div>
    <div>
      <div></div>
      <hr />
      <div></div>
    </div>
    <div></div>
    <div><div></div></div>
    <div></div>
  </div>
  <div></div></if>"
`;

exports[`Marko > jsx > Typescript Test > CustomCode 1`] = `
"class {
  findAndRunScripts() {
    // TODO: Move this function to standalone one in '@builder.io/utils'
    if (this.elem && typeof window !== \\"undefined\\") {
      /** @type {HTMLScriptElement[]} */
      const scripts = this.elem.getElementsByTagName(\\"script\\");

      for (let i = 0; i < scripts.length; i++) {
        const script = scripts[i];

        if (script.src) {
          if (this.state.scriptsInserted.includes(script.src)) {
            continue;
          }

          this.state.scriptsInserted.push(script.src);
          const newScript = document.createElement(\\"script\\");
          newScript.async = true;
          newScript.src = script.src;
          document.head.appendChild(newScript);
        } else if (
          !script.type ||
          [
            \\"text/javascript\\",
            \\"application/javascript\\",
            \\"application/ecmascript\\",
          ].includes(script.type)
        ) {
          if (this.state.scriptsRun.includes(script.innerText)) {
            continue;
          }

          try {
            this.state.scriptsRun.push(script.innerText);
            new Function(script.innerText)();
          } catch (error) {
            console.warn(\\"\`CustomCode\`: Error running script:\\", error);
          }
        }
      }
    }
  }

  onCreate(input) {
    this.state = { scriptsInserted: [], scriptsRun: [] };
  }

  get elem() {
    return this.getEl(\\"elem\\");
  }

  onMount() {
    this.findAndRunScripts();
  }
}

<div innerhtml=(input.code)></div>"
`;

exports[`Marko > jsx > Typescript Test > Embed 1`] = `
"class {
  findAndRunScripts() {
    // TODO: Move this function to standalone one in '@builder.io/utils'
    if (this.elem && typeof window !== \\"undefined\\") {
      /** @type {HTMLScriptElement[]} */
      const scripts = this.elem.getElementsByTagName(\\"script\\");

      for (let i = 0; i < scripts.length; i++) {
        const script = scripts[i];

        if (script.src) {
          if (this.state.scriptsInserted.includes(script.src)) {
            continue;
          }

          this.state.scriptsInserted.push(script.src);
          const newScript = document.createElement(\\"script\\");
          newScript.async = true;
          newScript.src = script.src;
          document.head.appendChild(newScript);
        } else if (
          !script.type ||
          [
            \\"text/javascript\\",
            \\"application/javascript\\",
            \\"application/ecmascript\\",
          ].includes(script.type)
        ) {
          if (this.state.scriptsRun.includes(script.innerText)) {
            continue;
          }

          try {
            this.state.scriptsRun.push(script.innerText);
            new Function(script.innerText)();
          } catch (error) {
            console.warn(\\"\`CustomCode\`: Error running script:\\", error);
          }
        }
      }
    }
  }

  onCreate(input) {
    this.state = { scriptsInserted: [], scriptsRun: [] };
  }

  get elem() {
    return this.getEl(\\"elem\\");
  }

  onMount() {
    this.findAndRunScripts();
  }
}

<div innerhtml=(input.code)></div>"
`;

exports[`Marko > jsx > Typescript Test > Form 1`] = `
"import { BuilderBlock as BuilderBlockComponent } from \\"@fake\\";
import { Builder, builder } from \\"@builder.io/sdk\\";
import { BuilderBlocks } from \\"@fake\\";
import { set } from \\"@fake\\";
import { get } from \\"@fake\\";

class {
  get submissionState() {
    return (
      (Builder.isEditing && this.input.previewState) || this.state.formState
    );
  }
  onSubmit(event) {
    const sendWithJs =
      this.input.sendWithJs || this.input.sendSubmissionsTo === \\"email\\";

    if (this.input.sendSubmissionsTo === \\"zapier\\") {
      event.preventDefault();
    } else if (sendWithJs) {
      if (!(this.input.action || this.input.sendSubmissionsTo === \\"email\\")) {
        event.preventDefault();
        return;
      }

      event.preventDefault();
      const el = event.currentTarget;
      const headers = this.input.customHeaders || {};
      let body;
      const formData = new FormData(el); // TODO: maybe support null

      const formPairs = Array.from(
        event.currentTarget.querySelectorAll(\\"input,select,textarea\\")
      )
        .filter((el) => !!el.name)
        .map((el) => {
          let value;
          const key = el.name;

          if (el instanceof HTMLInputElement) {
            if (el.type === \\"radio\\") {
              if (el.checked) {
                value = el.name;
                return {
                  key,
                  value,
                };
              }
            } else if (el.type === \\"checkbox\\") {
              value = el.checked;
            } else if (el.type === \\"number\\" || el.type === \\"range\\") {
              const num = el.valueAsNumber;

              if (!isNaN(num)) {
                value = num;
              }
            } else if (el.type === \\"file\\") {
              // TODO: one vs multiple files
              value = el.files;
            } else {
              value = el.value;
            }
          } else {
            value = el.value;
          }

          return {
            key,
            value,
          };
        });
      let contentType = this.input.contentType;

      if (this.input.sendSubmissionsTo === \\"email\\") {
        contentType = \\"multipart/form-data\\";
      }

      Array.from(formPairs).forEach(({ value }) => {
        if (
          value instanceof File ||
          (Array.isArray(value) && value[0] instanceof File) ||
          value instanceof FileList
        ) {
          contentType = \\"multipart/form-data\\";
        }
      }); // TODO: send as urlEncoded or multipart by default
      // because of ease of use and reliability in browser API
      // for encoding the form?

      if (contentType !== \\"application/json\\") {
        body = formData;
      } else {
        // Json
        const json = {};
        Array.from(formPairs).forEach(({ value, key }) => {
          set(json, key, value);
        });
        body = JSON.stringify(json);
      }

      if (contentType && contentType !== \\"multipart/form-data\\") {
        if (
          /* Zapier doesn't allow content-type header to be sent from browsers */
          !(sendWithJs && this.input.action?.includes(\\"zapier.com\\"))
        ) {
          headers[\\"content-type\\"] = contentType;
        }
      }

      const presubmitEvent = new CustomEvent(\\"presubmit\\", {
        detail: {
          body,
        },
      });

      if (this.formRef) {
        this.formRef.dispatchEvent(presubmitEvent);

        if (presubmitEvent.defaultPrevented) {
          return;
        }
      }

      this.state.formState = \\"sending\\";
      const formUrl = \`\${
        builder.env === \\"dev\\" ? \\"http://localhost:5000\\" : \\"https://builder.io\\"
      }/api/v1/form-submit?apiKey=\${builder.apiKey}&to=\${btoa(
        this.input.sendSubmissionsToEmail || \\"\\"
      )}&name=\${encodeURIComponent(this.input.name || \\"\\")}\`;
      fetch(
        this.input.sendSubmissionsTo === \\"email\\" ? formUrl : this.input.action,
        /* TODO: throw error if no action URL */
        {
          body,
          headers,
          method: this.input.method || \\"post\\",
        }
      ).then(
        async (res) => {
          let body;
          const contentType = res.headers.get(\\"content-type\\");

          if (contentType && contentType.indexOf(\\"application/json\\") !== -1) {
            body = await res.json();
          } else {
            body = await res.text();
          }

          if (!res.ok && this.input.errorMessagePath) {
            /* TODO: allow supplying an error formatter function */
            let message = get(body, this.input.errorMessagePath);

            if (message) {
              if (typeof message !== \\"string\\") {
                /* TODO: ideally convert json to yaml so it woul dbe like
            error: - email has been taken */
                message = JSON.stringify(message);
              }

              this.state.formErrorMessage = message;
            }
          }

          this.state.responseData = body;
          this.state.formState = res.ok ? \\"success\\" : \\"error\\";

          if (res.ok) {
            const submitSuccessEvent = new CustomEvent(\\"submit:success\\", {
              detail: {
                res,
                body,
              },
            });

            if (this.formRef) {
              this.formRef.dispatchEvent(submitSuccessEvent);

              if (submitSuccessEvent.defaultPrevented) {
                return;
              }
              /* TODO: option to turn this on/off? */

              if (this.input.resetFormOnSubmit !== false) {
                this.formRef.reset();
              }
            }
            /* TODO: client side route event first that can be preventDefaulted */

            if (this.input.successUrl) {
              if (this.formRef) {
                const event = new CustomEvent(\\"route\\", {
                  detail: {
                    url: this.input.successUrl,
                  },
                });
                this.formRef.dispatchEvent(event);

                if (!event.defaultPrevented) {
                  location.href = this.input.successUrl;
                }
              } else {
                location.href = this.input.successUrl;
              }
            }
          }
        },
        (err) => {
          const submitErrorEvent = new CustomEvent(\\"submit:error\\", {
            detail: {
              error: err,
            },
          });

          if (this.formRef) {
            this.formRef.dispatchEvent(submitErrorEvent);

            if (submitErrorEvent.defaultPrevented) {
              return;
            }
          }

          this.state.responseData = err;
          this.state.formState = \\"error\\";
        }
      );
    }
  }

  onCreate(input) {
    this.state = {
      formState: \\"unsubmitted\\",
      responseData: null,
      formErrorMessage: \\"\\",
    };
  }

  get formRef() {
    return this.getEl(\\"formRef\\");
  }
}

style { 
  .pre-8989dad4 {
    padding: 10px;
    color: red;
    text-align: center;
  }
}
<form name=(input.name) onsubmit=(event => component.onSubmit(event))>
  <div></div>
  <if(input.builderBlock && input.builderBlock.children)>
    <div></div>
    <for|block,index| of=(input.builderBlock?.children)>
      <BuilderBlockComponent
        key=(block.id)
        block=(block)
        index=(index)
      ></BuilderBlockComponent>
    </for>
    <div></div></if>

  <div></div>
  <if(component.submissionState === 'error')>
    <div></div>
    <BuilderBlocks
      dataPath=\\"errorMessage\\"
      blocks=(input.errorMessage)
    ></BuilderBlocks>
    <div></div></if>

  <div></div>
  <if(component.submissionState === 'sending')>
    <div></div>
    <BuilderBlocks
      dataPath=\\"sendingMessage\\"
      blocks=(input.sendingMessage)
    ></BuilderBlocks>
    <div></div></if>

  <div></div>
  <if(component.submissionState === 'error' && state.responseData)>
    <div></div>
    <pre><div ></div>
<div ></div>
<div ></div></pre>
    <div></div></if>

  <div></div>
  <if(component.submissionState === 'success')>
    <div></div>
    <BuilderBlocks
      dataPath=\\"successMessage\\"
      blocks=(input.successMessage)
    ></BuilderBlocks>
    <div></div></if>

  <div></div>
</form>"
`;

exports[`Marko > jsx > Typescript Test > Image 1`] = `
"class {
  setLoaded() {
    this.state.imageLoaded = true;
  }
  useLazyLoading() {
    // TODO: Add more checks here, like testing for real web browsers
    return !!this.input.lazy && isBrowser();
  }
  isBrowser = function isBrowser() {
    return (
      typeof window !== \\"undefined\\" && window.navigator.product != \\"ReactNative\\"
    );
  };

  onCreate(input) {
    this.state = { scrollListener: null, imageLoaded: false, load: false };
  }

  get pictureRef() {
    return this.getEl(\\"pictureRef\\");
  }

  onMount() {
    if (this.useLazyLoading()) {
      // throttled scroll capture listener
      const listener = () => {
        if (this.pictureRef) {
          const rect = this.pictureRef.getBoundingClientRect();
          const buffer = window.innerHeight / 2;

          if (rect.top < window.innerHeight + buffer) {
            setLoad(true);
            this.state.scrollListener = null;
            window.removeEventListener(\\"scroll\\", listener);
          }
        }
      };

      this.state.scrollListener = listener;
      window.addEventListener(\\"scroll\\", listener, {
        capture: true,
        passive: true,
      });
      listener();
    }
  }
  onDestroy() {
    if (this.state.scrollListener) {
      window.removeEventListener(\\"scroll\\", this.state.scrollListener);
    }
  }
}

style { 
  .img-45432c52 {
    opacity: 1;
    transition: opacity 0.2s ease-in-out;
    object-fit: cover;
    object-position: center;
  }
}
<div>
  <div></div>
  <picture
    ><div></div>
    <if(!component.useLazyLoading() || state.load)>
      <div></div>
      <img
        aria-role=(input.altText ? 'presentation' : undefined)
        onload=(event => component.setLoaded()) />
      <div></div></if>

    <div></div>
    <source />
    <div></div></picture>
  <div></div>
  <div></div>
  <div></div>
</div>"
`;

exports[`Marko > jsx > Typescript Test > Image State 1`] = `
"class {
  onCreate() {
    this.state = { canShow: true, images: [\\"http://example.com/qwik.png\\"] };
  }
}

<div>
  <div></div>
  <for|item,itemIndex| of=(state.images)>
    <div></div>
    <img />
    <div></div>
  </for>
  <div></div>
</div>"
`;

exports[`Marko > jsx > Typescript Test > Img 1`] = `
"import { Builder } from \\"@builder.io/sdk\\";

class {}

<img />"
`;

exports[`Marko > jsx > Typescript Test > Input 1`] = `
"import { Builder } from \\"@builder.io/sdk\\";

class {}

<input name=(input.name) defaultvalue=(input.defaultValue) />"
`;

exports[`Marko > jsx > Typescript Test > RawText 1`] = `
"class {}

<span innerhtml=(input.text || '')></span>"
`;

exports[`Marko > jsx > Typescript Test > Section 1`] = `
"class {}

<section>
  <div></div>
  <div></div>
  <div></div>
</section>"
`;

exports[`Marko > jsx > Typescript Test > Section 2`] = `
"class {
  onCreate() {
    this.state = { max: 42, items: [42] };
  }
}

<if(state.max)>
  <div></div>
  <for|item| of=(state.items)>
    <section>
      <div></div>
      <div></div>
      <div></div>
    </section>
  </for>
  <div></div></if>"
`;

exports[`Marko > jsx > Typescript Test > Select 1`] = `
"import { Builder } from \\"@builder.io/sdk\\";

class {}

<select name=(input.name) defaultvalue=(input.defaultValue)>
  <div></div>
  <for|option,index| of=(input.options)>
    <option data-index=(index)>
      <div></div>
      <div></div>
      <div></div>
    </option>
  </for>
  <div></div>
</select>"
`;

exports[`Marko > jsx > Typescript Test > SlotDefault 1`] = `
"class {}

<div>
  <div></div>
  <slot
    ><div></div>
    <div><div></div></div>
    <div></div></slot>
  <div></div>
</div>"
`;

exports[`Marko > jsx > Typescript Test > SlotHtml 1`] = `
"import ContentSlotCode from \\"./content-slot-jsx.raw\\";

class {}

<div>
  <div></div>
  <ContentSlotCode
    ><div></div>
    <slot testing=(<div>Hello</div>)></slot>
    <div></div></ContentSlotCode>
  <div></div>
</div>"
`;

exports[`Marko > jsx > Typescript Test > SlotJsx 1`] = `
"import ContentSlotCode from \\"./content-slot-jsx.raw\\";

class {}

<div>
  <div></div>
  <ContentSlotCode slotTesting=(<div>Hello</div>)></ContentSlotCode>
  <div></div>
</div>"
`;

exports[`Marko > jsx > Typescript Test > SlotNamed 1`] = `
"class {}

<div>
  <div></div>
  <slot name=\\"top\\"></slot>
  <div></div>
  <slot name=\\"left\\"><div></div></slot>
  <div></div>
  <slot><div></div></slot>
  <div></div>
</div>"
`;

exports[`Marko > jsx > Typescript Test > Stamped.io 1`] = `
"import { kebabCase } from \\"lodash\\";
import { snakeCase } from \\"lodash\\";

class {
  kebabCaseValue() {
    return kebabCase(\\"testThat\\");
  }
  snakeCaseValue() {
    return snakeCase(\\"testThis\\");
  }

  onCreate(input) {
    this.state = { reviews: [], name: \\"test\\", showReviewPrompt: false };
  }

  onMount() {
    fetch(
      \`https://stamped.io/api/widget/reviews?storeUrl=builder-io.myshopify.com&apiKey=\${
        this.input.apiKey || \\"pubkey-8bbDq7W6w4sB3OWeM1HUy2s47702hM\\"
      }&productId=\${this.input.productId || \\"2410511106127\\"}\`
    )
      .then((res) => res.json())
      .then((data) => {
        this.state.reviews = data.data;
      });
  }
}

style { 
  .input-c3470f28 {
    display: block;
  }
  .textarea-c3470f28 {
    display: block;
  }
  .button-c3470f28 {
    display: block;
  }
  .review-c3470f28 {
    margin: 10px;
    padding: 10px;
    background: white;
    display: flex;
    border-radius: 5px;
    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
  }
  .img-c3470f28 {
    height: 30px;
    width: 30px;
    margin-right: 10px;
  }
}
<div data-user=(state.name)>
  <div></div>
  <button onclick=(event => state.showReviewPrompt = true)>
    <div></div>
  </button>
  <div></div>
  <if(state.showReviewPrompt || 'asdf')>
    <div></div>
    <input />
    <div></div>
    <input />
    <div></div>
    <textarea></textarea>
    <div></div>
    <button
      onclick=(event => {
  event.preventDefault();
  state.showReviewPrompt = false;
})
    >
      <div></div>
    </button>
    <div></div></if>

  <div></div>
  <for|review,index| of=(state.reviews)>
    <div>
      <div></div>
      <img />
      <div></div>
      <div>
        <div></div>
        <div>
          <div></div>
          <div></div>
        </div>
        <div></div>
        <div><div></div></div>
        <div></div>
        <div><div></div></div>
        <div></div>
      </div>
      <div></div>
    </div>
  </for>
  <div></div>
</div>"
`;

exports[`Marko > jsx > Typescript Test > Submit 1`] = `
"class {}

<button>
  <div></div>
  <div></div>
  <div></div>
</button>"
`;

exports[`Marko > jsx > Typescript Test > Text 1`] = `
"import { Builder } from \\"@builder.io/sdk\\";

class {
  onCreate(input) {
    this.state = { name: \\"Decadef20\\" };
  }
}

<div
  data-name=({
  test: state.name || 'any name'
})
  contenteditable=(allowEditingText || undefined)
  innerhtml=(input.text || input.content || state.name || '<p class=\\"text-lg\\">my name</p>')
></div>"
`;

exports[`Marko > jsx > Typescript Test > Textarea 1`] = `
"class {}

<textarea name=(input.name) defaultvalue=(input.defaultValue)></textarea>"
`;

exports[`Marko > jsx > Typescript Test > Video 1`] = `
"class {}

<video></video>"
`;

exports[`Marko > jsx > Typescript Test > arrowFunctionInUseStore 1`] = `
"class {
  setName(value) {
    this.state.name = value;
  }
  updateNameWithArrowFn(value) {
    this.state.name = value;
  }

  onCreate() {
    this.state = { name: \\"steve\\" };
  }
}

<div>
  <div></div>
  <div></div>
</div>"
`;

exports[`Marko > jsx > Typescript Test > basicForwardRef 1`] = `
"class {
  onCreate() {
    this.state = { name: \\"PatrickJS\\" };
  }

  get propsInputRef() {
    return this.getEl(\\"propsInputRef\\");
  }
}

style { 
  .input-014e706f {
    color: red;
  }
}
<div>
  <div></div>
  <input onchange=(event => state.name = event.target.value) />
  <div></div>
</div>"
`;

exports[`Marko > jsx > Typescript Test > basicForwardRefMetadata 1`] = `
"class {
  onCreate() {
    this.state = { name: \\"PatrickJS\\" };
  }

  get propsInputRef() {
    return this.getEl(\\"propsInputRef\\");
  }
}

style { 
  .input-53a59b24 {
    color: red;
  }
}
<div>
  <div></div>
  <input onchange=(event => state.name = event.target.value) />
  <div></div>
</div>"
`;

exports[`Marko > jsx > Typescript Test > basicOnUpdateReturn 1`] = `
"class {
  onCreate() {
    this.state = { name: \\"PatrickJS\\" };
  }

  onRender() {
    const controller = new AbortController();
    const signal = controller.signal;
    fetch(\\"https://patrickjs.com/api/resource.json\\", {
      signal,
    })
      .then((response) => response.json())
      .then((data) => {
        this.state.name = data.name;
      });
    return () => {
      if (!signal.aborted) {
        controller.abort();
      }
    };
  }
}

<div>
  <div></div>
  <div></div>
</div>"
`;

exports[`Marko > jsx > Typescript Test > camelCasedAttributes 1`] = `
"import React from \\"@builder.io/react\\";

class {
  onCreate() {
    this.state = { name: \\"Steve\\" };
  }
}

<div>
  <div></div>
  <img srcset=\\"http://example.com\\" />
  <div></div>
</div>"
`;

exports[`Marko > jsx > Typescript Test > class + ClassName + css 1`] = `
"class {}

style { 
  .div-240d4a4d {
    padding: 10px;
  }
}
<div><div></div></div>"
`;

exports[`Marko > jsx > Typescript Test > class + css 1`] = `
"class {}

style { 
  .div-210be817 {
    padding: 10px;
  }
}
<div><div></div></div>"
`;

exports[`Marko > jsx > Typescript Test > className + css 1`] = `
"class {}

style { 
  .div-210be817 {
    padding: 10px;
  }
}
<div><div></div></div>"
`;

exports[`Marko > jsx > Typescript Test > className 1`] = `
"class {
  onCreate() {
    this.state = { bindings: \\"a binding\\" };
  }
}

<div>
  <div></div>
  <div></div>
  <div><div></div></div>
  <div></div>
  <div></div>
  <div><div></div></div>
  <div></div>
</div>"
`;

exports[`Marko > jsx > Typescript Test > classState 1`] = `
"class {
  onCreate() {
    this.state = {
      classState: \\"testClassName\\",
      styleState: {
        color: \\"red\\",
      },
    };
  }
}

style { 
  .div-52624371 {
    padding: 10px;
  }
}
<div><div></div></div>"
`;

exports[`Marko > jsx > Typescript Test > componentWithContext 1`] = `
"import Context1 from \\"@dummy/1\\";
import Context2 from \\"@dummy/2\\";

class {}

<div></div>
<div></div>
<div></div>"
`;

exports[`Marko > jsx > Typescript Test > componentWithContextMultiRoot 1`] = `
"import Context1 from \\"@dummy/1\\";
import Context2 from \\"@dummy/2\\";

class {}

<div></div>
<div></div>
<div></div>
<div><div></div></div>
<div></div>"
`;

exports[`Marko > jsx > Typescript Test > contentState 1`] = `
"import BuilderContext from \\"@dummy/context.marko\\";

class {}

<div><div></div></div>"
`;

exports[`Marko > jsx > Typescript Test > defaultProps 1`] = `
"class {}

<div>
  <div></div>
  <if(input.link)>
    <div></div>
    <a
      ><div></div>
      <div></div>
      <div></div></a>
    <div></div></if>

  <div></div>
  <if(!input.link)>
    <div></div>
    <button onclick=(event => input.onClick(event))>
      <div></div>
      <div></div>
      <div></div>
    </button>
    <div></div></if>

  <div></div>
</div>"
`;

exports[`Marko > jsx > Typescript Test > defaultPropsOutsideComponent 1`] = `
"class {}

<div>
  <div></div>
  <if(input.link)>
    <div></div>
    <a
      ><div></div>
      <div></div>
      <div></div></a>
    <div></div></if>

  <div></div>
  <if(!input.link)>
    <div></div>
    <button onclick=(event => input.onClick(event))>
      <div></div>
      <div></div>
      <div></div>
    </button>
    <div></div></if>

  <div></div>
</div>"
`;

exports[`Marko > jsx > Typescript Test > defaultValsWithTypes 1`] = `
"const DEFAULT_VALUES: Props = {
  name: \\"Sami\\",
};

class {}

<div>
  <div></div>
  <div></div>
</div>"
`;

exports[`Marko > jsx > Typescript Test > expressionState 1`] = `
"class {
  onCreate(input) {
    this.state = {
      refToUse: !(input.componentRef instanceof Function)
        ? input.componentRef
        : null,
    };
  }
}

<div><div></div></div>"
`;

exports[`Marko > jsx > Typescript Test > import types 1`] = `
"import RenderBlock from \\"./builder-render-block.raw\\";

class {
  getRenderContentProps(block, index) {
    return {
      block: block,
      index: index,
    };
  }
}

<RenderBlock
  ...(state.getRenderContentProps(props.renderContentProps.block,
  0))
></RenderBlock>"
`;

exports[`Marko > jsx > Typescript Test > multipleOnUpdate 1`] = `
"class {
  onRender() {
    console.log(\\"Runs on every update/rerender\\");

    console.log(\\"Runs on every update/rerender as well\\");
  }
}

<div></div>"
`;

exports[`Marko > jsx > Typescript Test > multipleOnUpdateWithDeps 1`] = `
"class {
  onCreate() {
    this.state = { a: \\"a\\", b: \\"b\\", c: \\"c\\", d: \\"d\\" };
  }

  onRender() {
    console.log(\\"Runs when a or b changes\\", this.state.a, this.state.b);

    if (this.state.a === \\"a\\") {
      this.state.a = \\"b\\";
    }

    console.log(\\"Runs when c or d changes\\", this.state.c, this.state.d);

    if (this.state.a === \\"a\\") {
      this.state.a = \\"b\\";
    }
  }
}

<div></div>"
`;

exports[`Marko > jsx > Typescript Test > multipleSpreads 1`] = `
"class {
  onCreate() {
    this.state = {
      attrs: {
        hello: \\"world\\",
      },
    };
  }
}

<input />"
`;

exports[`Marko > jsx > Typescript Test > nestedShow 1`] = `
"class {}

<if(input.conditionA)>
  <div></div>
  <if(!input.conditionB)>
    <div></div>
    <div><div></div></div>
    <div></div></if>
  <else
    ><div><div></div></div></else>
  <div></div></if>
<else
  ><div><div></div></div></else>"
`;

exports[`Marko > jsx > Typescript Test > nestedStyles 1`] = `
"class {}

style { 
  .div-04b41bf9 {
    display: flex;
    foo: var(--bar);
  }
  @media (max-width: env(--mobile)) {
    .div-04b41bf9 {
      display: block;
    }
  }
  .div-04b41bf9:hover {
    display: flex;
  }
  .div-04b41bf9 .nested-selector {
    display: grid;
  }
}
<div><div></div></div>"
`;

exports[`Marko > jsx > Typescript Test > onInit & onMount 1`] = `
"class {
  onMount() {
    console.log(\\"onMount\\");
  }
}

<div></div>"
`;

exports[`Marko > jsx > Typescript Test > onInit 1`] = `
"export const defaultValues = {
  name: \\"PatrickJS\\",
};

class {
  onCreate(input) {
    this.state = { name: \\"\\" };
  }
}

<div>
  <div></div>
  <div></div>
</div>"
`;

exports[`Marko > jsx > Typescript Test > onMount 1`] = `
"class {
  onMount() {
    console.log(\\"Runs on mount\\");
  }
  onDestroy() {
    console.log(\\"Runs on unMount\\");
  }
}

<div></div>"
`;

exports[`Marko > jsx > Typescript Test > onUpdate 1`] = `
"class {
  onRender() {
    console.log(\\"Runs on every update/rerender\\");
  }
}

<div></div>"
`;

exports[`Marko > jsx > Typescript Test > onUpdateWithDeps 1`] = `
"class {
  onCreate(input) {
    this.state = { a: \\"a\\", b: \\"b\\" };
  }

  onRender() {
    console.log(
      \\"Runs when a, b or size changes\\",
      this.state.a,
      this.state.b,
      this.input.size
    );
  }
}

<div></div>"
`;

exports[`Marko > jsx > Typescript Test > preserveExportOrLocalStatement 1`] = `
"const b = 3;
const foo = () => {};
export const a = 3;
export const bar = () => {};
export function run<T>(value: T) {}

class {}

<div></div>"
`;

exports[`Marko > jsx > Typescript Test > preserveTyping 1`] = `
"class {}

<div>
  <div></div>
  <div></div>
</div>"
`;

exports[`Marko > jsx > Typescript Test > propsDestructure 1`] = `
"class {
  onCreate() {
    this.state = { name: \\"Decadef20\\" };
  }
}

<div>
  <div></div>
  <div></div>
  <div></div>
  <div></div>
  <div></div>
</div>"
`;

exports[`Marko > jsx > Typescript Test > propsInterface 1`] = `
"class {}

<div>
  <div></div>
  <div></div>
</div>"
`;

exports[`Marko > jsx > Typescript Test > propsType 1`] = `
"class {}

<div>
  <div></div>
  <div></div>
</div>"
`;

exports[`Marko > jsx > Typescript Test > referencingFunInsideHook 1`] = `
"class {
  foo = function foo(params) {};
  bar = function bar() {};
  zoo = function zoo() {
    const params = {
      cb: this.bar,
    };
  };

  onRender() {
    foo({
      someOption: bar,
    });
  }
}

<div></div>"
`;

exports[`Marko > jsx > Typescript Test > renderBlock 1`] = `
"import { getBlockActions } from \\"../../functions/get-block-actions.js\\";
import { getBlockComponentOptions } from \\"../../functions/get-block-component-options.js\\";
import { getBlockProperties } from \\"../../functions/get-block-properties.js\\";
import { getBlockTag } from \\"../../functions/get-block-tag.js\\";
import { getProcessedBlock } from \\"../../functions/get-processed-block.js\\";
import { evaluate } from \\"../../functions/evaluate.js\\";
import BlockStyles from \\"./block-styles.marko\\";
import { isEmptyHtmlElement } from \\"./render-block.helpers.js\\";
import RenderRepeatedBlock from \\"./render-repeated-block.marko\\";
import { TARGET } from \\"../../constants/target.js\\";
import { extractTextStyles } from \\"../../functions/extract-text-styles.js\\";
import RenderComponentWithContext from \\"./render-component-with-context.marko\\";
import RenderComponent from \\"./render-component.marko\\";
import { getReactNativeBlockStyles } from \\"../../functions/get-react-native-block-styles.js\\";

class {
  get component() {
    const componentName = getProcessedBlock({
      block: this.input.block,
      state: this.input.context.state,
      context: this.input.context.context,
      shouldEvaluateBindings: false,
    }).component?.name;

    if (!componentName) {
      return null;
    }

    const ref = this.input.context.registeredComponents[componentName];

    if (!ref) {
      // TODO: Public doc page with more info about this message
      console.warn(\`
         Could not find a registered component named \\"\${componentName}\\". 
         If you registered it, is the file that registered it imported by the file that needs to render it?\`);
      return undefined;
    } else {
      return ref;
    }
  }
  get tag() {
    return getBlockTag(this.useBlock);
  }
  get useBlock() {
    return this.repeatItemData
      ? this.input.block
      : getProcessedBlock({
          block: this.input.block,
          state: this.input.context.state,
          context: this.input.context.context,
          shouldEvaluateBindings: true,
        });
  }
  get actions() {
    return getBlockActions({
      block: this.useBlock,
      state: this.input.context.state,
      context: this.input.context.context,
    });
  }
  get attributes() {
    const blockProperties = getBlockProperties(this.useBlock);
    return {
      ...blockProperties,
      ...(TARGET === \\"reactNative\\"
        ? {
            style: getReactNativeBlockStyles({
              block: this.useBlock,
              context: this.input.context,
              blockStyles: blockProperties.style,
            }),
          }
        : {}),
    };
  }
  get shouldWrap() {
    return !this.component?.noWrap;
  }
  get renderComponentProps() {
    return {
      blockChildren: this.useChildren,
      componentRef: this.component?.component,
      componentOptions: {
        ...getBlockComponentOptions(this.useBlock),

        /**
         * These attributes are passed to the wrapper element when there is one. If \`noWrap\` is set to true, then
         * they are provided to the component itself directly.
         */
        ...(this.shouldWrap
          ? {}
          : {
              attributes: { ...this.attributes, ...this.actions },
            }),
        customBreakpoints: this.childrenContext?.content?.meta?.breakpoints,
      },
      context: this.childrenContext,
    };
  }
  get useChildren() {
    // TO-DO: When should \`canHaveChildren\` dictate rendering?
    // This is currently commented out because some Builder components (e.g. Box) do not have \`canHaveChildren: true\`,
    // but still receive and need to render children.
    // return state.componentInfo?.canHaveChildren ? state.useBlock.children : [];
    return this.useBlock.children ?? [];
  }
  get childrenWithoutParentComponent() {
    /**
     * When there is no \`componentRef\`, there might still be children that need to be rendered. In this case,
     * we render them outside of \`componentRef\`.
     * NOTE: We make sure not to render this if \`repeatItemData\` is non-null, because that means we are rendering an array of
     * blocks, and the children will be repeated within those blocks.
     */
    const shouldRenderChildrenOutsideRef =
      !this.component?.component && !this.repeatItemData;
    return shouldRenderChildrenOutsideRef ? this.useChildren : [];
  }
  get repeatItemData() {
    /**
     * we don't use \`state.useBlock\` here because the processing done within its logic includes evaluating the block's bindings,
     * which will not work if there is a repeat.
     */
    const { repeat, ...blockWithoutRepeat } = this.input.block;

    if (!repeat?.collection) {
      return undefined;
    }

    const itemsArray = evaluate({
      code: repeat.collection,
      state: this.input.context.state,
      context: this.input.context.context,
    });

    if (!Array.isArray(itemsArray)) {
      return undefined;
    }

    const collectionName = repeat.collection.split(\\".\\").pop();
    const itemNameToUse =
      repeat.itemName || (collectionName ? collectionName + \\"Item\\" : \\"item\\");
    const repeatArray = itemsArray.map((item, index) => ({
      context: {
        ...this.input.context,
        state: {
          ...this.input.context.state,
          $index: index,
          $item: item,
          [itemNameToUse]: item,
          [\`$\${itemNameToUse}Index\`]: index,
        },
      },
      block: blockWithoutRepeat,
    }));
    return repeatArray;
  }
  get inheritedTextStyles() {
    if (TARGET !== \\"reactNative\\") {
      return {};
    }

    const styles = getReactNativeBlockStyles({
      block: this.useBlock,
      context: this.input.context,
      blockStyles: this.attributes.style,
    });
    return extractTextStyles(styles);
  }
  get childrenContext() {
    return {
      apiKey: this.input.context.apiKey,
      state: this.input.context.state,
      content: this.input.context.content,
      context: this.input.context.context,
      registeredComponents: this.input.context.registeredComponents,
      inheritedStyles: this.inheritedTextStyles,
    };
  }
  get renderComponentTag() {
    if (TARGET === \\"reactNative\\") {
      return RenderComponentWithContext;
    } else if (TARGET === \\"vue3\\") {
      // vue3 expects a string for the component tag
      return \\"RenderComponent\\";
    } else {
      return RenderComponent;
    }
  }
}

<if(component.shouldWrap)>
  <div></div>
  <div></div>
  <if(isEmptyHtmlElement(component.tag))>
    <div></div>
    <state.tag></state.tag>
    <div></div></if>

  <div></div>
  <if(!isEmptyHtmlElement(component.tag) && component.repeatItemData)>
    <div></div>
    <for|data,index| of=(component.repeatItemData)>
      <RenderRepeatedBlock
        key=(index)
        repeatContext=(data.context)
        block=(data.block)
      ></RenderRepeatedBlock>
    </for>
    <div></div></if>

  <div></div>
  <if(!isEmptyHtmlElement(component.tag) && !component.repeatItemData)>
    <div></div>
    <state.tag
      ><div></div>
      <state.renderComponentTag
        ...(state.renderComponentProps)
      ></state.renderComponentTag>
      <div></div>
      <div></div>
      <for|child| of=(component.childrenWithoutParentComponent)>
        <RenderBlock
          key=('render-block-' + child.id)
          block=(child)
          context=(component.childrenContext)
        ></RenderBlock>
      </for>
      <div></div>
      <for|child| of=(component.childrenWithoutParentComponent)>
        <BlockStyles
          key=('block-style-' + child.id)
          block=(child)
          context=(component.childrenContext)
        ></BlockStyles>
      </for>
      <div></div></state.tag>
    <div></div></if>

  <div></div></if>
<else
  ><state.renderComponentTag
    ...(state.renderComponentProps)
  ></state.renderComponentTag
></else>"
`;

exports[`Marko > jsx > Typescript Test > renderContentExample 1`] = `
"import {
  sendComponentsToVisualEditor,
  dispatchNewContentToVisualEditor,
  trackClick,
} from \\"@dummy/injection-js\\";
import BuilderContext from \\"@dummy/context.marko\\";
import RenderBlocks from \\"@dummy/RenderBlocks.lite.tsx\\";

class {
  onMount() {
    sendComponentsToVisualEditor(this.input.customComponents);
  }

  onRender() {
    dispatchNewContentToVisualEditor(this.input.content);
  }
}

style { 
  .div-c8eb54c0 {
    display: flex;
    flex-direction: columns;
  }
}
<div onclick=(event => trackClick(input.content.id))>
  <div></div>
  <RenderBlocks blocks=(input.content.blocks)></RenderBlocks>
  <div></div>
</div>"
`;

exports[`Marko > jsx > Typescript Test > rootFragmentMultiNode 1`] = `
"class {}

<div></div>
<if(input.link)>
  <div></div>
  <a
    ><div></div>
    <div></div>
    <div></div></a>
  <div></div></if>

<div></div>
<if(!input.link)>
  <div></div>
  <button>
    <div></div>
    <div></div>
    <div></div>
  </button>
  <div></div></if>

<div></div>"
`;

exports[`Marko > jsx > Typescript Test > rootShow 1`] = `
"class {}

<if(input.foo === 'bar')>
  <div></div>
  <div><div></div></div>
  <div></div></if>
<else
  ><div><div></div></div></else>"
`;

exports[`Marko > jsx > Typescript Test > self-referencing component 1`] = `
"class {}

<div>
  <div></div>
  <div></div>
  <div></div>
  <if(input.name === 'Batman')>
    <div></div>
    <MyComponent name=\\"Bruce Wayne\\"></MyComponent>
    <div></div></if>

  <div></div>
</div>"
`;

exports[`Marko > jsx > Typescript Test > self-referencing component with children 1`] = `
"class {}

<div>
  <div></div>
  <div></div>
  <div></div>
  <div></div>
  <div></div>
  <if(input.name === 'Batman')>
    <div></div>
    <MyComponent name=\\"Bruce\\"
      ><div></div>
      <div><div></div></div>
      <div></div></MyComponent>
    <div></div></if>

  <div></div>
</div>"
`;

exports[`Marko > jsx > Typescript Test > showWithFor 1`] = `
"class {}

<if(input.conditionA)>
  <div></div>
  <for|item,idx| of=(input.items)>
    <div><div></div></div>
  </for>
  <div></div></if>
<else
  ><div><div></div></div></else>"
`;

exports[`Marko > jsx > Typescript Test > spreadAttrs 1`] = `
"class {}

<input />"
`;

exports[`Marko > jsx > Typescript Test > spreadNestedProps 1`] = `
"class {}

<input />"
`;

exports[`Marko > jsx > Typescript Test > spreadProps 1`] = `
"class {}

<input />"
`;

exports[`Marko > jsx > Typescript Test > styleClassAndCss 1`] = `
"class {}

style { 
  .div-644d49ee {
    display: flex;
    flex-direction: column;
    align-items: stretch;
  }
}
<div></div>"
`;

exports[`Marko > jsx > Typescript Test > subComponent 1`] = `
"import Foo from \\"./foo-sub-component.marko\\";

class {}

<Foo></Foo>"
`;

exports[`Marko > jsx > Typescript Test > svgComponent 1`] = `
"class {}

<svg viewbox=('0 0 ' + 42 + ' ' + 42)>
  <div></div>
  <defs>
    <div></div>
    <filter filterunits=\\"userSpaceOnUse\\">
      <div></div>
      <feFlood></feFlood>
      <div></div>
      <feBlend></feBlend>
      <div></div>
      <feGaussianBlur stddeviation=(7)></feGaussianBlur>
      <div></div>
    </filter>
    <div></div>
  </defs>
  <div></div>
</svg>"
`;

exports[`Marko > jsx > Typescript Test > typeDependency 1`] = `
"class {}

<div><div></div></div>"
`;

exports[`Marko > jsx > Typescript Test > use-style 1`] = `
"class {}

style { 
  button {
    background: blue;
    color: white;
    font-size: 12px;
    outline: 1px solid black;
  }
}
<button><div></div></button>"
`;

exports[`Marko > jsx > Typescript Test > use-style-and-css 1`] = `
"class {}

style { 
  .button-0b7811fa {
    background: blue;
    color: white;
  }

  button {
    font-size: 12px;
    outline: 1px solid black;
  }
}
<button><div></div></button>"
`;

exports[`Marko > jsx > Typescript Test > use-style-outside-component 1`] = `
"class {}

style { 
  button {
    background: blue;
    color: white;
    font-size: 12px;
    outline: 1px solid black;
  }
}
<button><div></div></button>"
`;

exports[`Marko > svelte > Javascript Test > basic 1`] = `
"class {
  onCreate() {
    this.state = { name: \\"Steve\\" };
  }
}

<div>
  <input onchange=(event => state.name = event.target.value) />
  <div></div>
</div>"
`;

exports[`Marko > svelte > Javascript Test > bindGroup 1`] = `
"class {
  onCreate() {
    this.state = { tortilla: \\"Plain\\", fillings: [] };
  }
}

<div ><input  onchange=(event => state.tortilla = event.target.value)  />
<input  onchange=(event => state.tortilla = event.target.value)  />
<input  onchange=(event => state.tortilla = event.target.value)  />
<br  />
<br  />
<input  onchange=(event => state.fillings = event.target.value)  />
<input  onchange=(event => state.fillings = event.target.value)  />
<input  onchange=(event => state.fillings = event.target.value)  />
<input  onchange=(event => state.fillings = event.target.value)  />
<p ><div ></div>
<div ></div></p>
<p ><div ></div>
<div ></div></p></div>"
`;

exports[`Marko > svelte > Javascript Test > bindProperty 1`] = `
"class {
  onCreate() {
    this.state = { value: \\"hello\\" };
  }
}

<input />"
`;

exports[`Marko > svelte > Javascript Test > classDirective 1`] = `
"class {
  onCreate() {
    this.state = { focus: true };
  }
}

<input />"
`;

exports[`Marko > svelte > Javascript Test > context 1`] = `
"class {
  onCreate() {
    this.state = { activeTab: 0 };
  }
}

<div><div></div></div>"
`;

exports[`Marko > svelte > Javascript Test > each 1`] = `
"class {
  onCreate() {
    this.state = { numbers: [\\"one\\", \\"two\\", \\"three\\"] };
  }
}

<ul>
  <for|num| of=(state.numbers)>
    <li><div></div></li>
  </for>
</ul>"
`;

exports[`Marko > svelte > Javascript Test > eventHandlers 1`] = `
"class {
  log = function log(msg = \\"hello\\") {
    console.log(msg);
  };
}

<div>
  <button onclick=(a => component.log('hi'))><div></div></button>
  <button onclick=(event => component.log(event))><div></div></button>
  <button onclick=(event => component.log(event))><div></div></button>
</div>"
`;

exports[`Marko > svelte > Javascript Test > html 1`] = `
"class {
  onCreate() {
    this.state = { html: \\"<b>bold</b>\\" };
  }
}

<div innerhtml=(state.html)></div>"
`;

exports[`Marko > svelte > Javascript Test > ifElse 1`] = `
"class {
  toggle = function toggle() {
    this.state.show = !this.state.show;
  };

  onCreate() {
    this.state = { show: true };
  }
}

<if(state.show)>
  <button onclick=(event => component.toggle(event))><div></div></button></if>
<else
  ><button onclick=(event => component.toggle(event))><div></div></button></else>"
`;

exports[`Marko > svelte > Javascript Test > imports 1`] = `
"import Button from \\"./Button.marko\\";

class {
  onCreate() {
    this.state = { disabled: false };
  }
}

<div>
  <button type=\\"button\\" disabled=(state.disabled)><slot></slot></button>
</div>"
`;

exports[`Marko > svelte > Javascript Test > lifecycleHooks 1`] = `
"class {
  onMount() {
    console.log(\\"onMount\\");
  }
  onDestroy() {
    console.log(\\"onDestroy\\");
  }
  onRender() {
    console.log(\\"onAfterUpdate\\");
  }
}

<div></div>"
`;

exports[`Marko > svelte > Javascript Test > reactive 1`] = `
"class {
  get lowercaseName() {
    return this.state.name.toLowerCase();
  }

  onCreate() {
    this.state = { name: \\"Steve\\" };
  }
}

<div>
  <input />
  <div></div>
  <div></div>
</div>"
`;

exports[`Marko > svelte > Javascript Test > reactiveWithFn 1`] = `
"class {
  calculateResult = function calculateResult(a_, b_) {
    this.state.result = a_ * b_;
  };

  onCreate() {
    this.state = { a: 2, b: 5, result: null };
  }

  onRender() {
    this.calculateResult(this.state.a, this.state.b);
  }
}

<div>
  <input onchange=(event => state.a = event.target.value) />
  <input onchange=(event => state.b = event.target.value) />
  <div></div>
  <div></div>
</div>"
`;

exports[`Marko > svelte > Javascript Test > slots 1`] = `
"class {}

<div>
  <slot><div></div></slot>
  <slot name=\\"Test\\"
    ><div><div></div></div></slot>
</div>"
`;

exports[`Marko > svelte > Javascript Test > style 1`] = `
"class {}

style { 
  input {
    color: red;
    font-size: 12px;
  }

  .form-input:focus {
    outline: 1px solid blue;
  }
}
<input />"
`;

exports[`Marko > svelte > Javascript Test > textExpressions 1`] = `
"class {
  onCreate() {
    this.state = { a: 5, b: 12 };
  }
}

<div>
  <div></div>
  <div></div>
  <br />
  <div></div>
  <div></div>
</div>"
`;

exports[`Marko > svelte > Typescript Test > basic 1`] = `
"class {
  onCreate() {
    this.state = { name: \\"Steve\\" };
  }
}

<div>
  <input onchange=(event => state.name = event.target.value) />
  <div></div>
</div>"
`;

exports[`Marko > svelte > Typescript Test > bindGroup 1`] = `
"class {
  onCreate() {
    this.state = { tortilla: \\"Plain\\", fillings: [] };
  }
}

<div ><input  onchange=(event => state.tortilla = event.target.value)  />
<input  onchange=(event => state.tortilla = event.target.value)  />
<input  onchange=(event => state.tortilla = event.target.value)  />
<br  />
<br  />
<input  onchange=(event => state.fillings = event.target.value)  />
<input  onchange=(event => state.fillings = event.target.value)  />
<input  onchange=(event => state.fillings = event.target.value)  />
<input  onchange=(event => state.fillings = event.target.value)  />
<p ><div ></div>
<div ></div></p>
<p ><div ></div>
<div ></div></p></div>"
`;

exports[`Marko > svelte > Typescript Test > bindProperty 1`] = `
"class {
  onCreate() {
    this.state = { value: \\"hello\\" };
  }
}

<input />"
`;

exports[`Marko > svelte > Typescript Test > classDirective 1`] = `
"class {
  onCreate() {
    this.state = { focus: true };
  }
}

<input />"
`;

exports[`Marko > svelte > Typescript Test > context 1`] = `
"class {
  onCreate() {
    this.state = { activeTab: 0 };
  }
}

<div><div></div></div>"
`;

exports[`Marko > svelte > Typescript Test > each 1`] = `
"class {
  onCreate() {
    this.state = { numbers: [\\"one\\", \\"two\\", \\"three\\"] };
  }
}

<ul>
  <for|num| of=(state.numbers)>
    <li><div></div></li>
  </for>
</ul>"
`;

exports[`Marko > svelte > Typescript Test > eventHandlers 1`] = `
"class {
  log = function log(msg = \\"hello\\") {
    console.log(msg);
  };
}

<div>
  <button onclick=(a => component.log('hi'))><div></div></button>
  <button onclick=(event => component.log(event))><div></div></button>
  <button onclick=(event => component.log(event))><div></div></button>
</div>"
`;

exports[`Marko > svelte > Typescript Test > html 1`] = `
"class {
  onCreate() {
    this.state = { html: \\"<b>bold</b>\\" };
  }
}

<div innerhtml=(state.html)></div>"
`;

exports[`Marko > svelte > Typescript Test > ifElse 1`] = `
"class {
  toggle = function toggle() {
    this.state.show = !this.state.show;
  };

  onCreate() {
    this.state = { show: true };
  }
}

<if(state.show)>
  <button onclick=(event => component.toggle(event))><div></div></button></if>
<else
  ><button onclick=(event => component.toggle(event))><div></div></button></else>"
`;

exports[`Marko > svelte > Typescript Test > imports 1`] = `
"import Button from \\"./Button.marko\\";

class {
  onCreate() {
    this.state = { disabled: false };
  }
}

<div>
  <button type=\\"button\\" disabled=(state.disabled)><slot></slot></button>
</div>"
`;

exports[`Marko > svelte > Typescript Test > lifecycleHooks 1`] = `
"class {
  onMount() {
    console.log(\\"onMount\\");
  }
  onDestroy() {
    console.log(\\"onDestroy\\");
  }
  onRender() {
    console.log(\\"onAfterUpdate\\");
  }
}

<div></div>"
`;

exports[`Marko > svelte > Typescript Test > reactive 1`] = `
"class {
  get lowercaseName() {
    return this.state.name.toLowerCase();
  }

  onCreate() {
    this.state = { name: \\"Steve\\" };
  }
}

<div>
  <input />
  <div></div>
  <div></div>
</div>"
`;

exports[`Marko > svelte > Typescript Test > reactiveWithFn 1`] = `
"class {
  calculateResult = function calculateResult(a_, b_) {
    this.state.result = a_ * b_;
  };

  onCreate() {
    this.state = { a: 2, b: 5, result: null };
  }

  onRender() {
    this.calculateResult(this.state.a, this.state.b);
  }
}

<div>
  <input onchange=(event => state.a = event.target.value) />
  <input onchange=(event => state.b = event.target.value) />
  <div></div>
  <div></div>
</div>"
`;

exports[`Marko > svelte > Typescript Test > slots 1`] = `
"class {}

<div>
  <slot><div></div></slot>
  <slot name=\\"Test\\"
    ><div><div></div></div></slot>
</div>"
`;

exports[`Marko > svelte > Typescript Test > style 1`] = `
"class {}

style { 
  input {
    color: red;
    font-size: 12px;
  }

  .form-input:focus {
    outline: 1px solid blue;
  }
}
<input />"
`;

exports[`Marko > svelte > Typescript Test > textExpressions 1`] = `
"class {
  onCreate() {
    this.state = { a: 5, b: 12 };
  }
}

<div>
  <div></div>
  <div></div>
  <br />
  <div></div>
  <div></div>
</div>"
`;
