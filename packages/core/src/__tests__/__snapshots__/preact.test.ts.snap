// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`Preact > jsx > Javascript Test > AdvancedRef 1`] = `
"/** @jsx h */
import { h, Fragment } from \\"preact\\";
import { useState, useRef, useEffect } from \\"preact/hooks\\";

function MyBasicRefComponent(props) {
  const inputRef = useRef(null);
  const inputNoArgRef = useRef(null);
  const [name, setName] = useState(() => \\"PatrickJS\\");

  function onBlur() {
    // Maintain focus
    inputRef.current.focus();
  }

  function lowerCaseName() {
    return name.toLowerCase();
  }

  useEffect(() => {
    console.log(\\"Received an update\\");
  }, [inputRef.current, inputNoArgRef.current]);

  return (
    <Fragment>
      <div>
        {props.showInput ? (
          <Fragment>
            <input
              className=\\"input\\"
              ref={inputRef}
              value={name}
              onBlur={(event) => onBlur()}
              onChange={(event) => setName(event.target.value)}
            />
            <label htmlFor=\\"cars\\" ref={inputNoArgRef}>
              Choose a car:
            </label>
            <select name=\\"cars\\" id=\\"cars\\">
              <option value=\\"supra\\">GR Supra</option>
              <option value=\\"86\\">GR 86</option>
            </select>
          </Fragment>
        ) : null}
        Hello
        {lowerCaseName()}! I can run in React, Qwik, Vue, Solid, or Web
        Component!
      </div>
      <style jsx>{\`
        .input {
          color: red;
        }
      \`}</style>
    </Fragment>
  );
}

export default MyBasicRefComponent;
"
`;

exports[`Preact > jsx > Javascript Test > Basic 1`] = `
"/** @jsx h */
import { h, Fragment } from \\"preact\\";
import { useState } from \\"preact/hooks\\";

export const DEFAULT_VALUES = {
  name: \\"Steve\\",
};

function MyBasicComponent(props) {
  const [name, setName] = useState(() => \\"Steve\\");

  function underscore_fn_name() {
    return \\"bar\\";
  }

  const [age, setAge] = useState(() => 1);

  const [sports, setSports] = useState(() => [\\"\\"]);

  return (
    <Fragment>
      <div className=\\"test div\\">
        <input
          value={DEFAULT_VALUES.name || name}
          onChange={(myEvent) => setName(myEvent.target.value)}
        />
        Hello! I can run in React, Vue, Solid, or Liquid!
      </div>
      <style jsx>{\`
        .div {
          padding: 10px;
        }
      \`}</style>
    </Fragment>
  );
}

export default MyBasicComponent;
"
`;

exports[`Preact > jsx > Javascript Test > Basic Context 1`] = `
"/** @jsx h */
import { h, Fragment } from \\"preact\\";
import { useState, useContext, useRef, useEffect } from \\"preact/hooks\\";
import { Injector, MyService, createInjector } from \\"@dummy/injection-js\\";

function MyBasicComponent(props) {
  const [name, setName] = useState(() => \\"PatrickJS\\");

  function onChange() {
    const change = myService.method(\\"change\\");
    console.log(change);
  }

  const myService = useContext(MyService);

  const hasInitialized = useRef(false);
  if (!hasInitialized.current) {
    const hi = myService.method(\\"hi\\");
    console.log(hi);
    hasInitialized.current = true;
  }

  useEffect(() => {
    const bye = myService.method(\\"hi\\");
    console.log(bye);
  }, []);

  return (
    <Injector.Provider value={createInjector()}>
      <div>
        {myService.method(\\"hello\\") + name}
        Hello! I can run in React, Vue, Solid, or Liquid!
        <input onChange={(event) => onChange} />
      </div>
    </Injector.Provider>
  );
}

export default MyBasicComponent;
"
`;

exports[`Preact > jsx > Javascript Test > Basic OnMount Update 1`] = `
"/** @jsx h */
import { h, Fragment } from \\"preact\\";
import { useState, useRef, useEffect } from \\"preact/hooks\\";

function MyBasicOnMountUpdateComponent(props) {
  const [name, setName] = useState(() => \\"PatrickJS\\");

  const [names, setNames] = useState(() => [\\"Steve\\", \\"PatrickJS\\"]);

  const hasInitialized = useRef(false);
  if (!hasInitialized.current) {
    setName(\\"PatrickJS onInit\\" + props.hi);
    hasInitialized.current = true;
  }

  useEffect(() => {
    setName(\\"PatrickJS onMount\\" + props.bye);
  }, []);

  return <div>Hello {name}</div>;
}

export default MyBasicOnMountUpdateComponent;
"
`;

exports[`Preact > jsx > Javascript Test > Basic Outputs 1`] = `
"/** @jsx h */
import { h, Fragment } from \\"preact\\";
import { useState, useEffect } from \\"preact/hooks\\";

function MyBasicOutputsComponent(props) {
  const [name, setName] = useState(() => \\"PatrickJS\\");

  useEffect(() => {
    props.onMessage(name);
    props.onEvent(props.message);
  }, []);

  return <div />;
}

export default MyBasicOutputsComponent;
"
`;

exports[`Preact > jsx > Javascript Test > Basic Outputs Meta 1`] = `
"/** @jsx h */
import { h, Fragment } from \\"preact\\";
import { useState, useEffect } from \\"preact/hooks\\";

function MyBasicOutputsComponent(props) {
  const [name, setName] = useState(() => \\"PatrickJS\\");

  useEffect(() => {
    props.onMessage(name);
    props.onEvent(props.message);
  }, []);

  return <div />;
}

export default MyBasicOutputsComponent;
"
`;

exports[`Preact > jsx > Javascript Test > BasicAttribute 1`] = `
"/** @jsx h */
import { h, Fragment } from \\"preact\\";

function MyComponent(props) {
  return <input autoCapitalize=\\"on\\" autoComplete=\\"on\\" spellCheck />;
}

export default MyComponent;
"
`;

exports[`Preact > jsx > Javascript Test > BasicBooleanAttribute 1`] = `
"/** @jsx h */
import { h, Fragment } from \\"preact\\";
import MyBooleanAttributeComponent from \\"./basic-boolean-attribute-component.raw\\";

function MyBooleanAttribute(props) {
  return (
    <div>
      {props.children ? (
        <Fragment>
          {props.children}
          {props.type}
        </Fragment>
      ) : null}
      <MyBooleanAttributeComponent toggle />
      <MyBooleanAttributeComponent toggle />
      <MyBooleanAttributeComponent list={null} />
    </div>
  );
}

export default MyBooleanAttribute;
"
`;

exports[`Preact > jsx > Javascript Test > BasicChildComponent 1`] = `
"/** @jsx h */
import { h, Fragment } from \\"preact\\";
import { useState } from \\"preact/hooks\\";
import MyBasicOnMountUpdateComponent from \\"./basic-onMount-update.raw\\";
import MyBasicComponent from \\"./basic.raw\\";

function MyBasicChildComponent(props) {
  const [name, setName] = useState(() => \\"Steve\\");

  const [dev, setDev] = useState(() => \\"PatrickJS\\");

  return (
    <div>
      <MyBasicComponent id={dev} />
      <div>
        <MyBasicOnMountUpdateComponent hi={name} bye={dev} />
      </div>
    </div>
  );
}

export default MyBasicChildComponent;
"
`;

exports[`Preact > jsx > Javascript Test > BasicFor 1`] = `
"/** @jsx h */
import { h, Fragment } from \\"preact\\";
import { useState, useEffect } from \\"preact/hooks\\";

function MyBasicForComponent(props) {
  const [name, setName] = useState(() => \\"PatrickJS\\");

  const [names, setNames] = useState(() => [\\"Steve\\", \\"PatrickJS\\"]);

  useEffect(() => {
    console.log(\\"onMount code\\");
  }, []);

  return (
    <div>
      {names?.map((person) => (
        <Fragment>
          <input
            value={name}
            onChange={(event) => {
              setName(event.target.value + \\" and \\" + person);
            }}
          />
          Hello
          {person}! I can run in Qwik, Web Component, React, Vue, Solid, or
          Liquid!
        </Fragment>
      ))}
    </div>
  );
}

export default MyBasicForComponent;
"
`;

exports[`Preact > jsx > Javascript Test > BasicRef 1`] = `
"/** @jsx h */
import { h, Fragment } from \\"preact\\";
import { useState, useRef } from \\"preact/hooks\\";

function MyBasicRefComponent(props) {
  const inputRef = useRef(null);
  const inputNoArgRef = useRef(null);
  const [name, setName] = useState(() => \\"PatrickJS\\");

  function onBlur() {
    // Maintain focus
    inputRef.current.focus();
  }

  function lowerCaseName() {
    return name.toLowerCase();
  }

  return (
    <Fragment>
      <div>
        {props.showInput ? (
          <Fragment>
            <input
              className=\\"input\\"
              ref={inputRef}
              value={name}
              onBlur={(event) => onBlur()}
              onChange={(event) => setName(event.target.value)}
            />
            <label htmlFor=\\"cars\\" ref={inputNoArgRef}>
              Choose a car:
            </label>
            <select name=\\"cars\\" id=\\"cars\\">
              <option value=\\"supra\\">GR Supra</option>
              <option value=\\"86\\">GR 86</option>
            </select>
          </Fragment>
        ) : null}
        Hello
        {lowerCaseName()}! I can run in React, Qwik, Vue, Solid, or Web
        Component!
      </div>
      <style jsx>{\`
        .input {
          color: red;
        }
      \`}</style>
    </Fragment>
  );
}

export default MyBasicRefComponent;
"
`;

exports[`Preact > jsx > Javascript Test > BasicRefAssignment 1`] = `
"/** @jsx h */
import { h, Fragment } from \\"preact\\";
import { useRef } from \\"preact/hooks\\";

function MyBasicRefAssignmentComponent(props) {
  const holdValueRef = useRef(\\"Patrick\\");
  function handlerClick(event) {
    event.preventDefault();
    console.log(\\"current value\\", holdValueRef.current);
    holdValueRef.current = holdValueRef.current + \\"JS\\";
  }

  return (
    <div>
      <button onClick={(evt) => handlerClick(evt)}>Click</button>
    </div>
  );
}

export default MyBasicRefAssignmentComponent;
"
`;

exports[`Preact > jsx > Javascript Test > BasicRefPrevious 1`] = `
"/** @jsx h */
import { h, Fragment } from \\"preact\\";
import { useState, useRef, useEffect } from \\"preact/hooks\\";

export function usePrevious(value) {
  // The ref object is a generic container whose current property is mutable ...
  // ... and can hold any value, similar to an instance property on a class
  let ref = useRef(null); // Store current value in ref

  onUpdate(() => {
    ref = value;
  }, [value]); // Only re-run if value changes
  // Return previous value (happens before update in useEffect above)

  return ref;
}

function MyPreviousComponent(props) {
  const [count, setCount] = useState(() => 0);

  const prevCount = useRef(count);

  useEffect(() => {
    prevCount.current = count;
  }, [count]);

  return (
    <div>
      <h1>
        Now: {count}, before: {prevCount.current}
      </h1>
      <button onClick={(event) => setCount(1)}>Increment</button>
    </div>
  );
}

export default MyPreviousComponent;
"
`;

exports[`Preact > jsx > Javascript Test > Button 1`] = `
"/** @jsx h */
import { h, Fragment } from \\"preact\\";

function Button(props) {
  return (
    <div>
      {props.link ? (
        <a
          {...props.attributes}
          href={props.link}
          target={props.openLinkInNewTab ? \\"_blank\\" : undefined}
        >
          {props.text}
        </a>
      ) : null}
      {!props.link ? (
        <button type=\\"button\\" {...props.attributes}>
          {props.text}
        </button>
      ) : null}
    </div>
  );
}

export default Button;
"
`;

exports[`Preact > jsx > Javascript Test > Columns 1`] = `
"/** @jsx h */
import { h, Fragment } from \\"preact\\";

function Column(props) {
  function getColumns() {
    return props.columns || [];
  }

  function getGutterSize() {
    return typeof props.space === \\"number\\" ? props.space || 0 : 20;
  }

  function getWidth(index) {
    const columns = getColumns();
    return (columns[index] && columns[index].width) || 100 / columns.length;
  }

  function getColumnCssWidth(index) {
    const columns = getColumns();
    const gutterSize = getGutterSize();
    const subtractWidth = (gutterSize * (columns.length - 1)) / columns.length;
    return \`calc(\${getWidth(index)}% - \${subtractWidth}px)\`;
  }

  return (
    <Fragment>
      <div className=\\"builder-columns div\\">
        {props.columns?.map((column, index) => (
          <div className=\\"builder-column div-2\\">
            {column.content}
            {index}
          </div>
        ))}
      </div>
      <style jsx>{\`
        .div {
          display: flex;
          flex-direction: column;
          align-items: stretch;
          line-height: normal;
        }
        @media (max-width: 999px) {
          .div {
            flex-direction: row;
          }
        }
        @media (max-width: 639px) {
          .div {
            flex-direction: row-reverse;
          }
        }
        .div-2 {
          flex-grow: 1;
        }
      \`}</style>
    </Fragment>
  );
}

export default Column;
"
`;

exports[`Preact > jsx > Javascript Test > ContentSlotHtml 1`] = `
"/** @jsx h */
import { h, Fragment } from \\"preact\\";

function ContentSlotCode(props) {
  return (
    <div>
      <>{props.slotTesting}</>
      <div>
        <hr />
      </div>
      <div>
        <>{props.children}</>
      </div>
    </div>
  );
}

export default ContentSlotCode;
"
`;

exports[`Preact > jsx > Javascript Test > ContentSlotJSX 1`] = `
"/** @jsx h */
import { h, Fragment } from \\"preact\\";
import { useState } from \\"preact/hooks\\";

function ContentSlotJsxCode(props) {
  const [name, setName] = useState(() => \\"king\\");

  const [showContent, setShowContent] = useState(() => false);

  function cls() {
    return props.slotContent && props.children ? \`\${name}-content\` : \\"\\";
  }

  function show() {
    props.slotContent ? 1 : \\"\\";
  }

  return (
    <Fragment>
      {props.slotReference ? (
        <Fragment>
          <div
            name={props.slotContent ? \\"name1\\" : \\"name2\\"}
            title={props.slotContent ? \\"title1\\" : \\"title2\\"}
            {...props.attributes}
            onClick={(event) => show()}
            className={cls()}
          >
            {showContent && props.slotContent ? (
              <>{props.content || \\"{props.content}\\"}</>
            ) : null}
            <div>
              <hr />
            </div>
            <div>{props.children}</div>
          </div>
        </Fragment>
      ) : null}
    </Fragment>
  );
}

ContentSlotJsxCode.defaultProps = {
  content: \\"\\",
  slotReference: undefined,
  slotContent: undefined,
};

export default ContentSlotJsxCode;
"
`;

exports[`Preact > jsx > Javascript Test > CustomCode 1`] = `
"/** @jsx h */
import { h, Fragment } from \\"preact\\";
import { useState, useRef, useEffect } from \\"preact/hooks\\";

function CustomCode(props) {
  const elem = useRef(null);
  const [scriptsInserted, setScriptsInserted] = useState(() => []);

  const [scriptsRun, setScriptsRun] = useState(() => []);

  function findAndRunScripts() {
    // TODO: Move this function to standalone one in '@builder.io/utils'
    if (elem.current && typeof window !== \\"undefined\\") {
      /** @type {HTMLScriptElement[]} */
      const scripts = elem.current.getElementsByTagName(\\"script\\");

      for (let i = 0; i < scripts.length; i++) {
        const script = scripts[i];

        if (script.src) {
          if (scriptsInserted.includes(script.src)) {
            continue;
          }

          scriptsInserted.push(script.src);
          const newScript = document.createElement(\\"script\\");
          newScript.async = true;
          newScript.src = script.src;
          document.head.appendChild(newScript);
        } else if (
          !script.type ||
          [
            \\"text/javascript\\",
            \\"application/javascript\\",
            \\"application/ecmascript\\",
          ].includes(script.type)
        ) {
          if (scriptsRun.includes(script.innerText)) {
            continue;
          }

          try {
            scriptsRun.push(script.innerText);
            new Function(script.innerText)();
          } catch (error) {
            console.warn(\\"\`CustomCode\`: Error running script:\\", error);
          }
        }
      }
    }
  }

  useEffect(() => {
    findAndRunScripts();
  }, []);

  return (
    <div
      ref={elem}
      className={
        \\"builder-custom-code\\" + (props.replaceNodes ? \\" replace-nodes\\" : \\"\\")
      }
      dangerouslySetInnerHTML={{ __html: props.code }}
    />
  );
}

export default CustomCode;
"
`;

exports[`Preact > jsx > Javascript Test > Embed 1`] = `
"/** @jsx h */
import { h, Fragment } from \\"preact\\";
import { useState, useRef, useEffect } from \\"preact/hooks\\";

function CustomCode(props) {
  const elem = useRef(null);
  const [scriptsInserted, setScriptsInserted] = useState(() => []);

  const [scriptsRun, setScriptsRun] = useState(() => []);

  function findAndRunScripts() {
    // TODO: Move this function to standalone one in '@builder.io/utils'
    if (elem.current && typeof window !== \\"undefined\\") {
      /** @type {HTMLScriptElement[]} */
      const scripts = elem.current.getElementsByTagName(\\"script\\");

      for (let i = 0; i < scripts.length; i++) {
        const script = scripts[i];

        if (script.src) {
          if (scriptsInserted.includes(script.src)) {
            continue;
          }

          scriptsInserted.push(script.src);
          const newScript = document.createElement(\\"script\\");
          newScript.async = true;
          newScript.src = script.src;
          document.head.appendChild(newScript);
        } else if (
          !script.type ||
          [
            \\"text/javascript\\",
            \\"application/javascript\\",
            \\"application/ecmascript\\",
          ].includes(script.type)
        ) {
          if (scriptsRun.includes(script.innerText)) {
            continue;
          }

          try {
            scriptsRun.push(script.innerText);
            new Function(script.innerText)();
          } catch (error) {
            console.warn(\\"\`CustomCode\`: Error running script:\\", error);
          }
        }
      }
    }
  }

  useEffect(() => {
    findAndRunScripts();
  }, []);

  return (
    <div
      ref={elem}
      className={
        \\"builder-custom-code\\" + (props.replaceNodes ? \\" replace-nodes\\" : \\"\\")
      }
      dangerouslySetInnerHTML={{ __html: props.code }}
    />
  );
}

export default CustomCode;
"
`;

exports[`Preact > jsx > Javascript Test > Form 1`] = `
"/** @jsx h */
import { h, Fragment } from \\"preact\\";
import { useState, useRef } from \\"preact/hooks\\";
import { Builder, builder } from \\"@builder.io/sdk\\";
import {
  BuilderBlock as BuilderBlockComponent,
  BuilderBlocks,
  get,
  set,
} from \\"@fake\\";

function FormComponent(props) {
  const formRef = useRef(null);
  const [formState, setFormState] = useState(() => \\"unsubmitted\\");

  const [responseData, setResponseData] = useState(() => null);

  const [formErrorMessage, setFormErrorMessage] = useState(() => \\"\\");

  function submissionState() {
    return (Builder.isEditing && props.previewState) || formState;
  }

  function onSubmit(event) {
    const sendWithJs = props.sendWithJs || props.sendSubmissionsTo === \\"email\\";

    if (props.sendSubmissionsTo === \\"zapier\\") {
      event.preventDefault();
    } else if (sendWithJs) {
      if (!(props.action || props.sendSubmissionsTo === \\"email\\")) {
        event.preventDefault();
        return;
      }

      event.preventDefault();
      const el = event.currentTarget;
      const headers = props.customHeaders || {};
      let body;
      const formData = new FormData(el); // TODO: maybe support null

      const formPairs = Array.from(
        event.currentTarget.querySelectorAll(\\"input,select,textarea\\")
      )
        .filter((el) => !!el.name)
        .map((el) => {
          let value;
          const key = el.name;

          if (el instanceof HTMLInputElement) {
            if (el.type === \\"radio\\") {
              if (el.checked) {
                value = el.name;
                return {
                  key,
                  value,
                };
              }
            } else if (el.type === \\"checkbox\\") {
              value = el.checked;
            } else if (el.type === \\"number\\" || el.type === \\"range\\") {
              const num = el.valueAsNumber;

              if (!isNaN(num)) {
                value = num;
              }
            } else if (el.type === \\"file\\") {
              // TODO: one vs multiple files
              value = el.files;
            } else {
              value = el.value;
            }
          } else {
            value = el.value;
          }

          return {
            key,
            value,
          };
        });
      let contentType = props.contentType;

      if (props.sendSubmissionsTo === \\"email\\") {
        contentType = \\"multipart/form-data\\";
      }

      Array.from(formPairs).forEach(({ value }) => {
        if (
          value instanceof File ||
          (Array.isArray(value) && value[0] instanceof File) ||
          value instanceof FileList
        ) {
          contentType = \\"multipart/form-data\\";
        }
      }); // TODO: send as urlEncoded or multipart by default
      // because of ease of use and reliability in browser API
      // for encoding the form?

      if (contentType !== \\"application/json\\") {
        body = formData;
      } else {
        // Json
        const json = {};
        Array.from(formPairs).forEach(({ value, key }) => {
          set(json, key, value);
        });
        body = JSON.stringify(json);
      }

      if (contentType && contentType !== \\"multipart/form-data\\") {
        if (
          /* Zapier doesn't allow content-type header to be sent from browsers */ !(
            sendWithJs && props.action?.includes(\\"zapier.com\\")
          )
        ) {
          headers[\\"content-type\\"] = contentType;
        }
      }
      const presubmitEvent = new CustomEvent(\\"presubmit\\", { detail: { body } });
      if (formRef.current) {
        formRef.current.dispatchEvent(presubmitEvent);
        if (presubmitEvent.defaultPrevented) {
          return;
        }
      }
      setFormState(\\"sending\\");
      const formUrl = \`\${
        builder.env === \\"dev\\" ? \\"http://localhost:5000\\" : \\"https://builder.io\\"
      }/api/v1/form-submit?apiKey=\${builder.apiKey}&to=\${btoa(
        props.sendSubmissionsToEmail || \\"\\"
      )}&name=\${encodeURIComponent(props.name || \\"\\")}\`;
      fetch(
        props.sendSubmissionsTo === \\"email\\"
          ? formUrl
          : props.action /* TODO: throw error if no action URL */,
        { body, headers, method: props.method || \\"post\\" }
      ).then(
        async (res) => {
          let body;
          const contentType = res.headers.get(\\"content-type\\");
          if (contentType && contentType.indexOf(\\"application/json\\") !== -1) {
            body = await res.json();
          } else {
            body = await res.text();
          }
          if (!res.ok && props.errorMessagePath) {
            /* TODO: allow supplying an error formatter function */ let message =
              get(body, props.errorMessagePath);
            if (message) {
              if (typeof message !== \\"string\\") {
                /* TODO: ideally convert json to yaml so it woul dbe like          error: - email has been taken */ message =
                  JSON.stringify(message);
              }
              setFormErrorMessage(message);
            }
          }
          setResponseData(body);
          setFormState(res.ok ? \\"success\\" : \\"error\\");
          if (res.ok) {
            const submitSuccessEvent = new CustomEvent(\\"submit:success\\", {
              detail: { res, body },
            });
            if (formRef.current) {
              formRef.current.dispatchEvent(submitSuccessEvent);
              if (submitSuccessEvent.defaultPrevented) {
                return;
              }
              /* TODO: option to turn this on/off? */ if (
                props.resetFormOnSubmit !== false
              ) {
                formRef.current.reset();
              }
            }
            /* TODO: client side route event first that can be preventDefaulted */ if (
              props.successUrl
            ) {
              if (formRef.current) {
                const event = new CustomEvent(\\"route\\", {
                  detail: { url: props.successUrl },
                });
                formRef.current.dispatchEvent(event);
                if (!event.defaultPrevented) {
                  location.href = props.successUrl;
                }
              } else {
                location.href = props.successUrl;
              }
            }
          }
        },
        (err) => {
          const submitErrorEvent = new CustomEvent(\\"submit:error\\", {
            detail: { error: err },
          });
          if (formRef.current) {
            formRef.current.dispatchEvent(submitErrorEvent);
            if (submitErrorEvent.defaultPrevented) {
              return;
            }
          }
          setResponseData(err);
          setFormState(\\"error\\");
        }
      );
    }
  }
  return (
    <Fragment>
      {\\" \\"}
      <form
        validate={props.validate}
        ref={formRef}
        action={!props.sendWithJs && props.action}
        method={props.method}
        name={props.name}
        onSubmit={(event) => onSubmit(event)}
        {...props.attributes}
      >
        {props.builderBlock && props.builderBlock.children ? (
          <Fragment>
            {props.builderBlock?.children?.map((block, index) => (
              <BuilderBlockComponent
                key={block.id}
                block={block}
                index={index}
              />
            ))}
          </Fragment>
        ) : null}
        {submissionState() === \\"error\\" ? (
          <BuilderBlocks dataPath=\\"errorMessage\\" blocks={props.errorMessage} />
        ) : null}
        {submissionState() === \\"sending\\" ? (
          <BuilderBlocks
            dataPath=\\"sendingMessage\\"
            blocks={props.sendingMessage}
          />
        ) : null}
        {submissionState() === \\"error\\" && responseData ? (
          <pre className=\\"builder-form-error-text pre\\">
            {JSON.stringify(responseData, null, 2)}
          </pre>
        ) : null}
        {submissionState() === \\"success\\" ? (
          <BuilderBlocks
            dataPath=\\"successMessage\\"
            blocks={props.successMessage}
          />
        ) : null}
      </form>{\\" \\"}
      <style jsx>{\`
        .pre {
          padding: 10px;
          color: red;
          text-align: center;
        }
      \`}</style>{\\" \\"}
    </Fragment>
  );
}
export default FormComponent;
"
`;

exports[`Preact > jsx > Javascript Test > Image 1`] = `
"/** @jsx h */
import { h, Fragment } from \\"preact\\";
import { useState, useRef, useEffect } from \\"preact/hooks\\";

function Image(props) {
  const pictureRef = useRef(null);
  const [scrollListener, setScrollListener] = useState(() => null);

  const [imageLoaded, setImageLoaded] = useState(() => false);

  function setLoaded() {
    setImageLoaded(true);
  }

  function useLazyLoading() {
    // TODO: Add more checks here, like testing for real web browsers
    return !!props.lazy && isBrowser();
  }

  function isBrowser() {
    return (
      typeof window !== \\"undefined\\" && window.navigator.product != \\"ReactNative\\"
    );
  }

  const [load, setLoad] = useState(() => false);

  useEffect(() => {
    if (useLazyLoading()) {
      // throttled scroll capture listener
      const listener = () => {
        if (pictureRef.current) {
          const rect = pictureRef.current.getBoundingClientRect();
          const buffer = window.innerHeight / 2;

          if (rect.top < window.innerHeight + buffer) {
            setLoad(true);
            setScrollListener(null);
            window.removeEventListener(\\"scroll\\", listener);
          }
        }
      };

      setScrollListener(listener);
      window.addEventListener(\\"scroll\\", listener, {
        capture: true,
        passive: true,
      });
      listener();
    }
  }, []);

  useEffect(() => {
    return () => {
      if (scrollListener) {
        window.removeEventListener(\\"scroll\\", scrollListener);
      }
    };
  }, []);

  return (
    <Fragment>
      <div>
        <picture ref={pictureRef}>
          {!useLazyLoading() || load ? (
            <img
              alt={props.altText}
              aria-role={props.altText ? \\"presentation\\" : undefined}
              className={
                \\"builder-image\\" +
                (props._class ? \\" \\" + props._class : \\"\\") +
                \\" img\\"
              }
              src={props.image}
              onLoad={(event) => setLoaded()}
              srcset={props.srcset}
              sizes={props.sizes}
            />
          ) : null}
          <source srcset={props.srcset} />
        </picture>
        {props.children}
      </div>
      <style jsx>{\`
        .img {
          opacity: 1;
          transition: opacity 0.2s ease-in-out;
          object-fit: cover;
          object-position: center;
        }
      \`}</style>
    </Fragment>
  );
}

export default Image;
"
`;

exports[`Preact > jsx > Javascript Test > Image State 1`] = `
"/** @jsx h */
import { h, Fragment } from \\"preact\\";
import { useState } from \\"preact/hooks\\";

function ImgStateComponent(props) {
  const [canShow, setCanShow] = useState(() => true);

  const [images, setImages] = useState(() => [\\"http://example.com/qwik.png\\"]);

  return (
    <div>
      {images?.map((item, itemIndex) => (
        <img className=\\"custom-class\\" src={item} key={itemIndex} />
      ))}
    </div>
  );
}

export default ImgStateComponent;
"
`;

exports[`Preact > jsx > Javascript Test > Img 1`] = `
"/** @jsx h */
import { h, Fragment } from \\"preact\\";
import { Builder } from \\"@builder.io/sdk\\";

function ImgComponent(props) {
  return (
    <img
      style={{
        objectFit: props.backgroundSize || \\"cover\\",
        objectPosition: props.backgroundPosition || \\"center\\",
      }}
      {...props.attributes}
      key={(Builder.isEditing && props.imgSrc) || \\"default-key\\"}
      alt={props.altText}
      src={props.imgSrc}
    />
  );
}

export default ImgComponent;
"
`;

exports[`Preact > jsx > Javascript Test > Input 1`] = `
"/** @jsx h */
import { h, Fragment } from \\"preact\\";
import { Builder } from \\"@builder.io/sdk\\";

function FormInputComponent(props) {
  return (
    <input
      {...props.attributes}
      key={
        Builder.isEditing && props.defaultValue
          ? props.defaultValue
          : \\"default-key\\"
      }
      placeholder={props.placeholder}
      type={props.type}
      name={props.name}
      value={props.value}
      defaultValue={props.defaultValue}
      required={props.required}
      onChange={(event) => props.onChange?.(event.target.value)}
    />
  );
}

export default FormInputComponent;
"
`;

exports[`Preact > jsx > Javascript Test > InputParent 1`] = `
"/** @jsx h */
import { h, Fragment } from \\"preact\\";
import FormInputComponent from \\"./input.raw\\";

function Stepper(props) {
  function handleChange(value) {
    console.log(value);
  }

  return (
    <FormInputComponent
      name=\\"kingzez\\"
      type=\\"text\\"
      onChange={(value) => handleChange(value)}
    />
  );
}

export default Stepper;
"
`;

exports[`Preact > jsx > Javascript Test > RawText 1`] = `
"/** @jsx h */
import { h, Fragment } from \\"preact\\";

function RawText(props) {
  return (
    <span
      className={props.attributes?.class || props.attributes?.className}
      dangerouslySetInnerHTML={{ __html: props.text || \\"\\" }}
    />
  );
}

export default RawText;
"
`;

exports[`Preact > jsx > Javascript Test > Section 1`] = `
"/** @jsx h */
import { h, Fragment } from \\"preact\\";

function SectionComponent(props) {
  return (
    <section
      {...props.attributes}
      style={
        props.maxWidth && typeof props.maxWidth === \\"number\\"
          ? {
              maxWidth: props.maxWidth,
            }
          : undefined
      }
    >
      {props.children}
    </section>
  );
}

export default SectionComponent;
"
`;

exports[`Preact > jsx > Javascript Test > Select 1`] = `
"/** @jsx h */
import { h, Fragment } from \\"preact\\";
import { Builder } from \\"@builder.io/sdk\\";

function SelectComponent(props) {
  return (
    <select
      {...props.attributes}
      value={props.value}
      key={
        Builder.isEditing && props.defaultValue
          ? props.defaultValue
          : \\"default-key\\"
      }
      defaultValue={props.defaultValue}
      name={props.name}
    >
      {props.options?.map((option, index) => (
        <option value={option.value} data-index={index}>
          {option.name || option.value}
        </option>
      ))}
    </select>
  );
}

export default SelectComponent;
"
`;

exports[`Preact > jsx > Javascript Test > SlotDefault 1`] = `
"/** @jsx h */
import { h, Fragment } from \\"preact\\";

function SlotCode(props) {
  return (
    <div>
      <>
        {props.children || <div className=\\"default-slot\\">Default content</div>}
      </>
    </div>
  );
}

export default SlotCode;
"
`;

exports[`Preact > jsx > Javascript Test > SlotHtml 1`] = `
"/** @jsx h */
import { h, Fragment } from \\"preact\\";
import ContentSlotCode from \\"./content-slot-jsx.raw\\";

function SlotCode(props) {
  return (
    <div>
      <ContentSlotCode testing={<div>Hello</div>}></ContentSlotCode>
    </div>
  );
}

export default SlotCode;
"
`;

exports[`Preact > jsx > Javascript Test > SlotJsx 1`] = `
"/** @jsx h */
import { h, Fragment } from \\"preact\\";
import ContentSlotCode from \\"./content-slot-jsx.raw\\";

function SlotCode(props) {
  return (
    <div>
      <ContentSlotCode slotTesting={<div>Hello</div>} />
    </div>
  );
}

export default SlotCode;
"
`;

exports[`Preact > jsx > Javascript Test > SlotNamed 1`] = `
"/** @jsx h */
import { h, Fragment } from \\"preact\\";

function SlotCode(props) {
  return (
    <div>
      <>{props.myAwesomeSlot}</>
      <>{props.top}</>
      <>{props.left || \\"Default left\\"}</>
      <>{props.children || \\"Default Child\\"}</>
    </div>
  );
}

export default SlotCode;
"
`;

exports[`Preact > jsx > Javascript Test > Stamped.io 1`] = `
"/** @jsx h */
import { h, Fragment } from \\"preact\\";
import { useState, useEffect } from \\"preact/hooks\\";
import { kebabCase, snakeCase } from \\"lodash\\";

function SmileReviews(props) {
  const [reviews, setReviews] = useState(() => []);

  const [name, setName] = useState(() => \\"test\\");

  const [showReviewPrompt, setShowReviewPrompt] = useState(() => false);

  function kebabCaseValue() {
    return kebabCase(\\"testThat\\");
  }

  function snakeCaseValue() {
    return snakeCase(\\"testThis\\");
  }

  useEffect(() => {
    fetch(
      \`https://stamped.io/api/widget/reviews?storeUrl=builder-io.myshopify.com&apiKey=\${
        props.apiKey || \\"pubkey-8bbDq7W6w4sB3OWeM1HUy2s47702hM\\"
      }&productId=\${props.productId || \\"2410511106127\\"}\`
    )
      .then((res) => res.json())
      .then((data) => {
        setReviews(data.data);
      });
  }, []);

  return (
    <Fragment>
      <div data-user={name}>
        <button onClick={(event) => setShowReviewPrompt(true)}>
          Write a review
        </button>
        {showReviewPrompt || \\"asdf\\" ? (
          <Fragment>
            <input placeholder=\\"Email\\" />
            <input placeholder=\\"Title\\" className=\\"input\\" />
            <textarea
              placeholder=\\"How was your experience?\\"
              className=\\"textarea\\"
            />
            <button
              className=\\"button\\"
              onClick={(event) => {
                event.preventDefault();
                setShowReviewPrompt(false);
              }}
            >
              Submit
            </button>
          </Fragment>
        ) : null}
        {reviews?.map((review, index) => (
          <div className=\\"review\\" key={review.id}>
            <img className=\\"img\\" src={review.avatar} />
            <div className={showReviewPrompt ? \\"bg-primary\\" : \\"bg-secondary\\"}>
              <div>N: {index}</div>
              <div>{review.author}</div>
              <div>{review.reviewMessage}</div>
            </div>
          </div>
        ))}
      </div>
      <style jsx>{\`
        .input {
          display: block;
        }
        .textarea {
          display: block;
        }
        .button {
          display: block;
        }
        .review {
          margin: 10px;
          padding: 10px;
          background: white;
          display: flex;
          border-radius: 5px;
          box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
          -webkit-font-smoothing: antialiased;
        }
        .img {
          height: 30px;
          width: 30px;
          margin-right: 10px;
        }
      \`}</style>
    </Fragment>
  );
}

export default SmileReviews;
"
`;

exports[`Preact > jsx > Javascript Test > Submit 1`] = `
"/** @jsx h */
import { h, Fragment } from \\"preact\\";

function SubmitButton(props) {
  return (
    <button type=\\"submit\\" {...props.attributes}>
      {props.text}
    </button>
  );
}

export default SubmitButton;
"
`;

exports[`Preact > jsx > Javascript Test > Text 1`] = `
"/** @jsx h */
import { h, Fragment } from \\"preact\\";
import { useState } from \\"preact/hooks\\";
import { Builder } from \\"@builder.io/sdk\\";

function Text(props) {
  const [name, setName] = useState(() => \\"Decadef20\\");

  return (
    <div
      contentEditable={allowEditingText || undefined}
      data-name={{
        test: name || \\"any name\\",
      }}
      dangerouslySetInnerHTML={{
        __html:
          props.text ||
          props.content ||
          name ||
          '<p class=\\"text-lg\\">my name</p>',
      }}
    />
  );
}

export default Text;
"
`;

exports[`Preact > jsx > Javascript Test > Textarea 1`] = `
"/** @jsx h */
import { h, Fragment } from \\"preact\\";

function Textarea(props) {
  return (
    <textarea
      {...props.attributes}
      placeholder={props.placeholder}
      name={props.name}
      value={props.value}
      defaultValue={props.defaultValue}
    />
  );
}

export default Textarea;
"
`;

exports[`Preact > jsx > Javascript Test > Video 1`] = `
"/** @jsx h */
import { h, Fragment } from \\"preact\\";

function Video(props) {
  return (
    <video
      preload=\\"none\\"
      {...props.attributes}
      style={{
        width: \\"100%\\",
        height: \\"100%\\",
        ...props.attributes?.style,
        objectFit: props.fit,
        objectPosition: props.position,
        // Hack to get object fit to work as expected and
        // not have the video overflow
        borderRadius: 1,
      }}
      key={props.video || \\"no-src\\"}
      poster={props.posterImage}
      autoplay={props.autoPlay}
      muted={props.muted}
      controls={props.controls}
      loop={props.loop}
    />
  );
}

export default Video;
"
`;

exports[`Preact > jsx > Javascript Test > arrowFunctionInUseStore 1`] = `
"/** @jsx h */
import { h, Fragment } from \\"preact\\";
import { useState } from \\"preact/hooks\\";

function MyComponent(props) {
  const [name, setName] = useState(() => \\"steve\\");

  function setName(value) {
    setName(value);
  }

  function updateNameWithArrowFn(value) {
    setName(value);
  }

  return <div>Hello {name}</div>;
}

export default MyComponent;
"
`;

exports[`Preact > jsx > Javascript Test > basicForNoTagReference 1`] = `
"/** @jsx h */
import { h, Fragment } from \\"preact\\";
import { useState } from \\"preact/hooks\\";

function MyBasicForNoTagRefComponent(props) {
  const [name, setName] = useState(() => \\"VincentW\\");

  const [TagName, setTagName] = useState(() => \\"div\\");

  function TagNameGetter() {
    return \\"span\\";
  }

  const [Tag, setTag] = useState(() => \\"span\\");

  const TagNameGetterRef = TagNameGetter();

  return (
    <TagNameGetterRef>
      Hello <Tag>{name}</Tag>
      {props.actions?.map((action) => (
        <TagName>
          <action.icon />
          <span>{action.text}</span>
        </TagName>
      ))}
    </TagNameGetterRef>
  );
}

export default MyBasicForNoTagRefComponent;
"
`;

exports[`Preact > jsx > Javascript Test > basicForwardRef 1`] = `
"/** @jsx h */
import { h, Fragment } from \\"preact\\";
import { useState } from \\"preact/hooks\\";

function MyBasicForwardRefComponent(props) {
  const [name, setName] = useState(() => \\"PatrickJS\\");

  return (
    <Fragment>
      <div>
        <input
          className=\\"input\\"
          ref={props.inputRef}
          value={name}
          onChange={(event) => setName(event.target.value)}
        />
      </div>
      <style jsx>{\`
        .input {
          color: red;
        }
      \`}</style>
    </Fragment>
  );
}

export default MyBasicForwardRefComponent;
"
`;

exports[`Preact > jsx > Javascript Test > basicForwardRefMetadata 1`] = `
"/** @jsx h */
import { h, Fragment } from \\"preact\\";
import { useState } from \\"preact/hooks\\";

function MyBasicForwardRefComponent(props) {
  const [name, setName] = useState(() => \\"PatrickJS\\");

  return (
    <Fragment>
      <div>
        <input
          className=\\"input\\"
          ref={props.inputRef}
          value={name}
          onChange={(event) => setName(event.target.value)}
        />
      </div>
      <style jsx>{\`
        .input {
          color: red;
        }
      \`}</style>
    </Fragment>
  );
}

export default MyBasicForwardRefComponent;
"
`;

exports[`Preact > jsx > Javascript Test > basicOnUpdateReturn 1`] = `
"/** @jsx h */
import { h, Fragment } from \\"preact\\";
import { useState, useEffect } from \\"preact/hooks\\";

function MyBasicOnUpdateReturnComponent(props) {
  const [name, setName] = useState(() => \\"PatrickJS\\");

  useEffect(() => {
    const controller = new AbortController();
    const signal = controller.signal;
    fetch(\\"https://patrickjs.com/api/resource.json\\", {
      signal,
    })
      .then((response) => response.json())
      .then((data) => {
        setName(data.name);
      });
    return () => {
      if (!signal.aborted) {
        controller.abort();
      }
    };
  }, [name]);

  return <div>Hello! {name}</div>;
}

export default MyBasicOnUpdateReturnComponent;
"
`;

exports[`Preact > jsx > Javascript Test > class + ClassName + css 1`] = `
"/** @jsx h */
import { h, Fragment } from \\"preact\\";

function MyBasicComponent(props) {
  return (
    <Fragment>
      <div className=\\"test2 test div\\">
        Hello! I can run in React, Vue, Solid, or Liquid!
      </div>
      <style jsx>{\`
        .div {
          padding: 10px;
        }
      \`}</style>
    </Fragment>
  );
}

export default MyBasicComponent;
"
`;

exports[`Preact > jsx > Javascript Test > class + css 1`] = `
"/** @jsx h */
import { h, Fragment } from \\"preact\\";

function MyBasicComponent(props) {
  return (
    <Fragment>
      <div className=\\"test div\\">
        Hello! I can run in React, Vue, Solid, or Liquid!
      </div>
      <style jsx>{\`
        .div {
          padding: 10px;
        }
      \`}</style>
    </Fragment>
  );
}

export default MyBasicComponent;
"
`;

exports[`Preact > jsx > Javascript Test > className + css 1`] = `
"/** @jsx h */
import { h, Fragment } from \\"preact\\";

function MyBasicComponent(props) {
  return (
    <Fragment>
      <div className=\\"test div\\">
        Hello! I can run in React, Vue, Solid, or Liquid!
      </div>
      <style jsx>{\`
        .div {
          padding: 10px;
        }
      \`}</style>
    </Fragment>
  );
}

export default MyBasicComponent;
"
`;

exports[`Preact > jsx > Javascript Test > className 1`] = `
"/** @jsx h */
import { h, Fragment } from \\"preact\\";
import { useState } from \\"preact/hooks\\";

function ClassNameCode(props) {
  const [bindings, setBindings] = useState(() => \\"a binding\\");

  return (
    <div>
      <div className=\\"no binding\\">Without Binding</div>
      <div className={bindings}>With binding</div>
    </div>
  );
}

export default ClassNameCode;
"
`;

exports[`Preact > jsx > Javascript Test > classState 1`] = `
"/** @jsx h */
import { h, Fragment } from \\"preact\\";
import { useState } from \\"preact/hooks\\";

function MyBasicComponent(props) {
  const [classState, setClassState] = useState(() => \\"testClassName\\");

  const [styleState, setStyleState] = useState(() => ({
    color: \\"red\\",
  }));

  return (
    <Fragment>
      <div className={classState + \\" div\\"} style={styleState}>
        Hello! I can run in React, Vue, Solid, or Liquid!
      </div>
      <style jsx>{\`
        .div {
          padding: 10px;
        }
      \`}</style>
    </Fragment>
  );
}

export default MyBasicComponent;
"
`;

exports[`Preact > jsx > Javascript Test > componentWithContext 1`] = `
"/** @jsx h */
import { h, Fragment } from \\"preact\\";
import { useContext } from \\"preact/hooks\\";
import Context1 from \\"@dummy/1\\";
import Context2 from \\"@dummy/2\\";

function ComponentWithContext(props) {
  const foo = useContext(Context1);

  return (
    <Context2.Provider
      value={{
        bar: \\"baz\\",
      }}
    >
      <Context1.Provider
        value={{
          foo: \\"bar\\",

          content() {
            return props.content;
          },
        }}
      >
        <Fragment>{foo.value}</Fragment>
      </Context1.Provider>
    </Context2.Provider>
  );
}

export default ComponentWithContext;
"
`;

exports[`Preact > jsx > Javascript Test > componentWithContextMultiRoot 1`] = `
"/** @jsx h */
import { h, Fragment } from \\"preact\\";
import { useContext } from \\"preact/hooks\\";
import Context1 from \\"@dummy/1\\";
import Context2 from \\"@dummy/2\\";

function ComponentWithContext(props) {
  const foo = useContext(Context1);

  return (
    <Context2.Provider
      value={{
        bar: \\"baz\\",
      }}
    >
      <Context1.Provider
        value={{
          foo: \\"bar\\",

          content() {
            return props.content;
          },
        }}
      >
        <Fragment>
          <Fragment>{foo.value}</Fragment>
          <div>other</div>
        </Fragment>
      </Context1.Provider>
    </Context2.Provider>
  );
}

export default ComponentWithContext;
"
`;

exports[`Preact > jsx > Javascript Test > contentState 1`] = `
"/** @jsx h */
import { h, Fragment } from \\"preact\\";
import { useContext } from \\"preact/hooks\\";
import BuilderContext from \\"@dummy/context.js\\";

function RenderContent(props) {
  return (
    <BuilderContext.Provider
      value={{
        content: props.content,
        registeredComponents: props.customComponents,
      }}
    >
      <div>setting context</div>
    </BuilderContext.Provider>
  );
}

export default RenderContent;
"
`;

exports[`Preact > jsx > Javascript Test > defaultProps 1`] = `
"/** @jsx h */
import { h, Fragment } from \\"preact\\";

function Button(props) {
  return (
    <div>
      {props.link ? (
        <a
          {...props.attributes}
          href={props.link}
          target={props.openLinkInNewTab ? \\"_blank\\" : undefined}
        >
          {props.text}
        </a>
      ) : null}
      {!props.link ? (
        <button
          type=\\"button\\"
          {...props.attributes}
          onClick={(event) => props.onClick(event)}
        >
          {props.buttonText}
        </button>
      ) : null}
    </div>
  );
}

Button.defaultProps = {
  text: \\"default text\\",
  link: \\"https://builder.io/\\",
  openLinkInNewTab: false,
  onClick: () => {
    console.log(\\"hi\\");
  },
};

export default Button;
"
`;

exports[`Preact > jsx > Javascript Test > defaultPropsOutsideComponent 1`] = `
"/** @jsx h */
import { h, Fragment } from \\"preact\\";

function Button(props) {
  return (
    <div>
      {props.link ? (
        <a
          {...props.attributes}
          href={props.link}
          target={props.openLinkInNewTab ? \\"_blank\\" : undefined}
        >
          {props.text}
        </a>
      ) : null}
      {!props.link ? (
        <button
          type=\\"button\\"
          {...props.attributes}
          onClick={(event) => props.onClick(event)}
        >
          {props.text}
        </button>
      ) : null}
    </div>
  );
}

Button.defaultProps = {
  text: \\"default text\\",
  link: \\"https://builder.io/\\",
  openLinkInNewTab: false,
  onClick: () => {},
};

export default Button;
"
`;

exports[`Preact > jsx > Javascript Test > defaultValsWithTypes 1`] = `
"/** @jsx h */
import { h, Fragment } from \\"preact\\";

const DEFAULT_VALUES = {
  name: \\"Sami\\",
};

function ComponentWithTypes(props) {
  return <div> Hello {props.name || DEFAULT_VALUES.name}</div>;
}

export default ComponentWithTypes;
"
`;

exports[`Preact > jsx > Javascript Test > expressionState 1`] = `
"/** @jsx h */
import { h, Fragment } from \\"preact\\";
import { useState } from \\"preact/hooks\\";

function MyComponent(props) {
  const [refToUse, setRefToUse] = useState(() =>
    !(props.componentRef instanceof Function) ? props.componentRef : null
  );

  return <div>{refToUse}</div>;
}

export default MyComponent;
"
`;

exports[`Preact > jsx > Javascript Test > getterState 1`] = `
"/** @jsx h */
import { h, Fragment } from \\"preact\\";

function Button(props) {
  function foo2() {
    return props.foo + \\"foo\\";
  }

  function bar() {
    return \\"bar\\";
  }

  function baz(i) {
    return i + foo2().length;
  }

  return (
    <div>
      <p>{foo2()}</p>
      <p>{bar()}</p>
      <p>{baz(1)}</p>
    </div>
  );
}

export default Button;
"
`;

exports[`Preact > jsx > Javascript Test > import types 1`] = `
"/** @jsx h */
import { h, Fragment } from \\"preact\\";
import RenderBlock from \\"./builder-render-block.raw\\";

function RenderContent(props) {
  function getRenderContentProps(block, index) {
    return {
      block: block,
      index: index,
    };
  }

  return (
    <RenderBlock
      {...state.getRenderContentProps(props.renderContentProps.block, 0)}
    />
  );
}

export default RenderContent;
"
`;

exports[`Preact > jsx > Javascript Test > multipleOnUpdate 1`] = `
"/** @jsx h */
import { h, Fragment } from \\"preact\\";
import { useEffect } from \\"preact/hooks\\";

function MultipleOnUpdate(props) {
  useEffect(() => {
    console.log(\\"Runs on every update/rerender\\");
  });
  useEffect(() => {
    console.log(\\"Runs on every update/rerender as well\\");
  });

  return <div />;
}

export default MultipleOnUpdate;
"
`;

exports[`Preact > jsx > Javascript Test > multipleOnUpdateWithDeps 1`] = `
"/** @jsx h */
import { h, Fragment } from \\"preact\\";
import { useState, useEffect } from \\"preact/hooks\\";

function MultipleOnUpdateWithDeps(props) {
  const [a, setA] = useState(() => \\"a\\");

  const [b, setB] = useState(() => \\"b\\");

  const [c, setC] = useState(() => \\"c\\");

  const [d, setD] = useState(() => \\"d\\");

  useEffect(() => {
    console.log(\\"Runs when a or b changes\\", a, b);

    if (a === \\"a\\") {
      setA(\\"b\\");
    }
  }, [a, b]);
  useEffect(() => {
    console.log(\\"Runs when c or d changes\\", c, d);

    if (a === \\"a\\") {
      setA(\\"b\\");
    }
  }, [c, d]);

  return <div />;
}

export default MultipleOnUpdateWithDeps;
"
`;

exports[`Preact > jsx > Javascript Test > multipleSpreads 1`] = `
"/** @jsx h */
import { h, Fragment } from \\"preact\\";
import { useState } from \\"preact/hooks\\";

function MyBasicComponent(props) {
  const [attrs, setAttrs] = useState(() => ({
    hello: \\"world\\",
  }));

  return <input {...state.attrs} {...props} />;
}

export default MyBasicComponent;
"
`;

exports[`Preact > jsx > Javascript Test > nestedShow 1`] = `
"/** @jsx h */
import { h, Fragment } from \\"preact\\";

function NestedShow(props) {
  return (
    <Fragment>
      {props.conditionA ? (
        <Fragment>
          {!props.conditionB ? (
            <div>if condition A and condition B</div>
          ) : (
            <div>else-condition-B</div>
          )}
        </Fragment>
      ) : (
        <div>else-condition-A</div>
      )}
    </Fragment>
  );
}

export default NestedShow;
"
`;

exports[`Preact > jsx > Javascript Test > nestedStyles 1`] = `
"/** @jsx h */
import { h, Fragment } from \\"preact\\";

function NestedStyles(props) {
  return (
    <Fragment>
      <div className=\\"div\\">Hello world</div>
      <style jsx>{\`
        .div {
          display: flex;
          --bar: red;
          color: var(--bar);
        }
        @media (max-width: env(--mobile)) {
          .div {
            display: block;
          }
        }
        .div:hover {
          display: flex;
        }
        .div:active {
          display: inline;
        }
        .div .nested-selector {
          display: grid;
        }
        .div .nested-selector:hover {
          display: block;
        }
        .div.nested-selector:active {
          display: inline-block;
        }
      \`}</style>
    </Fragment>
  );
}

export default NestedStyles;
"
`;

exports[`Preact > jsx > Javascript Test > onEvent 1`] = `
"/** @jsx h */
import { h, Fragment } from \\"preact\\";
import { useRef, useEffect } from \\"preact/hooks\\";

function Embed(props) {
  const elem = useRef(null);
  function foo(event) {
    console.log(\\"test2\\");
  }

  function elem_onInitEditingBldr(event) {
    console.log(\\"test\\");
    foo(event);
  }

  useEffect(() => {
    elem.current?.addEventListener(\\"initEditingBldr\\", elem_onInitEditingBldr);
    return () =>
      elem.current?.removeEventListener(
        \\"initEditingBldr\\",
        elem_onInitEditingBldr
      );
  }, []);

  useEffect(() => {
    elem.current.dispatchEvent(new CustomEvent(\\"initEditingBldr\\"));
  }, []);

  return (
    <div className=\\"builder-embed\\" ref={elem}>
      <div>Test</div>
    </div>
  );
}

export default Embed;
"
`;

exports[`Preact > jsx > Javascript Test > onInit & onMount 1`] = `
"/** @jsx h */
import { h, Fragment } from \\"preact\\";
import { useRef, useEffect } from \\"preact/hooks\\";

function OnInit(props) {
  const hasInitialized = useRef(false);
  if (!hasInitialized.current) {
    console.log(\\"onInit\\");
    hasInitialized.current = true;
  }

  useEffect(() => {
    console.log(\\"onMount\\");
  }, []);

  return <div />;
}

export default OnInit;
"
`;

exports[`Preact > jsx > Javascript Test > onInit 1`] = `
"/** @jsx h */
import { h, Fragment } from \\"preact\\";
import { useState, useRef } from \\"preact/hooks\\";

export const defaultValues = {
  name: \\"PatrickJS\\",
};

function OnInit(props) {
  const [name, setName] = useState(() => \\"\\");

  const hasInitialized = useRef(false);
  if (!hasInitialized.current) {
    setName(defaultValues.name || props.name);
    console.log(\\"set defaults with props\\");
    hasInitialized.current = true;
  }

  return <div>Default name defined by parent {name}</div>;
}

export default OnInit;
"
`;

exports[`Preact > jsx > Javascript Test > onMount 1`] = `
"/** @jsx h */
import { h, Fragment } from \\"preact\\";
import { useEffect } from \\"preact/hooks\\";

function Comp(props) {
  useEffect(() => {
    console.log(\\"Runs on mount\\");
  }, []);

  useEffect(() => {
    return () => {
      console.log(\\"Runs on unMount\\");
    };
  }, []);

  return <div />;
}

export default Comp;
"
`;

exports[`Preact > jsx > Javascript Test > onMountMultiple 1`] = `
"/** @jsx h */
import { h, Fragment } from \\"preact\\";
import { useEffect } from \\"preact/hooks\\";

function Comp(props) {
  useEffect(() => {
    console.log(\\"Runs on mount\\");
  }, []);
  useEffect(() => {
    console.log(\\"Another one runs on Mount\\");
  }, []);
  useEffect(() => {
    console.log(\\"SSR runs on Mount\\");
  }, []);

  return <div />;
}

export default Comp;
"
`;

exports[`Preact > jsx > Javascript Test > onUpdate 1`] = `
"/** @jsx h */
import { h, Fragment } from \\"preact\\";
import { useEffect } from \\"preact/hooks\\";

function OnUpdate(props) {
  useEffect(() => {
    console.log(\\"Runs on every update/rerender\\");
  });

  return <div />;
}

export default OnUpdate;
"
`;

exports[`Preact > jsx > Javascript Test > onUpdateWithDeps 1`] = `
"/** @jsx h */
import { h, Fragment } from \\"preact\\";
import { useState, useEffect } from \\"preact/hooks\\";

function OnUpdateWithDeps(props) {
  const [a, setA] = useState(() => \\"a\\");

  const [b, setB] = useState(() => \\"b\\");

  useEffect(() => {
    console.log(\\"Runs when a, b or size changes\\", a, b, props.size);
  }, [a, b, props.size]);

  return <div />;
}

export default OnUpdateWithDeps;
"
`;

exports[`Preact > jsx > Javascript Test > preserveExportOrLocalStatement 1`] = `
"/** @jsx h */
import { h, Fragment } from \\"preact\\";

const b = 3;
const foo = () => {};
export const a = 3;
export const bar = () => {};
export function run(value) {}

function MyBasicComponent(props) {
  return <div />;
}

export default MyBasicComponent;
"
`;

exports[`Preact > jsx > Javascript Test > preserveTyping 1`] = `
"/** @jsx h */
import { h, Fragment } from \\"preact\\";

function MyBasicComponent(props) {
  return (
    <div>Hello! I can run in React, Vue, Solid, or Liquid! {props.name}</div>
  );
}

export default MyBasicComponent;
"
`;

exports[`Preact > jsx > Javascript Test > propsDestructure 1`] = `
"/** @jsx h */
import { h, Fragment } from \\"preact\\";
import { useState } from \\"preact/hooks\\";

function MyBasicComponent(props) {
  const [name, setName] = useState(() => \\"Decadef20\\");

  return (
    <div>
      {props.children}
      {props.type}
      Hello! I can run in React, Vue, Solid, or Liquid!
    </div>
  );
}

export default MyBasicComponent;
"
`;

exports[`Preact > jsx > Javascript Test > propsInterface 1`] = `
"/** @jsx h */
import { h, Fragment } from \\"preact\\";

function MyBasicComponent(props) {
  return (
    <div>Hello! I can run in React, Vue, Solid, or Liquid! {props.name}</div>
  );
}

export default MyBasicComponent;
"
`;

exports[`Preact > jsx > Javascript Test > propsType 1`] = `
"/** @jsx h */
import { h, Fragment } from \\"preact\\";

function MyBasicComponent(props) {
  return (
    <div>Hello! I can run in React, Vue, Solid, or Liquid! {props.name}</div>
  );
}

export default MyBasicComponent;
"
`;

exports[`Preact > jsx > Javascript Test > referencingFunInsideHook 1`] = `
"/** @jsx h */
import { h, Fragment } from \\"preact\\";
import { useEffect } from \\"preact/hooks\\";

function OnUpdate(props) {
  function foo(params) {}

  function bar() {}

  function zoo() {
    const params = {
      cb: bar,
    };
  }

  useEffect(() => {
    foo({
      someOption: bar,
    });
  });

  return <div />;
}

export default OnUpdate;
"
`;

exports[`Preact > jsx > Javascript Test > renderBlock 1`] = `
"/** @jsx h */
import { h, Fragment } from \\"preact\\";
import { useState } from \\"preact/hooks\\";
import { TARGET } from \\"../../constants/target.js\\";
import { evaluate } from \\"../../functions/evaluate.js\\";
import { extractTextStyles } from \\"../../functions/extract-text-styles.js\\";
import { getBlockActions } from \\"../../functions/get-block-actions.js\\";
import { getBlockComponentOptions } from \\"../../functions/get-block-component-options.js\\";
import { getBlockProperties } from \\"../../functions/get-block-properties.js\\";
import { getBlockTag } from \\"../../functions/get-block-tag.js\\";
import { getProcessedBlock } from \\"../../functions/get-processed-block.js\\";
import { getReactNativeBlockStyles } from \\"../../functions/get-react-native-block-styles.js\\";
import BlockStyles from \\"./block-styles\\";
import { isEmptyHtmlElement } from \\"./render-block.helpers.js\\";
import RenderComponentWithContext from \\"./render-component-with-context.js\\";
import RenderComponent from \\"./render-component\\";
import RenderRepeatedBlock from \\"./render-repeated-block\\";

function RenderBlock(props) {
  function component() {
    const componentName = getProcessedBlock({
      block: props.block,
      state: props.context.state,
      context: props.context.context,
      shouldEvaluateBindings: false,
    }).component?.name;

    if (!componentName) {
      return null;
    }

    const ref = props.context.registeredComponents[componentName];

    if (!ref) {
      // TODO: Public doc page with more info about this message
      console.warn(\`
          Could not find a registered component named \\"\${componentName}\\".
          If you registered it, is the file that registered it imported by the file that needs to render it?\`);
      return undefined;
    } else {
      return ref;
    }
  }

  function tag() {
    return getBlockTag(useBlock());
  }

  function useBlock() {
    return repeatItemData()
      ? props.block
      : getProcessedBlock({
          block: props.block,
          state: props.context.state,
          context: props.context.context,
          shouldEvaluateBindings: true,
        });
  }

  function actions() {
    return getBlockActions({
      block: useBlock(),
      state: props.context.state,
      context: props.context.context,
    });
  }

  function attributes() {
    const blockProperties = getBlockProperties(useBlock());
    return {
      ...blockProperties,
      ...(TARGET === \\"reactNative\\"
        ? {
            style: getReactNativeBlockStyles({
              block: useBlock(),
              context: props.context,
              blockStyles: blockProperties.style,
            }),
          }
        : {}),
    };
  }

  function shouldWrap() {
    return !component?.()?.noWrap;
  }

  function renderComponentProps() {
    return {
      blockChildren: useChildren(),
      componentRef: component?.()?.component,
      componentOptions: {
        ...getBlockComponentOptions(useBlock()),

        /**
         * These attributes are passed to the wrapper element when there is one. If \`noWrap\` is set to true, then
         * they are provided to the component itself directly.
         */
        ...(shouldWrap()
          ? {}
          : {
              attributes: { ...attributes(), ...actions() },
            }),
        customBreakpoints: childrenContext?.()?.content?.meta?.breakpoints,
      },
      context: childrenContext(),
    };
  }

  function useChildren() {
    // TO-DO: When should \`canHaveChildren\` dictate rendering?
    // This is currently commented out because some Builder components (e.g. Box) do not have \`canHaveChildren: true\`,
    // but still receive and need to render children.
    // return state.componentInfo?.canHaveChildren ? useBlock().children : [];
    return useBlock().children ?? [];
  }

  function childrenWithoutParentComponent() {
    /**
     * When there is no \`componentRef\`, there might still be children that need to be rendered. In this case,
     * we render them outside of \`componentRef\`.
     * NOTE: We make sure not to render this if \`repeatItemData\` is non-null, because that means we are rendering an array of
     * blocks, and the children will be repeated within those blocks.
     */
    const shouldRenderChildrenOutsideRef =
      !component?.()?.component && !repeatItemData();
    return shouldRenderChildrenOutsideRef ? useChildren() : [];
  }

  function repeatItemData() {
    /**
     * we don't use \`useBlock()\` here because the processing done within its logic includes evaluating the block's bindings,
     * which will not work if there is a repeat.
     */
    const { repeat, ...blockWithoutRepeat } = props.block;

    if (!repeat?.collection) {
      return undefined;
    }

    const itemsArray = evaluate({
      code: repeat.collection,
      state: props.context.state,
      context: props.context.context,
    });

    if (!Array.isArray(itemsArray)) {
      return undefined;
    }

    const collectionName = repeat.collection.split(\\".\\").pop();
    const itemNameToUse =
      repeat.itemName || (collectionName ? collectionName + \\"Item\\" : \\"item\\");
    const repeatArray = itemsArray.map((item, index) => ({
      context: {
        ...props.context,
        state: {
          ...props.context.state,
          $index: index,
          $item: item,
          [itemNameToUse]: item,
          [\`$\${itemNameToUse}Index\`]: index,
        },
      },
      block: blockWithoutRepeat,
    }));
    return repeatArray;
  }

  function inheritedTextStyles() {
    if (TARGET !== \\"reactNative\\") {
      return {};
    }

    const styles = getReactNativeBlockStyles({
      block: useBlock(),
      context: props.context,
      blockStyles: attributes().style,
    });
    return extractTextStyles(styles);
  }

  function childrenContext() {
    return {
      apiKey: props.context.apiKey,
      state: props.context.state,
      content: props.context.content,
      context: props.context.context,
      registeredComponents: props.context.registeredComponents,
      inheritedStyles: inheritedTextStyles(),
    };
  }

  function renderComponentTag() {
    if (TARGET === \\"reactNative\\") {
      return RenderComponentWithContext;
    } else if (TARGET === \\"vue3\\") {
      // vue3 expects a string for the component tag
      return \\"RenderComponent\\";
    } else {
      return RenderComponent;
    }
  }

  const [componentInfo, setComponentInfo] = useState(() => null);

  const RenderComponentTagRef = renderComponentTag();
  const TagRef = tag();

  return (
    <Fragment>
      {shouldWrap() ? (
        <Fragment>
          {isEmptyHtmlElement(tag()) ? (
            <TagRef {...attributes()} {...actions()} />
          ) : null}
          {!isEmptyHtmlElement(tag()) && repeatItemData() ? (
            <Fragment>
              {repeatItemData()?.map((data, index) => (
                <RenderRepeatedBlock
                  key={index}
                  repeatContext={data.context}
                  block={data.block}
                />
              ))}
            </Fragment>
          ) : null}
          {!isEmptyHtmlElement(tag()) && !repeatItemData() ? (
            <TagRef {...attributes()} {...actions()}>
              <RenderComponentTagRef {...renderComponentProps()} />
              {childrenWithoutParentComponent()?.map((child) => (
                <RenderBlock
                  key={\\"render-block-\\" + child.id}
                  block={child}
                  context={childrenContext()}
                />
              ))}
              {childrenWithoutParentComponent()?.map((child) => (
                <BlockStyles
                  key={\\"block-style-\\" + child.id}
                  block={child}
                  context={childrenContext()}
                />
              ))}
            </TagRef>
          ) : null}
        </Fragment>
      ) : (
        <Fragment>
          <RenderComponentTagRef {...renderComponentProps()} />
        </Fragment>
      )}
    </Fragment>
  );
}

export default RenderBlock;
"
`;

exports[`Preact > jsx > Javascript Test > renderContentExample 1`] = `
"/** @jsx h */
import { h, Fragment } from \\"preact\\";
import { useContext, useEffect } from \\"preact/hooks\\";
import BuilderContext from \\"@dummy/context.js\\";
import {
  dispatchNewContentToVisualEditor,
  sendComponentsToVisualEditor,
  trackClick,
} from \\"@dummy/injection-js\\";
import RenderBlocks from \\"@dummy/RenderBlocks\\";

function RenderContent(props) {
  useEffect(() => {
    sendComponentsToVisualEditor(props.customComponents);
  }, []);

  useEffect(() => {
    dispatchNewContentToVisualEditor(props.content);
  }, [props.content]);

  return (
    <Fragment>
      <BuilderContext.Provider
        value={{
          get content() {
            return 3;
          },

          get registeredComponents() {
            return 4;
          },
        }}
      >
        <div className=\\"div\\" onClick={(event) => trackClick(props.content.id)}>
          <RenderBlocks blocks={props.content.blocks} />
        </div>
      </BuilderContext.Provider>
      <style jsx>{\`
        .div {
          display: flex;
          flex-direction: columns;
        }
      \`}</style>
    </Fragment>
  );
}

export default RenderContent;
"
`;

exports[`Preact > jsx > Javascript Test > rootFragmentMultiNode 1`] = `
"/** @jsx h */
import { h, Fragment } from \\"preact\\";

function Button(props) {
  return (
    <Fragment>
      {props.link ? (
        <a
          {...props.attributes}
          href={props.link}
          target={props.openLinkInNewTab ? \\"_blank\\" : undefined}
        >
          {props.text}
        </a>
      ) : null}
      {!props.link ? (
        <button type=\\"button\\" {...props.attributes}>
          {props.text}
        </button>
      ) : null}
    </Fragment>
  );
}

export default Button;
"
`;

exports[`Preact > jsx > Javascript Test > rootShow 1`] = `
"/** @jsx h */
import { h, Fragment } from \\"preact\\";

function RenderStyles(props) {
  return (
    <Fragment>
      {props.foo === \\"bar\\" ? (
        <Fragment>
          <div>Bar</div>
        </Fragment>
      ) : (
        <div>Foo</div>
      )}
    </Fragment>
  );
}

export default RenderStyles;
"
`;

exports[`Preact > jsx > Javascript Test > self-referencing component 1`] = `
"/** @jsx h */
import { h, Fragment } from \\"preact\\";

function MyComponent(props) {
  return (
    <div>
      {props.name}
      {props.name === \\"Batman\\" ? <MyComponent name=\\"Bruce Wayne\\" /> : null}
    </div>
  );
}

export default MyComponent;
"
`;

exports[`Preact > jsx > Javascript Test > self-referencing component with children 1`] = `
"/** @jsx h */
import { h, Fragment } from \\"preact\\";

function MyComponent(props) {
  return (
    <div>
      {props.name}
      {props.children}
      {props.name === \\"Batman\\" ? (
        <MyComponent name=\\"Bruce\\">
          <div>Wayne</div>
        </MyComponent>
      ) : null}
    </div>
  );
}

export default MyComponent;
"
`;

exports[`Preact > jsx > Javascript Test > showExpressions 1`] = `
"/** @jsx h */
import { h, Fragment } from \\"preact\\";

function ShowWithOtherValues(props) {
  return (
    <div>
      {props.conditionA ? (
        <Fragment>Content0</Fragment>
      ) : (
        <Fragment>ContentA</Fragment>
      )}
      {props.conditionA ? <Fragment>ContentA</Fragment> : null}
      {props.conditionA ? <Fragment></Fragment> : <Fragment>ContentA</Fragment>}
      {props.conditionA ? (
        <Fragment>ContentB</Fragment>
      ) : (
        <Fragment>{undefined}</Fragment>
      )}
      {props.conditionA ? (
        <Fragment>{undefined}</Fragment>
      ) : (
        <Fragment>ContentB</Fragment>
      )}
      {props.conditionA ? <Fragment>ContentC</Fragment> : null}
      {props.conditionA ? <Fragment></Fragment> : <Fragment>ContentC</Fragment>}
      {props.conditionA ? <Fragment>ContentD</Fragment> : null}
      {props.conditionA ? <Fragment></Fragment> : <Fragment>ContentD</Fragment>}
      {props.conditionA ? (
        <Fragment>ContentE</Fragment>
      ) : (
        <Fragment>hello</Fragment>
      )}
      {props.conditionA ? (
        <Fragment>hello</Fragment>
      ) : (
        <Fragment>ContentE</Fragment>
      )}
      {props.conditionA ? (
        <Fragment>ContentF</Fragment>
      ) : (
        <Fragment>123</Fragment>
      )}
      {props.conditionA ? (
        <Fragment>123</Fragment>
      ) : (
        <Fragment>ContentF</Fragment>
      )}
      {props.conditionA === \\"Default\\" ? (
        <Fragment>4mb</Fragment>
      ) : props.conditionB === \\"Complete\\" ? (
        <Fragment>20mb</Fragment>
      ) : (
        <Fragment>9mb</Fragment>
      )}
      {props.conditionA === \\"Default\\" ? (
        <Fragment>
          {props.conditionB === \\"Complete\\" ? (
            <Fragment>20mb</Fragment>
          ) : (
            <Fragment>9mb</Fragment>
          )}
        </Fragment>
      ) : (
        <Fragment>4mb</Fragment>
      )}
    </div>
  );
}

export default ShowWithOtherValues;
"
`;

exports[`Preact > jsx > Javascript Test > showWithFor 1`] = `
"/** @jsx h */
import { h, Fragment } from \\"preact\\";

function NestedShow(props) {
  return (
    <Fragment>
      {props.conditionA ? (
        <Fragment>
          {props.items?.map((item, idx) => (
            <div key={idx}>{item}</div>
          ))}
        </Fragment>
      ) : (
        <div>else-condition-A</div>
      )}
    </Fragment>
  );
}

export default NestedShow;
"
`;

exports[`Preact > jsx > Javascript Test > showWithOtherValues 1`] = `
"/** @jsx h */
import { h, Fragment } from \\"preact\\";

function ShowWithOtherValues(props) {
  return (
    <div>
      {props.conditionA ? <Fragment>ContentA</Fragment> : null}
      {props.conditionA ? (
        <Fragment>ContentB</Fragment>
      ) : (
        <Fragment>{undefined}</Fragment>
      )}
      {props.conditionA ? <Fragment>ContentC</Fragment> : null}
      {props.conditionA ? <Fragment>ContentD</Fragment> : null}
      {props.conditionA ? (
        <Fragment>ContentE</Fragment>
      ) : (
        <Fragment>hello</Fragment>
      )}
      {props.conditionA ? (
        <Fragment>ContentF</Fragment>
      ) : (
        <Fragment>123</Fragment>
      )}
    </div>
  );
}

export default ShowWithOtherValues;
"
`;

exports[`Preact > jsx > Javascript Test > showWithRootText 1`] = `
"/** @jsx h */
import { h, Fragment } from \\"preact\\";

function ShowRootText(props) {
  return (
    <Fragment>
      {props.conditionA ? (
        <Fragment>ContentA</Fragment>
      ) : (
        <div>else-condition-A</div>
      )}
    </Fragment>
  );
}

export default ShowRootText;
"
`;

exports[`Preact > jsx > Javascript Test > signalsOnUpdate 1`] = `
"/** @jsx h */
import { h, Fragment } from \\"preact\\";
import { useEffect } from \\"preact/hooks\\";

function MyBasicComponent(props) {
  useEffect(() => {
    console.log(\\"props.id changed\\", props.id);
    console.log(\\"props.foo.value.bar.baz changed\\", props.foo.value.bar.baz);
  }, [props.id, props.foo.value.bar.baz]);

  return (
    <Fragment>
      <div className=\\"test div\\">
        {props.id}
        {props.foo.value.bar.baz}
      </div>
      <style jsx>{\`
        .div {
          padding: 10px;
        }
      \`}</style>
    </Fragment>
  );
}

export default MyBasicComponent;
"
`;

exports[`Preact > jsx > Javascript Test > spreadAttrs 1`] = `
"/** @jsx h */
import { h, Fragment } from \\"preact\\";

function MyBasicComponent(props) {
  return <input {...attrs} />;
}

export default MyBasicComponent;
"
`;

exports[`Preact > jsx > Javascript Test > spreadNestedProps 1`] = `
"/** @jsx h */
import { h, Fragment } from \\"preact\\";

function MyBasicComponent(props) {
  return <input {...props.nested} />;
}

export default MyBasicComponent;
"
`;

exports[`Preact > jsx > Javascript Test > spreadProps 1`] = `
"/** @jsx h */
import { h, Fragment } from \\"preact\\";

function MyBasicComponent(props) {
  return <input {...props} />;
}

export default MyBasicComponent;
"
`;

exports[`Preact > jsx > Javascript Test > string-literal-store 1`] = `
"/** @jsx h */
import { h, Fragment } from \\"preact\\";
import { useState } from \\"preact/hooks\\";

function StringLiteralStore(props) {
  const [foo, setFoo] = useState(() => 123);

  return <div>{foo}</div>;
}

export default StringLiteralStore;
"
`;

exports[`Preact > jsx > Javascript Test > styleClassAndCss 1`] = `
"/** @jsx h */
import { h, Fragment } from \\"preact\\";

function MyComponent(props) {
  return (
    <Fragment>
      <div
        className=\\"builder-column div\\"
        style={{
          width: \\"100%\\",
        }}
      />
      <style jsx>{\`
        .div {
          display: flex;
          flex-direction: column;
          align-items: stretch;
        }
      \`}</style>
    </Fragment>
  );
}

export default MyComponent;
"
`;

exports[`Preact > jsx > Javascript Test > stylePropClassAndCss 1`] = `
"/** @jsx h */
import { h, Fragment } from \\"preact\\";

function StylePropClassAndCss(props) {
  return (
    <Fragment>
      <div
        style={props.attributes.style}
        className={props.attributes.class + \\" div\\"}
      />
      <style jsx>{\`
        .div {
          display: flex;
          flex-direction: column;
          align-items: stretch;
        }
      \`}</style>
    </Fragment>
  );
}

export default StylePropClassAndCss;
"
`;

exports[`Preact > jsx > Javascript Test > subComponent 1`] = `
"/** @jsx h */
import { h, Fragment } from \\"preact\\";
import Foo from \\"./foo-sub-component\\";

function SubComponent(props) {
  return <Foo />;
}

export default SubComponent;
"
`;

exports[`Preact > jsx > Javascript Test > svgComponent 1`] = `
"/** @jsx h */
import { h, Fragment } from \\"preact\\";

function SvgComponent(props) {
  return (
    <svg
      fill=\\"none\\"
      role=\\"img\\"
      viewBox={\\"0 0 \\" + 42 + \\" \\" + 42}
      width={42}
      height={42}
    >
      <defs>
        <filter id=\\"prefix__filter0_f\\" filterUnits=\\"userSpaceOnUse\\">
          <feFlood result=\\"BackgroundImageFix\\" />
          <feBlend in=\\"SourceGraphic\\" in2=\\"BackgroundImageFix\\" result=\\"shape\\" />
          <feGaussianBlur result=\\"effect1_foregroundBlur\\" stdDeviation={7} />
        </filter>
      </defs>
    </svg>
  );
}

export default SvgComponent;
"
`;

exports[`Preact > jsx > Javascript Test > typeDependency 1`] = `
"/** @jsx h */
import { h, Fragment } from \\"preact\\";

function TypeDependency(props) {
  return <div>{props.foo}</div>;
}

export default TypeDependency;
"
`;

exports[`Preact > jsx > Javascript Test > use-style 1`] = `
"/** @jsx h */
import { h, Fragment } from \\"preact\\";

function MyComponent(props) {
  return (
    <Fragment>
      <button type=\\"button\\">Button</button>
      <style jsx>{\`
        button {
          background: blue;
          color: white;
          font-size: 12px;
          outline: 1px solid black;
        }
      \`}</style>
    </Fragment>
  );
}

export default MyComponent;
"
`;

exports[`Preact > jsx > Javascript Test > use-style-and-css 1`] = `
"/** @jsx h */
import { h, Fragment } from \\"preact\\";

function MyComponent(props) {
  return (
    <Fragment>
      <button type=\\"button\\" className=\\"button\\">
        Button
      </button>
      <style jsx>{\`
        button {
          font-size: 12px;
          outline: 1px solid black;
        }

        .button {
          background: blue;
          color: white;
        }
      \`}</style>
    </Fragment>
  );
}

export default MyComponent;
"
`;

exports[`Preact > jsx > Javascript Test > use-style-outside-component 1`] = `
"/** @jsx h */
import { h, Fragment } from \\"preact\\";

function MyComponent(props) {
  return (
    <Fragment>
      <button type=\\"button\\">Button</button>
      <style jsx>{\`
        button {
          background: blue;
          color: white;
          font-size: 12px;
          outline: 1px solid black;
        }
      \`}</style>
    </Fragment>
  );
}

export default MyComponent;
"
`;

exports[`Preact > jsx > Javascript Test > useTarget 1`] = `
"/** @jsx h */
import { h, Fragment } from \\"preact\\";
import { useState, useEffect } from \\"preact/hooks\\";

function UseTargetComponent(props) {
  function name() {
    const prefix = \\"p\\";
    return prefix + \\"foo\\";
  }

  const [lastName, setLastName] = useState(() => \\"bar\\");

  useEffect(() => {}, []);

  return <div>{name()}</div>;
}

export default UseTargetComponent;
"
`;

exports[`Preact > jsx > Javascript Test > webComponent 1`] = `
"/** @jsx h */
import { h, Fragment } from \\"preact\\";
import { useRef } from \\"preact/hooks\\";
import { register } from \\"swiper/element/bundle\\";

function MyBasicWebComponent(props) {
  const hasInitialized = useRef(false);
  if (!hasInitialized.current) {
    register();
    hasInitialized.current = true;
  }

  return (
    <swiper-container slides-per-view=\\"3\\" navigation=\\"true\\" pagination=\\"true\\">
      <swiper-slide>Slide 1</swiper-slide>
      <swiper-slide>Slide 2</swiper-slide>
      <swiper-slide>Slide 3</swiper-slide>
    </swiper-container>
  );
}

export default MyBasicWebComponent;
"
`;

exports[`Preact > jsx > Remove Internal mitosis package 1`] = `
"/** @jsx h */
import { h, Fragment } from \\"preact\\";
import { useState } from \\"preact/hooks\\";

function MyBasicComponent(props) {
  const [name, setName] = useState(() => \\"PatrickJS\\");

  return (
    <div>Hello {name}! I can run in React, Qwik, Vue, Solid, or Liquid!</div>
  );
}

export default MyBasicComponent;
"
`;

exports[`Preact > jsx > Typescript Test > AdvancedRef 1`] = `
"/** @jsx h */
import { h, Fragment } from \\"preact\\";
import { useState, useRef, useEffect } from \\"preact/hooks\\";

export interface Props {
  showInput: boolean;
}

function MyBasicRefComponent(props: Props) {
  const inputRef = useRef<HTMLInputElement>(null);
  const inputNoArgRef = useRef<HTMLLabelElement>(null);
  const [name, setName] = useState(() => \\"PatrickJS\\");

  function onBlur() {
    // Maintain focus
    inputRef.current.focus();
  }

  function lowerCaseName() {
    return name.toLowerCase();
  }

  useEffect(() => {
    console.log(\\"Received an update\\");
  }, [inputRef.current, inputNoArgRef.current]);

  return (
    <Fragment>
      <div>
        {props.showInput ? (
          <Fragment>
            <input
              className=\\"input\\"
              ref={inputRef}
              value={name}
              onBlur={(event) => onBlur()}
              onChange={(event) => setName(event.target.value)}
            />
            <label htmlFor=\\"cars\\" ref={inputNoArgRef}>
              Choose a car:
            </label>
            <select name=\\"cars\\" id=\\"cars\\">
              <option value=\\"supra\\">GR Supra</option>
              <option value=\\"86\\">GR 86</option>
            </select>
          </Fragment>
        ) : null}
        Hello
        {lowerCaseName()}! I can run in React, Qwik, Vue, Solid, or Web
        Component!
      </div>
      <style jsx>{\`
        .input {
          color: red;
        }
      \`}</style>
    </Fragment>
  );
}

export default MyBasicRefComponent;
"
`;

exports[`Preact > jsx > Typescript Test > Basic 1`] = `
"/** @jsx h */
import { h, Fragment } from \\"preact\\";
import { useState } from \\"preact/hooks\\";

export interface MyBasicComponentProps {
  id: string;
}

export const DEFAULT_VALUES = {
  name: \\"Steve\\",
};

function MyBasicComponent(props: MyBasicComponentProps) {
  const [name, setName] = useState(() => \\"Steve\\");

  function underscore_fn_name() {
    return \\"bar\\";
  }

  const [age, setAge] = useState(() => 1);

  const [sports, setSports] = useState(() => [\\"\\"]);

  return (
    <Fragment>
      <div className=\\"test div\\">
        <input
          value={DEFAULT_VALUES.name || name}
          onChange={(myEvent) => setName(myEvent.target.value)}
        />
        Hello! I can run in React, Vue, Solid, or Liquid!
      </div>
      <style jsx>{\`
        .div {
          padding: 10px;
        }
      \`}</style>
    </Fragment>
  );
}

export default MyBasicComponent;
"
`;

exports[`Preact > jsx > Typescript Test > Basic Context 1`] = `
"/** @jsx h */
import { h, Fragment } from \\"preact\\";
import { useState, useContext, useRef, useEffect } from \\"preact/hooks\\";
import { Injector, MyService, createInjector } from \\"@dummy/injection-js\\";

function MyBasicComponent(props: any) {
  const [name, setName] = useState(() => \\"PatrickJS\\");

  function onChange() {
    const change = myService.method(\\"change\\");
    console.log(change);
  }

  const myService = useContext(MyService);

  const hasInitialized = useRef(false);
  if (!hasInitialized.current) {
    const hi = myService.method(\\"hi\\");
    console.log(hi);
    hasInitialized.current = true;
  }

  useEffect(() => {
    const bye = myService.method(\\"hi\\");
    console.log(bye);
  }, []);

  return (
    <Injector.Provider value={createInjector()}>
      <div>
        {myService.method(\\"hello\\") + name}
        Hello! I can run in React, Vue, Solid, or Liquid!
        <input onChange={(event) => onChange} />
      </div>
    </Injector.Provider>
  );
}

export default MyBasicComponent;
"
`;

exports[`Preact > jsx > Typescript Test > Basic OnMount Update 1`] = `
"/** @jsx h */
import { h, Fragment } from \\"preact\\";
import { useState, useRef, useEffect } from \\"preact/hooks\\";

export interface Props {
  hi: string;
  bye: string;
}

function MyBasicOnMountUpdateComponent(props: Props) {
  const [name, setName] = useState(() => \\"PatrickJS\\");

  const [names, setNames] = useState(() => [\\"Steve\\", \\"PatrickJS\\"]);

  const hasInitialized = useRef(false);
  if (!hasInitialized.current) {
    setName(\\"PatrickJS onInit\\" + props.hi);
    hasInitialized.current = true;
  }

  useEffect(() => {
    setName(\\"PatrickJS onMount\\" + props.bye);
  }, []);

  return <div>Hello {name}</div>;
}

export default MyBasicOnMountUpdateComponent;
"
`;

exports[`Preact > jsx > Typescript Test > Basic Outputs 1`] = `
"/** @jsx h */
import { h, Fragment } from \\"preact\\";
import { useState, useEffect } from \\"preact/hooks\\";

function MyBasicOutputsComponent(props: any) {
  const [name, setName] = useState(() => \\"PatrickJS\\");

  useEffect(() => {
    props.onMessage(name);
    props.onEvent(props.message);
  }, []);

  return <div />;
}

export default MyBasicOutputsComponent;
"
`;

exports[`Preact > jsx > Typescript Test > Basic Outputs Meta 1`] = `
"/** @jsx h */
import { h, Fragment } from \\"preact\\";
import { useState, useEffect } from \\"preact/hooks\\";

function MyBasicOutputsComponent(props: any) {
  const [name, setName] = useState(() => \\"PatrickJS\\");

  useEffect(() => {
    props.onMessage(name);
    props.onEvent(props.message);
  }, []);

  return <div />;
}

export default MyBasicOutputsComponent;
"
`;

exports[`Preact > jsx > Typescript Test > BasicAttribute 1`] = `
"/** @jsx h */
import { h, Fragment } from \\"preact\\";

function MyComponent(props: any) {
  return <input autoCapitalize=\\"on\\" autoComplete=\\"on\\" spellCheck />;
}

export default MyComponent;
"
`;

exports[`Preact > jsx > Typescript Test > BasicBooleanAttribute 1`] = `
"/** @jsx h */
import { h, Fragment } from \\"preact\\";

type Props = {
  children: any;
  type: string;
};
import MyBooleanAttributeComponent from \\"./basic-boolean-attribute-component.raw\\";

function MyBooleanAttribute(props: Props) {
  return (
    <div>
      {props.children ? (
        <Fragment>
          {props.children}
          {props.type}
        </Fragment>
      ) : null}
      <MyBooleanAttributeComponent toggle />
      <MyBooleanAttributeComponent toggle />
      <MyBooleanAttributeComponent list={null} />
    </div>
  );
}

export default MyBooleanAttribute;
"
`;

exports[`Preact > jsx > Typescript Test > BasicChildComponent 1`] = `
"/** @jsx h */
import { h, Fragment } from \\"preact\\";
import { useState } from \\"preact/hooks\\";
import MyBasicOnMountUpdateComponent from \\"./basic-onMount-update.raw\\";
import MyBasicComponent from \\"./basic.raw\\";

function MyBasicChildComponent(props: any) {
  const [name, setName] = useState(() => \\"Steve\\");

  const [dev, setDev] = useState(() => \\"PatrickJS\\");

  return (
    <div>
      <MyBasicComponent id={dev} />
      <div>
        <MyBasicOnMountUpdateComponent hi={name} bye={dev} />
      </div>
    </div>
  );
}

export default MyBasicChildComponent;
"
`;

exports[`Preact > jsx > Typescript Test > BasicFor 1`] = `
"/** @jsx h */
import { h, Fragment } from \\"preact\\";
import { useState, useEffect } from \\"preact/hooks\\";

function MyBasicForComponent(props: any) {
  const [name, setName] = useState(() => \\"PatrickJS\\");

  const [names, setNames] = useState(() => [\\"Steve\\", \\"PatrickJS\\"]);

  useEffect(() => {
    console.log(\\"onMount code\\");
  }, []);

  return (
    <div>
      {names?.map((person) => (
        <Fragment>
          <input
            value={name}
            onChange={(event) => {
              setName(event.target.value + \\" and \\" + person);
            }}
          />
          Hello
          {person}! I can run in Qwik, Web Component, React, Vue, Solid, or
          Liquid!
        </Fragment>
      ))}
    </div>
  );
}

export default MyBasicForComponent;
"
`;

exports[`Preact > jsx > Typescript Test > BasicRef 1`] = `
"/** @jsx h */
import { h, Fragment } from \\"preact\\";
import { useState, useRef } from \\"preact/hooks\\";

export interface Props {
  showInput: boolean;
}

function MyBasicRefComponent(props: Props) {
  const inputRef = useRef<HTMLInputElement>(null);
  const inputNoArgRef = useRef<HTMLLabelElement>(null);
  const [name, setName] = useState(() => \\"PatrickJS\\");

  function onBlur() {
    // Maintain focus
    inputRef.current.focus();
  }

  function lowerCaseName() {
    return name.toLowerCase();
  }

  return (
    <Fragment>
      <div>
        {props.showInput ? (
          <Fragment>
            <input
              className=\\"input\\"
              ref={inputRef}
              value={name}
              onBlur={(event) => onBlur()}
              onChange={(event) => setName(event.target.value)}
            />
            <label htmlFor=\\"cars\\" ref={inputNoArgRef}>
              Choose a car:
            </label>
            <select name=\\"cars\\" id=\\"cars\\">
              <option value=\\"supra\\">GR Supra</option>
              <option value=\\"86\\">GR 86</option>
            </select>
          </Fragment>
        ) : null}
        Hello
        {lowerCaseName()}! I can run in React, Qwik, Vue, Solid, or Web
        Component!
      </div>
      <style jsx>{\`
        .input {
          color: red;
        }
      \`}</style>
    </Fragment>
  );
}

export default MyBasicRefComponent;
"
`;

exports[`Preact > jsx > Typescript Test > BasicRefAssignment 1`] = `
"/** @jsx h */
import { h, Fragment } from \\"preact\\";
import { useRef } from \\"preact/hooks\\";

export interface Props {
  showInput: boolean;
}

function MyBasicRefAssignmentComponent(props: Props) {
  const holdValueRef = useRef(\\"Patrick\\");
  function handlerClick(event: Event) {
    event.preventDefault();
    console.log(\\"current value\\", holdValueRef.current);
    holdValueRef.current = holdValueRef.current + \\"JS\\";
  }

  return (
    <div>
      <button onClick={(evt) => handlerClick(evt)}>Click</button>
    </div>
  );
}

export default MyBasicRefAssignmentComponent;
"
`;

exports[`Preact > jsx > Typescript Test > BasicRefPrevious 1`] = `
"/** @jsx h */
import { h, Fragment } from \\"preact\\";
import { useState, useRef, useEffect } from \\"preact/hooks\\";

export interface Props {
  showInput: boolean;
}

export function usePrevious<T>(value: T) {
  // The ref object is a generic container whose current property is mutable ...
  // ... and can hold any value, similar to an instance property on a class
  let ref = useRef<T>(null); // Store current value in ref

  onUpdate(() => {
    ref = value;
  }, [value]); // Only re-run if value changes
  // Return previous value (happens before update in useEffect above)

  return ref;
}

function MyPreviousComponent(props: Props) {
  const [count, setCount] = useState(() => 0);

  const prevCount = useRef(count);

  useEffect(() => {
    prevCount.current = count;
  }, [count]);

  return (
    <div>
      <h1>
        Now: {count}, before: {prevCount.current}
      </h1>
      <button onClick={(event) => setCount(1)}>Increment</button>
    </div>
  );
}

export default MyPreviousComponent;
"
`;

exports[`Preact > jsx > Typescript Test > Button 1`] = `
"/** @jsx h */
import { h, Fragment } from \\"preact\\";

export interface ButtonProps {
  attributes?: any;
  text?: string;
  link?: string;
  openLinkInNewTab?: boolean;
}

function Button(props: ButtonProps) {
  return (
    <div>
      {props.link ? (
        <a
          {...props.attributes}
          href={props.link}
          target={props.openLinkInNewTab ? \\"_blank\\" : undefined}
        >
          {props.text}
        </a>
      ) : null}
      {!props.link ? (
        <button type=\\"button\\" {...props.attributes}>
          {props.text}
        </button>
      ) : null}
    </div>
  );
}

export default Button;
"
`;

exports[`Preact > jsx > Typescript Test > Columns 1`] = `
"/** @jsx h */
import { h, Fragment } from \\"preact\\";

type Column = {
  content: any; // TODO: Implement this when support for dynamic CSS lands

  width?: number;
};
export interface ColumnProps {
  columns?: Column[]; // TODO: Implement this when support for dynamic CSS lands

  space?: number; // TODO: Implement this when support for dynamic CSS lands

  stackColumnsAt?: \\"tablet\\" | \\"mobile\\" | \\"never\\"; // TODO: Implement this when support for dynamic CSS lands

  reverseColumnsWhenStacked?: boolean;
}

function Column(props: ColumnProps) {
  function getColumns() {
    return props.columns || [];
  }

  function getGutterSize() {
    return typeof props.space === \\"number\\" ? props.space || 0 : 20;
  }

  function getWidth(index: number) {
    const columns = getColumns();
    return (columns[index] && columns[index].width) || 100 / columns.length;
  }

  function getColumnCssWidth(index: number) {
    const columns = getColumns();
    const gutterSize = getGutterSize();
    const subtractWidth = (gutterSize * (columns.length - 1)) / columns.length;
    return \`calc(\${getWidth(index)}% - \${subtractWidth}px)\`;
  }

  return (
    <Fragment>
      <div className=\\"builder-columns div\\">
        {props.columns?.map((column, index) => (
          <div className=\\"builder-column div-2\\">
            {column.content}
            {index}
          </div>
        ))}
      </div>
      <style jsx>{\`
        .div {
          display: flex;
          flex-direction: column;
          align-items: stretch;
          line-height: normal;
        }
        @media (max-width: 999px) {
          .div {
            flex-direction: row;
          }
        }
        @media (max-width: 639px) {
          .div {
            flex-direction: row-reverse;
          }
        }
        .div-2 {
          flex-grow: 1;
        }
      \`}</style>
    </Fragment>
  );
}

export default Column;
"
`;

exports[`Preact > jsx > Typescript Test > ContentSlotHtml 1`] = `
"/** @jsx h */
import { h, Fragment } from \\"preact\\";

type Props = {
  [key: string]: string | JSX.Element;
  slotTesting: JSX.Element;
};
import type { JSX } from \\"../../../../jsx-runtime\\";

function ContentSlotCode(props: Props) {
  return (
    <div>
      <>{props.slotTesting}</>
      <div>
        <hr />
      </div>
      <div>
        <>{props.children}</>
      </div>
    </div>
  );
}

export default ContentSlotCode;
"
`;

exports[`Preact > jsx > Typescript Test > ContentSlotJSX 1`] = `
"/** @jsx h */
import { h, Fragment } from \\"preact\\";
import { useState } from \\"preact/hooks\\";

type Props = {
  [key: string]: string | JSX.Element;
};
import type { JSX } from \\"../../../../jsx-runtime\\";

function ContentSlotJsxCode(props: Props) {
  const [name, setName] = useState(() => \\"king\\");

  const [showContent, setShowContent] = useState(() => false);

  function cls() {
    return props.slotContent && props.children ? \`\${name}-content\` : \\"\\";
  }

  function show() {
    props.slotContent ? 1 : \\"\\";
  }

  return (
    <Fragment>
      {props.slotReference ? (
        <Fragment>
          <div
            name={props.slotContent ? \\"name1\\" : \\"name2\\"}
            title={props.slotContent ? \\"title1\\" : \\"title2\\"}
            {...props.attributes}
            onClick={(event) => show()}
            className={cls()}
          >
            {showContent && props.slotContent ? (
              <>{props.content || \\"{props.content}\\"}</>
            ) : null}
            <div>
              <hr />
            </div>
            <div>{props.children}</div>
          </div>
        </Fragment>
      ) : null}
    </Fragment>
  );
}

ContentSlotJsxCode.defaultProps = {
  content: \\"\\",
  slotReference: undefined,
  slotContent: undefined,
};

export default ContentSlotJsxCode;
"
`;

exports[`Preact > jsx > Typescript Test > CustomCode 1`] = `
"/** @jsx h */
import { h, Fragment } from \\"preact\\";
import { useState, useRef, useEffect } from \\"preact/hooks\\";

export interface CustomCodeProps {
  code: string;
  replaceNodes?: boolean;
}

function CustomCode(props: CustomCodeProps) {
  const elem = useRef<HTMLDivElement>(null);
  const [scriptsInserted, setScriptsInserted] = useState(() => []);

  const [scriptsRun, setScriptsRun] = useState(() => []);

  function findAndRunScripts() {
    // TODO: Move this function to standalone one in '@builder.io/utils'
    if (elem.current && typeof window !== \\"undefined\\") {
      /** @type {HTMLScriptElement[]} */
      const scripts = elem.current.getElementsByTagName(\\"script\\");

      for (let i = 0; i < scripts.length; i++) {
        const script = scripts[i];

        if (script.src) {
          if (scriptsInserted.includes(script.src)) {
            continue;
          }

          scriptsInserted.push(script.src);
          const newScript = document.createElement(\\"script\\");
          newScript.async = true;
          newScript.src = script.src;
          document.head.appendChild(newScript);
        } else if (
          !script.type ||
          [
            \\"text/javascript\\",
            \\"application/javascript\\",
            \\"application/ecmascript\\",
          ].includes(script.type)
        ) {
          if (scriptsRun.includes(script.innerText)) {
            continue;
          }

          try {
            scriptsRun.push(script.innerText);
            new Function(script.innerText)();
          } catch (error) {
            console.warn(\\"\`CustomCode\`: Error running script:\\", error);
          }
        }
      }
    }
  }

  useEffect(() => {
    findAndRunScripts();
  }, []);

  return (
    <div
      ref={elem}
      className={
        \\"builder-custom-code\\" + (props.replaceNodes ? \\" replace-nodes\\" : \\"\\")
      }
      dangerouslySetInnerHTML={{ __html: props.code }}
    />
  );
}

export default CustomCode;
"
`;

exports[`Preact > jsx > Typescript Test > Embed 1`] = `
"/** @jsx h */
import { h, Fragment } from \\"preact\\";
import { useState, useRef, useEffect } from \\"preact/hooks\\";

export interface CustomCodeProps {
  code: string;
  replaceNodes?: boolean;
}

function CustomCode(props: CustomCodeProps) {
  const elem = useRef<HTMLDivElement>(null);
  const [scriptsInserted, setScriptsInserted] = useState(() => []);

  const [scriptsRun, setScriptsRun] = useState(() => []);

  function findAndRunScripts() {
    // TODO: Move this function to standalone one in '@builder.io/utils'
    if (elem.current && typeof window !== \\"undefined\\") {
      /** @type {HTMLScriptElement[]} */
      const scripts = elem.current.getElementsByTagName(\\"script\\");

      for (let i = 0; i < scripts.length; i++) {
        const script = scripts[i];

        if (script.src) {
          if (scriptsInserted.includes(script.src)) {
            continue;
          }

          scriptsInserted.push(script.src);
          const newScript = document.createElement(\\"script\\");
          newScript.async = true;
          newScript.src = script.src;
          document.head.appendChild(newScript);
        } else if (
          !script.type ||
          [
            \\"text/javascript\\",
            \\"application/javascript\\",
            \\"application/ecmascript\\",
          ].includes(script.type)
        ) {
          if (scriptsRun.includes(script.innerText)) {
            continue;
          }

          try {
            scriptsRun.push(script.innerText);
            new Function(script.innerText)();
          } catch (error) {
            console.warn(\\"\`CustomCode\`: Error running script:\\", error);
          }
        }
      }
    }
  }

  useEffect(() => {
    findAndRunScripts();
  }, []);

  return (
    <div
      ref={elem}
      className={
        \\"builder-custom-code\\" + (props.replaceNodes ? \\" replace-nodes\\" : \\"\\")
      }
      dangerouslySetInnerHTML={{ __html: props.code }}
    />
  );
}

export default CustomCode;
"
`;

exports[`Preact > jsx > Typescript Test > Form 1`] = `
"/** @jsx h */
import { h, Fragment } from \\"preact\\";
import { useState, useRef } from \\"preact/hooks\\";

export interface FormProps {
  attributes?: any;
  name?: string;
  action?: string;
  validate?: boolean;
  method?: string;
  builderBlock?: BuilderElement;
  sendSubmissionsTo?: string;
  sendSubmissionsToEmail?: string;
  sendWithJs?: boolean;
  contentType?: string;
  customHeaders?: {
    [key: string]: string;
  };
  successUrl?: string;
  previewState?: FormState;
  successMessage?: BuilderElement[];
  errorMessage?: BuilderElement[];
  sendingMessage?: BuilderElement[];
  resetFormOnSubmit?: boolean;
  errorMessagePath?: string;
}
export type FormState = \\"unsubmitted\\" | \\"sending\\" | \\"success\\" | \\"error\\";
import { Builder, BuilderElement, builder } from \\"@builder.io/sdk\\";
import {
  BuilderBlock as BuilderBlockComponent,
  BuilderBlocks,
  get,
  set,
} from \\"@fake\\";

function FormComponent(props: FormProps) {
  const formRef = useRef<HTMLFormElement>(null);
  const [formState, setFormState] = useState(() => \\"unsubmitted\\");

  const [responseData, setResponseData] = useState(() => null);

  const [formErrorMessage, setFormErrorMessage] = useState(() => \\"\\");

  function submissionState() {
    return (Builder.isEditing && props.previewState) || formState;
  }

  function onSubmit(
    event: Event & {
      currentTarget: HTMLFormElement;
    }
  ) {
    const sendWithJs = props.sendWithJs || props.sendSubmissionsTo === \\"email\\";

    if (props.sendSubmissionsTo === \\"zapier\\") {
      event.preventDefault();
    } else if (sendWithJs) {
      if (!(props.action || props.sendSubmissionsTo === \\"email\\")) {
        event.preventDefault();
        return;
      }

      event.preventDefault();
      const el = event.currentTarget;
      const headers = props.customHeaders || {};
      let body: any;
      const formData = new FormData(el); // TODO: maybe support null

      const formPairs: {
        key: string;
        value: File | boolean | number | string | FileList;
      }[] = Array.from(
        event.currentTarget.querySelectorAll(\\"input,select,textarea\\")
      )
        .filter((el) => !!(el as HTMLInputElement).name)
        .map((el) => {
          let value: any;
          const key = (el as HTMLImageElement).name;

          if (el instanceof HTMLInputElement) {
            if (el.type === \\"radio\\") {
              if (el.checked) {
                value = el.name;
                return {
                  key,
                  value,
                };
              }
            } else if (el.type === \\"checkbox\\") {
              value = el.checked;
            } else if (el.type === \\"number\\" || el.type === \\"range\\") {
              const num = el.valueAsNumber;

              if (!isNaN(num)) {
                value = num;
              }
            } else if (el.type === \\"file\\") {
              // TODO: one vs multiple files
              value = el.files;
            } else {
              value = el.value;
            }
          } else {
            value = (el as HTMLInputElement).value;
          }

          return {
            key,
            value,
          };
        });
      let contentType = props.contentType;

      if (props.sendSubmissionsTo === \\"email\\") {
        contentType = \\"multipart/form-data\\";
      }

      Array.from(formPairs).forEach(({ value }) => {
        if (
          value instanceof File ||
          (Array.isArray(value) && value[0] instanceof File) ||
          value instanceof FileList
        ) {
          contentType = \\"multipart/form-data\\";
        }
      }); // TODO: send as urlEncoded or multipart by default
      // because of ease of use and reliability in browser API
      // for encoding the form?

      if (contentType !== \\"application/json\\") {
        body = formData;
      } else {
        // Json
        const json = {};
        Array.from(formPairs).forEach(({ value, key }) => {
          set(json, key, value);
        });
        body = JSON.stringify(json);
      }

      if (contentType && contentType !== \\"multipart/form-data\\") {
        if (
          /* Zapier doesn't allow content-type header to be sent from browsers */ !(
            sendWithJs && props.action?.includes(\\"zapier.com\\")
          )
        ) {
          headers[\\"content-type\\"] = contentType;
        }
      }
      const presubmitEvent = new CustomEvent(\\"presubmit\\", { detail: { body } });
      if (formRef.current) {
        formRef.current.dispatchEvent(presubmitEvent);
        if (presubmitEvent.defaultPrevented) {
          return;
        }
      }
      setFormState(\\"sending\\");
      const formUrl = \`\${
        builder.env === \\"dev\\" ? \\"http://localhost:5000\\" : \\"https://builder.io\\"
      }/api/v1/form-submit?apiKey=\${builder.apiKey}&to=\${btoa(
        props.sendSubmissionsToEmail || \\"\\"
      )}&name=\${encodeURIComponent(props.name || \\"\\")}\`;
      fetch(
        props.sendSubmissionsTo === \\"email\\"
          ? formUrl
          : props.action! /* TODO: throw error if no action URL */,
        { body, headers, method: props.method || \\"post\\" }
      ).then(
        async (res) => {
          let body;
          const contentType = res.headers.get(\\"content-type\\");
          if (contentType && contentType.indexOf(\\"application/json\\") !== -1) {
            body = await res.json();
          } else {
            body = await res.text();
          }
          if (!res.ok && props.errorMessagePath) {
            /* TODO: allow supplying an error formatter function */ let message =
              get(body, props.errorMessagePath);
            if (message) {
              if (typeof message !== \\"string\\") {
                /* TODO: ideally convert json to yaml so it woul dbe like          error: - email has been taken */ message =
                  JSON.stringify(message);
              }
              setFormErrorMessage(message);
            }
          }
          setResponseData(body);
          setFormState(res.ok ? \\"success\\" : \\"error\\");
          if (res.ok) {
            const submitSuccessEvent = new CustomEvent(\\"submit:success\\", {
              detail: { res, body },
            });
            if (formRef.current) {
              formRef.current.dispatchEvent(submitSuccessEvent);
              if (submitSuccessEvent.defaultPrevented) {
                return;
              }
              /* TODO: option to turn this on/off? */ if (
                props.resetFormOnSubmit !== false
              ) {
                formRef.current.reset();
              }
            }
            /* TODO: client side route event first that can be preventDefaulted */ if (
              props.successUrl
            ) {
              if (formRef.current) {
                const event = new CustomEvent(\\"route\\", {
                  detail: { url: props.successUrl },
                });
                formRef.current.dispatchEvent(event);
                if (!event.defaultPrevented) {
                  location.href = props.successUrl;
                }
              } else {
                location.href = props.successUrl;
              }
            }
          }
        },
        (err) => {
          const submitErrorEvent = new CustomEvent(\\"submit:error\\", {
            detail: { error: err },
          });
          if (formRef.current) {
            formRef.current.dispatchEvent(submitErrorEvent);
            if (submitErrorEvent.defaultPrevented) {
              return;
            }
          }
          setResponseData(err);
          setFormState(\\"error\\");
        }
      );
    }
  }
  return (
    <Fragment>
      {\\" \\"}
      <form
        validate={props.validate}
        ref={formRef}
        action={!props.sendWithJs && props.action}
        method={props.method}
        name={props.name}
        onSubmit={(event) => onSubmit(event)}
        {...props.attributes}
      >
        {props.builderBlock && props.builderBlock.children ? (
          <Fragment>
            {props.builderBlock?.children?.map((block, index) => (
              <BuilderBlockComponent
                key={block.id}
                block={block}
                index={index}
              />
            ))}
          </Fragment>
        ) : null}
        {submissionState() === \\"error\\" ? (
          <BuilderBlocks dataPath=\\"errorMessage\\" blocks={props.errorMessage!} />
        ) : null}
        {submissionState() === \\"sending\\" ? (
          <BuilderBlocks
            dataPath=\\"sendingMessage\\"
            blocks={props.sendingMessage!}
          />
        ) : null}
        {submissionState() === \\"error\\" && responseData ? (
          <pre className=\\"builder-form-error-text pre\\">
            {JSON.stringify(responseData, null, 2)}
          </pre>
        ) : null}
        {submissionState() === \\"success\\" ? (
          <BuilderBlocks
            dataPath=\\"successMessage\\"
            blocks={props.successMessage!}
          />
        ) : null}
      </form>{\\" \\"}
      <style jsx>{\`
        .pre {
          padding: 10px;
          color: red;
          text-align: center;
        }
      \`}</style>{\\" \\"}
    </Fragment>
  );
}
export default FormComponent;
"
`;

exports[`Preact > jsx > Typescript Test > Image 1`] = `
"/** @jsx h */
import { h, Fragment } from \\"preact\\";
import { useState, useRef, useEffect } from \\"preact/hooks\\";

// TODO: AMP Support?
export interface ImageProps {
  _class?: string;
  image: string;
  sizes?: string;
  lazy?: boolean;
  height?: number;
  width?: number;
  altText?: string;
  backgroundSize?: string;
  backgroundPosition?: string; // TODO: Support generating Builder.io and or Shopify \`srcset\`s when needed

  srcset?: string; // TODO: Implement support for custom aspect ratios

  aspectRatio?: number; // TODO: This might not work as expected in terms of positioning

  children?: any;
}

function Image(props: ImageProps) {
  const pictureRef = useRef<HTMLElement>(null);
  const [scrollListener, setScrollListener] = useState(() => null);

  const [imageLoaded, setImageLoaded] = useState(() => false);

  function setLoaded() {
    setImageLoaded(true);
  }

  function useLazyLoading() {
    // TODO: Add more checks here, like testing for real web browsers
    return !!props.lazy && isBrowser();
  }

  function isBrowser() {
    return (
      typeof window !== \\"undefined\\" && window.navigator.product != \\"ReactNative\\"
    );
  }

  const [load, setLoad] = useState(() => false);

  useEffect(() => {
    if (useLazyLoading()) {
      // throttled scroll capture listener
      const listener = () => {
        if (pictureRef.current) {
          const rect = pictureRef.current.getBoundingClientRect();
          const buffer = window.innerHeight / 2;

          if (rect.top < window.innerHeight + buffer) {
            setLoad(true);
            setScrollListener(null);
            window.removeEventListener(\\"scroll\\", listener);
          }
        }
      };

      setScrollListener(listener);
      window.addEventListener(\\"scroll\\", listener, {
        capture: true,
        passive: true,
      });
      listener();
    }
  }, []);

  useEffect(() => {
    return () => {
      if (scrollListener) {
        window.removeEventListener(\\"scroll\\", scrollListener);
      }
    };
  }, []);

  return (
    <Fragment>
      <div>
        <picture ref={pictureRef}>
          {!useLazyLoading() || load ? (
            <img
              alt={props.altText}
              aria-role={props.altText ? \\"presentation\\" : undefined}
              className={
                \\"builder-image\\" +
                (props._class ? \\" \\" + props._class : \\"\\") +
                \\" img\\"
              }
              src={props.image}
              onLoad={(event) => setLoaded()}
              srcset={props.srcset}
              sizes={props.sizes}
            />
          ) : null}
          <source srcset={props.srcset} />
        </picture>
        {props.children}
      </div>
      <style jsx>{\`
        .img {
          opacity: 1;
          transition: opacity 0.2s ease-in-out;
          object-fit: cover;
          object-position: center;
        }
      \`}</style>
    </Fragment>
  );
}

export default Image;
"
`;

exports[`Preact > jsx > Typescript Test > Image State 1`] = `
"/** @jsx h */
import { h, Fragment } from \\"preact\\";
import { useState } from \\"preact/hooks\\";

function ImgStateComponent(props: any) {
  const [canShow, setCanShow] = useState(() => true);

  const [images, setImages] = useState(() => [\\"http://example.com/qwik.png\\"]);

  return (
    <div>
      {images?.map((item, itemIndex) => (
        <img className=\\"custom-class\\" src={item} key={itemIndex} />
      ))}
    </div>
  );
}

export default ImgStateComponent;
"
`;

exports[`Preact > jsx > Typescript Test > Img 1`] = `
"/** @jsx h */
import { h, Fragment } from \\"preact\\";

export interface ImgProps {
  attributes?: any;
  imgSrc?: string;
  altText?: string;
  backgroundSize?: \\"cover\\" | \\"contain\\";
  backgroundPosition?:
    | \\"center\\"
    | \\"top\\"
    | \\"left\\"
    | \\"right\\"
    | \\"bottom\\"
    | \\"top left\\"
    | \\"top right\\"
    | \\"bottom left\\"
    | \\"bottom right\\";
}

import { Builder } from \\"@builder.io/sdk\\";

function ImgComponent(props: ImgProps) {
  return (
    <img
      style={{
        objectFit: props.backgroundSize || \\"cover\\",
        objectPosition: props.backgroundPosition || \\"center\\",
      }}
      {...props.attributes}
      key={(Builder.isEditing && props.imgSrc) || \\"default-key\\"}
      alt={props.altText}
      src={props.imgSrc}
    />
  );
}

export default ImgComponent;
"
`;

exports[`Preact > jsx > Typescript Test > Input 1`] = `
"/** @jsx h */
import { h, Fragment } from \\"preact\\";

export interface FormInputProps {
  type?: string;
  attributes?: any;
  name?: string;
  value?: string;
  placeholder?: string;
  defaultValue?: string;
  required?: boolean;
  onChange?: (value: string) => void;
}

import { Builder } from \\"@builder.io/sdk\\";

function FormInputComponent(props: FormInputProps) {
  return (
    <input
      {...props.attributes}
      key={
        Builder.isEditing && props.defaultValue
          ? props.defaultValue
          : \\"default-key\\"
      }
      placeholder={props.placeholder}
      type={props.type}
      name={props.name}
      value={props.value}
      defaultValue={props.defaultValue}
      required={props.required}
      onChange={(event) => props.onChange?.(event.target.value)}
    />
  );
}

export default FormInputComponent;
"
`;

exports[`Preact > jsx > Typescript Test > InputParent 1`] = `
"/** @jsx h */
import { h, Fragment } from \\"preact\\";
import FormInputComponent from \\"./input.raw\\";

function Stepper(props: any) {
  function handleChange(value: string) {
    console.log(value);
  }

  return (
    <FormInputComponent
      name=\\"kingzez\\"
      type=\\"text\\"
      onChange={(value) => handleChange(value)}
    />
  );
}

export default Stepper;
"
`;

exports[`Preact > jsx > Typescript Test > RawText 1`] = `
"/** @jsx h */
import { h, Fragment } from \\"preact\\";

export interface RawTextProps {
  attributes?: any;
  text?: string; // builderBlock?: any;
}

function RawText(props: RawTextProps) {
  return (
    <span
      className={props.attributes?.class || props.attributes?.className}
      dangerouslySetInnerHTML={{ __html: props.text || \\"\\" }}
    />
  );
}

export default RawText;
"
`;

exports[`Preact > jsx > Typescript Test > Section 1`] = `
"/** @jsx h */
import { h, Fragment } from \\"preact\\";

export interface SectionProps {
  maxWidth?: number;
  attributes?: any;
  children?: any;
}

function SectionComponent(props: SectionProps) {
  return (
    <section
      {...props.attributes}
      style={
        props.maxWidth && typeof props.maxWidth === \\"number\\"
          ? {
              maxWidth: props.maxWidth,
            }
          : undefined
      }
    >
      {props.children}
    </section>
  );
}

export default SectionComponent;
"
`;

exports[`Preact > jsx > Typescript Test > Select 1`] = `
"/** @jsx h */
import { h, Fragment } from \\"preact\\";

export interface FormSelectProps {
  options?: {
    name?: string;
    value: string;
  }[];
  attributes?: any;
  name?: string;
  value?: string;
  defaultValue?: string;
}

import { Builder } from \\"@builder.io/sdk\\";

function SelectComponent(props: FormSelectProps) {
  return (
    <select
      {...props.attributes}
      value={props.value}
      key={
        Builder.isEditing && props.defaultValue
          ? props.defaultValue
          : \\"default-key\\"
      }
      defaultValue={props.defaultValue}
      name={props.name}
    >
      {props.options?.map((option, index) => (
        <option value={option.value} data-index={index}>
          {option.name || option.value}
        </option>
      ))}
    </select>
  );
}

export default SelectComponent;
"
`;

exports[`Preact > jsx > Typescript Test > SlotDefault 1`] = `
"/** @jsx h */
import { h, Fragment } from \\"preact\\";

type Props = {
  [key: string]: string;
};

function SlotCode(props: Props) {
  return (
    <div>
      <>
        {props.children || <div className=\\"default-slot\\">Default content</div>}
      </>
    </div>
  );
}

export default SlotCode;
"
`;

exports[`Preact > jsx > Typescript Test > SlotHtml 1`] = `
"/** @jsx h */
import { h, Fragment } from \\"preact\\";

type Props = {
  [key: string]: string;
};
import ContentSlotCode from \\"./content-slot-jsx.raw\\";

function SlotCode(props: Props) {
  return (
    <div>
      <ContentSlotCode testing={<div>Hello</div>}></ContentSlotCode>
    </div>
  );
}

export default SlotCode;
"
`;

exports[`Preact > jsx > Typescript Test > SlotJsx 1`] = `
"/** @jsx h */
import { h, Fragment } from \\"preact\\";

type Props = {
  [key: string]: string;
};
import ContentSlotCode from \\"./content-slot-jsx.raw\\";

function SlotCode(props: Props) {
  return (
    <div>
      <ContentSlotCode slotTesting={<div>Hello</div>} />
    </div>
  );
}

export default SlotCode;
"
`;

exports[`Preact > jsx > Typescript Test > SlotNamed 1`] = `
"/** @jsx h */
import { h, Fragment } from \\"preact\\";

type Props = {
  [key: string]: string;
};

function SlotCode(props: Props) {
  return (
    <div>
      <>{props.myAwesomeSlot}</>
      <>{props.top}</>
      <>{props.left || \\"Default left\\"}</>
      <>{props.children || \\"Default Child\\"}</>
    </div>
  );
}

export default SlotCode;
"
`;

exports[`Preact > jsx > Typescript Test > Stamped.io 1`] = `
"/** @jsx h */
import { h, Fragment } from \\"preact\\";
import { useState, useEffect } from \\"preact/hooks\\";

type SmileReviewsProps = {
  productId: string;
  apiKey: string;
};
import { kebabCase, snakeCase } from \\"lodash\\";

function SmileReviews(props: SmileReviewsProps) {
  const [reviews, setReviews] = useState(() => []);

  const [name, setName] = useState(() => \\"test\\");

  const [showReviewPrompt, setShowReviewPrompt] = useState(() => false);

  function kebabCaseValue() {
    return kebabCase(\\"testThat\\");
  }

  function snakeCaseValue() {
    return snakeCase(\\"testThis\\");
  }

  useEffect(() => {
    fetch(
      \`https://stamped.io/api/widget/reviews?storeUrl=builder-io.myshopify.com&apiKey=\${
        props.apiKey || \\"pubkey-8bbDq7W6w4sB3OWeM1HUy2s47702hM\\"
      }&productId=\${props.productId || \\"2410511106127\\"}\`
    )
      .then((res) => res.json())
      .then((data) => {
        setReviews(data.data);
      });
  }, []);

  return (
    <Fragment>
      <div data-user={name}>
        <button onClick={(event) => setShowReviewPrompt(true)}>
          Write a review
        </button>
        {showReviewPrompt || \\"asdf\\" ? (
          <Fragment>
            <input placeholder=\\"Email\\" />
            <input placeholder=\\"Title\\" className=\\"input\\" />
            <textarea
              placeholder=\\"How was your experience?\\"
              className=\\"textarea\\"
            />
            <button
              className=\\"button\\"
              onClick={(event) => {
                event.preventDefault();
                setShowReviewPrompt(false);
              }}
            >
              Submit
            </button>
          </Fragment>
        ) : null}
        {reviews?.map((review, index) => (
          <div className=\\"review\\" key={review.id}>
            <img className=\\"img\\" src={review.avatar} />
            <div className={showReviewPrompt ? \\"bg-primary\\" : \\"bg-secondary\\"}>
              <div>N: {index}</div>
              <div>{review.author}</div>
              <div>{review.reviewMessage}</div>
            </div>
          </div>
        ))}
      </div>
      <style jsx>{\`
        .input {
          display: block;
        }
        .textarea {
          display: block;
        }
        .button {
          display: block;
        }
        .review {
          margin: 10px;
          padding: 10px;
          background: white;
          display: flex;
          border-radius: 5px;
          box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
          -webkit-font-smoothing: antialiased;
        }
        .img {
          height: 30px;
          width: 30px;
          margin-right: 10px;
        }
      \`}</style>
    </Fragment>
  );
}

export default SmileReviews;
"
`;

exports[`Preact > jsx > Typescript Test > Submit 1`] = `
"/** @jsx h */
import { h, Fragment } from \\"preact\\";

export interface ButtonProps {
  attributes?: any;
  text?: string;
}

function SubmitButton(props: ButtonProps) {
  return (
    <button type=\\"submit\\" {...props.attributes}>
      {props.text}
    </button>
  );
}

export default SubmitButton;
"
`;

exports[`Preact > jsx > Typescript Test > Text 1`] = `
"/** @jsx h */
import { h, Fragment } from \\"preact\\";
import { useState } from \\"preact/hooks\\";

export interface TextProps {
  attributes?: any;
  rtlMode: boolean;
  text?: string;
  content?: string;
  builderBlock?: any;
}

import { Builder } from \\"@builder.io/sdk\\";

function Text(props: TextProps) {
  const [name, setName] = useState(() => \\"Decadef20\\");

  return (
    <div
      contentEditable={allowEditingText || undefined}
      data-name={{
        test: name || \\"any name\\",
      }}
      dangerouslySetInnerHTML={{
        __html:
          props.text ||
          props.content ||
          name ||
          '<p class=\\"text-lg\\">my name</p>',
      }}
    />
  );
}

export default Text;
"
`;

exports[`Preact > jsx > Typescript Test > Textarea 1`] = `
"/** @jsx h */
import { h, Fragment } from \\"preact\\";

export interface TextareaProps {
  attributes?: any;
  name?: string;
  value?: string;
  defaultValue?: string;
  placeholder?: string;
}

function Textarea(props: TextareaProps) {
  return (
    <textarea
      {...props.attributes}
      placeholder={props.placeholder}
      name={props.name}
      value={props.value}
      defaultValue={props.defaultValue}
    />
  );
}

export default Textarea;
"
`;

exports[`Preact > jsx > Typescript Test > Video 1`] = `
"/** @jsx h */
import { h, Fragment } from \\"preact\\";

export interface VideoProps {
  attributes?: any;
  video?: string;
  autoPlay?: boolean;
  controls?: boolean;
  muted?: boolean;
  loop?: boolean;
  playsInline?: boolean;
  aspectRatio?: number;
  width?: number;
  height?: number;
  fit?: \\"contain\\" | \\"cover\\" | \\"fill\\";
  position?:
    | \\"center\\"
    | \\"top\\"
    | \\"left\\"
    | \\"right\\"
    | \\"bottom\\"
    | \\"top left\\"
    | \\"top right\\"
    | \\"bottom left\\"
    | \\"bottom right\\";
  posterImage?: string;
  lazyLoad?: boolean;
}

function Video(props: VideoProps) {
  return (
    <video
      preload=\\"none\\"
      {...props.attributes}
      style={{
        width: \\"100%\\",
        height: \\"100%\\",
        ...props.attributes?.style,
        objectFit: props.fit,
        objectPosition: props.position,
        // Hack to get object fit to work as expected and
        // not have the video overflow
        borderRadius: 1,
      }}
      key={props.video || \\"no-src\\"}
      poster={props.posterImage}
      autoplay={props.autoPlay}
      muted={props.muted}
      controls={props.controls}
      loop={props.loop}
    />
  );
}

export default Video;
"
`;

exports[`Preact > jsx > Typescript Test > arrowFunctionInUseStore 1`] = `
"/** @jsx h */
import { h, Fragment } from \\"preact\\";
import { useState } from \\"preact/hooks\\";

function MyComponent(props: any) {
  const [name, setName] = useState(() => \\"steve\\");

  function setName(value) {
    setName(value);
  }

  function updateNameWithArrowFn(value) {
    setName(value);
  }

  return <div>Hello {name}</div>;
}

export default MyComponent;
"
`;

exports[`Preact > jsx > Typescript Test > basicForNoTagReference 1`] = `
"/** @jsx h */
import { h, Fragment } from \\"preact\\";
import { useState } from \\"preact/hooks\\";

function MyBasicForNoTagRefComponent(props: any) {
  const [name, setName] = useState(() => \\"VincentW\\");

  const [TagName, setTagName] = useState(() => \\"div\\");

  function TagNameGetter() {
    return \\"span\\";
  }

  const [Tag, setTag] = useState(() => \\"span\\");

  const TagNameGetterRef = TagNameGetter();

  return (
    <TagNameGetterRef>
      Hello <Tag>{name}</Tag>
      {props.actions?.map((action) => (
        <TagName>
          <action.icon />
          <span>{action.text}</span>
        </TagName>
      ))}
    </TagNameGetterRef>
  );
}

export default MyBasicForNoTagRefComponent;
"
`;

exports[`Preact > jsx > Typescript Test > basicForwardRef 1`] = `
"/** @jsx h */
import { h, Fragment } from \\"preact\\";
import { useState } from \\"preact/hooks\\";

export interface Props {
  showInput: boolean;
  inputRef: HTMLInputElement;
}

function MyBasicForwardRefComponent(props: Props) {
  const [name, setName] = useState(() => \\"PatrickJS\\");

  return (
    <Fragment>
      <div>
        <input
          className=\\"input\\"
          ref={props.inputRef}
          value={name}
          onChange={(event) => setName(event.target.value)}
        />
      </div>
      <style jsx>{\`
        .input {
          color: red;
        }
      \`}</style>
    </Fragment>
  );
}

export default MyBasicForwardRefComponent;
"
`;

exports[`Preact > jsx > Typescript Test > basicForwardRefMetadata 1`] = `
"/** @jsx h */
import { h, Fragment } from \\"preact\\";
import { useState } from \\"preact/hooks\\";

export interface Props {
  showInput: boolean;
  inputRef: HTMLInputElement;
}

function MyBasicForwardRefComponent(props: Props) {
  const [name, setName] = useState(() => \\"PatrickJS\\");

  return (
    <Fragment>
      <div>
        <input
          className=\\"input\\"
          ref={props.inputRef}
          value={name}
          onChange={(event) => setName(event.target.value)}
        />
      </div>
      <style jsx>{\`
        .input {
          color: red;
        }
      \`}</style>
    </Fragment>
  );
}

export default MyBasicForwardRefComponent;
"
`;

exports[`Preact > jsx > Typescript Test > basicOnUpdateReturn 1`] = `
"/** @jsx h */
import { h, Fragment } from \\"preact\\";
import { useState, useEffect } from \\"preact/hooks\\";

function MyBasicOnUpdateReturnComponent(props: any) {
  const [name, setName] = useState(() => \\"PatrickJS\\");

  useEffect(() => {
    const controller = new AbortController();
    const signal = controller.signal;
    fetch(\\"https://patrickjs.com/api/resource.json\\", {
      signal,
    })
      .then((response) => response.json())
      .then((data) => {
        setName(data.name);
      });
    return () => {
      if (!signal.aborted) {
        controller.abort();
      }
    };
  }, [name]);

  return <div>Hello! {name}</div>;
}

export default MyBasicOnUpdateReturnComponent;
"
`;

exports[`Preact > jsx > Typescript Test > class + ClassName + css 1`] = `
"/** @jsx h */
import { h, Fragment } from \\"preact\\";

function MyBasicComponent(props: any) {
  return (
    <Fragment>
      <div className=\\"test2 test div\\">
        Hello! I can run in React, Vue, Solid, or Liquid!
      </div>
      <style jsx>{\`
        .div {
          padding: 10px;
        }
      \`}</style>
    </Fragment>
  );
}

export default MyBasicComponent;
"
`;

exports[`Preact > jsx > Typescript Test > class + css 1`] = `
"/** @jsx h */
import { h, Fragment } from \\"preact\\";

function MyBasicComponent(props: any) {
  return (
    <Fragment>
      <div className=\\"test div\\">
        Hello! I can run in React, Vue, Solid, or Liquid!
      </div>
      <style jsx>{\`
        .div {
          padding: 10px;
        }
      \`}</style>
    </Fragment>
  );
}

export default MyBasicComponent;
"
`;

exports[`Preact > jsx > Typescript Test > className + css 1`] = `
"/** @jsx h */
import { h, Fragment } from \\"preact\\";

function MyBasicComponent(props: any) {
  return (
    <Fragment>
      <div className=\\"test div\\">
        Hello! I can run in React, Vue, Solid, or Liquid!
      </div>
      <style jsx>{\`
        .div {
          padding: 10px;
        }
      \`}</style>
    </Fragment>
  );
}

export default MyBasicComponent;
"
`;

exports[`Preact > jsx > Typescript Test > className 1`] = `
"/** @jsx h */
import { h, Fragment } from \\"preact\\";
import { useState } from \\"preact/hooks\\";

type Props = {
  [key: string]: string | JSX.Element;
  slotTesting: JSX.Element;
};
import type { JSX } from \\"../../../../jsx-runtime\\";

function ClassNameCode(props: Props) {
  const [bindings, setBindings] = useState(() => \\"a binding\\");

  return (
    <div>
      <div className=\\"no binding\\">Without Binding</div>
      <div className={bindings}>With binding</div>
    </div>
  );
}

export default ClassNameCode;
"
`;

exports[`Preact > jsx > Typescript Test > classState 1`] = `
"/** @jsx h */
import { h, Fragment } from \\"preact\\";
import { useState } from \\"preact/hooks\\";

function MyBasicComponent(props: any) {
  const [classState, setClassState] = useState(() => \\"testClassName\\");

  const [styleState, setStyleState] = useState(() => ({
    color: \\"red\\",
  }));

  return (
    <Fragment>
      <div className={classState + \\" div\\"} style={styleState}>
        Hello! I can run in React, Vue, Solid, or Liquid!
      </div>
      <style jsx>{\`
        .div {
          padding: 10px;
        }
      \`}</style>
    </Fragment>
  );
}

export default MyBasicComponent;
"
`;

exports[`Preact > jsx > Typescript Test > componentWithContext 1`] = `
"/** @jsx h */
import { h, Fragment } from \\"preact\\";
import { useContext } from \\"preact/hooks\\";

export interface ComponentWithContextProps {
  content: string;
}

import Context1 from \\"@dummy/1\\";
import Context2 from \\"@dummy/2\\";

function ComponentWithContext(props: ComponentWithContextProps) {
  const foo = useContext(Context1);

  return (
    <Context2.Provider
      value={{
        bar: \\"baz\\",
      }}
    >
      <Context1.Provider
        value={{
          foo: \\"bar\\",

          content() {
            return props.content;
          },
        }}
      >
        <Fragment>{foo.value}</Fragment>
      </Context1.Provider>
    </Context2.Provider>
  );
}

export default ComponentWithContext;
"
`;

exports[`Preact > jsx > Typescript Test > componentWithContextMultiRoot 1`] = `
"/** @jsx h */
import { h, Fragment } from \\"preact\\";
import { useContext } from \\"preact/hooks\\";

export interface ComponentWithContextProps {
  content: string;
}

import Context1 from \\"@dummy/1\\";
import Context2 from \\"@dummy/2\\";

function ComponentWithContext(props: ComponentWithContextProps) {
  const foo = useContext(Context1);

  return (
    <Context2.Provider
      value={{
        bar: \\"baz\\",
      }}
    >
      <Context1.Provider
        value={{
          foo: \\"bar\\",

          content() {
            return props.content;
          },
        }}
      >
        <Fragment>
          <Fragment>{foo.value}</Fragment>
          <div>other</div>
        </Fragment>
      </Context1.Provider>
    </Context2.Provider>
  );
}

export default ComponentWithContext;
"
`;

exports[`Preact > jsx > Typescript Test > contentState 1`] = `
"/** @jsx h */
import { h, Fragment } from \\"preact\\";
import { useContext } from \\"preact/hooks\\";
import BuilderContext from \\"@dummy/context.js\\";

function RenderContent(props: any) {
  return (
    <BuilderContext.Provider
      value={{
        content: props.content,
        registeredComponents: props.customComponents,
      }}
    >
      <div>setting context</div>
    </BuilderContext.Provider>
  );
}

export default RenderContent;
"
`;

exports[`Preact > jsx > Typescript Test > defaultProps 1`] = `
"/** @jsx h */
import { h, Fragment } from \\"preact\\";

export interface ButtonProps {
  attributes?: any;
  text?: string;
  buttonText?: string; // no default value

  link?: string;
  openLinkInNewTab?: boolean;
  onClick?: () => void;
}

function Button(props: ButtonProps) {
  return (
    <div>
      {props.link ? (
        <a
          {...props.attributes}
          href={props.link}
          target={props.openLinkInNewTab ? \\"_blank\\" : undefined}
        >
          {props.text}
        </a>
      ) : null}
      {!props.link ? (
        <button
          type=\\"button\\"
          {...props.attributes}
          onClick={(event) => props.onClick(event)}
        >
          {props.buttonText}
        </button>
      ) : null}
    </div>
  );
}

Button.defaultProps = {
  text: \\"default text\\",
  link: \\"https://builder.io/\\",
  openLinkInNewTab: false,
  onClick: () => {
    console.log(\\"hi\\");
  },
};

export default Button;
"
`;

exports[`Preact > jsx > Typescript Test > defaultPropsOutsideComponent 1`] = `
"/** @jsx h */
import { h, Fragment } from \\"preact\\";

export interface ButtonProps {
  attributes?: any;
  text?: string;
  link?: string;
  openLinkInNewTab?: boolean;
  onClick: () => void;
}

function Button(props: ButtonProps) {
  return (
    <div>
      {props.link ? (
        <a
          {...props.attributes}
          href={props.link}
          target={props.openLinkInNewTab ? \\"_blank\\" : undefined}
        >
          {props.text}
        </a>
      ) : null}
      {!props.link ? (
        <button
          type=\\"button\\"
          {...props.attributes}
          onClick={(event) => props.onClick(event)}
        >
          {props.text}
        </button>
      ) : null}
    </div>
  );
}

Button.defaultProps = {
  text: \\"default text\\",
  link: \\"https://builder.io/\\",
  openLinkInNewTab: false,
  onClick: () => {},
};

export default Button;
"
`;

exports[`Preact > jsx > Typescript Test > defaultValsWithTypes 1`] = `
"/** @jsx h */
import { h, Fragment } from \\"preact\\";

type Props = {
  name: string;
};

const DEFAULT_VALUES: Props = {
  name: \\"Sami\\",
};

function ComponentWithTypes(props: Props) {
  return <div> Hello {props.name || DEFAULT_VALUES.name}</div>;
}

export default ComponentWithTypes;
"
`;

exports[`Preact > jsx > Typescript Test > expressionState 1`] = `
"/** @jsx h */
import { h, Fragment } from \\"preact\\";
import { useState } from \\"preact/hooks\\";

function MyComponent(props: any) {
  const [refToUse, setRefToUse] = useState(() =>
    !(props.componentRef instanceof Function) ? props.componentRef : null
  );

  return <div>{refToUse}</div>;
}

export default MyComponent;
"
`;

exports[`Preact > jsx > Typescript Test > getterState 1`] = `
"/** @jsx h */
import { h, Fragment } from \\"preact\\";

export interface ButtonProps {
  foo: string;
}

function Button(props: ButtonProps) {
  function foo2() {
    return props.foo + \\"foo\\";
  }

  function bar() {
    return \\"bar\\";
  }

  function baz(i: number) {
    return i + foo2().length;
  }

  return (
    <div>
      <p>{foo2()}</p>
      <p>{bar()}</p>
      <p>{baz(1)}</p>
    </div>
  );
}

export default Button;
"
`;

exports[`Preact > jsx > Typescript Test > import types 1`] = `
"/** @jsx h */
import { h, Fragment } from \\"preact\\";

type RenderContentProps = {
  options?: GetContentOptions;
  content: BuilderContent;
  renderContentProps: RenderBlockProps;
};
import { BuilderContent, GetContentOptions } from \\"@builder.io/sdk\\";
import RenderBlock, { RenderBlockProps } from \\"./builder-render-block.raw\\";

function RenderContent(props: RenderContentProps) {
  function getRenderContentProps(block, index) {
    return {
      block: block,
      index: index,
    };
  }

  return (
    <RenderBlock
      {...state.getRenderContentProps(props.renderContentProps.block, 0)}
    />
  );
}

export default RenderContent;
"
`;

exports[`Preact > jsx > Typescript Test > multipleOnUpdate 1`] = `
"/** @jsx h */
import { h, Fragment } from \\"preact\\";
import { useEffect } from \\"preact/hooks\\";

function MultipleOnUpdate(props: any) {
  useEffect(() => {
    console.log(\\"Runs on every update/rerender\\");
  });
  useEffect(() => {
    console.log(\\"Runs on every update/rerender as well\\");
  });

  return <div />;
}

export default MultipleOnUpdate;
"
`;

exports[`Preact > jsx > Typescript Test > multipleOnUpdateWithDeps 1`] = `
"/** @jsx h */
import { h, Fragment } from \\"preact\\";
import { useState, useEffect } from \\"preact/hooks\\";

function MultipleOnUpdateWithDeps(props: any) {
  const [a, setA] = useState(() => \\"a\\");

  const [b, setB] = useState(() => \\"b\\");

  const [c, setC] = useState(() => \\"c\\");

  const [d, setD] = useState(() => \\"d\\");

  useEffect(() => {
    console.log(\\"Runs when a or b changes\\", a, b);

    if (a === \\"a\\") {
      setA(\\"b\\");
    }
  }, [a, b]);
  useEffect(() => {
    console.log(\\"Runs when c or d changes\\", c, d);

    if (a === \\"a\\") {
      setA(\\"b\\");
    }
  }, [c, d]);

  return <div />;
}

export default MultipleOnUpdateWithDeps;
"
`;

exports[`Preact > jsx > Typescript Test > multipleSpreads 1`] = `
"/** @jsx h */
import { h, Fragment } from \\"preact\\";
import { useState } from \\"preact/hooks\\";

function MyBasicComponent(props: any) {
  const [attrs, setAttrs] = useState(() => ({
    hello: \\"world\\",
  }));

  return <input {...state.attrs} {...props} />;
}

export default MyBasicComponent;
"
`;

exports[`Preact > jsx > Typescript Test > nestedShow 1`] = `
"/** @jsx h */
import { h, Fragment } from \\"preact\\";

interface Props {
  conditionA: boolean;
  conditionB: boolean;
}

function NestedShow(props: Props) {
  return (
    <Fragment>
      {props.conditionA ? (
        <Fragment>
          {!props.conditionB ? (
            <div>if condition A and condition B</div>
          ) : (
            <div>else-condition-B</div>
          )}
        </Fragment>
      ) : (
        <div>else-condition-A</div>
      )}
    </Fragment>
  );
}

export default NestedShow;
"
`;

exports[`Preact > jsx > Typescript Test > nestedStyles 1`] = `
"/** @jsx h */
import { h, Fragment } from \\"preact\\";

function NestedStyles(props: any) {
  return (
    <Fragment>
      <div className=\\"div\\">Hello world</div>
      <style jsx>{\`
        .div {
          display: flex;
          --bar: red;
          color: var(--bar);
        }
        @media (max-width: env(--mobile)) {
          .div {
            display: block;
          }
        }
        .div:hover {
          display: flex;
        }
        .div:active {
          display: inline;
        }
        .div .nested-selector {
          display: grid;
        }
        .div .nested-selector:hover {
          display: block;
        }
        .div.nested-selector:active {
          display: inline-block;
        }
      \`}</style>
    </Fragment>
  );
}

export default NestedStyles;
"
`;

exports[`Preact > jsx > Typescript Test > onEvent 1`] = `
"/** @jsx h */
import { h, Fragment } from \\"preact\\";
import { useRef, useEffect } from \\"preact/hooks\\";

function Embed(props: any) {
  const elem = useRef<HTMLDivElement>(null);
  function foo(event) {
    console.log(\\"test2\\");
  }

  function elem_onInitEditingBldr(event) {
    console.log(\\"test\\");
    foo(event);
  }

  useEffect(() => {
    elem.current?.addEventListener(\\"initEditingBldr\\", elem_onInitEditingBldr);
    return () =>
      elem.current?.removeEventListener(
        \\"initEditingBldr\\",
        elem_onInitEditingBldr
      );
  }, []);

  useEffect(() => {
    elem.current.dispatchEvent(new CustomEvent(\\"initEditingBldr\\"));
  }, []);

  return (
    <div className=\\"builder-embed\\" ref={elem}>
      <div>Test</div>
    </div>
  );
}

export default Embed;
"
`;

exports[`Preact > jsx > Typescript Test > onInit & onMount 1`] = `
"/** @jsx h */
import { h, Fragment } from \\"preact\\";
import { useRef, useEffect } from \\"preact/hooks\\";

function OnInit(props: any) {
  const hasInitialized = useRef(false);
  if (!hasInitialized.current) {
    console.log(\\"onInit\\");
    hasInitialized.current = true;
  }

  useEffect(() => {
    console.log(\\"onMount\\");
  }, []);

  return <div />;
}

export default OnInit;
"
`;

exports[`Preact > jsx > Typescript Test > onInit 1`] = `
"/** @jsx h */
import { h, Fragment } from \\"preact\\";
import { useState, useRef } from \\"preact/hooks\\";

type Props = {
  name: string;
};

export const defaultValues = {
  name: \\"PatrickJS\\",
};

function OnInit(props: Props) {
  const [name, setName] = useState(() => \\"\\");

  const hasInitialized = useRef(false);
  if (!hasInitialized.current) {
    setName(defaultValues.name || props.name);
    console.log(\\"set defaults with props\\");
    hasInitialized.current = true;
  }

  return <div>Default name defined by parent {name}</div>;
}

export default OnInit;
"
`;

exports[`Preact > jsx > Typescript Test > onMount 1`] = `
"/** @jsx h */
import { h, Fragment } from \\"preact\\";
import { useEffect } from \\"preact/hooks\\";

function Comp(props: any) {
  useEffect(() => {
    console.log(\\"Runs on mount\\");
  }, []);

  useEffect(() => {
    return () => {
      console.log(\\"Runs on unMount\\");
    };
  }, []);

  return <div />;
}

export default Comp;
"
`;

exports[`Preact > jsx > Typescript Test > onMountMultiple 1`] = `
"/** @jsx h */
import { h, Fragment } from \\"preact\\";
import { useEffect } from \\"preact/hooks\\";

function Comp(props: any) {
  useEffect(() => {
    console.log(\\"Runs on mount\\");
  }, []);
  useEffect(() => {
    console.log(\\"Another one runs on Mount\\");
  }, []);
  useEffect(() => {
    console.log(\\"SSR runs on Mount\\");
  }, []);

  return <div />;
}

export default Comp;
"
`;

exports[`Preact > jsx > Typescript Test > onUpdate 1`] = `
"/** @jsx h */
import { h, Fragment } from \\"preact\\";
import { useEffect } from \\"preact/hooks\\";

function OnUpdate(props: any) {
  useEffect(() => {
    console.log(\\"Runs on every update/rerender\\");
  });

  return <div />;
}

export default OnUpdate;
"
`;

exports[`Preact > jsx > Typescript Test > onUpdateWithDeps 1`] = `
"/** @jsx h */
import { h, Fragment } from \\"preact\\";
import { useState, useEffect } from \\"preact/hooks\\";

type Props = {
  size: string;
};

function OnUpdateWithDeps(props: Props) {
  const [a, setA] = useState(() => \\"a\\");

  const [b, setB] = useState(() => \\"b\\");

  useEffect(() => {
    console.log(\\"Runs when a, b or size changes\\", a, b, props.size);
  }, [a, b, props.size]);

  return <div />;
}

export default OnUpdateWithDeps;
"
`;

exports[`Preact > jsx > Typescript Test > preserveExportOrLocalStatement 1`] = `
"/** @jsx h */
import { h, Fragment } from \\"preact\\";

type Types = {
  s: any[];
};
interface IPost {
  len: number;
}
export interface MyBasicComponentProps {
  id: string;
}

const b = 3;
const foo = () => {};
export const a = 3;
export const bar = () => {};
export function run<T>(value: T) {}

function MyBasicComponent(props: MyBasicComponentProps) {
  return <div />;
}

export default MyBasicComponent;
"
`;

exports[`Preact > jsx > Typescript Test > preserveTyping 1`] = `
"/** @jsx h */
import { h, Fragment } from \\"preact\\";

export type A = \\"test\\";
export interface C {
  n: \\"test\\";
}
type B = \\"test2\\";
interface D {
  n: \\"test\\";
}
export interface MyBasicComponentProps {
  name: string;
  age?: number;
}

function MyBasicComponent(props: MyBasicComponentProps) {
  return (
    <div>Hello! I can run in React, Vue, Solid, or Liquid! {props.name}</div>
  );
}

export default MyBasicComponent;
"
`;

exports[`Preact > jsx > Typescript Test > propsDestructure 1`] = `
"/** @jsx h */
import { h, Fragment } from \\"preact\\";
import { useState } from \\"preact/hooks\\";

type Props = {
  children: any;
  type: string;
};

function MyBasicComponent(props: Props) {
  const [name, setName] = useState(() => \\"Decadef20\\");

  return (
    <div>
      {props.children}
      {props.type}
      Hello! I can run in React, Vue, Solid, or Liquid!
    </div>
  );
}

export default MyBasicComponent;
"
`;

exports[`Preact > jsx > Typescript Test > propsInterface 1`] = `
"/** @jsx h */
import { h, Fragment } from \\"preact\\";

interface Person {
  name: string;
  age?: number;
}

function MyBasicComponent(props: Person | never) {
  return (
    <div>Hello! I can run in React, Vue, Solid, or Liquid! {props.name}</div>
  );
}

export default MyBasicComponent;
"
`;

exports[`Preact > jsx > Typescript Test > propsType 1`] = `
"/** @jsx h */
import { h, Fragment } from \\"preact\\";

type Person = {
  name: string;
  age?: number;
};

function MyBasicComponent(props: Person) {
  return (
    <div>Hello! I can run in React, Vue, Solid, or Liquid! {props.name}</div>
  );
}

export default MyBasicComponent;
"
`;

exports[`Preact > jsx > Typescript Test > referencingFunInsideHook 1`] = `
"/** @jsx h */
import { h, Fragment } from \\"preact\\";
import { useEffect } from \\"preact/hooks\\";

function OnUpdate(props: any) {
  function foo(params) {}

  function bar() {}

  function zoo() {
    const params = {
      cb: bar,
    };
  }

  useEffect(() => {
    foo({
      someOption: bar,
    });
  });

  return <div />;
}

export default OnUpdate;
"
`;

exports[`Preact > jsx > Typescript Test > renderBlock 1`] = `
"/** @jsx h */
import { h, Fragment } from \\"preact\\";
import { useState } from \\"preact/hooks\\";

export type RenderBlockProps = {
  block: BuilderBlock;
  context: BuilderContextInterface;
};
import { TARGET } from \\"../../constants/target.js\\";
import type {
  BuilderContextInterface,
  RegisteredComponent,
} from \\"../../context/types.js\\";
import { evaluate } from \\"../../functions/evaluate.js\\";
import { extractTextStyles } from \\"../../functions/extract-text-styles.js\\";
import { getBlockActions } from \\"../../functions/get-block-actions.js\\";
import { getBlockComponentOptions } from \\"../../functions/get-block-component-options.js\\";
import { getBlockProperties } from \\"../../functions/get-block-properties.js\\";
import { getBlockTag } from \\"../../functions/get-block-tag.js\\";
import { getProcessedBlock } from \\"../../functions/get-processed-block.js\\";
import { getReactNativeBlockStyles } from \\"../../functions/get-react-native-block-styles.js\\";
import type { BuilderBlock } from \\"../../types/builder-block.js\\";
import type { Nullable } from \\"../../types/typescript.js\\";
import BlockStyles from \\"./block-styles\\";
import { isEmptyHtmlElement } from \\"./render-block.helpers.js\\";
import RenderComponentWithContext from \\"./render-component-with-context.js\\";
import type { RenderComponentProps } from \\"./render-component\\";
import RenderComponent from \\"./render-component\\";
import RenderRepeatedBlock from \\"./render-repeated-block\\";
import type { RepeatData } from \\"./types.js\\";

function RenderBlock(props: RenderBlockProps) {
  function component() {
    const componentName = getProcessedBlock({
      block: props.block,
      state: props.context.state,
      context: props.context.context,
      shouldEvaluateBindings: false,
    }).component?.name;

    if (!componentName) {
      return null;
    }

    const ref = props.context.registeredComponents[componentName];

    if (!ref) {
      // TODO: Public doc page with more info about this message
      console.warn(\`
          Could not find a registered component named \\"\${componentName}\\".
          If you registered it, is the file that registered it imported by the file that needs to render it?\`);
      return undefined;
    } else {
      return ref;
    }
  }

  function tag() {
    return getBlockTag(useBlock());
  }

  function useBlock() {
    return repeatItemData()
      ? props.block
      : getProcessedBlock({
          block: props.block,
          state: props.context.state,
          context: props.context.context,
          shouldEvaluateBindings: true,
        });
  }

  function actions() {
    return getBlockActions({
      block: useBlock(),
      state: props.context.state,
      context: props.context.context,
    });
  }

  function attributes() {
    const blockProperties = getBlockProperties(useBlock());
    return {
      ...blockProperties,
      ...(TARGET === \\"reactNative\\"
        ? {
            style: getReactNativeBlockStyles({
              block: useBlock(),
              context: props.context,
              blockStyles: blockProperties.style,
            }),
          }
        : {}),
    };
  }

  function shouldWrap() {
    return !component?.()?.noWrap;
  }

  function renderComponentProps() {
    return {
      blockChildren: useChildren(),
      componentRef: component?.()?.component,
      componentOptions: {
        ...getBlockComponentOptions(useBlock()),

        /**
         * These attributes are passed to the wrapper element when there is one. If \`noWrap\` is set to true, then
         * they are provided to the component itself directly.
         */
        ...(shouldWrap()
          ? {}
          : {
              attributes: { ...attributes(), ...actions() },
            }),
        customBreakpoints: childrenContext?.()?.content?.meta?.breakpoints,
      },
      context: childrenContext(),
    };
  }

  function useChildren() {
    // TO-DO: When should \`canHaveChildren\` dictate rendering?
    // This is currently commented out because some Builder components (e.g. Box) do not have \`canHaveChildren: true\`,
    // but still receive and need to render children.
    // return state.componentInfo?.canHaveChildren ? useBlock().children : [];
    return useBlock().children ?? [];
  }

  function childrenWithoutParentComponent() {
    /**
     * When there is no \`componentRef\`, there might still be children that need to be rendered. In this case,
     * we render them outside of \`componentRef\`.
     * NOTE: We make sure not to render this if \`repeatItemData\` is non-null, because that means we are rendering an array of
     * blocks, and the children will be repeated within those blocks.
     */
    const shouldRenderChildrenOutsideRef =
      !component?.()?.component && !repeatItemData();
    return shouldRenderChildrenOutsideRef ? useChildren() : [];
  }

  function repeatItemData() {
    /**
     * we don't use \`useBlock()\` here because the processing done within its logic includes evaluating the block's bindings,
     * which will not work if there is a repeat.
     */
    const { repeat, ...blockWithoutRepeat } = props.block;

    if (!repeat?.collection) {
      return undefined;
    }

    const itemsArray = evaluate({
      code: repeat.collection,
      state: props.context.state,
      context: props.context.context,
    });

    if (!Array.isArray(itemsArray)) {
      return undefined;
    }

    const collectionName = repeat.collection.split(\\".\\").pop();
    const itemNameToUse =
      repeat.itemName || (collectionName ? collectionName + \\"Item\\" : \\"item\\");
    const repeatArray = itemsArray.map<RepeatData>((item, index) => ({
      context: {
        ...props.context,
        state: {
          ...props.context.state,
          $index: index,
          $item: item,
          [itemNameToUse]: item,
          [\`$\${itemNameToUse}Index\`]: index,
        },
      },
      block: blockWithoutRepeat,
    }));
    return repeatArray;
  }

  function inheritedTextStyles() {
    if (TARGET !== \\"reactNative\\") {
      return {};
    }

    const styles = getReactNativeBlockStyles({
      block: useBlock(),
      context: props.context,
      blockStyles: attributes().style,
    });
    return extractTextStyles(styles);
  }

  function childrenContext() {
    return {
      apiKey: props.context.apiKey,
      state: props.context.state,
      content: props.context.content,
      context: props.context.context,
      registeredComponents: props.context.registeredComponents,
      inheritedStyles: inheritedTextStyles(),
    };
  }

  function renderComponentTag() {
    if (TARGET === \\"reactNative\\") {
      return RenderComponentWithContext;
    } else if (TARGET === \\"vue3\\") {
      // vue3 expects a string for the component tag
      return \\"RenderComponent\\";
    } else {
      return RenderComponent;
    }
  }

  const [componentInfo, setComponentInfo] = useState(() => null);

  const RenderComponentTagRef = renderComponentTag();
  const TagRef = tag();

  return (
    <Fragment>
      {shouldWrap() ? (
        <Fragment>
          {isEmptyHtmlElement(tag()) ? (
            <TagRef {...attributes()} {...actions()} />
          ) : null}
          {!isEmptyHtmlElement(tag()) && repeatItemData() ? (
            <Fragment>
              {repeatItemData()?.map((data, index) => (
                <RenderRepeatedBlock
                  key={index}
                  repeatContext={data.context}
                  block={data.block}
                />
              ))}
            </Fragment>
          ) : null}
          {!isEmptyHtmlElement(tag()) && !repeatItemData() ? (
            <TagRef {...attributes()} {...actions()}>
              <RenderComponentTagRef {...renderComponentProps()} />
              {childrenWithoutParentComponent()?.map((child) => (
                <RenderBlock
                  key={\\"render-block-\\" + child.id}
                  block={child}
                  context={childrenContext()}
                />
              ))}
              {childrenWithoutParentComponent()?.map((child) => (
                <BlockStyles
                  key={\\"block-style-\\" + child.id}
                  block={child}
                  context={childrenContext()}
                />
              ))}
            </TagRef>
          ) : null}
        </Fragment>
      ) : (
        <Fragment>
          <RenderComponentTagRef {...renderComponentProps()} />
        </Fragment>
      )}
    </Fragment>
  );
}

export default RenderBlock;
"
`;

exports[`Preact > jsx > Typescript Test > renderContentExample 1`] = `
"/** @jsx h */
import { h, Fragment } from \\"preact\\";
import { useContext, useEffect } from \\"preact/hooks\\";

type Props = {
  customComponents: string[];
  content: {
    blocks: any[];
    id: string;
  };
};
import BuilderContext from \\"@dummy/context.js\\";
import {
  dispatchNewContentToVisualEditor,
  sendComponentsToVisualEditor,
  trackClick,
} from \\"@dummy/injection-js\\";
import RenderBlocks from \\"@dummy/RenderBlocks\\";

function RenderContent(props: Props) {
  useEffect(() => {
    sendComponentsToVisualEditor(props.customComponents);
  }, []);

  useEffect(() => {
    dispatchNewContentToVisualEditor(props.content);
  }, [props.content]);

  return (
    <Fragment>
      <BuilderContext.Provider
        value={{
          get content() {
            return 3;
          },

          get registeredComponents() {
            return 4;
          },
        }}
      >
        <div className=\\"div\\" onClick={(event) => trackClick(props.content.id)}>
          <RenderBlocks blocks={props.content.blocks} />
        </div>
      </BuilderContext.Provider>
      <style jsx>{\`
        .div {
          display: flex;
          flex-direction: columns;
        }
      \`}</style>
    </Fragment>
  );
}

export default RenderContent;
"
`;

exports[`Preact > jsx > Typescript Test > rootFragmentMultiNode 1`] = `
"/** @jsx h */
import { h, Fragment } from \\"preact\\";

export interface ButtonProps {
  attributes?: any;
  text?: string;
  link?: string;
  openLinkInNewTab?: boolean;
}

function Button(props: ButtonProps) {
  return (
    <Fragment>
      {props.link ? (
        <a
          {...props.attributes}
          href={props.link}
          target={props.openLinkInNewTab ? \\"_blank\\" : undefined}
        >
          {props.text}
        </a>
      ) : null}
      {!props.link ? (
        <button type=\\"button\\" {...props.attributes}>
          {props.text}
        </button>
      ) : null}
    </Fragment>
  );
}

export default Button;
"
`;

exports[`Preact > jsx > Typescript Test > rootShow 1`] = `
"/** @jsx h */
import { h, Fragment } from \\"preact\\";

export interface RenderStylesProps {
  foo: string;
}

function RenderStyles(props: RenderStylesProps) {
  return (
    <Fragment>
      {props.foo === \\"bar\\" ? (
        <Fragment>
          <div>Bar</div>
        </Fragment>
      ) : (
        <div>Foo</div>
      )}
    </Fragment>
  );
}

export default RenderStyles;
"
`;

exports[`Preact > jsx > Typescript Test > self-referencing component 1`] = `
"/** @jsx h */
import { h, Fragment } from \\"preact\\";

function MyComponent(props: any) {
  return (
    <div>
      {props.name}
      {props.name === \\"Batman\\" ? <MyComponent name=\\"Bruce Wayne\\" /> : null}
    </div>
  );
}

export default MyComponent;
"
`;

exports[`Preact > jsx > Typescript Test > self-referencing component with children 1`] = `
"/** @jsx h */
import { h, Fragment } from \\"preact\\";

function MyComponent(props: any) {
  return (
    <div>
      {props.name}
      {props.children}
      {props.name === \\"Batman\\" ? (
        <MyComponent name=\\"Bruce\\">
          <div>Wayne</div>
        </MyComponent>
      ) : null}
    </div>
  );
}

export default MyComponent;
"
`;

exports[`Preact > jsx > Typescript Test > showExpressions 1`] = `
"/** @jsx h */
import { h, Fragment } from \\"preact\\";

interface Props {
  conditionA: boolean;
  conditionB: boolean;
}

function ShowWithOtherValues(props: Props) {
  return (
    <div>
      {props.conditionA ? (
        <Fragment>Content0</Fragment>
      ) : (
        <Fragment>ContentA</Fragment>
      )}
      {props.conditionA ? <Fragment>ContentA</Fragment> : null}
      {props.conditionA ? <Fragment></Fragment> : <Fragment>ContentA</Fragment>}
      {props.conditionA ? (
        <Fragment>ContentB</Fragment>
      ) : (
        <Fragment>{undefined}</Fragment>
      )}
      {props.conditionA ? (
        <Fragment>{undefined}</Fragment>
      ) : (
        <Fragment>ContentB</Fragment>
      )}
      {props.conditionA ? <Fragment>ContentC</Fragment> : null}
      {props.conditionA ? <Fragment></Fragment> : <Fragment>ContentC</Fragment>}
      {props.conditionA ? <Fragment>ContentD</Fragment> : null}
      {props.conditionA ? <Fragment></Fragment> : <Fragment>ContentD</Fragment>}
      {props.conditionA ? (
        <Fragment>ContentE</Fragment>
      ) : (
        <Fragment>hello</Fragment>
      )}
      {props.conditionA ? (
        <Fragment>hello</Fragment>
      ) : (
        <Fragment>ContentE</Fragment>
      )}
      {props.conditionA ? (
        <Fragment>ContentF</Fragment>
      ) : (
        <Fragment>123</Fragment>
      )}
      {props.conditionA ? (
        <Fragment>123</Fragment>
      ) : (
        <Fragment>ContentF</Fragment>
      )}
      {props.conditionA === \\"Default\\" ? (
        <Fragment>4mb</Fragment>
      ) : props.conditionB === \\"Complete\\" ? (
        <Fragment>20mb</Fragment>
      ) : (
        <Fragment>9mb</Fragment>
      )}
      {props.conditionA === \\"Default\\" ? (
        <Fragment>
          {props.conditionB === \\"Complete\\" ? (
            <Fragment>20mb</Fragment>
          ) : (
            <Fragment>9mb</Fragment>
          )}
        </Fragment>
      ) : (
        <Fragment>4mb</Fragment>
      )}
    </div>
  );
}

export default ShowWithOtherValues;
"
`;

exports[`Preact > jsx > Typescript Test > showWithFor 1`] = `
"/** @jsx h */
import { h, Fragment } from \\"preact\\";

interface Props {
  conditionA: boolean;
  items: string[];
}

function NestedShow(props: Props) {
  return (
    <Fragment>
      {props.conditionA ? (
        <Fragment>
          {props.items?.map((item, idx) => (
            <div key={idx}>{item}</div>
          ))}
        </Fragment>
      ) : (
        <div>else-condition-A</div>
      )}
    </Fragment>
  );
}

export default NestedShow;
"
`;

exports[`Preact > jsx > Typescript Test > showWithOtherValues 1`] = `
"/** @jsx h */
import { h, Fragment } from \\"preact\\";

interface Props {
  conditionA: boolean;
}

function ShowWithOtherValues(props: Props) {
  return (
    <div>
      {props.conditionA ? <Fragment>ContentA</Fragment> : null}
      {props.conditionA ? (
        <Fragment>ContentB</Fragment>
      ) : (
        <Fragment>{undefined}</Fragment>
      )}
      {props.conditionA ? <Fragment>ContentC</Fragment> : null}
      {props.conditionA ? <Fragment>ContentD</Fragment> : null}
      {props.conditionA ? (
        <Fragment>ContentE</Fragment>
      ) : (
        <Fragment>hello</Fragment>
      )}
      {props.conditionA ? (
        <Fragment>ContentF</Fragment>
      ) : (
        <Fragment>123</Fragment>
      )}
    </div>
  );
}

export default ShowWithOtherValues;
"
`;

exports[`Preact > jsx > Typescript Test > showWithRootText 1`] = `
"/** @jsx h */
import { h, Fragment } from \\"preact\\";

interface Props {
  conditionA: boolean;
}

function ShowRootText(props: Props) {
  return (
    <Fragment>
      {props.conditionA ? (
        <Fragment>ContentA</Fragment>
      ) : (
        <div>else-condition-A</div>
      )}
    </Fragment>
  );
}

export default ShowRootText;
"
`;

exports[`Preact > jsx > Typescript Test > signalsOnUpdate 1`] = `
"/** @jsx h */
import { h, Fragment } from \\"preact\\";
import { useEffect } from \\"preact/hooks\\";

type Props = {
  id: string;
  foo: {
    bar: {
      baz: number;
    };
  };
};

function MyBasicComponent(props: Props) {
  useEffect(() => {
    console.log(\\"props.id changed\\", props.id);
    console.log(\\"props.foo.value.bar.baz changed\\", props.foo.bar.baz);
  }, [props.id, props.foo.bar.baz]);

  return (
    <Fragment>
      <div className=\\"test div\\">
        {props.id}
        {props.foo.bar.baz}
      </div>
      <style jsx>{\`
        .div {
          padding: 10px;
        }
      \`}</style>
    </Fragment>
  );
}

export default MyBasicComponent;
"
`;

exports[`Preact > jsx > Typescript Test > spreadAttrs 1`] = `
"/** @jsx h */
import { h, Fragment } from \\"preact\\";

function MyBasicComponent(props: any) {
  return <input {...attrs} />;
}

export default MyBasicComponent;
"
`;

exports[`Preact > jsx > Typescript Test > spreadNestedProps 1`] = `
"/** @jsx h */
import { h, Fragment } from \\"preact\\";

function MyBasicComponent(props: any) {
  return <input {...props.nested} />;
}

export default MyBasicComponent;
"
`;

exports[`Preact > jsx > Typescript Test > spreadProps 1`] = `
"/** @jsx h */
import { h, Fragment } from \\"preact\\";

function MyBasicComponent(props: any) {
  return <input {...props} />;
}

export default MyBasicComponent;
"
`;

exports[`Preact > jsx > Typescript Test > string-literal-store 1`] = `
"/** @jsx h */
import { h, Fragment } from \\"preact\\";
import { useState } from \\"preact/hooks\\";

function StringLiteralStore(props: any) {
  const [foo, setFoo] = useState(() => 123);

  return <div>{foo}</div>;
}

export default StringLiteralStore;
"
`;

exports[`Preact > jsx > Typescript Test > styleClassAndCss 1`] = `
"/** @jsx h */
import { h, Fragment } from \\"preact\\";

function MyComponent(props: any) {
  return (
    <Fragment>
      <div
        className=\\"builder-column div\\"
        style={{
          width: \\"100%\\",
        }}
      />
      <style jsx>{\`
        .div {
          display: flex;
          flex-direction: column;
          align-items: stretch;
        }
      \`}</style>
    </Fragment>
  );
}

export default MyComponent;
"
`;

exports[`Preact > jsx > Typescript Test > stylePropClassAndCss 1`] = `
"/** @jsx h */
import { h, Fragment } from \\"preact\\";

function StylePropClassAndCss(props: any) {
  return (
    <Fragment>
      <div
        style={props.attributes.style}
        className={props.attributes.class + \\" div\\"}
      />
      <style jsx>{\`
        .div {
          display: flex;
          flex-direction: column;
          align-items: stretch;
        }
      \`}</style>
    </Fragment>
  );
}

export default StylePropClassAndCss;
"
`;

exports[`Preact > jsx > Typescript Test > subComponent 1`] = `
"/** @jsx h */
import { h, Fragment } from \\"preact\\";
import Foo from \\"./foo-sub-component\\";

function SubComponent(props: any) {
  return <Foo />;
}

export default SubComponent;
"
`;

exports[`Preact > jsx > Typescript Test > svgComponent 1`] = `
"/** @jsx h */
import { h, Fragment } from \\"preact\\";

function SvgComponent(props: any) {
  return (
    <svg
      fill=\\"none\\"
      role=\\"img\\"
      viewBox={\\"0 0 \\" + 42 + \\" \\" + 42}
      width={42}
      height={42}
    >
      <defs>
        <filter id=\\"prefix__filter0_f\\" filterUnits=\\"userSpaceOnUse\\">
          <feFlood result=\\"BackgroundImageFix\\" />
          <feBlend in=\\"SourceGraphic\\" in2=\\"BackgroundImageFix\\" result=\\"shape\\" />
          <feGaussianBlur result=\\"effect1_foregroundBlur\\" stdDeviation={7} />
        </filter>
      </defs>
    </svg>
  );
}

export default SvgComponent;
"
`;

exports[`Preact > jsx > Typescript Test > typeDependency 1`] = `
"/** @jsx h */
import { h, Fragment } from \\"preact\\";

export type TypeDependencyProps = {
  foo: Foo;
  foo2: Foo2;
};
import type { Foo } from \\"./foo-type\\";
import type { Foo as Foo2 } from \\"./type-export\\";

function TypeDependency(props: TypeDependencyProps) {
  return <div>{props.foo}</div>;
}

export default TypeDependency;
"
`;

exports[`Preact > jsx > Typescript Test > use-style 1`] = `
"/** @jsx h */
import { h, Fragment } from \\"preact\\";

function MyComponent(props: any) {
  return (
    <Fragment>
      <button type=\\"button\\">Button</button>
      <style jsx>{\`
        button {
          background: blue;
          color: white;
          font-size: 12px;
          outline: 1px solid black;
        }
      \`}</style>
    </Fragment>
  );
}

export default MyComponent;
"
`;

exports[`Preact > jsx > Typescript Test > use-style-and-css 1`] = `
"/** @jsx h */
import { h, Fragment } from \\"preact\\";

function MyComponent(props: any) {
  return (
    <Fragment>
      <button type=\\"button\\" className=\\"button\\">
        Button
      </button>
      <style jsx>{\`
        button {
          font-size: 12px;
          outline: 1px solid black;
        }

        .button {
          background: blue;
          color: white;
        }
      \`}</style>
    </Fragment>
  );
}

export default MyComponent;
"
`;

exports[`Preact > jsx > Typescript Test > use-style-outside-component 1`] = `
"/** @jsx h */
import { h, Fragment } from \\"preact\\";

function MyComponent(props: any) {
  return (
    <Fragment>
      <button type=\\"button\\">Button</button>
      <style jsx>{\`
        button {
          background: blue;
          color: white;
          font-size: 12px;
          outline: 1px solid black;
        }
      \`}</style>
    </Fragment>
  );
}

export default MyComponent;
"
`;

exports[`Preact > jsx > Typescript Test > useTarget 1`] = `
"/** @jsx h */
import { h, Fragment } from \\"preact\\";
import { useState, useEffect } from \\"preact/hooks\\";

function UseTargetComponent(props: any) {
  function name() {
    const prefix = \\"p\\";
    return prefix + \\"foo\\";
  }

  const [lastName, setLastName] = useState(() => \\"bar\\");

  useEffect(() => {}, []);

  return <div>{name()}</div>;
}

export default UseTargetComponent;
"
`;

exports[`Preact > jsx > Typescript Test > webComponent 1`] = `
"/** @jsx h */
import { h, Fragment } from \\"preact\\";
import { useRef } from \\"preact/hooks\\";
import { register } from \\"swiper/element/bundle\\";

function MyBasicWebComponent(props: any) {
  const hasInitialized = useRef(false);
  if (!hasInitialized.current) {
    register();
    hasInitialized.current = true;
  }

  return (
    <swiper-container slides-per-view=\\"3\\" navigation=\\"true\\" pagination=\\"true\\">
      <swiper-slide>Slide 1</swiper-slide>
      <swiper-slide>Slide 2</swiper-slide>
      <swiper-slide>Slide 3</swiper-slide>
    </swiper-container>
  );
}

export default MyBasicWebComponent;
"
`;

exports[`Preact > svelte > Javascript Test > basic 1`] = `
"/** @jsx h */
import { h, Fragment } from \\"preact\\";
import { useState } from \\"preact/hooks\\";

function MyComponent(props) {
  const [name, setName] = useState(() => \\"Steve\\");

  return (
    <div>
      <input onChange={(event) => setName(event.target.value)} value={name} />
      Hello! I can run in React, Vue, Solid, or Liquid!
    </div>
  );
}

export default MyComponent;
"
`;

exports[`Preact > svelte > Javascript Test > bindGroup 1`] = `
"/** @jsx h */
import { h, Fragment } from \\"preact\\";
import { useState } from \\"preact/hooks\\";

function MyComponent(props) {
  const [tortilla, setTortilla] = useState(() => \\"Plain\\");

  const [fillings, setFillings] = useState(() => []);

  return (
    <div>
      <input
        type=\\"radio\\"
        value=\\"Plain\\"
        checked={tortilla === \\"Plain\\"}
        onChange={(event) => setTortilla(event.target.value)}
      />
      <input
        type=\\"radio\\"
        value=\\"Whole wheat\\"
        checked={tortilla === \\"Whole wheat\\"}
        onChange={(event) => setTortilla(event.target.value)}
      />
      <input
        type=\\"radio\\"
        value=\\"Spinach\\"
        checked={tortilla === \\"Spinach\\"}
        onChange={(event) => setTortilla(event.target.value)}
      />
      <br />
      <br />
      <input
        type=\\"checkbox\\"
        value=\\"Rice\\"
        checked={fillings === \\"Rice\\"}
        onChange={(event) => setFillings(event.target.value)}
      />
      <input
        type=\\"checkbox\\"
        value=\\"Beans\\"
        checked={fillings === \\"Beans\\"}
        onChange={(event) => setFillings(event.target.value)}
      />
      <input
        type=\\"checkbox\\"
        value=\\"Cheese\\"
        checked={fillings === \\"Cheese\\"}
        onChange={(event) => setFillings(event.target.value)}
      />
      <input
        type=\\"checkbox\\"
        value=\\"Guac (extra)\\"
        checked={fillings === \\"Guac (extra)\\"}
        onChange={(event) => setFillings(event.target.value)}
      />
      <p>Tortilla: {tortilla}</p>
      <p>Fillings: {fillings}</p>
    </div>
  );
}

export default MyComponent;
"
`;

exports[`Preact > svelte > Javascript Test > bindProperty 1`] = `
"/** @jsx h */
import { h, Fragment } from \\"preact\\";
import { useState } from \\"preact/hooks\\";

function MyComponent(props) {
  const [value, setValue] = useState(() => \\"hello\\");

  return <input value={value} />;
}

export default MyComponent;
"
`;

exports[`Preact > svelte > Javascript Test > classDirective 1`] = `
"/** @jsx h */
import { h, Fragment } from \\"preact\\";
import { useState } from \\"preact/hooks\\";

function MyComponent(props) {
  const [focus, setFocus] = useState(() => true);

  return (
    <input
      className={\`form-input \${props.disabled ? \\"disabled\\" : \\"\\"} \${
        focus ? \\"focus\\" : \\"\\"
      }\`}
    />
  );
}

MyComponent.defaultProps = {};

export default MyComponent;
"
`;

exports[`Preact > svelte > Javascript Test > context 1`] = `
"'>' expected. (36:13)
  34 | return (
  35 |
> 36 | <'activeTab'.Provider  value={activeTab}><div>{activeTab}</div></'activeTab'.Provider>
     |             ^
  37 |
  38 |
  39 |"
`;

exports[`Preact > svelte > Javascript Test > each 1`] = `
"/** @jsx h */
import { h, Fragment } from \\"preact\\";
import { useState } from \\"preact/hooks\\";

function MyComponent(props) {
  const [numbers, setNumbers] = useState(() => [\\"one\\", \\"two\\", \\"three\\"]);

  return (
    <ul>
      {numbers?.map((num) => (
        <li>{num}</li>
      ))}
    </ul>
  );
}

export default MyComponent;
"
`;

exports[`Preact > svelte > Javascript Test > eventHandlers 1`] = `
"/** @jsx h */
import { h, Fragment } from \\"preact\\";

function MyComponent(props) {
  function log(msg = \\"hello\\") {
    console.log(msg);
  }

  return (
    <div>
      <button onClick={(a) => log(\\"hi\\")}>Log</button>
      <button onClick={(event) => log(event)}>Log</button>
      <button onClick={(event) => log(event)}>Log</button>
    </div>
  );
}

export default MyComponent;
"
`;

exports[`Preact > svelte > Javascript Test > html 1`] = `
"/** @jsx h */
import { h, Fragment } from \\"preact\\";
import { useState } from \\"preact/hooks\\";

function MyComponent(props) {
  const [html, setHtml] = useState(() => \\"<b>bold</b>\\");

  return <div dangerouslySetInnerHTML={{ __html: html }} />;
}

export default MyComponent;
"
`;

exports[`Preact > svelte > Javascript Test > ifElse 1`] = `
"/** @jsx h */
import { h, Fragment } from \\"preact\\";
import { useState } from \\"preact/hooks\\";

function MyComponent(props) {
  const [show, setShow] = useState(() => true);

  function toggle() {
    setShow(!show);
  }

  return (
    <Fragment>
      {show ? (
        <Fragment>
          <button onClick={(event) => toggle(event)}> Hide </button>
        </Fragment>
      ) : (
        <button onClick={(event) => toggle(event)}> Show </button>
      )}
    </Fragment>
  );
}

export default MyComponent;
"
`;

exports[`Preact > svelte > Javascript Test > imports 1`] = `
"/** @jsx h */
import { h, Fragment } from \\"preact\\";
import { useState } from \\"preact/hooks\\";
import Button from \\"./Button\\";

function MyComponent(props) {
  const [disabled, setDisabled] = useState(() => false);

  return (
    <div>
      <Button type=\\"button\\" disabled={disabled}>
        <>{props.children}</>
      </Button>
    </div>
  );
}

export default MyComponent;
"
`;

exports[`Preact > svelte > Javascript Test > lifecycleHooks 1`] = `
"/** @jsx h */
import { h, Fragment } from \\"preact\\";
import { useEffect } from \\"preact/hooks\\";

function MyComponent(props) {
  useEffect(() => {
    console.log(\\"onMount\\");
  }, []);

  useEffect(() => {
    console.log(\\"onAfterUpdate\\");
  });

  useEffect(() => {
    return () => {
      console.log(\\"onDestroy\\");
    };
  }, []);

  return <div />;
}

export default MyComponent;
"
`;

exports[`Preact > svelte > Javascript Test > reactive 1`] = `
"/** @jsx h */
import { h, Fragment } from \\"preact\\";
import { useState } from \\"preact/hooks\\";

function MyComponent(props) {
  const [name, setName] = useState(() => \\"Steve\\");

  function lowercaseName() {
    return name.toLowerCase();
  }

  return (
    <div>
      <input value={name} />
      Lowercase: {lowercaseName()}
    </div>
  );
}

export default MyComponent;
"
`;

exports[`Preact > svelte > Javascript Test > reactiveWithFn 1`] = `
"/** @jsx h */
import { h, Fragment } from \\"preact\\";
import { useState, useEffect } from \\"preact/hooks\\";

function MyComponent(props) {
  const [a, setA] = useState(() => 2);

  const [b, setB] = useState(() => 5);

  const [result, setResult] = useState(() => null);

  function calculateResult(a_, b_) {
    setResult(a_ * b_);
  }

  useEffect(() => {
    calculateResult(a, b);
  }, [a, b]);

  return (
    <div>
      <input
        type=\\"number\\"
        onChange={(event) => setA(event.target.value)}
        value={a}
      />
      <input
        type=\\"number\\"
        onChange={(event) => setB(event.target.value)}
        value={b}
      />
      Result: {result}
    </div>
  );
}

export default MyComponent;
"
`;

exports[`Preact > svelte > Javascript Test > slots 1`] = `
"/** @jsx h */
import { h, Fragment } from \\"preact\\";

function MyComponent(props) {
  return (
    <div>
      <>{props.children || \\"default\\"}</>
      <>{props.Test || <div>default</div>}</>
    </div>
  );
}

export default MyComponent;
"
`;

exports[`Preact > svelte > Javascript Test > style 1`] = `
"/** @jsx h */
import { h, Fragment } from \\"preact\\";

function MyComponent(props) {
  return (
    <Fragment>
      <input className=\\"form-input\\" />
      <style jsx>{\`
        input {
          color: red;
          font-size: 12px;
        }

        .form-input:focus {
          outline: 1px solid blue;
        }
      \`}</style>
    </Fragment>
  );
}

export default MyComponent;
"
`;

exports[`Preact > svelte > Javascript Test > textExpressions 1`] = `
"/** @jsx h */
import { h, Fragment } from \\"preact\\";
import { useState } from \\"preact/hooks\\";

function MyComponent(props) {
  const [a, setA] = useState(() => 5);

  const [b, setB] = useState(() => 12);

  return (
    <div>
      normal:
      {a + b}
      <br />
      conditional
      {a > 2 ? \\"hello\\" : \\"bye\\"}
    </div>
  );
}

export default MyComponent;
"
`;

exports[`Preact > svelte > Typescript Test > basic 1`] = `
"/** @jsx h */
import { h, Fragment } from \\"preact\\";
import { useState } from \\"preact/hooks\\";

function MyComponent(props: any) {
  const [name, setName] = useState(() => \\"Steve\\");

  return (
    <div>
      <input onChange={(event) => setName(event.target.value)} value={name} />
      Hello! I can run in React, Vue, Solid, or Liquid!
    </div>
  );
}

export default MyComponent;
"
`;

exports[`Preact > svelte > Typescript Test > bindGroup 1`] = `
"/** @jsx h */
import { h, Fragment } from \\"preact\\";
import { useState } from \\"preact/hooks\\";

function MyComponent(props: any) {
  const [tortilla, setTortilla] = useState(() => \\"Plain\\");

  const [fillings, setFillings] = useState(() => []);

  return (
    <div>
      <input
        type=\\"radio\\"
        value=\\"Plain\\"
        checked={tortilla === \\"Plain\\"}
        onChange={(event) => setTortilla(event.target.value)}
      />
      <input
        type=\\"radio\\"
        value=\\"Whole wheat\\"
        checked={tortilla === \\"Whole wheat\\"}
        onChange={(event) => setTortilla(event.target.value)}
      />
      <input
        type=\\"radio\\"
        value=\\"Spinach\\"
        checked={tortilla === \\"Spinach\\"}
        onChange={(event) => setTortilla(event.target.value)}
      />
      <br />
      <br />
      <input
        type=\\"checkbox\\"
        value=\\"Rice\\"
        checked={fillings === \\"Rice\\"}
        onChange={(event) => setFillings(event.target.value)}
      />
      <input
        type=\\"checkbox\\"
        value=\\"Beans\\"
        checked={fillings === \\"Beans\\"}
        onChange={(event) => setFillings(event.target.value)}
      />
      <input
        type=\\"checkbox\\"
        value=\\"Cheese\\"
        checked={fillings === \\"Cheese\\"}
        onChange={(event) => setFillings(event.target.value)}
      />
      <input
        type=\\"checkbox\\"
        value=\\"Guac (extra)\\"
        checked={fillings === \\"Guac (extra)\\"}
        onChange={(event) => setFillings(event.target.value)}
      />
      <p>Tortilla: {tortilla}</p>
      <p>Fillings: {fillings}</p>
    </div>
  );
}

export default MyComponent;
"
`;

exports[`Preact > svelte > Typescript Test > bindProperty 1`] = `
"/** @jsx h */
import { h, Fragment } from \\"preact\\";
import { useState } from \\"preact/hooks\\";

function MyComponent(props: any) {
  const [value, setValue] = useState(() => \\"hello\\");

  return <input value={value} />;
}

export default MyComponent;
"
`;

exports[`Preact > svelte > Typescript Test > classDirective 1`] = `
"/** @jsx h */
import { h, Fragment } from \\"preact\\";
import { useState } from \\"preact/hooks\\";

function MyComponent(props: any) {
  const [focus, setFocus] = useState(() => true);

  return (
    <input
      className={\`form-input \${props.disabled ? \\"disabled\\" : \\"\\"} \${
        focus ? \\"focus\\" : \\"\\"
      }\`}
    />
  );
}

MyComponent.defaultProps = {};

export default MyComponent;
"
`;

exports[`Preact > svelte > Typescript Test > context 1`] = `
"'>' expected. (36:13)
  34 | return (
  35 |
> 36 | <'activeTab'.Provider  value={activeTab}><div>{activeTab}</div></'activeTab'.Provider>
     |             ^
  37 |
  38 |
  39 |"
`;

exports[`Preact > svelte > Typescript Test > each 1`] = `
"/** @jsx h */
import { h, Fragment } from \\"preact\\";
import { useState } from \\"preact/hooks\\";

function MyComponent(props: any) {
  const [numbers, setNumbers] = useState(() => [\\"one\\", \\"two\\", \\"three\\"]);

  return (
    <ul>
      {numbers?.map((num) => (
        <li>{num}</li>
      ))}
    </ul>
  );
}

export default MyComponent;
"
`;

exports[`Preact > svelte > Typescript Test > eventHandlers 1`] = `
"/** @jsx h */
import { h, Fragment } from \\"preact\\";

function MyComponent(props: any) {
  function log(msg = \\"hello\\") {
    console.log(msg);
  }

  return (
    <div>
      <button onClick={(a) => log(\\"hi\\")}>Log</button>
      <button onClick={(event) => log(event)}>Log</button>
      <button onClick={(event) => log(event)}>Log</button>
    </div>
  );
}

export default MyComponent;
"
`;

exports[`Preact > svelte > Typescript Test > html 1`] = `
"/** @jsx h */
import { h, Fragment } from \\"preact\\";
import { useState } from \\"preact/hooks\\";

function MyComponent(props: any) {
  const [html, setHtml] = useState(() => \\"<b>bold</b>\\");

  return <div dangerouslySetInnerHTML={{ __html: html }} />;
}

export default MyComponent;
"
`;

exports[`Preact > svelte > Typescript Test > ifElse 1`] = `
"/** @jsx h */
import { h, Fragment } from \\"preact\\";
import { useState } from \\"preact/hooks\\";

function MyComponent(props: any) {
  const [show, setShow] = useState(() => true);

  function toggle() {
    setShow(!show);
  }

  return (
    <Fragment>
      {show ? (
        <Fragment>
          <button onClick={(event) => toggle(event)}> Hide </button>
        </Fragment>
      ) : (
        <button onClick={(event) => toggle(event)}> Show </button>
      )}
    </Fragment>
  );
}

export default MyComponent;
"
`;

exports[`Preact > svelte > Typescript Test > imports 1`] = `
"/** @jsx h */
import { h, Fragment } from \\"preact\\";
import { useState } from \\"preact/hooks\\";
import Button from \\"./Button\\";

function MyComponent(props: any) {
  const [disabled, setDisabled] = useState(() => false);

  return (
    <div>
      <Button type=\\"button\\" disabled={disabled}>
        <>{props.children}</>
      </Button>
    </div>
  );
}

export default MyComponent;
"
`;

exports[`Preact > svelte > Typescript Test > lifecycleHooks 1`] = `
"/** @jsx h */
import { h, Fragment } from \\"preact\\";
import { useEffect } from \\"preact/hooks\\";

function MyComponent(props: any) {
  useEffect(() => {
    console.log(\\"onMount\\");
  }, []);

  useEffect(() => {
    console.log(\\"onAfterUpdate\\");
  });

  useEffect(() => {
    return () => {
      console.log(\\"onDestroy\\");
    };
  }, []);

  return <div />;
}

export default MyComponent;
"
`;

exports[`Preact > svelte > Typescript Test > reactive 1`] = `
"/** @jsx h */
import { h, Fragment } from \\"preact\\";
import { useState } from \\"preact/hooks\\";

function MyComponent(props: any) {
  const [name, setName] = useState(() => \\"Steve\\");

  function lowercaseName() {
    return name.toLowerCase();
  }

  return (
    <div>
      <input value={name} />
      Lowercase: {lowercaseName()}
    </div>
  );
}

export default MyComponent;
"
`;

exports[`Preact > svelte > Typescript Test > reactiveWithFn 1`] = `
"/** @jsx h */
import { h, Fragment } from \\"preact\\";
import { useState, useEffect } from \\"preact/hooks\\";

function MyComponent(props: any) {
  const [a, setA] = useState(() => 2);

  const [b, setB] = useState(() => 5);

  const [result, setResult] = useState(() => null);

  function calculateResult(a_, b_) {
    setResult(a_ * b_);
  }

  useEffect(() => {
    calculateResult(a, b);
  }, [a, b]);

  return (
    <div>
      <input
        type=\\"number\\"
        onChange={(event) => setA(event.target.value)}
        value={a}
      />
      <input
        type=\\"number\\"
        onChange={(event) => setB(event.target.value)}
        value={b}
      />
      Result: {result}
    </div>
  );
}

export default MyComponent;
"
`;

exports[`Preact > svelte > Typescript Test > slots 1`] = `
"/** @jsx h */
import { h, Fragment } from \\"preact\\";

function MyComponent(props: any) {
  return (
    <div>
      <>{props.children || \\"default\\"}</>
      <>{props.Test || <div>default</div>}</>
    </div>
  );
}

export default MyComponent;
"
`;

exports[`Preact > svelte > Typescript Test > style 1`] = `
"/** @jsx h */
import { h, Fragment } from \\"preact\\";

function MyComponent(props: any) {
  return (
    <Fragment>
      <input className=\\"form-input\\" />
      <style jsx>{\`
        input {
          color: red;
          font-size: 12px;
        }

        .form-input:focus {
          outline: 1px solid blue;
        }
      \`}</style>
    </Fragment>
  );
}

export default MyComponent;
"
`;

exports[`Preact > svelte > Typescript Test > textExpressions 1`] = `
"/** @jsx h */
import { h, Fragment } from \\"preact\\";
import { useState } from \\"preact/hooks\\";

function MyComponent(props: any) {
  const [a, setA] = useState(() => 5);

  const [b, setB] = useState(() => 12);

  return (
    <div>
      normal:
      {a + b}
      <br />
      conditional
      {a > 2 ? \\"hello\\" : \\"bye\\"}
    </div>
  );
}

export default MyComponent;
"
`;
