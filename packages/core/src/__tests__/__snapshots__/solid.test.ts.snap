// Vitest Snapshot v1

exports[`Solid > jsx > Javascript Test > AdvancedRef 1`] = `
"import { Show, on, createEffect, createSignal } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";

function MyBasicRefComponent(props) {
  const [name, setName] = createSignal(\\"PatrickJS\\");

  function onBlur() {
    // Maintain focus
    inputRef.focus();
  }

  function lowerCaseName() {
    return name().toLowerCase();
  }

  let inputRef;
  let inputNoArgRef;

  function onUpdateFn_0() {
    console.log(\\"Received an update\\");
  }
  createEffect(on(() => [inputRef, inputNoArgRef], onUpdateFn_0));

  return (
    <div>
      <Show when={props.showInput}>
        <>
          <input
            class={css({
              color: \\"red\\",
            })}
            ref={inputRef}
            value={name()}
            onBlur={(event) => onBlur()}
            onInput={(event) => setName(event.target.value)}
          />
          <label for=\\"cars\\" ref={inputNoArgRef}>
            Choose a car:
          </label>
          <select name=\\"cars\\" id=\\"cars\\">
            <option value=\\"supra\\">GR Supra</option>
            <option value=\\"86\\">GR 86</option>
          </select>
        </>
      </Show>
      Hello
      {lowerCaseName()}! I can run in React, Qwik, Vue, Solid, or Web Component!
    </div>
  );
}

export default MyBasicRefComponent;
"
`;

exports[`Solid > jsx > Javascript Test > AdvancedRef 2`] = `
"import { Show, on, createEffect, createSignal } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";

function MyBasicRefComponent(props) {
  const [name, setName] = createSignal(\\"PatrickJS\\");

  function onBlur() {
    // Maintain focus
    inputRef.focus();
  }

  function lowerCaseName() {
    return name().toLowerCase();
  }

  let inputRef;
  let inputNoArgRef;

  function onUpdateFn_0() {
    console.log(\\"Received an update\\");
  }
  createEffect(on(() => [inputRef, inputNoArgRef], onUpdateFn_0));

  return (
    <>
      <div>
        <Show when={props.showInput}>
          <>
            <input
              class=\\"input-760f5a06\\"
              ref={inputRef}
              value={name()}
              onBlur={(event) => onBlur()}
              onInput={(event) => setName(event.target.value)}
            />
            <label for=\\"cars\\" ref={inputNoArgRef}>
              Choose a car:
            </label>
            <select name=\\"cars\\" id=\\"cars\\">
              <option value=\\"supra\\">GR Supra</option>
              <option value=\\"86\\">GR 86</option>
            </select>
          </>
        </Show>
        Hello
        {lowerCaseName()}! I can run in React, Qwik, Vue, Solid, or Web
        Component!
      </div>
      <style jsx>{\`
        .input-760f5a06 {
          color: red;
        }
      \`}</style>
    </>
  );
}

export default MyBasicRefComponent;
"
`;

exports[`Solid > jsx > Javascript Test > Basic 1`] = `
"import { createSignal } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";

export const DEFAULT_VALUES = {
  name: \\"Steve\\",
};

function MyBasicComponent(props) {
  const [name, setName] = createSignal(\\"Steve\\");

  const [age, setAge] = createSignal(1);

  const [sports, setSports] = createSignal([\\"\\"]);

  function underscore_fn_name() {
    return \\"bar\\";
  }

  return (
    <div
      class={
        \\"test \\" +
        css({
          padding: \\"10px\\",
        })
      }
    >
      <input
        value={DEFAULT_VALUES.name || name()}
        onInput={(myEvent) => setName(myEvent.target.value)}
      />
      Hello! I can run in React, Vue, Solid, or Liquid!
    </div>
  );
}

export default MyBasicComponent;
"
`;

exports[`Solid > jsx > Javascript Test > Basic 2`] = `
"import { Show, For, createSignal } from \\"solid-js\\";

function MyBasicForShowComponent(props) {
  const [name, setName] = createSignal(\\"PatrickJS\\");

  const [names, setNames] = createSignal([\\"Steve\\", \\"PatrickJS\\"]);

  return (
    <div>
      <For each={names()}>
        {(person, _index) => {
          const index = _index();
          return (
            <Show when={person === name()}>
              <input
                value={name()}
                onInput={(event) => {
                  setName(event.target.value + \\" and \\" + person);
                }}
              />
              Hello
              {person}! I can run in Qwik, Web Component, React, Vue, Solid, or
              Liquid!
            </Show>
          );
        }}
      </For>
    </div>
  );
}

export default MyBasicForShowComponent;
"
`;

exports[`Solid > jsx > Javascript Test > Basic 3`] = `
"import { createSignal } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";

export const DEFAULT_VALUES = {
  name: \\"Steve\\",
};

function MyBasicComponent(props) {
  const [name, setName] = createSignal(\\"Steve\\");

  const [age, setAge] = createSignal(1);

  const [sports, setSports] = createSignal([\\"\\"]);

  function underscore_fn_name() {
    return \\"bar\\";
  }

  return (
    <>
      <div class=\\"test div-629b2554\\">
        <input
          value={DEFAULT_VALUES.name || name()}
          onInput={(myEvent) => setName(myEvent.target.value)}
        />
        Hello! I can run in React, Vue, Solid, or Liquid!
      </div>
      <style jsx>{\`
        .div-629b2554 {
          padding: 10px;
        }
      \`}</style>
    </>
  );
}

export default MyBasicComponent;
"
`;

exports[`Solid > jsx > Javascript Test > Basic 4`] = `
"import { Show, For, createSignal } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";

function MyBasicForShowComponent(props) {
  const [name, setName] = createSignal(\\"PatrickJS\\");

  const [names, setNames] = createSignal([\\"Steve\\", \\"PatrickJS\\"]);

  return (
    <>
      <div>
        <For each={names()}>
          {(person, _index) => {
            const index = _index();
            return (
              <Show when={person === name()}>
                <input
                  value={name()}
                  onInput={(event) => {
                    setName(event.target.value + \\" and \\" + person);
                  }}
                />
                Hello
                {person}! I can run in Qwik, Web Component, React, Vue, Solid,
                or Liquid!
              </Show>
            );
          }}
        </For>
      </div>
    </>
  );
}

export default MyBasicForShowComponent;
"
`;

exports[`Solid > jsx > Javascript Test > Basic Context 1`] = `
"import { useContext, onMount, createSignal } from \\"solid-js\\";

import { Injector, createInjector, MyService } from \\"@dummy/injection-js\\";

function MyBasicComponent(props) {
  const [name, setName] = createSignal(\\"PatrickJS\\");

  function onChange() {
    const change = myService.method(\\"change\\");
    console.log(change);
  }

  const myService = useContext(MyService);

  onMount(() => {
    const bye = myService.method(\\"hi\\");
    console.log(bye);
  });

  return (
    <Injector.Provider>
      <div>
        {myService.method(\\"hello\\") + name()}
        Hello! I can run in React, Vue, Solid, or Liquid!
        <input onInput={(event) => onChange} />
      </div>
    </Injector.Provider>
  );
}

export default MyBasicComponent;
"
`;

exports[`Solid > jsx > Javascript Test > Basic Context 2`] = `
"import { useContext, onMount, createSignal } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";

import { Injector, createInjector, MyService } from \\"@dummy/injection-js\\";

function MyBasicComponent(props) {
  const [name, setName] = createSignal(\\"PatrickJS\\");

  function onChange() {
    const change = myService.method(\\"change\\");
    console.log(change);
  }

  const myService = useContext(MyService);

  onMount(() => {
    const bye = myService.method(\\"hi\\");
    console.log(bye);
  });

  return (
    <>
      <Injector.Provider>
        <div>
          {myService.method(\\"hello\\") + name()}
          Hello! I can run in React, Vue, Solid, or Liquid!
          <input onInput={(event) => onChange} />
        </div>
      </Injector.Provider>
    </>
  );
}

export default MyBasicComponent;
"
`;

exports[`Solid > jsx > Javascript Test > Basic OnMount Update 1`] = `
"import { onMount, createSignal } from \\"solid-js\\";

function MyBasicOnMountUpdateComponent(props) {
  const [name, setName] = createSignal(\\"PatrickJS\\");

  const [names, setNames] = createSignal([\\"Steve\\", \\"PatrickJS\\"]);

  onMount(() => {
    setName(\\"PatrickJS onMount\\" + props.bye);
  });

  return (
    <div>
      Hello
      {name()}
    </div>
  );
}

export default MyBasicOnMountUpdateComponent;
"
`;

exports[`Solid > jsx > Javascript Test > Basic OnMount Update 2`] = `
"import { onMount, createSignal } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";

function MyBasicOnMountUpdateComponent(props) {
  const [name, setName] = createSignal(\\"PatrickJS\\");

  const [names, setNames] = createSignal([\\"Steve\\", \\"PatrickJS\\"]);

  onMount(() => {
    setName(\\"PatrickJS onMount\\" + props.bye);
  });

  return (
    <>
      <div>
        Hello
        {name()}
      </div>
    </>
  );
}

export default MyBasicOnMountUpdateComponent;
"
`;

exports[`Solid > jsx > Javascript Test > Basic Outputs 1`] = `
"import { onMount, createSignal } from \\"solid-js\\";

function MyBasicOutputsComponent(props) {
  const [name, setName] = createSignal(\\"PatrickJS\\");

  onMount(() => {
    props.onMessage(name());
    props.onEvent(props.message);
  });

  return <div></div>;
}

export default MyBasicOutputsComponent;
"
`;

exports[`Solid > jsx > Javascript Test > Basic Outputs 2`] = `
"import { onMount, createSignal } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";

function MyBasicOutputsComponent(props) {
  const [name, setName] = createSignal(\\"PatrickJS\\");

  onMount(() => {
    props.onMessage(name());
    props.onEvent(props.message);
  });

  return (
    <>
      <div></div>
    </>
  );
}

export default MyBasicOutputsComponent;
"
`;

exports[`Solid > jsx > Javascript Test > Basic Outputs Meta 1`] = `
"import { onMount, createSignal } from \\"solid-js\\";

function MyBasicOutputsComponent(props) {
  const [name, setName] = createSignal(\\"PatrickJS\\");

  onMount(() => {
    props.onMessage(name());
    props.onEvent(props.message);
  });

  return <div></div>;
}

export default MyBasicOutputsComponent;
"
`;

exports[`Solid > jsx > Javascript Test > Basic Outputs Meta 2`] = `
"import { onMount, createSignal } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";

function MyBasicOutputsComponent(props) {
  const [name, setName] = createSignal(\\"PatrickJS\\");

  onMount(() => {
    props.onMessage(name());
    props.onEvent(props.message);
  });

  return (
    <>
      <div></div>
    </>
  );
}

export default MyBasicOutputsComponent;
"
`;

exports[`Solid > jsx > Javascript Test > BasicAttribute 1`] = `
"function MyComponent(props) {
  return <input autocapitalize=\\"on\\" autocomplete=\\"on\\" spellcheck={true} />;
}

export default MyComponent;
"
`;

exports[`Solid > jsx > Javascript Test > BasicAttribute 2`] = `
"import { css } from \\"solid-styled-components\\";

function MyComponent(props) {
  return (
    <>
      <input autocapitalize=\\"on\\" autocomplete=\\"on\\" spellcheck={true} />
    </>
  );
}

export default MyComponent;
"
`;

exports[`Solid > jsx > Javascript Test > BasicBooleanAttribute 1`] = `
"import MyBooleanAttributeComponent from \\"./basic-boolean-attribute-component.raw\\";

function MyBooleanAttribute(props) {
  return (
    <div>
      {props.children}
      {props.type}
      <MyBooleanAttributeComponent toggle={true}></MyBooleanAttributeComponent>
      <MyBooleanAttributeComponent toggle={true}></MyBooleanAttributeComponent>
      <MyBooleanAttributeComponent list={null}></MyBooleanAttributeComponent>
    </div>
  );
}

export default MyBooleanAttribute;
"
`;

exports[`Solid > jsx > Javascript Test > BasicBooleanAttribute 2`] = `
"import { css } from \\"solid-styled-components\\";

import MyBooleanAttributeComponent from \\"./basic-boolean-attribute-component.raw\\";

function MyBooleanAttribute(props) {
  return (
    <>
      <div>
        {props.children}
        {props.type}
        <MyBooleanAttributeComponent
          toggle={true}
        ></MyBooleanAttributeComponent>
        <MyBooleanAttributeComponent
          toggle={true}
        ></MyBooleanAttributeComponent>
        <MyBooleanAttributeComponent list={null}></MyBooleanAttributeComponent>
      </div>
    </>
  );
}

export default MyBooleanAttribute;
"
`;

exports[`Solid > jsx > Javascript Test > BasicChildComponent 1`] = `
"import { createSignal } from \\"solid-js\\";

import MyBasicComponent from \\"./basic.raw\\";
import MyBasicOnMountUpdateComponent from \\"./basic-onMount-update.raw\\";

function MyBasicChildComponent(props) {
  const [name, setName] = createSignal(\\"Steve\\");

  const [dev, setDev] = createSignal(\\"PatrickJS\\");

  return (
    <div>
      <MyBasicComponent id={dev()}></MyBasicComponent>
      <div>
        <MyBasicOnMountUpdateComponent
          hi={name()}
          bye={dev()}
        ></MyBasicOnMountUpdateComponent>
      </div>
    </div>
  );
}

export default MyBasicChildComponent;
"
`;

exports[`Solid > jsx > Javascript Test > BasicChildComponent 2`] = `
"import { createSignal } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";

import MyBasicComponent from \\"./basic.raw\\";
import MyBasicOnMountUpdateComponent from \\"./basic-onMount-update.raw\\";

function MyBasicChildComponent(props) {
  const [name, setName] = createSignal(\\"Steve\\");

  const [dev, setDev] = createSignal(\\"PatrickJS\\");

  return (
    <>
      <div>
        <MyBasicComponent id={dev()}></MyBasicComponent>
        <div>
          <MyBasicOnMountUpdateComponent
            hi={name()}
            bye={dev()}
          ></MyBasicOnMountUpdateComponent>
        </div>
      </div>
    </>
  );
}

export default MyBasicChildComponent;
"
`;

exports[`Solid > jsx > Javascript Test > BasicFor 1`] = `
"import { For, onMount, createSignal } from \\"solid-js\\";

function MyBasicForComponent(props) {
  const [name, setName] = createSignal(\\"PatrickJS\\");

  const [names, setNames] = createSignal([\\"Steve\\", \\"PatrickJS\\"]);

  onMount(() => {
    console.log(\\"onMount code\\");
  });

  return (
    <div>
      <For each={names()}>
        {(person, _index) => {
          const index = _index();
          return (
            <>
              <input
                value={name()}
                onInput={(event) => {
                  setName(event.target.value + \\" and \\" + person);
                }}
              />
              Hello
              {person}! I can run in Qwik, Web Component, React, Vue, Solid, or
              Liquid!
            </>
          );
        }}
      </For>
    </div>
  );
}

export default MyBasicForComponent;
"
`;

exports[`Solid > jsx > Javascript Test > BasicFor 2`] = `
"import { For, onMount, createSignal } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";

function MyBasicForComponent(props) {
  const [name, setName] = createSignal(\\"PatrickJS\\");

  const [names, setNames] = createSignal([\\"Steve\\", \\"PatrickJS\\"]);

  onMount(() => {
    console.log(\\"onMount code\\");
  });

  return (
    <>
      <div>
        <For each={names()}>
          {(person, _index) => {
            const index = _index();
            return (
              <>
                <input
                  value={name()}
                  onInput={(event) => {
                    setName(event.target.value + \\" and \\" + person);
                  }}
                />
                Hello
                {person}! I can run in Qwik, Web Component, React, Vue, Solid,
                or Liquid!
              </>
            );
          }}
        </For>
      </div>
    </>
  );
}

export default MyBasicForComponent;
"
`;

exports[`Solid > jsx > Javascript Test > BasicRef 1`] = `
"import { Show, createSignal } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";

function MyBasicRefComponent(props) {
  const [name, setName] = createSignal(\\"PatrickJS\\");

  function onBlur() {
    // Maintain focus
    inputRef.focus();
  }

  function lowerCaseName() {
    return name().toLowerCase();
  }

  let inputRef;
  let inputNoArgRef;

  return (
    <div>
      <Show when={props.showInput}>
        <>
          <input
            class={css({
              color: \\"red\\",
            })}
            ref={inputRef}
            value={name()}
            onBlur={(event) => onBlur()}
            onInput={(event) => setName(event.target.value)}
          />
          <label for=\\"cars\\" ref={inputNoArgRef}>
            Choose a car:
          </label>
          <select name=\\"cars\\" id=\\"cars\\">
            <option value=\\"supra\\">GR Supra</option>
            <option value=\\"86\\">GR 86</option>
          </select>
        </>
      </Show>
      Hello
      {lowerCaseName()}! I can run in React, Qwik, Vue, Solid, or Web Component!
    </div>
  );
}

export default MyBasicRefComponent;
"
`;

exports[`Solid > jsx > Javascript Test > BasicRef 2`] = `
"import { Show, createSignal } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";

function MyBasicRefComponent(props) {
  const [name, setName] = createSignal(\\"PatrickJS\\");

  function onBlur() {
    // Maintain focus
    inputRef.focus();
  }

  function lowerCaseName() {
    return name().toLowerCase();
  }

  let inputRef;
  let inputNoArgRef;

  return (
    <>
      <div>
        <Show when={props.showInput}>
          <>
            <input
              class=\\"input-aad6a728\\"
              ref={inputRef}
              value={name()}
              onBlur={(event) => onBlur()}
              onInput={(event) => setName(event.target.value)}
            />
            <label for=\\"cars\\" ref={inputNoArgRef}>
              Choose a car:
            </label>
            <select name=\\"cars\\" id=\\"cars\\">
              <option value=\\"supra\\">GR Supra</option>
              <option value=\\"86\\">GR 86</option>
            </select>
          </>
        </Show>
        Hello
        {lowerCaseName()}! I can run in React, Qwik, Vue, Solid, or Web
        Component!
      </div>
      <style jsx>{\`
        .input-aad6a728 {
          color: red;
        }
      \`}</style>
    </>
  );
}

export default MyBasicRefComponent;
"
`;

exports[`Solid > jsx > Javascript Test > BasicRefAssignment 1`] = `
"import { createSignal } from \\"solid-js\\";

function MyBasicRefAssignmentComponent(props) {
  function handlerClick(event) {
    event.preventDefault();
    console.log(\\"current value\\", holdValueRef);
    holdValueRef = holdValueRef + \\"JS\\";
  }

  return (
    <div>
      <button onClick={(evt) => handlerClick(evt)}>Click</button>
    </div>
  );
}

export default MyBasicRefAssignmentComponent;
"
`;

exports[`Solid > jsx > Javascript Test > BasicRefAssignment 2`] = `
"import { createSignal } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";

function MyBasicRefAssignmentComponent(props) {
  function handlerClick(event) {
    event.preventDefault();
    console.log(\\"current value\\", holdValueRef);
    holdValueRef = holdValueRef + \\"JS\\";
  }

  return (
    <>
      <div>
        <button onClick={(evt) => handlerClick(evt)}>Click</button>
      </div>
    </>
  );
}

export default MyBasicRefAssignmentComponent;
"
`;

exports[`Solid > jsx > Javascript Test > BasicRefPrevious 1`] = `
"import { on, createEffect, createSignal } from \\"solid-js\\";

export function usePrevious<T>(value: T) {
  // The ref object is a generic container whose current property is mutable ...
  // ... and can hold any value, similar to an instance property on a class
  let ref = useRef<T>(null); // Store current value in ref

  onUpdate(() => {
    ref = value;
  }, [value]); // Only re-run if value changes
  // Return previous value (happens before update in useEffect above)

  return ref;
}

function MyPreviousComponent(props) {
  const [count, setCount] = createSignal(0);

  function onUpdateFn_0() {
    prevCount = count();
  }
  createEffect(on(() => [count()], onUpdateFn_0));

  return (
    <div>
      <h1>
        Now:
        {count()}, before:
        {prevCount}
      </h1>
      <button onClick={(event) => setCount(1)}>Increment</button>
    </div>
  );
}

export default MyPreviousComponent;
"
`;

exports[`Solid > jsx > Javascript Test > BasicRefPrevious 2`] = `
"import { on, createEffect, createSignal } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";

export function usePrevious<T>(value: T) {
  // The ref object is a generic container whose current property is mutable ...
  // ... and can hold any value, similar to an instance property on a class
  let ref = useRef<T>(null); // Store current value in ref

  onUpdate(() => {
    ref = value;
  }, [value]); // Only re-run if value changes
  // Return previous value (happens before update in useEffect above)

  return ref;
}

function MyPreviousComponent(props) {
  const [count, setCount] = createSignal(0);

  function onUpdateFn_0() {
    prevCount = count();
  }
  createEffect(on(() => [count()], onUpdateFn_0));

  return (
    <>
      <div>
        <h1>
          Now:
          {count()}, before:
          {prevCount}
        </h1>
        <button onClick={(event) => setCount(1)}>Increment</button>
      </div>
    </>
  );
}

export default MyPreviousComponent;
"
`;

exports[`Solid > jsx > Javascript Test > Button 1`] = `
"import { Show } from \\"solid-js\\";

function Button(props) {
  return (
    <div>
      <Show when={props.link}>
        <a
          {...props.attributes}
          href={props.link}
          target={props.openLinkInNewTab ? \\"_blank\\" : undefined}
        >
          {props.text}
        </a>
      </Show>
      <Show when={!props.link}>
        <button type=\\"button\\" {...props.attributes}>
          {props.text}
        </button>
      </Show>
    </div>
  );
}

export default Button;
"
`;

exports[`Solid > jsx > Javascript Test > Button 2`] = `
"import { Show } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";

function Button(props) {
  return (
    <>
      <div>
        <Show when={props.link}>
          <a
            {...props.attributes}
            href={props.link}
            target={props.openLinkInNewTab ? \\"_blank\\" : undefined}
          >
            {props.text}
          </a>
        </Show>
        <Show when={!props.link}>
          <button type=\\"button\\" {...props.attributes}>
            {props.text}
          </button>
        </Show>
      </div>
    </>
  );
}

export default Button;
"
`;

exports[`Solid > jsx > Javascript Test > Columns 1`] = `
"import { For, createSignal } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";

function Column(props) {
  function getColumns() {
    return props.columns || [];
  }

  function getGutterSize() {
    return typeof props.space === \\"number\\" ? props.space || 0 : 20;
  }

  function getWidth(index) {
    const columns = getColumns();
    return (columns[index] && columns[index].width) || 100 / columns.length;
  }

  function getColumnCssWidth(index) {
    const columns = getColumns();
    const gutterSize = getGutterSize();
    const subtractWidth = (gutterSize * (columns.length - 1)) / columns.length;
    return \`calc(\${getWidth(index)}% - \${subtractWidth}px)\`;
  }

  return (
    <div
      class={
        \\"builder-columns \\" +
        css({
          display: \\"flex\\",
          flexDirection: \\"column\\",
          alignItems: \\"stretch\\",
          lineHeight: \\"normal\\",
          \\"@media (max-width: 999px)\\": {
            flexDirection: \\"row\\",
          },
          \\"@media (max-width: 639px)\\": {
            flexDirection: \\"row-reverse\\",
          },
        })
      }
    >
      <For each={props.columns}>
        {(column, _index) => {
          const index = _index();
          return (
            <div
              class={
                \\"builder-column \\" +
                css({
                  flexGrow: \\"1\\",
                })
              }
            >
              {column.content}
              {index}
            </div>
          );
        }}
      </For>
    </div>
  );
}

export default Column;
"
`;

exports[`Solid > jsx > Javascript Test > Columns 2`] = `
"import { For, createSignal } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";

function Column(props) {
  function getColumns() {
    return props.columns || [];
  }

  function getGutterSize() {
    return typeof props.space === \\"number\\" ? props.space || 0 : 20;
  }

  function getWidth(index) {
    const columns = getColumns();
    return (columns[index] && columns[index].width) || 100 / columns.length;
  }

  function getColumnCssWidth(index) {
    const columns = getColumns();
    const gutterSize = getGutterSize();
    const subtractWidth = (gutterSize * (columns.length - 1)) / columns.length;
    return \`calc(\${getWidth(index)}% - \${subtractWidth}px)\`;
  }

  return (
    <>
      <div class=\\"builder-columns div-3489e5a0\\">
        <For each={props.columns}>
          {(column, _index) => {
            const index = _index();
            return (
              <div class=\\"builder-column div-3489e5a0-2\\">
                {column.content}
                {index}
              </div>
            );
          }}
        </For>
      </div>
      <style jsx>{\`
        .div-3489e5a0 {
          display: flex;
          flex-direction: column;
          align-items: stretch;
          line-height: normal;
        }
        @media (max-width: 999px) {
          .div-3489e5a0 {
            flex-direction: row;
          }
        }
        @media (max-width: 639px) {
          .div-3489e5a0 {
            flex-direction: row-reverse;
          }
        }
        .div-3489e5a0-2 {
          flex-grow: 1;
        }
      \`}</style>
    </>
  );
}

export default Column;
"
`;

exports[`Solid > jsx > Javascript Test > ContentSlotHtml 1`] = `
"function ContentSlotCode(props) {
  return (
    <div>
      <Slot name={props.slotTesting}></Slot>
      <div>
        <hr />
      </div>
      <div>
        <Slot></Slot>
      </div>
    </div>
  );
}

export default ContentSlotCode;
"
`;

exports[`Solid > jsx > Javascript Test > ContentSlotHtml 2`] = `
"import { css } from \\"solid-styled-components\\";

function ContentSlotCode(props) {
  return (
    <>
      <div>
        <Slot name={props.slotTesting}></Slot>
        <div>
          <hr />
        </div>
        <div>
          <Slot></Slot>
        </div>
      </div>
    </>
  );
}

export default ContentSlotCode;
"
`;

exports[`Solid > jsx > Javascript Test > ContentSlotJSX 1`] = `
"import { Show } from \\"solid-js\\";

function ContentSlotJsxCode(props) {
  return (
    <div>
      <Show when={props.slotTesting}>
        <div>{props.slotTesting}</div>
      </Show>
      <div>
        <hr />
      </div>
      <div>{props.children}</div>
    </div>
  );
}

export default ContentSlotJsxCode;
"
`;

exports[`Solid > jsx > Javascript Test > ContentSlotJSX 2`] = `
"import { Show } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";

function ContentSlotJsxCode(props) {
  return (
    <>
      <div>
        <Show when={props.slotTesting}>
          <div>{props.slotTesting}</div>
        </Show>
        <div>
          <hr />
        </div>
        <div>{props.children}</div>
      </div>
    </>
  );
}

export default ContentSlotJsxCode;
"
`;

exports[`Solid > jsx > Javascript Test > CustomCode 1`] = `
"import { onMount, createSignal } from \\"solid-js\\";

function CustomCode(props) {
  const [scriptsInserted, setScriptsInserted] = createSignal([]);

  const [scriptsRun, setScriptsRun] = createSignal([]);

  function findAndRunScripts() {
    // TODO: Move this function to standalone one in '@builder.io/utils'
    if (elem && typeof window !== \\"undefined\\") {
      /** @type {HTMLScriptElement[]} */
      const scripts = elem.getElementsByTagName(\\"script\\");

      for (let i = 0; i < scripts.length; i++) {
        const script = scripts[i];

        if (script.src) {
          if (scriptsInserted().includes(script.src)) {
            continue;
          }

          scriptsInserted().push(script.src);
          const newScript = document.createElement(\\"script\\");
          newScript.async = true;
          newScript.src = script.src;
          document.head.appendChild(newScript);
        } else if (
          !script.type ||
          [
            \\"text/javascript\\",
            \\"application/javascript\\",
            \\"application/ecmascript\\",
          ].includes(script.type)
        ) {
          if (scriptsRun().includes(script.innerText)) {
            continue;
          }

          try {
            scriptsRun().push(script.innerText);
            new Function(script.innerText)();
          } catch (error) {
            console.warn(\\"\`CustomCode\`: Error running script:\\", error);
          }
        }
      }
    }
  }

  let elem;

  onMount(() => {
    findAndRunScripts();
  });

  return (
    <div
      class={
        \\"builder-custom-code\\" + (props.replaceNodes ? \\" replace-nodes\\" : \\"\\")
      }
      ref={elem}
      innerHTML={props.code}
    ></div>
  );
}

export default CustomCode;
"
`;

exports[`Solid > jsx > Javascript Test > CustomCode 2`] = `
"import { onMount, createSignal } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";

function CustomCode(props) {
  const [scriptsInserted, setScriptsInserted] = createSignal([]);

  const [scriptsRun, setScriptsRun] = createSignal([]);

  function findAndRunScripts() {
    // TODO: Move this function to standalone one in '@builder.io/utils'
    if (elem && typeof window !== \\"undefined\\") {
      /** @type {HTMLScriptElement[]} */
      const scripts = elem.getElementsByTagName(\\"script\\");

      for (let i = 0; i < scripts.length; i++) {
        const script = scripts[i];

        if (script.src) {
          if (scriptsInserted().includes(script.src)) {
            continue;
          }

          scriptsInserted().push(script.src);
          const newScript = document.createElement(\\"script\\");
          newScript.async = true;
          newScript.src = script.src;
          document.head.appendChild(newScript);
        } else if (
          !script.type ||
          [
            \\"text/javascript\\",
            \\"application/javascript\\",
            \\"application/ecmascript\\",
          ].includes(script.type)
        ) {
          if (scriptsRun().includes(script.innerText)) {
            continue;
          }

          try {
            scriptsRun().push(script.innerText);
            new Function(script.innerText)();
          } catch (error) {
            console.warn(\\"\`CustomCode\`: Error running script:\\", error);
          }
        }
      }
    }
  }

  let elem;

  onMount(() => {
    findAndRunScripts();
  });

  return (
    <>
      <div
        class={
          \\"builder-custom-code\\" + (props.replaceNodes ? \\" replace-nodes\\" : \\"\\")
        }
        ref={elem}
        innerHTML={props.code}
      ></div>
    </>
  );
}

export default CustomCode;
"
`;

exports[`Solid > jsx > Javascript Test > Embed 1`] = `
"import { onMount, createSignal } from \\"solid-js\\";

function CustomCode(props) {
  const [scriptsInserted, setScriptsInserted] = createSignal([]);

  const [scriptsRun, setScriptsRun] = createSignal([]);

  function findAndRunScripts() {
    // TODO: Move this function to standalone one in '@builder.io/utils'
    if (elem && typeof window !== \\"undefined\\") {
      /** @type {HTMLScriptElement[]} */
      const scripts = elem.getElementsByTagName(\\"script\\");

      for (let i = 0; i < scripts.length; i++) {
        const script = scripts[i];

        if (script.src) {
          if (scriptsInserted().includes(script.src)) {
            continue;
          }

          scriptsInserted().push(script.src);
          const newScript = document.createElement(\\"script\\");
          newScript.async = true;
          newScript.src = script.src;
          document.head.appendChild(newScript);
        } else if (
          !script.type ||
          [
            \\"text/javascript\\",
            \\"application/javascript\\",
            \\"application/ecmascript\\",
          ].includes(script.type)
        ) {
          if (scriptsRun().includes(script.innerText)) {
            continue;
          }

          try {
            scriptsRun().push(script.innerText);
            new Function(script.innerText)();
          } catch (error) {
            console.warn(\\"\`CustomCode\`: Error running script:\\", error);
          }
        }
      }
    }
  }

  let elem;

  onMount(() => {
    findAndRunScripts();
  });

  return (
    <div
      class={
        \\"builder-custom-code\\" + (props.replaceNodes ? \\" replace-nodes\\" : \\"\\")
      }
      ref={elem}
      innerHTML={props.code}
    ></div>
  );
}

export default CustomCode;
"
`;

exports[`Solid > jsx > Javascript Test > Embed 2`] = `
"import { onMount, createSignal } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";

function CustomCode(props) {
  const [scriptsInserted, setScriptsInserted] = createSignal([]);

  const [scriptsRun, setScriptsRun] = createSignal([]);

  function findAndRunScripts() {
    // TODO: Move this function to standalone one in '@builder.io/utils'
    if (elem && typeof window !== \\"undefined\\") {
      /** @type {HTMLScriptElement[]} */
      const scripts = elem.getElementsByTagName(\\"script\\");

      for (let i = 0; i < scripts.length; i++) {
        const script = scripts[i];

        if (script.src) {
          if (scriptsInserted().includes(script.src)) {
            continue;
          }

          scriptsInserted().push(script.src);
          const newScript = document.createElement(\\"script\\");
          newScript.async = true;
          newScript.src = script.src;
          document.head.appendChild(newScript);
        } else if (
          !script.type ||
          [
            \\"text/javascript\\",
            \\"application/javascript\\",
            \\"application/ecmascript\\",
          ].includes(script.type)
        ) {
          if (scriptsRun().includes(script.innerText)) {
            continue;
          }

          try {
            scriptsRun().push(script.innerText);
            new Function(script.innerText)();
          } catch (error) {
            console.warn(\\"\`CustomCode\`: Error running script:\\", error);
          }
        }
      }
    }
  }

  let elem;

  onMount(() => {
    findAndRunScripts();
  });

  return (
    <>
      <div
        class={
          \\"builder-custom-code\\" + (props.replaceNodes ? \\" replace-nodes\\" : \\"\\")
        }
        ref={elem}
        innerHTML={props.code}
      ></div>
    </>
  );
}

export default CustomCode;
"
`;

exports[`Solid > jsx > Javascript Test > Form 1`] = `
"import { Show, For, createSignal } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";

import { BuilderBlock as BuilderBlockComponent } from \\"@fake\\";
import { Builder, builder } from \\"@builder.io/sdk\\";
import { BuilderBlocks } from \\"@fake\\";
import { set } from \\"@fake\\";
import { get } from \\"@fake\\";

function FormComponent(props) {
  const [formState, setFormState] = createSignal(\\"unsubmitted\\");

  const [responseData, setResponseData] = createSignal(null);

  const [formErrorMessage, setFormErrorMessage] = createSignal(\\"\\");

  function submissionState() {
    return (Builder.isEditing && props.previewState) || formState();
  }

  function onSubmit(event) {
    const sendWithJs = props.sendWithJs || props.sendSubmissionsTo === \\"email\\";

    if (props.sendSubmissionsTo === \\"zapier\\") {
      event.preventDefault();
    } else if (sendWithJs) {
      if (!(props.action || props.sendSubmissionsTo === \\"email\\")) {
        event.preventDefault();
        return;
      }

      event.preventDefault();
      const el = event.currentTarget;
      const headers = props.customHeaders || {};
      let body;
      const formData = new FormData(el); // TODO: maybe support null

      const formPairs = Array.from(
        event.currentTarget.querySelectorAll(\\"input,select,textarea\\")
      )
        .filter((el) => !!el.name)
        .map((el) => {
          let value;
          const key = el.name;

          if (el instanceof HTMLInputElement) {
            if (el.type === \\"radio\\") {
              if (el.checked) {
                value = el.name;
                return {
                  key,
                  value,
                };
              }
            } else if (el.type === \\"checkbox\\") {
              value = el.checked;
            } else if (el.type === \\"number\\" || el.type === \\"range\\") {
              const num = el.valueAsNumber;

              if (!isNaN(num)) {
                value = num;
              }
            } else if (el.type === \\"file\\") {
              // TODO: one vs multiple files
              value = el.files;
            } else {
              value = el.value;
            }
          } else {
            value = el.value;
          }

          return {
            key,
            value,
          };
        });
      let contentType = props.contentType;

      if (props.sendSubmissionsTo === \\"email\\") {
        contentType = \\"multipart/form-data\\";
      }

      Array.from(formPairs).forEach(({ value }) => {
        if (
          value instanceof File ||
          (Array.isArray(value) && value[0] instanceof File) ||
          value instanceof FileList
        ) {
          contentType = \\"multipart/form-data\\";
        }
      }); // TODO: send as urlEncoded or multipart by default
      // because of ease of use and reliability in browser API
      // for encoding the form?

      if (contentType !== \\"application/json\\") {
        body = formData;
      } else {
        // Json
        const json = {};
        Array.from(formPairs).forEach(({ value, key }) => {
          set(json, key, value);
        });
        body = JSON.stringify(json);
      }

      if (contentType && contentType !== \\"multipart/form-data\\") {
        if (
          /* Zapier doesn't allow content-type header to be sent from browsers */
          !(sendWithJs && props.action?.includes(\\"zapier.com\\"))
        ) {
          headers[\\"content-type\\"] = contentType;
        }
      }

      const presubmitEvent = new CustomEvent(\\"presubmit\\", {
        detail: {
          body,
        },
      });

      if (formRef) {
        formRef.dispatchEvent(presubmitEvent);

        if (presubmitEvent.defaultPrevented) {
          return;
        }
      }

      setFormState(\\"sending\\");
      const formUrl = \`\${
        builder.env === \\"dev\\" ? \\"http://localhost:5000\\" : \\"https://builder.io\\"
      }/api/v1/form-submit?apiKey=\${builder.apiKey}&to=\${btoa(
        props.sendSubmissionsToEmail || \\"\\"
      )}&name=\${encodeURIComponent(props.name || \\"\\")}\`;
      fetch(
        props.sendSubmissionsTo === \\"email\\" ? formUrl : props.action,
        /* TODO: throw error if no action URL */
        {
          body,
          headers,
          method: props.method || \\"post\\",
        }
      ).then(
        async (res) => {
          let body;
          const contentType = res.headers.get(\\"content-type\\");

          if (contentType && contentType.indexOf(\\"application/json\\") !== -1) {
            body = await res.json();
          } else {
            body = await res.text();
          }

          if (!res.ok && props.errorMessagePath) {
            /* TODO: allow supplying an error formatter function */
            let message = get(body, props.errorMessagePath);

            if (message) {
              if (typeof message !== \\"string\\") {
                /* TODO: ideally convert json to yaml so it woul dbe like
           error: - email has been taken */
                message = JSON.stringify(message);
              }

              setFormErrorMessage(message);
            }
          }

          setResponseData(body);
          setFormState(res.ok ? \\"success\\" : \\"error\\");

          if (res.ok) {
            const submitSuccessEvent = new CustomEvent(\\"submit:success\\", {
              detail: {
                res,
                body,
              },
            });

            if (formRef) {
              formRef.dispatchEvent(submitSuccessEvent);

              if (submitSuccessEvent.defaultPrevented) {
                return;
              }
              /* TODO: option to turn this on/off? */

              if (props.resetFormOnSubmit !== false) {
                formRef.reset();
              }
            }
            /* TODO: client side route event first that can be preventDefaulted */

            if (props.successUrl) {
              if (formRef) {
                const event = new CustomEvent(\\"route\\", {
                  detail: {
                    url: props.successUrl,
                  },
                });
                formRef.dispatchEvent(event);

                if (!event.defaultPrevented) {
                  location.href = props.successUrl;
                }
              } else {
                location.href = props.successUrl;
              }
            }
          }
        },
        (err) => {
          const submitErrorEvent = new CustomEvent(\\"submit:error\\", {
            detail: {
              error: err,
            },
          });

          if (formRef) {
            formRef.dispatchEvent(submitErrorEvent);

            if (submitErrorEvent.defaultPrevented) {
              return;
            }
          }

          setResponseData(err);
          setFormState(\\"error\\");
        }
      );
    }
  }

  let formRef;

  return (
    <form
      validate={props.validate}
      ref={formRef}
      action={!props.sendWithJs && props.action}
      method={props.method}
      name={props.name}
      onSubmit={(event) => onSubmit(event)}
      {...props.attributes}
    >
      <Show when={props.builderBlock && props.builderBlock.children}>
        <For each={props.builderBlock?.children}>
          {(block, _index) => {
            const index = _index();
            return (
              <BuilderBlockComponent
                key={block.id}
                block={block}
                index={index}
              ></BuilderBlockComponent>
            );
          }}
        </For>
      </Show>
      <Show when={submissionState() === \\"error\\"}>
        <BuilderBlocks
          dataPath=\\"errorMessage\\"
          blocks={props.errorMessage}
        ></BuilderBlocks>
      </Show>
      <Show when={submissionState() === \\"sending\\"}>
        <BuilderBlocks
          dataPath=\\"sendingMessage\\"
          blocks={props.sendingMessage}
        ></BuilderBlocks>
      </Show>
      <Show when={submissionState() === \\"error\\" && responseData()}>
        <pre
          class={
            \\"builder-form-error-text \\" +
            css({
              padding: \\"10px\\",
              color: \\"red\\",
              textAlign: \\"center\\",
            })
          }
        >
          {JSON.stringify(responseData(), null, 2)}
        </pre>
      </Show>
      <Show when={submissionState() === \\"success\\"}>
        <BuilderBlocks
          dataPath=\\"successMessage\\"
          blocks={props.successMessage}
        ></BuilderBlocks>
      </Show>
    </form>
  );
}

export default FormComponent;
"
`;

exports[`Solid > jsx > Javascript Test > Form 2`] = `
"import { Show, For, createSignal } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";

import { BuilderBlock as BuilderBlockComponent } from \\"@fake\\";
import { Builder, builder } from \\"@builder.io/sdk\\";
import { BuilderBlocks } from \\"@fake\\";
import { set } from \\"@fake\\";
import { get } from \\"@fake\\";

function FormComponent(props) {
  const [formState, setFormState] = createSignal(\\"unsubmitted\\");

  const [responseData, setResponseData] = createSignal(null);

  const [formErrorMessage, setFormErrorMessage] = createSignal(\\"\\");

  function submissionState() {
    return (Builder.isEditing && props.previewState) || formState();
  }

  function onSubmit(event) {
    const sendWithJs = props.sendWithJs || props.sendSubmissionsTo === \\"email\\";

    if (props.sendSubmissionsTo === \\"zapier\\") {
      event.preventDefault();
    } else if (sendWithJs) {
      if (!(props.action || props.sendSubmissionsTo === \\"email\\")) {
        event.preventDefault();
        return;
      }

      event.preventDefault();
      const el = event.currentTarget;
      const headers = props.customHeaders || {};
      let body;
      const formData = new FormData(el); // TODO: maybe support null

      const formPairs = Array.from(
        event.currentTarget.querySelectorAll(\\"input,select,textarea\\")
      )
        .filter((el) => !!el.name)
        .map((el) => {
          let value;
          const key = el.name;

          if (el instanceof HTMLInputElement) {
            if (el.type === \\"radio\\") {
              if (el.checked) {
                value = el.name;
                return {
                  key,
                  value,
                };
              }
            } else if (el.type === \\"checkbox\\") {
              value = el.checked;
            } else if (el.type === \\"number\\" || el.type === \\"range\\") {
              const num = el.valueAsNumber;

              if (!isNaN(num)) {
                value = num;
              }
            } else if (el.type === \\"file\\") {
              // TODO: one vs multiple files
              value = el.files;
            } else {
              value = el.value;
            }
          } else {
            value = el.value;
          }

          return {
            key,
            value,
          };
        });
      let contentType = props.contentType;

      if (props.sendSubmissionsTo === \\"email\\") {
        contentType = \\"multipart/form-data\\";
      }

      Array.from(formPairs).forEach(({ value }) => {
        if (
          value instanceof File ||
          (Array.isArray(value) && value[0] instanceof File) ||
          value instanceof FileList
        ) {
          contentType = \\"multipart/form-data\\";
        }
      }); // TODO: send as urlEncoded or multipart by default
      // because of ease of use and reliability in browser API
      // for encoding the form?

      if (contentType !== \\"application/json\\") {
        body = formData;
      } else {
        // Json
        const json = {};
        Array.from(formPairs).forEach(({ value, key }) => {
          set(json, key, value);
        });
        body = JSON.stringify(json);
      }

      if (contentType && contentType !== \\"multipart/form-data\\") {
        if (
          /* Zapier doesn't allow content-type header to be sent from browsers */
          !(sendWithJs && props.action?.includes(\\"zapier.com\\"))
        ) {
          headers[\\"content-type\\"] = contentType;
        }
      }

      const presubmitEvent = new CustomEvent(\\"presubmit\\", {
        detail: {
          body,
        },
      });

      if (formRef) {
        formRef.dispatchEvent(presubmitEvent);

        if (presubmitEvent.defaultPrevented) {
          return;
        }
      }

      setFormState(\\"sending\\");
      const formUrl = \`\${
        builder.env === \\"dev\\" ? \\"http://localhost:5000\\" : \\"https://builder.io\\"
      }/api/v1/form-submit?apiKey=\${builder.apiKey}&to=\${btoa(
        props.sendSubmissionsToEmail || \\"\\"
      )}&name=\${encodeURIComponent(props.name || \\"\\")}\`;
      fetch(
        props.sendSubmissionsTo === \\"email\\" ? formUrl : props.action,
        /* TODO: throw error if no action URL */
        {
          body,
          headers,
          method: props.method || \\"post\\",
        }
      ).then(
        async (res) => {
          let body;
          const contentType = res.headers.get(\\"content-type\\");

          if (contentType && contentType.indexOf(\\"application/json\\") !== -1) {
            body = await res.json();
          } else {
            body = await res.text();
          }

          if (!res.ok && props.errorMessagePath) {
            /* TODO: allow supplying an error formatter function */
            let message = get(body, props.errorMessagePath);

            if (message) {
              if (typeof message !== \\"string\\") {
                /* TODO: ideally convert json to yaml so it woul dbe like
           error: - email has been taken */
                message = JSON.stringify(message);
              }

              setFormErrorMessage(message);
            }
          }

          setResponseData(body);
          setFormState(res.ok ? \\"success\\" : \\"error\\");

          if (res.ok) {
            const submitSuccessEvent = new CustomEvent(\\"submit:success\\", {
              detail: {
                res,
                body,
              },
            });

            if (formRef) {
              formRef.dispatchEvent(submitSuccessEvent);

              if (submitSuccessEvent.defaultPrevented) {
                return;
              }
              /* TODO: option to turn this on/off? */

              if (props.resetFormOnSubmit !== false) {
                formRef.reset();
              }
            }
            /* TODO: client side route event first that can be preventDefaulted */

            if (props.successUrl) {
              if (formRef) {
                const event = new CustomEvent(\\"route\\", {
                  detail: {
                    url: props.successUrl,
                  },
                });
                formRef.dispatchEvent(event);

                if (!event.defaultPrevented) {
                  location.href = props.successUrl;
                }
              } else {
                location.href = props.successUrl;
              }
            }
          }
        },
        (err) => {
          const submitErrorEvent = new CustomEvent(\\"submit:error\\", {
            detail: {
              error: err,
            },
          });

          if (formRef) {
            formRef.dispatchEvent(submitErrorEvent);

            if (submitErrorEvent.defaultPrevented) {
              return;
            }
          }

          setResponseData(err);
          setFormState(\\"error\\");
        }
      );
    }
  }

  let formRef;

  return (
    <>
      <form
        validate={props.validate}
        ref={formRef}
        action={!props.sendWithJs && props.action}
        method={props.method}
        name={props.name}
        onSubmit={(event) => onSubmit(event)}
        {...props.attributes}
      >
        <Show when={props.builderBlock && props.builderBlock.children}>
          <For each={props.builderBlock?.children}>
            {(block, _index) => {
              const index = _index();
              return (
                <BuilderBlockComponent
                  key={block.id}
                  block={block}
                  index={index}
                ></BuilderBlockComponent>
              );
            }}
          </For>
        </Show>
        <Show when={submissionState() === \\"error\\"}>
          <BuilderBlocks
            dataPath=\\"errorMessage\\"
            blocks={props.errorMessage}
          ></BuilderBlocks>
        </Show>
        <Show when={submissionState() === \\"sending\\"}>
          <BuilderBlocks
            dataPath=\\"sendingMessage\\"
            blocks={props.sendingMessage}
          ></BuilderBlocks>
        </Show>
        <Show when={submissionState() === \\"error\\" && responseData()}>
          <pre class=\\"builder-form-error-text pre-9555e2e0\\">
            {JSON.stringify(responseData(), null, 2)}
          </pre>
        </Show>
        <Show when={submissionState() === \\"success\\"}>
          <BuilderBlocks
            dataPath=\\"successMessage\\"
            blocks={props.successMessage}
          ></BuilderBlocks>
        </Show>
      </form>
      <style jsx>{\`
        .pre-9555e2e0 {
          padding: 10px;
          color: red;
          text-align: center;
        }
      \`}</style>
    </>
  );
}

export default FormComponent;
"
`;

exports[`Solid > jsx > Javascript Test > Image 1`] = `
"import { Show, onMount, createSignal } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";

function Image(props) {
  const [scrollListener, setScrollListener] = createSignal(null);

  const [imageLoaded, setImageLoaded] = createSignal(false);

  const [load, setLoad] = createSignal(false);

  function setLoaded() {
    setImageLoaded(true);
  }

  function useLazyLoading() {
    // TODO: Add more checks here, like testing for real web browsers
    return !!props.lazy && isBrowser();
  }

  function isBrowser() {
    return (
      typeof window !== \\"undefined\\" && window.navigator.product != \\"ReactNative\\"
    );
  }

  let pictureRef;

  onMount(() => {
    if (useLazyLoading()) {
      // throttled scroll capture listener
      const listener = () => {
        if (pictureRef) {
          const rect = pictureRef.getBoundingClientRect();
          const buffer = window.innerHeight / 2;

          if (rect.top < window.innerHeight + buffer) {
            setLoad(true);
            setScrollListener(null);
            window.removeEventListener(\\"scroll\\", listener);
          }
        }
      };

      setScrollListener(listener);
      window.addEventListener(\\"scroll\\", listener, {
        capture: true,
        passive: true,
      });
      listener();
    }
  });

  return (
    <div>
      <picture ref={pictureRef}>
        <Show when={!useLazyLoading() || load()}>
          <img
            class={
              \\"builder-image\\" +
              (props._class ? \\" \\" + props._class : \\"\\") +
              \\" \\" +
              css({
                opacity: \\"1\\",
                transition: \\"opacity 0.2s ease-in-out\\",
                objectFit: \\"cover\\",
                objectPosition: \\"center\\",
              })
            }
            alt={props.altText}
            aria-role={props.altText ? \\"presentation\\" : undefined}
            src={props.image}
            onLoad={(event) => setLoaded()}
            srcset={props.srcset}
            sizes={props.sizes}
          />
        </Show>
        <source srcset={props.srcset} />
      </picture>
      {props.children}
    </div>
  );
}

export default Image;
"
`;

exports[`Solid > jsx > Javascript Test > Image 2`] = `
"import { Show, onMount, createSignal } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";

function Image(props) {
  const [scrollListener, setScrollListener] = createSignal(null);

  const [imageLoaded, setImageLoaded] = createSignal(false);

  const [load, setLoad] = createSignal(false);

  function setLoaded() {
    setImageLoaded(true);
  }

  function useLazyLoading() {
    // TODO: Add more checks here, like testing for real web browsers
    return !!props.lazy && isBrowser();
  }

  function isBrowser() {
    return (
      typeof window !== \\"undefined\\" && window.navigator.product != \\"ReactNative\\"
    );
  }

  let pictureRef;

  onMount(() => {
    if (useLazyLoading()) {
      // throttled scroll capture listener
      const listener = () => {
        if (pictureRef) {
          const rect = pictureRef.getBoundingClientRect();
          const buffer = window.innerHeight / 2;

          if (rect.top < window.innerHeight + buffer) {
            setLoad(true);
            setScrollListener(null);
            window.removeEventListener(\\"scroll\\", listener);
          }
        }
      };

      setScrollListener(listener);
      window.addEventListener(\\"scroll\\", listener, {
        capture: true,
        passive: true,
      });
      listener();
    }
  });

  return (
    <>
      <div>
        <picture ref={pictureRef}>
          <Show when={!useLazyLoading() || load()}>
            <img
              class={
                \\"builder-image\\" +
                (props._class ? \\" \\" + props._class : \\"\\") +
                \\" img-066280ea\\"
              }
              alt={props.altText}
              aria-role={props.altText ? \\"presentation\\" : undefined}
              src={props.image}
              onLoad={(event) => setLoaded()}
              srcset={props.srcset}
              sizes={props.sizes}
            />
          </Show>
          <source srcset={props.srcset} />
        </picture>
        {props.children}
      </div>
      <style jsx>{\`
        .img-066280ea {
          opacity: 1;
          transition: opacity 0.2s ease-in-out;
          object-fit: cover;
          object-position: center;
        }
      \`}</style>
    </>
  );
}

export default Image;
"
`;

exports[`Solid > jsx > Javascript Test > Image State 1`] = `
"import { For, createSignal } from \\"solid-js\\";

function ImgStateComponent(props) {
  const [canShow, setCanShow] = createSignal(true);

  const [images, setImages] = createSignal([\\"http://example.com/qwik.png\\"]);

  return (
    <div>
      <For each={images()}>
        {(item, _index) => {
          const itemIndex = _index();
          return (
            <>
              <img class=\\"custom-class\\" src={item} key={itemIndex} />
            </>
          );
        }}
      </For>
    </div>
  );
}

export default ImgStateComponent;
"
`;

exports[`Solid > jsx > Javascript Test > Image State 2`] = `
"import { For, createSignal } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";

function ImgStateComponent(props) {
  const [canShow, setCanShow] = createSignal(true);

  const [images, setImages] = createSignal([\\"http://example.com/qwik.png\\"]);

  return (
    <>
      <div>
        <For each={images()}>
          {(item, _index) => {
            const itemIndex = _index();
            return (
              <>
                <img class=\\"custom-class\\" src={item} key={itemIndex} />
              </>
            );
          }}
        </For>
      </div>
    </>
  );
}

export default ImgStateComponent;
"
`;

exports[`Solid > jsx > Javascript Test > Img 1`] = `
"import { Builder } from \\"@builder.io/sdk\\";

function ImgComponent(props) {
  return (
    <img
      style={{
        \\"object-fit\\": props.backgroundSize || \\"cover\\",
        \\"object-position\\": props.backgroundPosition || \\"center\\",
      }}
      {...props.attributes}
      key={(Builder.isEditing && props.imgSrc) || \\"default-key\\"}
      alt={props.altText}
      src={props.imgSrc}
    />
  );
}

export default ImgComponent;
"
`;

exports[`Solid > jsx > Javascript Test > Img 2`] = `
"import { css } from \\"solid-styled-components\\";

import { Builder } from \\"@builder.io/sdk\\";

function ImgComponent(props) {
  return (
    <>
      <img
        style={{
          \\"object-fit\\": props.backgroundSize || \\"cover\\",
          \\"object-position\\": props.backgroundPosition || \\"center\\",
        }}
        {...props.attributes}
        key={(Builder.isEditing && props.imgSrc) || \\"default-key\\"}
        alt={props.altText}
        src={props.imgSrc}
      />
    </>
  );
}

export default ImgComponent;
"
`;

exports[`Solid > jsx > Javascript Test > Input 1`] = `
"import { Builder } from \\"@builder.io/sdk\\";

function FormInputComponent(props) {
  return (
    <input
      {...props.attributes}
      key={
        Builder.isEditing && props.defaultValue
          ? props.defaultValue
          : \\"default-key\\"
      }
      placeholder={props.placeholder}
      type={props.type}
      name={props.name}
      value={props.value}
      defaultValue={props.defaultValue}
      required={props.required}
    />
  );
}

export default FormInputComponent;
"
`;

exports[`Solid > jsx > Javascript Test > Input 2`] = `
"import { css } from \\"solid-styled-components\\";

import { Builder } from \\"@builder.io/sdk\\";

function FormInputComponent(props) {
  return (
    <>
      <input
        {...props.attributes}
        key={
          Builder.isEditing && props.defaultValue
            ? props.defaultValue
            : \\"default-key\\"
        }
        placeholder={props.placeholder}
        type={props.type}
        name={props.name}
        value={props.value}
        defaultValue={props.defaultValue}
        required={props.required}
      />
    </>
  );
}

export default FormInputComponent;
"
`;

exports[`Solid > jsx > Javascript Test > RawText 1`] = `
"function RawText(props) {
  return (
    <span
      class={props.attributes?.class || props.attributes?.className}
      innerHTML={props.text || \\"\\"}
    ></span>
  );
}

export default RawText;
"
`;

exports[`Solid > jsx > Javascript Test > RawText 2`] = `
"import { css } from \\"solid-styled-components\\";

function RawText(props) {
  return (
    <>
      <span
        class={props.attributes?.class || props.attributes?.className}
        innerHTML={props.text || \\"\\"}
      ></span>
    </>
  );
}

export default RawText;
"
`;

exports[`Solid > jsx > Javascript Test > Section 1`] = `
"function SectionComponent(props) {
  return (
    <section
      {...props.attributes}
      style={
        props.maxWidth && typeof props.maxWidth === \\"number\\"
          ? {
              \\"max-width\\": props.maxWidth,
            }
          : undefined
      }
    >
      {props.children}
    </section>
  );
}

export default SectionComponent;
"
`;

exports[`Solid > jsx > Javascript Test > Section 2`] = `
"import { Show, For, createSignal } from \\"solid-js\\";

function SectionStateComponent(props) {
  const [max, setMax] = createSignal(42);

  const [items, setItems] = createSignal([42]);

  return (
    <Show when={max()}>
      <For each={items()}>
        {(item, _index) => {
          const index = _index();
          return (
            <section
              {...props.attributes}
              style={{
                \\"max-width\\": item + max(),
              }}
            >
              {props.children}
            </section>
          );
        }}
      </For>
    </Show>
  );
}

export default SectionStateComponent;
"
`;

exports[`Solid > jsx > Javascript Test > Section 3`] = `
"import { css } from \\"solid-styled-components\\";

function SectionComponent(props) {
  return (
    <>
      <section
        {...props.attributes}
        style={
          props.maxWidth && typeof props.maxWidth === \\"number\\"
            ? {
                \\"max-width\\": props.maxWidth,
              }
            : undefined
        }
      >
        {props.children}
      </section>
    </>
  );
}

export default SectionComponent;
"
`;

exports[`Solid > jsx > Javascript Test > Section 4`] = `
"import { Show, For, createSignal } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";

function SectionStateComponent(props) {
  const [max, setMax] = createSignal(42);

  const [items, setItems] = createSignal([42]);

  return (
    <>
      <Show when={max()}>
        <For each={items()}>
          {(item, _index) => {
            const index = _index();
            return (
              <section
                {...props.attributes}
                style={{
                  \\"max-width\\": item + max(),
                }}
              >
                {props.children}
              </section>
            );
          }}
        </For>
      </Show>
    </>
  );
}

export default SectionStateComponent;
"
`;

exports[`Solid > jsx > Javascript Test > Select 1`] = `
"import { For } from \\"solid-js\\";

import { Builder } from \\"@builder.io/sdk\\";

function SelectComponent(props) {
  return (
    <select
      {...props.attributes}
      value={props.value}
      key={
        Builder.isEditing && props.defaultValue
          ? props.defaultValue
          : \\"default-key\\"
      }
      defaultValue={props.defaultValue}
      name={props.name}
    >
      <For each={props.options}>
        {(option, _index) => {
          const index = _index();
          return (
            <option value={option.value} data-index={index}>
              {option.name || option.value}
            </option>
          );
        }}
      </For>
    </select>
  );
}

export default SelectComponent;
"
`;

exports[`Solid > jsx > Javascript Test > Select 2`] = `
"import { For } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";

import { Builder } from \\"@builder.io/sdk\\";

function SelectComponent(props) {
  return (
    <>
      <select
        {...props.attributes}
        value={props.value}
        key={
          Builder.isEditing && props.defaultValue
            ? props.defaultValue
            : \\"default-key\\"
        }
        defaultValue={props.defaultValue}
        name={props.name}
      >
        <For each={props.options}>
          {(option, _index) => {
            const index = _index();
            return (
              <option value={option.value} data-index={index}>
                {option.name || option.value}
              </option>
            );
          }}
        </For>
      </select>
    </>
  );
}

export default SelectComponent;
"
`;

exports[`Solid > jsx > Javascript Test > SlotHtml 1`] = `
"import ContentSlotCode from \\"./content-slot-jsx.raw\\";

function SlotCode(props) {
  return (
    <div>
      <ContentSlotCode>
        <Slot testing={<div>Hello</div>}></Slot>
      </ContentSlotCode>
    </div>
  );
}

export default SlotCode;
"
`;

exports[`Solid > jsx > Javascript Test > SlotHtml 2`] = `
"import { css } from \\"solid-styled-components\\";

import ContentSlotCode from \\"./content-slot-jsx.raw\\";

function SlotCode(props) {
  return (
    <>
      <div>
        <ContentSlotCode>
          <Slot testing={<div>Hello</div>}></Slot>
        </ContentSlotCode>
      </div>
    </>
  );
}

export default SlotCode;
"
`;

exports[`Solid > jsx > Javascript Test > SlotJsx 1`] = `
"import ContentSlotCode from \\"./content-slot-jsx.raw\\";

function SlotCode(props) {
  return (
    <div>
      <ContentSlotCode slotTesting={<div>Hello</div>}></ContentSlotCode>
    </div>
  );
}

export default SlotCode;
"
`;

exports[`Solid > jsx > Javascript Test > SlotJsx 2`] = `
"import { css } from \\"solid-styled-components\\";

import ContentSlotCode from \\"./content-slot-jsx.raw\\";

function SlotCode(props) {
  return (
    <>
      <div>
        <ContentSlotCode slotTesting={<div>Hello</div>}></ContentSlotCode>
      </div>
    </>
  );
}

export default SlotCode;
"
`;

exports[`Solid > jsx > Javascript Test > Stamped.io 1`] = `
"import { Show, For, onMount, createSignal } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";

import { kebabCase } from \\"lodash\\";
import { snakeCase } from \\"lodash\\";

function SmileReviews(props) {
  const [reviews, setReviews] = createSignal([]);

  const [name, setName] = createSignal(\\"test\\");

  const [showReviewPrompt, setShowReviewPrompt] = createSignal(false);

  function kebabCaseValue() {
    return kebabCase(\\"testThat\\");
  }

  function snakeCaseValue() {
    return snakeCase(\\"testThis\\");
  }

  onMount(() => {
    fetch(
      \`https://stamped.io/api/widget/reviews?storeUrl=builder-io.myshopify.com&apiKey=\${
        props.apiKey || \\"pubkey-8bbDq7W6w4sB3OWeM1HUy2s47702hM\\"
      }&productId=\${props.productId || \\"2410511106127\\"}\`
    )
      .then((res) => res.json())
      .then((data) => {
        setReviews(data.data);
      });
  });

  return (
    <div data-user={name()}>
      <button onClick={(event) => setShowReviewPrompt(true)}>
        Write a review
      </button>
      <Show when={showReviewPrompt() || \\"asdf\\"}>
        <input placeholder=\\"Email\\" />
        <input
          class={css({
            display: \\"block\\",
          })}
          placeholder=\\"Title\\"
        />
        <textarea
          class={css({
            display: \\"block\\",
          })}
          placeholder=\\"How was your experience?\\"
        ></textarea>
        <button
          class={css({
            display: \\"block\\",
          })}
          onClick={(event) => {
            event.preventDefault();
            setShowReviewPrompt(false);
          }}
        >
          Submit
        </button>
      </Show>
      <For each={reviews()}>
        {(review, _index) => {
          const index = _index();
          return (
            <div
              class={css({
                margin: \\"10px\\",
                padding: \\"10px\\",
                background: \\"white\\",
                display: \\"flex\\",
                borderRadius: \\"5px\\",
                boxShadow: \\"0 2px 5px rgba(0, 0, 0, 0.1)\\",
              })}
              key={review.id}
            >
              <img
                class={css({
                  height: \\"30px\\",
                  width: \\"30px\\",
                  marginRight: \\"10px\\",
                })}
                src={review.avatar}
              />
              <div class={showReviewPrompt() ? \\"bg-primary\\" : \\"bg-secondary\\"}>
                <div>
                  N:
                  {index}
                </div>
                <div>{review.author}</div>
                <div>{review.reviewMessage}</div>
              </div>
            </div>
          );
        }}
      </For>
    </div>
  );
}

export default SmileReviews;
"
`;

exports[`Solid > jsx > Javascript Test > Stamped.io 2`] = `
"import { Show, For, onMount, createSignal } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";

import { kebabCase } from \\"lodash\\";
import { snakeCase } from \\"lodash\\";

function SmileReviews(props) {
  const [reviews, setReviews] = createSignal([]);

  const [name, setName] = createSignal(\\"test\\");

  const [showReviewPrompt, setShowReviewPrompt] = createSignal(false);

  function kebabCaseValue() {
    return kebabCase(\\"testThat\\");
  }

  function snakeCaseValue() {
    return snakeCase(\\"testThis\\");
  }

  onMount(() => {
    fetch(
      \`https://stamped.io/api/widget/reviews?storeUrl=builder-io.myshopify.com&apiKey=\${
        props.apiKey || \\"pubkey-8bbDq7W6w4sB3OWeM1HUy2s47702hM\\"
      }&productId=\${props.productId || \\"2410511106127\\"}\`
    )
      .then((res) => res.json())
      .then((data) => {
        setReviews(data.data);
      });
  });

  return (
    <>
      <div data-user={name()}>
        <button onClick={(event) => setShowReviewPrompt(true)}>
          Write a review
        </button>
        <Show when={showReviewPrompt() || \\"asdf\\"}>
          <input placeholder=\\"Email\\" />
          <input class=\\"input-ce629c50\\" placeholder=\\"Title\\" />
          <textarea
            class=\\"textarea-ce629c50\\"
            placeholder=\\"How was your experience?\\"
          ></textarea>
          <button
            class=\\"button-ce629c50\\"
            onClick={(event) => {
              event.preventDefault();
              setShowReviewPrompt(false);
            }}
          >
            Submit
          </button>
        </Show>
        <For each={reviews()}>
          {(review, _index) => {
            const index = _index();
            return (
              <div class=\\"div-ce629c50\\" key={review.id}>
                <img class=\\"img-ce629c50\\" src={review.avatar} />
                <div class={showReviewPrompt() ? \\"bg-primary\\" : \\"bg-secondary\\"}>
                  <div>
                    N:
                    {index}
                  </div>
                  <div>{review.author}</div>
                  <div>{review.reviewMessage}</div>
                </div>
              </div>
            );
          }}
        </For>
      </div>
      <style jsx>{\`
        .input-ce629c50 {
          display: block;
        }
        .textarea-ce629c50 {
          display: block;
        }
        .button-ce629c50 {
          display: block;
        }
        .div-ce629c50 {
          margin: 10px;
          padding: 10px;
          background: white;
          display: flex;
          border-radius: 5px;
          box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
        }
        .img-ce629c50 {
          height: 30px;
          width: 30px;
          margin-right: 10px;
        }
      \`}</style>
    </>
  );
}

export default SmileReviews;
"
`;

exports[`Solid > jsx > Javascript Test > Submit 1`] = `
"function SubmitButton(props) {
  return (
    <button type=\\"submit\\" {...props.attributes}>
      {props.text}
    </button>
  );
}

export default SubmitButton;
"
`;

exports[`Solid > jsx > Javascript Test > Submit 2`] = `
"import { css } from \\"solid-styled-components\\";

function SubmitButton(props) {
  return (
    <>
      <button type=\\"submit\\" {...props.attributes}>
        {props.text}
      </button>
    </>
  );
}

export default SubmitButton;
"
`;

exports[`Solid > jsx > Javascript Test > Text 1`] = `
"import { createSignal } from \\"solid-js\\";

import { Builder } from \\"@builder.io/sdk\\";

function Text(props) {
  const [name, setName] = createSignal(\\"Decadef20\\");

  return (
    <div
      contentEditable={allowEditingText || undefined}
      data-name={{
        test: name() || \\"any name\\",
      }}
      innerHTML={
        props.text ||
        props.content ||
        name() ||
        '<p class=\\"text-lg\\">my name</p>'
      }
    ></div>
  );
}

export default Text;
"
`;

exports[`Solid > jsx > Javascript Test > Text 2`] = `
"import { createSignal } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";

import { Builder } from \\"@builder.io/sdk\\";

function Text(props) {
  const [name, setName] = createSignal(\\"Decadef20\\");

  return (
    <>
      <div
        contentEditable={allowEditingText || undefined}
        data-name={{
          test: name() || \\"any name\\",
        }}
        innerHTML={
          props.text ||
          props.content ||
          name() ||
          '<p class=\\"text-lg\\">my name</p>'
        }
      ></div>
    </>
  );
}

export default Text;
"
`;

exports[`Solid > jsx > Javascript Test > Textarea 1`] = `
"function Textarea(props) {
  return (
    <textarea
      {...props.attributes}
      placeholder={props.placeholder}
      name={props.name}
      value={props.value}
      defaultValue={props.defaultValue}
    ></textarea>
  );
}

export default Textarea;
"
`;

exports[`Solid > jsx > Javascript Test > Textarea 2`] = `
"import { css } from \\"solid-styled-components\\";

function Textarea(props) {
  return (
    <>
      <textarea
        {...props.attributes}
        placeholder={props.placeholder}
        name={props.name}
        value={props.value}
        defaultValue={props.defaultValue}
      ></textarea>
    </>
  );
}

export default Textarea;
"
`;

exports[`Solid > jsx > Javascript Test > Video 1`] = `
"function Video(props) {
  return (
    <video
      preload=\\"none\\"
      {...props.attributes}
      style={{
        width: \\"100%\\",
        height: \\"100%\\",
        ...props.attributes?.style,
        \\"object-fit\\": props.fit,
        \\"object-position\\": props.position,
        // Hack to get object fit to work as expected and
        // not have the video overflow
        \\"border-radius\\": 1,
      }}
      key={props.video || \\"no-src\\"}
      poster={props.posterImage}
      autoplay={props.autoPlay}
      muted={props.muted}
      controls={props.controls}
      loop={props.loop}
    ></video>
  );
}

export default Video;
"
`;

exports[`Solid > jsx > Javascript Test > Video 2`] = `
"import { css } from \\"solid-styled-components\\";

function Video(props) {
  return (
    <>
      <video
        preload=\\"none\\"
        {...props.attributes}
        style={{
          width: \\"100%\\",
          height: \\"100%\\",
          ...props.attributes?.style,
          \\"object-fit\\": props.fit,
          \\"object-position\\": props.position,
          // Hack to get object fit to work as expected and
          // not have the video overflow
          \\"border-radius\\": 1,
        }}
        key={props.video || \\"no-src\\"}
        poster={props.posterImage}
        autoplay={props.autoPlay}
        muted={props.muted}
        controls={props.controls}
        loop={props.loop}
      ></video>
    </>
  );
}

export default Video;
"
`;

exports[`Solid > jsx > Javascript Test > arrowFunctionInUseStore 1`] = `
"import { createSignal } from \\"solid-js\\";

function MyComponent(props) {
  const [name, setName] = createSignal(\\"steve\\");

  function setName(value) {
    setName(value);
  }

  function updateNameWithArrowFn(value) {
    setName(value);
  }

  return (
    <div>
      Hello
      {name()}
    </div>
  );
}

export default MyComponent;
"
`;

exports[`Solid > jsx > Javascript Test > arrowFunctionInUseStore 2`] = `
"import { createSignal } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";

function MyComponent(props) {
  const [name, setName] = createSignal(\\"steve\\");

  function setName(value) {
    setName(value);
  }

  function updateNameWithArrowFn(value) {
    setName(value);
  }

  return (
    <>
      <div>
        Hello
        {name()}
      </div>
    </>
  );
}

export default MyComponent;
"
`;

exports[`Solid > jsx > Javascript Test > basicOnUpdateReturn 1`] = `
"import { on, createEffect, createSignal } from \\"solid-js\\";

function MyBasicOnUpdateReturnComponent(props) {
  const [name, setName] = createSignal(\\"PatrickJS\\");

  function onUpdateFn_0() {
    const controller = new AbortController();
    const signal = controller.signal;
    fetch(\\"https://patrickjs.com/api/resource.json\\", {
      signal,
    })
      .then((response) => response.json())
      .then((data) => {
        setName(data.name);
      });
    return () => {
      if (!signal.aborted) {
        controller.abort();
      }
    };
  }
  createEffect(on(() => [name()], onUpdateFn_0));

  return (
    <div>
      Hello!
      {name()}
    </div>
  );
}

export default MyBasicOnUpdateReturnComponent;
"
`;

exports[`Solid > jsx > Javascript Test > basicOnUpdateReturn 2`] = `
"import { on, createEffect, createSignal } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";

function MyBasicOnUpdateReturnComponent(props) {
  const [name, setName] = createSignal(\\"PatrickJS\\");

  function onUpdateFn_0() {
    const controller = new AbortController();
    const signal = controller.signal;
    fetch(\\"https://patrickjs.com/api/resource.json\\", {
      signal,
    })
      .then((response) => response.json())
      .then((data) => {
        setName(data.name);
      });
    return () => {
      if (!signal.aborted) {
        controller.abort();
      }
    };
  }
  createEffect(on(() => [name()], onUpdateFn_0));

  return (
    <>
      <div>
        Hello!
        {name()}
      </div>
    </>
  );
}

export default MyBasicOnUpdateReturnComponent;
"
`;

exports[`Solid > jsx > Javascript Test > class + ClassName + css 1`] = `
"import { css } from \\"solid-styled-components\\";

function MyBasicComponent(props) {
  return (
    <div
      class={
        \\"test2 test \\" +
        css({
          padding: \\"10px\\",
        })
      }
    >
      Hello! I can run in React, Vue, Solid, or Liquid!
    </div>
  );
}

export default MyBasicComponent;
"
`;

exports[`Solid > jsx > Javascript Test > class + ClassName + css 2`] = `
"import { css } from \\"solid-styled-components\\";

function MyBasicComponent(props) {
  return (
    <>
      <div class=\\"test2 test div-1ddae416\\">
        Hello! I can run in React, Vue, Solid, or Liquid!
      </div>
      <style jsx>{\`
        .div-1ddae416 {
          padding: 10px;
        }
      \`}</style>
    </>
  );
}

export default MyBasicComponent;
"
`;

exports[`Solid > jsx > Javascript Test > class + css 1`] = `
"import { css } from \\"solid-styled-components\\";

function MyBasicComponent(props) {
  return (
    <div
      class={
        \\"test \\" +
        css({
          padding: \\"10px\\",
        })
      }
    >
      Hello! I can run in React, Vue, Solid, or Liquid!
    </div>
  );
}

export default MyBasicComponent;
"
`;

exports[`Solid > jsx > Javascript Test > class + css 2`] = `
"import { css } from \\"solid-styled-components\\";

function MyBasicComponent(props) {
  return (
    <>
      <div class=\\"test div-50be5eac\\">
        Hello! I can run in React, Vue, Solid, or Liquid!
      </div>
      <style jsx>{\`
        .div-50be5eac {
          padding: 10px;
        }
      \`}</style>
    </>
  );
}

export default MyBasicComponent;
"
`;

exports[`Solid > jsx > Javascript Test > className + css 1`] = `
"import { css } from \\"solid-styled-components\\";

function MyBasicComponent(props) {
  return (
    <div
      class={
        \\"test \\" +
        css({
          padding: \\"10px\\",
        })
      }
    >
      Hello! I can run in React, Vue, Solid, or Liquid!
    </div>
  );
}

export default MyBasicComponent;
"
`;

exports[`Solid > jsx > Javascript Test > className + css 2`] = `
"import { css } from \\"solid-styled-components\\";

function MyBasicComponent(props) {
  return (
    <>
      <div class=\\"test div-50be5eac\\">
        Hello! I can run in React, Vue, Solid, or Liquid!
      </div>
      <style jsx>{\`
        .div-50be5eac {
          padding: 10px;
        }
      \`}</style>
    </>
  );
}

export default MyBasicComponent;
"
`;

exports[`Solid > jsx > Javascript Test > className 1`] = `
"import { createSignal } from \\"solid-js\\";

function ClassNameCode(props) {
  const [bindings, setBindings] = createSignal(\\"a binding\\");

  return (
    <div>
      <div class=\\"no binding\\">Without Binding</div>
      <div class={bindings()}>With binding</div>
    </div>
  );
}

export default ClassNameCode;
"
`;

exports[`Solid > jsx > Javascript Test > className 2`] = `
"import { createSignal } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";

function ClassNameCode(props) {
  const [bindings, setBindings] = createSignal(\\"a binding\\");

  return (
    <>
      <div>
        <div class=\\"no binding\\">Without Binding</div>
        <div class={bindings()}>With binding</div>
      </div>
    </>
  );
}

export default ClassNameCode;
"
`;

exports[`Solid > jsx > Javascript Test > classState 1`] = `
"import { createSignal } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";

function MyBasicComponent(props) {
  const [classState, setClassState] = createSignal(\\"testClassName\\");

  const [styleState, setStyleState] = createSignal({
    color: \\"red\\",
  });

  return (
    <div
      class={
        classState() +
        \\" \\" +
        css({
          padding: \\"10px\\",
        })
      }
      style={styleState()}
    >
      Hello! I can run in React, Vue, Solid, or Liquid!
    </div>
  );
}

export default MyBasicComponent;
"
`;

exports[`Solid > jsx > Javascript Test > classState 2`] = `
"import { createSignal } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";

function MyBasicComponent(props) {
  const [classState, setClassState] = createSignal(\\"testClassName\\");

  const [styleState, setStyleState] = createSignal({
    color: \\"red\\",
  });

  return (
    <>
      <div class={classState() + \\" div-a17878b4\\"} style={styleState()}>
        Hello! I can run in React, Vue, Solid, or Liquid!
      </div>
      <style jsx>{\`
        .div-a17878b4 {
          padding: 10px;
        }
      \`}</style>
    </>
  );
}

export default MyBasicComponent;
"
`;

exports[`Solid > jsx > Javascript Test > componentWithContext 1`] = `
"import { useContext } from \\"solid-js\\";

import Context1 from \\"@dummy/1\\";
import Context2 from \\"@dummy/2\\";

function ComponentWithContext(props) {
  const foo = useContext(Context1);

  return (
    <Context2.Provider
      value={{
        bar: \\"baz\\",
      }}
    >
      <Context1.Provider
        value={{
          foo: \\"bar\\",

          content() {
            return props.content;
          },
        }}
      >
        <>
          <>{foo.value}</>
        </>
      </Context1.Provider>
    </Context2.Provider>
  );
}

export default ComponentWithContext;
"
`;

exports[`Solid > jsx > Javascript Test > componentWithContext 2`] = `
"import { useContext } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";

import Context1 from \\"@dummy/1\\";
import Context2 from \\"@dummy/2\\";

function ComponentWithContext(props) {
  const foo = useContext(Context1);

  return (
    <>
      <Context2.Provider
        value={{
          bar: \\"baz\\",
        }}
      >
        <Context1.Provider
          value={{
            foo: \\"bar\\",

            content() {
              return props.content;
            },
          }}
        >
          <>
            <>{foo.value}</>
          </>
        </Context1.Provider>
      </Context2.Provider>
    </>
  );
}

export default ComponentWithContext;
"
`;

exports[`Solid > jsx > Javascript Test > contentState 1`] = `
"import BuilderContext from \\"@dummy/context.jsx\\";

function RenderContent(props) {
  return (
    <BuilderContext.Provider
      value={{
        content: props.content,
        registeredComponents: props.customComponents,
      }}
    >
      <div>setting context</div>
    </BuilderContext.Provider>
  );
}

export default RenderContent;
"
`;

exports[`Solid > jsx > Javascript Test > contentState 2`] = `
"import { css } from \\"solid-styled-components\\";

import BuilderContext from \\"@dummy/context.jsx\\";

function RenderContent(props) {
  return (
    <>
      <BuilderContext.Provider
        value={{
          content: props.content,
          registeredComponents: props.customComponents,
        }}
      >
        <div>setting context</div>
      </BuilderContext.Provider>
    </>
  );
}

export default RenderContent;
"
`;

exports[`Solid > jsx > Javascript Test > defaultProps 1`] = `
"import { Show } from \\"solid-js\\";

function Button(props) {
  return (
    <div>
      <Show when={props.link}>
        <a
          {...props.attributes}
          href={props.link}
          target={props.openLinkInNewTab ? \\"_blank\\" : undefined}
        >
          {props.text}
        </a>
      </Show>
      <Show when={!props.link}>
        <button type=\\"button\\" {...props.attributes}>
          {props.text}
        </button>
      </Show>
    </div>
  );
}

export default Button;
"
`;

exports[`Solid > jsx > Javascript Test > defaultProps 2`] = `
"import { Show } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";

function Button(props) {
  return (
    <>
      <div>
        <Show when={props.link}>
          <a
            {...props.attributes}
            href={props.link}
            target={props.openLinkInNewTab ? \\"_blank\\" : undefined}
          >
            {props.text}
          </a>
        </Show>
        <Show when={!props.link}>
          <button type=\\"button\\" {...props.attributes}>
            {props.text}
          </button>
        </Show>
      </div>
    </>
  );
}

export default Button;
"
`;

exports[`Solid > jsx > Javascript Test > defaultPropsOutsideComponent 1`] = `
"import { Show } from \\"solid-js\\";

function Button(props) {
  return (
    <div>
      <Show when={props.link}>
        <a
          {...props.attributes}
          href={props.link}
          target={props.openLinkInNewTab ? \\"_blank\\" : undefined}
        >
          {props.text}
        </a>
      </Show>
      <Show when={!props.link}>
        <button type=\\"button\\" {...props.attributes}>
          {props.text}
        </button>
      </Show>
    </div>
  );
}

export default Button;
"
`;

exports[`Solid > jsx > Javascript Test > defaultPropsOutsideComponent 2`] = `
"import { Show } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";

function Button(props) {
  return (
    <>
      <div>
        <Show when={props.link}>
          <a
            {...props.attributes}
            href={props.link}
            target={props.openLinkInNewTab ? \\"_blank\\" : undefined}
          >
            {props.text}
          </a>
        </Show>
        <Show when={!props.link}>
          <button type=\\"button\\" {...props.attributes}>
            {props.text}
          </button>
        </Show>
      </div>
    </>
  );
}

export default Button;
"
`;

exports[`Solid > jsx > Javascript Test > defaultValsWithTypes 1`] = `
"const DEFAULT_VALUES: Props = {
  name: \\"Sami\\",
};

function ComponentWithTypes(props) {
  return (
    <div>
      Hello
      {props.name || DEFAULT_VALUES.name}
    </div>
  );
}

export default ComponentWithTypes;
"
`;

exports[`Solid > jsx > Javascript Test > defaultValsWithTypes 2`] = `
"import { css } from \\"solid-styled-components\\";

const DEFAULT_VALUES: Props = {
  name: \\"Sami\\",
};

function ComponentWithTypes(props) {
  return (
    <>
      <div>
        Hello
        {props.name || DEFAULT_VALUES.name}
      </div>
    </>
  );
}

export default ComponentWithTypes;
"
`;

exports[`Solid > jsx > Javascript Test > expressionState 1`] = `
"import { createSignal } from \\"solid-js\\";

function MyComponent(props) {
  const [refToUse, setRefToUse] = createSignal(
    !(props.componentRef instanceof Function) ? props.componentRef : null
  );

  return <div>{refToUse()}</div>;
}

export default MyComponent;
"
`;

exports[`Solid > jsx > Javascript Test > expressionState 2`] = `
"import { createSignal } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";

function MyComponent(props) {
  const [refToUse, setRefToUse] = createSignal(
    !(props.componentRef instanceof Function) ? props.componentRef : null
  );

  return (
    <>
      <div>{refToUse()}</div>
    </>
  );
}

export default MyComponent;
"
`;

exports[`Solid > jsx > Javascript Test > import types 1`] = `
"import { createSignal } from \\"solid-js\\";

import RenderBlock from \\"./builder-render-block.raw\\";

function RenderContent(props) {
  function getRenderContentProps(block, index) {
    return {
      block: block,
      index: index,
    };
  }

  return (
    <RenderBlock
      {...getRenderContentProps(props.renderContentProps.block, 0)}
    ></RenderBlock>
  );
}

export default RenderContent;
"
`;

exports[`Solid > jsx > Javascript Test > import types 2`] = `
"import { createSignal } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";

import RenderBlock from \\"./builder-render-block.raw\\";

function RenderContent(props) {
  function getRenderContentProps(block, index) {
    return {
      block: block,
      index: index,
    };
  }

  return (
    <>
      <RenderBlock
        {...getRenderContentProps(props.renderContentProps.block, 0)}
      ></RenderBlock>
    </>
  );
}

export default RenderContent;
"
`;

exports[`Solid > jsx > Javascript Test > multipleOnUpdate 1`] = `
"import { on, createEffect } from \\"solid-js\\";

function MultipleOnUpdate(props) {
  return <div></div>;
}

export default MultipleOnUpdate;
"
`;

exports[`Solid > jsx > Javascript Test > multipleOnUpdate 2`] = `
"import { on, createEffect } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";

function MultipleOnUpdate(props) {
  return (
    <>
      <div></div>
    </>
  );
}

export default MultipleOnUpdate;
"
`;

exports[`Solid > jsx > Javascript Test > multipleOnUpdateWithDeps 1`] = `
"import { on, createEffect, createSignal } from \\"solid-js\\";

function MultipleOnUpdateWithDeps(props) {
  const [a, setA] = createSignal(\\"a\\");

  const [b, setB] = createSignal(\\"b\\");

  const [c, setC] = createSignal(\\"c\\");

  const [d, setD] = createSignal(\\"d\\");

  function onUpdateFn_0() {
    console.log(\\"Runs when a or b changes\\", a(), b());

    if (a() === \\"a\\") {
      setA(\\"b\\");
    }
  }
  createEffect(on(() => [a(), b()], onUpdateFn_0));

  function onUpdateFn_1() {
    console.log(\\"Runs when c or d changes\\", c(), d());

    if (a() === \\"a\\") {
      setA(\\"b\\");
    }
  }
  createEffect(on(() => [c(), d()], onUpdateFn_1));

  return <div></div>;
}

export default MultipleOnUpdateWithDeps;
"
`;

exports[`Solid > jsx > Javascript Test > multipleOnUpdateWithDeps 2`] = `
"import { on, createEffect, createSignal } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";

function MultipleOnUpdateWithDeps(props) {
  const [a, setA] = createSignal(\\"a\\");

  const [b, setB] = createSignal(\\"b\\");

  const [c, setC] = createSignal(\\"c\\");

  const [d, setD] = createSignal(\\"d\\");

  function onUpdateFn_0() {
    console.log(\\"Runs when a or b changes\\", a(), b());

    if (a() === \\"a\\") {
      setA(\\"b\\");
    }
  }
  createEffect(on(() => [a(), b()], onUpdateFn_0));

  function onUpdateFn_1() {
    console.log(\\"Runs when c or d changes\\", c(), d());

    if (a() === \\"a\\") {
      setA(\\"b\\");
    }
  }
  createEffect(on(() => [c(), d()], onUpdateFn_1));

  return (
    <>
      <div></div>
    </>
  );
}

export default MultipleOnUpdateWithDeps;
"
`;

exports[`Solid > jsx > Javascript Test > multipleSpreads 1`] = `
"import { createSignal } from \\"solid-js\\";

function MyBasicComponent(props) {
  const [attrs, setAttrs] = createSignal({
    hello: \\"world\\",
  });

  return <input {...attrs()} {...props} />;
}

export default MyBasicComponent;
"
`;

exports[`Solid > jsx > Javascript Test > multipleSpreads 2`] = `
"import { createSignal } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";

function MyBasicComponent(props) {
  const [attrs, setAttrs] = createSignal({
    hello: \\"world\\",
  });

  return (
    <>
      <input {...attrs()} {...props} />
    </>
  );
}

export default MyBasicComponent;
"
`;

exports[`Solid > jsx > Javascript Test > nestedShow 1`] = `
"import { Show } from \\"solid-js\\";

function NestedShow(props) {
  return (
    <Show fallback={<div>else-condition-A</div>} when={props.conditionA}>
      <Show fallback={<div>else-condition-B</div>} when={!props.conditionB}>
        <div>if condition A and condition B</div>
      </Show>
    </Show>
  );
}

export default NestedShow;
"
`;

exports[`Solid > jsx > Javascript Test > nestedShow 2`] = `
"import { Show } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";

function NestedShow(props) {
  return (
    <>
      <Show fallback={<div>else-condition-A</div>} when={props.conditionA}>
        <Show fallback={<div>else-condition-B</div>} when={!props.conditionB}>
          <div>if condition A and condition B</div>
        </Show>
      </Show>
    </>
  );
}

export default NestedShow;
"
`;

exports[`Solid > jsx > Javascript Test > nestedStyles 1`] = `
"import { css } from \\"solid-styled-components\\";

function NestedStyles(props) {
  return (
    <div
      class={css({
        display: \\"flex\\",
        foo: \\"var(--bar)\\",
        \\"@media (max-width: env(--mobile))\\": {
          display: \\"block\\",
        },
        \\"&:hover\\": {
          display: \\"flex\\",
        },
        \\".nested-selector\\": {
          display: \\"grid\\",
        },
      })}
    >
      Hello world
    </div>
  );
}

export default NestedStyles;
"
`;

exports[`Solid > jsx > Javascript Test > nestedStyles 2`] = `
"import { css } from \\"solid-styled-components\\";

function NestedStyles(props) {
  return (
    <>
      <div class=\\"div-5a4c7fde\\">Hello world</div>
      <style jsx>{\`
        .div-5a4c7fde {
          display: flex;
          foo: var(--bar);
        }
        @media (max-width: env(--mobile)) {
          .div-5a4c7fde {
            display: block;
          }
        }
        .div-5a4c7fde:hover {
          display: flex;
        }
        .div-5a4c7fde .nested-selector {
          display: grid;
        }
      \`}</style>
    </>
  );
}

export default NestedStyles;
"
`;

exports[`Solid > jsx > Javascript Test > onInit & onMount 1`] = `
"import { onMount } from \\"solid-js\\";

function OnInit(props) {
  onMount(() => {
    console.log(\\"onMount\\");
  });

  return <div></div>;
}

export default OnInit;
"
`;

exports[`Solid > jsx > Javascript Test > onInit & onMount 2`] = `
"import { onMount } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";

function OnInit(props) {
  onMount(() => {
    console.log(\\"onMount\\");
  });

  return (
    <>
      <div></div>
    </>
  );
}

export default OnInit;
"
`;

exports[`Solid > jsx > Javascript Test > onInit 1`] = `
"import { createSignal } from \\"solid-js\\";

export const defaultValues = {
  name: \\"PatrickJS\\",
};

function OnInit(props) {
  const [name, setName] = createSignal(\\"\\");

  return (
    <div>
      Default name defined by parent
      {name()}
    </div>
  );
}

export default OnInit;
"
`;

exports[`Solid > jsx > Javascript Test > onInit 2`] = `
"import { createSignal } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";

export const defaultValues = {
  name: \\"PatrickJS\\",
};

function OnInit(props) {
  const [name, setName] = createSignal(\\"\\");

  return (
    <>
      <div>
        Default name defined by parent
        {name()}
      </div>
    </>
  );
}

export default OnInit;
"
`;

exports[`Solid > jsx > Javascript Test > onMount 1`] = `
"import { onMount } from \\"solid-js\\";

function Comp(props) {
  onMount(() => {
    console.log(\\"Runs on mount\\");
  });

  return <div></div>;
}

export default Comp;
"
`;

exports[`Solid > jsx > Javascript Test > onMount 2`] = `
"import { onMount } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";

function Comp(props) {
  onMount(() => {
    console.log(\\"Runs on mount\\");
  });

  return (
    <>
      <div></div>
    </>
  );
}

export default Comp;
"
`;

exports[`Solid > jsx > Javascript Test > onUpdate 1`] = `
"import { on, createEffect } from \\"solid-js\\";

function OnUpdate(props) {
  return <div></div>;
}

export default OnUpdate;
"
`;

exports[`Solid > jsx > Javascript Test > onUpdate 2`] = `
"import { on, createEffect } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";

function OnUpdate(props) {
  return (
    <>
      <div></div>
    </>
  );
}

export default OnUpdate;
"
`;

exports[`Solid > jsx > Javascript Test > onUpdateWithDeps 1`] = `
"import { on, createEffect, createSignal } from \\"solid-js\\";

function OnUpdateWithDeps(props) {
  const [a, setA] = createSignal(\\"a\\");

  const [b, setB] = createSignal(\\"b\\");

  function onUpdateFn_0() {
    console.log(\\"Runs when a, b or size changes\\", a(), b(), props.size);
  }
  createEffect(on(() => [a(), b(), props.size], onUpdateFn_0));

  return <div></div>;
}

export default OnUpdateWithDeps;
"
`;

exports[`Solid > jsx > Javascript Test > onUpdateWithDeps 2`] = `
"import { on, createEffect, createSignal } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";

function OnUpdateWithDeps(props) {
  const [a, setA] = createSignal(\\"a\\");

  const [b, setB] = createSignal(\\"b\\");

  function onUpdateFn_0() {
    console.log(\\"Runs when a, b or size changes\\", a(), b(), props.size);
  }
  createEffect(on(() => [a(), b(), props.size], onUpdateFn_0));

  return (
    <>
      <div></div>
    </>
  );
}

export default OnUpdateWithDeps;
"
`;

exports[`Solid > jsx > Javascript Test > preserveExportOrLocalStatement 1`] = `
"const b = 3;
const foo = () => {};
export const a = 3;
export const bar = () => {};
export function run<T>(value: T) {}

function MyBasicComponent(props) {
  return <div></div>;
}

export default MyBasicComponent;
"
`;

exports[`Solid > jsx > Javascript Test > preserveExportOrLocalStatement 2`] = `
"import { css } from \\"solid-styled-components\\";

const b = 3;
const foo = () => {};
export const a = 3;
export const bar = () => {};
export function run<T>(value: T) {}

function MyBasicComponent(props) {
  return (
    <>
      <div></div>
    </>
  );
}

export default MyBasicComponent;
"
`;

exports[`Solid > jsx > Javascript Test > preserveTyping 1`] = `
"function MyBasicComponent(props) {
  return (
    <div>
      Hello! I can run in React, Vue, Solid, or Liquid!
      {props.name}
    </div>
  );
}

export default MyBasicComponent;
"
`;

exports[`Solid > jsx > Javascript Test > preserveTyping 2`] = `
"import { css } from \\"solid-styled-components\\";

function MyBasicComponent(props) {
  return (
    <>
      <div>
        Hello! I can run in React, Vue, Solid, or Liquid!
        {props.name}
      </div>
    </>
  );
}

export default MyBasicComponent;
"
`;

exports[`Solid > jsx > Javascript Test > propsDestructure 1`] = `
"import { createSignal } from \\"solid-js\\";

function MyBasicComponent(props) {
  const [name, setName] = createSignal(\\"Decadef20\\");

  return (
    <div>
      {props.children}
      {props.type}
      Hello! I can run in React, Vue, Solid, or Liquid!
    </div>
  );
}

export default MyBasicComponent;
"
`;

exports[`Solid > jsx > Javascript Test > propsDestructure 2`] = `
"import { createSignal } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";

function MyBasicComponent(props) {
  const [name, setName] = createSignal(\\"Decadef20\\");

  return (
    <>
      <div>
        {props.children}
        {props.type}
        Hello! I can run in React, Vue, Solid, or Liquid!
      </div>
    </>
  );
}

export default MyBasicComponent;
"
`;

exports[`Solid > jsx > Javascript Test > propsInterface 1`] = `
"function MyBasicComponent(props) {
  return (
    <div>
      Hello! I can run in React, Vue, Solid, or Liquid!
      {props.name}
    </div>
  );
}

export default MyBasicComponent;
"
`;

exports[`Solid > jsx > Javascript Test > propsInterface 2`] = `
"import { css } from \\"solid-styled-components\\";

function MyBasicComponent(props) {
  return (
    <>
      <div>
        Hello! I can run in React, Vue, Solid, or Liquid!
        {props.name}
      </div>
    </>
  );
}

export default MyBasicComponent;
"
`;

exports[`Solid > jsx > Javascript Test > propsType 1`] = `
"function MyBasicComponent(props) {
  return (
    <div>
      Hello! I can run in React, Vue, Solid, or Liquid!
      {props.name}
    </div>
  );
}

export default MyBasicComponent;
"
`;

exports[`Solid > jsx > Javascript Test > propsType 2`] = `
"import { css } from \\"solid-styled-components\\";

function MyBasicComponent(props) {
  return (
    <>
      <div>
        Hello! I can run in React, Vue, Solid, or Liquid!
        {props.name}
      </div>
    </>
  );
}

export default MyBasicComponent;
"
`;

exports[`Solid > jsx > Javascript Test > renderContentExample 1`] = `
"import { onMount, on, createEffect } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";

import {
  sendComponentsToVisualEditor,
  dispatchNewContentToVisualEditor,
  trackClick,
} from \\"@dummy/injection-js\\";
import BuilderContext from \\"@dummy/context.jsx\\";
import RenderBlocks from \\"@dummy/RenderBlocks.lite.tsx\\";

function RenderContent(props) {
  onMount(() => {
    sendComponentsToVisualEditor(props.customComponents);
  });

  function onUpdateFn_0() {
    dispatchNewContentToVisualEditor(props.content);
  }
  createEffect(on(() => [props.content], onUpdateFn_0));

  return (
    <BuilderContext.Provider
      value={{
        get content() {
          return 3;
        },

        get registeredComponents() {
          return 4;
        },
      }}
    >
      <div
        class={css({
          display: \\"flex\\",
          flexDirection: \\"columns\\",
        })}
        onClick={(event) => trackClick(props.content.id)}
      >
        <RenderBlocks blocks={props.content.blocks}></RenderBlocks>
      </div>
    </BuilderContext.Provider>
  );
}

export default RenderContent;
"
`;

exports[`Solid > jsx > Javascript Test > renderContentExample 2`] = `
"import { onMount, on, createEffect } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";

import {
  sendComponentsToVisualEditor,
  dispatchNewContentToVisualEditor,
  trackClick,
} from \\"@dummy/injection-js\\";
import BuilderContext from \\"@dummy/context.jsx\\";
import RenderBlocks from \\"@dummy/RenderBlocks.lite.tsx\\";

function RenderContent(props) {
  onMount(() => {
    sendComponentsToVisualEditor(props.customComponents);
  });

  function onUpdateFn_0() {
    dispatchNewContentToVisualEditor(props.content);
  }
  createEffect(on(() => [props.content], onUpdateFn_0));

  return (
    <>
      <BuilderContext.Provider
        value={{
          get content() {
            return 3;
          },

          get registeredComponents() {
            return 4;
          },
        }}
      >
        <div
          class=\\"div-975179a0\\"
          onClick={(event) => trackClick(props.content.id)}
        >
          <RenderBlocks blocks={props.content.blocks}></RenderBlocks>
        </div>
      </BuilderContext.Provider>
      <style jsx>{\`
        .div-975179a0 {
          display: flex;
          flex-direction: columns;
        }
      \`}</style>
    </>
  );
}

export default RenderContent;
"
`;

exports[`Solid > jsx > Javascript Test > rootFragmentMultiNode 1`] = `
"import { Show } from \\"solid-js\\";

function Button(props) {
  return (
    <>
      <Show when={props.link}>
        <a
          {...props.attributes}
          href={props.link}
          target={props.openLinkInNewTab ? \\"_blank\\" : undefined}
        >
          {props.text}
        </a>
      </Show>
      <Show when={!props.link}>
        <button type=\\"button\\" {...props.attributes}>
          {props.text}
        </button>
      </Show>
    </>
  );
}

export default Button;
"
`;

exports[`Solid > jsx > Javascript Test > rootFragmentMultiNode 2`] = `
"import { Show } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";

function Button(props) {
  return (
    <>
      <>
        <Show when={props.link}>
          <a
            {...props.attributes}
            href={props.link}
            target={props.openLinkInNewTab ? \\"_blank\\" : undefined}
          >
            {props.text}
          </a>
        </Show>
        <Show when={!props.link}>
          <button type=\\"button\\" {...props.attributes}>
            {props.text}
          </button>
        </Show>
      </>
    </>
  );
}

export default Button;
"
`;

exports[`Solid > jsx > Javascript Test > rootShow 1`] = `
"import { Show } from \\"solid-js\\";

function RenderStyles(props) {
  return (
    <Show fallback={<div>Foo</div>} when={props.foo === \\"bar\\"}>
      <div>Bar</div>
    </Show>
  );
}

export default RenderStyles;
"
`;

exports[`Solid > jsx > Javascript Test > rootShow 2`] = `
"import { Show } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";

function RenderStyles(props) {
  return (
    <>
      <Show fallback={<div>Foo</div>} when={props.foo === \\"bar\\"}>
        <div>Bar</div>
      </Show>
    </>
  );
}

export default RenderStyles;
"
`;

exports[`Solid > jsx > Javascript Test > self-referencing component 1`] = `
"import { Show } from \\"solid-js\\";

function MyComponent(props) {
  return (
    <div>
      {props.name}
      <Show when={props.name === \\"Batman\\"}>
        <MyComponent name=\\"Bruce Wayne\\"></MyComponent>
      </Show>
    </div>
  );
}

export default MyComponent;
"
`;

exports[`Solid > jsx > Javascript Test > self-referencing component 2`] = `
"import { Show } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";

function MyComponent(props) {
  return (
    <>
      <div>
        {props.name}
        <Show when={props.name === \\"Batman\\"}>
          <MyComponent name=\\"Bruce Wayne\\"></MyComponent>
        </Show>
      </div>
    </>
  );
}

export default MyComponent;
"
`;

exports[`Solid > jsx > Javascript Test > self-referencing component with children 1`] = `
"import { Show } from \\"solid-js\\";

function MyComponent(props) {
  return (
    <div>
      {props.name}
      {props.children}
      <Show when={props.name === \\"Batman\\"}>
        <MyComponent name=\\"Bruce\\">
          <div>Wayne</div>
        </MyComponent>
      </Show>
    </div>
  );
}

export default MyComponent;
"
`;

exports[`Solid > jsx > Javascript Test > self-referencing component with children 2`] = `
"import { Show } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";

function MyComponent(props) {
  return (
    <>
      <div>
        {props.name}
        {props.children}
        <Show when={props.name === \\"Batman\\"}>
          <MyComponent name=\\"Bruce\\">
            <div>Wayne</div>
          </MyComponent>
        </Show>
      </div>
    </>
  );
}

export default MyComponent;
"
`;

exports[`Solid > jsx > Javascript Test > showWithFor 1`] = `
"import { Show, For } from \\"solid-js\\";

function NestedShow(props) {
  return (
    <Show fallback={<div>else-condition-A</div>} when={props.conditionA}>
      <For each={props.items}>
        {(item, _index) => {
          const idx = _index();
          return <div key={idx}>{item}</div>;
        }}
      </For>
    </Show>
  );
}

export default NestedShow;
"
`;

exports[`Solid > jsx > Javascript Test > showWithFor 2`] = `
"import { Show, For } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";

function NestedShow(props) {
  return (
    <>
      <Show fallback={<div>else-condition-A</div>} when={props.conditionA}>
        <For each={props.items}>
          {(item, _index) => {
            const idx = _index();
            return <div key={idx}>{item}</div>;
          }}
        </For>
      </Show>
    </>
  );
}

export default NestedShow;
"
`;

exports[`Solid > jsx > Javascript Test > spreadAttrs 1`] = `
"function MyBasicComponent(props) {
  return <input {...attrs} />;
}

export default MyBasicComponent;
"
`;

exports[`Solid > jsx > Javascript Test > spreadAttrs 2`] = `
"import { css } from \\"solid-styled-components\\";

function MyBasicComponent(props) {
  return (
    <>
      <input {...attrs} />
    </>
  );
}

export default MyBasicComponent;
"
`;

exports[`Solid > jsx > Javascript Test > spreadNestedProps 1`] = `
"function MyBasicComponent(props) {
  return <input {...props.nested} />;
}

export default MyBasicComponent;
"
`;

exports[`Solid > jsx > Javascript Test > spreadNestedProps 2`] = `
"import { css } from \\"solid-styled-components\\";

function MyBasicComponent(props) {
  return (
    <>
      <input {...props.nested} />
    </>
  );
}

export default MyBasicComponent;
"
`;

exports[`Solid > jsx > Javascript Test > spreadProps 1`] = `
"function MyBasicComponent(props) {
  return <input {...props} />;
}

export default MyBasicComponent;
"
`;

exports[`Solid > jsx > Javascript Test > spreadProps 2`] = `
"import { css } from \\"solid-styled-components\\";

function MyBasicComponent(props) {
  return (
    <>
      <input {...props} />
    </>
  );
}

export default MyBasicComponent;
"
`;

exports[`Solid > jsx > Javascript Test > subComponent 1`] = `
"import Foo from \\"./foo-sub-component.jsx\\";

function SubComponent(props) {
  return <Foo></Foo>;
}

export default SubComponent;
"
`;

exports[`Solid > jsx > Javascript Test > subComponent 2`] = `
"import { css } from \\"solid-styled-components\\";

import Foo from \\"./foo-sub-component.jsx\\";

function SubComponent(props) {
  return (
    <>
      <Foo></Foo>
    </>
  );
}

export default SubComponent;
"
`;

exports[`Solid > jsx > Javascript Test > typeDependency 1`] = `
"function TypeDependency(props) {
  return <div>{props.foo}</div>;
}

export default TypeDependency;
"
`;

exports[`Solid > jsx > Javascript Test > typeDependency 2`] = `
"import { css } from \\"solid-styled-components\\";

function TypeDependency(props) {
  return (
    <>
      <div>{props.foo}</div>
    </>
  );
}

export default TypeDependency;
"
`;

exports[`Solid > jsx > Javascript Test > use-style 1`] = `
"import { css } from \\"solid-styled-components\\";

function MyComponent(props) {
  return <button type=\\"button\\">Button</button>;
}

export default MyComponent;
"
`;

exports[`Solid > jsx > Javascript Test > use-style 2`] = `
"import { css } from \\"solid-styled-components\\";

function MyComponent(props) {
  return (
    <>
      <button type=\\"button\\">Button</button>
      <style jsx>{\`
        button {
          background: blue;
          color: white;
          font-size: 12px;
          outline: 1px solid black;
        }
      \`}</style>
    </>
  );
}

export default MyComponent;
"
`;

exports[`Solid > jsx > Javascript Test > use-style-and-css 1`] = `
"import { css } from \\"solid-styled-components\\";

function MyComponent(props) {
  return (
    <button
      class={css({
        background: \\"blue\\",
        color: \\"white\\",
      })}
      type=\\"button\\"
    >
      Button
    </button>
  );
}

export default MyComponent;
"
`;

exports[`Solid > jsx > Javascript Test > use-style-and-css 2`] = `
"import { css } from \\"solid-styled-components\\";

function MyComponent(props) {
  return (
    <>
      <button class=\\"button-9f7d04e4\\" type=\\"button\\">
        Button
      </button>
      <style jsx>{\`
        .button-9f7d04e4 {
          background: blue;
          color: white;
        }

        button {
          font-size: 12px;
          outline: 1px solid black;
        }
      \`}</style>
    </>
  );
}

export default MyComponent;
"
`;

exports[`Solid > jsx > Javascript Test > use-style-outside-component 1`] = `
"import { css } from \\"solid-styled-components\\";

function MyComponent(props) {
  return <button type=\\"button\\">Button</button>;
}

export default MyComponent;
"
`;

exports[`Solid > jsx > Javascript Test > use-style-outside-component 2`] = `
"import { css } from \\"solid-styled-components\\";

function MyComponent(props) {
  return (
    <>
      <button type=\\"button\\">Button</button>
      <style jsx>{\`
        button {
          background: blue;
          color: white;
          font-size: 12px;
          outline: 1px solid black;
        }
      \`}</style>
    </>
  );
}

export default MyComponent;
"
`;

exports[`Solid > jsx > Remove Internal mitosis package 1`] = `
"import { createSignal } from \\"solid-js\\";

function MyBasicComponent(props) {
  const [name, setName] = createSignal(\\"PatrickJS\\");

  return (
    <div>
      Hello
      {name()}! I can run in React, Qwik, Vue, Solid, or Liquid!
    </div>
  );
}

export default MyBasicComponent;
"
`;

exports[`Solid > jsx > Remove Internal mitosis package 2`] = `
"import { createSignal } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";

function MyBasicComponent(props) {
  const [name, setName] = createSignal(\\"PatrickJS\\");

  return (
    <>
      <div>
        Hello
        {name()}! I can run in React, Qwik, Vue, Solid, or Liquid!
      </div>
    </>
  );
}

export default MyBasicComponent;
"
`;

exports[`Solid > jsx > Typescript Test > AdvancedRef 1`] = `
"import { Show, on, createEffect, createSignal } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";

function MyBasicRefComponent(props) {
  const [name, setName] = createSignal(\\"PatrickJS\\");

  function onBlur() {
    // Maintain focus
    inputRef.focus();
  }

  function lowerCaseName() {
    return name().toLowerCase();
  }

  let inputRef;
  let inputNoArgRef;

  function onUpdateFn_0() {
    console.log(\\"Received an update\\");
  }
  createEffect(on(() => [inputRef, inputNoArgRef], onUpdateFn_0));

  return (
    <div>
      <Show when={props.showInput}>
        <>
          <input
            class={css({
              color: \\"red\\",
            })}
            ref={inputRef}
            value={name()}
            onBlur={(event) => onBlur()}
            onInput={(event) => setName(event.target.value)}
          />
          <label for=\\"cars\\" ref={inputNoArgRef}>
            Choose a car:
          </label>
          <select name=\\"cars\\" id=\\"cars\\">
            <option value=\\"supra\\">GR Supra</option>
            <option value=\\"86\\">GR 86</option>
          </select>
        </>
      </Show>
      Hello
      {lowerCaseName()}! I can run in React, Qwik, Vue, Solid, or Web Component!
    </div>
  );
}

export default MyBasicRefComponent;
"
`;

exports[`Solid > jsx > Typescript Test > AdvancedRef 2`] = `
"import { Show, on, createEffect, createSignal } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";

function MyBasicRefComponent(props) {
  const [name, setName] = createSignal(\\"PatrickJS\\");

  function onBlur() {
    // Maintain focus
    inputRef.focus();
  }

  function lowerCaseName() {
    return name().toLowerCase();
  }

  let inputRef;
  let inputNoArgRef;

  function onUpdateFn_0() {
    console.log(\\"Received an update\\");
  }
  createEffect(on(() => [inputRef, inputNoArgRef], onUpdateFn_0));

  return (
    <>
      <div>
        <Show when={props.showInput}>
          <>
            <input
              class=\\"input-760f5a06\\"
              ref={inputRef}
              value={name()}
              onBlur={(event) => onBlur()}
              onInput={(event) => setName(event.target.value)}
            />
            <label for=\\"cars\\" ref={inputNoArgRef}>
              Choose a car:
            </label>
            <select name=\\"cars\\" id=\\"cars\\">
              <option value=\\"supra\\">GR Supra</option>
              <option value=\\"86\\">GR 86</option>
            </select>
          </>
        </Show>
        Hello
        {lowerCaseName()}! I can run in React, Qwik, Vue, Solid, or Web
        Component!
      </div>
      <style jsx>{\`
        .input-760f5a06 {
          color: red;
        }
      \`}</style>
    </>
  );
}

export default MyBasicRefComponent;
"
`;

exports[`Solid > jsx > Typescript Test > Basic 1`] = `
"import { createSignal } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";

export const DEFAULT_VALUES = {
  name: \\"Steve\\",
};

function MyBasicComponent(props) {
  const [name, setName] = createSignal(\\"Steve\\");

  const [age, setAge] = createSignal(1);

  const [sports, setSports] = createSignal([\\"\\"]);

  function underscore_fn_name() {
    return \\"bar\\";
  }

  return (
    <div
      class={
        \\"test \\" +
        css({
          padding: \\"10px\\",
        })
      }
    >
      <input
        value={DEFAULT_VALUES.name || name()}
        onInput={(myEvent) => setName(myEvent.target.value)}
      />
      Hello! I can run in React, Vue, Solid, or Liquid!
    </div>
  );
}

export default MyBasicComponent;
"
`;

exports[`Solid > jsx > Typescript Test > Basic 2`] = `
"import { Show, For, createSignal } from \\"solid-js\\";

function MyBasicForShowComponent(props) {
  const [name, setName] = createSignal(\\"PatrickJS\\");

  const [names, setNames] = createSignal([\\"Steve\\", \\"PatrickJS\\"]);

  return (
    <div>
      <For each={names()}>
        {(person, _index) => {
          const index = _index();
          return (
            <Show when={person === name()}>
              <input
                value={name()}
                onInput={(event) => {
                  setName(event.target.value + \\" and \\" + person);
                }}
              />
              Hello
              {person}! I can run in Qwik, Web Component, React, Vue, Solid, or
              Liquid!
            </Show>
          );
        }}
      </For>
    </div>
  );
}

export default MyBasicForShowComponent;
"
`;

exports[`Solid > jsx > Typescript Test > Basic 3`] = `
"import { createSignal } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";

export const DEFAULT_VALUES = {
  name: \\"Steve\\",
};

function MyBasicComponent(props) {
  const [name, setName] = createSignal(\\"Steve\\");

  const [age, setAge] = createSignal(1);

  const [sports, setSports] = createSignal([\\"\\"]);

  function underscore_fn_name() {
    return \\"bar\\";
  }

  return (
    <>
      <div class=\\"test div-629b2554\\">
        <input
          value={DEFAULT_VALUES.name || name()}
          onInput={(myEvent) => setName(myEvent.target.value)}
        />
        Hello! I can run in React, Vue, Solid, or Liquid!
      </div>
      <style jsx>{\`
        .div-629b2554 {
          padding: 10px;
        }
      \`}</style>
    </>
  );
}

export default MyBasicComponent;
"
`;

exports[`Solid > jsx > Typescript Test > Basic 4`] = `
"import { Show, For, createSignal } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";

function MyBasicForShowComponent(props) {
  const [name, setName] = createSignal(\\"PatrickJS\\");

  const [names, setNames] = createSignal([\\"Steve\\", \\"PatrickJS\\"]);

  return (
    <>
      <div>
        <For each={names()}>
          {(person, _index) => {
            const index = _index();
            return (
              <Show when={person === name()}>
                <input
                  value={name()}
                  onInput={(event) => {
                    setName(event.target.value + \\" and \\" + person);
                  }}
                />
                Hello
                {person}! I can run in Qwik, Web Component, React, Vue, Solid,
                or Liquid!
              </Show>
            );
          }}
        </For>
      </div>
    </>
  );
}

export default MyBasicForShowComponent;
"
`;

exports[`Solid > jsx > Typescript Test > Basic Context 1`] = `
"import { useContext, onMount, createSignal } from \\"solid-js\\";

import { Injector, createInjector, MyService } from \\"@dummy/injection-js\\";

function MyBasicComponent(props) {
  const [name, setName] = createSignal(\\"PatrickJS\\");

  function onChange() {
    const change = myService.method(\\"change\\");
    console.log(change);
  }

  const myService = useContext(MyService);

  onMount(() => {
    const bye = myService.method(\\"hi\\");
    console.log(bye);
  });

  return (
    <Injector.Provider>
      <div>
        {myService.method(\\"hello\\") + name()}
        Hello! I can run in React, Vue, Solid, or Liquid!
        <input onInput={(event) => onChange} />
      </div>
    </Injector.Provider>
  );
}

export default MyBasicComponent;
"
`;

exports[`Solid > jsx > Typescript Test > Basic Context 2`] = `
"import { useContext, onMount, createSignal } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";

import { Injector, createInjector, MyService } from \\"@dummy/injection-js\\";

function MyBasicComponent(props) {
  const [name, setName] = createSignal(\\"PatrickJS\\");

  function onChange() {
    const change = myService.method(\\"change\\");
    console.log(change);
  }

  const myService = useContext(MyService);

  onMount(() => {
    const bye = myService.method(\\"hi\\");
    console.log(bye);
  });

  return (
    <>
      <Injector.Provider>
        <div>
          {myService.method(\\"hello\\") + name()}
          Hello! I can run in React, Vue, Solid, or Liquid!
          <input onInput={(event) => onChange} />
        </div>
      </Injector.Provider>
    </>
  );
}

export default MyBasicComponent;
"
`;

exports[`Solid > jsx > Typescript Test > Basic OnMount Update 1`] = `
"import { onMount, createSignal } from \\"solid-js\\";

function MyBasicOnMountUpdateComponent(props) {
  const [name, setName] = createSignal(\\"PatrickJS\\");

  const [names, setNames] = createSignal([\\"Steve\\", \\"PatrickJS\\"]);

  onMount(() => {
    setName(\\"PatrickJS onMount\\" + props.bye);
  });

  return (
    <div>
      Hello
      {name()}
    </div>
  );
}

export default MyBasicOnMountUpdateComponent;
"
`;

exports[`Solid > jsx > Typescript Test > Basic OnMount Update 2`] = `
"import { onMount, createSignal } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";

function MyBasicOnMountUpdateComponent(props) {
  const [name, setName] = createSignal(\\"PatrickJS\\");

  const [names, setNames] = createSignal([\\"Steve\\", \\"PatrickJS\\"]);

  onMount(() => {
    setName(\\"PatrickJS onMount\\" + props.bye);
  });

  return (
    <>
      <div>
        Hello
        {name()}
      </div>
    </>
  );
}

export default MyBasicOnMountUpdateComponent;
"
`;

exports[`Solid > jsx > Typescript Test > Basic Outputs 1`] = `
"import { onMount, createSignal } from \\"solid-js\\";

function MyBasicOutputsComponent(props) {
  const [name, setName] = createSignal(\\"PatrickJS\\");

  onMount(() => {
    props.onMessage(name());
    props.onEvent(props.message);
  });

  return <div></div>;
}

export default MyBasicOutputsComponent;
"
`;

exports[`Solid > jsx > Typescript Test > Basic Outputs 2`] = `
"import { onMount, createSignal } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";

function MyBasicOutputsComponent(props) {
  const [name, setName] = createSignal(\\"PatrickJS\\");

  onMount(() => {
    props.onMessage(name());
    props.onEvent(props.message);
  });

  return (
    <>
      <div></div>
    </>
  );
}

export default MyBasicOutputsComponent;
"
`;

exports[`Solid > jsx > Typescript Test > Basic Outputs Meta 1`] = `
"import { onMount, createSignal } from \\"solid-js\\";

function MyBasicOutputsComponent(props) {
  const [name, setName] = createSignal(\\"PatrickJS\\");

  onMount(() => {
    props.onMessage(name());
    props.onEvent(props.message);
  });

  return <div></div>;
}

export default MyBasicOutputsComponent;
"
`;

exports[`Solid > jsx > Typescript Test > Basic Outputs Meta 2`] = `
"import { onMount, createSignal } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";

function MyBasicOutputsComponent(props) {
  const [name, setName] = createSignal(\\"PatrickJS\\");

  onMount(() => {
    props.onMessage(name());
    props.onEvent(props.message);
  });

  return (
    <>
      <div></div>
    </>
  );
}

export default MyBasicOutputsComponent;
"
`;

exports[`Solid > jsx > Typescript Test > BasicAttribute 1`] = `
"function MyComponent(props) {
  return <input autocapitalize=\\"on\\" autocomplete=\\"on\\" spellcheck={true} />;
}

export default MyComponent;
"
`;

exports[`Solid > jsx > Typescript Test > BasicAttribute 2`] = `
"import { css } from \\"solid-styled-components\\";

function MyComponent(props) {
  return (
    <>
      <input autocapitalize=\\"on\\" autocomplete=\\"on\\" spellcheck={true} />
    </>
  );
}

export default MyComponent;
"
`;

exports[`Solid > jsx > Typescript Test > BasicBooleanAttribute 1`] = `
"import MyBooleanAttributeComponent from \\"./basic-boolean-attribute-component.raw\\";

function MyBooleanAttribute(props) {
  return (
    <div>
      {props.children}
      {props.type}
      <MyBooleanAttributeComponent toggle={true}></MyBooleanAttributeComponent>
      <MyBooleanAttributeComponent toggle={true}></MyBooleanAttributeComponent>
      <MyBooleanAttributeComponent list={null}></MyBooleanAttributeComponent>
    </div>
  );
}

export default MyBooleanAttribute;
"
`;

exports[`Solid > jsx > Typescript Test > BasicBooleanAttribute 2`] = `
"import { css } from \\"solid-styled-components\\";

import MyBooleanAttributeComponent from \\"./basic-boolean-attribute-component.raw\\";

function MyBooleanAttribute(props) {
  return (
    <>
      <div>
        {props.children}
        {props.type}
        <MyBooleanAttributeComponent
          toggle={true}
        ></MyBooleanAttributeComponent>
        <MyBooleanAttributeComponent
          toggle={true}
        ></MyBooleanAttributeComponent>
        <MyBooleanAttributeComponent list={null}></MyBooleanAttributeComponent>
      </div>
    </>
  );
}

export default MyBooleanAttribute;
"
`;

exports[`Solid > jsx > Typescript Test > BasicChildComponent 1`] = `
"import { createSignal } from \\"solid-js\\";

import MyBasicComponent from \\"./basic.raw\\";
import MyBasicOnMountUpdateComponent from \\"./basic-onMount-update.raw\\";

function MyBasicChildComponent(props) {
  const [name, setName] = createSignal(\\"Steve\\");

  const [dev, setDev] = createSignal(\\"PatrickJS\\");

  return (
    <div>
      <MyBasicComponent id={dev()}></MyBasicComponent>
      <div>
        <MyBasicOnMountUpdateComponent
          hi={name()}
          bye={dev()}
        ></MyBasicOnMountUpdateComponent>
      </div>
    </div>
  );
}

export default MyBasicChildComponent;
"
`;

exports[`Solid > jsx > Typescript Test > BasicChildComponent 2`] = `
"import { createSignal } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";

import MyBasicComponent from \\"./basic.raw\\";
import MyBasicOnMountUpdateComponent from \\"./basic-onMount-update.raw\\";

function MyBasicChildComponent(props) {
  const [name, setName] = createSignal(\\"Steve\\");

  const [dev, setDev] = createSignal(\\"PatrickJS\\");

  return (
    <>
      <div>
        <MyBasicComponent id={dev()}></MyBasicComponent>
        <div>
          <MyBasicOnMountUpdateComponent
            hi={name()}
            bye={dev()}
          ></MyBasicOnMountUpdateComponent>
        </div>
      </div>
    </>
  );
}

export default MyBasicChildComponent;
"
`;

exports[`Solid > jsx > Typescript Test > BasicFor 1`] = `
"import { For, onMount, createSignal } from \\"solid-js\\";

function MyBasicForComponent(props) {
  const [name, setName] = createSignal(\\"PatrickJS\\");

  const [names, setNames] = createSignal([\\"Steve\\", \\"PatrickJS\\"]);

  onMount(() => {
    console.log(\\"onMount code\\");
  });

  return (
    <div>
      <For each={names()}>
        {(person, _index) => {
          const index = _index();
          return (
            <>
              <input
                value={name()}
                onInput={(event) => {
                  setName(event.target.value + \\" and \\" + person);
                }}
              />
              Hello
              {person}! I can run in Qwik, Web Component, React, Vue, Solid, or
              Liquid!
            </>
          );
        }}
      </For>
    </div>
  );
}

export default MyBasicForComponent;
"
`;

exports[`Solid > jsx > Typescript Test > BasicFor 2`] = `
"import { For, onMount, createSignal } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";

function MyBasicForComponent(props) {
  const [name, setName] = createSignal(\\"PatrickJS\\");

  const [names, setNames] = createSignal([\\"Steve\\", \\"PatrickJS\\"]);

  onMount(() => {
    console.log(\\"onMount code\\");
  });

  return (
    <>
      <div>
        <For each={names()}>
          {(person, _index) => {
            const index = _index();
            return (
              <>
                <input
                  value={name()}
                  onInput={(event) => {
                    setName(event.target.value + \\" and \\" + person);
                  }}
                />
                Hello
                {person}! I can run in Qwik, Web Component, React, Vue, Solid,
                or Liquid!
              </>
            );
          }}
        </For>
      </div>
    </>
  );
}

export default MyBasicForComponent;
"
`;

exports[`Solid > jsx > Typescript Test > BasicRef 1`] = `
"import { Show, createSignal } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";

function MyBasicRefComponent(props) {
  const [name, setName] = createSignal(\\"PatrickJS\\");

  function onBlur() {
    // Maintain focus
    inputRef.focus();
  }

  function lowerCaseName() {
    return name().toLowerCase();
  }

  let inputRef;
  let inputNoArgRef;

  return (
    <div>
      <Show when={props.showInput}>
        <>
          <input
            class={css({
              color: \\"red\\",
            })}
            ref={inputRef}
            value={name()}
            onBlur={(event) => onBlur()}
            onInput={(event) => setName(event.target.value)}
          />
          <label for=\\"cars\\" ref={inputNoArgRef}>
            Choose a car:
          </label>
          <select name=\\"cars\\" id=\\"cars\\">
            <option value=\\"supra\\">GR Supra</option>
            <option value=\\"86\\">GR 86</option>
          </select>
        </>
      </Show>
      Hello
      {lowerCaseName()}! I can run in React, Qwik, Vue, Solid, or Web Component!
    </div>
  );
}

export default MyBasicRefComponent;
"
`;

exports[`Solid > jsx > Typescript Test > BasicRef 2`] = `
"import { Show, createSignal } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";

function MyBasicRefComponent(props) {
  const [name, setName] = createSignal(\\"PatrickJS\\");

  function onBlur() {
    // Maintain focus
    inputRef.focus();
  }

  function lowerCaseName() {
    return name().toLowerCase();
  }

  let inputRef;
  let inputNoArgRef;

  return (
    <>
      <div>
        <Show when={props.showInput}>
          <>
            <input
              class=\\"input-aad6a728\\"
              ref={inputRef}
              value={name()}
              onBlur={(event) => onBlur()}
              onInput={(event) => setName(event.target.value)}
            />
            <label for=\\"cars\\" ref={inputNoArgRef}>
              Choose a car:
            </label>
            <select name=\\"cars\\" id=\\"cars\\">
              <option value=\\"supra\\">GR Supra</option>
              <option value=\\"86\\">GR 86</option>
            </select>
          </>
        </Show>
        Hello
        {lowerCaseName()}! I can run in React, Qwik, Vue, Solid, or Web
        Component!
      </div>
      <style jsx>{\`
        .input-aad6a728 {
          color: red;
        }
      \`}</style>
    </>
  );
}

export default MyBasicRefComponent;
"
`;

exports[`Solid > jsx > Typescript Test > BasicRefAssignment 1`] = `
"import { createSignal } from \\"solid-js\\";

function MyBasicRefAssignmentComponent(props) {
  function handlerClick(event) {
    event.preventDefault();
    console.log(\\"current value\\", holdValueRef);
    holdValueRef = holdValueRef + \\"JS\\";
  }

  return (
    <div>
      <button onClick={(evt) => handlerClick(evt)}>Click</button>
    </div>
  );
}

export default MyBasicRefAssignmentComponent;
"
`;

exports[`Solid > jsx > Typescript Test > BasicRefAssignment 2`] = `
"import { createSignal } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";

function MyBasicRefAssignmentComponent(props) {
  function handlerClick(event) {
    event.preventDefault();
    console.log(\\"current value\\", holdValueRef);
    holdValueRef = holdValueRef + \\"JS\\";
  }

  return (
    <>
      <div>
        <button onClick={(evt) => handlerClick(evt)}>Click</button>
      </div>
    </>
  );
}

export default MyBasicRefAssignmentComponent;
"
`;

exports[`Solid > jsx > Typescript Test > BasicRefPrevious 1`] = `
"import { on, createEffect, createSignal } from \\"solid-js\\";

export function usePrevious<T>(value: T) {
  // The ref object is a generic container whose current property is mutable ...
  // ... and can hold any value, similar to an instance property on a class
  let ref = useRef<T>(null); // Store current value in ref

  onUpdate(() => {
    ref = value;
  }, [value]); // Only re-run if value changes
  // Return previous value (happens before update in useEffect above)

  return ref;
}

function MyPreviousComponent(props) {
  const [count, setCount] = createSignal(0);

  function onUpdateFn_0() {
    prevCount = count();
  }
  createEffect(on(() => [count()], onUpdateFn_0));

  return (
    <div>
      <h1>
        Now:
        {count()}, before:
        {prevCount}
      </h1>
      <button onClick={(event) => setCount(1)}>Increment</button>
    </div>
  );
}

export default MyPreviousComponent;
"
`;

exports[`Solid > jsx > Typescript Test > BasicRefPrevious 2`] = `
"import { on, createEffect, createSignal } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";

export function usePrevious<T>(value: T) {
  // The ref object is a generic container whose current property is mutable ...
  // ... and can hold any value, similar to an instance property on a class
  let ref = useRef<T>(null); // Store current value in ref

  onUpdate(() => {
    ref = value;
  }, [value]); // Only re-run if value changes
  // Return previous value (happens before update in useEffect above)

  return ref;
}

function MyPreviousComponent(props) {
  const [count, setCount] = createSignal(0);

  function onUpdateFn_0() {
    prevCount = count();
  }
  createEffect(on(() => [count()], onUpdateFn_0));

  return (
    <>
      <div>
        <h1>
          Now:
          {count()}, before:
          {prevCount}
        </h1>
        <button onClick={(event) => setCount(1)}>Increment</button>
      </div>
    </>
  );
}

export default MyPreviousComponent;
"
`;

exports[`Solid > jsx > Typescript Test > Button 1`] = `
"import { Show } from \\"solid-js\\";

function Button(props) {
  return (
    <div>
      <Show when={props.link}>
        <a
          {...props.attributes}
          href={props.link}
          target={props.openLinkInNewTab ? \\"_blank\\" : undefined}
        >
          {props.text}
        </a>
      </Show>
      <Show when={!props.link}>
        <button type=\\"button\\" {...props.attributes}>
          {props.text}
        </button>
      </Show>
    </div>
  );
}

export default Button;
"
`;

exports[`Solid > jsx > Typescript Test > Button 2`] = `
"import { Show } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";

function Button(props) {
  return (
    <>
      <div>
        <Show when={props.link}>
          <a
            {...props.attributes}
            href={props.link}
            target={props.openLinkInNewTab ? \\"_blank\\" : undefined}
          >
            {props.text}
          </a>
        </Show>
        <Show when={!props.link}>
          <button type=\\"button\\" {...props.attributes}>
            {props.text}
          </button>
        </Show>
      </div>
    </>
  );
}

export default Button;
"
`;

exports[`Solid > jsx > Typescript Test > Columns 1`] = `
"import { For, createSignal } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";

function Column(props) {
  function getColumns() {
    return props.columns || [];
  }

  function getGutterSize() {
    return typeof props.space === \\"number\\" ? props.space || 0 : 20;
  }

  function getWidth(index) {
    const columns = getColumns();
    return (columns[index] && columns[index].width) || 100 / columns.length;
  }

  function getColumnCssWidth(index) {
    const columns = getColumns();
    const gutterSize = getGutterSize();
    const subtractWidth = (gutterSize * (columns.length - 1)) / columns.length;
    return \`calc(\${getWidth(index)}% - \${subtractWidth}px)\`;
  }

  return (
    <div
      class={
        \\"builder-columns \\" +
        css({
          display: \\"flex\\",
          flexDirection: \\"column\\",
          alignItems: \\"stretch\\",
          lineHeight: \\"normal\\",
          \\"@media (max-width: 999px)\\": {
            flexDirection: \\"row\\",
          },
          \\"@media (max-width: 639px)\\": {
            flexDirection: \\"row-reverse\\",
          },
        })
      }
    >
      <For each={props.columns}>
        {(column, _index) => {
          const index = _index();
          return (
            <div
              class={
                \\"builder-column \\" +
                css({
                  flexGrow: \\"1\\",
                })
              }
            >
              {column.content}
              {index}
            </div>
          );
        }}
      </For>
    </div>
  );
}

export default Column;
"
`;

exports[`Solid > jsx > Typescript Test > Columns 2`] = `
"import { For, createSignal } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";

function Column(props) {
  function getColumns() {
    return props.columns || [];
  }

  function getGutterSize() {
    return typeof props.space === \\"number\\" ? props.space || 0 : 20;
  }

  function getWidth(index) {
    const columns = getColumns();
    return (columns[index] && columns[index].width) || 100 / columns.length;
  }

  function getColumnCssWidth(index) {
    const columns = getColumns();
    const gutterSize = getGutterSize();
    const subtractWidth = (gutterSize * (columns.length - 1)) / columns.length;
    return \`calc(\${getWidth(index)}% - \${subtractWidth}px)\`;
  }

  return (
    <>
      <div class=\\"builder-columns div-3489e5a0\\">
        <For each={props.columns}>
          {(column, _index) => {
            const index = _index();
            return (
              <div class=\\"builder-column div-3489e5a0-2\\">
                {column.content}
                {index}
              </div>
            );
          }}
        </For>
      </div>
      <style jsx>{\`
        .div-3489e5a0 {
          display: flex;
          flex-direction: column;
          align-items: stretch;
          line-height: normal;
        }
        @media (max-width: 999px) {
          .div-3489e5a0 {
            flex-direction: row;
          }
        }
        @media (max-width: 639px) {
          .div-3489e5a0 {
            flex-direction: row-reverse;
          }
        }
        .div-3489e5a0-2 {
          flex-grow: 1;
        }
      \`}</style>
    </>
  );
}

export default Column;
"
`;

exports[`Solid > jsx > Typescript Test > ContentSlotHtml 1`] = `
"function ContentSlotCode(props) {
  return (
    <div>
      <Slot name={props.slotTesting}></Slot>
      <div>
        <hr />
      </div>
      <div>
        <Slot></Slot>
      </div>
    </div>
  );
}

export default ContentSlotCode;
"
`;

exports[`Solid > jsx > Typescript Test > ContentSlotHtml 2`] = `
"import { css } from \\"solid-styled-components\\";

function ContentSlotCode(props) {
  return (
    <>
      <div>
        <Slot name={props.slotTesting}></Slot>
        <div>
          <hr />
        </div>
        <div>
          <Slot></Slot>
        </div>
      </div>
    </>
  );
}

export default ContentSlotCode;
"
`;

exports[`Solid > jsx > Typescript Test > ContentSlotJSX 1`] = `
"import { Show } from \\"solid-js\\";

function ContentSlotJsxCode(props) {
  return (
    <div>
      <Show when={props.slotTesting}>
        <div>{props.slotTesting}</div>
      </Show>
      <div>
        <hr />
      </div>
      <div>{props.children}</div>
    </div>
  );
}

export default ContentSlotJsxCode;
"
`;

exports[`Solid > jsx > Typescript Test > ContentSlotJSX 2`] = `
"import { Show } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";

function ContentSlotJsxCode(props) {
  return (
    <>
      <div>
        <Show when={props.slotTesting}>
          <div>{props.slotTesting}</div>
        </Show>
        <div>
          <hr />
        </div>
        <div>{props.children}</div>
      </div>
    </>
  );
}

export default ContentSlotJsxCode;
"
`;

exports[`Solid > jsx > Typescript Test > CustomCode 1`] = `
"import { onMount, createSignal } from \\"solid-js\\";

function CustomCode(props) {
  const [scriptsInserted, setScriptsInserted] = createSignal([]);

  const [scriptsRun, setScriptsRun] = createSignal([]);

  function findAndRunScripts() {
    // TODO: Move this function to standalone one in '@builder.io/utils'
    if (elem && typeof window !== \\"undefined\\") {
      /** @type {HTMLScriptElement[]} */
      const scripts = elem.getElementsByTagName(\\"script\\");

      for (let i = 0; i < scripts.length; i++) {
        const script = scripts[i];

        if (script.src) {
          if (scriptsInserted().includes(script.src)) {
            continue;
          }

          scriptsInserted().push(script.src);
          const newScript = document.createElement(\\"script\\");
          newScript.async = true;
          newScript.src = script.src;
          document.head.appendChild(newScript);
        } else if (
          !script.type ||
          [
            \\"text/javascript\\",
            \\"application/javascript\\",
            \\"application/ecmascript\\",
          ].includes(script.type)
        ) {
          if (scriptsRun().includes(script.innerText)) {
            continue;
          }

          try {
            scriptsRun().push(script.innerText);
            new Function(script.innerText)();
          } catch (error) {
            console.warn(\\"\`CustomCode\`: Error running script:\\", error);
          }
        }
      }
    }
  }

  let elem;

  onMount(() => {
    findAndRunScripts();
  });

  return (
    <div
      class={
        \\"builder-custom-code\\" + (props.replaceNodes ? \\" replace-nodes\\" : \\"\\")
      }
      ref={elem}
      innerHTML={props.code}
    ></div>
  );
}

export default CustomCode;
"
`;

exports[`Solid > jsx > Typescript Test > CustomCode 2`] = `
"import { onMount, createSignal } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";

function CustomCode(props) {
  const [scriptsInserted, setScriptsInserted] = createSignal([]);

  const [scriptsRun, setScriptsRun] = createSignal([]);

  function findAndRunScripts() {
    // TODO: Move this function to standalone one in '@builder.io/utils'
    if (elem && typeof window !== \\"undefined\\") {
      /** @type {HTMLScriptElement[]} */
      const scripts = elem.getElementsByTagName(\\"script\\");

      for (let i = 0; i < scripts.length; i++) {
        const script = scripts[i];

        if (script.src) {
          if (scriptsInserted().includes(script.src)) {
            continue;
          }

          scriptsInserted().push(script.src);
          const newScript = document.createElement(\\"script\\");
          newScript.async = true;
          newScript.src = script.src;
          document.head.appendChild(newScript);
        } else if (
          !script.type ||
          [
            \\"text/javascript\\",
            \\"application/javascript\\",
            \\"application/ecmascript\\",
          ].includes(script.type)
        ) {
          if (scriptsRun().includes(script.innerText)) {
            continue;
          }

          try {
            scriptsRun().push(script.innerText);
            new Function(script.innerText)();
          } catch (error) {
            console.warn(\\"\`CustomCode\`: Error running script:\\", error);
          }
        }
      }
    }
  }

  let elem;

  onMount(() => {
    findAndRunScripts();
  });

  return (
    <>
      <div
        class={
          \\"builder-custom-code\\" + (props.replaceNodes ? \\" replace-nodes\\" : \\"\\")
        }
        ref={elem}
        innerHTML={props.code}
      ></div>
    </>
  );
}

export default CustomCode;
"
`;

exports[`Solid > jsx > Typescript Test > Embed 1`] = `
"import { onMount, createSignal } from \\"solid-js\\";

function CustomCode(props) {
  const [scriptsInserted, setScriptsInserted] = createSignal([]);

  const [scriptsRun, setScriptsRun] = createSignal([]);

  function findAndRunScripts() {
    // TODO: Move this function to standalone one in '@builder.io/utils'
    if (elem && typeof window !== \\"undefined\\") {
      /** @type {HTMLScriptElement[]} */
      const scripts = elem.getElementsByTagName(\\"script\\");

      for (let i = 0; i < scripts.length; i++) {
        const script = scripts[i];

        if (script.src) {
          if (scriptsInserted().includes(script.src)) {
            continue;
          }

          scriptsInserted().push(script.src);
          const newScript = document.createElement(\\"script\\");
          newScript.async = true;
          newScript.src = script.src;
          document.head.appendChild(newScript);
        } else if (
          !script.type ||
          [
            \\"text/javascript\\",
            \\"application/javascript\\",
            \\"application/ecmascript\\",
          ].includes(script.type)
        ) {
          if (scriptsRun().includes(script.innerText)) {
            continue;
          }

          try {
            scriptsRun().push(script.innerText);
            new Function(script.innerText)();
          } catch (error) {
            console.warn(\\"\`CustomCode\`: Error running script:\\", error);
          }
        }
      }
    }
  }

  let elem;

  onMount(() => {
    findAndRunScripts();
  });

  return (
    <div
      class={
        \\"builder-custom-code\\" + (props.replaceNodes ? \\" replace-nodes\\" : \\"\\")
      }
      ref={elem}
      innerHTML={props.code}
    ></div>
  );
}

export default CustomCode;
"
`;

exports[`Solid > jsx > Typescript Test > Embed 2`] = `
"import { onMount, createSignal } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";

function CustomCode(props) {
  const [scriptsInserted, setScriptsInserted] = createSignal([]);

  const [scriptsRun, setScriptsRun] = createSignal([]);

  function findAndRunScripts() {
    // TODO: Move this function to standalone one in '@builder.io/utils'
    if (elem && typeof window !== \\"undefined\\") {
      /** @type {HTMLScriptElement[]} */
      const scripts = elem.getElementsByTagName(\\"script\\");

      for (let i = 0; i < scripts.length; i++) {
        const script = scripts[i];

        if (script.src) {
          if (scriptsInserted().includes(script.src)) {
            continue;
          }

          scriptsInserted().push(script.src);
          const newScript = document.createElement(\\"script\\");
          newScript.async = true;
          newScript.src = script.src;
          document.head.appendChild(newScript);
        } else if (
          !script.type ||
          [
            \\"text/javascript\\",
            \\"application/javascript\\",
            \\"application/ecmascript\\",
          ].includes(script.type)
        ) {
          if (scriptsRun().includes(script.innerText)) {
            continue;
          }

          try {
            scriptsRun().push(script.innerText);
            new Function(script.innerText)();
          } catch (error) {
            console.warn(\\"\`CustomCode\`: Error running script:\\", error);
          }
        }
      }
    }
  }

  let elem;

  onMount(() => {
    findAndRunScripts();
  });

  return (
    <>
      <div
        class={
          \\"builder-custom-code\\" + (props.replaceNodes ? \\" replace-nodes\\" : \\"\\")
        }
        ref={elem}
        innerHTML={props.code}
      ></div>
    </>
  );
}

export default CustomCode;
"
`;

exports[`Solid > jsx > Typescript Test > Form 1`] = `
"import { Show, For, createSignal } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";

import { BuilderBlock as BuilderBlockComponent } from \\"@fake\\";
import { Builder, builder } from \\"@builder.io/sdk\\";
import { BuilderBlocks } from \\"@fake\\";
import { set } from \\"@fake\\";
import { get } from \\"@fake\\";

function FormComponent(props) {
  const [formState, setFormState] = createSignal(\\"unsubmitted\\");

  const [responseData, setResponseData] = createSignal(null);

  const [formErrorMessage, setFormErrorMessage] = createSignal(\\"\\");

  function submissionState() {
    return (Builder.isEditing && props.previewState) || formState();
  }

  function onSubmit(event) {
    const sendWithJs = props.sendWithJs || props.sendSubmissionsTo === \\"email\\";

    if (props.sendSubmissionsTo === \\"zapier\\") {
      event.preventDefault();
    } else if (sendWithJs) {
      if (!(props.action || props.sendSubmissionsTo === \\"email\\")) {
        event.preventDefault();
        return;
      }

      event.preventDefault();
      const el = event.currentTarget;
      const headers = props.customHeaders || {};
      let body;
      const formData = new FormData(el); // TODO: maybe support null

      const formPairs = Array.from(
        event.currentTarget.querySelectorAll(\\"input,select,textarea\\")
      )
        .filter((el) => !!el.name)
        .map((el) => {
          let value;
          const key = el.name;

          if (el instanceof HTMLInputElement) {
            if (el.type === \\"radio\\") {
              if (el.checked) {
                value = el.name;
                return {
                  key,
                  value,
                };
              }
            } else if (el.type === \\"checkbox\\") {
              value = el.checked;
            } else if (el.type === \\"number\\" || el.type === \\"range\\") {
              const num = el.valueAsNumber;

              if (!isNaN(num)) {
                value = num;
              }
            } else if (el.type === \\"file\\") {
              // TODO: one vs multiple files
              value = el.files;
            } else {
              value = el.value;
            }
          } else {
            value = el.value;
          }

          return {
            key,
            value,
          };
        });
      let contentType = props.contentType;

      if (props.sendSubmissionsTo === \\"email\\") {
        contentType = \\"multipart/form-data\\";
      }

      Array.from(formPairs).forEach(({ value }) => {
        if (
          value instanceof File ||
          (Array.isArray(value) && value[0] instanceof File) ||
          value instanceof FileList
        ) {
          contentType = \\"multipart/form-data\\";
        }
      }); // TODO: send as urlEncoded or multipart by default
      // because of ease of use and reliability in browser API
      // for encoding the form?

      if (contentType !== \\"application/json\\") {
        body = formData;
      } else {
        // Json
        const json = {};
        Array.from(formPairs).forEach(({ value, key }) => {
          set(json, key, value);
        });
        body = JSON.stringify(json);
      }

      if (contentType && contentType !== \\"multipart/form-data\\") {
        if (
          /* Zapier doesn't allow content-type header to be sent from browsers */
          !(sendWithJs && props.action?.includes(\\"zapier.com\\"))
        ) {
          headers[\\"content-type\\"] = contentType;
        }
      }

      const presubmitEvent = new CustomEvent(\\"presubmit\\", {
        detail: {
          body,
        },
      });

      if (formRef) {
        formRef.dispatchEvent(presubmitEvent);

        if (presubmitEvent.defaultPrevented) {
          return;
        }
      }

      setFormState(\\"sending\\");
      const formUrl = \`\${
        builder.env === \\"dev\\" ? \\"http://localhost:5000\\" : \\"https://builder.io\\"
      }/api/v1/form-submit?apiKey=\${builder.apiKey}&to=\${btoa(
        props.sendSubmissionsToEmail || \\"\\"
      )}&name=\${encodeURIComponent(props.name || \\"\\")}\`;
      fetch(
        props.sendSubmissionsTo === \\"email\\" ? formUrl : props.action,
        /* TODO: throw error if no action URL */
        {
          body,
          headers,
          method: props.method || \\"post\\",
        }
      ).then(
        async (res) => {
          let body;
          const contentType = res.headers.get(\\"content-type\\");

          if (contentType && contentType.indexOf(\\"application/json\\") !== -1) {
            body = await res.json();
          } else {
            body = await res.text();
          }

          if (!res.ok && props.errorMessagePath) {
            /* TODO: allow supplying an error formatter function */
            let message = get(body, props.errorMessagePath);

            if (message) {
              if (typeof message !== \\"string\\") {
                /* TODO: ideally convert json to yaml so it woul dbe like
           error: - email has been taken */
                message = JSON.stringify(message);
              }

              setFormErrorMessage(message);
            }
          }

          setResponseData(body);
          setFormState(res.ok ? \\"success\\" : \\"error\\");

          if (res.ok) {
            const submitSuccessEvent = new CustomEvent(\\"submit:success\\", {
              detail: {
                res,
                body,
              },
            });

            if (formRef) {
              formRef.dispatchEvent(submitSuccessEvent);

              if (submitSuccessEvent.defaultPrevented) {
                return;
              }
              /* TODO: option to turn this on/off? */

              if (props.resetFormOnSubmit !== false) {
                formRef.reset();
              }
            }
            /* TODO: client side route event first that can be preventDefaulted */

            if (props.successUrl) {
              if (formRef) {
                const event = new CustomEvent(\\"route\\", {
                  detail: {
                    url: props.successUrl,
                  },
                });
                formRef.dispatchEvent(event);

                if (!event.defaultPrevented) {
                  location.href = props.successUrl;
                }
              } else {
                location.href = props.successUrl;
              }
            }
          }
        },
        (err) => {
          const submitErrorEvent = new CustomEvent(\\"submit:error\\", {
            detail: {
              error: err,
            },
          });

          if (formRef) {
            formRef.dispatchEvent(submitErrorEvent);

            if (submitErrorEvent.defaultPrevented) {
              return;
            }
          }

          setResponseData(err);
          setFormState(\\"error\\");
        }
      );
    }
  }

  let formRef;

  return (
    <form
      validate={props.validate}
      ref={formRef}
      action={!props.sendWithJs && props.action}
      method={props.method}
      name={props.name}
      onSubmit={(event) => onSubmit(event)}
      {...props.attributes}
    >
      <Show when={props.builderBlock && props.builderBlock.children}>
        <For each={props.builderBlock?.children}>
          {(block, _index) => {
            const index = _index();
            return (
              <BuilderBlockComponent
                key={block.id}
                block={block}
                index={index}
              ></BuilderBlockComponent>
            );
          }}
        </For>
      </Show>
      <Show when={submissionState() === \\"error\\"}>
        <BuilderBlocks
          dataPath=\\"errorMessage\\"
          blocks={props.errorMessage}
        ></BuilderBlocks>
      </Show>
      <Show when={submissionState() === \\"sending\\"}>
        <BuilderBlocks
          dataPath=\\"sendingMessage\\"
          blocks={props.sendingMessage}
        ></BuilderBlocks>
      </Show>
      <Show when={submissionState() === \\"error\\" && responseData()}>
        <pre
          class={
            \\"builder-form-error-text \\" +
            css({
              padding: \\"10px\\",
              color: \\"red\\",
              textAlign: \\"center\\",
            })
          }
        >
          {JSON.stringify(responseData(), null, 2)}
        </pre>
      </Show>
      <Show when={submissionState() === \\"success\\"}>
        <BuilderBlocks
          dataPath=\\"successMessage\\"
          blocks={props.successMessage}
        ></BuilderBlocks>
      </Show>
    </form>
  );
}

export default FormComponent;
"
`;

exports[`Solid > jsx > Typescript Test > Form 2`] = `
"import { Show, For, createSignal } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";

import { BuilderBlock as BuilderBlockComponent } from \\"@fake\\";
import { Builder, builder } from \\"@builder.io/sdk\\";
import { BuilderBlocks } from \\"@fake\\";
import { set } from \\"@fake\\";
import { get } from \\"@fake\\";

function FormComponent(props) {
  const [formState, setFormState] = createSignal(\\"unsubmitted\\");

  const [responseData, setResponseData] = createSignal(null);

  const [formErrorMessage, setFormErrorMessage] = createSignal(\\"\\");

  function submissionState() {
    return (Builder.isEditing && props.previewState) || formState();
  }

  function onSubmit(event) {
    const sendWithJs = props.sendWithJs || props.sendSubmissionsTo === \\"email\\";

    if (props.sendSubmissionsTo === \\"zapier\\") {
      event.preventDefault();
    } else if (sendWithJs) {
      if (!(props.action || props.sendSubmissionsTo === \\"email\\")) {
        event.preventDefault();
        return;
      }

      event.preventDefault();
      const el = event.currentTarget;
      const headers = props.customHeaders || {};
      let body;
      const formData = new FormData(el); // TODO: maybe support null

      const formPairs = Array.from(
        event.currentTarget.querySelectorAll(\\"input,select,textarea\\")
      )
        .filter((el) => !!el.name)
        .map((el) => {
          let value;
          const key = el.name;

          if (el instanceof HTMLInputElement) {
            if (el.type === \\"radio\\") {
              if (el.checked) {
                value = el.name;
                return {
                  key,
                  value,
                };
              }
            } else if (el.type === \\"checkbox\\") {
              value = el.checked;
            } else if (el.type === \\"number\\" || el.type === \\"range\\") {
              const num = el.valueAsNumber;

              if (!isNaN(num)) {
                value = num;
              }
            } else if (el.type === \\"file\\") {
              // TODO: one vs multiple files
              value = el.files;
            } else {
              value = el.value;
            }
          } else {
            value = el.value;
          }

          return {
            key,
            value,
          };
        });
      let contentType = props.contentType;

      if (props.sendSubmissionsTo === \\"email\\") {
        contentType = \\"multipart/form-data\\";
      }

      Array.from(formPairs).forEach(({ value }) => {
        if (
          value instanceof File ||
          (Array.isArray(value) && value[0] instanceof File) ||
          value instanceof FileList
        ) {
          contentType = \\"multipart/form-data\\";
        }
      }); // TODO: send as urlEncoded or multipart by default
      // because of ease of use and reliability in browser API
      // for encoding the form?

      if (contentType !== \\"application/json\\") {
        body = formData;
      } else {
        // Json
        const json = {};
        Array.from(formPairs).forEach(({ value, key }) => {
          set(json, key, value);
        });
        body = JSON.stringify(json);
      }

      if (contentType && contentType !== \\"multipart/form-data\\") {
        if (
          /* Zapier doesn't allow content-type header to be sent from browsers */
          !(sendWithJs && props.action?.includes(\\"zapier.com\\"))
        ) {
          headers[\\"content-type\\"] = contentType;
        }
      }

      const presubmitEvent = new CustomEvent(\\"presubmit\\", {
        detail: {
          body,
        },
      });

      if (formRef) {
        formRef.dispatchEvent(presubmitEvent);

        if (presubmitEvent.defaultPrevented) {
          return;
        }
      }

      setFormState(\\"sending\\");
      const formUrl = \`\${
        builder.env === \\"dev\\" ? \\"http://localhost:5000\\" : \\"https://builder.io\\"
      }/api/v1/form-submit?apiKey=\${builder.apiKey}&to=\${btoa(
        props.sendSubmissionsToEmail || \\"\\"
      )}&name=\${encodeURIComponent(props.name || \\"\\")}\`;
      fetch(
        props.sendSubmissionsTo === \\"email\\" ? formUrl : props.action,
        /* TODO: throw error if no action URL */
        {
          body,
          headers,
          method: props.method || \\"post\\",
        }
      ).then(
        async (res) => {
          let body;
          const contentType = res.headers.get(\\"content-type\\");

          if (contentType && contentType.indexOf(\\"application/json\\") !== -1) {
            body = await res.json();
          } else {
            body = await res.text();
          }

          if (!res.ok && props.errorMessagePath) {
            /* TODO: allow supplying an error formatter function */
            let message = get(body, props.errorMessagePath);

            if (message) {
              if (typeof message !== \\"string\\") {
                /* TODO: ideally convert json to yaml so it woul dbe like
           error: - email has been taken */
                message = JSON.stringify(message);
              }

              setFormErrorMessage(message);
            }
          }

          setResponseData(body);
          setFormState(res.ok ? \\"success\\" : \\"error\\");

          if (res.ok) {
            const submitSuccessEvent = new CustomEvent(\\"submit:success\\", {
              detail: {
                res,
                body,
              },
            });

            if (formRef) {
              formRef.dispatchEvent(submitSuccessEvent);

              if (submitSuccessEvent.defaultPrevented) {
                return;
              }
              /* TODO: option to turn this on/off? */

              if (props.resetFormOnSubmit !== false) {
                formRef.reset();
              }
            }
            /* TODO: client side route event first that can be preventDefaulted */

            if (props.successUrl) {
              if (formRef) {
                const event = new CustomEvent(\\"route\\", {
                  detail: {
                    url: props.successUrl,
                  },
                });
                formRef.dispatchEvent(event);

                if (!event.defaultPrevented) {
                  location.href = props.successUrl;
                }
              } else {
                location.href = props.successUrl;
              }
            }
          }
        },
        (err) => {
          const submitErrorEvent = new CustomEvent(\\"submit:error\\", {
            detail: {
              error: err,
            },
          });

          if (formRef) {
            formRef.dispatchEvent(submitErrorEvent);

            if (submitErrorEvent.defaultPrevented) {
              return;
            }
          }

          setResponseData(err);
          setFormState(\\"error\\");
        }
      );
    }
  }

  let formRef;

  return (
    <>
      <form
        validate={props.validate}
        ref={formRef}
        action={!props.sendWithJs && props.action}
        method={props.method}
        name={props.name}
        onSubmit={(event) => onSubmit(event)}
        {...props.attributes}
      >
        <Show when={props.builderBlock && props.builderBlock.children}>
          <For each={props.builderBlock?.children}>
            {(block, _index) => {
              const index = _index();
              return (
                <BuilderBlockComponent
                  key={block.id}
                  block={block}
                  index={index}
                ></BuilderBlockComponent>
              );
            }}
          </For>
        </Show>
        <Show when={submissionState() === \\"error\\"}>
          <BuilderBlocks
            dataPath=\\"errorMessage\\"
            blocks={props.errorMessage}
          ></BuilderBlocks>
        </Show>
        <Show when={submissionState() === \\"sending\\"}>
          <BuilderBlocks
            dataPath=\\"sendingMessage\\"
            blocks={props.sendingMessage}
          ></BuilderBlocks>
        </Show>
        <Show when={submissionState() === \\"error\\" && responseData()}>
          <pre class=\\"builder-form-error-text pre-9555e2e0\\">
            {JSON.stringify(responseData(), null, 2)}
          </pre>
        </Show>
        <Show when={submissionState() === \\"success\\"}>
          <BuilderBlocks
            dataPath=\\"successMessage\\"
            blocks={props.successMessage}
          ></BuilderBlocks>
        </Show>
      </form>
      <style jsx>{\`
        .pre-9555e2e0 {
          padding: 10px;
          color: red;
          text-align: center;
        }
      \`}</style>
    </>
  );
}

export default FormComponent;
"
`;

exports[`Solid > jsx > Typescript Test > Image 1`] = `
"import { Show, onMount, createSignal } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";

function Image(props) {
  const [scrollListener, setScrollListener] = createSignal(null);

  const [imageLoaded, setImageLoaded] = createSignal(false);

  const [load, setLoad] = createSignal(false);

  function setLoaded() {
    setImageLoaded(true);
  }

  function useLazyLoading() {
    // TODO: Add more checks here, like testing for real web browsers
    return !!props.lazy && isBrowser();
  }

  function isBrowser() {
    return (
      typeof window !== \\"undefined\\" && window.navigator.product != \\"ReactNative\\"
    );
  }

  let pictureRef;

  onMount(() => {
    if (useLazyLoading()) {
      // throttled scroll capture listener
      const listener = () => {
        if (pictureRef) {
          const rect = pictureRef.getBoundingClientRect();
          const buffer = window.innerHeight / 2;

          if (rect.top < window.innerHeight + buffer) {
            setLoad(true);
            setScrollListener(null);
            window.removeEventListener(\\"scroll\\", listener);
          }
        }
      };

      setScrollListener(listener);
      window.addEventListener(\\"scroll\\", listener, {
        capture: true,
        passive: true,
      });
      listener();
    }
  });

  return (
    <div>
      <picture ref={pictureRef}>
        <Show when={!useLazyLoading() || load()}>
          <img
            class={
              \\"builder-image\\" +
              (props._class ? \\" \\" + props._class : \\"\\") +
              \\" \\" +
              css({
                opacity: \\"1\\",
                transition: \\"opacity 0.2s ease-in-out\\",
                objectFit: \\"cover\\",
                objectPosition: \\"center\\",
              })
            }
            alt={props.altText}
            aria-role={props.altText ? \\"presentation\\" : undefined}
            src={props.image}
            onLoad={(event) => setLoaded()}
            srcset={props.srcset}
            sizes={props.sizes}
          />
        </Show>
        <source srcset={props.srcset} />
      </picture>
      {props.children}
    </div>
  );
}

export default Image;
"
`;

exports[`Solid > jsx > Typescript Test > Image 2`] = `
"import { Show, onMount, createSignal } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";

function Image(props) {
  const [scrollListener, setScrollListener] = createSignal(null);

  const [imageLoaded, setImageLoaded] = createSignal(false);

  const [load, setLoad] = createSignal(false);

  function setLoaded() {
    setImageLoaded(true);
  }

  function useLazyLoading() {
    // TODO: Add more checks here, like testing for real web browsers
    return !!props.lazy && isBrowser();
  }

  function isBrowser() {
    return (
      typeof window !== \\"undefined\\" && window.navigator.product != \\"ReactNative\\"
    );
  }

  let pictureRef;

  onMount(() => {
    if (useLazyLoading()) {
      // throttled scroll capture listener
      const listener = () => {
        if (pictureRef) {
          const rect = pictureRef.getBoundingClientRect();
          const buffer = window.innerHeight / 2;

          if (rect.top < window.innerHeight + buffer) {
            setLoad(true);
            setScrollListener(null);
            window.removeEventListener(\\"scroll\\", listener);
          }
        }
      };

      setScrollListener(listener);
      window.addEventListener(\\"scroll\\", listener, {
        capture: true,
        passive: true,
      });
      listener();
    }
  });

  return (
    <>
      <div>
        <picture ref={pictureRef}>
          <Show when={!useLazyLoading() || load()}>
            <img
              class={
                \\"builder-image\\" +
                (props._class ? \\" \\" + props._class : \\"\\") +
                \\" img-066280ea\\"
              }
              alt={props.altText}
              aria-role={props.altText ? \\"presentation\\" : undefined}
              src={props.image}
              onLoad={(event) => setLoaded()}
              srcset={props.srcset}
              sizes={props.sizes}
            />
          </Show>
          <source srcset={props.srcset} />
        </picture>
        {props.children}
      </div>
      <style jsx>{\`
        .img-066280ea {
          opacity: 1;
          transition: opacity 0.2s ease-in-out;
          object-fit: cover;
          object-position: center;
        }
      \`}</style>
    </>
  );
}

export default Image;
"
`;

exports[`Solid > jsx > Typescript Test > Image State 1`] = `
"import { For, createSignal } from \\"solid-js\\";

function ImgStateComponent(props) {
  const [canShow, setCanShow] = createSignal(true);

  const [images, setImages] = createSignal([\\"http://example.com/qwik.png\\"]);

  return (
    <div>
      <For each={images()}>
        {(item, _index) => {
          const itemIndex = _index();
          return (
            <>
              <img class=\\"custom-class\\" src={item} key={itemIndex} />
            </>
          );
        }}
      </For>
    </div>
  );
}

export default ImgStateComponent;
"
`;

exports[`Solid > jsx > Typescript Test > Image State 2`] = `
"import { For, createSignal } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";

function ImgStateComponent(props) {
  const [canShow, setCanShow] = createSignal(true);

  const [images, setImages] = createSignal([\\"http://example.com/qwik.png\\"]);

  return (
    <>
      <div>
        <For each={images()}>
          {(item, _index) => {
            const itemIndex = _index();
            return (
              <>
                <img class=\\"custom-class\\" src={item} key={itemIndex} />
              </>
            );
          }}
        </For>
      </div>
    </>
  );
}

export default ImgStateComponent;
"
`;

exports[`Solid > jsx > Typescript Test > Img 1`] = `
"import { Builder } from \\"@builder.io/sdk\\";

function ImgComponent(props) {
  return (
    <img
      style={{
        \\"object-fit\\": props.backgroundSize || \\"cover\\",
        \\"object-position\\": props.backgroundPosition || \\"center\\",
      }}
      {...props.attributes}
      key={(Builder.isEditing && props.imgSrc) || \\"default-key\\"}
      alt={props.altText}
      src={props.imgSrc}
    />
  );
}

export default ImgComponent;
"
`;

exports[`Solid > jsx > Typescript Test > Img 2`] = `
"import { css } from \\"solid-styled-components\\";

import { Builder } from \\"@builder.io/sdk\\";

function ImgComponent(props) {
  return (
    <>
      <img
        style={{
          \\"object-fit\\": props.backgroundSize || \\"cover\\",
          \\"object-position\\": props.backgroundPosition || \\"center\\",
        }}
        {...props.attributes}
        key={(Builder.isEditing && props.imgSrc) || \\"default-key\\"}
        alt={props.altText}
        src={props.imgSrc}
      />
    </>
  );
}

export default ImgComponent;
"
`;

exports[`Solid > jsx > Typescript Test > Input 1`] = `
"import { Builder } from \\"@builder.io/sdk\\";

function FormInputComponent(props) {
  return (
    <input
      {...props.attributes}
      key={
        Builder.isEditing && props.defaultValue
          ? props.defaultValue
          : \\"default-key\\"
      }
      placeholder={props.placeholder}
      type={props.type}
      name={props.name}
      value={props.value}
      defaultValue={props.defaultValue}
      required={props.required}
    />
  );
}

export default FormInputComponent;
"
`;

exports[`Solid > jsx > Typescript Test > Input 2`] = `
"import { css } from \\"solid-styled-components\\";

import { Builder } from \\"@builder.io/sdk\\";

function FormInputComponent(props) {
  return (
    <>
      <input
        {...props.attributes}
        key={
          Builder.isEditing && props.defaultValue
            ? props.defaultValue
            : \\"default-key\\"
        }
        placeholder={props.placeholder}
        type={props.type}
        name={props.name}
        value={props.value}
        defaultValue={props.defaultValue}
        required={props.required}
      />
    </>
  );
}

export default FormInputComponent;
"
`;

exports[`Solid > jsx > Typescript Test > RawText 1`] = `
"function RawText(props) {
  return (
    <span
      class={props.attributes?.class || props.attributes?.className}
      innerHTML={props.text || \\"\\"}
    ></span>
  );
}

export default RawText;
"
`;

exports[`Solid > jsx > Typescript Test > RawText 2`] = `
"import { css } from \\"solid-styled-components\\";

function RawText(props) {
  return (
    <>
      <span
        class={props.attributes?.class || props.attributes?.className}
        innerHTML={props.text || \\"\\"}
      ></span>
    </>
  );
}

export default RawText;
"
`;

exports[`Solid > jsx > Typescript Test > Section 1`] = `
"function SectionComponent(props) {
  return (
    <section
      {...props.attributes}
      style={
        props.maxWidth && typeof props.maxWidth === \\"number\\"
          ? {
              \\"max-width\\": props.maxWidth,
            }
          : undefined
      }
    >
      {props.children}
    </section>
  );
}

export default SectionComponent;
"
`;

exports[`Solid > jsx > Typescript Test > Section 2`] = `
"import { Show, For, createSignal } from \\"solid-js\\";

function SectionStateComponent(props) {
  const [max, setMax] = createSignal(42);

  const [items, setItems] = createSignal([42]);

  return (
    <Show when={max()}>
      <For each={items()}>
        {(item, _index) => {
          const index = _index();
          return (
            <section
              {...props.attributes}
              style={{
                \\"max-width\\": item + max(),
              }}
            >
              {props.children}
            </section>
          );
        }}
      </For>
    </Show>
  );
}

export default SectionStateComponent;
"
`;

exports[`Solid > jsx > Typescript Test > Section 3`] = `
"import { css } from \\"solid-styled-components\\";

function SectionComponent(props) {
  return (
    <>
      <section
        {...props.attributes}
        style={
          props.maxWidth && typeof props.maxWidth === \\"number\\"
            ? {
                \\"max-width\\": props.maxWidth,
              }
            : undefined
        }
      >
        {props.children}
      </section>
    </>
  );
}

export default SectionComponent;
"
`;

exports[`Solid > jsx > Typescript Test > Section 4`] = `
"import { Show, For, createSignal } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";

function SectionStateComponent(props) {
  const [max, setMax] = createSignal(42);

  const [items, setItems] = createSignal([42]);

  return (
    <>
      <Show when={max()}>
        <For each={items()}>
          {(item, _index) => {
            const index = _index();
            return (
              <section
                {...props.attributes}
                style={{
                  \\"max-width\\": item + max(),
                }}
              >
                {props.children}
              </section>
            );
          }}
        </For>
      </Show>
    </>
  );
}

export default SectionStateComponent;
"
`;

exports[`Solid > jsx > Typescript Test > Select 1`] = `
"import { For } from \\"solid-js\\";

import { Builder } from \\"@builder.io/sdk\\";

function SelectComponent(props) {
  return (
    <select
      {...props.attributes}
      value={props.value}
      key={
        Builder.isEditing && props.defaultValue
          ? props.defaultValue
          : \\"default-key\\"
      }
      defaultValue={props.defaultValue}
      name={props.name}
    >
      <For each={props.options}>
        {(option, _index) => {
          const index = _index();
          return (
            <option value={option.value} data-index={index}>
              {option.name || option.value}
            </option>
          );
        }}
      </For>
    </select>
  );
}

export default SelectComponent;
"
`;

exports[`Solid > jsx > Typescript Test > Select 2`] = `
"import { For } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";

import { Builder } from \\"@builder.io/sdk\\";

function SelectComponent(props) {
  return (
    <>
      <select
        {...props.attributes}
        value={props.value}
        key={
          Builder.isEditing && props.defaultValue
            ? props.defaultValue
            : \\"default-key\\"
        }
        defaultValue={props.defaultValue}
        name={props.name}
      >
        <For each={props.options}>
          {(option, _index) => {
            const index = _index();
            return (
              <option value={option.value} data-index={index}>
                {option.name || option.value}
              </option>
            );
          }}
        </For>
      </select>
    </>
  );
}

export default SelectComponent;
"
`;

exports[`Solid > jsx > Typescript Test > SlotHtml 1`] = `
"import ContentSlotCode from \\"./content-slot-jsx.raw\\";

function SlotCode(props) {
  return (
    <div>
      <ContentSlotCode>
        <Slot testing={<div>Hello</div>}></Slot>
      </ContentSlotCode>
    </div>
  );
}

export default SlotCode;
"
`;

exports[`Solid > jsx > Typescript Test > SlotHtml 2`] = `
"import { css } from \\"solid-styled-components\\";

import ContentSlotCode from \\"./content-slot-jsx.raw\\";

function SlotCode(props) {
  return (
    <>
      <div>
        <ContentSlotCode>
          <Slot testing={<div>Hello</div>}></Slot>
        </ContentSlotCode>
      </div>
    </>
  );
}

export default SlotCode;
"
`;

exports[`Solid > jsx > Typescript Test > SlotJsx 1`] = `
"import ContentSlotCode from \\"./content-slot-jsx.raw\\";

function SlotCode(props) {
  return (
    <div>
      <ContentSlotCode slotTesting={<div>Hello</div>}></ContentSlotCode>
    </div>
  );
}

export default SlotCode;
"
`;

exports[`Solid > jsx > Typescript Test > SlotJsx 2`] = `
"import { css } from \\"solid-styled-components\\";

import ContentSlotCode from \\"./content-slot-jsx.raw\\";

function SlotCode(props) {
  return (
    <>
      <div>
        <ContentSlotCode slotTesting={<div>Hello</div>}></ContentSlotCode>
      </div>
    </>
  );
}

export default SlotCode;
"
`;

exports[`Solid > jsx > Typescript Test > Stamped.io 1`] = `
"import { Show, For, onMount, createSignal } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";

import { kebabCase } from \\"lodash\\";
import { snakeCase } from \\"lodash\\";

function SmileReviews(props) {
  const [reviews, setReviews] = createSignal([]);

  const [name, setName] = createSignal(\\"test\\");

  const [showReviewPrompt, setShowReviewPrompt] = createSignal(false);

  function kebabCaseValue() {
    return kebabCase(\\"testThat\\");
  }

  function snakeCaseValue() {
    return snakeCase(\\"testThis\\");
  }

  onMount(() => {
    fetch(
      \`https://stamped.io/api/widget/reviews?storeUrl=builder-io.myshopify.com&apiKey=\${
        props.apiKey || \\"pubkey-8bbDq7W6w4sB3OWeM1HUy2s47702hM\\"
      }&productId=\${props.productId || \\"2410511106127\\"}\`
    )
      .then((res) => res.json())
      .then((data) => {
        setReviews(data.data);
      });
  });

  return (
    <div data-user={name()}>
      <button onClick={(event) => setShowReviewPrompt(true)}>
        Write a review
      </button>
      <Show when={showReviewPrompt() || \\"asdf\\"}>
        <input placeholder=\\"Email\\" />
        <input
          class={css({
            display: \\"block\\",
          })}
          placeholder=\\"Title\\"
        />
        <textarea
          class={css({
            display: \\"block\\",
          })}
          placeholder=\\"How was your experience?\\"
        ></textarea>
        <button
          class={css({
            display: \\"block\\",
          })}
          onClick={(event) => {
            event.preventDefault();
            setShowReviewPrompt(false);
          }}
        >
          Submit
        </button>
      </Show>
      <For each={reviews()}>
        {(review, _index) => {
          const index = _index();
          return (
            <div
              class={css({
                margin: \\"10px\\",
                padding: \\"10px\\",
                background: \\"white\\",
                display: \\"flex\\",
                borderRadius: \\"5px\\",
                boxShadow: \\"0 2px 5px rgba(0, 0, 0, 0.1)\\",
              })}
              key={review.id}
            >
              <img
                class={css({
                  height: \\"30px\\",
                  width: \\"30px\\",
                  marginRight: \\"10px\\",
                })}
                src={review.avatar}
              />
              <div class={showReviewPrompt() ? \\"bg-primary\\" : \\"bg-secondary\\"}>
                <div>
                  N:
                  {index}
                </div>
                <div>{review.author}</div>
                <div>{review.reviewMessage}</div>
              </div>
            </div>
          );
        }}
      </For>
    </div>
  );
}

export default SmileReviews;
"
`;

exports[`Solid > jsx > Typescript Test > Stamped.io 2`] = `
"import { Show, For, onMount, createSignal } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";

import { kebabCase } from \\"lodash\\";
import { snakeCase } from \\"lodash\\";

function SmileReviews(props) {
  const [reviews, setReviews] = createSignal([]);

  const [name, setName] = createSignal(\\"test\\");

  const [showReviewPrompt, setShowReviewPrompt] = createSignal(false);

  function kebabCaseValue() {
    return kebabCase(\\"testThat\\");
  }

  function snakeCaseValue() {
    return snakeCase(\\"testThis\\");
  }

  onMount(() => {
    fetch(
      \`https://stamped.io/api/widget/reviews?storeUrl=builder-io.myshopify.com&apiKey=\${
        props.apiKey || \\"pubkey-8bbDq7W6w4sB3OWeM1HUy2s47702hM\\"
      }&productId=\${props.productId || \\"2410511106127\\"}\`
    )
      .then((res) => res.json())
      .then((data) => {
        setReviews(data.data);
      });
  });

  return (
    <>
      <div data-user={name()}>
        <button onClick={(event) => setShowReviewPrompt(true)}>
          Write a review
        </button>
        <Show when={showReviewPrompt() || \\"asdf\\"}>
          <input placeholder=\\"Email\\" />
          <input class=\\"input-ce629c50\\" placeholder=\\"Title\\" />
          <textarea
            class=\\"textarea-ce629c50\\"
            placeholder=\\"How was your experience?\\"
          ></textarea>
          <button
            class=\\"button-ce629c50\\"
            onClick={(event) => {
              event.preventDefault();
              setShowReviewPrompt(false);
            }}
          >
            Submit
          </button>
        </Show>
        <For each={reviews()}>
          {(review, _index) => {
            const index = _index();
            return (
              <div class=\\"div-ce629c50\\" key={review.id}>
                <img class=\\"img-ce629c50\\" src={review.avatar} />
                <div class={showReviewPrompt() ? \\"bg-primary\\" : \\"bg-secondary\\"}>
                  <div>
                    N:
                    {index}
                  </div>
                  <div>{review.author}</div>
                  <div>{review.reviewMessage}</div>
                </div>
              </div>
            );
          }}
        </For>
      </div>
      <style jsx>{\`
        .input-ce629c50 {
          display: block;
        }
        .textarea-ce629c50 {
          display: block;
        }
        .button-ce629c50 {
          display: block;
        }
        .div-ce629c50 {
          margin: 10px;
          padding: 10px;
          background: white;
          display: flex;
          border-radius: 5px;
          box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
        }
        .img-ce629c50 {
          height: 30px;
          width: 30px;
          margin-right: 10px;
        }
      \`}</style>
    </>
  );
}

export default SmileReviews;
"
`;

exports[`Solid > jsx > Typescript Test > Submit 1`] = `
"function SubmitButton(props) {
  return (
    <button type=\\"submit\\" {...props.attributes}>
      {props.text}
    </button>
  );
}

export default SubmitButton;
"
`;

exports[`Solid > jsx > Typescript Test > Submit 2`] = `
"import { css } from \\"solid-styled-components\\";

function SubmitButton(props) {
  return (
    <>
      <button type=\\"submit\\" {...props.attributes}>
        {props.text}
      </button>
    </>
  );
}

export default SubmitButton;
"
`;

exports[`Solid > jsx > Typescript Test > Text 1`] = `
"import { createSignal } from \\"solid-js\\";

import { Builder } from \\"@builder.io/sdk\\";

function Text(props) {
  const [name, setName] = createSignal(\\"Decadef20\\");

  return (
    <div
      contentEditable={allowEditingText || undefined}
      data-name={{
        test: name() || \\"any name\\",
      }}
      innerHTML={
        props.text ||
        props.content ||
        name() ||
        '<p class=\\"text-lg\\">my name</p>'
      }
    ></div>
  );
}

export default Text;
"
`;

exports[`Solid > jsx > Typescript Test > Text 2`] = `
"import { createSignal } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";

import { Builder } from \\"@builder.io/sdk\\";

function Text(props) {
  const [name, setName] = createSignal(\\"Decadef20\\");

  return (
    <>
      <div
        contentEditable={allowEditingText || undefined}
        data-name={{
          test: name() || \\"any name\\",
        }}
        innerHTML={
          props.text ||
          props.content ||
          name() ||
          '<p class=\\"text-lg\\">my name</p>'
        }
      ></div>
    </>
  );
}

export default Text;
"
`;

exports[`Solid > jsx > Typescript Test > Textarea 1`] = `
"function Textarea(props) {
  return (
    <textarea
      {...props.attributes}
      placeholder={props.placeholder}
      name={props.name}
      value={props.value}
      defaultValue={props.defaultValue}
    ></textarea>
  );
}

export default Textarea;
"
`;

exports[`Solid > jsx > Typescript Test > Textarea 2`] = `
"import { css } from \\"solid-styled-components\\";

function Textarea(props) {
  return (
    <>
      <textarea
        {...props.attributes}
        placeholder={props.placeholder}
        name={props.name}
        value={props.value}
        defaultValue={props.defaultValue}
      ></textarea>
    </>
  );
}

export default Textarea;
"
`;

exports[`Solid > jsx > Typescript Test > Video 1`] = `
"function Video(props) {
  return (
    <video
      preload=\\"none\\"
      {...props.attributes}
      style={{
        width: \\"100%\\",
        height: \\"100%\\",
        ...props.attributes?.style,
        \\"object-fit\\": props.fit,
        \\"object-position\\": props.position,
        // Hack to get object fit to work as expected and
        // not have the video overflow
        \\"border-radius\\": 1,
      }}
      key={props.video || \\"no-src\\"}
      poster={props.posterImage}
      autoplay={props.autoPlay}
      muted={props.muted}
      controls={props.controls}
      loop={props.loop}
    ></video>
  );
}

export default Video;
"
`;

exports[`Solid > jsx > Typescript Test > Video 2`] = `
"import { css } from \\"solid-styled-components\\";

function Video(props) {
  return (
    <>
      <video
        preload=\\"none\\"
        {...props.attributes}
        style={{
          width: \\"100%\\",
          height: \\"100%\\",
          ...props.attributes?.style,
          \\"object-fit\\": props.fit,
          \\"object-position\\": props.position,
          // Hack to get object fit to work as expected and
          // not have the video overflow
          \\"border-radius\\": 1,
        }}
        key={props.video || \\"no-src\\"}
        poster={props.posterImage}
        autoplay={props.autoPlay}
        muted={props.muted}
        controls={props.controls}
        loop={props.loop}
      ></video>
    </>
  );
}

export default Video;
"
`;

exports[`Solid > jsx > Typescript Test > arrowFunctionInUseStore 1`] = `
"import { createSignal } from \\"solid-js\\";

function MyComponent(props) {
  const [name, setName] = createSignal(\\"steve\\");

  function setName(value) {
    setName(value);
  }

  function updateNameWithArrowFn(value) {
    setName(value);
  }

  return (
    <div>
      Hello
      {name()}
    </div>
  );
}

export default MyComponent;
"
`;

exports[`Solid > jsx > Typescript Test > arrowFunctionInUseStore 2`] = `
"import { createSignal } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";

function MyComponent(props) {
  const [name, setName] = createSignal(\\"steve\\");

  function setName(value) {
    setName(value);
  }

  function updateNameWithArrowFn(value) {
    setName(value);
  }

  return (
    <>
      <div>
        Hello
        {name()}
      </div>
    </>
  );
}

export default MyComponent;
"
`;

exports[`Solid > jsx > Typescript Test > basicOnUpdateReturn 1`] = `
"import { on, createEffect, createSignal } from \\"solid-js\\";

function MyBasicOnUpdateReturnComponent(props) {
  const [name, setName] = createSignal(\\"PatrickJS\\");

  function onUpdateFn_0() {
    const controller = new AbortController();
    const signal = controller.signal;
    fetch(\\"https://patrickjs.com/api/resource.json\\", {
      signal,
    })
      .then((response) => response.json())
      .then((data) => {
        setName(data.name);
      });
    return () => {
      if (!signal.aborted) {
        controller.abort();
      }
    };
  }
  createEffect(on(() => [name()], onUpdateFn_0));

  return (
    <div>
      Hello!
      {name()}
    </div>
  );
}

export default MyBasicOnUpdateReturnComponent;
"
`;

exports[`Solid > jsx > Typescript Test > basicOnUpdateReturn 2`] = `
"import { on, createEffect, createSignal } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";

function MyBasicOnUpdateReturnComponent(props) {
  const [name, setName] = createSignal(\\"PatrickJS\\");

  function onUpdateFn_0() {
    const controller = new AbortController();
    const signal = controller.signal;
    fetch(\\"https://patrickjs.com/api/resource.json\\", {
      signal,
    })
      .then((response) => response.json())
      .then((data) => {
        setName(data.name);
      });
    return () => {
      if (!signal.aborted) {
        controller.abort();
      }
    };
  }
  createEffect(on(() => [name()], onUpdateFn_0));

  return (
    <>
      <div>
        Hello!
        {name()}
      </div>
    </>
  );
}

export default MyBasicOnUpdateReturnComponent;
"
`;

exports[`Solid > jsx > Typescript Test > class + ClassName + css 1`] = `
"import { css } from \\"solid-styled-components\\";

function MyBasicComponent(props) {
  return (
    <div
      class={
        \\"test2 test \\" +
        css({
          padding: \\"10px\\",
        })
      }
    >
      Hello! I can run in React, Vue, Solid, or Liquid!
    </div>
  );
}

export default MyBasicComponent;
"
`;

exports[`Solid > jsx > Typescript Test > class + ClassName + css 2`] = `
"import { css } from \\"solid-styled-components\\";

function MyBasicComponent(props) {
  return (
    <>
      <div class=\\"test2 test div-1ddae416\\">
        Hello! I can run in React, Vue, Solid, or Liquid!
      </div>
      <style jsx>{\`
        .div-1ddae416 {
          padding: 10px;
        }
      \`}</style>
    </>
  );
}

export default MyBasicComponent;
"
`;

exports[`Solid > jsx > Typescript Test > class + css 1`] = `
"import { css } from \\"solid-styled-components\\";

function MyBasicComponent(props) {
  return (
    <div
      class={
        \\"test \\" +
        css({
          padding: \\"10px\\",
        })
      }
    >
      Hello! I can run in React, Vue, Solid, or Liquid!
    </div>
  );
}

export default MyBasicComponent;
"
`;

exports[`Solid > jsx > Typescript Test > class + css 2`] = `
"import { css } from \\"solid-styled-components\\";

function MyBasicComponent(props) {
  return (
    <>
      <div class=\\"test div-50be5eac\\">
        Hello! I can run in React, Vue, Solid, or Liquid!
      </div>
      <style jsx>{\`
        .div-50be5eac {
          padding: 10px;
        }
      \`}</style>
    </>
  );
}

export default MyBasicComponent;
"
`;

exports[`Solid > jsx > Typescript Test > className + css 1`] = `
"import { css } from \\"solid-styled-components\\";

function MyBasicComponent(props) {
  return (
    <div
      class={
        \\"test \\" +
        css({
          padding: \\"10px\\",
        })
      }
    >
      Hello! I can run in React, Vue, Solid, or Liquid!
    </div>
  );
}

export default MyBasicComponent;
"
`;

exports[`Solid > jsx > Typescript Test > className + css 2`] = `
"import { css } from \\"solid-styled-components\\";

function MyBasicComponent(props) {
  return (
    <>
      <div class=\\"test div-50be5eac\\">
        Hello! I can run in React, Vue, Solid, or Liquid!
      </div>
      <style jsx>{\`
        .div-50be5eac {
          padding: 10px;
        }
      \`}</style>
    </>
  );
}

export default MyBasicComponent;
"
`;

exports[`Solid > jsx > Typescript Test > className 1`] = `
"import { createSignal } from \\"solid-js\\";

function ClassNameCode(props) {
  const [bindings, setBindings] = createSignal(\\"a binding\\");

  return (
    <div>
      <div class=\\"no binding\\">Without Binding</div>
      <div class={bindings()}>With binding</div>
    </div>
  );
}

export default ClassNameCode;
"
`;

exports[`Solid > jsx > Typescript Test > className 2`] = `
"import { createSignal } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";

function ClassNameCode(props) {
  const [bindings, setBindings] = createSignal(\\"a binding\\");

  return (
    <>
      <div>
        <div class=\\"no binding\\">Without Binding</div>
        <div class={bindings()}>With binding</div>
      </div>
    </>
  );
}

export default ClassNameCode;
"
`;

exports[`Solid > jsx > Typescript Test > classState 1`] = `
"import { createSignal } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";

function MyBasicComponent(props) {
  const [classState, setClassState] = createSignal(\\"testClassName\\");

  const [styleState, setStyleState] = createSignal({
    color: \\"red\\",
  });

  return (
    <div
      class={
        classState() +
        \\" \\" +
        css({
          padding: \\"10px\\",
        })
      }
      style={styleState()}
    >
      Hello! I can run in React, Vue, Solid, or Liquid!
    </div>
  );
}

export default MyBasicComponent;
"
`;

exports[`Solid > jsx > Typescript Test > classState 2`] = `
"import { createSignal } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";

function MyBasicComponent(props) {
  const [classState, setClassState] = createSignal(\\"testClassName\\");

  const [styleState, setStyleState] = createSignal({
    color: \\"red\\",
  });

  return (
    <>
      <div class={classState() + \\" div-a17878b4\\"} style={styleState()}>
        Hello! I can run in React, Vue, Solid, or Liquid!
      </div>
      <style jsx>{\`
        .div-a17878b4 {
          padding: 10px;
        }
      \`}</style>
    </>
  );
}

export default MyBasicComponent;
"
`;

exports[`Solid > jsx > Typescript Test > componentWithContext 1`] = `
"import { useContext } from \\"solid-js\\";

import Context1 from \\"@dummy/1\\";
import Context2 from \\"@dummy/2\\";

function ComponentWithContext(props) {
  const foo = useContext(Context1);

  return (
    <Context2.Provider
      value={{
        bar: \\"baz\\",
      }}
    >
      <Context1.Provider
        value={{
          foo: \\"bar\\",

          content() {
            return props.content;
          },
        }}
      >
        <>
          <>{foo.value}</>
        </>
      </Context1.Provider>
    </Context2.Provider>
  );
}

export default ComponentWithContext;
"
`;

exports[`Solid > jsx > Typescript Test > componentWithContext 2`] = `
"import { useContext } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";

import Context1 from \\"@dummy/1\\";
import Context2 from \\"@dummy/2\\";

function ComponentWithContext(props) {
  const foo = useContext(Context1);

  return (
    <>
      <Context2.Provider
        value={{
          bar: \\"baz\\",
        }}
      >
        <Context1.Provider
          value={{
            foo: \\"bar\\",

            content() {
              return props.content;
            },
          }}
        >
          <>
            <>{foo.value}</>
          </>
        </Context1.Provider>
      </Context2.Provider>
    </>
  );
}

export default ComponentWithContext;
"
`;

exports[`Solid > jsx > Typescript Test > contentState 1`] = `
"import BuilderContext from \\"@dummy/context.jsx\\";

function RenderContent(props) {
  return (
    <BuilderContext.Provider
      value={{
        content: props.content,
        registeredComponents: props.customComponents,
      }}
    >
      <div>setting context</div>
    </BuilderContext.Provider>
  );
}

export default RenderContent;
"
`;

exports[`Solid > jsx > Typescript Test > contentState 2`] = `
"import { css } from \\"solid-styled-components\\";

import BuilderContext from \\"@dummy/context.jsx\\";

function RenderContent(props) {
  return (
    <>
      <BuilderContext.Provider
        value={{
          content: props.content,
          registeredComponents: props.customComponents,
        }}
      >
        <div>setting context</div>
      </BuilderContext.Provider>
    </>
  );
}

export default RenderContent;
"
`;

exports[`Solid > jsx > Typescript Test > defaultProps 1`] = `
"import { Show } from \\"solid-js\\";

function Button(props) {
  return (
    <div>
      <Show when={props.link}>
        <a
          {...props.attributes}
          href={props.link}
          target={props.openLinkInNewTab ? \\"_blank\\" : undefined}
        >
          {props.text}
        </a>
      </Show>
      <Show when={!props.link}>
        <button type=\\"button\\" {...props.attributes}>
          {props.text}
        </button>
      </Show>
    </div>
  );
}

export default Button;
"
`;

exports[`Solid > jsx > Typescript Test > defaultProps 2`] = `
"import { Show } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";

function Button(props) {
  return (
    <>
      <div>
        <Show when={props.link}>
          <a
            {...props.attributes}
            href={props.link}
            target={props.openLinkInNewTab ? \\"_blank\\" : undefined}
          >
            {props.text}
          </a>
        </Show>
        <Show when={!props.link}>
          <button type=\\"button\\" {...props.attributes}>
            {props.text}
          </button>
        </Show>
      </div>
    </>
  );
}

export default Button;
"
`;

exports[`Solid > jsx > Typescript Test > defaultPropsOutsideComponent 1`] = `
"import { Show } from \\"solid-js\\";

function Button(props) {
  return (
    <div>
      <Show when={props.link}>
        <a
          {...props.attributes}
          href={props.link}
          target={props.openLinkInNewTab ? \\"_blank\\" : undefined}
        >
          {props.text}
        </a>
      </Show>
      <Show when={!props.link}>
        <button type=\\"button\\" {...props.attributes}>
          {props.text}
        </button>
      </Show>
    </div>
  );
}

export default Button;
"
`;

exports[`Solid > jsx > Typescript Test > defaultPropsOutsideComponent 2`] = `
"import { Show } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";

function Button(props) {
  return (
    <>
      <div>
        <Show when={props.link}>
          <a
            {...props.attributes}
            href={props.link}
            target={props.openLinkInNewTab ? \\"_blank\\" : undefined}
          >
            {props.text}
          </a>
        </Show>
        <Show when={!props.link}>
          <button type=\\"button\\" {...props.attributes}>
            {props.text}
          </button>
        </Show>
      </div>
    </>
  );
}

export default Button;
"
`;

exports[`Solid > jsx > Typescript Test > defaultValsWithTypes 1`] = `
"const DEFAULT_VALUES: Props = {
  name: \\"Sami\\",
};

function ComponentWithTypes(props) {
  return (
    <div>
      Hello
      {props.name || DEFAULT_VALUES.name}
    </div>
  );
}

export default ComponentWithTypes;
"
`;

exports[`Solid > jsx > Typescript Test > defaultValsWithTypes 2`] = `
"import { css } from \\"solid-styled-components\\";

const DEFAULT_VALUES: Props = {
  name: \\"Sami\\",
};

function ComponentWithTypes(props) {
  return (
    <>
      <div>
        Hello
        {props.name || DEFAULT_VALUES.name}
      </div>
    </>
  );
}

export default ComponentWithTypes;
"
`;

exports[`Solid > jsx > Typescript Test > expressionState 1`] = `
"import { createSignal } from \\"solid-js\\";

function MyComponent(props) {
  const [refToUse, setRefToUse] = createSignal(
    !(props.componentRef instanceof Function) ? props.componentRef : null
  );

  return <div>{refToUse()}</div>;
}

export default MyComponent;
"
`;

exports[`Solid > jsx > Typescript Test > expressionState 2`] = `
"import { createSignal } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";

function MyComponent(props) {
  const [refToUse, setRefToUse] = createSignal(
    !(props.componentRef instanceof Function) ? props.componentRef : null
  );

  return (
    <>
      <div>{refToUse()}</div>
    </>
  );
}

export default MyComponent;
"
`;

exports[`Solid > jsx > Typescript Test > import types 1`] = `
"import { createSignal } from \\"solid-js\\";

import RenderBlock from \\"./builder-render-block.raw\\";

function RenderContent(props) {
  function getRenderContentProps(block, index) {
    return {
      block: block,
      index: index,
    };
  }

  return (
    <RenderBlock
      {...getRenderContentProps(props.renderContentProps.block, 0)}
    ></RenderBlock>
  );
}

export default RenderContent;
"
`;

exports[`Solid > jsx > Typescript Test > import types 2`] = `
"import { createSignal } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";

import RenderBlock from \\"./builder-render-block.raw\\";

function RenderContent(props) {
  function getRenderContentProps(block, index) {
    return {
      block: block,
      index: index,
    };
  }

  return (
    <>
      <RenderBlock
        {...getRenderContentProps(props.renderContentProps.block, 0)}
      ></RenderBlock>
    </>
  );
}

export default RenderContent;
"
`;

exports[`Solid > jsx > Typescript Test > multipleOnUpdate 1`] = `
"import { on, createEffect } from \\"solid-js\\";

function MultipleOnUpdate(props) {
  return <div></div>;
}

export default MultipleOnUpdate;
"
`;

exports[`Solid > jsx > Typescript Test > multipleOnUpdate 2`] = `
"import { on, createEffect } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";

function MultipleOnUpdate(props) {
  return (
    <>
      <div></div>
    </>
  );
}

export default MultipleOnUpdate;
"
`;

exports[`Solid > jsx > Typescript Test > multipleOnUpdateWithDeps 1`] = `
"import { on, createEffect, createSignal } from \\"solid-js\\";

function MultipleOnUpdateWithDeps(props) {
  const [a, setA] = createSignal(\\"a\\");

  const [b, setB] = createSignal(\\"b\\");

  const [c, setC] = createSignal(\\"c\\");

  const [d, setD] = createSignal(\\"d\\");

  function onUpdateFn_0() {
    console.log(\\"Runs when a or b changes\\", a(), b());

    if (a() === \\"a\\") {
      setA(\\"b\\");
    }
  }
  createEffect(on(() => [a(), b()], onUpdateFn_0));

  function onUpdateFn_1() {
    console.log(\\"Runs when c or d changes\\", c(), d());

    if (a() === \\"a\\") {
      setA(\\"b\\");
    }
  }
  createEffect(on(() => [c(), d()], onUpdateFn_1));

  return <div></div>;
}

export default MultipleOnUpdateWithDeps;
"
`;

exports[`Solid > jsx > Typescript Test > multipleOnUpdateWithDeps 2`] = `
"import { on, createEffect, createSignal } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";

function MultipleOnUpdateWithDeps(props) {
  const [a, setA] = createSignal(\\"a\\");

  const [b, setB] = createSignal(\\"b\\");

  const [c, setC] = createSignal(\\"c\\");

  const [d, setD] = createSignal(\\"d\\");

  function onUpdateFn_0() {
    console.log(\\"Runs when a or b changes\\", a(), b());

    if (a() === \\"a\\") {
      setA(\\"b\\");
    }
  }
  createEffect(on(() => [a(), b()], onUpdateFn_0));

  function onUpdateFn_1() {
    console.log(\\"Runs when c or d changes\\", c(), d());

    if (a() === \\"a\\") {
      setA(\\"b\\");
    }
  }
  createEffect(on(() => [c(), d()], onUpdateFn_1));

  return (
    <>
      <div></div>
    </>
  );
}

export default MultipleOnUpdateWithDeps;
"
`;

exports[`Solid > jsx > Typescript Test > multipleSpreads 1`] = `
"import { createSignal } from \\"solid-js\\";

function MyBasicComponent(props) {
  const [attrs, setAttrs] = createSignal({
    hello: \\"world\\",
  });

  return <input {...attrs()} {...props} />;
}

export default MyBasicComponent;
"
`;

exports[`Solid > jsx > Typescript Test > multipleSpreads 2`] = `
"import { createSignal } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";

function MyBasicComponent(props) {
  const [attrs, setAttrs] = createSignal({
    hello: \\"world\\",
  });

  return (
    <>
      <input {...attrs()} {...props} />
    </>
  );
}

export default MyBasicComponent;
"
`;

exports[`Solid > jsx > Typescript Test > nestedShow 1`] = `
"import { Show } from \\"solid-js\\";

function NestedShow(props) {
  return (
    <Show fallback={<div>else-condition-A</div>} when={props.conditionA}>
      <Show fallback={<div>else-condition-B</div>} when={!props.conditionB}>
        <div>if condition A and condition B</div>
      </Show>
    </Show>
  );
}

export default NestedShow;
"
`;

exports[`Solid > jsx > Typescript Test > nestedShow 2`] = `
"import { Show } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";

function NestedShow(props) {
  return (
    <>
      <Show fallback={<div>else-condition-A</div>} when={props.conditionA}>
        <Show fallback={<div>else-condition-B</div>} when={!props.conditionB}>
          <div>if condition A and condition B</div>
        </Show>
      </Show>
    </>
  );
}

export default NestedShow;
"
`;

exports[`Solid > jsx > Typescript Test > nestedStyles 1`] = `
"import { css } from \\"solid-styled-components\\";

function NestedStyles(props) {
  return (
    <div
      class={css({
        display: \\"flex\\",
        foo: \\"var(--bar)\\",
        \\"@media (max-width: env(--mobile))\\": {
          display: \\"block\\",
        },
        \\"&:hover\\": {
          display: \\"flex\\",
        },
        \\".nested-selector\\": {
          display: \\"grid\\",
        },
      })}
    >
      Hello world
    </div>
  );
}

export default NestedStyles;
"
`;

exports[`Solid > jsx > Typescript Test > nestedStyles 2`] = `
"import { css } from \\"solid-styled-components\\";

function NestedStyles(props) {
  return (
    <>
      <div class=\\"div-5a4c7fde\\">Hello world</div>
      <style jsx>{\`
        .div-5a4c7fde {
          display: flex;
          foo: var(--bar);
        }
        @media (max-width: env(--mobile)) {
          .div-5a4c7fde {
            display: block;
          }
        }
        .div-5a4c7fde:hover {
          display: flex;
        }
        .div-5a4c7fde .nested-selector {
          display: grid;
        }
      \`}</style>
    </>
  );
}

export default NestedStyles;
"
`;

exports[`Solid > jsx > Typescript Test > onInit & onMount 1`] = `
"import { onMount } from \\"solid-js\\";

function OnInit(props) {
  onMount(() => {
    console.log(\\"onMount\\");
  });

  return <div></div>;
}

export default OnInit;
"
`;

exports[`Solid > jsx > Typescript Test > onInit & onMount 2`] = `
"import { onMount } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";

function OnInit(props) {
  onMount(() => {
    console.log(\\"onMount\\");
  });

  return (
    <>
      <div></div>
    </>
  );
}

export default OnInit;
"
`;

exports[`Solid > jsx > Typescript Test > onInit 1`] = `
"import { createSignal } from \\"solid-js\\";

export const defaultValues = {
  name: \\"PatrickJS\\",
};

function OnInit(props) {
  const [name, setName] = createSignal(\\"\\");

  return (
    <div>
      Default name defined by parent
      {name()}
    </div>
  );
}

export default OnInit;
"
`;

exports[`Solid > jsx > Typescript Test > onInit 2`] = `
"import { createSignal } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";

export const defaultValues = {
  name: \\"PatrickJS\\",
};

function OnInit(props) {
  const [name, setName] = createSignal(\\"\\");

  return (
    <>
      <div>
        Default name defined by parent
        {name()}
      </div>
    </>
  );
}

export default OnInit;
"
`;

exports[`Solid > jsx > Typescript Test > onMount 1`] = `
"import { onMount } from \\"solid-js\\";

function Comp(props) {
  onMount(() => {
    console.log(\\"Runs on mount\\");
  });

  return <div></div>;
}

export default Comp;
"
`;

exports[`Solid > jsx > Typescript Test > onMount 2`] = `
"import { onMount } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";

function Comp(props) {
  onMount(() => {
    console.log(\\"Runs on mount\\");
  });

  return (
    <>
      <div></div>
    </>
  );
}

export default Comp;
"
`;

exports[`Solid > jsx > Typescript Test > onUpdate 1`] = `
"import { on, createEffect } from \\"solid-js\\";

function OnUpdate(props) {
  return <div></div>;
}

export default OnUpdate;
"
`;

exports[`Solid > jsx > Typescript Test > onUpdate 2`] = `
"import { on, createEffect } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";

function OnUpdate(props) {
  return (
    <>
      <div></div>
    </>
  );
}

export default OnUpdate;
"
`;

exports[`Solid > jsx > Typescript Test > onUpdateWithDeps 1`] = `
"import { on, createEffect, createSignal } from \\"solid-js\\";

function OnUpdateWithDeps(props) {
  const [a, setA] = createSignal(\\"a\\");

  const [b, setB] = createSignal(\\"b\\");

  function onUpdateFn_0() {
    console.log(\\"Runs when a, b or size changes\\", a(), b(), props.size);
  }
  createEffect(on(() => [a(), b(), props.size], onUpdateFn_0));

  return <div></div>;
}

export default OnUpdateWithDeps;
"
`;

exports[`Solid > jsx > Typescript Test > onUpdateWithDeps 2`] = `
"import { on, createEffect, createSignal } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";

function OnUpdateWithDeps(props) {
  const [a, setA] = createSignal(\\"a\\");

  const [b, setB] = createSignal(\\"b\\");

  function onUpdateFn_0() {
    console.log(\\"Runs when a, b or size changes\\", a(), b(), props.size);
  }
  createEffect(on(() => [a(), b(), props.size], onUpdateFn_0));

  return (
    <>
      <div></div>
    </>
  );
}

export default OnUpdateWithDeps;
"
`;

exports[`Solid > jsx > Typescript Test > preserveExportOrLocalStatement 1`] = `
"const b = 3;
const foo = () => {};
export const a = 3;
export const bar = () => {};
export function run<T>(value: T) {}

function MyBasicComponent(props) {
  return <div></div>;
}

export default MyBasicComponent;
"
`;

exports[`Solid > jsx > Typescript Test > preserveExportOrLocalStatement 2`] = `
"import { css } from \\"solid-styled-components\\";

const b = 3;
const foo = () => {};
export const a = 3;
export const bar = () => {};
export function run<T>(value: T) {}

function MyBasicComponent(props) {
  return (
    <>
      <div></div>
    </>
  );
}

export default MyBasicComponent;
"
`;

exports[`Solid > jsx > Typescript Test > preserveTyping 1`] = `
"function MyBasicComponent(props) {
  return (
    <div>
      Hello! I can run in React, Vue, Solid, or Liquid!
      {props.name}
    </div>
  );
}

export default MyBasicComponent;
"
`;

exports[`Solid > jsx > Typescript Test > preserveTyping 2`] = `
"import { css } from \\"solid-styled-components\\";

function MyBasicComponent(props) {
  return (
    <>
      <div>
        Hello! I can run in React, Vue, Solid, or Liquid!
        {props.name}
      </div>
    </>
  );
}

export default MyBasicComponent;
"
`;

exports[`Solid > jsx > Typescript Test > propsDestructure 1`] = `
"import { createSignal } from \\"solid-js\\";

function MyBasicComponent(props) {
  const [name, setName] = createSignal(\\"Decadef20\\");

  return (
    <div>
      {props.children}
      {props.type}
      Hello! I can run in React, Vue, Solid, or Liquid!
    </div>
  );
}

export default MyBasicComponent;
"
`;

exports[`Solid > jsx > Typescript Test > propsDestructure 2`] = `
"import { createSignal } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";

function MyBasicComponent(props) {
  const [name, setName] = createSignal(\\"Decadef20\\");

  return (
    <>
      <div>
        {props.children}
        {props.type}
        Hello! I can run in React, Vue, Solid, or Liquid!
      </div>
    </>
  );
}

export default MyBasicComponent;
"
`;

exports[`Solid > jsx > Typescript Test > propsInterface 1`] = `
"function MyBasicComponent(props) {
  return (
    <div>
      Hello! I can run in React, Vue, Solid, or Liquid!
      {props.name}
    </div>
  );
}

export default MyBasicComponent;
"
`;

exports[`Solid > jsx > Typescript Test > propsInterface 2`] = `
"import { css } from \\"solid-styled-components\\";

function MyBasicComponent(props) {
  return (
    <>
      <div>
        Hello! I can run in React, Vue, Solid, or Liquid!
        {props.name}
      </div>
    </>
  );
}

export default MyBasicComponent;
"
`;

exports[`Solid > jsx > Typescript Test > propsType 1`] = `
"function MyBasicComponent(props) {
  return (
    <div>
      Hello! I can run in React, Vue, Solid, or Liquid!
      {props.name}
    </div>
  );
}

export default MyBasicComponent;
"
`;

exports[`Solid > jsx > Typescript Test > propsType 2`] = `
"import { css } from \\"solid-styled-components\\";

function MyBasicComponent(props) {
  return (
    <>
      <div>
        Hello! I can run in React, Vue, Solid, or Liquid!
        {props.name}
      </div>
    </>
  );
}

export default MyBasicComponent;
"
`;

exports[`Solid > jsx > Typescript Test > renderContentExample 1`] = `
"import { onMount, on, createEffect } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";

import {
  sendComponentsToVisualEditor,
  dispatchNewContentToVisualEditor,
  trackClick,
} from \\"@dummy/injection-js\\";
import BuilderContext from \\"@dummy/context.jsx\\";
import RenderBlocks from \\"@dummy/RenderBlocks.lite.tsx\\";

function RenderContent(props) {
  onMount(() => {
    sendComponentsToVisualEditor(props.customComponents);
  });

  function onUpdateFn_0() {
    dispatchNewContentToVisualEditor(props.content);
  }
  createEffect(on(() => [props.content], onUpdateFn_0));

  return (
    <BuilderContext.Provider
      value={{
        get content() {
          return 3;
        },

        get registeredComponents() {
          return 4;
        },
      }}
    >
      <div
        class={css({
          display: \\"flex\\",
          flexDirection: \\"columns\\",
        })}
        onClick={(event) => trackClick(props.content.id)}
      >
        <RenderBlocks blocks={props.content.blocks}></RenderBlocks>
      </div>
    </BuilderContext.Provider>
  );
}

export default RenderContent;
"
`;

exports[`Solid > jsx > Typescript Test > renderContentExample 2`] = `
"import { onMount, on, createEffect } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";

import {
  sendComponentsToVisualEditor,
  dispatchNewContentToVisualEditor,
  trackClick,
} from \\"@dummy/injection-js\\";
import BuilderContext from \\"@dummy/context.jsx\\";
import RenderBlocks from \\"@dummy/RenderBlocks.lite.tsx\\";

function RenderContent(props) {
  onMount(() => {
    sendComponentsToVisualEditor(props.customComponents);
  });

  function onUpdateFn_0() {
    dispatchNewContentToVisualEditor(props.content);
  }
  createEffect(on(() => [props.content], onUpdateFn_0));

  return (
    <>
      <BuilderContext.Provider
        value={{
          get content() {
            return 3;
          },

          get registeredComponents() {
            return 4;
          },
        }}
      >
        <div
          class=\\"div-975179a0\\"
          onClick={(event) => trackClick(props.content.id)}
        >
          <RenderBlocks blocks={props.content.blocks}></RenderBlocks>
        </div>
      </BuilderContext.Provider>
      <style jsx>{\`
        .div-975179a0 {
          display: flex;
          flex-direction: columns;
        }
      \`}</style>
    </>
  );
}

export default RenderContent;
"
`;

exports[`Solid > jsx > Typescript Test > rootFragmentMultiNode 1`] = `
"import { Show } from \\"solid-js\\";

function Button(props) {
  return (
    <>
      <Show when={props.link}>
        <a
          {...props.attributes}
          href={props.link}
          target={props.openLinkInNewTab ? \\"_blank\\" : undefined}
        >
          {props.text}
        </a>
      </Show>
      <Show when={!props.link}>
        <button type=\\"button\\" {...props.attributes}>
          {props.text}
        </button>
      </Show>
    </>
  );
}

export default Button;
"
`;

exports[`Solid > jsx > Typescript Test > rootFragmentMultiNode 2`] = `
"import { Show } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";

function Button(props) {
  return (
    <>
      <>
        <Show when={props.link}>
          <a
            {...props.attributes}
            href={props.link}
            target={props.openLinkInNewTab ? \\"_blank\\" : undefined}
          >
            {props.text}
          </a>
        </Show>
        <Show when={!props.link}>
          <button type=\\"button\\" {...props.attributes}>
            {props.text}
          </button>
        </Show>
      </>
    </>
  );
}

export default Button;
"
`;

exports[`Solid > jsx > Typescript Test > rootShow 1`] = `
"import { Show } from \\"solid-js\\";

function RenderStyles(props) {
  return (
    <Show fallback={<div>Foo</div>} when={props.foo === \\"bar\\"}>
      <div>Bar</div>
    </Show>
  );
}

export default RenderStyles;
"
`;

exports[`Solid > jsx > Typescript Test > rootShow 2`] = `
"import { Show } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";

function RenderStyles(props) {
  return (
    <>
      <Show fallback={<div>Foo</div>} when={props.foo === \\"bar\\"}>
        <div>Bar</div>
      </Show>
    </>
  );
}

export default RenderStyles;
"
`;

exports[`Solid > jsx > Typescript Test > self-referencing component 1`] = `
"import { Show } from \\"solid-js\\";

function MyComponent(props) {
  return (
    <div>
      {props.name}
      <Show when={props.name === \\"Batman\\"}>
        <MyComponent name=\\"Bruce Wayne\\"></MyComponent>
      </Show>
    </div>
  );
}

export default MyComponent;
"
`;

exports[`Solid > jsx > Typescript Test > self-referencing component 2`] = `
"import { Show } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";

function MyComponent(props) {
  return (
    <>
      <div>
        {props.name}
        <Show when={props.name === \\"Batman\\"}>
          <MyComponent name=\\"Bruce Wayne\\"></MyComponent>
        </Show>
      </div>
    </>
  );
}

export default MyComponent;
"
`;

exports[`Solid > jsx > Typescript Test > self-referencing component with children 1`] = `
"import { Show } from \\"solid-js\\";

function MyComponent(props) {
  return (
    <div>
      {props.name}
      {props.children}
      <Show when={props.name === \\"Batman\\"}>
        <MyComponent name=\\"Bruce\\">
          <div>Wayne</div>
        </MyComponent>
      </Show>
    </div>
  );
}

export default MyComponent;
"
`;

exports[`Solid > jsx > Typescript Test > self-referencing component with children 2`] = `
"import { Show } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";

function MyComponent(props) {
  return (
    <>
      <div>
        {props.name}
        {props.children}
        <Show when={props.name === \\"Batman\\"}>
          <MyComponent name=\\"Bruce\\">
            <div>Wayne</div>
          </MyComponent>
        </Show>
      </div>
    </>
  );
}

export default MyComponent;
"
`;

exports[`Solid > jsx > Typescript Test > showWithFor 1`] = `
"import { Show, For } from \\"solid-js\\";

function NestedShow(props) {
  return (
    <Show fallback={<div>else-condition-A</div>} when={props.conditionA}>
      <For each={props.items}>
        {(item, _index) => {
          const idx = _index();
          return <div key={idx}>{item}</div>;
        }}
      </For>
    </Show>
  );
}

export default NestedShow;
"
`;

exports[`Solid > jsx > Typescript Test > showWithFor 2`] = `
"import { Show, For } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";

function NestedShow(props) {
  return (
    <>
      <Show fallback={<div>else-condition-A</div>} when={props.conditionA}>
        <For each={props.items}>
          {(item, _index) => {
            const idx = _index();
            return <div key={idx}>{item}</div>;
          }}
        </For>
      </Show>
    </>
  );
}

export default NestedShow;
"
`;

exports[`Solid > jsx > Typescript Test > spreadAttrs 1`] = `
"function MyBasicComponent(props) {
  return <input {...attrs} />;
}

export default MyBasicComponent;
"
`;

exports[`Solid > jsx > Typescript Test > spreadAttrs 2`] = `
"import { css } from \\"solid-styled-components\\";

function MyBasicComponent(props) {
  return (
    <>
      <input {...attrs} />
    </>
  );
}

export default MyBasicComponent;
"
`;

exports[`Solid > jsx > Typescript Test > spreadNestedProps 1`] = `
"function MyBasicComponent(props) {
  return <input {...props.nested} />;
}

export default MyBasicComponent;
"
`;

exports[`Solid > jsx > Typescript Test > spreadNestedProps 2`] = `
"import { css } from \\"solid-styled-components\\";

function MyBasicComponent(props) {
  return (
    <>
      <input {...props.nested} />
    </>
  );
}

export default MyBasicComponent;
"
`;

exports[`Solid > jsx > Typescript Test > spreadProps 1`] = `
"function MyBasicComponent(props) {
  return <input {...props} />;
}

export default MyBasicComponent;
"
`;

exports[`Solid > jsx > Typescript Test > spreadProps 2`] = `
"import { css } from \\"solid-styled-components\\";

function MyBasicComponent(props) {
  return (
    <>
      <input {...props} />
    </>
  );
}

export default MyBasicComponent;
"
`;

exports[`Solid > jsx > Typescript Test > subComponent 1`] = `
"import Foo from \\"./foo-sub-component.jsx\\";

function SubComponent(props) {
  return <Foo></Foo>;
}

export default SubComponent;
"
`;

exports[`Solid > jsx > Typescript Test > subComponent 2`] = `
"import { css } from \\"solid-styled-components\\";

import Foo from \\"./foo-sub-component.jsx\\";

function SubComponent(props) {
  return (
    <>
      <Foo></Foo>
    </>
  );
}

export default SubComponent;
"
`;

exports[`Solid > jsx > Typescript Test > typeDependency 1`] = `
"function TypeDependency(props) {
  return <div>{props.foo}</div>;
}

export default TypeDependency;
"
`;

exports[`Solid > jsx > Typescript Test > typeDependency 2`] = `
"import { css } from \\"solid-styled-components\\";

function TypeDependency(props) {
  return (
    <>
      <div>{props.foo}</div>
    </>
  );
}

export default TypeDependency;
"
`;

exports[`Solid > jsx > Typescript Test > use-style 1`] = `
"import { css } from \\"solid-styled-components\\";

function MyComponent(props) {
  return <button type=\\"button\\">Button</button>;
}

export default MyComponent;
"
`;

exports[`Solid > jsx > Typescript Test > use-style 2`] = `
"import { css } from \\"solid-styled-components\\";

function MyComponent(props) {
  return (
    <>
      <button type=\\"button\\">Button</button>
      <style jsx>{\`
        button {
          background: blue;
          color: white;
          font-size: 12px;
          outline: 1px solid black;
        }
      \`}</style>
    </>
  );
}

export default MyComponent;
"
`;

exports[`Solid > jsx > Typescript Test > use-style-and-css 1`] = `
"import { css } from \\"solid-styled-components\\";

function MyComponent(props) {
  return (
    <button
      class={css({
        background: \\"blue\\",
        color: \\"white\\",
      })}
      type=\\"button\\"
    >
      Button
    </button>
  );
}

export default MyComponent;
"
`;

exports[`Solid > jsx > Typescript Test > use-style-and-css 2`] = `
"import { css } from \\"solid-styled-components\\";

function MyComponent(props) {
  return (
    <>
      <button class=\\"button-9f7d04e4\\" type=\\"button\\">
        Button
      </button>
      <style jsx>{\`
        .button-9f7d04e4 {
          background: blue;
          color: white;
        }

        button {
          font-size: 12px;
          outline: 1px solid black;
        }
      \`}</style>
    </>
  );
}

export default MyComponent;
"
`;

exports[`Solid > jsx > Typescript Test > use-style-outside-component 1`] = `
"import { css } from \\"solid-styled-components\\";

function MyComponent(props) {
  return <button type=\\"button\\">Button</button>;
}

export default MyComponent;
"
`;

exports[`Solid > jsx > Typescript Test > use-style-outside-component 2`] = `
"import { css } from \\"solid-styled-components\\";

function MyComponent(props) {
  return (
    <>
      <button type=\\"button\\">Button</button>
      <style jsx>{\`
        button {
          background: blue;
          color: white;
          font-size: 12px;
          outline: 1px solid black;
        }
      \`}</style>
    </>
  );
}

export default MyComponent;
"
`;

exports[`Solid > svelte > Javascript Test > basic 1`] = `
"import { createSignal } from \\"solid-js\\";

function MyComponent(props) {
  const [name, setName] = createSignal(\\"Steve\\");

  return (
    <div>
      <input onInput={(event) => setName(event.target.value)} value={name()} />
      Hello! I can run in React, Vue, Solid, or Liquid!
    </div>
  );
}

export default MyComponent;
"
`;

exports[`Solid > svelte > Javascript Test > basic 2`] = `
"import { createSignal } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";

function MyComponent(props) {
  const [name, setName] = createSignal(\\"Steve\\");

  return (
    <>
      <div>
        <input
          onInput={(event) => setName(event.target.value)}
          value={name()}
        />
        Hello! I can run in React, Vue, Solid, or Liquid!
      </div>
    </>
  );
}

export default MyComponent;
"
`;

exports[`Solid > svelte > Javascript Test > bindGroup 1`] = `
"import { createSignal } from \\"solid-js\\";

function MyComponent(props) {
  const [tortilla, setTortilla] = createSignal(\\"Plain\\");

  const [fillings, setFillings] = createSignal([]);

  return (
    <div>
      <input
        type=\\"radio\\"
        value=\\"Plain\\"
        checked={tortilla() === \\"Plain\\"}
        onInput={(event) => setTortilla(event.target.value)}
      />
      <input
        type=\\"radio\\"
        value=\\"Whole wheat\\"
        checked={tortilla() === \\"Whole wheat\\"}
        onInput={(event) => setTortilla(event.target.value)}
      />
      <input
        type=\\"radio\\"
        value=\\"Spinach\\"
        checked={tortilla() === \\"Spinach\\"}
        onInput={(event) => setTortilla(event.target.value)}
      />
      <br />
      <br />
      <input
        type=\\"checkbox\\"
        value=\\"Rice\\"
        checked={fillings() === \\"Rice\\"}
        onInput={(event) => setFillings(event.target.value)}
      />
      <input
        type=\\"checkbox\\"
        value=\\"Beans\\"
        checked={fillings() === \\"Beans\\"}
        onInput={(event) => setFillings(event.target.value)}
      />
      <input
        type=\\"checkbox\\"
        value=\\"Cheese\\"
        checked={fillings() === \\"Cheese\\"}
        onInput={(event) => setFillings(event.target.value)}
      />
      <input
        type=\\"checkbox\\"
        value=\\"Guac (extra)\\"
        checked={fillings() === \\"Guac (extra)\\"}
        onInput={(event) => setFillings(event.target.value)}
      />
      <p>
        Tortilla:
        {tortilla()}
      </p>
      <p>
        Fillings:
        {fillings()}
      </p>
    </div>
  );
}

export default MyComponent;
"
`;

exports[`Solid > svelte > Javascript Test > bindGroup 2`] = `
"import { createSignal } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";

function MyComponent(props) {
  const [tortilla, setTortilla] = createSignal(\\"Plain\\");

  const [fillings, setFillings] = createSignal([]);

  return (
    <>
      <div>
        <input
          type=\\"radio\\"
          value=\\"Plain\\"
          checked={tortilla() === \\"Plain\\"}
          onInput={(event) => setTortilla(event.target.value)}
        />
        <input
          type=\\"radio\\"
          value=\\"Whole wheat\\"
          checked={tortilla() === \\"Whole wheat\\"}
          onInput={(event) => setTortilla(event.target.value)}
        />
        <input
          type=\\"radio\\"
          value=\\"Spinach\\"
          checked={tortilla() === \\"Spinach\\"}
          onInput={(event) => setTortilla(event.target.value)}
        />
        <br />
        <br />
        <input
          type=\\"checkbox\\"
          value=\\"Rice\\"
          checked={fillings() === \\"Rice\\"}
          onInput={(event) => setFillings(event.target.value)}
        />
        <input
          type=\\"checkbox\\"
          value=\\"Beans\\"
          checked={fillings() === \\"Beans\\"}
          onInput={(event) => setFillings(event.target.value)}
        />
        <input
          type=\\"checkbox\\"
          value=\\"Cheese\\"
          checked={fillings() === \\"Cheese\\"}
          onInput={(event) => setFillings(event.target.value)}
        />
        <input
          type=\\"checkbox\\"
          value=\\"Guac (extra)\\"
          checked={fillings() === \\"Guac (extra)\\"}
          onInput={(event) => setFillings(event.target.value)}
        />
        <p>
          Tortilla:
          {tortilla()}
        </p>
        <p>
          Fillings:
          {fillings()}
        </p>
      </div>
    </>
  );
}

export default MyComponent;
"
`;

exports[`Solid > svelte > Javascript Test > bindProperty 1`] = `
"import { createSignal } from \\"solid-js\\";

function MyComponent(props) {
  const [value, setValue] = createSignal(\\"hello\\");

  return <input value={value()} />;
}

export default MyComponent;
"
`;

exports[`Solid > svelte > Javascript Test > bindProperty 2`] = `
"import { createSignal } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";

function MyComponent(props) {
  const [value, setValue] = createSignal(\\"hello\\");

  return (
    <>
      <input value={value()} />
    </>
  );
}

export default MyComponent;
"
`;

exports[`Solid > svelte > Javascript Test > classDirective 1`] = `
"import { createSignal } from \\"solid-js\\";

function MyComponent(props) {
  const [focus, setFocus] = createSignal(true);

  return (
    <input
      class={\`form-input \${props.disabled ? \\"disabled\\" : \\"\\"} \${
        focus() ? \\"focus\\" : \\"\\"
      }\`}
    />
  );
}

export default MyComponent;
"
`;

exports[`Solid > svelte > Javascript Test > classDirective 2`] = `
"import { createSignal } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";

function MyComponent(props) {
  const [focus, setFocus] = createSignal(true);

  return (
    <>
      <input
        class={\`form-input \${props.disabled ? \\"disabled\\" : \\"\\"} \${
          focus() ? \\"focus\\" : \\"\\"
        }\`}
      />
    </>
  );
}

export default MyComponent;
"
`;

exports[`Solid > svelte > Javascript Test > context 1`] = `
"'>' expected. (27:19)
  25 |
  26 |     return (
> 27 |       <'activeTab'.Provider ><div >{activeTab()}</div></'activeTab'.Provider>
     |                   ^
  28 |       
  29 |       )
  30 |   }"
`;

exports[`Solid > svelte > Javascript Test > context 2`] = `
"Identifier expected. (27:8)
  25 |
  26 |     return (<>
> 27 |       <'activeTab'.Provider ><div >{activeTab()}</div></'activeTab'.Provider>
     |        ^
  28 |       
  29 |       </>)
  30 |   }"
`;

exports[`Solid > svelte > Javascript Test > each 1`] = `
"import { For, createSignal } from \\"solid-js\\";

function MyComponent(props) {
  const [numbers, setNumbers] = createSignal([\\"one\\", \\"two\\", \\"three\\"]);

  return (
    <ul>
      <For each={numbers()}>
        {(num, _index) => {
          const index = _index();
          return <li>{num}</li>;
        }}
      </For>
    </ul>
  );
}

export default MyComponent;
"
`;

exports[`Solid > svelte > Javascript Test > each 2`] = `
"import { For, createSignal } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";

function MyComponent(props) {
  const [numbers, setNumbers] = createSignal([\\"one\\", \\"two\\", \\"three\\"]);

  return (
    <>
      <ul>
        <For each={numbers()}>
          {(num, _index) => {
            const index = _index();
            return <li>{num}</li>;
          }}
        </For>
      </ul>
    </>
  );
}

export default MyComponent;
"
`;

exports[`Solid > svelte > Javascript Test > eventHandlers 1`] = `
"import { createSignal } from \\"solid-js\\";

function MyComponent(props) {
  function log(msg = \\"hello\\") {
    console.log(msg);
  }

  return (
    <div>
      <button onClick={(a) => log(\\"hi\\")}>Log</button>
      <button onClick={(event) => log(event)}>Log</button>
      <button onClick={(event) => log(event)}>Log</button>
    </div>
  );
}

export default MyComponent;
"
`;

exports[`Solid > svelte > Javascript Test > eventHandlers 2`] = `
"import { createSignal } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";

function MyComponent(props) {
  function log(msg = \\"hello\\") {
    console.log(msg);
  }

  return (
    <>
      <div>
        <button onClick={(a) => log(\\"hi\\")}>Log</button>
        <button onClick={(event) => log(event)}>Log</button>
        <button onClick={(event) => log(event)}>Log</button>
      </div>
    </>
  );
}

export default MyComponent;
"
`;

exports[`Solid > svelte > Javascript Test > html 1`] = `
"import { createSignal } from \\"solid-js\\";

function MyComponent(props) {
  const [html, setHtml] = createSignal(\\"<b>bold</b>\\");

  return <div innerHTML={html()}></div>;
}

export default MyComponent;
"
`;

exports[`Solid > svelte > Javascript Test > html 2`] = `
"import { createSignal } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";

function MyComponent(props) {
  const [html, setHtml] = createSignal(\\"<b>bold</b>\\");

  return (
    <>
      <div innerHTML={html()}></div>
    </>
  );
}

export default MyComponent;
"
`;

exports[`Solid > svelte > Javascript Test > ifElse 1`] = `
"import { Show, createSignal } from \\"solid-js\\";

function MyComponent(props) {
  const [show, setShow] = createSignal(true);

  function toggle() {
    setShow(!show());
  }

  return (
    <Show
      fallback={<button onClick={(event) => toggle(event)}>Show</button>}
      when={show()}
    >
      <button onClick={(event) => toggle(event)}>Hide</button>
    </Show>
  );
}

export default MyComponent;
"
`;

exports[`Solid > svelte > Javascript Test > ifElse 2`] = `
"import { Show, createSignal } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";

function MyComponent(props) {
  const [show, setShow] = createSignal(true);

  function toggle() {
    setShow(!show());
  }

  return (
    <>
      <Show
        fallback={<button onClick={(event) => toggle(event)}>Show</button>}
        when={show()}
      >
        <button onClick={(event) => toggle(event)}>Hide</button>
      </Show>
    </>
  );
}

export default MyComponent;
"
`;

exports[`Solid > svelte > Javascript Test > imports 1`] = `
"import { createSignal } from \\"solid-js\\";

import Button from \\"./Button.jsx\\";

function MyComponent(props) {
  const [disabled, setDisabled] = createSignal(false);

  return (
    <div>
      <Button type=\\"button\\" disabled={disabled()}>
        <Slot></Slot>
      </Button>
    </div>
  );
}

export default MyComponent;
"
`;

exports[`Solid > svelte > Javascript Test > imports 2`] = `
"import { createSignal } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";

import Button from \\"./Button.jsx\\";

function MyComponent(props) {
  const [disabled, setDisabled] = createSignal(false);

  return (
    <>
      <div>
        <Button type=\\"button\\" disabled={disabled()}>
          <Slot></Slot>
        </Button>
      </div>
    </>
  );
}

export default MyComponent;
"
`;

exports[`Solid > svelte > Javascript Test > lifecycleHooks 1`] = `
"import { onMount, on, createEffect } from \\"solid-js\\";

function MyComponent(props) {
  onMount(() => {
    console.log(\\"onMount\\");
  });

  return <div></div>;
}

export default MyComponent;
"
`;

exports[`Solid > svelte > Javascript Test > lifecycleHooks 2`] = `
"import { onMount, on, createEffect } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";

function MyComponent(props) {
  onMount(() => {
    console.log(\\"onMount\\");
  });

  return (
    <>
      <div></div>
    </>
  );
}

export default MyComponent;
"
`;

exports[`Solid > svelte > Javascript Test > reactive 1`] = `
"import { createSignal } from \\"solid-js\\";

function MyComponent(props) {
  const [name, setName] = createSignal(\\"Steve\\");

  function lowercaseName() {
    return name().toLowerCase();
  }

  return (
    <div>
      <input value={name()} />
      Lowercase:
      {lowercaseName()}
    </div>
  );
}

export default MyComponent;
"
`;

exports[`Solid > svelte > Javascript Test > reactive 2`] = `
"import { createSignal } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";

function MyComponent(props) {
  const [name, setName] = createSignal(\\"Steve\\");

  function lowercaseName() {
    return name().toLowerCase();
  }

  return (
    <>
      <div>
        <input value={name()} />
        Lowercase:
        {lowercaseName()}
      </div>
    </>
  );
}

export default MyComponent;
"
`;

exports[`Solid > svelte > Javascript Test > reactiveWithFn 1`] = `
"import { on, createEffect, createSignal } from \\"solid-js\\";

function MyComponent(props) {
  const [a, setA] = createSignal(2);

  const [b, setB] = createSignal(5);

  const [result, setResult] = createSignal(null);

  function calculateResult(a_, b_) {
    setResult(a_ * b_);
  }

  function onUpdateFn_0() {
    calculateResult(a(), b());
  }
  createEffect(on(() => [a(), b()], onUpdateFn_0));

  return (
    <div>
      <input
        type=\\"number\\"
        onInput={(event) => setA(event.target.value)}
        value={a()}
      />
      <input
        type=\\"number\\"
        onInput={(event) => setB(event.target.value)}
        value={b()}
      />
      Result:
      {result()}
    </div>
  );
}

export default MyComponent;
"
`;

exports[`Solid > svelte > Javascript Test > reactiveWithFn 2`] = `
"import { on, createEffect, createSignal } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";

function MyComponent(props) {
  const [a, setA] = createSignal(2);

  const [b, setB] = createSignal(5);

  const [result, setResult] = createSignal(null);

  function calculateResult(a_, b_) {
    setResult(a_ * b_);
  }

  function onUpdateFn_0() {
    calculateResult(a(), b());
  }
  createEffect(on(() => [a(), b()], onUpdateFn_0));

  return (
    <>
      <div>
        <input
          type=\\"number\\"
          onInput={(event) => setA(event.target.value)}
          value={a()}
        />
        <input
          type=\\"number\\"
          onInput={(event) => setB(event.target.value)}
          value={b()}
        />
        Result:
        {result()}
      </div>
    </>
  );
}

export default MyComponent;
"
`;

exports[`Solid > svelte > Javascript Test > style 1`] = `
"import { css } from \\"solid-styled-components\\";

function MyComponent(props) {
  return <input class=\\"form-input\\" />;
}

export default MyComponent;
"
`;

exports[`Solid > svelte > Javascript Test > style 2`] = `
"import { css } from \\"solid-styled-components\\";

function MyComponent(props) {
  return (
    <>
      <input class=\\"form-input\\" />
      <style jsx>{\`
        input {
          color: red;
          font-size: 12px;
        }

        .form-input:focus {
          outline: 1px solid blue;
        }
      \`}</style>
    </>
  );
}

export default MyComponent;
"
`;

exports[`Solid > svelte > Javascript Test > textExpressions 1`] = `
"import { createSignal } from \\"solid-js\\";

function MyComponent(props) {
  const [a, setA] = createSignal(5);

  const [b, setB] = createSignal(12);

  return (
    <div>
      normal:
      {a() + b()}
      <br />
      conditional
      {a() > 2 ? \\"hello\\" : \\"bye\\"}
    </div>
  );
}

export default MyComponent;
"
`;

exports[`Solid > svelte > Javascript Test > textExpressions 2`] = `
"import { createSignal } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";

function MyComponent(props) {
  const [a, setA] = createSignal(5);

  const [b, setB] = createSignal(12);

  return (
    <>
      <div>
        normal:
        {a() + b()}
        <br />
        conditional
        {a() > 2 ? \\"hello\\" : \\"bye\\"}
      </div>
    </>
  );
}

export default MyComponent;
"
`;

exports[`Solid > svelte > Typescript Test > basic 1`] = `
"import { createSignal } from \\"solid-js\\";

function MyComponent(props) {
  const [name, setName] = createSignal(\\"Steve\\");

  return (
    <div>
      <input onInput={(event) => setName(event.target.value)} value={name()} />
      Hello! I can run in React, Vue, Solid, or Liquid!
    </div>
  );
}

export default MyComponent;
"
`;

exports[`Solid > svelte > Typescript Test > basic 2`] = `
"import { createSignal } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";

function MyComponent(props) {
  const [name, setName] = createSignal(\\"Steve\\");

  return (
    <>
      <div>
        <input
          onInput={(event) => setName(event.target.value)}
          value={name()}
        />
        Hello! I can run in React, Vue, Solid, or Liquid!
      </div>
    </>
  );
}

export default MyComponent;
"
`;

exports[`Solid > svelte > Typescript Test > bindGroup 1`] = `
"import { createSignal } from \\"solid-js\\";

function MyComponent(props) {
  const [tortilla, setTortilla] = createSignal(\\"Plain\\");

  const [fillings, setFillings] = createSignal([]);

  return (
    <div>
      <input
        type=\\"radio\\"
        value=\\"Plain\\"
        checked={tortilla() === \\"Plain\\"}
        onInput={(event) => setTortilla(event.target.value)}
      />
      <input
        type=\\"radio\\"
        value=\\"Whole wheat\\"
        checked={tortilla() === \\"Whole wheat\\"}
        onInput={(event) => setTortilla(event.target.value)}
      />
      <input
        type=\\"radio\\"
        value=\\"Spinach\\"
        checked={tortilla() === \\"Spinach\\"}
        onInput={(event) => setTortilla(event.target.value)}
      />
      <br />
      <br />
      <input
        type=\\"checkbox\\"
        value=\\"Rice\\"
        checked={fillings() === \\"Rice\\"}
        onInput={(event) => setFillings(event.target.value)}
      />
      <input
        type=\\"checkbox\\"
        value=\\"Beans\\"
        checked={fillings() === \\"Beans\\"}
        onInput={(event) => setFillings(event.target.value)}
      />
      <input
        type=\\"checkbox\\"
        value=\\"Cheese\\"
        checked={fillings() === \\"Cheese\\"}
        onInput={(event) => setFillings(event.target.value)}
      />
      <input
        type=\\"checkbox\\"
        value=\\"Guac (extra)\\"
        checked={fillings() === \\"Guac (extra)\\"}
        onInput={(event) => setFillings(event.target.value)}
      />
      <p>
        Tortilla:
        {tortilla()}
      </p>
      <p>
        Fillings:
        {fillings()}
      </p>
    </div>
  );
}

export default MyComponent;
"
`;

exports[`Solid > svelte > Typescript Test > bindGroup 2`] = `
"import { createSignal } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";

function MyComponent(props) {
  const [tortilla, setTortilla] = createSignal(\\"Plain\\");

  const [fillings, setFillings] = createSignal([]);

  return (
    <>
      <div>
        <input
          type=\\"radio\\"
          value=\\"Plain\\"
          checked={tortilla() === \\"Plain\\"}
          onInput={(event) => setTortilla(event.target.value)}
        />
        <input
          type=\\"radio\\"
          value=\\"Whole wheat\\"
          checked={tortilla() === \\"Whole wheat\\"}
          onInput={(event) => setTortilla(event.target.value)}
        />
        <input
          type=\\"radio\\"
          value=\\"Spinach\\"
          checked={tortilla() === \\"Spinach\\"}
          onInput={(event) => setTortilla(event.target.value)}
        />
        <br />
        <br />
        <input
          type=\\"checkbox\\"
          value=\\"Rice\\"
          checked={fillings() === \\"Rice\\"}
          onInput={(event) => setFillings(event.target.value)}
        />
        <input
          type=\\"checkbox\\"
          value=\\"Beans\\"
          checked={fillings() === \\"Beans\\"}
          onInput={(event) => setFillings(event.target.value)}
        />
        <input
          type=\\"checkbox\\"
          value=\\"Cheese\\"
          checked={fillings() === \\"Cheese\\"}
          onInput={(event) => setFillings(event.target.value)}
        />
        <input
          type=\\"checkbox\\"
          value=\\"Guac (extra)\\"
          checked={fillings() === \\"Guac (extra)\\"}
          onInput={(event) => setFillings(event.target.value)}
        />
        <p>
          Tortilla:
          {tortilla()}
        </p>
        <p>
          Fillings:
          {fillings()}
        </p>
      </div>
    </>
  );
}

export default MyComponent;
"
`;

exports[`Solid > svelte > Typescript Test > bindProperty 1`] = `
"import { createSignal } from \\"solid-js\\";

function MyComponent(props) {
  const [value, setValue] = createSignal(\\"hello\\");

  return <input value={value()} />;
}

export default MyComponent;
"
`;

exports[`Solid > svelte > Typescript Test > bindProperty 2`] = `
"import { createSignal } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";

function MyComponent(props) {
  const [value, setValue] = createSignal(\\"hello\\");

  return (
    <>
      <input value={value()} />
    </>
  );
}

export default MyComponent;
"
`;

exports[`Solid > svelte > Typescript Test > classDirective 1`] = `
"import { createSignal } from \\"solid-js\\";

function MyComponent(props) {
  const [focus, setFocus] = createSignal(true);

  return (
    <input
      class={\`form-input \${props.disabled ? \\"disabled\\" : \\"\\"} \${
        focus() ? \\"focus\\" : \\"\\"
      }\`}
    />
  );
}

export default MyComponent;
"
`;

exports[`Solid > svelte > Typescript Test > classDirective 2`] = `
"import { createSignal } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";

function MyComponent(props) {
  const [focus, setFocus] = createSignal(true);

  return (
    <>
      <input
        class={\`form-input \${props.disabled ? \\"disabled\\" : \\"\\"} \${
          focus() ? \\"focus\\" : \\"\\"
        }\`}
      />
    </>
  );
}

export default MyComponent;
"
`;

exports[`Solid > svelte > Typescript Test > context 1`] = `
"'>' expected. (27:19)
  25 |
  26 |     return (
> 27 |       <'activeTab'.Provider ><div >{activeTab()}</div></'activeTab'.Provider>
     |                   ^
  28 |       
  29 |       )
  30 |   }"
`;

exports[`Solid > svelte > Typescript Test > context 2`] = `
"Identifier expected. (27:8)
  25 |
  26 |     return (<>
> 27 |       <'activeTab'.Provider ><div >{activeTab()}</div></'activeTab'.Provider>
     |        ^
  28 |       
  29 |       </>)
  30 |   }"
`;

exports[`Solid > svelte > Typescript Test > each 1`] = `
"import { For, createSignal } from \\"solid-js\\";

function MyComponent(props) {
  const [numbers, setNumbers] = createSignal([\\"one\\", \\"two\\", \\"three\\"]);

  return (
    <ul>
      <For each={numbers()}>
        {(num, _index) => {
          const index = _index();
          return <li>{num}</li>;
        }}
      </For>
    </ul>
  );
}

export default MyComponent;
"
`;

exports[`Solid > svelte > Typescript Test > each 2`] = `
"import { For, createSignal } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";

function MyComponent(props) {
  const [numbers, setNumbers] = createSignal([\\"one\\", \\"two\\", \\"three\\"]);

  return (
    <>
      <ul>
        <For each={numbers()}>
          {(num, _index) => {
            const index = _index();
            return <li>{num}</li>;
          }}
        </For>
      </ul>
    </>
  );
}

export default MyComponent;
"
`;

exports[`Solid > svelte > Typescript Test > eventHandlers 1`] = `
"import { createSignal } from \\"solid-js\\";

function MyComponent(props) {
  function log(msg = \\"hello\\") {
    console.log(msg);
  }

  return (
    <div>
      <button onClick={(a) => log(\\"hi\\")}>Log</button>
      <button onClick={(event) => log(event)}>Log</button>
      <button onClick={(event) => log(event)}>Log</button>
    </div>
  );
}

export default MyComponent;
"
`;

exports[`Solid > svelte > Typescript Test > eventHandlers 2`] = `
"import { createSignal } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";

function MyComponent(props) {
  function log(msg = \\"hello\\") {
    console.log(msg);
  }

  return (
    <>
      <div>
        <button onClick={(a) => log(\\"hi\\")}>Log</button>
        <button onClick={(event) => log(event)}>Log</button>
        <button onClick={(event) => log(event)}>Log</button>
      </div>
    </>
  );
}

export default MyComponent;
"
`;

exports[`Solid > svelte > Typescript Test > html 1`] = `
"import { createSignal } from \\"solid-js\\";

function MyComponent(props) {
  const [html, setHtml] = createSignal(\\"<b>bold</b>\\");

  return <div innerHTML={html()}></div>;
}

export default MyComponent;
"
`;

exports[`Solid > svelte > Typescript Test > html 2`] = `
"import { createSignal } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";

function MyComponent(props) {
  const [html, setHtml] = createSignal(\\"<b>bold</b>\\");

  return (
    <>
      <div innerHTML={html()}></div>
    </>
  );
}

export default MyComponent;
"
`;

exports[`Solid > svelte > Typescript Test > ifElse 1`] = `
"import { Show, createSignal } from \\"solid-js\\";

function MyComponent(props) {
  const [show, setShow] = createSignal(true);

  function toggle() {
    setShow(!show());
  }

  return (
    <Show
      fallback={<button onClick={(event) => toggle(event)}>Show</button>}
      when={show()}
    >
      <button onClick={(event) => toggle(event)}>Hide</button>
    </Show>
  );
}

export default MyComponent;
"
`;

exports[`Solid > svelte > Typescript Test > ifElse 2`] = `
"import { Show, createSignal } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";

function MyComponent(props) {
  const [show, setShow] = createSignal(true);

  function toggle() {
    setShow(!show());
  }

  return (
    <>
      <Show
        fallback={<button onClick={(event) => toggle(event)}>Show</button>}
        when={show()}
      >
        <button onClick={(event) => toggle(event)}>Hide</button>
      </Show>
    </>
  );
}

export default MyComponent;
"
`;

exports[`Solid > svelte > Typescript Test > imports 1`] = `
"import { createSignal } from \\"solid-js\\";

import Button from \\"./Button.jsx\\";

function MyComponent(props) {
  const [disabled, setDisabled] = createSignal(false);

  return (
    <div>
      <Button type=\\"button\\" disabled={disabled()}>
        <Slot></Slot>
      </Button>
    </div>
  );
}

export default MyComponent;
"
`;

exports[`Solid > svelte > Typescript Test > imports 2`] = `
"import { createSignal } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";

import Button from \\"./Button.jsx\\";

function MyComponent(props) {
  const [disabled, setDisabled] = createSignal(false);

  return (
    <>
      <div>
        <Button type=\\"button\\" disabled={disabled()}>
          <Slot></Slot>
        </Button>
      </div>
    </>
  );
}

export default MyComponent;
"
`;

exports[`Solid > svelte > Typescript Test > lifecycleHooks 1`] = `
"import { onMount, on, createEffect } from \\"solid-js\\";

function MyComponent(props) {
  onMount(() => {
    console.log(\\"onMount\\");
  });

  return <div></div>;
}

export default MyComponent;
"
`;

exports[`Solid > svelte > Typescript Test > lifecycleHooks 2`] = `
"import { onMount, on, createEffect } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";

function MyComponent(props) {
  onMount(() => {
    console.log(\\"onMount\\");
  });

  return (
    <>
      <div></div>
    </>
  );
}

export default MyComponent;
"
`;

exports[`Solid > svelte > Typescript Test > reactive 1`] = `
"import { createSignal } from \\"solid-js\\";

function MyComponent(props) {
  const [name, setName] = createSignal(\\"Steve\\");

  function lowercaseName() {
    return name().toLowerCase();
  }

  return (
    <div>
      <input value={name()} />
      Lowercase:
      {lowercaseName()}
    </div>
  );
}

export default MyComponent;
"
`;

exports[`Solid > svelte > Typescript Test > reactive 2`] = `
"import { createSignal } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";

function MyComponent(props) {
  const [name, setName] = createSignal(\\"Steve\\");

  function lowercaseName() {
    return name().toLowerCase();
  }

  return (
    <>
      <div>
        <input value={name()} />
        Lowercase:
        {lowercaseName()}
      </div>
    </>
  );
}

export default MyComponent;
"
`;

exports[`Solid > svelte > Typescript Test > reactiveWithFn 1`] = `
"import { on, createEffect, createSignal } from \\"solid-js\\";

function MyComponent(props) {
  const [a, setA] = createSignal(2);

  const [b, setB] = createSignal(5);

  const [result, setResult] = createSignal(null);

  function calculateResult(a_, b_) {
    setResult(a_ * b_);
  }

  function onUpdateFn_0() {
    calculateResult(a(), b());
  }
  createEffect(on(() => [a(), b()], onUpdateFn_0));

  return (
    <div>
      <input
        type=\\"number\\"
        onInput={(event) => setA(event.target.value)}
        value={a()}
      />
      <input
        type=\\"number\\"
        onInput={(event) => setB(event.target.value)}
        value={b()}
      />
      Result:
      {result()}
    </div>
  );
}

export default MyComponent;
"
`;

exports[`Solid > svelte > Typescript Test > reactiveWithFn 2`] = `
"import { on, createEffect, createSignal } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";

function MyComponent(props) {
  const [a, setA] = createSignal(2);

  const [b, setB] = createSignal(5);

  const [result, setResult] = createSignal(null);

  function calculateResult(a_, b_) {
    setResult(a_ * b_);
  }

  function onUpdateFn_0() {
    calculateResult(a(), b());
  }
  createEffect(on(() => [a(), b()], onUpdateFn_0));

  return (
    <>
      <div>
        <input
          type=\\"number\\"
          onInput={(event) => setA(event.target.value)}
          value={a()}
        />
        <input
          type=\\"number\\"
          onInput={(event) => setB(event.target.value)}
          value={b()}
        />
        Result:
        {result()}
      </div>
    </>
  );
}

export default MyComponent;
"
`;

exports[`Solid > svelte > Typescript Test > style 1`] = `
"import { css } from \\"solid-styled-components\\";

function MyComponent(props) {
  return <input class=\\"form-input\\" />;
}

export default MyComponent;
"
`;

exports[`Solid > svelte > Typescript Test > style 2`] = `
"import { css } from \\"solid-styled-components\\";

function MyComponent(props) {
  return (
    <>
      <input class=\\"form-input\\" />
      <style jsx>{\`
        input {
          color: red;
          font-size: 12px;
        }

        .form-input:focus {
          outline: 1px solid blue;
        }
      \`}</style>
    </>
  );
}

export default MyComponent;
"
`;

exports[`Solid > svelte > Typescript Test > textExpressions 1`] = `
"import { createSignal } from \\"solid-js\\";

function MyComponent(props) {
  const [a, setA] = createSignal(5);

  const [b, setB] = createSignal(12);

  return (
    <div>
      normal:
      {a() + b()}
      <br />
      conditional
      {a() > 2 ? \\"hello\\" : \\"bye\\"}
    </div>
  );
}

export default MyComponent;
"
`;

exports[`Solid > svelte > Typescript Test > textExpressions 2`] = `
"import { createSignal } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";

function MyComponent(props) {
  const [a, setA] = createSignal(5);

  const [b, setB] = createSignal(12);

  return (
    <>
      <div>
        normal:
        {a() + b()}
        <br />
        conditional
        {a() > 2 ? \\"hello\\" : \\"bye\\"}
      </div>
    </>
  );
}

export default MyComponent;
"
`;
