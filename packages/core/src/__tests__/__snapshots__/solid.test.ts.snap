// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Solid Basic 1`] = `
"import { createMutable, Show, For } from \\"solid-js\\";

export default function MyComponent() {
  const state = createMutable({ name: \\"Steve\\" });

  return (
    <div>
      <input
        value={state.name}
        onChange={(event) => (state.name = event.target.value)}
      />
      Hello! I can run in React, Vue, Solid, or Liquid!
    </div>
  );
}
"
`;

exports[`Solid Button 1`] = `
"import { createMutable, Show, For } from \\"solid-js\\";

export default function MyComponent() {
  const state = createMutable({});

  return (
    <Fragment>
      <Show when={props.link}>
        <a
          {...props.attributes}
          href={props.link}
          target={props.openLinkInNewTab ? \\"_blank\\" : undefined}
        >
          {props.text}
        </a>
      </Show>

      <Show when={!props.link}>
        <button {...props.attributes} type=\\"button\\">
          {props.text}
        </button>
      </Show>
    </Fragment>
  );
}
"
`;

exports[`Solid Form block 1`] = `
"import { createMutable, Show, For } from \\"solid-js\\";
import { css } from \\"solid-styled-components\\";

import { BuilderBlockComponent as BuilderBlock } from \\"@fake\\";
import { Builder, builder } from \\"@builder.io/sdk\\";
import { BuilderBlocks } from \\"@fake\\";
import { set } from \\"@fake\\";
import { get } from \\"@fake\\";

export default function MyComponent() {
  const state = createMutable({
    state: \\"unsubmitted\\",
    responseData: null,
    formErrorMessage: \\"\\",
    get submissionState() {
      return (Builder.isEditing && props.previewState) || state.state;
    },
    onSubmit(
      event: Event & {
        currentTarget: HTMLFormElement;
      }
    ) {
      const sendWithJs =
        props.sendWithJs || props.sendSubmissionsTo === \\"email\\";

      if (props.sendSubmissionsTo === \\"zapier\\") {
        event.preventDefault();
      } else if (sendWithJs) {
        if (!(props.action || props.sendSubmissionsTo === \\"email\\")) {
          event.preventDefault();
          return;
        }

        event.preventDefault();
        const el = event.currentTarget;
        const headers = props.customHeaders || {};
        let body: any;
        const formData = new FormData(el); // TODO: maybe support null

        const formPairs: {
          key: string;
          value: File | boolean | number | string | FileList;
        }[] = Array.from(
          event.currentTarget.querySelectorAll(\\"input,select,textarea\\")
        )
          .filter((el) => !!(el as HTMLInputElement).name)
          .map((el) => {
            let value: any;
            const key = (el as HTMLImageElement).name;

            if (el instanceof HTMLInputElement) {
              if (el.type === \\"radio\\") {
                if (el.checked) {
                  value = el.name;
                  return {
                    key,
                    value,
                  };
                }
              } else if (el.type === \\"checkbox\\") {
                value = el.checked;
              } else if (el.type === \\"number\\" || el.type === \\"range\\") {
                const num = el.valueAsNumber;

                if (!isNaN(num)) {
                  value = num;
                }
              } else if (el.type === \\"file\\") {
                // TODO: one vs multiple files
                value = el.files;
              } else {
                value = el.value;
              }
            } else {
              value = (el as HTMLInputElement).value;
            }

            return {
              key,
              value,
            };
          });
        let contentType = props.contentType;

        if (props.sendSubmissionsTo === \\"email\\") {
          contentType = \\"multipart/form-data\\";
        }

        Array.from(formPairs).forEach(({ value }) => {
          if (
            value instanceof File ||
            (Array.isArray(value) && value[0] instanceof File) ||
            value instanceof FileList
          ) {
            contentType = \\"multipart/form-data\\";
          }
        }); // TODO: send as urlEncoded or multipart by default
        // because of ease of use and reliability in browser API
        // for encoding the form?

        if (contentType !== \\"application/json\\") {
          body = formData;
        } else {
          // Json
          const json = {};
          Array.from(formPairs).forEach(({ value, key }) => {
            set(json, key, value);
          });
          body = JSON.stringify(json);
        }

        if (contentType && contentType !== \\"multipart/form-data\\") {
          if (
            // Zapier doesn't allow content-type header to be sent from browsers
            !(sendWithJs && props.action?.includes(\\"zapier.com\\"))
          ) {
            headers[\\"content-type\\"] = contentType;
          }
        }

        const presubmitEvent = new CustomEvent(\\"presubmit\\", {
          detail: {
            body,
          },
        });

        if (formRef) {
          formRef.dispatchEvent(presubmitEvent);

          if (presubmitEvent.defaultPrevented) {
            return;
          }
        }

        state.state = \\"sending\\";
        const formUrl = \`\${
          builder.env === \\"dev\\" ? \\"http://localhost:5000\\" : \\"https://builder.io\\"
        }/api/v1/form-submit?apiKey=\${builder.apiKey}&to=\${btoa(
          props.sendSubmissionsToEmail || \\"\\"
        )}&name=\${encodeURIComponent(props.name || \\"\\")}\`;
        fetch(
          props.sendSubmissionsTo === \\"email\\" ? formUrl : props.action!, // TODO: throw error if no action URL
          {
            body,
            headers,
            method: props.method || \\"post\\",
          }
        ).then(
          async (res) => {
            let body;
            const contentType = res.headers.get(\\"content-type\\");

            if (contentType && contentType.indexOf(\\"application/json\\") !== -1) {
              body = await res.json();
            } else {
              body = await res.text();
            }

            if (!res.ok && props.errorMessagePath) {
              // TODO: allow supplying an error formatter function
              let message = get(body, props.errorMessagePath);

              if (message) {
                if (typeof message !== \\"string\\") {
                  // TODO: ideally convert json to yaml so it woul dbe like
                  // error: - email has been taken
                  message = JSON.stringify(message);
                }

                state.formErrorMessage = message;
              }
            }

            state.responseData = body;
            state.state = res.ok ? \\"success\\" : \\"error\\";

            if (res.ok) {
              const submitSuccessEvent = new CustomEvent(\\"submit:success\\", {
                detail: {
                  res,
                  body,
                },
              });

              if (formRef) {
                formRef.dispatchEvent(submitSuccessEvent);

                if (submitSuccessEvent.defaultPrevented) {
                  return;
                } // TODO: option to turn this on/off?

                if (props.resetFormOnSubmit !== false) {
                  formRef.reset();
                }
              } // TODO: client side route event first that can be preventDefaulted

              if (props.successUrl) {
                if (formRef) {
                  const event = new CustomEvent(\\"route\\", {
                    detail: {
                      url: props.successUrl,
                    },
                  });
                  formRef.dispatchEvent(event);

                  if (!event.defaultPrevented) {
                    location.href = props.successUrl;
                  }
                } else {
                  location.href = props.successUrl;
                }
              }
            }
          },
          (err) => {
            const submitErrorEvent = new CustomEvent(\\"submit:error\\", {
              detail: {
                error: err,
              },
            });

            if (formRef) {
              formRef.dispatchEvent(submitErrorEvent);

              if (submitErrorEvent.defaultPrevented) {
                return;
              }
            }

            state.responseData = err;
            state.state = \\"error\\";
          }
        );
      }
    },
  });

  const formRef = useRef();

  return (
    <form
      {...props.attributes}
      validate={props.validate}
      ref={formRef}
      action={!props.sendWithJs && props.action}
      method={props.method}
      name={props.name}
      onSubmit={(event) => state.onSubmit(event)}
    >
      <Show when={props.builderBlock && props.builderBlock.children}>
        <For each={props.builderBlock?.children}>
          <BuilderBlockComponent
            key={block.id}
            block={block}
          ></BuilderBlockComponent>
        </For>
      </Show>

      <Show when={state.submissionState === \\"error\\"}>
        <BuilderBlocks
          dataPath=\\"errorMessage\\"
          blocks={props.errorMessage!}
        ></BuilderBlocks>
      </Show>

      <Show when={state.submissionState === \\"sending\\"}>
        <BuilderBlocks
          dataPath=\\"sendingMessage\\"
          blocks={props.sendingMessage!}
        ></BuilderBlocks>
      </Show>

      <Show when={state.submissionState === \\"error\\" && state.responseData}>
        <pre
          class={css({
            padding: \\"10px\\",
            color: \\"red\\",
            textAlign: \\"center\\",
          })}
        >
          {JSON.stringify(state.responseData, null, 2)}
        </pre>
      </Show>

      <Show when={state.submissionState === \\"success\\"}>
        <BuilderBlocks
          dataPath=\\"successMessage\\"
          blocks={props.successMessage!}
        ></BuilderBlocks>
      </Show>
    </form>
  );
}
"
`;

exports[`Solid Img 1`] = `
"import { createMutable, Show, For } from \\"solid-js\\";

import { Builder } from \\"@builder.io/sdk\\";

export default function MyComponent() {
  const state = createMutable({});

  return (
    <img
      {...props.attributes}
      style={{
        objectFit: props.backgroundSize || \\"cover\\",
        objectPosition: props.backgroundPosition || \\"center\\",
      }}
      key={(Builder.isEditing && props.imgSrc) || \\"default-key\\"}
      alt={props.altText}
      src={props.imgSrc}
    />
  );
}
"
`;

exports[`Solid Input block 1`] = `
"import { createMutable, Show, For } from \\"solid-js\\";

import { Builder } from \\"@builder.io/sdk\\";

export default function MyComponent() {
  const state = createMutable({});

  return (
    <input
      {...props.attributes}
      key={
        Builder.isEditing && props.defaultValue
          ? props.defaultValue
          : \\"default-key\\"
      }
      placeholder={props.placeholder}
      type={props.type}
      name={props.name}
      value={props.value}
      defaultValue={props.defaultValue}
      required={props.required}
    />
  );
}
"
`;

exports[`Solid Section 1`] = `
"import { createMutable, Show, For } from \\"solid-js\\";

export default function MyComponent() {
  const state = createMutable({});

  return (
    <section
      {...props.attributes}
      style={
        props.maxWidth && typeof props.maxWidth === \\"number\\"
          ? {
              maxWidth: props.maxWidth,
            }
          : undefined
      }
    >
      {props.children}
    </section>
  );
}
"
`;

exports[`Solid Select block 1`] = `
"import { createMutable, Show, For } from \\"solid-js\\";

import { Builder } from \\"@builder.io/sdk\\";

export default function MyComponent() {
  const state = createMutable({});

  return (
    <select
      {...props.attributes}
      value={props.value}
      key={
        Builder.isEditing && props.defaultValue
          ? props.defaultValue
          : \\"default-key\\"
      }
      defaultValue={props.defaultValue}
      name={props.name}
    >
      <For each={props.options}>
        <option value={option.value}>{option.name || option.value}</option>
      </For>
    </select>
  );
}
"
`;

exports[`Solid Submit button block 1`] = `
"import { createMutable, Show, For } from \\"solid-js\\";

export default function MyComponent() {
  const state = createMutable({});

  return (
    <button {...props.attributes} type=\\"submit\\">
      {props.text}
    </button>
  );
}
"
`;

exports[`Solid Text 1`] = `
"import { createMutable, Show, For } from \\"solid-js\\";

import { Builder } from \\"@builder.io/sdk\\";

export default function MyComponent() {
  const state = createMutable({});

  return (
    <div
      contentEditable={allowEditingText || undefined}
      innerHTML={props.text || props.content || \\"\\"}
    ></div>
  );
}
"
`;

exports[`Solid Textarea 1`] = `
"import { createMutable, Show, For } from \\"solid-js\\";

export default function MyComponent() {
  const state = createMutable({});

  return (
    <textarea
      {...props.attributes}
      placeholder={props.placeholder}
      name={props.name}
      value={props.value}
      defaultValue={props.defaultValue}
    ></textarea>
  );
}
"
`;

exports[`Solid Video 1`] = `
"import { createMutable, Show, For } from \\"solid-js\\";

export default function MyComponent() {
  const state = createMutable({});

  return (
    <video
      {...props.attributes}
      preload=\\"none\\"
      style={{
        width: \\"100%\\",
        height: \\"100%\\",
        ...props.attributes?.style,
        objectFit: props.fit,
        objectPosition: props.position,
        // Hack to get object fit to work as expected and
        // not have the video overflow
        borderRadius: 1,
      }}
      key={props.video || \\"no-src\\"}
      poster={props.posterImage}
      autoPlay={props.autoPlay}
      muted={props.muted}
      controls={props.controls}
      loop={props.loop}
    ></video>
  );
}
"
`;
