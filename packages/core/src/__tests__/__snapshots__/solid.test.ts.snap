// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Solid Basic 1`] = `
"import { createMutable } from \\"solid-js/store\\";

function MyBasicComponent(props) {
  const state = createMutable({ name: \\"Steve\\" });

  return (
    <div>
      <input
        value={state.name}
        onInput={(event) => (state.name = event.target.value)}
      />
      Hello! I can run in React, Vue, Solid, or Liquid!
    </div>
  );
}

export default MyBasicComponent;
"
`;

exports[`Solid Button 1`] = `
"import { Show } from \\"solid-js\\";

function Button(props) {
  return (
    <>
      <Show when={props.link}>
        <a
          {...props.attributes}
          href={props.link}
          target={props.openLinkInNewTab ? \\"_blank\\" : undefined}
        >
          {props.text}
        </a>
      </Show>
      <Show when={!props.link}>
        <button {...props.attributes} type=\\"button\\">
          {props.text}
        </button>
      </Show>
    </>
  );
}

export default Button;
"
`;

exports[`Solid Columns 1`] = `
"import { For } from \\"solid-js\\";

import { createMutable } from \\"solid-js/store\\";
import { css } from \\"solid-styled-components\\";

function Column(props) {
  const state = createMutable({
    getColumns() {
      return props.columns || [];
    },
    getGutterSize() {
      return typeof props.space === \\"number\\" ? props.space || 0 : 20;
    },
    getWidth(index: number) {
      const columns = this.getColumns();
      return (columns[index] && columns[index].width) || 100 / columns.length;
    },
    getColumnCssWidth(index: number) {
      const columns = this.getColumns();
      const gutterSize = this.getGutterSize();
      const subtractWidth =
        (gutterSize * (columns.length - 1)) / columns.length;
      return \`calc(\${this.getWidth(index)}% - \${subtractWidth}px)\`;
    },
  });

  return (
    <div
      class={css({
        display: \\"flex\\",
        flexDirection: \\"column\\",
        alignItems: \\"stretch\\",
        lineHeight: \\"normal\\",
        \\"@media (max-width: 999px)\\": {
          flexDirection: \\"row\\",
        },
        \\"@media (max-width: 639px)\\": {
          flexDirection: \\"row-reverse\\",
        },
      })}
    >
      <For each={props.columns}>
        {(column, _index) => {
          const index = _index();
          return (
            <div
              class={css({
                flexGrow: \\"1\\",
              })}
            >
              {column.content}
              {index}
            </div>
          );
        }}
      </For>
    </div>
  );
}

export default Column;
"
`;

exports[`Solid CustomCode 1`] = `
"import { createMutable } from \\"solid-js/store\\";

function CustomCode(props) {
  const state = createMutable({
    scriptsInserted: [],
    scriptsRun: [],
    findAndRunScripts() {
      // TODO: Move this function to standalone one in '@builder.io/utils'
      if (elem && typeof window !== \\"undefined\\") {
        /** @type {HTMLScriptElement[]} */
        const scripts = elem.getElementsByTagName(\\"script\\");

        for (let i = 0; i < scripts.length; i++) {
          const script = scripts[i];

          if (script.src) {
            if (state.scriptsInserted.includes(script.src)) {
              continue;
            }

            state.scriptsInserted.push(script.src);
            const newScript = document.createElement(\\"script\\");
            newScript.async = true;
            newScript.src = script.src;
            document.head.appendChild(newScript);
          } else if (
            !script.type ||
            [
              \\"text/javascript\\",
              \\"application/javascript\\",
              \\"application/ecmascript\\",
            ].includes(script.type)
          ) {
            if (state.scriptsRun.includes(script.innerText)) {
              continue;
            }

            try {
              state.scriptsRun.push(script.innerText);
              new Function(script.innerText)();
            } catch (error) {
              console.warn(\\"\`CustomCode\`: Error running script:\\", error);
            }
          }
        }
      }
    },
  });

  const elem = useRef();

  onMount(() => {
    state.findAndRunScripts();
  });

  return (
    <div
      class={
        \\"builder-custom-code\\" + (props.replaceNodes ? \\" replace-nodes\\" : \\"\\")
      }
      ref={elem}
      innerHTML={props.code}
    ></div>
  );
}

export default CustomCode;
"
`;

exports[`Solid Embed 1`] = `
"import { createMutable } from \\"solid-js/store\\";

function CustomCode(props) {
  const state = createMutable({
    scriptsInserted: [],
    scriptsRun: [],
    findAndRunScripts() {
      // TODO: Move this function to standalone one in '@builder.io/utils'
      if (elem && typeof window !== \\"undefined\\") {
        /** @type {HTMLScriptElement[]} */
        const scripts = elem.getElementsByTagName(\\"script\\");

        for (let i = 0; i < scripts.length; i++) {
          const script = scripts[i];

          if (script.src) {
            if (state.scriptsInserted.includes(script.src)) {
              continue;
            }

            state.scriptsInserted.push(script.src);
            const newScript = document.createElement(\\"script\\");
            newScript.async = true;
            newScript.src = script.src;
            document.head.appendChild(newScript);
          } else if (
            !script.type ||
            [
              \\"text/javascript\\",
              \\"application/javascript\\",
              \\"application/ecmascript\\",
            ].includes(script.type)
          ) {
            if (state.scriptsRun.includes(script.innerText)) {
              continue;
            }

            try {
              state.scriptsRun.push(script.innerText);
              new Function(script.innerText)();
            } catch (error) {
              console.warn(\\"\`CustomCode\`: Error running script:\\", error);
            }
          }
        }
      }
    },
  });

  const elem = useRef();

  onMount(() => {
    state.findAndRunScripts();
  });

  return (
    <div
      class={
        \\"builder-custom-code\\" + (props.replaceNodes ? \\" replace-nodes\\" : \\"\\")
      }
      ref={elem}
      innerHTML={props.code}
    ></div>
  );
}

export default CustomCode;
"
`;

exports[`Solid Form block 1`] = `
"import { Show, For } from \\"solid-js\\";

import { createMutable } from \\"solid-js/store\\";
import { css } from \\"solid-styled-components\\";

import { BuilderBlockComponent as BuilderBlock } from \\"@fake\\";
import { Builder, builder } from \\"@builder.io/sdk\\";
import { BuilderBlocks } from \\"@fake\\";
import { set } from \\"@fake\\";
import { get } from \\"@fake\\";

function FormComponent(props) {
  const state = createMutable({
    state: \\"unsubmitted\\",
    responseData: null,
    formErrorMessage: \\"\\",
    get submissionState() {
      return (Builder.isEditing && props.previewState) || state.state;
    },
    onSubmit(
      event: Event & {
        currentTarget: HTMLFormElement;
      }
    ) {
      const sendWithJs =
        props.sendWithJs || props.sendSubmissionsTo === \\"email\\";

      if (props.sendSubmissionsTo === \\"zapier\\") {
        event.preventDefault();
      } else if (sendWithJs) {
        if (!(props.action || props.sendSubmissionsTo === \\"email\\")) {
          event.preventDefault();
          return;
        }

        event.preventDefault();
        const el = event.currentTarget;
        const headers = props.customHeaders || {};
        let body: any;
        const formData = new FormData(el); // TODO: maybe support null

        const formPairs: {
          key: string;
          value: File | boolean | number | string | FileList;
        }[] = Array.from(
          event.currentTarget.querySelectorAll(\\"input,select,textarea\\")
        )
          .filter((el) => !!(el as HTMLInputElement).name)
          .map((el) => {
            let value: any;
            const key = (el as HTMLImageElement).name;

            if (el instanceof HTMLInputElement) {
              if (el.type === \\"radio\\") {
                if (el.checked) {
                  value = el.name;
                  return {
                    key,
                    value,
                  };
                }
              } else if (el.type === \\"checkbox\\") {
                value = el.checked;
              } else if (el.type === \\"number\\" || el.type === \\"range\\") {
                const num = el.valueAsNumber;

                if (!isNaN(num)) {
                  value = num;
                }
              } else if (el.type === \\"file\\") {
                // TODO: one vs multiple files
                value = el.files;
              } else {
                value = el.value;
              }
            } else {
              value = (el as HTMLInputElement).value;
            }

            return {
              key,
              value,
            };
          });
        let contentType = props.contentType;

        if (props.sendSubmissionsTo === \\"email\\") {
          contentType = \\"multipart/form-data\\";
        }

        Array.from(formPairs).forEach(({ value }) => {
          if (
            value instanceof File ||
            (Array.isArray(value) && value[0] instanceof File) ||
            value instanceof FileList
          ) {
            contentType = \\"multipart/form-data\\";
          }
        }); // TODO: send as urlEncoded or multipart by default
        // because of ease of use and reliability in browser API
        // for encoding the form?

        if (contentType !== \\"application/json\\") {
          body = formData;
        } else {
          // Json
          const json = {};
          Array.from(formPairs).forEach(({ value, key }) => {
            set(json, key, value);
          });
          body = JSON.stringify(json);
        }

        if (contentType && contentType !== \\"multipart/form-data\\") {
          if (
            /* Zapier doesn't allow content-type header to be sent from browsers */
            !(sendWithJs && props.action?.includes(\\"zapier.com\\"))
          ) {
            headers[\\"content-type\\"] = contentType;
          }
        }

        const presubmitEvent = new CustomEvent(\\"presubmit\\", {
          detail: {
            body,
          },
        });

        if (formRef) {
          formRef.dispatchEvent(presubmitEvent);

          if (presubmitEvent.defaultPrevented) {
            return;
          }
        }

        state.state = \\"sending\\";
        const formUrl = \`\${
          builder.env === \\"dev\\" ? \\"http://localhost:5000\\" : \\"https://builder.io\\"
        }/api/v1/form-submit?apiKey=\${builder.apiKey}&to=\${btoa(
          props.sendSubmissionsToEmail || \\"\\"
        )}&name=\${encodeURIComponent(props.name || \\"\\")}\`;
        fetch(
          props.sendSubmissionsTo === \\"email\\" ? formUrl : props.action!,
          /* TODO: throw error if no action URL */
          {
            body,
            headers,
            method: props.method || \\"post\\",
          }
        ).then(
          async (res) => {
            let body;
            const contentType = res.headers.get(\\"content-type\\");

            if (contentType && contentType.indexOf(\\"application/json\\") !== -1) {
              body = await res.json();
            } else {
              body = await res.text();
            }

            if (!res.ok && props.errorMessagePath) {
              /* TODO: allow supplying an error formatter function */
              let message = get(body, props.errorMessagePath);

              if (message) {
                if (typeof message !== \\"string\\") {
                  /* TODO: ideally convert json to yaml so it woul dbe like
           error: - email has been taken */
                  message = JSON.stringify(message);
                }

                state.formErrorMessage = message;
              }
            }

            state.responseData = body;
            state.state = res.ok ? \\"success\\" : \\"error\\";

            if (res.ok) {
              const submitSuccessEvent = new CustomEvent(\\"submit:success\\", {
                detail: {
                  res,
                  body,
                },
              });

              if (formRef) {
                formRef.dispatchEvent(submitSuccessEvent);

                if (submitSuccessEvent.defaultPrevented) {
                  return;
                }
                /* TODO: option to turn this on/off? */

                if (props.resetFormOnSubmit !== false) {
                  formRef.reset();
                }
              }
              /* TODO: client side route event first that can be preventDefaulted */

              if (props.successUrl) {
                if (formRef) {
                  const event = new CustomEvent(\\"route\\", {
                    detail: {
                      url: props.successUrl,
                    },
                  });
                  formRef.dispatchEvent(event);

                  if (!event.defaultPrevented) {
                    location.href = props.successUrl;
                  }
                } else {
                  location.href = props.successUrl;
                }
              }
            }
          },
          (err) => {
            const submitErrorEvent = new CustomEvent(\\"submit:error\\", {
              detail: {
                error: err,
              },
            });

            if (formRef) {
              formRef.dispatchEvent(submitErrorEvent);

              if (submitErrorEvent.defaultPrevented) {
                return;
              }
            }

            state.responseData = err;
            state.state = \\"error\\";
          }
        );
      }
    },
  });

  const formRef = useRef();

  return (
    <form
      {...props.attributes}
      validate={props.validate}
      ref={formRef}
      action={!props.sendWithJs && props.action}
      method={props.method}
      name={props.name}
      onSubmit={(event) => state.onSubmit(event)}
    >
      <Show when={props.builderBlock && props.builderBlock.children}>
        <For each={props.builderBlock?.children}>
          {(block, _index) => {
            const index = _index();
            return (
              <BuilderBlockComponent
                key={block.id}
                block={block}
                index={index}
              ></BuilderBlockComponent>
            );
          }}
        </For>
      </Show>
      <Show when={state.submissionState === \\"error\\"}>
        <BuilderBlocks
          dataPath=\\"errorMessage\\"
          blocks={props.errorMessage}
        ></BuilderBlocks>
      </Show>
      <Show when={state.submissionState === \\"sending\\"}>
        <BuilderBlocks
          dataPath=\\"sendingMessage\\"
          blocks={props.sendingMessage}
        ></BuilderBlocks>
      </Show>
      <Show when={state.submissionState === \\"error\\" && state.responseData}>
        <pre
          class={css({
            padding: \\"10px\\",
            color: \\"red\\",
            textAlign: \\"center\\",
          })}
        >
          {JSON.stringify(state.responseData, null, 2)}
        </pre>
      </Show>
      <Show when={state.submissionState === \\"success\\"}>
        <BuilderBlocks
          dataPath=\\"successMessage\\"
          blocks={props.successMessage}
        ></BuilderBlocks>
      </Show>
    </form>
  );
}

export default FormComponent;
"
`;

exports[`Solid Image 1`] = `
"import { Show, onMount } from \\"solid-js\\";

import { createMutable } from \\"solid-js/store\\";
import { css } from \\"solid-styled-components\\";

function Image(props) {
  const state = createMutable({
    scrollListener: null,
    imageLoaded: false,
    load: false,
    setLoaded() {
      state.imageLoaded = true;
    },
    isBrowser() {
      return (
        typeof window !== \\"undefined\\" &&
        window.navigator.product != \\"ReactNative\\"
      );
    },
    useLazyLoading() {
      // TODO: Add more checks here, like testing for real web browsers
      return !!props.lazy && state.isBrowser();
    },
  });

  const pictureRef = useRef();

  onMount(() => {
    if (state.useLazyLoading()) {
      // throttled scroll capture listener
      const listener = () => {
        if (pictureRef) {
          const rect = pictureRef.getBoundingClientRect();
          const buffer = window.innerHeight / 2;

          if (rect.top < window.innerHeight + buffer) {
            state.load = true;
            state.scrollListener = null;
            window.removeEventListener(\\"scroll\\", listener);
          }
        }
      };

      state.scrollListener = listener;
      window.addEventListener(\\"scroll\\", listener, {
        capture: true,
        passive: true,
      });
      listener();
    }
  });

  return (
    <>
      <picture ref={pictureRef}>
        <Show when={!state.useLazyLoading() || state.load}>
          <img
            class={
              \\"builder-image\\" +
              (props.class ? \\" \\" + props.class : \\"\\") +
              \\" \\" +
              css({
                opacity: \\"1\\",
                transition: \\"opacity 0.2s ease-in-out\\",
                objectFit: \\"cover\\",
                objectPosition: \\"center\\",
              })
            }
            alt={props.altText}
            aria-role={props.altText ? \\"presentation\\" : undefined}
            src={props.image}
            onLoad={(event) => state.setLoaded()}
            srcset={props.srcset}
            sizes={props.sizes}
          />
        </Show>
        <source srcset={props.srcset} />
      </picture>
      {props.children}
    </>
  );
}

export default Image;
"
`;

exports[`Solid Img 1`] = `
"import { Builder } from \\"@builder.io/sdk\\";

function ImgComponent(props) {
  return (
    <img
      {...props.attributes}
      style={{
        \\"object-fit\\": props.backgroundSize || \\"cover\\",
        \\"object-position\\": props.backgroundPosition || \\"center\\",
      }}
      key={(Builder.isEditing && props.imgSrc) || \\"default-key\\"}
      alt={props.altText}
      src={props.imgSrc}
    />
  );
}

export default ImgComponent;
"
`;

exports[`Solid Input block 1`] = `
"import { Builder } from \\"@builder.io/sdk\\";

function FormInputComponent(props) {
  return (
    <input
      {...props.attributes}
      key={
        Builder.isEditing && props.defaultValue
          ? props.defaultValue
          : \\"default-key\\"
      }
      placeholder={props.placeholder}
      type={props.type}
      name={props.name}
      value={props.value}
      defaultValue={props.defaultValue}
      required={props.required}
    />
  );
}

export default FormInputComponent;
"
`;

exports[`Solid RawText 1`] = `
"function RawText(props) {
  return (
    <span
      class={props.attributes?.class || props.attributes?.className}
      innerHTML={props.text || \\"\\"}
    ></span>
  );
}

export default RawText;
"
`;

exports[`Solid Section 1`] = `
"function SectionComponent(props) {
  return (
    <section
      {...props.attributes}
      style={
        props.maxWidth && typeof props.maxWidth === \\"number\\"
          ? {
              \\"max-width\\": props.maxWidth,
            }
          : undefined
      }
    >
      {props.children}
    </section>
  );
}

export default SectionComponent;
"
`;

exports[`Solid Select block 1`] = `
"import { For } from \\"solid-js\\";

import { Builder } from \\"@builder.io/sdk\\";

function SelectComponent(props) {
  return (
    <select
      {...props.attributes}
      value={props.value}
      key={
        Builder.isEditing && props.defaultValue
          ? props.defaultValue
          : \\"default-key\\"
      }
      defaultValue={props.defaultValue}
      name={props.name}
    >
      <For each={props.options}>
        {(option, _index) => {
          const index = _index();
          return (
            <option value={option.value} data-index={index}>
              {option.name || option.value}
            </option>
          );
        }}
      </For>
    </select>
  );
}

export default SelectComponent;
"
`;

exports[`Solid Submit button block 1`] = `
"function SubmitButton(props) {
  return (
    <button {...props.attributes} type=\\"submit\\">
      {props.text}
    </button>
  );
}

export default SubmitButton;
"
`;

exports[`Solid Text 1`] = `
"import { Builder } from \\"@builder.io/sdk\\";

function Text(props) {
  return (
    <div
      contentEditable={allowEditingText || undefined}
      innerHTML={props.text || props.content || \\"\\"}
    ></div>
  );
}

export default Text;
"
`;

exports[`Solid Textarea 1`] = `
"function Textarea(props) {
  return (
    <textarea
      {...props.attributes}
      placeholder={props.placeholder}
      name={props.name}
      value={props.value}
      defaultValue={props.defaultValue}
    ></textarea>
  );
}

export default Textarea;
"
`;

exports[`Solid Video 1`] = `
"function Video(props) {
  return (
    <video
      {...props.attributes}
      preload=\\"none\\"
      style={{
        width: \\"100%\\",
        height: \\"100%\\",
        ...props.attributes?.style,
        \\"object-fit\\": props.fit,
        \\"object-position\\": props.position,
        // Hack to get object fit to work as expected and
        // not have the video overflow
        \\"border-radius\\": 1,
      }}
      key={props.video || \\"no-src\\"}
      poster={props.posterImage}
      autoPlay={props.autoPlay}
      muted={props.muted}
      controls={props.controls}
      loop={props.loop}
    ></video>
  );
}

export default Video;
"
`;
