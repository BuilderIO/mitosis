// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`Solid > jsx > Javascript Test > AdvancedRef 1`] = `
"import { Show, on, createEffect, createMemo, createSignal } from \\"solid-js\\";

function MyBasicRefComponent(props) {
  const [name, setName] = createSignal(\\"PatrickJS\\");

  function onBlur() {
    // Maintain focus
    inputRef.focus();
  }

  function lowerCaseName() {
    return name().toLowerCase();
  }

  let inputRef;
  let inputNoArgRef;

  const onUpdateFn_0_inputRef = createMemo(() => inputRef);
  const onUpdateFn_0_inputNoArgRef = createMemo(() => inputNoArgRef);
  function onUpdateFn_0() {
    console.log(\\"Received an update\\");
  }
  createEffect(
    on(
      () => [onUpdateFn_0_inputRef(), onUpdateFn_0_inputNoArgRef()],
      onUpdateFn_0
    )
  );

  return (
    <>
      <div>
        <Show when={props.showInput}>
          <>
            <input
              class=\\"input-8359a966\\"
              ref={inputRef}
              value={name()}
              onBlur={(event) => onBlur()}
              onInput={(event) => setName(event.target.value)}
            />
            <label for=\\"cars\\" ref={inputNoArgRef}>
              Choose a car:
            </label>
            <select name=\\"cars\\" id=\\"cars\\">
              <option value=\\"supra\\">GR Supra</option>
              <option value=\\"86\\">GR 86</option>
            </select>
          </>
        </Show>
        Hello
        {lowerCaseName()}! I can run in React, Qwik, Vue, Solid, or Web
        Component!
      </div>
      <style>{\`.input-8359a966 {
  color: red;
}\`}</style>
    </>
  );
}

export default MyBasicRefComponent;
"
`;

exports[`Solid > jsx > Javascript Test > AdvancedRef 2`] = `
"import { Show, on, createEffect, createMemo, createSignal } from \\"solid-js\\";

function MyBasicRefComponent(props) {
  const [name, setName] = createSignal(\\"PatrickJS\\");

  function onBlur() {
    // Maintain focus
    inputRef.focus();
  }

  function lowerCaseName() {
    return name().toLowerCase();
  }

  let inputRef;
  let inputNoArgRef;

  const onUpdateFn_0_inputRef = createMemo(() => inputRef);
  const onUpdateFn_0_inputNoArgRef = createMemo(() => inputNoArgRef);
  function onUpdateFn_0() {
    console.log(\\"Received an update\\");
  }
  createEffect(
    on(
      () => [onUpdateFn_0_inputRef(), onUpdateFn_0_inputNoArgRef()],
      onUpdateFn_0
    )
  );

  return (
    <>
      <div>
        <Show when={props.showInput}>
          <>
            <input
              class=\\"input-8359a966\\"
              ref={inputRef}
              value={name()}
              onBlur={(event) => onBlur()}
              onInput={(event) => setName(event.target.value)}
            />
            <label for=\\"cars\\" ref={inputNoArgRef}>
              Choose a car:
            </label>
            <select name=\\"cars\\" id=\\"cars\\">
              <option value=\\"supra\\">GR Supra</option>
              <option value=\\"86\\">GR 86</option>
            </select>
          </>
        </Show>
        Hello
        {lowerCaseName()}! I can run in React, Qwik, Vue, Solid, or Web
        Component!
      </div>
      <style>{\`.input-8359a966 {
  color: red;
}\`}</style>
    </>
  );
}

export default MyBasicRefComponent;
"
`;

exports[`Solid > jsx > Javascript Test > Basic 1`] = `
"import { createSignal, createMemo } from \\"solid-js\\";

export const DEFAULT_VALUES = {
  name: \\"Steve\\",
};

function MyBasicComponent(props) {
  const [name, setName] = createSignal(\\"Steve\\");

  const [age, setAge] = createSignal(1);

  const [sports, setSports] = createSignal([\\"\\"]);

  function underscore_fn_name() {
    return \\"bar\\";
  }

  return (
    <>
      <div class=\\"test div-6bae243e\\">
        <input
          value={DEFAULT_VALUES.name || name()}
          onInput={(myEvent) => setName(myEvent.target.value)}
        />
        Hello! I can run in React, Vue, Solid, or Liquid!
      </div>
      <style>{\`.div-6bae243e {
  padding: 10px;
}\`}</style>
    </>
  );
}

export default MyBasicComponent;
"
`;

exports[`Solid > jsx > Javascript Test > Basic 2`] = `
"import { Show, For, createSignal, createMemo } from \\"solid-js\\";

function MyBasicForShowComponent(props) {
  const [name, setName] = createSignal(\\"PatrickJS\\");

  const [names, setNames] = createSignal([\\"Steve\\", \\"PatrickJS\\"]);

  return (
    <>
      <div>
        <For each={names()}>
          {(person, _index) => {
            const index = _index();
            return (
              <Show when={person === name()}>
                <input
                  value={name()}
                  onInput={(event) => {
                    setName(event.target.value + \\" and \\" + person);
                  }}
                />
                Hello
                {person}! I can run in Qwik, Web Component, React, Vue, Solid,
                or Liquid!
              </Show>
            );
          }}
        </For>
      </div>
    </>
  );
}

export default MyBasicForShowComponent;
"
`;

exports[`Solid > jsx > Javascript Test > Basic 3`] = `
"import { createSignal, createMemo } from \\"solid-js\\";

export const DEFAULT_VALUES = {
  name: \\"Steve\\",
};

function MyBasicComponent(props) {
  const [name, setName] = createSignal(\\"Steve\\");

  const [age, setAge] = createSignal(1);

  const [sports, setSports] = createSignal([\\"\\"]);

  function underscore_fn_name() {
    return \\"bar\\";
  }

  return (
    <>
      <div class=\\"test div-6bae243e\\">
        <input
          value={DEFAULT_VALUES.name || name()}
          onInput={(myEvent) => setName(myEvent.target.value)}
        />
        Hello! I can run in React, Vue, Solid, or Liquid!
      </div>
      <style>{\`.div-6bae243e {
  padding: 10px;
}\`}</style>
    </>
  );
}

export default MyBasicComponent;
"
`;

exports[`Solid > jsx > Javascript Test > Basic 4`] = `
"import { Show, For, createSignal, createMemo } from \\"solid-js\\";

function MyBasicForShowComponent(props) {
  const [name, setName] = createSignal(\\"PatrickJS\\");

  const [names, setNames] = createSignal([\\"Steve\\", \\"PatrickJS\\"]);

  return (
    <>
      <div>
        <For each={names()}>
          {(person, _index) => {
            const index = _index();
            return (
              <Show when={person === name()}>
                <input
                  value={name()}
                  onInput={(event) => {
                    setName(event.target.value + \\" and \\" + person);
                  }}
                />
                Hello
                {person}! I can run in Qwik, Web Component, React, Vue, Solid,
                or Liquid!
              </Show>
            );
          }}
        </For>
      </div>
    </>
  );
}

export default MyBasicForShowComponent;
"
`;

exports[`Solid > jsx > Javascript Test > Basic Context 1`] = `
"import { useContext, onMount, createSignal, createMemo } from \\"solid-js\\";

import { Injector, MyService, createInjector } from \\"@dummy/injection-js\\";

function MyBasicComponent(props) {
  const [name, setName] = createSignal(\\"PatrickJS\\");

  function onChange() {
    const change = myService.method(\\"change\\");
    console.log(change);
  }

  const myService = useContext(MyService);

  const hi = myService.method(\\"hi\\");
  console.log(hi);

  onMount(() => {
    const bye = myService.method(\\"hi\\");
    console.log(bye);
  });

  return (
    <>
      <Injector.Provider value={createInjector()}>
        <div>
          {myService.method(\\"hello\\") + name()}
          Hello! I can run in React, Vue, Solid, or Liquid!
          <input onInput={(event) => onChange} />
        </div>
      </Injector.Provider>
    </>
  );
}

export default MyBasicComponent;
"
`;

exports[`Solid > jsx > Javascript Test > Basic Context 2`] = `
"import { useContext, onMount, createSignal, createMemo } from \\"solid-js\\";

import { Injector, MyService, createInjector } from \\"@dummy/injection-js\\";

function MyBasicComponent(props) {
  const [name, setName] = createSignal(\\"PatrickJS\\");

  function onChange() {
    const change = myService.method(\\"change\\");
    console.log(change);
  }

  const myService = useContext(MyService);

  const hi = myService.method(\\"hi\\");
  console.log(hi);

  onMount(() => {
    const bye = myService.method(\\"hi\\");
    console.log(bye);
  });

  return (
    <>
      <Injector.Provider value={createInjector()}>
        <div>
          {myService.method(\\"hello\\") + name()}
          Hello! I can run in React, Vue, Solid, or Liquid!
          <input onInput={(event) => onChange} />
        </div>
      </Injector.Provider>
    </>
  );
}

export default MyBasicComponent;
"
`;

exports[`Solid > jsx > Javascript Test > Basic OnMount Update 1`] = `
"import { onMount, createSignal, createMemo } from \\"solid-js\\";

function MyBasicOnMountUpdateComponent(props) {
  const [name, setName] = createSignal(\\"PatrickJS\\");

  const [names, setNames] = createSignal([\\"Steve\\", \\"PatrickJS\\"]);

  setName(\\"PatrickJS onInit\\" + props.hi);

  onMount(() => {
    setName(\\"PatrickJS onMount\\" + props.bye);
  });

  return (
    <>
      <div>
        Hello
        {name()}
      </div>
    </>
  );
}

export default MyBasicOnMountUpdateComponent;
"
`;

exports[`Solid > jsx > Javascript Test > Basic OnMount Update 2`] = `
"import { onMount, createSignal, createMemo } from \\"solid-js\\";

function MyBasicOnMountUpdateComponent(props) {
  const [name, setName] = createSignal(\\"PatrickJS\\");

  const [names, setNames] = createSignal([\\"Steve\\", \\"PatrickJS\\"]);

  setName(\\"PatrickJS onInit\\" + props.hi);

  onMount(() => {
    setName(\\"PatrickJS onMount\\" + props.bye);
  });

  return (
    <>
      <div>
        Hello
        {name()}
      </div>
    </>
  );
}

export default MyBasicOnMountUpdateComponent;
"
`;

exports[`Solid > jsx > Javascript Test > Basic Outputs 1`] = `
"import { onMount, createSignal, createMemo } from \\"solid-js\\";

function MyBasicOutputsComponent(props) {
  const [name, setName] = createSignal(\\"PatrickJS\\");

  onMount(() => {
    props.onMessage(name());
    props.onEvent(props.message);
  });

  return (
    <>
      <div></div>
    </>
  );
}

export default MyBasicOutputsComponent;
"
`;

exports[`Solid > jsx > Javascript Test > Basic Outputs 2`] = `
"import { onMount, createSignal, createMemo } from \\"solid-js\\";

function MyBasicOutputsComponent(props) {
  const [name, setName] = createSignal(\\"PatrickJS\\");

  onMount(() => {
    props.onMessage(name());
    props.onEvent(props.message);
  });

  return (
    <>
      <div></div>
    </>
  );
}

export default MyBasicOutputsComponent;
"
`;

exports[`Solid > jsx > Javascript Test > Basic Outputs Meta 1`] = `
"import { onMount, createSignal, createMemo } from \\"solid-js\\";

function MyBasicOutputsComponent(props) {
  const [name, setName] = createSignal(\\"PatrickJS\\");

  onMount(() => {
    props.onMessage(name());
    props.onEvent(props.message);
  });

  return (
    <>
      <div></div>
    </>
  );
}

export default MyBasicOutputsComponent;
"
`;

exports[`Solid > jsx > Javascript Test > Basic Outputs Meta 2`] = `
"import { onMount, createSignal, createMemo } from \\"solid-js\\";

function MyBasicOutputsComponent(props) {
  const [name, setName] = createSignal(\\"PatrickJS\\");

  onMount(() => {
    props.onMessage(name());
    props.onEvent(props.message);
  });

  return (
    <>
      <div></div>
    </>
  );
}

export default MyBasicOutputsComponent;
"
`;

exports[`Solid > jsx > Javascript Test > BasicAttribute 1`] = `
"function MyComponent(props) {
  return (
    <>
      <input autocapitalize=\\"on\\" autocomplete=\\"on\\" spellcheck={true} />
    </>
  );
}

export default MyComponent;
"
`;

exports[`Solid > jsx > Javascript Test > BasicAttribute 2`] = `
"function MyComponent(props) {
  return (
    <>
      <input autocapitalize=\\"on\\" autocomplete=\\"on\\" spellcheck={true} />
    </>
  );
}

export default MyComponent;
"
`;

exports[`Solid > jsx > Javascript Test > BasicBooleanAttribute 1`] = `
"import { Show } from \\"solid-js\\";

import MyBooleanAttributeComponent from \\"./basic-boolean-attribute-component.raw\\";

function MyBooleanAttribute(props) {
  return (
    <>
      <div>
        <Show when={props.children}>
          {props.children}
          {props.type}
        </Show>
        <MyBooleanAttributeComponent
          toggle={true}
        ></MyBooleanAttributeComponent>
        <MyBooleanAttributeComponent
          toggle={true}
        ></MyBooleanAttributeComponent>
        <MyBooleanAttributeComponent list={null}></MyBooleanAttributeComponent>
      </div>
    </>
  );
}

export default MyBooleanAttribute;
"
`;

exports[`Solid > jsx > Javascript Test > BasicBooleanAttribute 2`] = `
"import { Show } from \\"solid-js\\";

import MyBooleanAttributeComponent from \\"./basic-boolean-attribute-component.raw\\";

function MyBooleanAttribute(props) {
  return (
    <>
      <div>
        <Show when={props.children}>
          {props.children}
          {props.type}
        </Show>
        <MyBooleanAttributeComponent
          toggle={true}
        ></MyBooleanAttributeComponent>
        <MyBooleanAttributeComponent
          toggle={true}
        ></MyBooleanAttributeComponent>
        <MyBooleanAttributeComponent list={null}></MyBooleanAttributeComponent>
      </div>
    </>
  );
}

export default MyBooleanAttribute;
"
`;

exports[`Solid > jsx > Javascript Test > BasicChildComponent 1`] = `
"import { createSignal, createMemo } from \\"solid-js\\";

import MyBasicOnMountUpdateComponent from \\"./basic-onMount-update.raw\\";
import MyBasicComponent from \\"./basic.raw\\";

function MyBasicChildComponent(props) {
  const [name, setName] = createSignal(\\"Steve\\");

  const [dev, setDev] = createSignal(\\"PatrickJS\\");

  return (
    <>
      <div>
        <MyBasicComponent id={dev()}></MyBasicComponent>
        <div>
          <MyBasicOnMountUpdateComponent
            hi={name()}
            bye={dev()}
          ></MyBasicOnMountUpdateComponent>
        </div>
      </div>
    </>
  );
}

export default MyBasicChildComponent;
"
`;

exports[`Solid > jsx > Javascript Test > BasicChildComponent 2`] = `
"import { createSignal, createMemo } from \\"solid-js\\";

import MyBasicOnMountUpdateComponent from \\"./basic-onMount-update.raw\\";
import MyBasicComponent from \\"./basic.raw\\";

function MyBasicChildComponent(props) {
  const [name, setName] = createSignal(\\"Steve\\");

  const [dev, setDev] = createSignal(\\"PatrickJS\\");

  return (
    <>
      <div>
        <MyBasicComponent id={dev()}></MyBasicComponent>
        <div>
          <MyBasicOnMountUpdateComponent
            hi={name()}
            bye={dev()}
          ></MyBasicOnMountUpdateComponent>
        </div>
      </div>
    </>
  );
}

export default MyBasicChildComponent;
"
`;

exports[`Solid > jsx > Javascript Test > BasicFor 1`] = `
"import { For, onMount, createSignal, createMemo } from \\"solid-js\\";

function MyBasicForComponent(props) {
  const [name, setName] = createSignal(\\"PatrickJS\\");

  const [names, setNames] = createSignal([\\"Steve\\", \\"PatrickJS\\"]);

  onMount(() => {
    console.log(\\"onMount code\\");
  });

  return (
    <>
      <div>
        <For each={names()}>
          {(person, _index) => {
            const index = _index();
            return (
              <>
                <input
                  value={name()}
                  onInput={(event) => {
                    setName(event.target.value + \\" and \\" + person);
                  }}
                />
                Hello
                {person}! I can run in Qwik, Web Component, React, Vue, Solid,
                or Liquid!
              </>
            );
          }}
        </For>
      </div>
    </>
  );
}

export default MyBasicForComponent;
"
`;

exports[`Solid > jsx > Javascript Test > BasicFor 2`] = `
"import { For, onMount, createSignal, createMemo } from \\"solid-js\\";

function MyBasicForComponent(props) {
  const [name, setName] = createSignal(\\"PatrickJS\\");

  const [names, setNames] = createSignal([\\"Steve\\", \\"PatrickJS\\"]);

  onMount(() => {
    console.log(\\"onMount code\\");
  });

  return (
    <>
      <div>
        <For each={names()}>
          {(person, _index) => {
            const index = _index();
            return (
              <>
                <input
                  value={name()}
                  onInput={(event) => {
                    setName(event.target.value + \\" and \\" + person);
                  }}
                />
                Hello
                {person}! I can run in Qwik, Web Component, React, Vue, Solid,
                or Liquid!
              </>
            );
          }}
        </For>
      </div>
    </>
  );
}

export default MyBasicForComponent;
"
`;

exports[`Solid > jsx > Javascript Test > BasicRef 1`] = `
"import { Show, createSignal, createMemo } from \\"solid-js\\";

function MyBasicRefComponent(props) {
  const [name, setName] = createSignal(\\"PatrickJS\\");

  function onBlur() {
    // Maintain focus
    inputRef.focus();
  }

  function lowerCaseName() {
    return name().toLowerCase();
  }

  let inputRef;
  let inputNoArgRef;

  return (
    <>
      <div>
        <Show when={props.showInput}>
          <>
            <input
              class=\\"input-1360a7e4\\"
              ref={inputRef}
              value={name()}
              onBlur={(event) => onBlur()}
              onInput={(event) => setName(event.target.value)}
            />
            <label for=\\"cars\\" ref={inputNoArgRef}>
              Choose a car:
            </label>
            <select name=\\"cars\\" id=\\"cars\\">
              <option value=\\"supra\\">GR Supra</option>
              <option value=\\"86\\">GR 86</option>
            </select>
          </>
        </Show>
        Hello
        {lowerCaseName()}! I can run in React, Qwik, Vue, Solid, or Web
        Component!
      </div>
      <style>{\`.input-1360a7e4 {
  color: red;
}\`}</style>
    </>
  );
}

export default MyBasicRefComponent;
"
`;

exports[`Solid > jsx > Javascript Test > BasicRef 2`] = `
"import { Show, createSignal, createMemo } from \\"solid-js\\";

function MyBasicRefComponent(props) {
  const [name, setName] = createSignal(\\"PatrickJS\\");

  function onBlur() {
    // Maintain focus
    inputRef.focus();
  }

  function lowerCaseName() {
    return name().toLowerCase();
  }

  let inputRef;
  let inputNoArgRef;

  return (
    <>
      <div>
        <Show when={props.showInput}>
          <>
            <input
              class=\\"input-1360a7e4\\"
              ref={inputRef}
              value={name()}
              onBlur={(event) => onBlur()}
              onInput={(event) => setName(event.target.value)}
            />
            <label for=\\"cars\\" ref={inputNoArgRef}>
              Choose a car:
            </label>
            <select name=\\"cars\\" id=\\"cars\\">
              <option value=\\"supra\\">GR Supra</option>
              <option value=\\"86\\">GR 86</option>
            </select>
          </>
        </Show>
        Hello
        {lowerCaseName()}! I can run in React, Qwik, Vue, Solid, or Web
        Component!
      </div>
      <style>{\`.input-1360a7e4 {
  color: red;
}\`}</style>
    </>
  );
}

export default MyBasicRefComponent;
"
`;

exports[`Solid > jsx > Javascript Test > BasicRefAssignment 1`] = `
"import { createSignal, createMemo } from \\"solid-js\\";

function MyBasicRefAssignmentComponent(props) {
  function handlerClick(event) {
    event.preventDefault();
    console.log(\\"current value\\", holdValueRef);
    holdValueRef = holdValueRef + \\"JS\\";
  }

  return (
    <>
      <div>
        <button onClick={(evt) => handlerClick(evt)}>Click</button>
      </div>
    </>
  );
}

export default MyBasicRefAssignmentComponent;
"
`;

exports[`Solid > jsx > Javascript Test > BasicRefAssignment 2`] = `
"import { createSignal, createMemo } from \\"solid-js\\";

function MyBasicRefAssignmentComponent(props) {
  function handlerClick(event) {
    event.preventDefault();
    console.log(\\"current value\\", holdValueRef);
    holdValueRef = holdValueRef + \\"JS\\";
  }

  return (
    <>
      <div>
        <button onClick={(evt) => handlerClick(evt)}>Click</button>
      </div>
    </>
  );
}

export default MyBasicRefAssignmentComponent;
"
`;

exports[`Solid > jsx > Javascript Test > BasicRefPrevious 1`] = `
"import { on, createEffect, createMemo, createSignal } from \\"solid-js\\";

export function usePrevious(value) {
  // The ref object is a generic container whose current property is mutable ...
  // ... and can hold any value, similar to an instance property on a class
  let ref = useRef(null); // Store current value in ref

  onUpdate(() => {
    ref = value;
  }, [value]); // Only re-run if value changes
  // Return previous value (happens before update in useEffect above)

  return ref;
}

function MyPreviousComponent(props) {
  const [count, setCount] = createSignal(0);

  const onUpdateFn_0_count__ = createMemo(() => count());
  function onUpdateFn_0() {
    prevCount = count();
  }
  createEffect(on(() => [onUpdateFn_0_count__()], onUpdateFn_0));

  return (
    <>
      <div>
        <h1>
          Now:
          {count()}, before:
          {prevCount}
        </h1>
        <button onClick={(event) => setCount(1)}>Increment</button>
      </div>
    </>
  );
}

export default MyPreviousComponent;
"
`;

exports[`Solid > jsx > Javascript Test > BasicRefPrevious 2`] = `
"import { on, createEffect, createMemo, createSignal } from \\"solid-js\\";

export function usePrevious(value) {
  // The ref object is a generic container whose current property is mutable ...
  // ... and can hold any value, similar to an instance property on a class
  let ref = useRef(null); // Store current value in ref

  onUpdate(() => {
    ref = value;
  }, [value]); // Only re-run if value changes
  // Return previous value (happens before update in useEffect above)

  return ref;
}

function MyPreviousComponent(props) {
  const [count, setCount] = createSignal(0);

  const onUpdateFn_0_count__ = createMemo(() => count());
  function onUpdateFn_0() {
    prevCount = count();
  }
  createEffect(on(() => [onUpdateFn_0_count__()], onUpdateFn_0));

  return (
    <>
      <div>
        <h1>
          Now:
          {count()}, before:
          {prevCount}
        </h1>
        <button onClick={(event) => setCount(1)}>Increment</button>
      </div>
    </>
  );
}

export default MyPreviousComponent;
"
`;

exports[`Solid > jsx > Javascript Test > Button 1`] = `
"import { Show } from \\"solid-js\\";

function Button(props) {
  return (
    <>
      <div>
        <Show when={props.link}>
          <a
            {...props.attributes}
            href={props.link}
            target={props.openLinkInNewTab ? \\"_blank\\" : undefined}
          >
            {props.text}
          </a>
        </Show>
        <Show when={!props.link}>
          <button type=\\"button\\" {...props.attributes}>
            {props.text}
          </button>
        </Show>
      </div>
    </>
  );
}

export default Button;
"
`;

exports[`Solid > jsx > Javascript Test > Button 2`] = `
"import { Show } from \\"solid-js\\";

function Button(props) {
  return (
    <>
      <div>
        <Show when={props.link}>
          <a
            {...props.attributes}
            href={props.link}
            target={props.openLinkInNewTab ? \\"_blank\\" : undefined}
          >
            {props.text}
          </a>
        </Show>
        <Show when={!props.link}>
          <button type=\\"button\\" {...props.attributes}>
            {props.text}
          </button>
        </Show>
      </div>
    </>
  );
}

export default Button;
"
`;

exports[`Solid > jsx > Javascript Test > Columns 1`] = `
"import { For, createSignal, createMemo } from \\"solid-js\\";

function Column(props) {
  function getColumns() {
    return props.columns || [];
  }

  function getGutterSize() {
    return typeof props.space === \\"number\\" ? props.space || 0 : 20;
  }

  function getWidth(index) {
    const columns = getColumns();
    return (columns[index] && columns[index].width) || 100 / columns.length;
  }

  function getColumnCssWidth(index) {
    const columns = getColumns();
    const gutterSize = getGutterSize();
    const subtractWidth = (gutterSize * (columns.length - 1)) / columns.length;
    return \`calc(\${getWidth(index)}% - \${subtractWidth}px)\`;
  }

  return (
    <>
      <div class=\\"builder-columns div-8ebf4416\\">
        <For each={props.columns}>
          {(column, _index) => {
            const index = _index();
            return (
              <div class=\\"builder-column div-8ebf4416-2\\">
                {column.content}
                {index}
              </div>
            );
          }}
        </For>
      </div>
      <style>{\`.div-8ebf4416 {
  display: flex;
  flex-direction: column;
  align-items: stretch;
  line-height: normal;
}@media (max-width: 999px) { .div-8ebf4416 {   flex-direction: row; } }@media (max-width: 639px) { .div-8ebf4416 {   flex-direction: row-reverse; } }.div-8ebf4416-2 {
  flex-grow: 1;
}\`}</style>
    </>
  );
}

export default Column;
"
`;

exports[`Solid > jsx > Javascript Test > Columns 2`] = `
"import { For, createSignal, createMemo } from \\"solid-js\\";

function Column(props) {
  function getColumns() {
    return props.columns || [];
  }

  function getGutterSize() {
    return typeof props.space === \\"number\\" ? props.space || 0 : 20;
  }

  function getWidth(index) {
    const columns = getColumns();
    return (columns[index] && columns[index].width) || 100 / columns.length;
  }

  function getColumnCssWidth(index) {
    const columns = getColumns();
    const gutterSize = getGutterSize();
    const subtractWidth = (gutterSize * (columns.length - 1)) / columns.length;
    return \`calc(\${getWidth(index)}% - \${subtractWidth}px)\`;
  }

  return (
    <>
      <div class=\\"builder-columns div-8ebf4416\\">
        <For each={props.columns}>
          {(column, _index) => {
            const index = _index();
            return (
              <div class=\\"builder-column div-8ebf4416-2\\">
                {column.content}
                {index}
              </div>
            );
          }}
        </For>
      </div>
      <style>{\`.div-8ebf4416 {
  display: flex;
  flex-direction: column;
  align-items: stretch;
  line-height: normal;
}@media (max-width: 999px) { .div-8ebf4416 {   flex-direction: row; } }@media (max-width: 639px) { .div-8ebf4416 {   flex-direction: row-reverse; } }.div-8ebf4416-2 {
  flex-grow: 1;
}\`}</style>
    </>
  );
}

export default Column;
"
`;

exports[`Solid > jsx > Javascript Test > ContentSlotHtml 1`] = `
"function ContentSlotCode(props) {
  return (
    <>
      <div>
        <Slot name={props.slotTesting}></Slot>
        <div>
          <hr />
        </div>
        <div>
          <Slot></Slot>
        </div>
      </div>
    </>
  );
}

export default ContentSlotCode;
"
`;

exports[`Solid > jsx > Javascript Test > ContentSlotHtml 2`] = `
"function ContentSlotCode(props) {
  return (
    <>
      <div>
        <Slot name={props.slotTesting}></Slot>
        <div>
          <hr />
        </div>
        <div>
          <Slot></Slot>
        </div>
      </div>
    </>
  );
}

export default ContentSlotCode;
"
`;

exports[`Solid > jsx > Javascript Test > ContentSlotJSX 1`] = `
"import { Show, createSignal, createMemo } from \\"solid-js\\";

function ContentSlotJsxCode(props) {
  const [name, setName] = createSignal(\\"king\\");

  const [showContent, setShowContent] = createSignal(false);

  const cls = createMemo(() => {
    return props.slotContent && props.children ? \`\${name()}-content\` : \\"\\";
  });

  function show() {
    props.slotContent ? 1 : \\"\\";
  }

  return (
    <>
      <Show when={props.slotReference}>
        <div
          class={cls()}
          name={props.slotContent ? \\"name1\\" : \\"name2\\"}
          title={props.slotContent ? \\"title1\\" : \\"title2\\"}
          {...props.attributes}
          onClick={(event) => show()}
        >
          <Show when={showContent() && props.slotContent}>
            <Slot name=\\"content\\">{props.content}</Slot>
          </Show>
          <div>
            <hr />
          </div>
          <div>{props.children}</div>
        </div>
      </Show>
    </>
  );
}

export default ContentSlotJsxCode;
"
`;

exports[`Solid > jsx > Javascript Test > ContentSlotJSX 2`] = `
"import { Show, createSignal, createMemo } from \\"solid-js\\";

function ContentSlotJsxCode(props) {
  const [name, setName] = createSignal(\\"king\\");

  const [showContent, setShowContent] = createSignal(false);

  const cls = createMemo(() => {
    return props.slotContent && props.children ? \`\${name()}-content\` : \\"\\";
  });

  function show() {
    props.slotContent ? 1 : \\"\\";
  }

  return (
    <>
      <Show when={props.slotReference}>
        <div
          class={cls()}
          name={props.slotContent ? \\"name1\\" : \\"name2\\"}
          title={props.slotContent ? \\"title1\\" : \\"title2\\"}
          {...props.attributes}
          onClick={(event) => show()}
        >
          <Show when={showContent() && props.slotContent}>
            <Slot name=\\"content\\">{props.content}</Slot>
          </Show>
          <div>
            <hr />
          </div>
          <div>{props.children}</div>
        </div>
      </Show>
    </>
  );
}

export default ContentSlotJsxCode;
"
`;

exports[`Solid > jsx > Javascript Test > CustomCode 1`] = `
"import { onMount, createSignal, createMemo } from \\"solid-js\\";

function CustomCode(props) {
  const [scriptsInserted, setScriptsInserted] = createSignal([]);

  const [scriptsRun, setScriptsRun] = createSignal([]);

  function findAndRunScripts() {
    // TODO: Move this function to standalone one in '@builder.io/utils'
    if (elem && typeof window !== \\"undefined\\") {
      /** @type {HTMLScriptElement[]} */
      const scripts = elem.getElementsByTagName(\\"script\\");

      for (let i = 0; i < scripts.length; i++) {
        const script = scripts[i];

        if (script.src) {
          if (scriptsInserted().includes(script.src)) {
            continue;
          }

          scriptsInserted().push(script.src);
          const newScript = document.createElement(\\"script\\");
          newScript.async = true;
          newScript.src = script.src;
          document.head.appendChild(newScript);
        } else if (
          !script.type ||
          [
            \\"text/javascript\\",
            \\"application/javascript\\",
            \\"application/ecmascript\\",
          ].includes(script.type)
        ) {
          if (scriptsRun().includes(script.innerText)) {
            continue;
          }

          try {
            scriptsRun().push(script.innerText);
            new Function(script.innerText)();
          } catch (error) {
            console.warn(\\"\`CustomCode\`: Error running script:\\", error);
          }
        }
      }
    }
  }

  let elem;

  onMount(() => {
    findAndRunScripts();
  });

  return (
    <>
      <div
        class={
          \\"builder-custom-code\\" + (props.replaceNodes ? \\" replace-nodes\\" : \\"\\")
        }
        ref={elem}
        innerHTML={props.code}
      ></div>
    </>
  );
}

export default CustomCode;
"
`;

exports[`Solid > jsx > Javascript Test > CustomCode 2`] = `
"import { onMount, createSignal, createMemo } from \\"solid-js\\";

function CustomCode(props) {
  const [scriptsInserted, setScriptsInserted] = createSignal([]);

  const [scriptsRun, setScriptsRun] = createSignal([]);

  function findAndRunScripts() {
    // TODO: Move this function to standalone one in '@builder.io/utils'
    if (elem && typeof window !== \\"undefined\\") {
      /** @type {HTMLScriptElement[]} */
      const scripts = elem.getElementsByTagName(\\"script\\");

      for (let i = 0; i < scripts.length; i++) {
        const script = scripts[i];

        if (script.src) {
          if (scriptsInserted().includes(script.src)) {
            continue;
          }

          scriptsInserted().push(script.src);
          const newScript = document.createElement(\\"script\\");
          newScript.async = true;
          newScript.src = script.src;
          document.head.appendChild(newScript);
        } else if (
          !script.type ||
          [
            \\"text/javascript\\",
            \\"application/javascript\\",
            \\"application/ecmascript\\",
          ].includes(script.type)
        ) {
          if (scriptsRun().includes(script.innerText)) {
            continue;
          }

          try {
            scriptsRun().push(script.innerText);
            new Function(script.innerText)();
          } catch (error) {
            console.warn(\\"\`CustomCode\`: Error running script:\\", error);
          }
        }
      }
    }
  }

  let elem;

  onMount(() => {
    findAndRunScripts();
  });

  return (
    <>
      <div
        class={
          \\"builder-custom-code\\" + (props.replaceNodes ? \\" replace-nodes\\" : \\"\\")
        }
        ref={elem}
        innerHTML={props.code}
      ></div>
    </>
  );
}

export default CustomCode;
"
`;

exports[`Solid > jsx > Javascript Test > Embed 1`] = `
"import { onMount, createSignal, createMemo } from \\"solid-js\\";

function CustomCode(props) {
  const [scriptsInserted, setScriptsInserted] = createSignal([]);

  const [scriptsRun, setScriptsRun] = createSignal([]);

  function findAndRunScripts() {
    // TODO: Move this function to standalone one in '@builder.io/utils'
    if (elem && typeof window !== \\"undefined\\") {
      /** @type {HTMLScriptElement[]} */
      const scripts = elem.getElementsByTagName(\\"script\\");

      for (let i = 0; i < scripts.length; i++) {
        const script = scripts[i];

        if (script.src) {
          if (scriptsInserted().includes(script.src)) {
            continue;
          }

          scriptsInserted().push(script.src);
          const newScript = document.createElement(\\"script\\");
          newScript.async = true;
          newScript.src = script.src;
          document.head.appendChild(newScript);
        } else if (
          !script.type ||
          [
            \\"text/javascript\\",
            \\"application/javascript\\",
            \\"application/ecmascript\\",
          ].includes(script.type)
        ) {
          if (scriptsRun().includes(script.innerText)) {
            continue;
          }

          try {
            scriptsRun().push(script.innerText);
            new Function(script.innerText)();
          } catch (error) {
            console.warn(\\"\`CustomCode\`: Error running script:\\", error);
          }
        }
      }
    }
  }

  let elem;

  onMount(() => {
    findAndRunScripts();
  });

  return (
    <>
      <div
        class={
          \\"builder-custom-code\\" + (props.replaceNodes ? \\" replace-nodes\\" : \\"\\")
        }
        ref={elem}
        innerHTML={props.code}
      ></div>
    </>
  );
}

export default CustomCode;
"
`;

exports[`Solid > jsx > Javascript Test > Embed 2`] = `
"import { onMount, createSignal, createMemo } from \\"solid-js\\";

function CustomCode(props) {
  const [scriptsInserted, setScriptsInserted] = createSignal([]);

  const [scriptsRun, setScriptsRun] = createSignal([]);

  function findAndRunScripts() {
    // TODO: Move this function to standalone one in '@builder.io/utils'
    if (elem && typeof window !== \\"undefined\\") {
      /** @type {HTMLScriptElement[]} */
      const scripts = elem.getElementsByTagName(\\"script\\");

      for (let i = 0; i < scripts.length; i++) {
        const script = scripts[i];

        if (script.src) {
          if (scriptsInserted().includes(script.src)) {
            continue;
          }

          scriptsInserted().push(script.src);
          const newScript = document.createElement(\\"script\\");
          newScript.async = true;
          newScript.src = script.src;
          document.head.appendChild(newScript);
        } else if (
          !script.type ||
          [
            \\"text/javascript\\",
            \\"application/javascript\\",
            \\"application/ecmascript\\",
          ].includes(script.type)
        ) {
          if (scriptsRun().includes(script.innerText)) {
            continue;
          }

          try {
            scriptsRun().push(script.innerText);
            new Function(script.innerText)();
          } catch (error) {
            console.warn(\\"\`CustomCode\`: Error running script:\\", error);
          }
        }
      }
    }
  }

  let elem;

  onMount(() => {
    findAndRunScripts();
  });

  return (
    <>
      <div
        class={
          \\"builder-custom-code\\" + (props.replaceNodes ? \\" replace-nodes\\" : \\"\\")
        }
        ref={elem}
        innerHTML={props.code}
      ></div>
    </>
  );
}

export default CustomCode;
"
`;

exports[`Solid > jsx > Javascript Test > Form 1`] = `
"import { Show, For, createSignal, createMemo } from \\"solid-js\\";

import { Builder, builder } from \\"@builder.io/sdk\\";
import {
  BuilderBlock as BuilderBlockComponent,
  BuilderBlocks,
  get,
  set,
} from \\"@fake\\";

function FormComponent(props) {
  const [formState, setFormState] = createSignal(\\"unsubmitted\\");

  const [responseData, setResponseData] = createSignal(null);

  const [formErrorMessage, setFormErrorMessage] = createSignal(\\"\\");

  const submissionState = createMemo(() => {
    return (Builder.isEditing && props.previewState) || formState();
  });

  function onSubmit(event) {
    const sendWithJs = props.sendWithJs || props.sendSubmissionsTo === \\"email\\";

    if (props.sendSubmissionsTo === \\"zapier\\") {
      event.preventDefault();
    } else if (sendWithJs) {
      if (!(props.action || props.sendSubmissionsTo === \\"email\\")) {
        event.preventDefault();
        return;
      }

      event.preventDefault();
      const el = event.currentTarget;
      const headers = props.customHeaders || {};
      let body;
      const formData = new FormData(el); // TODO: maybe support null

      const formPairs = Array.from(
        event.currentTarget.querySelectorAll(\\"input,select,textarea\\")
      )
        .filter((el) => !!el.name)
        .map((el) => {
          let value;
          const key = el.name;

          if (el instanceof HTMLInputElement) {
            if (el.type === \\"radio\\") {
              if (el.checked) {
                value = el.name;
                return {
                  key,
                  value,
                };
              }
            } else if (el.type === \\"checkbox\\") {
              value = el.checked;
            } else if (el.type === \\"number\\" || el.type === \\"range\\") {
              const num = el.valueAsNumber;

              if (!isNaN(num)) {
                value = num;
              }
            } else if (el.type === \\"file\\") {
              // TODO: one vs multiple files
              value = el.files;
            } else {
              value = el.value;
            }
          } else {
            value = el.value;
          }

          return {
            key,
            value,
          };
        });
      let contentType = props.contentType;

      if (props.sendSubmissionsTo === \\"email\\") {
        contentType = \\"multipart/form-data\\";
      }

      Array.from(formPairs).forEach(({ value }) => {
        if (
          value instanceof File ||
          (Array.isArray(value) && value[0] instanceof File) ||
          value instanceof FileList
        ) {
          contentType = \\"multipart/form-data\\";
        }
      }); // TODO: send as urlEncoded or multipart by default
      // because of ease of use and reliability in browser API
      // for encoding the form?

      if (contentType !== \\"application/json\\") {
        body = formData;
      } else {
        // Json
        const json = {};
        Array.from(formPairs).forEach(({ value, key }) => {
          set(json, key, value);
        });
        body = JSON.stringify(json);
      }

      if (contentType && contentType !== \\"multipart/form-data\\") {
        if (
          /* Zapier doesn't allow content-type header to be sent from browsers */
          !(sendWithJs && props.action?.includes(\\"zapier.com\\"))
        ) {
          headers[\\"content-type\\"] = contentType;
        }
      }

      const presubmitEvent = new CustomEvent(\\"presubmit\\", {
        detail: {
          body,
        },
      });

      if (formRef) {
        formRef.dispatchEvent(presubmitEvent);

        if (presubmitEvent.defaultPrevented) {
          return;
        }
      }

      setFormState(\\"sending\\");
      const formUrl = \`\${
        builder.env === \\"dev\\" ? \\"http://localhost:5000\\" : \\"https://builder.io\\"
      }/api/v1/form-submit?apiKey=\${builder.apiKey}&to=\${btoa(
        props.sendSubmissionsToEmail || \\"\\"
      )}&name=\${encodeURIComponent(props.name || \\"\\")}\`;
      fetch(
        props.sendSubmissionsTo === \\"email\\" ? formUrl : props.action,
        /* TODO: throw error if no action URL */
        {
          body,
          headers,
          method: props.method || \\"post\\",
        }
      ).then(
        async (res) => {
          let body;
          const contentType = res.headers.get(\\"content-type\\");

          if (contentType && contentType.indexOf(\\"application/json\\") !== -1) {
            body = await res.json();
          } else {
            body = await res.text();
          }

          if (!res.ok && props.errorMessagePath) {
            /* TODO: allow supplying an error formatter function */
            let message = get(body, props.errorMessagePath);

            if (message) {
              if (typeof message !== \\"string\\") {
                /* TODO: ideally convert json to yaml so it woul dbe like
           error: - email has been taken */
                message = JSON.stringify(message);
              }

              setFormErrorMessage(message);
            }
          }

          setResponseData(body);
          setFormState(res.ok ? \\"success\\" : \\"error\\");

          if (res.ok) {
            const submitSuccessEvent = new CustomEvent(\\"submit:success\\", {
              detail: {
                res,
                body,
              },
            });

            if (formRef) {
              formRef.dispatchEvent(submitSuccessEvent);

              if (submitSuccessEvent.defaultPrevented) {
                return;
              }
              /* TODO: option to turn this on/off? */

              if (props.resetFormOnSubmit !== false) {
                formRef.reset();
              }
            }
            /* TODO: client side route event first that can be preventDefaulted */

            if (props.successUrl) {
              if (formRef) {
                const event = new CustomEvent(\\"route\\", {
                  detail: {
                    url: props.successUrl,
                  },
                });
                formRef.dispatchEvent(event);

                if (!event.defaultPrevented) {
                  location.href = props.successUrl;
                }
              } else {
                location.href = props.successUrl;
              }
            }
          }
        },
        (err) => {
          const submitErrorEvent = new CustomEvent(\\"submit:error\\", {
            detail: {
              error: err,
            },
          });

          if (formRef) {
            formRef.dispatchEvent(submitErrorEvent);

            if (submitErrorEvent.defaultPrevented) {
              return;
            }
          }

          setResponseData(err);
          setFormState(\\"error\\");
        }
      );
    }
  }

  let formRef;

  return (
    <>
      <form
        validate={props.validate}
        ref={formRef}
        action={!props.sendWithJs && props.action}
        method={props.method}
        name={props.name}
        onSubmit={(event) => onSubmit(event)}
        {...props.attributes}
      >
        <Show when={props.builderBlock && props.builderBlock.children}>
          <For each={props.builderBlock?.children}>
            {(block, _index) => {
              const index = _index();
              return (
                <BuilderBlockComponent
                  key={block.id}
                  block={block}
                  index={index}
                ></BuilderBlockComponent>
              );
            }}
          </For>
        </Show>
        <Show when={submissionState() === \\"error\\"}>
          <BuilderBlocks
            dataPath=\\"errorMessage\\"
            blocks={props.errorMessage}
          ></BuilderBlocks>
        </Show>
        <Show when={submissionState() === \\"sending\\"}>
          <BuilderBlocks
            dataPath=\\"sendingMessage\\"
            blocks={props.sendingMessage}
          ></BuilderBlocks>
        </Show>
        <Show when={submissionState() === \\"error\\" && responseData()}>
          <pre class=\\"builder-form-error-text pre-3a429f9e\\">
            {JSON.stringify(responseData(), null, 2)}
          </pre>
        </Show>
        <Show when={submissionState() === \\"success\\"}>
          <BuilderBlocks
            dataPath=\\"successMessage\\"
            blocks={props.successMessage}
          ></BuilderBlocks>
        </Show>
      </form>
      <style>{\`.pre-3a429f9e {
  padding: 10px;
  color: red;
  text-align: center;
}\`}</style>
    </>
  );
}

export default FormComponent;
"
`;

exports[`Solid > jsx > Javascript Test > Form 2`] = `
"import { Show, For, createSignal, createMemo } from \\"solid-js\\";

import { Builder, builder } from \\"@builder.io/sdk\\";
import {
  BuilderBlock as BuilderBlockComponent,
  BuilderBlocks,
  get,
  set,
} from \\"@fake\\";

function FormComponent(props) {
  const [formState, setFormState] = createSignal(\\"unsubmitted\\");

  const [responseData, setResponseData] = createSignal(null);

  const [formErrorMessage, setFormErrorMessage] = createSignal(\\"\\");

  const submissionState = createMemo(() => {
    return (Builder.isEditing && props.previewState) || formState();
  });

  function onSubmit(event) {
    const sendWithJs = props.sendWithJs || props.sendSubmissionsTo === \\"email\\";

    if (props.sendSubmissionsTo === \\"zapier\\") {
      event.preventDefault();
    } else if (sendWithJs) {
      if (!(props.action || props.sendSubmissionsTo === \\"email\\")) {
        event.preventDefault();
        return;
      }

      event.preventDefault();
      const el = event.currentTarget;
      const headers = props.customHeaders || {};
      let body;
      const formData = new FormData(el); // TODO: maybe support null

      const formPairs = Array.from(
        event.currentTarget.querySelectorAll(\\"input,select,textarea\\")
      )
        .filter((el) => !!el.name)
        .map((el) => {
          let value;
          const key = el.name;

          if (el instanceof HTMLInputElement) {
            if (el.type === \\"radio\\") {
              if (el.checked) {
                value = el.name;
                return {
                  key,
                  value,
                };
              }
            } else if (el.type === \\"checkbox\\") {
              value = el.checked;
            } else if (el.type === \\"number\\" || el.type === \\"range\\") {
              const num = el.valueAsNumber;

              if (!isNaN(num)) {
                value = num;
              }
            } else if (el.type === \\"file\\") {
              // TODO: one vs multiple files
              value = el.files;
            } else {
              value = el.value;
            }
          } else {
            value = el.value;
          }

          return {
            key,
            value,
          };
        });
      let contentType = props.contentType;

      if (props.sendSubmissionsTo === \\"email\\") {
        contentType = \\"multipart/form-data\\";
      }

      Array.from(formPairs).forEach(({ value }) => {
        if (
          value instanceof File ||
          (Array.isArray(value) && value[0] instanceof File) ||
          value instanceof FileList
        ) {
          contentType = \\"multipart/form-data\\";
        }
      }); // TODO: send as urlEncoded or multipart by default
      // because of ease of use and reliability in browser API
      // for encoding the form?

      if (contentType !== \\"application/json\\") {
        body = formData;
      } else {
        // Json
        const json = {};
        Array.from(formPairs).forEach(({ value, key }) => {
          set(json, key, value);
        });
        body = JSON.stringify(json);
      }

      if (contentType && contentType !== \\"multipart/form-data\\") {
        if (
          /* Zapier doesn't allow content-type header to be sent from browsers */
          !(sendWithJs && props.action?.includes(\\"zapier.com\\"))
        ) {
          headers[\\"content-type\\"] = contentType;
        }
      }

      const presubmitEvent = new CustomEvent(\\"presubmit\\", {
        detail: {
          body,
        },
      });

      if (formRef) {
        formRef.dispatchEvent(presubmitEvent);

        if (presubmitEvent.defaultPrevented) {
          return;
        }
      }

      setFormState(\\"sending\\");
      const formUrl = \`\${
        builder.env === \\"dev\\" ? \\"http://localhost:5000\\" : \\"https://builder.io\\"
      }/api/v1/form-submit?apiKey=\${builder.apiKey}&to=\${btoa(
        props.sendSubmissionsToEmail || \\"\\"
      )}&name=\${encodeURIComponent(props.name || \\"\\")}\`;
      fetch(
        props.sendSubmissionsTo === \\"email\\" ? formUrl : props.action,
        /* TODO: throw error if no action URL */
        {
          body,
          headers,
          method: props.method || \\"post\\",
        }
      ).then(
        async (res) => {
          let body;
          const contentType = res.headers.get(\\"content-type\\");

          if (contentType && contentType.indexOf(\\"application/json\\") !== -1) {
            body = await res.json();
          } else {
            body = await res.text();
          }

          if (!res.ok && props.errorMessagePath) {
            /* TODO: allow supplying an error formatter function */
            let message = get(body, props.errorMessagePath);

            if (message) {
              if (typeof message !== \\"string\\") {
                /* TODO: ideally convert json to yaml so it woul dbe like
           error: - email has been taken */
                message = JSON.stringify(message);
              }

              setFormErrorMessage(message);
            }
          }

          setResponseData(body);
          setFormState(res.ok ? \\"success\\" : \\"error\\");

          if (res.ok) {
            const submitSuccessEvent = new CustomEvent(\\"submit:success\\", {
              detail: {
                res,
                body,
              },
            });

            if (formRef) {
              formRef.dispatchEvent(submitSuccessEvent);

              if (submitSuccessEvent.defaultPrevented) {
                return;
              }
              /* TODO: option to turn this on/off? */

              if (props.resetFormOnSubmit !== false) {
                formRef.reset();
              }
            }
            /* TODO: client side route event first that can be preventDefaulted */

            if (props.successUrl) {
              if (formRef) {
                const event = new CustomEvent(\\"route\\", {
                  detail: {
                    url: props.successUrl,
                  },
                });
                formRef.dispatchEvent(event);

                if (!event.defaultPrevented) {
                  location.href = props.successUrl;
                }
              } else {
                location.href = props.successUrl;
              }
            }
          }
        },
        (err) => {
          const submitErrorEvent = new CustomEvent(\\"submit:error\\", {
            detail: {
              error: err,
            },
          });

          if (formRef) {
            formRef.dispatchEvent(submitErrorEvent);

            if (submitErrorEvent.defaultPrevented) {
              return;
            }
          }

          setResponseData(err);
          setFormState(\\"error\\");
        }
      );
    }
  }

  let formRef;

  return (
    <>
      <form
        validate={props.validate}
        ref={formRef}
        action={!props.sendWithJs && props.action}
        method={props.method}
        name={props.name}
        onSubmit={(event) => onSubmit(event)}
        {...props.attributes}
      >
        <Show when={props.builderBlock && props.builderBlock.children}>
          <For each={props.builderBlock?.children}>
            {(block, _index) => {
              const index = _index();
              return (
                <BuilderBlockComponent
                  key={block.id}
                  block={block}
                  index={index}
                ></BuilderBlockComponent>
              );
            }}
          </For>
        </Show>
        <Show when={submissionState() === \\"error\\"}>
          <BuilderBlocks
            dataPath=\\"errorMessage\\"
            blocks={props.errorMessage}
          ></BuilderBlocks>
        </Show>
        <Show when={submissionState() === \\"sending\\"}>
          <BuilderBlocks
            dataPath=\\"sendingMessage\\"
            blocks={props.sendingMessage}
          ></BuilderBlocks>
        </Show>
        <Show when={submissionState() === \\"error\\" && responseData()}>
          <pre class=\\"builder-form-error-text pre-3a429f9e\\">
            {JSON.stringify(responseData(), null, 2)}
          </pre>
        </Show>
        <Show when={submissionState() === \\"success\\"}>
          <BuilderBlocks
            dataPath=\\"successMessage\\"
            blocks={props.successMessage}
          ></BuilderBlocks>
        </Show>
      </form>
      <style>{\`.pre-3a429f9e {
  padding: 10px;
  color: red;
  text-align: center;
}\`}</style>
    </>
  );
}

export default FormComponent;
"
`;

exports[`Solid > jsx > Javascript Test > Image 1`] = `
"import { Show, onMount, createSignal, createMemo } from \\"solid-js\\";

function Image(props) {
  const [scrollListener, setScrollListener] = createSignal(null);

  const [imageLoaded, setImageLoaded] = createSignal(false);

  const [load, setLoad] = createSignal(false);

  function setLoaded() {
    setImageLoaded(true);
  }

  function useLazyLoading() {
    // TODO: Add more checks here, like testing for real web browsers
    return !!props.lazy && isBrowser();
  }

  function isBrowser() {
    return (
      typeof window !== \\"undefined\\" && window.navigator.product != \\"ReactNative\\"
    );
  }

  let pictureRef;

  onMount(() => {
    if (useLazyLoading()) {
      // throttled scroll capture listener
      const listener = () => {
        if (pictureRef) {
          const rect = pictureRef.getBoundingClientRect();
          const buffer = window.innerHeight / 2;

          if (rect.top < window.innerHeight + buffer) {
            setLoad(true);
            setScrollListener(null);
            window.removeEventListener(\\"scroll\\", listener);
          }
        }
      };

      setScrollListener(listener);
      window.addEventListener(\\"scroll\\", listener, {
        capture: true,
        passive: true,
      });
      listener();
    }
  });

  return (
    <>
      <div>
        <picture ref={pictureRef}>
          <Show when={!useLazyLoading() || load()}>
            <img
              class={
                \\"builder-image\\" +
                (props._class ? \\" \\" + props._class : \\"\\") +
                \\" img-668cedfa\\"
              }
              alt={props.altText}
              aria-role={props.altText ? \\"presentation\\" : undefined}
              src={props.image}
              onLoad={(event) => setLoaded()}
              srcset={props.srcset}
              sizes={props.sizes}
            />
          </Show>
          <source srcset={props.srcset} />
        </picture>
        {props.children}
      </div>
      <style>{\`.img-668cedfa {
  opacity: 1;
  transition: opacity 0.2s ease-in-out;
  object-fit: cover;
  object-position: center;
}\`}</style>
    </>
  );
}

export default Image;
"
`;

exports[`Solid > jsx > Javascript Test > Image 2`] = `
"import { Show, onMount, createSignal, createMemo } from \\"solid-js\\";

function Image(props) {
  const [scrollListener, setScrollListener] = createSignal(null);

  const [imageLoaded, setImageLoaded] = createSignal(false);

  const [load, setLoad] = createSignal(false);

  function setLoaded() {
    setImageLoaded(true);
  }

  function useLazyLoading() {
    // TODO: Add more checks here, like testing for real web browsers
    return !!props.lazy && isBrowser();
  }

  function isBrowser() {
    return (
      typeof window !== \\"undefined\\" && window.navigator.product != \\"ReactNative\\"
    );
  }

  let pictureRef;

  onMount(() => {
    if (useLazyLoading()) {
      // throttled scroll capture listener
      const listener = () => {
        if (pictureRef) {
          const rect = pictureRef.getBoundingClientRect();
          const buffer = window.innerHeight / 2;

          if (rect.top < window.innerHeight + buffer) {
            setLoad(true);
            setScrollListener(null);
            window.removeEventListener(\\"scroll\\", listener);
          }
        }
      };

      setScrollListener(listener);
      window.addEventListener(\\"scroll\\", listener, {
        capture: true,
        passive: true,
      });
      listener();
    }
  });

  return (
    <>
      <div>
        <picture ref={pictureRef}>
          <Show when={!useLazyLoading() || load()}>
            <img
              class={
                \\"builder-image\\" +
                (props._class ? \\" \\" + props._class : \\"\\") +
                \\" img-668cedfa\\"
              }
              alt={props.altText}
              aria-role={props.altText ? \\"presentation\\" : undefined}
              src={props.image}
              onLoad={(event) => setLoaded()}
              srcset={props.srcset}
              sizes={props.sizes}
            />
          </Show>
          <source srcset={props.srcset} />
        </picture>
        {props.children}
      </div>
      <style>{\`.img-668cedfa {
  opacity: 1;
  transition: opacity 0.2s ease-in-out;
  object-fit: cover;
  object-position: center;
}\`}</style>
    </>
  );
}

export default Image;
"
`;

exports[`Solid > jsx > Javascript Test > Image State 1`] = `
"import { For, createSignal, createMemo } from \\"solid-js\\";

function ImgStateComponent(props) {
  const [canShow, setCanShow] = createSignal(true);

  const [images, setImages] = createSignal([\\"http://example.com/qwik.png\\"]);

  return (
    <>
      <div>
        <For each={images()}>
          {(item, _index) => {
            const itemIndex = _index();
            return (
              <>
                <img class=\\"custom-class\\" src={item} key={itemIndex} />
              </>
            );
          }}
        </For>
      </div>
    </>
  );
}

export default ImgStateComponent;
"
`;

exports[`Solid > jsx > Javascript Test > Image State 2`] = `
"import { For, createSignal, createMemo } from \\"solid-js\\";

function ImgStateComponent(props) {
  const [canShow, setCanShow] = createSignal(true);

  const [images, setImages] = createSignal([\\"http://example.com/qwik.png\\"]);

  return (
    <>
      <div>
        <For each={images()}>
          {(item, _index) => {
            const itemIndex = _index();
            return (
              <>
                <img class=\\"custom-class\\" src={item} key={itemIndex} />
              </>
            );
          }}
        </For>
      </div>
    </>
  );
}

export default ImgStateComponent;
"
`;

exports[`Solid > jsx > Javascript Test > Img 1`] = `
"import { Builder } from \\"@builder.io/sdk\\";

function ImgComponent(props) {
  return (
    <>
      <img
        style={{
          \\"object-fit\\": props.backgroundSize || \\"cover\\",
          \\"object-position\\": props.backgroundPosition || \\"center\\",
        }}
        {...props.attributes}
        key={(Builder.isEditing && props.imgSrc) || \\"default-key\\"}
        alt={props.altText}
        src={props.imgSrc}
      />
    </>
  );
}

export default ImgComponent;
"
`;

exports[`Solid > jsx > Javascript Test > Img 2`] = `
"import { Builder } from \\"@builder.io/sdk\\";

function ImgComponent(props) {
  return (
    <>
      <img
        style={{
          \\"object-fit\\": props.backgroundSize || \\"cover\\",
          \\"object-position\\": props.backgroundPosition || \\"center\\",
        }}
        {...props.attributes}
        key={(Builder.isEditing && props.imgSrc) || \\"default-key\\"}
        alt={props.altText}
        src={props.imgSrc}
      />
    </>
  );
}

export default ImgComponent;
"
`;

exports[`Solid > jsx > Javascript Test > Input 1`] = `
"import { Builder } from \\"@builder.io/sdk\\";

function FormInputComponent(props) {
  return (
    <>
      <input
        {...props.attributes}
        key={
          Builder.isEditing && props.defaultValue
            ? props.defaultValue
            : \\"default-key\\"
        }
        placeholder={props.placeholder}
        type={props.type}
        name={props.name}
        value={props.value}
        defaultValue={props.defaultValue}
        required={props.required}
        onInput={(event) => props.onChange?.(event.target.value)}
      />
    </>
  );
}

export default FormInputComponent;
"
`;

exports[`Solid > jsx > Javascript Test > Input 2`] = `
"import { Builder } from \\"@builder.io/sdk\\";

function FormInputComponent(props) {
  return (
    <>
      <input
        {...props.attributes}
        key={
          Builder.isEditing && props.defaultValue
            ? props.defaultValue
            : \\"default-key\\"
        }
        placeholder={props.placeholder}
        type={props.type}
        name={props.name}
        value={props.value}
        defaultValue={props.defaultValue}
        required={props.required}
        onInput={(event) => props.onChange?.(event.target.value)}
      />
    </>
  );
}

export default FormInputComponent;
"
`;

exports[`Solid > jsx > Javascript Test > InputParent 1`] = `
"import { createSignal, createMemo } from \\"solid-js\\";

import FormInputComponent from \\"./input.raw\\";

function Stepper(props) {
  function handleChange(value) {
    console.log(value);
  }

  return (
    <>
      <FormInputComponent
        name=\\"kingzez\\"
        type=\\"text\\"
        onChange={(value) => handleChange(value)}
      ></FormInputComponent>
    </>
  );
}

export default Stepper;
"
`;

exports[`Solid > jsx > Javascript Test > InputParent 2`] = `
"import { createSignal, createMemo } from \\"solid-js\\";

import FormInputComponent from \\"./input.raw\\";

function Stepper(props) {
  function handleChange(value) {
    console.log(value);
  }

  return (
    <>
      <FormInputComponent
        name=\\"kingzez\\"
        type=\\"text\\"
        onChange={(value) => handleChange(value)}
      ></FormInputComponent>
    </>
  );
}

export default Stepper;
"
`;

exports[`Solid > jsx > Javascript Test > RawText 1`] = `
"function RawText(props) {
  return (
    <>
      <span
        class={props.attributes?.class || props.attributes?.className}
        innerHTML={props.text || \\"\\"}
      ></span>
    </>
  );
}

export default RawText;
"
`;

exports[`Solid > jsx > Javascript Test > RawText 2`] = `
"function RawText(props) {
  return (
    <>
      <span
        class={props.attributes?.class || props.attributes?.className}
        innerHTML={props.text || \\"\\"}
      ></span>
    </>
  );
}

export default RawText;
"
`;

exports[`Solid > jsx > Javascript Test > Section 1`] = `
"function SectionComponent(props) {
  return (
    <>
      <section
        {...props.attributes}
        style={
          props.maxWidth && typeof props.maxWidth === \\"number\\"
            ? {
                \\"max-width\\": props.maxWidth,
              }
            : undefined
        }
      >
        {props.children}
      </section>
    </>
  );
}

export default SectionComponent;
"
`;

exports[`Solid > jsx > Javascript Test > Section 2`] = `
"import { Show, For, createSignal, createMemo } from \\"solid-js\\";

function SectionStateComponent(props) {
  const [max, setMax] = createSignal(42);

  const [items, setItems] = createSignal([42]);

  return (
    <>
      <Show when={max()}>
        <For each={items()}>
          {(item, _index) => {
            const index = _index();
            return (
              <section
                {...props.attributes}
                style={{
                  \\"max-width\\": item + max(),
                }}
              >
                {props.children}
              </section>
            );
          }}
        </For>
      </Show>
    </>
  );
}

export default SectionStateComponent;
"
`;

exports[`Solid > jsx > Javascript Test > Section 3`] = `
"function SectionComponent(props) {
  return (
    <>
      <section
        {...props.attributes}
        style={
          props.maxWidth && typeof props.maxWidth === \\"number\\"
            ? {
                \\"max-width\\": props.maxWidth,
              }
            : undefined
        }
      >
        {props.children}
      </section>
    </>
  );
}

export default SectionComponent;
"
`;

exports[`Solid > jsx > Javascript Test > Section 4`] = `
"import { Show, For, createSignal, createMemo } from \\"solid-js\\";

function SectionStateComponent(props) {
  const [max, setMax] = createSignal(42);

  const [items, setItems] = createSignal([42]);

  return (
    <>
      <Show when={max()}>
        <For each={items()}>
          {(item, _index) => {
            const index = _index();
            return (
              <section
                {...props.attributes}
                style={{
                  \\"max-width\\": item + max(),
                }}
              >
                {props.children}
              </section>
            );
          }}
        </For>
      </Show>
    </>
  );
}

export default SectionStateComponent;
"
`;

exports[`Solid > jsx > Javascript Test > Select 1`] = `
"import { For } from \\"solid-js\\";

import { Builder } from \\"@builder.io/sdk\\";

function SelectComponent(props) {
  return (
    <>
      <select
        {...props.attributes}
        value={props.value}
        key={
          Builder.isEditing && props.defaultValue
            ? props.defaultValue
            : \\"default-key\\"
        }
        defaultValue={props.defaultValue}
        name={props.name}
      >
        <For each={props.options}>
          {(option, _index) => {
            const index = _index();
            return (
              <option value={option.value} data-index={index}>
                {option.name || option.value}
              </option>
            );
          }}
        </For>
      </select>
    </>
  );
}

export default SelectComponent;
"
`;

exports[`Solid > jsx > Javascript Test > Select 2`] = `
"import { For } from \\"solid-js\\";

import { Builder } from \\"@builder.io/sdk\\";

function SelectComponent(props) {
  return (
    <>
      <select
        {...props.attributes}
        value={props.value}
        key={
          Builder.isEditing && props.defaultValue
            ? props.defaultValue
            : \\"default-key\\"
        }
        defaultValue={props.defaultValue}
        name={props.name}
      >
        <For each={props.options}>
          {(option, _index) => {
            const index = _index();
            return (
              <option value={option.value} data-index={index}>
                {option.name || option.value}
              </option>
            );
          }}
        </For>
      </select>
    </>
  );
}

export default SelectComponent;
"
`;

exports[`Solid > jsx > Javascript Test > SlotDefault 1`] = `
"function SlotCode(props) {
  return (
    <>
      <div>
        <Slot>
          <div class=\\"default-slot\\">Default content</div>
        </Slot>
      </div>
    </>
  );
}

export default SlotCode;
"
`;

exports[`Solid > jsx > Javascript Test > SlotDefault 2`] = `
"function SlotCode(props) {
  return (
    <>
      <div>
        <Slot>
          <div class=\\"default-slot\\">Default content</div>
        </Slot>
      </div>
    </>
  );
}

export default SlotCode;
"
`;

exports[`Solid > jsx > Javascript Test > SlotHtml 1`] = `
"import ContentSlotCode from \\"./content-slot-jsx.raw\\";

function SlotCode(props) {
  return (
    <>
      <div>
        <ContentSlotCode>
          <Slot testing={<div>Hello</div>}></Slot>
        </ContentSlotCode>
      </div>
    </>
  );
}

export default SlotCode;
"
`;

exports[`Solid > jsx > Javascript Test > SlotHtml 2`] = `
"import ContentSlotCode from \\"./content-slot-jsx.raw\\";

function SlotCode(props) {
  return (
    <>
      <div>
        <ContentSlotCode>
          <Slot testing={<div>Hello</div>}></Slot>
        </ContentSlotCode>
      </div>
    </>
  );
}

export default SlotCode;
"
`;

exports[`Solid > jsx > Javascript Test > SlotJsx 1`] = `
"import ContentSlotCode from \\"./content-slot-jsx.raw\\";

function SlotCode(props) {
  return (
    <>
      <div>
        <ContentSlotCode slotTesting={<div>Hello</div>}></ContentSlotCode>
      </div>
    </>
  );
}

export default SlotCode;
"
`;

exports[`Solid > jsx > Javascript Test > SlotJsx 2`] = `
"import ContentSlotCode from \\"./content-slot-jsx.raw\\";

function SlotCode(props) {
  return (
    <>
      <div>
        <ContentSlotCode slotTesting={<div>Hello</div>}></ContentSlotCode>
      </div>
    </>
  );
}

export default SlotCode;
"
`;

exports[`Solid > jsx > Javascript Test > SlotNamed 1`] = `
"function SlotCode(props) {
  return (
    <>
      <div>
        <Slot name=\\"myAwesomeSlot\\"></Slot>
        <Slot name=\\"top\\"></Slot>
        <Slot name=\\"left\\">Default left</Slot>
        <Slot>Default Child</Slot>
      </div>
    </>
  );
}

export default SlotCode;
"
`;

exports[`Solid > jsx > Javascript Test > SlotNamed 2`] = `
"function SlotCode(props) {
  return (
    <>
      <div>
        <Slot name=\\"myAwesomeSlot\\"></Slot>
        <Slot name=\\"top\\"></Slot>
        <Slot name=\\"left\\">Default left</Slot>
        <Slot>Default Child</Slot>
      </div>
    </>
  );
}

export default SlotCode;
"
`;

exports[`Solid > jsx > Javascript Test > Stamped.io 1`] = `
"import { Show, For, onMount, createSignal, createMemo } from \\"solid-js\\";

import { kebabCase, snakeCase } from \\"lodash\\";

function SmileReviews(props) {
  const [reviews, setReviews] = createSignal([]);

  const [name, setName] = createSignal(\\"test\\");

  const [showReviewPrompt, setShowReviewPrompt] = createSignal(false);

  function kebabCaseValue() {
    return kebabCase(\\"testThat\\");
  }

  function snakeCaseValue() {
    return snakeCase(\\"testThis\\");
  }

  onMount(() => {
    fetch(
      \`https://stamped.io/api/widget/reviews?storeUrl=builder-io.myshopify.com&apiKey=\${
        props.apiKey || \\"pubkey-8bbDq7W6w4sB3OWeM1HUy2s47702hM\\"
      }&productId=\${props.productId || \\"2410511106127\\"}\`
    )
      .then((res) => res.json())
      .then((data) => {
        setReviews(data.data);
      });
  });

  return (
    <>
      <div data-user={name()}>
        <button onClick={(event) => setShowReviewPrompt(true)}>
          Write a review
        </button>
        <Show when={showReviewPrompt() || \\"asdf\\"}>
          <input placeholder=\\"Email\\" />
          <input class=\\"input-2163cbd4\\" placeholder=\\"Title\\" />
          <textarea
            class=\\"textarea-2163cbd4\\"
            placeholder=\\"How was your experience?\\"
          ></textarea>
          <button
            class=\\"button-2163cbd4\\"
            onClick={(event) => {
              event.preventDefault();
              setShowReviewPrompt(false);
            }}
          >
            Submit
          </button>
        </Show>
        <For each={reviews()}>
          {(review, _index) => {
            const index = _index();
            return (
              <div class=\\"div-2163cbd4\\" key={review.id}>
                <img class=\\"img-2163cbd4\\" src={review.avatar} />
                <div class={showReviewPrompt() ? \\"bg-primary\\" : \\"bg-secondary\\"}>
                  <div>
                    N:
                    {index}
                  </div>
                  <div>{review.author}</div>
                  <div>{review.reviewMessage}</div>
                </div>
              </div>
            );
          }}
        </For>
      </div>
      <style>{\`.input-2163cbd4 {
  display: block;
}.textarea-2163cbd4 {
  display: block;
}.button-2163cbd4 {
  display: block;
}.div-2163cbd4 {
  margin: 10px;
  padding: 10px;
  background: white;
  display: flex;
  border-radius: 5px;
  box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
  -webkit-font-smoothing: antialiased;
}.img-2163cbd4 {
  height: 30px;
  width: 30px;
  margin-right: 10px;
}\`}</style>
    </>
  );
}

export default SmileReviews;
"
`;

exports[`Solid > jsx > Javascript Test > Stamped.io 2`] = `
"import { Show, For, onMount, createSignal, createMemo } from \\"solid-js\\";

import { kebabCase, snakeCase } from \\"lodash\\";

function SmileReviews(props) {
  const [reviews, setReviews] = createSignal([]);

  const [name, setName] = createSignal(\\"test\\");

  const [showReviewPrompt, setShowReviewPrompt] = createSignal(false);

  function kebabCaseValue() {
    return kebabCase(\\"testThat\\");
  }

  function snakeCaseValue() {
    return snakeCase(\\"testThis\\");
  }

  onMount(() => {
    fetch(
      \`https://stamped.io/api/widget/reviews?storeUrl=builder-io.myshopify.com&apiKey=\${
        props.apiKey || \\"pubkey-8bbDq7W6w4sB3OWeM1HUy2s47702hM\\"
      }&productId=\${props.productId || \\"2410511106127\\"}\`
    )
      .then((res) => res.json())
      .then((data) => {
        setReviews(data.data);
      });
  });

  return (
    <>
      <div data-user={name()}>
        <button onClick={(event) => setShowReviewPrompt(true)}>
          Write a review
        </button>
        <Show when={showReviewPrompt() || \\"asdf\\"}>
          <input placeholder=\\"Email\\" />
          <input class=\\"input-2163cbd4\\" placeholder=\\"Title\\" />
          <textarea
            class=\\"textarea-2163cbd4\\"
            placeholder=\\"How was your experience?\\"
          ></textarea>
          <button
            class=\\"button-2163cbd4\\"
            onClick={(event) => {
              event.preventDefault();
              setShowReviewPrompt(false);
            }}
          >
            Submit
          </button>
        </Show>
        <For each={reviews()}>
          {(review, _index) => {
            const index = _index();
            return (
              <div class=\\"div-2163cbd4\\" key={review.id}>
                <img class=\\"img-2163cbd4\\" src={review.avatar} />
                <div class={showReviewPrompt() ? \\"bg-primary\\" : \\"bg-secondary\\"}>
                  <div>
                    N:
                    {index}
                  </div>
                  <div>{review.author}</div>
                  <div>{review.reviewMessage}</div>
                </div>
              </div>
            );
          }}
        </For>
      </div>
      <style>{\`.input-2163cbd4 {
  display: block;
}.textarea-2163cbd4 {
  display: block;
}.button-2163cbd4 {
  display: block;
}.div-2163cbd4 {
  margin: 10px;
  padding: 10px;
  background: white;
  display: flex;
  border-radius: 5px;
  box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
  -webkit-font-smoothing: antialiased;
}.img-2163cbd4 {
  height: 30px;
  width: 30px;
  margin-right: 10px;
}\`}</style>
    </>
  );
}

export default SmileReviews;
"
`;

exports[`Solid > jsx > Javascript Test > Submit 1`] = `
"function SubmitButton(props) {
  return (
    <>
      <button type=\\"submit\\" {...props.attributes}>
        {props.text}
      </button>
    </>
  );
}

export default SubmitButton;
"
`;

exports[`Solid > jsx > Javascript Test > Submit 2`] = `
"function SubmitButton(props) {
  return (
    <>
      <button type=\\"submit\\" {...props.attributes}>
        {props.text}
      </button>
    </>
  );
}

export default SubmitButton;
"
`;

exports[`Solid > jsx > Javascript Test > Text 1`] = `
"import { createSignal, createMemo } from \\"solid-js\\";

import { Builder } from \\"@builder.io/sdk\\";

function Text(props) {
  const [name, setName] = createSignal(\\"Decadef20\\");

  return (
    <>
      <div
        contentEditable={allowEditingText || undefined}
        data-name={{
          test: name() || \\"any name\\",
        }}
        innerHTML={
          props.text ||
          props.content ||
          name() ||
          '<p class=\\"text-lg\\">my name</p>'
        }
      ></div>
    </>
  );
}

export default Text;
"
`;

exports[`Solid > jsx > Javascript Test > Text 2`] = `
"import { createSignal, createMemo } from \\"solid-js\\";

import { Builder } from \\"@builder.io/sdk\\";

function Text(props) {
  const [name, setName] = createSignal(\\"Decadef20\\");

  return (
    <>
      <div
        contentEditable={allowEditingText || undefined}
        data-name={{
          test: name() || \\"any name\\",
        }}
        innerHTML={
          props.text ||
          props.content ||
          name() ||
          '<p class=\\"text-lg\\">my name</p>'
        }
      ></div>
    </>
  );
}

export default Text;
"
`;

exports[`Solid > jsx > Javascript Test > Textarea 1`] = `
"function Textarea(props) {
  return (
    <>
      <textarea
        {...props.attributes}
        placeholder={props.placeholder}
        name={props.name}
        value={props.value}
        defaultValue={props.defaultValue}
      ></textarea>
    </>
  );
}

export default Textarea;
"
`;

exports[`Solid > jsx > Javascript Test > Textarea 2`] = `
"function Textarea(props) {
  return (
    <>
      <textarea
        {...props.attributes}
        placeholder={props.placeholder}
        name={props.name}
        value={props.value}
        defaultValue={props.defaultValue}
      ></textarea>
    </>
  );
}

export default Textarea;
"
`;

exports[`Solid > jsx > Javascript Test > Video 1`] = `
"function Video(props) {
  return (
    <>
      <video
        preload=\\"none\\"
        {...props.attributes}
        style={{
          width: \\"100%\\",
          height: \\"100%\\",
          ...props.attributes?.style,
          \\"object-fit\\": props.fit,
          \\"object-position\\": props.position,
          // Hack to get object fit to work as expected and
          // not have the video overflow
          \\"border-radius\\": 1,
        }}
        key={props.video || \\"no-src\\"}
        poster={props.posterImage}
        autoplay={props.autoPlay}
        muted={props.muted}
        controls={props.controls}
        loop={props.loop}
      ></video>
    </>
  );
}

export default Video;
"
`;

exports[`Solid > jsx > Javascript Test > Video 2`] = `
"function Video(props) {
  return (
    <>
      <video
        preload=\\"none\\"
        {...props.attributes}
        style={{
          width: \\"100%\\",
          height: \\"100%\\",
          ...props.attributes?.style,
          \\"object-fit\\": props.fit,
          \\"object-position\\": props.position,
          // Hack to get object fit to work as expected and
          // not have the video overflow
          \\"border-radius\\": 1,
        }}
        key={props.video || \\"no-src\\"}
        poster={props.posterImage}
        autoplay={props.autoPlay}
        muted={props.muted}
        controls={props.controls}
        loop={props.loop}
      ></video>
    </>
  );
}

export default Video;
"
`;

exports[`Solid > jsx > Javascript Test > arrowFunctionInUseStore 1`] = `
"import { createSignal, createMemo } from \\"solid-js\\";

function MyComponent(props) {
  const [name, setName] = createSignal(\\"steve\\");

  function setName(value) {
    setName(value);
  }

  function updateNameWithArrowFn(value) {
    setName(value);
  }

  return (
    <>
      <div>
        Hello
        {name()}
      </div>
    </>
  );
}

export default MyComponent;
"
`;

exports[`Solid > jsx > Javascript Test > arrowFunctionInUseStore 2`] = `
"import { createSignal, createMemo } from \\"solid-js\\";

function MyComponent(props) {
  const [name, setName] = createSignal(\\"steve\\");

  function setName(value) {
    setName(value);
  }

  function updateNameWithArrowFn(value) {
    setName(value);
  }

  return (
    <>
      <div>
        Hello
        {name()}
      </div>
    </>
  );
}

export default MyComponent;
"
`;

exports[`Solid > jsx > Javascript Test > basicForNoTagReference 1`] = `
"import { For, createSignal, createMemo } from \\"solid-js\\";
import { Dynamic } from \\"solid-js/web\\";

function MyBasicForNoTagRefComponent(props) {
  const [name, setName] = createSignal(\\"VincentW\\");

  const [TagName, setTagName] = createSignal(\\"div\\");

  const [tag, setTag] = createSignal(\\"span\\");

  const TagNameGetter = createMemo(() => {
    return \\"span\\";
  });

  return (
    <>
      <Dynamic component={TagNameGetter()}>
        Hello
        <Dynamic component={tag()}>{name()}</Dynamic>
        <For each={props.actions}>
          {(action, _index) => {
            const index = _index();
            return (
              <Dynamic component={TagName()}>
                <Dynamic component={action.icon}></Dynamic>
                <span>{action.text}</span>
              </Dynamic>
            );
          }}
        </For>
      </Dynamic>
    </>
  );
}

export default MyBasicForNoTagRefComponent;
"
`;

exports[`Solid > jsx > Javascript Test > basicForNoTagReference 2`] = `
"import { For, createSignal, createMemo } from \\"solid-js\\";
import { Dynamic } from \\"solid-js/web\\";

function MyBasicForNoTagRefComponent(props) {
  const [name, setName] = createSignal(\\"VincentW\\");

  const [TagName, setTagName] = createSignal(\\"div\\");

  const [tag, setTag] = createSignal(\\"span\\");

  const TagNameGetter = createMemo(() => {
    return \\"span\\";
  });

  return (
    <>
      <Dynamic component={TagNameGetter()}>
        Hello
        <Dynamic component={tag()}>{name()}</Dynamic>
        <For each={props.actions}>
          {(action, _index) => {
            const index = _index();
            return (
              <Dynamic component={TagName()}>
                <Dynamic component={action.icon}></Dynamic>
                <span>{action.text}</span>
              </Dynamic>
            );
          }}
        </For>
      </Dynamic>
    </>
  );
}

export default MyBasicForNoTagRefComponent;
"
`;

exports[`Solid > jsx > Javascript Test > basicForwardRef 1`] = `
"import { createSignal, createMemo } from \\"solid-js\\";

function MyBasicForwardRefComponent(props) {
  const [name, setName] = createSignal(\\"PatrickJS\\");

  return (
    <>
      <div>
        <input
          class=\\"input-8f561752\\"
          ref={props.inputRef}
          value={name()}
          onInput={(event) => setName(event.target.value)}
        />
      </div>
      <style>{\`.input-8f561752 {
  color: red;
}\`}</style>
    </>
  );
}

export default MyBasicForwardRefComponent;
"
`;

exports[`Solid > jsx > Javascript Test > basicForwardRef 2`] = `
"import { createSignal, createMemo } from \\"solid-js\\";

function MyBasicForwardRefComponent(props) {
  const [name, setName] = createSignal(\\"PatrickJS\\");

  return (
    <>
      <div>
        <input
          class=\\"input-8f561752\\"
          ref={props.inputRef}
          value={name()}
          onInput={(event) => setName(event.target.value)}
        />
      </div>
      <style>{\`.input-8f561752 {
  color: red;
}\`}</style>
    </>
  );
}

export default MyBasicForwardRefComponent;
"
`;

exports[`Solid > jsx > Javascript Test > basicForwardRefMetadata 1`] = `
"import { createSignal, createMemo } from \\"solid-js\\";

function MyBasicForwardRefComponent(props) {
  const [name, setName] = createSignal(\\"PatrickJS\\");

  return (
    <>
      <div>
        <input
          class=\\"input-2597b0e5\\"
          ref={props.inputRef}
          value={name()}
          onInput={(event) => setName(event.target.value)}
        />
      </div>
      <style>{\`.input-2597b0e5 {
  color: red;
}\`}</style>
    </>
  );
}

export default MyBasicForwardRefComponent;
"
`;

exports[`Solid > jsx > Javascript Test > basicForwardRefMetadata 2`] = `
"import { createSignal, createMemo } from \\"solid-js\\";

function MyBasicForwardRefComponent(props) {
  const [name, setName] = createSignal(\\"PatrickJS\\");

  return (
    <>
      <div>
        <input
          class=\\"input-2597b0e5\\"
          ref={props.inputRef}
          value={name()}
          onInput={(event) => setName(event.target.value)}
        />
      </div>
      <style>{\`.input-2597b0e5 {
  color: red;
}\`}</style>
    </>
  );
}

export default MyBasicForwardRefComponent;
"
`;

exports[`Solid > jsx > Javascript Test > basicOnUpdateReturn 1`] = `
"import { on, createEffect, createMemo, createSignal } from \\"solid-js\\";

function MyBasicOnUpdateReturnComponent(props) {
  const [name, setName] = createSignal(\\"PatrickJS\\");

  const onUpdateFn_0_name__ = createMemo(() => name());
  function onUpdateFn_0() {
    const controller = new AbortController();
    const signal = controller.signal;
    fetch(\\"https://patrickjs.com/api/resource.json\\", {
      signal,
    })
      .then((response) => response.json())
      .then((data) => {
        setName(data.name);
      });
    return () => {
      if (!signal.aborted) {
        controller.abort();
      }
    };
  }
  createEffect(on(() => [onUpdateFn_0_name__()], onUpdateFn_0));

  return (
    <>
      <div>
        Hello!
        {name()}
      </div>
    </>
  );
}

export default MyBasicOnUpdateReturnComponent;
"
`;

exports[`Solid > jsx > Javascript Test > basicOnUpdateReturn 2`] = `
"import { on, createEffect, createMemo, createSignal } from \\"solid-js\\";

function MyBasicOnUpdateReturnComponent(props) {
  const [name, setName] = createSignal(\\"PatrickJS\\");

  const onUpdateFn_0_name__ = createMemo(() => name());
  function onUpdateFn_0() {
    const controller = new AbortController();
    const signal = controller.signal;
    fetch(\\"https://patrickjs.com/api/resource.json\\", {
      signal,
    })
      .then((response) => response.json())
      .then((data) => {
        setName(data.name);
      });
    return () => {
      if (!signal.aborted) {
        controller.abort();
      }
    };
  }
  createEffect(on(() => [onUpdateFn_0_name__()], onUpdateFn_0));

  return (
    <>
      <div>
        Hello!
        {name()}
      </div>
    </>
  );
}

export default MyBasicOnUpdateReturnComponent;
"
`;

exports[`Solid > jsx > Javascript Test > class + ClassName + css 1`] = `
"function MyBasicComponent(props) {
  return (
    <>
      <div class=\\"test2 test div-6b6c27cc\\">
        Hello! I can run in React, Vue, Solid, or Liquid!
      </div>
      <style>{\`.div-6b6c27cc {
  padding: 10px;
}\`}</style>
    </>
  );
}

export default MyBasicComponent;
"
`;

exports[`Solid > jsx > Javascript Test > class + ClassName + css 2`] = `
"function MyBasicComponent(props) {
  return (
    <>
      <div class=\\"test2 test div-6b6c27cc\\">
        Hello! I can run in React, Vue, Solid, or Liquid!
      </div>
      <style>{\`.div-6b6c27cc {
  padding: 10px;
}\`}</style>
    </>
  );
}

export default MyBasicComponent;
"
`;

exports[`Solid > jsx > Javascript Test > class + css 1`] = `
"function MyBasicComponent(props) {
  return (
    <>
      <div class=\\"test div-fb8d32e6\\">
        Hello! I can run in React, Vue, Solid, or Liquid!
      </div>
      <style>{\`.div-fb8d32e6 {
  padding: 10px;
}\`}</style>
    </>
  );
}

export default MyBasicComponent;
"
`;

exports[`Solid > jsx > Javascript Test > class + css 2`] = `
"function MyBasicComponent(props) {
  return (
    <>
      <div class=\\"test div-fb8d32e6\\">
        Hello! I can run in React, Vue, Solid, or Liquid!
      </div>
      <style>{\`.div-fb8d32e6 {
  padding: 10px;
}\`}</style>
    </>
  );
}

export default MyBasicComponent;
"
`;

exports[`Solid > jsx > Javascript Test > className + css 1`] = `
"function MyBasicComponent(props) {
  return (
    <>
      <div class=\\"test div-fb8d32e6\\">
        Hello! I can run in React, Vue, Solid, or Liquid!
      </div>
      <style>{\`.div-fb8d32e6 {
  padding: 10px;
}\`}</style>
    </>
  );
}

export default MyBasicComponent;
"
`;

exports[`Solid > jsx > Javascript Test > className + css 2`] = `
"function MyBasicComponent(props) {
  return (
    <>
      <div class=\\"test div-fb8d32e6\\">
        Hello! I can run in React, Vue, Solid, or Liquid!
      </div>
      <style>{\`.div-fb8d32e6 {
  padding: 10px;
}\`}</style>
    </>
  );
}

export default MyBasicComponent;
"
`;

exports[`Solid > jsx > Javascript Test > className 1`] = `
"import { createSignal, createMemo } from \\"solid-js\\";

function ClassNameCode(props) {
  const [bindings, setBindings] = createSignal(\\"a binding\\");

  return (
    <>
      <div>
        <div class=\\"no binding\\">Without Binding</div>
        <div class={bindings()}>With binding</div>
      </div>
    </>
  );
}

export default ClassNameCode;
"
`;

exports[`Solid > jsx > Javascript Test > className 2`] = `
"import { createSignal, createMemo } from \\"solid-js\\";

function ClassNameCode(props) {
  const [bindings, setBindings] = createSignal(\\"a binding\\");

  return (
    <>
      <div>
        <div class=\\"no binding\\">Without Binding</div>
        <div class={bindings()}>With binding</div>
      </div>
    </>
  );
}

export default ClassNameCode;
"
`;

exports[`Solid > jsx > Javascript Test > classState 1`] = `
"import { createSignal, createMemo } from \\"solid-js\\";

function MyBasicComponent(props) {
  const [classState, setClassState] = createSignal(\\"testClassName\\");

  const [styleState, setStyleState] = createSignal({
    color: \\"red\\",
  });

  return (
    <>
      <div class={classState() + \\" div-70b306de\\"} style={styleState()}>
        Hello! I can run in React, Vue, Solid, or Liquid!
      </div>
      <style>{\`.div-70b306de {
  padding: 10px;
}\`}</style>
    </>
  );
}

export default MyBasicComponent;
"
`;

exports[`Solid > jsx > Javascript Test > classState 2`] = `
"import { createSignal, createMemo } from \\"solid-js\\";

function MyBasicComponent(props) {
  const [classState, setClassState] = createSignal(\\"testClassName\\");

  const [styleState, setStyleState] = createSignal({
    color: \\"red\\",
  });

  return (
    <>
      <div class={classState() + \\" div-70b306de\\"} style={styleState()}>
        Hello! I can run in React, Vue, Solid, or Liquid!
      </div>
      <style>{\`.div-70b306de {
  padding: 10px;
}\`}</style>
    </>
  );
}

export default MyBasicComponent;
"
`;

exports[`Solid > jsx > Javascript Test > componentWithContext 1`] = `
"import { useContext } from \\"solid-js\\";

import Context1 from \\"@dummy/1\\";
import Context2 from \\"@dummy/2\\";

function ComponentWithContext(props) {
  const foo = useContext(Context1);

  return (
    <>
      <Context2.Provider
        value={{
          bar: \\"baz\\",
        }}
      >
        <Context1.Provider
          value={{
            foo: \\"bar\\",

            content() {
              return props.content;
            },
          }}
        >
          <>
            <>{foo.value}</>
          </>
        </Context1.Provider>
      </Context2.Provider>
    </>
  );
}

export default ComponentWithContext;
"
`;

exports[`Solid > jsx > Javascript Test > componentWithContext 2`] = `
"import { useContext } from \\"solid-js\\";

import Context1 from \\"@dummy/1\\";
import Context2 from \\"@dummy/2\\";

function ComponentWithContext(props) {
  const foo = useContext(Context1);

  return (
    <>
      <Context2.Provider
        value={{
          bar: \\"baz\\",
        }}
      >
        <Context1.Provider
          value={{
            foo: \\"bar\\",

            content() {
              return props.content;
            },
          }}
        >
          <>
            <>{foo.value}</>
          </>
        </Context1.Provider>
      </Context2.Provider>
    </>
  );
}

export default ComponentWithContext;
"
`;

exports[`Solid > jsx > Javascript Test > componentWithContextMultiRoot 1`] = `
"import { useContext } from \\"solid-js\\";

import Context1 from \\"@dummy/1\\";
import Context2 from \\"@dummy/2\\";

function ComponentWithContext(props) {
  const foo = useContext(Context1);

  return (
    <>
      <Context2.Provider
        value={{
          bar: \\"baz\\",
        }}
      >
        <Context1.Provider
          value={{
            foo: \\"bar\\",

            content() {
              return props.content;
            },
          }}
        >
          <>
            <>{foo.value}</>
            <div>other</div>
          </>
        </Context1.Provider>
      </Context2.Provider>
    </>
  );
}

export default ComponentWithContext;
"
`;

exports[`Solid > jsx > Javascript Test > componentWithContextMultiRoot 2`] = `
"import { useContext } from \\"solid-js\\";

import Context1 from \\"@dummy/1\\";
import Context2 from \\"@dummy/2\\";

function ComponentWithContext(props) {
  const foo = useContext(Context1);

  return (
    <>
      <Context2.Provider
        value={{
          bar: \\"baz\\",
        }}
      >
        <Context1.Provider
          value={{
            foo: \\"bar\\",

            content() {
              return props.content;
            },
          }}
        >
          <>
            <>{foo.value}</>
            <div>other</div>
          </>
        </Context1.Provider>
      </Context2.Provider>
    </>
  );
}

export default ComponentWithContext;
"
`;

exports[`Solid > jsx > Javascript Test > contentState 1`] = `
"import BuilderContext from \\"@dummy/context.js\\";

function RenderContent(props) {
  return (
    <>
      <BuilderContext.Provider
        value={{
          content: props.content,
          registeredComponents: props.customComponents,
        }}
      >
        <div>setting context</div>
      </BuilderContext.Provider>
    </>
  );
}

export default RenderContent;
"
`;

exports[`Solid > jsx > Javascript Test > contentState 2`] = `
"import BuilderContext from \\"@dummy/context.js\\";

function RenderContent(props) {
  return (
    <>
      <BuilderContext.Provider
        value={{
          content: props.content,
          registeredComponents: props.customComponents,
        }}
      >
        <div>setting context</div>
      </BuilderContext.Provider>
    </>
  );
}

export default RenderContent;
"
`;

exports[`Solid > jsx > Javascript Test > defaultProps 1`] = `
"import { Show } from \\"solid-js\\";

function Button(props) {
  return (
    <>
      <div>
        <Show when={props.link}>
          <a
            {...props.attributes}
            href={props.link}
            target={props.openLinkInNewTab ? \\"_blank\\" : undefined}
          >
            {props.text}
          </a>
        </Show>
        <Show when={!props.link}>
          <button
            type=\\"button\\"
            {...props.attributes}
            onClick={(event) => props.onClick(event)}
          >
            {props.buttonText}
          </button>
        </Show>
      </div>
    </>
  );
}

export default Button;
"
`;

exports[`Solid > jsx > Javascript Test > defaultProps 2`] = `
"import { Show } from \\"solid-js\\";

function Button(props) {
  return (
    <>
      <div>
        <Show when={props.link}>
          <a
            {...props.attributes}
            href={props.link}
            target={props.openLinkInNewTab ? \\"_blank\\" : undefined}
          >
            {props.text}
          </a>
        </Show>
        <Show when={!props.link}>
          <button
            type=\\"button\\"
            {...props.attributes}
            onClick={(event) => props.onClick(event)}
          >
            {props.buttonText}
          </button>
        </Show>
      </div>
    </>
  );
}

export default Button;
"
`;

exports[`Solid > jsx > Javascript Test > defaultPropsOutsideComponent 1`] = `
"import { Show } from \\"solid-js\\";

function Button(props) {
  return (
    <>
      <div>
        <Show when={props.link}>
          <a
            {...props.attributes}
            href={props.link}
            target={props.openLinkInNewTab ? \\"_blank\\" : undefined}
          >
            {props.text}
          </a>
        </Show>
        <Show when={!props.link}>
          <button
            type=\\"button\\"
            {...props.attributes}
            onClick={(event) => props.onClick(event)}
          >
            {props.text}
          </button>
        </Show>
      </div>
    </>
  );
}

export default Button;
"
`;

exports[`Solid > jsx > Javascript Test > defaultPropsOutsideComponent 2`] = `
"import { Show } from \\"solid-js\\";

function Button(props) {
  return (
    <>
      <div>
        <Show when={props.link}>
          <a
            {...props.attributes}
            href={props.link}
            target={props.openLinkInNewTab ? \\"_blank\\" : undefined}
          >
            {props.text}
          </a>
        </Show>
        <Show when={!props.link}>
          <button
            type=\\"button\\"
            {...props.attributes}
            onClick={(event) => props.onClick(event)}
          >
            {props.text}
          </button>
        </Show>
      </div>
    </>
  );
}

export default Button;
"
`;

exports[`Solid > jsx > Javascript Test > defaultValsWithTypes 1`] = `
"const DEFAULT_VALUES = {
  name: \\"Sami\\",
};

function ComponentWithTypes(props) {
  return (
    <>
      <div>
        {\\" \\"}
        Hello
        {props.name || DEFAULT_VALUES.name}
      </div>
    </>
  );
}

export default ComponentWithTypes;
"
`;

exports[`Solid > jsx > Javascript Test > defaultValsWithTypes 2`] = `
"const DEFAULT_VALUES = {
  name: \\"Sami\\",
};

function ComponentWithTypes(props) {
  return (
    <>
      <div>
        {\\" \\"}
        Hello
        {props.name || DEFAULT_VALUES.name}
      </div>
    </>
  );
}

export default ComponentWithTypes;
"
`;

exports[`Solid > jsx > Javascript Test > expressionState 1`] = `
"import { createSignal, createMemo } from \\"solid-js\\";

function MyComponent(props) {
  const [refToUse, setRefToUse] = createSignal(
    !(props.componentRef instanceof Function) ? props.componentRef : null
  );

  return (
    <>
      <div>{refToUse()}</div>
    </>
  );
}

export default MyComponent;
"
`;

exports[`Solid > jsx > Javascript Test > expressionState 2`] = `
"import { createSignal, createMemo } from \\"solid-js\\";

function MyComponent(props) {
  const [refToUse, setRefToUse] = createSignal(
    !(props.componentRef instanceof Function) ? props.componentRef : null
  );

  return (
    <>
      <div>{refToUse()}</div>
    </>
  );
}

export default MyComponent;
"
`;

exports[`Solid > jsx > Javascript Test > getterState 1`] = `
"import { createSignal, createMemo } from \\"solid-js\\";

function Button(props) {
  const foo2 = createMemo(() => {
    return props.foo + \\"foo\\";
  });

  const bar = createMemo(() => {
    return \\"bar\\";
  });

  function baz(i) {
    return i + foo2().length;
  }

  return (
    <>
      <div>
        <p>{foo2()}</p>
        <p>{bar()}</p>
        <p>{baz(1)}</p>
      </div>
    </>
  );
}

export default Button;
"
`;

exports[`Solid > jsx > Javascript Test > getterState 2`] = `
"import { createSignal, createMemo } from \\"solid-js\\";

function Button(props) {
  const foo2 = createMemo(() => {
    return props.foo + \\"foo\\";
  });

  const bar = createMemo(() => {
    return \\"bar\\";
  });

  function baz(i) {
    return i + foo2().length;
  }

  return (
    <>
      <div>
        <p>{foo2()}</p>
        <p>{bar()}</p>
        <p>{baz(1)}</p>
      </div>
    </>
  );
}

export default Button;
"
`;

exports[`Solid > jsx > Javascript Test > import types 1`] = `
"import { createSignal, createMemo } from \\"solid-js\\";

import RenderBlock from \\"./builder-render-block.raw\\";

function RenderContent(props) {
  function getRenderContentProps(block, index) {
    return {
      block: block,
      index: index,
    };
  }

  return (
    <>
      <RenderBlock
        {...getRenderContentProps(props.renderContentProps.block, 0)}
      ></RenderBlock>
    </>
  );
}

export default RenderContent;
"
`;

exports[`Solid > jsx > Javascript Test > import types 2`] = `
"import { createSignal, createMemo } from \\"solid-js\\";

import RenderBlock from \\"./builder-render-block.raw\\";

function RenderContent(props) {
  function getRenderContentProps(block, index) {
    return {
      block: block,
      index: index,
    };
  }

  return (
    <>
      <RenderBlock
        {...getRenderContentProps(props.renderContentProps.block, 0)}
      ></RenderBlock>
    </>
  );
}

export default RenderContent;
"
`;

exports[`Solid > jsx > Javascript Test > multipleOnUpdate 1`] = `
"import { on, createEffect, createMemo } from \\"solid-js\\";

function MultipleOnUpdate(props) {
  return (
    <>
      <div></div>
    </>
  );
}

export default MultipleOnUpdate;
"
`;

exports[`Solid > jsx > Javascript Test > multipleOnUpdate 2`] = `
"import { on, createEffect, createMemo } from \\"solid-js\\";

function MultipleOnUpdate(props) {
  return (
    <>
      <div></div>
    </>
  );
}

export default MultipleOnUpdate;
"
`;

exports[`Solid > jsx > Javascript Test > multipleOnUpdateWithDeps 1`] = `
"import { on, createEffect, createMemo, createSignal } from \\"solid-js\\";

function MultipleOnUpdateWithDeps(props) {
  const [a, setA] = createSignal(\\"a\\");

  const [b, setB] = createSignal(\\"b\\");

  const [c, setC] = createSignal(\\"c\\");

  const [d, setD] = createSignal(\\"d\\");

  const onUpdateFn_0_a__ = createMemo(() => a());
  const onUpdateFn_0_b__ = createMemo(() => b());
  function onUpdateFn_0() {
    console.log(\\"Runs when a or b changes\\", a(), b());

    if (a() === \\"a\\") {
      setA(\\"b\\");
    }
  }
  createEffect(
    on(() => [onUpdateFn_0_a__(), onUpdateFn_0_b__()], onUpdateFn_0)
  );

  const onUpdateFn_1_c__ = createMemo(() => c());
  const onUpdateFn_1_d__ = createMemo(() => d());
  function onUpdateFn_1() {
    console.log(\\"Runs when c or d changes\\", c(), d());

    if (a() === \\"a\\") {
      setA(\\"b\\");
    }
  }
  createEffect(
    on(() => [onUpdateFn_1_c__(), onUpdateFn_1_d__()], onUpdateFn_1)
  );

  return (
    <>
      <div></div>
    </>
  );
}

export default MultipleOnUpdateWithDeps;
"
`;

exports[`Solid > jsx > Javascript Test > multipleOnUpdateWithDeps 2`] = `
"import { on, createEffect, createMemo, createSignal } from \\"solid-js\\";

function MultipleOnUpdateWithDeps(props) {
  const [a, setA] = createSignal(\\"a\\");

  const [b, setB] = createSignal(\\"b\\");

  const [c, setC] = createSignal(\\"c\\");

  const [d, setD] = createSignal(\\"d\\");

  const onUpdateFn_0_a__ = createMemo(() => a());
  const onUpdateFn_0_b__ = createMemo(() => b());
  function onUpdateFn_0() {
    console.log(\\"Runs when a or b changes\\", a(), b());

    if (a() === \\"a\\") {
      setA(\\"b\\");
    }
  }
  createEffect(
    on(() => [onUpdateFn_0_a__(), onUpdateFn_0_b__()], onUpdateFn_0)
  );

  const onUpdateFn_1_c__ = createMemo(() => c());
  const onUpdateFn_1_d__ = createMemo(() => d());
  function onUpdateFn_1() {
    console.log(\\"Runs when c or d changes\\", c(), d());

    if (a() === \\"a\\") {
      setA(\\"b\\");
    }
  }
  createEffect(
    on(() => [onUpdateFn_1_c__(), onUpdateFn_1_d__()], onUpdateFn_1)
  );

  return (
    <>
      <div></div>
    </>
  );
}

export default MultipleOnUpdateWithDeps;
"
`;

exports[`Solid > jsx > Javascript Test > multipleSpreads 1`] = `
"import { createSignal, createMemo } from \\"solid-js\\";

function MyBasicComponent(props) {
  const [attrs, setAttrs] = createSignal({
    hello: \\"world\\",
  });

  return (
    <>
      <input {...attrs()} {...props} />
    </>
  );
}

export default MyBasicComponent;
"
`;

exports[`Solid > jsx > Javascript Test > multipleSpreads 2`] = `
"import { createSignal, createMemo } from \\"solid-js\\";

function MyBasicComponent(props) {
  const [attrs, setAttrs] = createSignal({
    hello: \\"world\\",
  });

  return (
    <>
      <input {...attrs()} {...props} />
    </>
  );
}

export default MyBasicComponent;
"
`;

exports[`Solid > jsx > Javascript Test > nestedShow 1`] = `
"import { Show } from \\"solid-js\\";

function NestedShow(props) {
  return (
    <>
      <Show fallback={<div>else-condition-A</div>} when={props.conditionA}>
        <Show fallback={<div>else-condition-B</div>} when={!props.conditionB}>
          <div>if condition A and condition B</div>
        </Show>
      </Show>
    </>
  );
}

export default NestedShow;
"
`;

exports[`Solid > jsx > Javascript Test > nestedShow 2`] = `
"import { Show } from \\"solid-js\\";

function NestedShow(props) {
  return (
    <>
      <Show fallback={<div>else-condition-A</div>} when={props.conditionA}>
        <Show fallback={<div>else-condition-B</div>} when={!props.conditionB}>
          <div>if condition A and condition B</div>
        </Show>
      </Show>
    </>
  );
}

export default NestedShow;
"
`;

exports[`Solid > jsx > Javascript Test > nestedStyles 1`] = `
"function NestedStyles(props) {
  return (
    <>
      <div class=\\"div-7ff9918d\\">Hello world</div>
      <style>{\`.div-7ff9918d {
  display: flex;
  --bar: red;
  color: var(--bar);
}@media (max-width: env(--mobile)) { .div-7ff9918d {   display: block; } }.div-7ff9918d:hover {
  display: flex;
}.div-7ff9918d:active {
  display: inline;
}.div-7ff9918d .nested-selector {
  display: grid;
}.div-7ff9918d .nested-selector:hover {
  display: block;
}.div-7ff9918d.nested-selector:active {
  display: inline-block;
}\`}</style>
    </>
  );
}

export default NestedStyles;
"
`;

exports[`Solid > jsx > Javascript Test > nestedStyles 2`] = `
"function NestedStyles(props) {
  return (
    <>
      <div class=\\"div-7ff9918d\\">Hello world</div>
      <style>{\`.div-7ff9918d {
  display: flex;
  --bar: red;
  color: var(--bar);
}@media (max-width: env(--mobile)) { .div-7ff9918d {   display: block; } }.div-7ff9918d:hover {
  display: flex;
}.div-7ff9918d:active {
  display: inline;
}.div-7ff9918d .nested-selector {
  display: grid;
}.div-7ff9918d .nested-selector:hover {
  display: block;
}.div-7ff9918d.nested-selector:active {
  display: inline-block;
}\`}</style>
    </>
  );
}

export default NestedStyles;
"
`;

exports[`Solid > jsx > Javascript Test > onEvent 1`] = `
"import { onMount, createSignal, createMemo } from \\"solid-js\\";

function Embed(props) {
  function foo(event) {
    console.log(\\"test2\\");
  }

  function elem_onInitEditingBldr(event) {
    console.log(\\"test\\");
    foo(event);
  }

  let elem;

  onMount(() => {
    elem.dispatchEvent(new CustomEvent(\\"initEditingBldr\\"));
  });

  return (
    <>
      <div
        class=\\"builder-embed\\"
        ref={elem}
        onInitEditingBldr={(event) => elem_onInitEditingBldr(event)}
      >
        <div>Test</div>
      </div>
    </>
  );
}

export default Embed;
"
`;

exports[`Solid > jsx > Javascript Test > onEvent 2`] = `
"import { onMount, createSignal, createMemo } from \\"solid-js\\";

function Embed(props) {
  function foo(event) {
    console.log(\\"test2\\");
  }

  function elem_onInitEditingBldr(event) {
    console.log(\\"test\\");
    foo(event);
  }

  let elem;

  onMount(() => {
    elem.dispatchEvent(new CustomEvent(\\"initEditingBldr\\"));
  });

  return (
    <>
      <div
        class=\\"builder-embed\\"
        ref={elem}
        onInitEditingBldr={(event) => elem_onInitEditingBldr(event)}
      >
        <div>Test</div>
      </div>
    </>
  );
}

export default Embed;
"
`;

exports[`Solid > jsx > Javascript Test > onInit & onMount 1`] = `
"import { onMount } from \\"solid-js\\";

function OnInit(props) {
  console.log(\\"onInit\\");

  onMount(() => {
    console.log(\\"onMount\\");
  });

  return (
    <>
      <div></div>
    </>
  );
}

export default OnInit;
"
`;

exports[`Solid > jsx > Javascript Test > onInit & onMount 2`] = `
"import { onMount } from \\"solid-js\\";

function OnInit(props) {
  console.log(\\"onInit\\");

  onMount(() => {
    console.log(\\"onMount\\");
  });

  return (
    <>
      <div></div>
    </>
  );
}

export default OnInit;
"
`;

exports[`Solid > jsx > Javascript Test > onInit 1`] = `
"import { createSignal, createMemo } from \\"solid-js\\";

export const defaultValues = {
  name: \\"PatrickJS\\",
};

function OnInit(props) {
  const [name, setName] = createSignal(\\"\\");

  setName(defaultValues.name || props.name);
  console.log(\\"set defaults with props\\");

  return (
    <>
      <div>
        Default name defined by parent
        {name()}
      </div>
    </>
  );
}

export default OnInit;
"
`;

exports[`Solid > jsx > Javascript Test > onInit 2`] = `
"import { createSignal, createMemo } from \\"solid-js\\";

export const defaultValues = {
  name: \\"PatrickJS\\",
};

function OnInit(props) {
  const [name, setName] = createSignal(\\"\\");

  setName(defaultValues.name || props.name);
  console.log(\\"set defaults with props\\");

  return (
    <>
      <div>
        Default name defined by parent
        {name()}
      </div>
    </>
  );
}

export default OnInit;
"
`;

exports[`Solid > jsx > Javascript Test > onMount 1`] = `
"import { onMount } from \\"solid-js\\";

function Comp(props) {
  onMount(() => {
    console.log(\\"Runs on mount\\");
  });

  return (
    <>
      <div></div>
    </>
  );
}

export default Comp;
"
`;

exports[`Solid > jsx > Javascript Test > onMount 2`] = `
"import { onMount } from \\"solid-js\\";

function Comp(props) {
  onMount(() => {
    console.log(\\"Runs on mount\\");
  });

  return (
    <>
      <div></div>
    </>
  );
}

export default Comp;
"
`;

exports[`Solid > jsx > Javascript Test > onMountMultiple 1`] = `
"import { onMount } from \\"solid-js\\";

function Comp(props) {
  onMount(() => {
    console.log(\\"Runs on mount\\");
  });
  onMount(() => {
    console.log(\\"Another one runs on Mount\\");
  });
  onMount(() => {
    console.log(\\"SSR runs on Mount\\");
  });

  return (
    <>
      <div></div>
    </>
  );
}

export default Comp;
"
`;

exports[`Solid > jsx > Javascript Test > onMountMultiple 2`] = `
"import { onMount } from \\"solid-js\\";

function Comp(props) {
  onMount(() => {
    console.log(\\"Runs on mount\\");
  });
  onMount(() => {
    console.log(\\"Another one runs on Mount\\");
  });
  onMount(() => {
    console.log(\\"SSR runs on Mount\\");
  });

  return (
    <>
      <div></div>
    </>
  );
}

export default Comp;
"
`;

exports[`Solid > jsx > Javascript Test > onUpdate 1`] = `
"import { on, createEffect, createMemo } from \\"solid-js\\";

function OnUpdate(props) {
  return (
    <>
      <div></div>
    </>
  );
}

export default OnUpdate;
"
`;

exports[`Solid > jsx > Javascript Test > onUpdate 2`] = `
"import { on, createEffect, createMemo } from \\"solid-js\\";

function OnUpdate(props) {
  return (
    <>
      <div></div>
    </>
  );
}

export default OnUpdate;
"
`;

exports[`Solid > jsx > Javascript Test > onUpdateWithDeps 1`] = `
"import { on, createEffect, createMemo, createSignal } from \\"solid-js\\";

function OnUpdateWithDeps(props) {
  const [a, setA] = createSignal(\\"a\\");

  const [b, setB] = createSignal(\\"b\\");

  const onUpdateFn_0_a__ = createMemo(() => a());
  const onUpdateFn_0_b__ = createMemo(() => b());
  const onUpdateFn_0_props_size = createMemo(() => props.size);
  function onUpdateFn_0() {
    console.log(\\"Runs when a, b or size changes\\", a(), b(), props.size);
  }
  createEffect(
    on(
      () => [onUpdateFn_0_a__(), onUpdateFn_0_b__(), onUpdateFn_0_props_size()],
      onUpdateFn_0
    )
  );

  return (
    <>
      <div></div>
    </>
  );
}

export default OnUpdateWithDeps;
"
`;

exports[`Solid > jsx > Javascript Test > onUpdateWithDeps 2`] = `
"import { on, createEffect, createMemo, createSignal } from \\"solid-js\\";

function OnUpdateWithDeps(props) {
  const [a, setA] = createSignal(\\"a\\");

  const [b, setB] = createSignal(\\"b\\");

  const onUpdateFn_0_a__ = createMemo(() => a());
  const onUpdateFn_0_b__ = createMemo(() => b());
  const onUpdateFn_0_props_size = createMemo(() => props.size);
  function onUpdateFn_0() {
    console.log(\\"Runs when a, b or size changes\\", a(), b(), props.size);
  }
  createEffect(
    on(
      () => [onUpdateFn_0_a__(), onUpdateFn_0_b__(), onUpdateFn_0_props_size()],
      onUpdateFn_0
    )
  );

  return (
    <>
      <div></div>
    </>
  );
}

export default OnUpdateWithDeps;
"
`;

exports[`Solid > jsx > Javascript Test > preserveExportOrLocalStatement 1`] = `
"const b = 3;
const foo = () => {};
export const a = 3;
export const bar = () => {};
export function run(value) {}

function MyBasicComponent(props) {
  return (
    <>
      <div></div>
    </>
  );
}

export default MyBasicComponent;
"
`;

exports[`Solid > jsx > Javascript Test > preserveExportOrLocalStatement 2`] = `
"const b = 3;
const foo = () => {};
export const a = 3;
export const bar = () => {};
export function run(value) {}

function MyBasicComponent(props) {
  return (
    <>
      <div></div>
    </>
  );
}

export default MyBasicComponent;
"
`;

exports[`Solid > jsx > Javascript Test > preserveTyping 1`] = `
"function MyBasicComponent(props) {
  return (
    <>
      <div>
        Hello! I can run in React, Vue, Solid, or Liquid!
        {props.name}
      </div>
    </>
  );
}

export default MyBasicComponent;
"
`;

exports[`Solid > jsx > Javascript Test > preserveTyping 2`] = `
"function MyBasicComponent(props) {
  return (
    <>
      <div>
        Hello! I can run in React, Vue, Solid, or Liquid!
        {props.name}
      </div>
    </>
  );
}

export default MyBasicComponent;
"
`;

exports[`Solid > jsx > Javascript Test > propsDestructure 1`] = `
"import { createSignal, createMemo } from \\"solid-js\\";

function MyBasicComponent(props) {
  const [name, setName] = createSignal(\\"Decadef20\\");

  return (
    <>
      <div>
        {props.children}
        {props.type}
        Hello! I can run in React, Vue, Solid, or Liquid!
      </div>
    </>
  );
}

export default MyBasicComponent;
"
`;

exports[`Solid > jsx > Javascript Test > propsDestructure 2`] = `
"import { createSignal, createMemo } from \\"solid-js\\";

function MyBasicComponent(props) {
  const [name, setName] = createSignal(\\"Decadef20\\");

  return (
    <>
      <div>
        {props.children}
        {props.type}
        Hello! I can run in React, Vue, Solid, or Liquid!
      </div>
    </>
  );
}

export default MyBasicComponent;
"
`;

exports[`Solid > jsx > Javascript Test > propsInterface 1`] = `
"function MyBasicComponent(props) {
  return (
    <>
      <div>
        Hello! I can run in React, Vue, Solid, or Liquid!
        {props.name}
      </div>
    </>
  );
}

export default MyBasicComponent;
"
`;

exports[`Solid > jsx > Javascript Test > propsInterface 2`] = `
"function MyBasicComponent(props) {
  return (
    <>
      <div>
        Hello! I can run in React, Vue, Solid, or Liquid!
        {props.name}
      </div>
    </>
  );
}

export default MyBasicComponent;
"
`;

exports[`Solid > jsx > Javascript Test > propsType 1`] = `
"function MyBasicComponent(props) {
  return (
    <>
      <div>
        Hello! I can run in React, Vue, Solid, or Liquid!
        {props.name}
      </div>
    </>
  );
}

export default MyBasicComponent;
"
`;

exports[`Solid > jsx > Javascript Test > propsType 2`] = `
"function MyBasicComponent(props) {
  return (
    <>
      <div>
        Hello! I can run in React, Vue, Solid, or Liquid!
        {props.name}
      </div>
    </>
  );
}

export default MyBasicComponent;
"
`;

exports[`Solid > jsx > Javascript Test > referencingFunInsideHook 1`] = `
"import { on, createEffect, createMemo, createSignal } from \\"solid-js\\";

function OnUpdate(props) {
  function foo(params) {}

  function bar() {}

  function zoo() {
    const params = {
      cb: bar,
    };
  }

  return (
    <>
      <div></div>
    </>
  );
}

export default OnUpdate;
"
`;

exports[`Solid > jsx > Javascript Test > referencingFunInsideHook 2`] = `
"import { on, createEffect, createMemo, createSignal } from \\"solid-js\\";

function OnUpdate(props) {
  function foo(params) {}

  function bar() {}

  function zoo() {
    const params = {
      cb: bar,
    };
  }

  return (
    <>
      <div></div>
    </>
  );
}

export default OnUpdate;
"
`;

exports[`Solid > jsx > Javascript Test > renderBlock 1`] = `
"import { Show, For, createSignal, createMemo } from \\"solid-js\\";
import { Dynamic } from \\"solid-js/web\\";

import { TARGET } from \\"../../constants/target.js\\";
import { evaluate } from \\"../../functions/evaluate.js\\";
import { extractTextStyles } from \\"../../functions/extract-text-styles.js\\";
import { getBlockActions } from \\"../../functions/get-block-actions.js\\";
import { getBlockComponentOptions } from \\"../../functions/get-block-component-options.js\\";
import { getBlockProperties } from \\"../../functions/get-block-properties.js\\";
import { getBlockTag } from \\"../../functions/get-block-tag.js\\";
import { getProcessedBlock } from \\"../../functions/get-processed-block.js\\";
import { getReactNativeBlockStyles } from \\"../../functions/get-react-native-block-styles.js\\";
import BlockStyles from \\"./block-styles\\";
import { isEmptyHtmlElement } from \\"./render-block.helpers.js\\";
import RenderComponentWithContext from \\"./render-component-with-context.js\\";
import RenderComponent from \\"./render-component\\";
import RenderRepeatedBlock from \\"./render-repeated-block\\";

function RenderBlock(props) {
  const component = createMemo(() => {
    const componentName = getProcessedBlock({
      block: props.block,
      state: props.context.state,
      context: props.context.context,
      shouldEvaluateBindings: false,
    }).component?.name;

    if (!componentName) {
      return null;
    }

    const ref = props.context.registeredComponents[componentName];

    if (!ref) {
      // TODO: Public doc page with more info about this message
      console.warn(\`
          Could not find a registered component named \\"\${componentName}\\".
          If you registered it, is the file that registered it imported by the file that needs to render it?\`);
      return undefined;
    } else {
      return ref;
    }
  });

  const tag = createMemo(() => {
    return getBlockTag(useBlock());
  });

  const useBlock = createMemo(() => {
    return repeatItemData()
      ? props.block
      : getProcessedBlock({
          block: props.block,
          state: props.context.state,
          context: props.context.context,
          shouldEvaluateBindings: true,
        });
  });

  const actions = createMemo(() => {
    return getBlockActions({
      block: useBlock(),
      state: props.context.state,
      context: props.context.context,
    });
  });

  const attributes = createMemo(() => {
    const blockProperties = getBlockProperties(useBlock());
    return {
      ...blockProperties,
      ...(TARGET === \\"reactNative\\"
        ? {
            style: getReactNativeBlockStyles({
              block: useBlock(),
              context: props.context,
              blockStyles: blockProperties.style,
            }),
          }
        : {}),
    };
  });

  const shouldWrap = createMemo(() => {
    return !component()?.noWrap;
  });

  const renderComponentProps = createMemo(() => {
    return {
      blockChildren: useChildren(),
      componentRef: component()?.component,
      componentOptions: {
        ...getBlockComponentOptions(useBlock()),

        /**
         * These attributes are passed to the wrapper element when there is one. If \`noWrap\` is set to true, then
         * they are provided to the component itself directly.
         */
        ...(shouldWrap()
          ? {}
          : {
              attributes: { ...attributes(), ...actions() },
            }),
        customBreakpoints: childrenContext()?.content?.meta?.breakpoints,
      },
      context: childrenContext(),
    };
  });

  const useChildren = createMemo(() => {
    // TO-DO: When should \`canHaveChildren\` dictate rendering?
    // This is currently commented out because some Builder components (e.g. Box) do not have \`canHaveChildren: true\`,
    // but still receive and need to render children.
    // return state.componentInfo?.canHaveChildren ? state.useBlock.children : [];
    return useBlock().children ?? [];
  });

  const childrenWithoutParentComponent = createMemo(() => {
    /**
     * When there is no \`componentRef\`, there might still be children that need to be rendered. In this case,
     * we render them outside of \`componentRef\`.
     * NOTE: We make sure not to render this if \`repeatItemData\` is non-null, because that means we are rendering an array of
     * blocks, and the children will be repeated within those blocks.
     */
    const shouldRenderChildrenOutsideRef =
      !component()?.component && !repeatItemData();
    return shouldRenderChildrenOutsideRef ? useChildren() : [];
  });

  const repeatItemData = createMemo(() => {
    /**
     * we don't use \`state.useBlock\` here because the processing done within its logic includes evaluating the block's bindings,
     * which will not work if there is a repeat.
     */
    const { repeat, ...blockWithoutRepeat } = props.block;

    if (!repeat?.collection) {
      return undefined;
    }

    const itemsArray = evaluate({
      code: repeat.collection,
      state: props.context.state,
      context: props.context.context,
    });

    if (!Array.isArray(itemsArray)) {
      return undefined;
    }

    const collectionName = repeat.collection.split(\\".\\").pop();
    const itemNameToUse =
      repeat.itemName || (collectionName ? collectionName + \\"Item\\" : \\"item\\");
    const repeatArray = itemsArray.map((item, index) => ({
      context: {
        ...props.context,
        state: {
          ...props.context.state,
          $index: index,
          $item: item,
          [itemNameToUse]: item,
          [\`$\${itemNameToUse}Index\`]: index,
        },
      },
      block: blockWithoutRepeat,
    }));
    return repeatArray;
  });

  const inheritedTextStyles = createMemo(() => {
    if (TARGET !== \\"reactNative\\") {
      return {};
    }

    const styles = getReactNativeBlockStyles({
      block: useBlock(),
      context: props.context,
      blockStyles: attributes().style,
    });
    return extractTextStyles(styles);
  });

  const childrenContext = createMemo(() => {
    return {
      apiKey: props.context.apiKey,
      state: props.context.state,
      content: props.context.content,
      context: props.context.context,
      registeredComponents: props.context.registeredComponents,
      inheritedStyles: inheritedTextStyles(),
    };
  });

  const renderComponentTag = createMemo(() => {
    if (TARGET === \\"reactNative\\") {
      return RenderComponentWithContext;
    } else if (TARGET === \\"vue3\\") {
      // vue3 expects a string for the component tag
      return \\"RenderComponent\\";
    } else {
      return RenderComponent;
    }
  });

  return (
    <>
      <Show
        fallback={
          <Dynamic
            {...renderComponentProps()}
            component={renderComponentTag()}
          ></Dynamic>
        }
        when={shouldWrap()}
      >
        <Show when={isEmptyHtmlElement(tag())}>
          <Dynamic {...attributes()} {...actions()} component={tag()}></Dynamic>
        </Show>
        <Show when={!isEmptyHtmlElement(tag()) && repeatItemData()}>
          <For each={repeatItemData()}>
            {(data, _index) => {
              const index = _index();
              return (
                <RenderRepeatedBlock
                  key={index}
                  repeatContext={data.context}
                  block={data.block}
                ></RenderRepeatedBlock>
              );
            }}
          </For>
        </Show>
        <Show when={!isEmptyHtmlElement(tag()) && !repeatItemData()}>
          <Dynamic {...attributes()} {...actions()} component={tag()}>
            <Dynamic
              {...renderComponentProps()}
              component={renderComponentTag()}
            ></Dynamic>
            <For each={childrenWithoutParentComponent()}>
              {(child, _index) => {
                const index = _index();
                return (
                  <RenderBlock
                    key={\\"render-block-\\" + child.id}
                    block={child}
                    context={childrenContext()}
                  ></RenderBlock>
                );
              }}
            </For>
            <For each={childrenWithoutParentComponent()}>
              {(child, _index) => {
                const index = _index();
                return (
                  <BlockStyles
                    key={\\"block-style-\\" + child.id}
                    block={child}
                    context={childrenContext()}
                  ></BlockStyles>
                );
              }}
            </For>
          </Dynamic>
        </Show>
      </Show>
    </>
  );
}

export default RenderBlock;
"
`;

exports[`Solid > jsx > Javascript Test > renderBlock 2`] = `
"import { Show, For, createSignal, createMemo } from \\"solid-js\\";
import { Dynamic } from \\"solid-js/web\\";

import { TARGET } from \\"../../constants/target.js\\";
import { evaluate } from \\"../../functions/evaluate.js\\";
import { extractTextStyles } from \\"../../functions/extract-text-styles.js\\";
import { getBlockActions } from \\"../../functions/get-block-actions.js\\";
import { getBlockComponentOptions } from \\"../../functions/get-block-component-options.js\\";
import { getBlockProperties } from \\"../../functions/get-block-properties.js\\";
import { getBlockTag } from \\"../../functions/get-block-tag.js\\";
import { getProcessedBlock } from \\"../../functions/get-processed-block.js\\";
import { getReactNativeBlockStyles } from \\"../../functions/get-react-native-block-styles.js\\";
import BlockStyles from \\"./block-styles\\";
import { isEmptyHtmlElement } from \\"./render-block.helpers.js\\";
import RenderComponentWithContext from \\"./render-component-with-context.js\\";
import RenderComponent from \\"./render-component\\";
import RenderRepeatedBlock from \\"./render-repeated-block\\";

function RenderBlock(props) {
  const component = createMemo(() => {
    const componentName = getProcessedBlock({
      block: props.block,
      state: props.context.state,
      context: props.context.context,
      shouldEvaluateBindings: false,
    }).component?.name;

    if (!componentName) {
      return null;
    }

    const ref = props.context.registeredComponents[componentName];

    if (!ref) {
      // TODO: Public doc page with more info about this message
      console.warn(\`
          Could not find a registered component named \\"\${componentName}\\".
          If you registered it, is the file that registered it imported by the file that needs to render it?\`);
      return undefined;
    } else {
      return ref;
    }
  });

  const tag = createMemo(() => {
    return getBlockTag(useBlock());
  });

  const useBlock = createMemo(() => {
    return repeatItemData()
      ? props.block
      : getProcessedBlock({
          block: props.block,
          state: props.context.state,
          context: props.context.context,
          shouldEvaluateBindings: true,
        });
  });

  const actions = createMemo(() => {
    return getBlockActions({
      block: useBlock(),
      state: props.context.state,
      context: props.context.context,
    });
  });

  const attributes = createMemo(() => {
    const blockProperties = getBlockProperties(useBlock());
    return {
      ...blockProperties,
      ...(TARGET === \\"reactNative\\"
        ? {
            style: getReactNativeBlockStyles({
              block: useBlock(),
              context: props.context,
              blockStyles: blockProperties.style,
            }),
          }
        : {}),
    };
  });

  const shouldWrap = createMemo(() => {
    return !component()?.noWrap;
  });

  const renderComponentProps = createMemo(() => {
    return {
      blockChildren: useChildren(),
      componentRef: component()?.component,
      componentOptions: {
        ...getBlockComponentOptions(useBlock()),

        /**
         * These attributes are passed to the wrapper element when there is one. If \`noWrap\` is set to true, then
         * they are provided to the component itself directly.
         */
        ...(shouldWrap()
          ? {}
          : {
              attributes: { ...attributes(), ...actions() },
            }),
        customBreakpoints: childrenContext()?.content?.meta?.breakpoints,
      },
      context: childrenContext(),
    };
  });

  const useChildren = createMemo(() => {
    // TO-DO: When should \`canHaveChildren\` dictate rendering?
    // This is currently commented out because some Builder components (e.g. Box) do not have \`canHaveChildren: true\`,
    // but still receive and need to render children.
    // return state.componentInfo?.canHaveChildren ? state.useBlock.children : [];
    return useBlock().children ?? [];
  });

  const childrenWithoutParentComponent = createMemo(() => {
    /**
     * When there is no \`componentRef\`, there might still be children that need to be rendered. In this case,
     * we render them outside of \`componentRef\`.
     * NOTE: We make sure not to render this if \`repeatItemData\` is non-null, because that means we are rendering an array of
     * blocks, and the children will be repeated within those blocks.
     */
    const shouldRenderChildrenOutsideRef =
      !component()?.component && !repeatItemData();
    return shouldRenderChildrenOutsideRef ? useChildren() : [];
  });

  const repeatItemData = createMemo(() => {
    /**
     * we don't use \`state.useBlock\` here because the processing done within its logic includes evaluating the block's bindings,
     * which will not work if there is a repeat.
     */
    const { repeat, ...blockWithoutRepeat } = props.block;

    if (!repeat?.collection) {
      return undefined;
    }

    const itemsArray = evaluate({
      code: repeat.collection,
      state: props.context.state,
      context: props.context.context,
    });

    if (!Array.isArray(itemsArray)) {
      return undefined;
    }

    const collectionName = repeat.collection.split(\\".\\").pop();
    const itemNameToUse =
      repeat.itemName || (collectionName ? collectionName + \\"Item\\" : \\"item\\");
    const repeatArray = itemsArray.map((item, index) => ({
      context: {
        ...props.context,
        state: {
          ...props.context.state,
          $index: index,
          $item: item,
          [itemNameToUse]: item,
          [\`$\${itemNameToUse}Index\`]: index,
        },
      },
      block: blockWithoutRepeat,
    }));
    return repeatArray;
  });

  const inheritedTextStyles = createMemo(() => {
    if (TARGET !== \\"reactNative\\") {
      return {};
    }

    const styles = getReactNativeBlockStyles({
      block: useBlock(),
      context: props.context,
      blockStyles: attributes().style,
    });
    return extractTextStyles(styles);
  });

  const childrenContext = createMemo(() => {
    return {
      apiKey: props.context.apiKey,
      state: props.context.state,
      content: props.context.content,
      context: props.context.context,
      registeredComponents: props.context.registeredComponents,
      inheritedStyles: inheritedTextStyles(),
    };
  });

  const renderComponentTag = createMemo(() => {
    if (TARGET === \\"reactNative\\") {
      return RenderComponentWithContext;
    } else if (TARGET === \\"vue3\\") {
      // vue3 expects a string for the component tag
      return \\"RenderComponent\\";
    } else {
      return RenderComponent;
    }
  });

  return (
    <>
      <Show
        fallback={
          <Dynamic
            {...renderComponentProps()}
            component={renderComponentTag()}
          ></Dynamic>
        }
        when={shouldWrap()}
      >
        <Show when={isEmptyHtmlElement(tag())}>
          <Dynamic {...attributes()} {...actions()} component={tag()}></Dynamic>
        </Show>
        <Show when={!isEmptyHtmlElement(tag()) && repeatItemData()}>
          <For each={repeatItemData()}>
            {(data, _index) => {
              const index = _index();
              return (
                <RenderRepeatedBlock
                  key={index}
                  repeatContext={data.context}
                  block={data.block}
                ></RenderRepeatedBlock>
              );
            }}
          </For>
        </Show>
        <Show when={!isEmptyHtmlElement(tag()) && !repeatItemData()}>
          <Dynamic {...attributes()} {...actions()} component={tag()}>
            <Dynamic
              {...renderComponentProps()}
              component={renderComponentTag()}
            ></Dynamic>
            <For each={childrenWithoutParentComponent()}>
              {(child, _index) => {
                const index = _index();
                return (
                  <RenderBlock
                    key={\\"render-block-\\" + child.id}
                    block={child}
                    context={childrenContext()}
                  ></RenderBlock>
                );
              }}
            </For>
            <For each={childrenWithoutParentComponent()}>
              {(child, _index) => {
                const index = _index();
                return (
                  <BlockStyles
                    key={\\"block-style-\\" + child.id}
                    block={child}
                    context={childrenContext()}
                  ></BlockStyles>
                );
              }}
            </For>
          </Dynamic>
        </Show>
      </Show>
    </>
  );
}

export default RenderBlock;
"
`;

exports[`Solid > jsx > Javascript Test > renderContentExample 1`] = `
"import { onMount, on, createEffect, createMemo } from \\"solid-js\\";

import BuilderContext from \\"@dummy/context.js\\";
import {
  dispatchNewContentToVisualEditor,
  sendComponentsToVisualEditor,
  trackClick,
} from \\"@dummy/injection-js\\";
import RenderBlocks from \\"@dummy/RenderBlocks\\";

function RenderContent(props) {
  onMount(() => {
    sendComponentsToVisualEditor(props.customComponents);
  });

  const onUpdateFn_0_props_content = createMemo(() => props.content);
  function onUpdateFn_0() {
    dispatchNewContentToVisualEditor(props.content);
  }
  createEffect(on(() => [onUpdateFn_0_props_content()], onUpdateFn_0));

  return (
    <>
      <BuilderContext.Provider
        value={{
          get content() {
            return 3;
          },

          get registeredComponents() {
            return 4;
          },
        }}
      >
        <div
          class=\\"div-89da777c\\"
          onClick={(event) => trackClick(props.content.id)}
        >
          <RenderBlocks blocks={props.content.blocks}></RenderBlocks>
        </div>
      </BuilderContext.Provider>
      <style>{\`.div-89da777c {
  display: flex;
  flex-direction: columns;
}\`}</style>
    </>
  );
}

export default RenderContent;
"
`;

exports[`Solid > jsx > Javascript Test > renderContentExample 2`] = `
"import { onMount, on, createEffect, createMemo } from \\"solid-js\\";

import BuilderContext from \\"@dummy/context.js\\";
import {
  dispatchNewContentToVisualEditor,
  sendComponentsToVisualEditor,
  trackClick,
} from \\"@dummy/injection-js\\";
import RenderBlocks from \\"@dummy/RenderBlocks\\";

function RenderContent(props) {
  onMount(() => {
    sendComponentsToVisualEditor(props.customComponents);
  });

  const onUpdateFn_0_props_content = createMemo(() => props.content);
  function onUpdateFn_0() {
    dispatchNewContentToVisualEditor(props.content);
  }
  createEffect(on(() => [onUpdateFn_0_props_content()], onUpdateFn_0));

  return (
    <>
      <BuilderContext.Provider
        value={{
          get content() {
            return 3;
          },

          get registeredComponents() {
            return 4;
          },
        }}
      >
        <div
          class=\\"div-89da777c\\"
          onClick={(event) => trackClick(props.content.id)}
        >
          <RenderBlocks blocks={props.content.blocks}></RenderBlocks>
        </div>
      </BuilderContext.Provider>
      <style>{\`.div-89da777c {
  display: flex;
  flex-direction: columns;
}\`}</style>
    </>
  );
}

export default RenderContent;
"
`;

exports[`Solid > jsx > Javascript Test > rootFragmentMultiNode 1`] = `
"import { Show } from \\"solid-js\\";

function Button(props) {
  return (
    <>
      <>
        <Show when={props.link}>
          <a
            {...props.attributes}
            href={props.link}
            target={props.openLinkInNewTab ? \\"_blank\\" : undefined}
          >
            {props.text}
          </a>
        </Show>
        <Show when={!props.link}>
          <button type=\\"button\\" {...props.attributes}>
            {props.text}
          </button>
        </Show>
      </>
    </>
  );
}

export default Button;
"
`;

exports[`Solid > jsx > Javascript Test > rootFragmentMultiNode 2`] = `
"import { Show } from \\"solid-js\\";

function Button(props) {
  return (
    <>
      <>
        <Show when={props.link}>
          <a
            {...props.attributes}
            href={props.link}
            target={props.openLinkInNewTab ? \\"_blank\\" : undefined}
          >
            {props.text}
          </a>
        </Show>
        <Show when={!props.link}>
          <button type=\\"button\\" {...props.attributes}>
            {props.text}
          </button>
        </Show>
      </>
    </>
  );
}

export default Button;
"
`;

exports[`Solid > jsx > Javascript Test > rootShow 1`] = `
"import { Show } from \\"solid-js\\";

function RenderStyles(props) {
  return (
    <>
      <Show fallback={<div>Foo</div>} when={props.foo === \\"bar\\"}>
        <div>Bar</div>
      </Show>
    </>
  );
}

export default RenderStyles;
"
`;

exports[`Solid > jsx > Javascript Test > rootShow 2`] = `
"import { Show } from \\"solid-js\\";

function RenderStyles(props) {
  return (
    <>
      <Show fallback={<div>Foo</div>} when={props.foo === \\"bar\\"}>
        <div>Bar</div>
      </Show>
    </>
  );
}

export default RenderStyles;
"
`;

exports[`Solid > jsx > Javascript Test > self-referencing component 1`] = `
"import { Show } from \\"solid-js\\";

function MyComponent(props) {
  return (
    <>
      <div>
        {props.name}
        <Show when={props.name === \\"Batman\\"}>
          <MyComponent name=\\"Bruce Wayne\\"></MyComponent>
        </Show>
      </div>
    </>
  );
}

export default MyComponent;
"
`;

exports[`Solid > jsx > Javascript Test > self-referencing component 2`] = `
"import { Show } from \\"solid-js\\";

function MyComponent(props) {
  return (
    <>
      <div>
        {props.name}
        <Show when={props.name === \\"Batman\\"}>
          <MyComponent name=\\"Bruce Wayne\\"></MyComponent>
        </Show>
      </div>
    </>
  );
}

export default MyComponent;
"
`;

exports[`Solid > jsx > Javascript Test > self-referencing component with children 1`] = `
"import { Show } from \\"solid-js\\";

function MyComponent(props) {
  return (
    <>
      <div>
        {props.name}
        {props.children}
        <Show when={props.name === \\"Batman\\"}>
          <MyComponent name=\\"Bruce\\">
            <div>Wayne</div>
          </MyComponent>
        </Show>
      </div>
    </>
  );
}

export default MyComponent;
"
`;

exports[`Solid > jsx > Javascript Test > self-referencing component with children 2`] = `
"import { Show } from \\"solid-js\\";

function MyComponent(props) {
  return (
    <>
      <div>
        {props.name}
        {props.children}
        <Show when={props.name === \\"Batman\\"}>
          <MyComponent name=\\"Bruce\\">
            <div>Wayne</div>
          </MyComponent>
        </Show>
      </div>
    </>
  );
}

export default MyComponent;
"
`;

exports[`Solid > jsx > Javascript Test > showExpressions 1`] = `
"An identifier or keyword cannot immediately follow a numeric literal. (36:34)
  34 | <Show fallback={123} when={props.conditionA} >ContentF</Show>
  35 | <Show fallback={ContentF} when={props.conditionA} >123</Show>
> 36 | <Show fallback={<Show fallback={9mb} when={props.conditionB === 'Complete'} >20mb</Show>} when={props.conditionA === 'Default'} >4mb</Show>
     |                                  ^
  37 | <Show fallback={4mb} when={props.conditionA === 'Default'} ><Show fallback={9mb} when={props.conditionB === 'Complete'} >20mb</Show></Show></div>
  38 |
  39 |"
`;

exports[`Solid > jsx > Javascript Test > showExpressions 2`] = `
"An identifier or keyword cannot immediately follow a numeric literal. (36:34)
  34 | <Show fallback={123} when={props.conditionA} >ContentF</Show>
  35 | <Show fallback={ContentF} when={props.conditionA} >123</Show>
> 36 | <Show fallback={<Show fallback={9mb} when={props.conditionB === 'Complete'} >20mb</Show>} when={props.conditionA === 'Default'} >4mb</Show>
     |                                  ^
  37 | <Show fallback={4mb} when={props.conditionA === 'Default'} ><Show fallback={9mb} when={props.conditionB === 'Complete'} >20mb</Show></Show></div>
  38 |
  39 |"
`;

exports[`Solid > jsx > Javascript Test > showWithFor 1`] = `
"import { Show, For } from \\"solid-js\\";

function NestedShow(props) {
  return (
    <>
      <Show fallback={<div>else-condition-A</div>} when={props.conditionA}>
        <For each={props.items}>
          {(item, _index) => {
            const idx = _index();
            return <div key={idx}>{item}</div>;
          }}
        </For>
      </Show>
    </>
  );
}

export default NestedShow;
"
`;

exports[`Solid > jsx > Javascript Test > showWithFor 2`] = `
"import { Show, For } from \\"solid-js\\";

function NestedShow(props) {
  return (
    <>
      <Show fallback={<div>else-condition-A</div>} when={props.conditionA}>
        <For each={props.items}>
          {(item, _index) => {
            const idx = _index();
            return <div key={idx}>{item}</div>;
          }}
        </For>
      </Show>
    </>
  );
}

export default NestedShow;
"
`;

exports[`Solid > jsx > Javascript Test > showWithOtherValues 1`] = `
"import { Show } from \\"solid-js\\";

function ShowWithOtherValues(props) {
  return (
    <>
      <div>
        <Show when={props.conditionA}>ContentA</Show>
        <Show fallback={{ undefined }} when={props.conditionA}>
          ContentB
        </Show>
        <Show when={props.conditionA}>ContentC</Show>
        <Show when={props.conditionA}>ContentD</Show>
        <Show fallback={hello} when={props.conditionA}>
          ContentE
        </Show>
        <Show fallback={123} when={props.conditionA}>
          ContentF
        </Show>
      </div>
    </>
  );
}

export default ShowWithOtherValues;
"
`;

exports[`Solid > jsx > Javascript Test > showWithOtherValues 2`] = `
"import { Show } from \\"solid-js\\";

function ShowWithOtherValues(props) {
  return (
    <>
      <div>
        <Show when={props.conditionA}>ContentA</Show>
        <Show fallback={{ undefined }} when={props.conditionA}>
          ContentB
        </Show>
        <Show when={props.conditionA}>ContentC</Show>
        <Show when={props.conditionA}>ContentD</Show>
        <Show fallback={hello} when={props.conditionA}>
          ContentE
        </Show>
        <Show fallback={123} when={props.conditionA}>
          ContentF
        </Show>
      </div>
    </>
  );
}

export default ShowWithOtherValues;
"
`;

exports[`Solid > jsx > Javascript Test > showWithRootText 1`] = `
"import { Show } from \\"solid-js\\";

function ShowRootText(props) {
  return (
    <>
      <Show fallback={<div>else-condition-A</div>} when={props.conditionA}>
        ContentA
      </Show>
    </>
  );
}

export default ShowRootText;
"
`;

exports[`Solid > jsx > Javascript Test > showWithRootText 2`] = `
"import { Show } from \\"solid-js\\";

function ShowRootText(props) {
  return (
    <>
      <Show fallback={<div>else-condition-A</div>} when={props.conditionA}>
        ContentA
      </Show>
    </>
  );
}

export default ShowRootText;
"
`;

exports[`Solid > jsx > Javascript Test > signalsOnUpdate 1`] = `
"import { on, createEffect, createMemo } from \\"solid-js\\";

function MyBasicComponent(props) {
  const onUpdateFn_0_props_id = createMemo(() => props.id);
  const onUpdateFn_0_props_foo_value_bar_baz = createMemo(
    () => props.foo.value.bar.baz
  );
  function onUpdateFn_0() {
    console.log(\\"props.id changed\\", props.id);
    console.log(\\"props.foo.value.bar.baz changed\\", props.foo.value.bar.baz);
  }
  createEffect(
    on(
      () => [onUpdateFn_0_props_id(), onUpdateFn_0_props_foo_value_bar_baz()],
      onUpdateFn_0
    )
  );

  return (
    <>
      <div class=\\"test div-120e4d4e\\">
        {props.id}
        {props.foo.value.bar.baz}
      </div>
      <style>{\`.div-120e4d4e {
  padding: 10px;
}\`}</style>
    </>
  );
}

export default MyBasicComponent;
"
`;

exports[`Solid > jsx > Javascript Test > signalsOnUpdate 2`] = `
"import { on, createEffect, createMemo } from \\"solid-js\\";

function MyBasicComponent(props) {
  const onUpdateFn_0_props_id = createMemo(() => props.id);
  const onUpdateFn_0_props_foo_value_bar_baz = createMemo(
    () => props.foo.value.bar.baz
  );
  function onUpdateFn_0() {
    console.log(\\"props.id changed\\", props.id);
    console.log(\\"props.foo.value.bar.baz changed\\", props.foo.value.bar.baz);
  }
  createEffect(
    on(
      () => [onUpdateFn_0_props_id(), onUpdateFn_0_props_foo_value_bar_baz()],
      onUpdateFn_0
    )
  );

  return (
    <>
      <div class=\\"test div-120e4d4e\\">
        {props.id}
        {props.foo.value.bar.baz}
      </div>
      <style>{\`.div-120e4d4e {
  padding: 10px;
}\`}</style>
    </>
  );
}

export default MyBasicComponent;
"
`;

exports[`Solid > jsx > Javascript Test > spreadAttrs 1`] = `
"function MyBasicComponent(props) {
  return (
    <>
      <input {...attrs} />
    </>
  );
}

export default MyBasicComponent;
"
`;

exports[`Solid > jsx > Javascript Test > spreadAttrs 2`] = `
"function MyBasicComponent(props) {
  return (
    <>
      <input {...attrs} />
    </>
  );
}

export default MyBasicComponent;
"
`;

exports[`Solid > jsx > Javascript Test > spreadNestedProps 1`] = `
"function MyBasicComponent(props) {
  return (
    <>
      <input {...props.nested} />
    </>
  );
}

export default MyBasicComponent;
"
`;

exports[`Solid > jsx > Javascript Test > spreadNestedProps 2`] = `
"function MyBasicComponent(props) {
  return (
    <>
      <input {...props.nested} />
    </>
  );
}

export default MyBasicComponent;
"
`;

exports[`Solid > jsx > Javascript Test > spreadProps 1`] = `
"function MyBasicComponent(props) {
  return (
    <>
      <input {...props} />
    </>
  );
}

export default MyBasicComponent;
"
`;

exports[`Solid > jsx > Javascript Test > spreadProps 2`] = `
"function MyBasicComponent(props) {
  return (
    <>
      <input {...props} />
    </>
  );
}

export default MyBasicComponent;
"
`;

exports[`Solid > jsx > Javascript Test > string-literal-store 1`] = `
"import { createSignal, createMemo } from \\"solid-js\\";

function StringLiteralStore(props) {
  const [foo, setFoo] = createSignal(123);

  return (
    <>
      <div>{foo()}</div>
    </>
  );
}

export default StringLiteralStore;
"
`;

exports[`Solid > jsx > Javascript Test > string-literal-store 2`] = `
"import { createSignal, createMemo } from \\"solid-js\\";

function StringLiteralStore(props) {
  const [foo, setFoo] = createSignal(123);

  return (
    <>
      <div>{foo()}</div>
    </>
  );
}

export default StringLiteralStore;
"
`;

exports[`Solid > jsx > Javascript Test > styleClassAndCss 1`] = `
"function MyComponent(props) {
  return (
    <>
      <div
        class=\\"builder-column div-53ff897e\\"
        style={{
          width: \\"100%\\",
        }}
      ></div>
      <style>{\`.div-53ff897e {
  display: flex;
  flex-direction: column;
  align-items: stretch;
}\`}</style>
    </>
  );
}

export default MyComponent;
"
`;

exports[`Solid > jsx > Javascript Test > styleClassAndCss 2`] = `
"function MyComponent(props) {
  return (
    <>
      <div
        class=\\"builder-column div-53ff897e\\"
        style={{
          width: \\"100%\\",
        }}
      ></div>
      <style>{\`.div-53ff897e {
  display: flex;
  flex-direction: column;
  align-items: stretch;
}\`}</style>
    </>
  );
}

export default MyComponent;
"
`;

exports[`Solid > jsx > Javascript Test > stylePropClassAndCss 1`] = `
"function StylePropClassAndCss(props) {
  return (
    <>
      <div
        class={props.attributes.class + \\" div-40d76e28\\"}
        style={props.attributes.style}
      ></div>
      <style>{\`.div-40d76e28 {
  display: flex;
  flex-direction: column;
  align-items: stretch;
}\`}</style>
    </>
  );
}

export default StylePropClassAndCss;
"
`;

exports[`Solid > jsx > Javascript Test > stylePropClassAndCss 2`] = `
"function StylePropClassAndCss(props) {
  return (
    <>
      <div
        class={props.attributes.class + \\" div-40d76e28\\"}
        style={props.attributes.style}
      ></div>
      <style>{\`.div-40d76e28 {
  display: flex;
  flex-direction: column;
  align-items: stretch;
}\`}</style>
    </>
  );
}

export default StylePropClassAndCss;
"
`;

exports[`Solid > jsx > Javascript Test > subComponent 1`] = `
"import Foo from \\"./foo-sub-component\\";

function SubComponent(props) {
  return (
    <>
      <Foo></Foo>
    </>
  );
}

export default SubComponent;
"
`;

exports[`Solid > jsx > Javascript Test > subComponent 2`] = `
"import Foo from \\"./foo-sub-component\\";

function SubComponent(props) {
  return (
    <>
      <Foo></Foo>
    </>
  );
}

export default SubComponent;
"
`;

exports[`Solid > jsx > Javascript Test > svgComponent 1`] = `
"function SvgComponent(props) {
  return (
    <>
      <svg
        fill=\\"none\\"
        role=\\"img\\"
        viewBox={\\"0 0 \\" + 42 + \\" \\" + 42}
        width={42}
        height={42}
      >
        <defs>
          <filter id=\\"prefix__filter0_f\\" filterUnits=\\"userSpaceOnUse\\">
            <feFlood result=\\"BackgroundImageFix\\"></feFlood>
            <feBlend
              in=\\"SourceGraphic\\"
              in2=\\"BackgroundImageFix\\"
              result=\\"shape\\"
            ></feBlend>
            <feGaussianBlur
              result=\\"effect1_foregroundBlur\\"
              stdDeviation={7}
            ></feGaussianBlur>
          </filter>
        </defs>
      </svg>
    </>
  );
}

export default SvgComponent;
"
`;

exports[`Solid > jsx > Javascript Test > svgComponent 2`] = `
"function SvgComponent(props) {
  return (
    <>
      <svg
        fill=\\"none\\"
        role=\\"img\\"
        viewBox={\\"0 0 \\" + 42 + \\" \\" + 42}
        width={42}
        height={42}
      >
        <defs>
          <filter id=\\"prefix__filter0_f\\" filterUnits=\\"userSpaceOnUse\\">
            <feFlood result=\\"BackgroundImageFix\\"></feFlood>
            <feBlend
              in=\\"SourceGraphic\\"
              in2=\\"BackgroundImageFix\\"
              result=\\"shape\\"
            ></feBlend>
            <feGaussianBlur
              result=\\"effect1_foregroundBlur\\"
              stdDeviation={7}
            ></feGaussianBlur>
          </filter>
        </defs>
      </svg>
    </>
  );
}

export default SvgComponent;
"
`;

exports[`Solid > jsx > Javascript Test > typeDependency 1`] = `
"function TypeDependency(props) {
  return (
    <>
      <div>{props.foo}</div>
    </>
  );
}

export default TypeDependency;
"
`;

exports[`Solid > jsx > Javascript Test > typeDependency 2`] = `
"function TypeDependency(props) {
  return (
    <>
      <div>{props.foo}</div>
    </>
  );
}

export default TypeDependency;
"
`;

exports[`Solid > jsx > Javascript Test > use-style 1`] = `
"function MyComponent(props) {
  return (
    <>
      <button type=\\"button\\">Button</button>
      <style>{\`
        button {
            background: blue;
            color: white;
            font-size: 12px;
            outline: 1px solid black;
        }

\`}</style>
    </>
  );
}

export default MyComponent;
"
`;

exports[`Solid > jsx > Javascript Test > use-style 2`] = `
"function MyComponent(props) {
  return (
    <>
      <button type=\\"button\\">Button</button>
      <style>{\`
        button {
            background: blue;
            color: white;
            font-size: 12px;
            outline: 1px solid black;
        }

\`}</style>
    </>
  );
}

export default MyComponent;
"
`;

exports[`Solid > jsx > Javascript Test > use-style-and-css 1`] = `
"function MyComponent(props) {
  return (
    <>
      <button class=\\"button-11144e0c\\" type=\\"button\\">
        Button
      </button>
      <style>{\`
        button {
            font-size: 12px;
            outline: 1px solid black;
        }

.button-11144e0c {
  background: blue;
  color: white;
}\`}</style>
    </>
  );
}

export default MyComponent;
"
`;

exports[`Solid > jsx > Javascript Test > use-style-and-css 2`] = `
"function MyComponent(props) {
  return (
    <>
      <button class=\\"button-11144e0c\\" type=\\"button\\">
        Button
      </button>
      <style>{\`
        button {
            font-size: 12px;
            outline: 1px solid black;
        }

.button-11144e0c {
  background: blue;
  color: white;
}\`}</style>
    </>
  );
}

export default MyComponent;
"
`;

exports[`Solid > jsx > Javascript Test > use-style-outside-component 1`] = `
"function MyComponent(props) {
  return (
    <>
      <button type=\\"button\\">Button</button>
      <style>{\`
  button {
      background: blue;
      color: white;
      font-size: 12px;
      outline: 1px solid black;
  }

\`}</style>
    </>
  );
}

export default MyComponent;
"
`;

exports[`Solid > jsx > Javascript Test > use-style-outside-component 2`] = `
"function MyComponent(props) {
  return (
    <>
      <button type=\\"button\\">Button</button>
      <style>{\`
  button {
      background: blue;
      color: white;
      font-size: 12px;
      outline: 1px solid black;
  }

\`}</style>
    </>
  );
}

export default MyComponent;
"
`;

exports[`Solid > jsx > Javascript Test > useTarget 1`] = `
"import { onMount, createSignal, createMemo } from \\"solid-js\\";

function UseTargetComponent(props) {
  const [lastName, setLastName] = createSignal(\\"bar\\");

  const name = createMemo(() => {
    const prefix = \\"so\\";
    return prefix + \\"foo\\";
  });

  onMount(() => {});

  return (
    <>
      <div>{name()}</div>
    </>
  );
}

export default UseTargetComponent;
"
`;

exports[`Solid > jsx > Javascript Test > useTarget 2`] = `
"import { onMount, createSignal, createMemo } from \\"solid-js\\";

function UseTargetComponent(props) {
  const [lastName, setLastName] = createSignal(\\"bar\\");

  const name = createMemo(() => {
    const prefix = \\"so\\";
    return prefix + \\"foo\\";
  });

  onMount(() => {});

  return (
    <>
      <div>{name()}</div>
    </>
  );
}

export default UseTargetComponent;
"
`;

exports[`Solid > jsx > Javascript Test > webComponent 1`] = `
"import { register } from \\"swiper/element/bundle\\";

function MyBasicWebComponent(props) {
  register();

  return (
    <>
      <swiper-container slides-per-view=\\"3\\" navigation=\\"true\\" pagination=\\"true\\">
        <swiper-slide>Slide 1</swiper-slide>
        <swiper-slide>Slide 2</swiper-slide>
        <swiper-slide>Slide 3</swiper-slide>
      </swiper-container>
    </>
  );
}

export default MyBasicWebComponent;
"
`;

exports[`Solid > jsx > Javascript Test > webComponent 2`] = `
"import { register } from \\"swiper/element/bundle\\";

function MyBasicWebComponent(props) {
  register();

  return (
    <>
      <swiper-container slides-per-view=\\"3\\" navigation=\\"true\\" pagination=\\"true\\">
        <swiper-slide>Slide 1</swiper-slide>
        <swiper-slide>Slide 2</swiper-slide>
        <swiper-slide>Slide 3</swiper-slide>
      </swiper-container>
    </>
  );
}

export default MyBasicWebComponent;
"
`;

exports[`Solid > jsx > Remove Internal mitosis package 1`] = `
"import { createSignal, createMemo } from \\"solid-js\\";

function MyBasicComponent(props) {
  const [name, setName] = createSignal(\\"PatrickJS\\");

  return (
    <>
      <div>
        Hello
        {name()}! I can run in React, Qwik, Vue, Solid, or Liquid!
      </div>
    </>
  );
}

export default MyBasicComponent;
"
`;

exports[`Solid > jsx > Remove Internal mitosis package 2`] = `
"import { createSignal, createMemo } from \\"solid-js\\";

function MyBasicComponent(props) {
  const [name, setName] = createSignal(\\"PatrickJS\\");

  return (
    <>
      <div>
        Hello
        {name()}! I can run in React, Qwik, Vue, Solid, or Liquid!
      </div>
    </>
  );
}

export default MyBasicComponent;
"
`;

exports[`Solid > jsx > Typescript Test > AdvancedRef 1`] = `
"import { Show, on, createEffect, createMemo, createSignal } from \\"solid-js\\";

export interface Props {
  showInput: boolean;
}

function MyBasicRefComponent(props: Props) {
  const [name, setName] = createSignal(\\"PatrickJS\\");

  function onBlur() {
    // Maintain focus
    inputRef.focus();
  }

  function lowerCaseName() {
    return name().toLowerCase();
  }

  let inputRef: HTMLInputElement;
  let inputNoArgRef: HTMLLabelElement;

  const onUpdateFn_0_inputRef = createMemo(() => inputRef);
  const onUpdateFn_0_inputNoArgRef = createMemo(() => inputNoArgRef);
  function onUpdateFn_0() {
    console.log(\\"Received an update\\");
  }
  createEffect(
    on(
      () => [onUpdateFn_0_inputRef(), onUpdateFn_0_inputNoArgRef()],
      onUpdateFn_0
    )
  );

  return (
    <>
      <div>
        <Show when={props.showInput}>
          <>
            <input
              class=\\"input-60618642\\"
              ref={inputRef!}
              value={name()}
              onBlur={(event) => onBlur()}
              onInput={(event) => setName(event.target.value)}
            />
            <label for=\\"cars\\" ref={inputNoArgRef!}>
              Choose a car:
            </label>
            <select name=\\"cars\\" id=\\"cars\\">
              <option value=\\"supra\\">GR Supra</option>
              <option value=\\"86\\">GR 86</option>
            </select>
          </>
        </Show>
        Hello
        {lowerCaseName()}! I can run in React, Qwik, Vue, Solid, or Web
        Component!
      </div>
      <style>{\`.input-60618642 {
  color: red;
}\`}</style>
    </>
  );
}

export default MyBasicRefComponent;
"
`;

exports[`Solid > jsx > Typescript Test > AdvancedRef 2`] = `
"import { Show, on, createEffect, createMemo, createSignal } from \\"solid-js\\";

export interface Props {
  showInput: boolean;
}

function MyBasicRefComponent(props: Props) {
  const [name, setName] = createSignal(\\"PatrickJS\\");

  function onBlur() {
    // Maintain focus
    inputRef.focus();
  }

  function lowerCaseName() {
    return name().toLowerCase();
  }

  let inputRef: HTMLInputElement;
  let inputNoArgRef: HTMLLabelElement;

  const onUpdateFn_0_inputRef = createMemo(() => inputRef);
  const onUpdateFn_0_inputNoArgRef = createMemo(() => inputNoArgRef);
  function onUpdateFn_0() {
    console.log(\\"Received an update\\");
  }
  createEffect(
    on(
      () => [onUpdateFn_0_inputRef(), onUpdateFn_0_inputNoArgRef()],
      onUpdateFn_0
    )
  );

  return (
    <>
      <div>
        <Show when={props.showInput}>
          <>
            <input
              class=\\"input-60618642\\"
              ref={inputRef!}
              value={name()}
              onBlur={(event) => onBlur()}
              onInput={(event) => setName(event.target.value)}
            />
            <label for=\\"cars\\" ref={inputNoArgRef!}>
              Choose a car:
            </label>
            <select name=\\"cars\\" id=\\"cars\\">
              <option value=\\"supra\\">GR Supra</option>
              <option value=\\"86\\">GR 86</option>
            </select>
          </>
        </Show>
        Hello
        {lowerCaseName()}! I can run in React, Qwik, Vue, Solid, or Web
        Component!
      </div>
      <style>{\`.input-60618642 {
  color: red;
}\`}</style>
    </>
  );
}

export default MyBasicRefComponent;
"
`;

exports[`Solid > jsx > Typescript Test > Basic 1`] = `
"import { createSignal, createMemo } from \\"solid-js\\";

export interface MyBasicComponentProps {
  id: string;
}

export const DEFAULT_VALUES = {
  name: \\"Steve\\",
};

function MyBasicComponent(props: MyBasicComponentProps) {
  const [name, setName] = createSignal(\\"Steve\\");

  const [age, setAge] = createSignal(1);

  const [sports, setSports] = createSignal([\\"\\"]);

  function underscore_fn_name() {
    return \\"bar\\";
  }

  return (
    <>
      <div class=\\"test div-13f579ae\\">
        <input
          value={DEFAULT_VALUES.name || name()}
          onInput={(myEvent) => setName(myEvent.target.value)}
        />
        Hello! I can run in React, Vue, Solid, or Liquid!
      </div>
      <style>{\`.div-13f579ae {
  padding: 10px;
}\`}</style>
    </>
  );
}

export default MyBasicComponent;
"
`;

exports[`Solid > jsx > Typescript Test > Basic 2`] = `
"import { Show, For, createSignal, createMemo } from \\"solid-js\\";

function MyBasicForShowComponent(props: any) {
  const [name, setName] = createSignal(\\"PatrickJS\\");

  const [names, setNames] = createSignal([\\"Steve\\", \\"PatrickJS\\"]);

  return (
    <>
      <div>
        <For each={names()}>
          {(person, _index) => {
            const index = _index();
            return (
              <Show when={person === name()}>
                <input
                  value={name()}
                  onInput={(event) => {
                    setName(event.target.value + \\" and \\" + person);
                  }}
                />
                Hello
                {person}! I can run in Qwik, Web Component, React, Vue, Solid,
                or Liquid!
              </Show>
            );
          }}
        </For>
      </div>
    </>
  );
}

export default MyBasicForShowComponent;
"
`;

exports[`Solid > jsx > Typescript Test > Basic 3`] = `
"import { createSignal, createMemo } from \\"solid-js\\";

export interface MyBasicComponentProps {
  id: string;
}

export const DEFAULT_VALUES = {
  name: \\"Steve\\",
};

function MyBasicComponent(props: MyBasicComponentProps) {
  const [name, setName] = createSignal(\\"Steve\\");

  const [age, setAge] = createSignal(1);

  const [sports, setSports] = createSignal([\\"\\"]);

  function underscore_fn_name() {
    return \\"bar\\";
  }

  return (
    <>
      <div class=\\"test div-13f579ae\\">
        <input
          value={DEFAULT_VALUES.name || name()}
          onInput={(myEvent) => setName(myEvent.target.value)}
        />
        Hello! I can run in React, Vue, Solid, or Liquid!
      </div>
      <style>{\`.div-13f579ae {
  padding: 10px;
}\`}</style>
    </>
  );
}

export default MyBasicComponent;
"
`;

exports[`Solid > jsx > Typescript Test > Basic 4`] = `
"import { Show, For, createSignal, createMemo } from \\"solid-js\\";

function MyBasicForShowComponent(props: any) {
  const [name, setName] = createSignal(\\"PatrickJS\\");

  const [names, setNames] = createSignal([\\"Steve\\", \\"PatrickJS\\"]);

  return (
    <>
      <div>
        <For each={names()}>
          {(person, _index) => {
            const index = _index();
            return (
              <Show when={person === name()}>
                <input
                  value={name()}
                  onInput={(event) => {
                    setName(event.target.value + \\" and \\" + person);
                  }}
                />
                Hello
                {person}! I can run in Qwik, Web Component, React, Vue, Solid,
                or Liquid!
              </Show>
            );
          }}
        </For>
      </div>
    </>
  );
}

export default MyBasicForShowComponent;
"
`;

exports[`Solid > jsx > Typescript Test > Basic Context 1`] = `
"import { useContext, onMount, createSignal, createMemo } from \\"solid-js\\";

import { Injector, MyService, createInjector } from \\"@dummy/injection-js\\";

function MyBasicComponent(props: any) {
  const [name, setName] = createSignal(\\"PatrickJS\\");

  function onChange() {
    const change = myService.method(\\"change\\");
    console.log(change);
  }

  const myService = useContext(MyService);

  const hi = myService.method(\\"hi\\");
  console.log(hi);

  onMount(() => {
    const bye = myService.method(\\"hi\\");
    console.log(bye);
  });

  return (
    <>
      <Injector.Provider value={createInjector()}>
        <div>
          {myService.method(\\"hello\\") + name()}
          Hello! I can run in React, Vue, Solid, or Liquid!
          <input onInput={(event) => onChange} />
        </div>
      </Injector.Provider>
    </>
  );
}

export default MyBasicComponent;
"
`;

exports[`Solid > jsx > Typescript Test > Basic Context 2`] = `
"import { useContext, onMount, createSignal, createMemo } from \\"solid-js\\";

import { Injector, MyService, createInjector } from \\"@dummy/injection-js\\";

function MyBasicComponent(props: any) {
  const [name, setName] = createSignal(\\"PatrickJS\\");

  function onChange() {
    const change = myService.method(\\"change\\");
    console.log(change);
  }

  const myService = useContext(MyService);

  const hi = myService.method(\\"hi\\");
  console.log(hi);

  onMount(() => {
    const bye = myService.method(\\"hi\\");
    console.log(bye);
  });

  return (
    <>
      <Injector.Provider value={createInjector()}>
        <div>
          {myService.method(\\"hello\\") + name()}
          Hello! I can run in React, Vue, Solid, or Liquid!
          <input onInput={(event) => onChange} />
        </div>
      </Injector.Provider>
    </>
  );
}

export default MyBasicComponent;
"
`;

exports[`Solid > jsx > Typescript Test > Basic OnMount Update 1`] = `
"import { onMount, createSignal, createMemo } from \\"solid-js\\";

export interface Props {
  hi: string;
  bye: string;
}

function MyBasicOnMountUpdateComponent(props: Props) {
  const [name, setName] = createSignal(\\"PatrickJS\\");

  const [names, setNames] = createSignal([\\"Steve\\", \\"PatrickJS\\"]);

  setName(\\"PatrickJS onInit\\" + props.hi);

  onMount(() => {
    setName(\\"PatrickJS onMount\\" + props.bye);
  });

  return (
    <>
      <div>
        Hello
        {name()}
      </div>
    </>
  );
}

export default MyBasicOnMountUpdateComponent;
"
`;

exports[`Solid > jsx > Typescript Test > Basic OnMount Update 2`] = `
"import { onMount, createSignal, createMemo } from \\"solid-js\\";

export interface Props {
  hi: string;
  bye: string;
}

function MyBasicOnMountUpdateComponent(props: Props) {
  const [name, setName] = createSignal(\\"PatrickJS\\");

  const [names, setNames] = createSignal([\\"Steve\\", \\"PatrickJS\\"]);

  setName(\\"PatrickJS onInit\\" + props.hi);

  onMount(() => {
    setName(\\"PatrickJS onMount\\" + props.bye);
  });

  return (
    <>
      <div>
        Hello
        {name()}
      </div>
    </>
  );
}

export default MyBasicOnMountUpdateComponent;
"
`;

exports[`Solid > jsx > Typescript Test > Basic Outputs 1`] = `
"import { onMount, createSignal, createMemo } from \\"solid-js\\";

function MyBasicOutputsComponent(props: any) {
  const [name, setName] = createSignal(\\"PatrickJS\\");

  onMount(() => {
    props.onMessage(name());
    props.onEvent(props.message);
  });

  return (
    <>
      <div></div>
    </>
  );
}

export default MyBasicOutputsComponent;
"
`;

exports[`Solid > jsx > Typescript Test > Basic Outputs 2`] = `
"import { onMount, createSignal, createMemo } from \\"solid-js\\";

function MyBasicOutputsComponent(props: any) {
  const [name, setName] = createSignal(\\"PatrickJS\\");

  onMount(() => {
    props.onMessage(name());
    props.onEvent(props.message);
  });

  return (
    <>
      <div></div>
    </>
  );
}

export default MyBasicOutputsComponent;
"
`;

exports[`Solid > jsx > Typescript Test > Basic Outputs Meta 1`] = `
"import { onMount, createSignal, createMemo } from \\"solid-js\\";

function MyBasicOutputsComponent(props: any) {
  const [name, setName] = createSignal(\\"PatrickJS\\");

  onMount(() => {
    props.onMessage(name());
    props.onEvent(props.message);
  });

  return (
    <>
      <div></div>
    </>
  );
}

export default MyBasicOutputsComponent;
"
`;

exports[`Solid > jsx > Typescript Test > Basic Outputs Meta 2`] = `
"import { onMount, createSignal, createMemo } from \\"solid-js\\";

function MyBasicOutputsComponent(props: any) {
  const [name, setName] = createSignal(\\"PatrickJS\\");

  onMount(() => {
    props.onMessage(name());
    props.onEvent(props.message);
  });

  return (
    <>
      <div></div>
    </>
  );
}

export default MyBasicOutputsComponent;
"
`;

exports[`Solid > jsx > Typescript Test > BasicAttribute 1`] = `
"function MyComponent(props: any) {
  return (
    <>
      <input autocapitalize=\\"on\\" autocomplete=\\"on\\" spellcheck={true} />
    </>
  );
}

export default MyComponent;
"
`;

exports[`Solid > jsx > Typescript Test > BasicAttribute 2`] = `
"function MyComponent(props: any) {
  return (
    <>
      <input autocapitalize=\\"on\\" autocomplete=\\"on\\" spellcheck={true} />
    </>
  );
}

export default MyComponent;
"
`;

exports[`Solid > jsx > Typescript Test > BasicBooleanAttribute 1`] = `
"import { Show } from \\"solid-js\\";

type Props = {
  children: any;
  type: string;
};

import MyBooleanAttributeComponent from \\"./basic-boolean-attribute-component.raw\\";

function MyBooleanAttribute(props: Props) {
  return (
    <>
      <div>
        <Show when={props.children}>
          {props.children}
          {props.type}
        </Show>
        <MyBooleanAttributeComponent
          toggle={true}
        ></MyBooleanAttributeComponent>
        <MyBooleanAttributeComponent
          toggle={true}
        ></MyBooleanAttributeComponent>
        <MyBooleanAttributeComponent list={null}></MyBooleanAttributeComponent>
      </div>
    </>
  );
}

export default MyBooleanAttribute;
"
`;

exports[`Solid > jsx > Typescript Test > BasicBooleanAttribute 2`] = `
"import { Show } from \\"solid-js\\";

type Props = {
  children: any;
  type: string;
};

import MyBooleanAttributeComponent from \\"./basic-boolean-attribute-component.raw\\";

function MyBooleanAttribute(props: Props) {
  return (
    <>
      <div>
        <Show when={props.children}>
          {props.children}
          {props.type}
        </Show>
        <MyBooleanAttributeComponent
          toggle={true}
        ></MyBooleanAttributeComponent>
        <MyBooleanAttributeComponent
          toggle={true}
        ></MyBooleanAttributeComponent>
        <MyBooleanAttributeComponent list={null}></MyBooleanAttributeComponent>
      </div>
    </>
  );
}

export default MyBooleanAttribute;
"
`;

exports[`Solid > jsx > Typescript Test > BasicChildComponent 1`] = `
"import { createSignal, createMemo } from \\"solid-js\\";

import MyBasicOnMountUpdateComponent from \\"./basic-onMount-update.raw\\";
import MyBasicComponent from \\"./basic.raw\\";

function MyBasicChildComponent(props: any) {
  const [name, setName] = createSignal(\\"Steve\\");

  const [dev, setDev] = createSignal(\\"PatrickJS\\");

  return (
    <>
      <div>
        <MyBasicComponent id={dev()}></MyBasicComponent>
        <div>
          <MyBasicOnMountUpdateComponent
            hi={name()}
            bye={dev()}
          ></MyBasicOnMountUpdateComponent>
        </div>
      </div>
    </>
  );
}

export default MyBasicChildComponent;
"
`;

exports[`Solid > jsx > Typescript Test > BasicChildComponent 2`] = `
"import { createSignal, createMemo } from \\"solid-js\\";

import MyBasicOnMountUpdateComponent from \\"./basic-onMount-update.raw\\";
import MyBasicComponent from \\"./basic.raw\\";

function MyBasicChildComponent(props: any) {
  const [name, setName] = createSignal(\\"Steve\\");

  const [dev, setDev] = createSignal(\\"PatrickJS\\");

  return (
    <>
      <div>
        <MyBasicComponent id={dev()}></MyBasicComponent>
        <div>
          <MyBasicOnMountUpdateComponent
            hi={name()}
            bye={dev()}
          ></MyBasicOnMountUpdateComponent>
        </div>
      </div>
    </>
  );
}

export default MyBasicChildComponent;
"
`;

exports[`Solid > jsx > Typescript Test > BasicFor 1`] = `
"import { For, onMount, createSignal, createMemo } from \\"solid-js\\";

function MyBasicForComponent(props: any) {
  const [name, setName] = createSignal(\\"PatrickJS\\");

  const [names, setNames] = createSignal([\\"Steve\\", \\"PatrickJS\\"]);

  onMount(() => {
    console.log(\\"onMount code\\");
  });

  return (
    <>
      <div>
        <For each={names()}>
          {(person, _index) => {
            const index = _index();
            return (
              <>
                <input
                  value={name()}
                  onInput={(event) => {
                    setName(event.target.value + \\" and \\" + person);
                  }}
                />
                Hello
                {person}! I can run in Qwik, Web Component, React, Vue, Solid,
                or Liquid!
              </>
            );
          }}
        </For>
      </div>
    </>
  );
}

export default MyBasicForComponent;
"
`;

exports[`Solid > jsx > Typescript Test > BasicFor 2`] = `
"import { For, onMount, createSignal, createMemo } from \\"solid-js\\";

function MyBasicForComponent(props: any) {
  const [name, setName] = createSignal(\\"PatrickJS\\");

  const [names, setNames] = createSignal([\\"Steve\\", \\"PatrickJS\\"]);

  onMount(() => {
    console.log(\\"onMount code\\");
  });

  return (
    <>
      <div>
        <For each={names()}>
          {(person, _index) => {
            const index = _index();
            return (
              <>
                <input
                  value={name()}
                  onInput={(event) => {
                    setName(event.target.value + \\" and \\" + person);
                  }}
                />
                Hello
                {person}! I can run in Qwik, Web Component, React, Vue, Solid,
                or Liquid!
              </>
            );
          }}
        </For>
      </div>
    </>
  );
}

export default MyBasicForComponent;
"
`;

exports[`Solid > jsx > Typescript Test > BasicRef 1`] = `
"import { Show, createSignal, createMemo } from \\"solid-js\\";

export interface Props {
  showInput: boolean;
}

function MyBasicRefComponent(props: Props) {
  const [name, setName] = createSignal(\\"PatrickJS\\");

  function onBlur() {
    // Maintain focus
    inputRef.focus();
  }

  function lowerCaseName() {
    return name().toLowerCase();
  }

  let inputRef: HTMLInputElement;
  let inputNoArgRef: HTMLLabelElement;

  return (
    <>
      <div>
        <Show when={props.showInput}>
          <>
            <input
              class=\\"input-1dafdd72\\"
              ref={inputRef!}
              value={name()}
              onBlur={(event) => onBlur()}
              onInput={(event) => setName(event.target.value)}
            />
            <label for=\\"cars\\" ref={inputNoArgRef!}>
              Choose a car:
            </label>
            <select name=\\"cars\\" id=\\"cars\\">
              <option value=\\"supra\\">GR Supra</option>
              <option value=\\"86\\">GR 86</option>
            </select>
          </>
        </Show>
        Hello
        {lowerCaseName()}! I can run in React, Qwik, Vue, Solid, or Web
        Component!
      </div>
      <style>{\`.input-1dafdd72 {
  color: red;
}\`}</style>
    </>
  );
}

export default MyBasicRefComponent;
"
`;

exports[`Solid > jsx > Typescript Test > BasicRef 2`] = `
"import { Show, createSignal, createMemo } from \\"solid-js\\";

export interface Props {
  showInput: boolean;
}

function MyBasicRefComponent(props: Props) {
  const [name, setName] = createSignal(\\"PatrickJS\\");

  function onBlur() {
    // Maintain focus
    inputRef.focus();
  }

  function lowerCaseName() {
    return name().toLowerCase();
  }

  let inputRef: HTMLInputElement;
  let inputNoArgRef: HTMLLabelElement;

  return (
    <>
      <div>
        <Show when={props.showInput}>
          <>
            <input
              class=\\"input-1dafdd72\\"
              ref={inputRef!}
              value={name()}
              onBlur={(event) => onBlur()}
              onInput={(event) => setName(event.target.value)}
            />
            <label for=\\"cars\\" ref={inputNoArgRef!}>
              Choose a car:
            </label>
            <select name=\\"cars\\" id=\\"cars\\">
              <option value=\\"supra\\">GR Supra</option>
              <option value=\\"86\\">GR 86</option>
            </select>
          </>
        </Show>
        Hello
        {lowerCaseName()}! I can run in React, Qwik, Vue, Solid, or Web
        Component!
      </div>
      <style>{\`.input-1dafdd72 {
  color: red;
}\`}</style>
    </>
  );
}

export default MyBasicRefComponent;
"
`;

exports[`Solid > jsx > Typescript Test > BasicRefAssignment 1`] = `
"import { createSignal, createMemo } from \\"solid-js\\";

export interface Props {
  showInput: boolean;
}

function MyBasicRefAssignmentComponent(props: Props) {
  function handlerClick(event: Event) {
    event.preventDefault();
    console.log(\\"current value\\", holdValueRef);
    holdValueRef = holdValueRef + \\"JS\\";
  }

  return (
    <>
      <div>
        <button onClick={(evt) => handlerClick(evt)}>Click</button>
      </div>
    </>
  );
}

export default MyBasicRefAssignmentComponent;
"
`;

exports[`Solid > jsx > Typescript Test > BasicRefAssignment 2`] = `
"import { createSignal, createMemo } from \\"solid-js\\";

export interface Props {
  showInput: boolean;
}

function MyBasicRefAssignmentComponent(props: Props) {
  function handlerClick(event: Event) {
    event.preventDefault();
    console.log(\\"current value\\", holdValueRef);
    holdValueRef = holdValueRef + \\"JS\\";
  }

  return (
    <>
      <div>
        <button onClick={(evt) => handlerClick(evt)}>Click</button>
      </div>
    </>
  );
}

export default MyBasicRefAssignmentComponent;
"
`;

exports[`Solid > jsx > Typescript Test > BasicRefPrevious 1`] = `
"import { on, createEffect, createMemo, createSignal } from \\"solid-js\\";

export interface Props {
  showInput: boolean;
}

export function usePrevious<T>(value: T) {
  // The ref object is a generic container whose current property is mutable ...
  // ... and can hold any value, similar to an instance property on a class
  let ref = useRef<T>(null); // Store current value in ref

  onUpdate(() => {
    ref = value;
  }, [value]); // Only re-run if value changes
  // Return previous value (happens before update in useEffect above)

  return ref;
}

function MyPreviousComponent(props: Props) {
  const [count, setCount] = createSignal(0);

  const onUpdateFn_0_count__ = createMemo(() => count());
  function onUpdateFn_0() {
    prevCount = count();
  }
  createEffect(on(() => [onUpdateFn_0_count__()], onUpdateFn_0));

  return (
    <>
      <div>
        <h1>
          Now:
          {count()}, before:
          {prevCount}
        </h1>
        <button onClick={(event) => setCount(1)}>Increment</button>
      </div>
    </>
  );
}

export default MyPreviousComponent;
"
`;

exports[`Solid > jsx > Typescript Test > BasicRefPrevious 2`] = `
"import { on, createEffect, createMemo, createSignal } from \\"solid-js\\";

export interface Props {
  showInput: boolean;
}

export function usePrevious<T>(value: T) {
  // The ref object is a generic container whose current property is mutable ...
  // ... and can hold any value, similar to an instance property on a class
  let ref = useRef<T>(null); // Store current value in ref

  onUpdate(() => {
    ref = value;
  }, [value]); // Only re-run if value changes
  // Return previous value (happens before update in useEffect above)

  return ref;
}

function MyPreviousComponent(props: Props) {
  const [count, setCount] = createSignal(0);

  const onUpdateFn_0_count__ = createMemo(() => count());
  function onUpdateFn_0() {
    prevCount = count();
  }
  createEffect(on(() => [onUpdateFn_0_count__()], onUpdateFn_0));

  return (
    <>
      <div>
        <h1>
          Now:
          {count()}, before:
          {prevCount}
        </h1>
        <button onClick={(event) => setCount(1)}>Increment</button>
      </div>
    </>
  );
}

export default MyPreviousComponent;
"
`;

exports[`Solid > jsx > Typescript Test > Button 1`] = `
"import { Show } from \\"solid-js\\";

export interface ButtonProps {
  attributes?: any;
  text?: string;
  link?: string;
  openLinkInNewTab?: boolean;
}

function Button(props: ButtonProps) {
  return (
    <>
      <div>
        <Show when={props.link}>
          <a
            {...props.attributes}
            href={props.link}
            target={props.openLinkInNewTab ? \\"_blank\\" : undefined}
          >
            {props.text}
          </a>
        </Show>
        <Show when={!props.link}>
          <button type=\\"button\\" {...props.attributes}>
            {props.text}
          </button>
        </Show>
      </div>
    </>
  );
}

export default Button;
"
`;

exports[`Solid > jsx > Typescript Test > Button 2`] = `
"import { Show } from \\"solid-js\\";

export interface ButtonProps {
  attributes?: any;
  text?: string;
  link?: string;
  openLinkInNewTab?: boolean;
}

function Button(props: ButtonProps) {
  return (
    <>
      <div>
        <Show when={props.link}>
          <a
            {...props.attributes}
            href={props.link}
            target={props.openLinkInNewTab ? \\"_blank\\" : undefined}
          >
            {props.text}
          </a>
        </Show>
        <Show when={!props.link}>
          <button type=\\"button\\" {...props.attributes}>
            {props.text}
          </button>
        </Show>
      </div>
    </>
  );
}

export default Button;
"
`;

exports[`Solid > jsx > Typescript Test > Columns 1`] = `
"import { For, createSignal, createMemo } from \\"solid-js\\";

type Column = {
  content: any; // TODO: Implement this when support for dynamic CSS lands

  width?: number;
};
export interface ColumnProps {
  columns?: Column[]; // TODO: Implement this when support for dynamic CSS lands

  space?: number; // TODO: Implement this when support for dynamic CSS lands

  stackColumnsAt?: \\"tablet\\" | \\"mobile\\" | \\"never\\"; // TODO: Implement this when support for dynamic CSS lands

  reverseColumnsWhenStacked?: boolean;
}

function Column(props: ColumnProps) {
  function getColumns() {
    return props.columns || [];
  }

  function getGutterSize() {
    return typeof props.space === \\"number\\" ? props.space || 0 : 20;
  }

  function getWidth(index: number) {
    const columns = getColumns();
    return (columns[index] && columns[index].width) || 100 / columns.length;
  }

  function getColumnCssWidth(index: number) {
    const columns = getColumns();
    const gutterSize = getGutterSize();
    const subtractWidth = (gutterSize * (columns.length - 1)) / columns.length;
    return \`calc(\${getWidth(index)}% - \${subtractWidth}px)\`;
  }

  return (
    <>
      <div class=\\"builder-columns div-589a139a\\">
        <For each={props.columns}>
          {(column, _index) => {
            const index = _index();
            return (
              <div class=\\"builder-column div-589a139a-2\\">
                {column.content}
                {index}
              </div>
            );
          }}
        </For>
      </div>
      <style>{\`.div-589a139a {
  display: flex;
  flex-direction: column;
  align-items: stretch;
  line-height: normal;
}@media (max-width: 999px) { .div-589a139a {   flex-direction: row; } }@media (max-width: 639px) { .div-589a139a {   flex-direction: row-reverse; } }.div-589a139a-2 {
  flex-grow: 1;
}\`}</style>
    </>
  );
}

export default Column;
"
`;

exports[`Solid > jsx > Typescript Test > Columns 2`] = `
"import { For, createSignal, createMemo } from \\"solid-js\\";

type Column = {
  content: any; // TODO: Implement this when support for dynamic CSS lands

  width?: number;
};
export interface ColumnProps {
  columns?: Column[]; // TODO: Implement this when support for dynamic CSS lands

  space?: number; // TODO: Implement this when support for dynamic CSS lands

  stackColumnsAt?: \\"tablet\\" | \\"mobile\\" | \\"never\\"; // TODO: Implement this when support for dynamic CSS lands

  reverseColumnsWhenStacked?: boolean;
}

function Column(props: ColumnProps) {
  function getColumns() {
    return props.columns || [];
  }

  function getGutterSize() {
    return typeof props.space === \\"number\\" ? props.space || 0 : 20;
  }

  function getWidth(index: number) {
    const columns = getColumns();
    return (columns[index] && columns[index].width) || 100 / columns.length;
  }

  function getColumnCssWidth(index: number) {
    const columns = getColumns();
    const gutterSize = getGutterSize();
    const subtractWidth = (gutterSize * (columns.length - 1)) / columns.length;
    return \`calc(\${getWidth(index)}% - \${subtractWidth}px)\`;
  }

  return (
    <>
      <div class=\\"builder-columns div-589a139a\\">
        <For each={props.columns}>
          {(column, _index) => {
            const index = _index();
            return (
              <div class=\\"builder-column div-589a139a-2\\">
                {column.content}
                {index}
              </div>
            );
          }}
        </For>
      </div>
      <style>{\`.div-589a139a {
  display: flex;
  flex-direction: column;
  align-items: stretch;
  line-height: normal;
}@media (max-width: 999px) { .div-589a139a {   flex-direction: row; } }@media (max-width: 639px) { .div-589a139a {   flex-direction: row-reverse; } }.div-589a139a-2 {
  flex-grow: 1;
}\`}</style>
    </>
  );
}

export default Column;
"
`;

exports[`Solid > jsx > Typescript Test > ContentSlotHtml 1`] = `
"type Props = {
  [key: string]: string | JSX.Element;
  slotTesting: JSX.Element;
};

import type { JSX } from \\"../../../../jsx-runtime\\";

function ContentSlotCode(props: Props) {
  return (
    <>
      <div>
        <Slot name={props.slotTesting}></Slot>
        <div>
          <hr />
        </div>
        <div>
          <Slot></Slot>
        </div>
      </div>
    </>
  );
}

export default ContentSlotCode;
"
`;

exports[`Solid > jsx > Typescript Test > ContentSlotHtml 2`] = `
"type Props = {
  [key: string]: string | JSX.Element;
  slotTesting: JSX.Element;
};

import type { JSX } from \\"../../../../jsx-runtime\\";

function ContentSlotCode(props: Props) {
  return (
    <>
      <div>
        <Slot name={props.slotTesting}></Slot>
        <div>
          <hr />
        </div>
        <div>
          <Slot></Slot>
        </div>
      </div>
    </>
  );
}

export default ContentSlotCode;
"
`;

exports[`Solid > jsx > Typescript Test > ContentSlotJSX 1`] = `
"import { Show, createSignal, createMemo } from \\"solid-js\\";

type Props = {
  [key: string]: string | JSX.Element;
};

import type { JSX } from \\"../../../../jsx-runtime\\";

function ContentSlotJsxCode(props: Props) {
  const [name, setName] = createSignal(\\"king\\");

  const [showContent, setShowContent] = createSignal(false);

  const cls = createMemo(() => {
    return props.slotContent && props.children ? \`\${name()}-content\` : \\"\\";
  });

  function show() {
    props.slotContent ? 1 : \\"\\";
  }

  return (
    <>
      <Show when={props.slotReference}>
        <div
          class={cls()}
          name={props.slotContent ? \\"name1\\" : \\"name2\\"}
          title={props.slotContent ? \\"title1\\" : \\"title2\\"}
          {...props.attributes}
          onClick={(event) => show()}
        >
          <Show when={showContent() && props.slotContent}>
            <Slot name=\\"content\\">{props.content}</Slot>
          </Show>
          <div>
            <hr />
          </div>
          <div>{props.children}</div>
        </div>
      </Show>
    </>
  );
}

export default ContentSlotJsxCode;
"
`;

exports[`Solid > jsx > Typescript Test > ContentSlotJSX 2`] = `
"import { Show, createSignal, createMemo } from \\"solid-js\\";

type Props = {
  [key: string]: string | JSX.Element;
};

import type { JSX } from \\"../../../../jsx-runtime\\";

function ContentSlotJsxCode(props: Props) {
  const [name, setName] = createSignal(\\"king\\");

  const [showContent, setShowContent] = createSignal(false);

  const cls = createMemo(() => {
    return props.slotContent && props.children ? \`\${name()}-content\` : \\"\\";
  });

  function show() {
    props.slotContent ? 1 : \\"\\";
  }

  return (
    <>
      <Show when={props.slotReference}>
        <div
          class={cls()}
          name={props.slotContent ? \\"name1\\" : \\"name2\\"}
          title={props.slotContent ? \\"title1\\" : \\"title2\\"}
          {...props.attributes}
          onClick={(event) => show()}
        >
          <Show when={showContent() && props.slotContent}>
            <Slot name=\\"content\\">{props.content}</Slot>
          </Show>
          <div>
            <hr />
          </div>
          <div>{props.children}</div>
        </div>
      </Show>
    </>
  );
}

export default ContentSlotJsxCode;
"
`;

exports[`Solid > jsx > Typescript Test > CustomCode 1`] = `
"import { onMount, createSignal, createMemo } from \\"solid-js\\";

export interface CustomCodeProps {
  code: string;
  replaceNodes?: boolean;
}

function CustomCode(props: CustomCodeProps) {
  const [scriptsInserted, setScriptsInserted] = createSignal([]);

  const [scriptsRun, setScriptsRun] = createSignal([]);

  function findAndRunScripts() {
    // TODO: Move this function to standalone one in '@builder.io/utils'
    if (elem && typeof window !== \\"undefined\\") {
      /** @type {HTMLScriptElement[]} */
      const scripts = elem.getElementsByTagName(\\"script\\");

      for (let i = 0; i < scripts.length; i++) {
        const script = scripts[i];

        if (script.src) {
          if (scriptsInserted().includes(script.src)) {
            continue;
          }

          scriptsInserted().push(script.src);
          const newScript = document.createElement(\\"script\\");
          newScript.async = true;
          newScript.src = script.src;
          document.head.appendChild(newScript);
        } else if (
          !script.type ||
          [
            \\"text/javascript\\",
            \\"application/javascript\\",
            \\"application/ecmascript\\",
          ].includes(script.type)
        ) {
          if (scriptsRun().includes(script.innerText)) {
            continue;
          }

          try {
            scriptsRun().push(script.innerText);
            new Function(script.innerText)();
          } catch (error) {
            console.warn(\\"\`CustomCode\`: Error running script:\\", error);
          }
        }
      }
    }
  }

  let elem: HTMLDivElement;

  onMount(() => {
    findAndRunScripts();
  });

  return (
    <>
      <div
        class={
          \\"builder-custom-code\\" + (props.replaceNodes ? \\" replace-nodes\\" : \\"\\")
        }
        ref={elem!}
        innerHTML={props.code}
      ></div>
    </>
  );
}

export default CustomCode;
"
`;

exports[`Solid > jsx > Typescript Test > CustomCode 2`] = `
"import { onMount, createSignal, createMemo } from \\"solid-js\\";

export interface CustomCodeProps {
  code: string;
  replaceNodes?: boolean;
}

function CustomCode(props: CustomCodeProps) {
  const [scriptsInserted, setScriptsInserted] = createSignal([]);

  const [scriptsRun, setScriptsRun] = createSignal([]);

  function findAndRunScripts() {
    // TODO: Move this function to standalone one in '@builder.io/utils'
    if (elem && typeof window !== \\"undefined\\") {
      /** @type {HTMLScriptElement[]} */
      const scripts = elem.getElementsByTagName(\\"script\\");

      for (let i = 0; i < scripts.length; i++) {
        const script = scripts[i];

        if (script.src) {
          if (scriptsInserted().includes(script.src)) {
            continue;
          }

          scriptsInserted().push(script.src);
          const newScript = document.createElement(\\"script\\");
          newScript.async = true;
          newScript.src = script.src;
          document.head.appendChild(newScript);
        } else if (
          !script.type ||
          [
            \\"text/javascript\\",
            \\"application/javascript\\",
            \\"application/ecmascript\\",
          ].includes(script.type)
        ) {
          if (scriptsRun().includes(script.innerText)) {
            continue;
          }

          try {
            scriptsRun().push(script.innerText);
            new Function(script.innerText)();
          } catch (error) {
            console.warn(\\"\`CustomCode\`: Error running script:\\", error);
          }
        }
      }
    }
  }

  let elem: HTMLDivElement;

  onMount(() => {
    findAndRunScripts();
  });

  return (
    <>
      <div
        class={
          \\"builder-custom-code\\" + (props.replaceNodes ? \\" replace-nodes\\" : \\"\\")
        }
        ref={elem!}
        innerHTML={props.code}
      ></div>
    </>
  );
}

export default CustomCode;
"
`;

exports[`Solid > jsx > Typescript Test > Embed 1`] = `
"import { onMount, createSignal, createMemo } from \\"solid-js\\";

export interface CustomCodeProps {
  code: string;
  replaceNodes?: boolean;
}

function CustomCode(props: CustomCodeProps) {
  const [scriptsInserted, setScriptsInserted] = createSignal([]);

  const [scriptsRun, setScriptsRun] = createSignal([]);

  function findAndRunScripts() {
    // TODO: Move this function to standalone one in '@builder.io/utils'
    if (elem && typeof window !== \\"undefined\\") {
      /** @type {HTMLScriptElement[]} */
      const scripts = elem.getElementsByTagName(\\"script\\");

      for (let i = 0; i < scripts.length; i++) {
        const script = scripts[i];

        if (script.src) {
          if (scriptsInserted().includes(script.src)) {
            continue;
          }

          scriptsInserted().push(script.src);
          const newScript = document.createElement(\\"script\\");
          newScript.async = true;
          newScript.src = script.src;
          document.head.appendChild(newScript);
        } else if (
          !script.type ||
          [
            \\"text/javascript\\",
            \\"application/javascript\\",
            \\"application/ecmascript\\",
          ].includes(script.type)
        ) {
          if (scriptsRun().includes(script.innerText)) {
            continue;
          }

          try {
            scriptsRun().push(script.innerText);
            new Function(script.innerText)();
          } catch (error) {
            console.warn(\\"\`CustomCode\`: Error running script:\\", error);
          }
        }
      }
    }
  }

  let elem: HTMLDivElement;

  onMount(() => {
    findAndRunScripts();
  });

  return (
    <>
      <div
        class={
          \\"builder-custom-code\\" + (props.replaceNodes ? \\" replace-nodes\\" : \\"\\")
        }
        ref={elem!}
        innerHTML={props.code}
      ></div>
    </>
  );
}

export default CustomCode;
"
`;

exports[`Solid > jsx > Typescript Test > Embed 2`] = `
"import { onMount, createSignal, createMemo } from \\"solid-js\\";

export interface CustomCodeProps {
  code: string;
  replaceNodes?: boolean;
}

function CustomCode(props: CustomCodeProps) {
  const [scriptsInserted, setScriptsInserted] = createSignal([]);

  const [scriptsRun, setScriptsRun] = createSignal([]);

  function findAndRunScripts() {
    // TODO: Move this function to standalone one in '@builder.io/utils'
    if (elem && typeof window !== \\"undefined\\") {
      /** @type {HTMLScriptElement[]} */
      const scripts = elem.getElementsByTagName(\\"script\\");

      for (let i = 0; i < scripts.length; i++) {
        const script = scripts[i];

        if (script.src) {
          if (scriptsInserted().includes(script.src)) {
            continue;
          }

          scriptsInserted().push(script.src);
          const newScript = document.createElement(\\"script\\");
          newScript.async = true;
          newScript.src = script.src;
          document.head.appendChild(newScript);
        } else if (
          !script.type ||
          [
            \\"text/javascript\\",
            \\"application/javascript\\",
            \\"application/ecmascript\\",
          ].includes(script.type)
        ) {
          if (scriptsRun().includes(script.innerText)) {
            continue;
          }

          try {
            scriptsRun().push(script.innerText);
            new Function(script.innerText)();
          } catch (error) {
            console.warn(\\"\`CustomCode\`: Error running script:\\", error);
          }
        }
      }
    }
  }

  let elem: HTMLDivElement;

  onMount(() => {
    findAndRunScripts();
  });

  return (
    <>
      <div
        class={
          \\"builder-custom-code\\" + (props.replaceNodes ? \\" replace-nodes\\" : \\"\\")
        }
        ref={elem!}
        innerHTML={props.code}
      ></div>
    </>
  );
}

export default CustomCode;
"
`;

exports[`Solid > jsx > Typescript Test > Form 1`] = `
"import { Show, For, createSignal, createMemo } from \\"solid-js\\";

export interface FormProps {
  attributes?: any;
  name?: string;
  action?: string;
  validate?: boolean;
  method?: string;
  builderBlock?: BuilderElement;
  sendSubmissionsTo?: string;
  sendSubmissionsToEmail?: string;
  sendWithJs?: boolean;
  contentType?: string;
  customHeaders?: {
    [key: string]: string;
  };
  successUrl?: string;
  previewState?: FormState;
  successMessage?: BuilderElement[];
  errorMessage?: BuilderElement[];
  sendingMessage?: BuilderElement[];
  resetFormOnSubmit?: boolean;
  errorMessagePath?: string;
}
export type FormState = \\"unsubmitted\\" | \\"sending\\" | \\"success\\" | \\"error\\";

import { Builder, BuilderElement, builder } from \\"@builder.io/sdk\\";
import {
  BuilderBlock as BuilderBlockComponent,
  BuilderBlocks,
  get,
  set,
} from \\"@fake\\";

function FormComponent(props: FormProps) {
  const [formState, setFormState] = createSignal(\\"unsubmitted\\");

  const [responseData, setResponseData] = createSignal(null);

  const [formErrorMessage, setFormErrorMessage] = createSignal(\\"\\");

  const submissionState = createMemo(() => {
    return (Builder.isEditing && props.previewState) || formState();
  });

  function onSubmit(
    event: Event & {
      currentTarget: HTMLFormElement;
    }
  ) {
    const sendWithJs = props.sendWithJs || props.sendSubmissionsTo === \\"email\\";

    if (props.sendSubmissionsTo === \\"zapier\\") {
      event.preventDefault();
    } else if (sendWithJs) {
      if (!(props.action || props.sendSubmissionsTo === \\"email\\")) {
        event.preventDefault();
        return;
      }

      event.preventDefault();
      const el = event.currentTarget;
      const headers = props.customHeaders || {};
      let body: any;
      const formData = new FormData(el); // TODO: maybe support null

      const formPairs: {
        key: string;
        value: File | boolean | number | string | FileList;
      }[] = Array.from(
        event.currentTarget.querySelectorAll(\\"input,select,textarea\\")
      )
        .filter((el) => !!(el as HTMLInputElement).name)
        .map((el) => {
          let value: any;
          const key = (el as HTMLImageElement).name;

          if (el instanceof HTMLInputElement) {
            if (el.type === \\"radio\\") {
              if (el.checked) {
                value = el.name;
                return {
                  key,
                  value,
                };
              }
            } else if (el.type === \\"checkbox\\") {
              value = el.checked;
            } else if (el.type === \\"number\\" || el.type === \\"range\\") {
              const num = el.valueAsNumber;

              if (!isNaN(num)) {
                value = num;
              }
            } else if (el.type === \\"file\\") {
              // TODO: one vs multiple files
              value = el.files;
            } else {
              value = el.value;
            }
          } else {
            value = (el as HTMLInputElement).value;
          }

          return {
            key,
            value,
          };
        });
      let contentType = props.contentType;

      if (props.sendSubmissionsTo === \\"email\\") {
        contentType = \\"multipart/form-data\\";
      }

      Array.from(formPairs).forEach(({ value }) => {
        if (
          value instanceof File ||
          (Array.isArray(value) && value[0] instanceof File) ||
          value instanceof FileList
        ) {
          contentType = \\"multipart/form-data\\";
        }
      }); // TODO: send as urlEncoded or multipart by default
      // because of ease of use and reliability in browser API
      // for encoding the form?

      if (contentType !== \\"application/json\\") {
        body = formData;
      } else {
        // Json
        const json = {};
        Array.from(formPairs).forEach(({ value, key }) => {
          set(json, key, value);
        });
        body = JSON.stringify(json);
      }

      if (contentType && contentType !== \\"multipart/form-data\\") {
        if (
          /* Zapier doesn't allow content-type header to be sent from browsers */
          !(sendWithJs && props.action?.includes(\\"zapier.com\\"))
        ) {
          headers[\\"content-type\\"] = contentType;
        }
      }

      const presubmitEvent = new CustomEvent(\\"presubmit\\", {
        detail: {
          body,
        },
      });

      if (formRef) {
        formRef.dispatchEvent(presubmitEvent);

        if (presubmitEvent.defaultPrevented) {
          return;
        }
      }

      setFormState(\\"sending\\");
      const formUrl = \`\${
        builder.env === \\"dev\\" ? \\"http://localhost:5000\\" : \\"https://builder.io\\"
      }/api/v1/form-submit?apiKey=\${builder.apiKey}&to=\${btoa(
        props.sendSubmissionsToEmail || \\"\\"
      )}&name=\${encodeURIComponent(props.name || \\"\\")}\`;
      fetch(
        props.sendSubmissionsTo === \\"email\\" ? formUrl : props.action!,
        /* TODO: throw error if no action URL */
        {
          body,
          headers,
          method: props.method || \\"post\\",
        }
      ).then(
        async (res) => {
          let body;
          const contentType = res.headers.get(\\"content-type\\");

          if (contentType && contentType.indexOf(\\"application/json\\") !== -1) {
            body = await res.json();
          } else {
            body = await res.text();
          }

          if (!res.ok && props.errorMessagePath) {
            /* TODO: allow supplying an error formatter function */
            let message = get(body, props.errorMessagePath);

            if (message) {
              if (typeof message !== \\"string\\") {
                /* TODO: ideally convert json to yaml so it woul dbe like
           error: - email has been taken */
                message = JSON.stringify(message);
              }

              setFormErrorMessage(message);
            }
          }

          setResponseData(body);
          setFormState(res.ok ? \\"success\\" : \\"error\\");

          if (res.ok) {
            const submitSuccessEvent = new CustomEvent(\\"submit:success\\", {
              detail: {
                res,
                body,
              },
            });

            if (formRef) {
              formRef.dispatchEvent(submitSuccessEvent);

              if (submitSuccessEvent.defaultPrevented) {
                return;
              }
              /* TODO: option to turn this on/off? */

              if (props.resetFormOnSubmit !== false) {
                formRef.reset();
              }
            }
            /* TODO: client side route event first that can be preventDefaulted */

            if (props.successUrl) {
              if (formRef) {
                const event = new CustomEvent(\\"route\\", {
                  detail: {
                    url: props.successUrl,
                  },
                });
                formRef.dispatchEvent(event);

                if (!event.defaultPrevented) {
                  location.href = props.successUrl;
                }
              } else {
                location.href = props.successUrl;
              }
            }
          }
        },
        (err) => {
          const submitErrorEvent = new CustomEvent(\\"submit:error\\", {
            detail: {
              error: err,
            },
          });

          if (formRef) {
            formRef.dispatchEvent(submitErrorEvent);

            if (submitErrorEvent.defaultPrevented) {
              return;
            }
          }

          setResponseData(err);
          setFormState(\\"error\\");
        }
      );
    }
  }

  let formRef: HTMLFormElement;

  return (
    <>
      <form
        validate={props.validate}
        ref={formRef!}
        action={!props.sendWithJs && props.action}
        method={props.method}
        name={props.name}
        onSubmit={(event) => onSubmit(event)}
        {...props.attributes}
      >
        <Show when={props.builderBlock && props.builderBlock.children}>
          <For each={props.builderBlock?.children}>
            {(block, _index) => {
              const index = _index();
              return (
                <BuilderBlockComponent
                  key={block.id}
                  block={block}
                  index={index}
                ></BuilderBlockComponent>
              );
            }}
          </For>
        </Show>
        <Show when={submissionState() === \\"error\\"}>
          <BuilderBlocks
            dataPath=\\"errorMessage\\"
            blocks={props.errorMessage!}
          ></BuilderBlocks>
        </Show>
        <Show when={submissionState() === \\"sending\\"}>
          <BuilderBlocks
            dataPath=\\"sendingMessage\\"
            blocks={props.sendingMessage!}
          ></BuilderBlocks>
        </Show>
        <Show when={submissionState() === \\"error\\" && responseData()}>
          <pre class=\\"builder-form-error-text pre-4bf0b036\\">
            {JSON.stringify(responseData(), null, 2)}
          </pre>
        </Show>
        <Show when={submissionState() === \\"success\\"}>
          <BuilderBlocks
            dataPath=\\"successMessage\\"
            blocks={props.successMessage!}
          ></BuilderBlocks>
        </Show>
      </form>
      <style>{\`.pre-4bf0b036 {
  padding: 10px;
  color: red;
  text-align: center;
}\`}</style>
    </>
  );
}

export default FormComponent;
"
`;

exports[`Solid > jsx > Typescript Test > Form 2`] = `
"import { Show, For, createSignal, createMemo } from \\"solid-js\\";

export interface FormProps {
  attributes?: any;
  name?: string;
  action?: string;
  validate?: boolean;
  method?: string;
  builderBlock?: BuilderElement;
  sendSubmissionsTo?: string;
  sendSubmissionsToEmail?: string;
  sendWithJs?: boolean;
  contentType?: string;
  customHeaders?: {
    [key: string]: string;
  };
  successUrl?: string;
  previewState?: FormState;
  successMessage?: BuilderElement[];
  errorMessage?: BuilderElement[];
  sendingMessage?: BuilderElement[];
  resetFormOnSubmit?: boolean;
  errorMessagePath?: string;
}
export type FormState = \\"unsubmitted\\" | \\"sending\\" | \\"success\\" | \\"error\\";

import { Builder, BuilderElement, builder } from \\"@builder.io/sdk\\";
import {
  BuilderBlock as BuilderBlockComponent,
  BuilderBlocks,
  get,
  set,
} from \\"@fake\\";

function FormComponent(props: FormProps) {
  const [formState, setFormState] = createSignal(\\"unsubmitted\\");

  const [responseData, setResponseData] = createSignal(null);

  const [formErrorMessage, setFormErrorMessage] = createSignal(\\"\\");

  const submissionState = createMemo(() => {
    return (Builder.isEditing && props.previewState) || formState();
  });

  function onSubmit(
    event: Event & {
      currentTarget: HTMLFormElement;
    }
  ) {
    const sendWithJs = props.sendWithJs || props.sendSubmissionsTo === \\"email\\";

    if (props.sendSubmissionsTo === \\"zapier\\") {
      event.preventDefault();
    } else if (sendWithJs) {
      if (!(props.action || props.sendSubmissionsTo === \\"email\\")) {
        event.preventDefault();
        return;
      }

      event.preventDefault();
      const el = event.currentTarget;
      const headers = props.customHeaders || {};
      let body: any;
      const formData = new FormData(el); // TODO: maybe support null

      const formPairs: {
        key: string;
        value: File | boolean | number | string | FileList;
      }[] = Array.from(
        event.currentTarget.querySelectorAll(\\"input,select,textarea\\")
      )
        .filter((el) => !!(el as HTMLInputElement).name)
        .map((el) => {
          let value: any;
          const key = (el as HTMLImageElement).name;

          if (el instanceof HTMLInputElement) {
            if (el.type === \\"radio\\") {
              if (el.checked) {
                value = el.name;
                return {
                  key,
                  value,
                };
              }
            } else if (el.type === \\"checkbox\\") {
              value = el.checked;
            } else if (el.type === \\"number\\" || el.type === \\"range\\") {
              const num = el.valueAsNumber;

              if (!isNaN(num)) {
                value = num;
              }
            } else if (el.type === \\"file\\") {
              // TODO: one vs multiple files
              value = el.files;
            } else {
              value = el.value;
            }
          } else {
            value = (el as HTMLInputElement).value;
          }

          return {
            key,
            value,
          };
        });
      let contentType = props.contentType;

      if (props.sendSubmissionsTo === \\"email\\") {
        contentType = \\"multipart/form-data\\";
      }

      Array.from(formPairs).forEach(({ value }) => {
        if (
          value instanceof File ||
          (Array.isArray(value) && value[0] instanceof File) ||
          value instanceof FileList
        ) {
          contentType = \\"multipart/form-data\\";
        }
      }); // TODO: send as urlEncoded or multipart by default
      // because of ease of use and reliability in browser API
      // for encoding the form?

      if (contentType !== \\"application/json\\") {
        body = formData;
      } else {
        // Json
        const json = {};
        Array.from(formPairs).forEach(({ value, key }) => {
          set(json, key, value);
        });
        body = JSON.stringify(json);
      }

      if (contentType && contentType !== \\"multipart/form-data\\") {
        if (
          /* Zapier doesn't allow content-type header to be sent from browsers */
          !(sendWithJs && props.action?.includes(\\"zapier.com\\"))
        ) {
          headers[\\"content-type\\"] = contentType;
        }
      }

      const presubmitEvent = new CustomEvent(\\"presubmit\\", {
        detail: {
          body,
        },
      });

      if (formRef) {
        formRef.dispatchEvent(presubmitEvent);

        if (presubmitEvent.defaultPrevented) {
          return;
        }
      }

      setFormState(\\"sending\\");
      const formUrl = \`\${
        builder.env === \\"dev\\" ? \\"http://localhost:5000\\" : \\"https://builder.io\\"
      }/api/v1/form-submit?apiKey=\${builder.apiKey}&to=\${btoa(
        props.sendSubmissionsToEmail || \\"\\"
      )}&name=\${encodeURIComponent(props.name || \\"\\")}\`;
      fetch(
        props.sendSubmissionsTo === \\"email\\" ? formUrl : props.action!,
        /* TODO: throw error if no action URL */
        {
          body,
          headers,
          method: props.method || \\"post\\",
        }
      ).then(
        async (res) => {
          let body;
          const contentType = res.headers.get(\\"content-type\\");

          if (contentType && contentType.indexOf(\\"application/json\\") !== -1) {
            body = await res.json();
          } else {
            body = await res.text();
          }

          if (!res.ok && props.errorMessagePath) {
            /* TODO: allow supplying an error formatter function */
            let message = get(body, props.errorMessagePath);

            if (message) {
              if (typeof message !== \\"string\\") {
                /* TODO: ideally convert json to yaml so it woul dbe like
           error: - email has been taken */
                message = JSON.stringify(message);
              }

              setFormErrorMessage(message);
            }
          }

          setResponseData(body);
          setFormState(res.ok ? \\"success\\" : \\"error\\");

          if (res.ok) {
            const submitSuccessEvent = new CustomEvent(\\"submit:success\\", {
              detail: {
                res,
                body,
              },
            });

            if (formRef) {
              formRef.dispatchEvent(submitSuccessEvent);

              if (submitSuccessEvent.defaultPrevented) {
                return;
              }
              /* TODO: option to turn this on/off? */

              if (props.resetFormOnSubmit !== false) {
                formRef.reset();
              }
            }
            /* TODO: client side route event first that can be preventDefaulted */

            if (props.successUrl) {
              if (formRef) {
                const event = new CustomEvent(\\"route\\", {
                  detail: {
                    url: props.successUrl,
                  },
                });
                formRef.dispatchEvent(event);

                if (!event.defaultPrevented) {
                  location.href = props.successUrl;
                }
              } else {
                location.href = props.successUrl;
              }
            }
          }
        },
        (err) => {
          const submitErrorEvent = new CustomEvent(\\"submit:error\\", {
            detail: {
              error: err,
            },
          });

          if (formRef) {
            formRef.dispatchEvent(submitErrorEvent);

            if (submitErrorEvent.defaultPrevented) {
              return;
            }
          }

          setResponseData(err);
          setFormState(\\"error\\");
        }
      );
    }
  }

  let formRef: HTMLFormElement;

  return (
    <>
      <form
        validate={props.validate}
        ref={formRef!}
        action={!props.sendWithJs && props.action}
        method={props.method}
        name={props.name}
        onSubmit={(event) => onSubmit(event)}
        {...props.attributes}
      >
        <Show when={props.builderBlock && props.builderBlock.children}>
          <For each={props.builderBlock?.children}>
            {(block, _index) => {
              const index = _index();
              return (
                <BuilderBlockComponent
                  key={block.id}
                  block={block}
                  index={index}
                ></BuilderBlockComponent>
              );
            }}
          </For>
        </Show>
        <Show when={submissionState() === \\"error\\"}>
          <BuilderBlocks
            dataPath=\\"errorMessage\\"
            blocks={props.errorMessage!}
          ></BuilderBlocks>
        </Show>
        <Show when={submissionState() === \\"sending\\"}>
          <BuilderBlocks
            dataPath=\\"sendingMessage\\"
            blocks={props.sendingMessage!}
          ></BuilderBlocks>
        </Show>
        <Show when={submissionState() === \\"error\\" && responseData()}>
          <pre class=\\"builder-form-error-text pre-4bf0b036\\">
            {JSON.stringify(responseData(), null, 2)}
          </pre>
        </Show>
        <Show when={submissionState() === \\"success\\"}>
          <BuilderBlocks
            dataPath=\\"successMessage\\"
            blocks={props.successMessage!}
          ></BuilderBlocks>
        </Show>
      </form>
      <style>{\`.pre-4bf0b036 {
  padding: 10px;
  color: red;
  text-align: center;
}\`}</style>
    </>
  );
}

export default FormComponent;
"
`;

exports[`Solid > jsx > Typescript Test > Image 1`] = `
"import { Show, onMount, createSignal, createMemo } from \\"solid-js\\";

// TODO: AMP Support?
export interface ImageProps {
  _class?: string;
  image: string;
  sizes?: string;
  lazy?: boolean;
  height?: number;
  width?: number;
  altText?: string;
  backgroundSize?: string;
  backgroundPosition?: string; // TODO: Support generating Builder.io and or Shopify \`srcset\`s when needed

  srcset?: string; // TODO: Implement support for custom aspect ratios

  aspectRatio?: number; // TODO: This might not work as expected in terms of positioning

  children?: any;
}

function Image(props: ImageProps) {
  const [scrollListener, setScrollListener] = createSignal(null);

  const [imageLoaded, setImageLoaded] = createSignal(false);

  const [load, setLoad] = createSignal(false);

  function setLoaded() {
    setImageLoaded(true);
  }

  function useLazyLoading() {
    // TODO: Add more checks here, like testing for real web browsers
    return !!props.lazy && isBrowser();
  }

  function isBrowser() {
    return (
      typeof window !== \\"undefined\\" && window.navigator.product != \\"ReactNative\\"
    );
  }

  let pictureRef: HTMLElement;

  onMount(() => {
    if (useLazyLoading()) {
      // throttled scroll capture listener
      const listener = () => {
        if (pictureRef) {
          const rect = pictureRef.getBoundingClientRect();
          const buffer = window.innerHeight / 2;

          if (rect.top < window.innerHeight + buffer) {
            setLoad(true);
            setScrollListener(null);
            window.removeEventListener(\\"scroll\\", listener);
          }
        }
      };

      setScrollListener(listener);
      window.addEventListener(\\"scroll\\", listener, {
        capture: true,
        passive: true,
      });
      listener();
    }
  });

  return (
    <>
      <div>
        <picture ref={pictureRef!}>
          <Show when={!useLazyLoading() || load()}>
            <img
              class={
                \\"builder-image\\" +
                (props._class ? \\" \\" + props._class : \\"\\") +
                \\" img-88889f3c\\"
              }
              alt={props.altText}
              aria-role={props.altText ? \\"presentation\\" : undefined}
              src={props.image}
              onLoad={(event) => setLoaded()}
              srcset={props.srcset}
              sizes={props.sizes}
            />
          </Show>
          <source srcset={props.srcset} />
        </picture>
        {props.children}
      </div>
      <style>{\`.img-88889f3c {
  opacity: 1;
  transition: opacity 0.2s ease-in-out;
  object-fit: cover;
  object-position: center;
}\`}</style>
    </>
  );
}

export default Image;
"
`;

exports[`Solid > jsx > Typescript Test > Image 2`] = `
"import { Show, onMount, createSignal, createMemo } from \\"solid-js\\";

// TODO: AMP Support?
export interface ImageProps {
  _class?: string;
  image: string;
  sizes?: string;
  lazy?: boolean;
  height?: number;
  width?: number;
  altText?: string;
  backgroundSize?: string;
  backgroundPosition?: string; // TODO: Support generating Builder.io and or Shopify \`srcset\`s when needed

  srcset?: string; // TODO: Implement support for custom aspect ratios

  aspectRatio?: number; // TODO: This might not work as expected in terms of positioning

  children?: any;
}

function Image(props: ImageProps) {
  const [scrollListener, setScrollListener] = createSignal(null);

  const [imageLoaded, setImageLoaded] = createSignal(false);

  const [load, setLoad] = createSignal(false);

  function setLoaded() {
    setImageLoaded(true);
  }

  function useLazyLoading() {
    // TODO: Add more checks here, like testing for real web browsers
    return !!props.lazy && isBrowser();
  }

  function isBrowser() {
    return (
      typeof window !== \\"undefined\\" && window.navigator.product != \\"ReactNative\\"
    );
  }

  let pictureRef: HTMLElement;

  onMount(() => {
    if (useLazyLoading()) {
      // throttled scroll capture listener
      const listener = () => {
        if (pictureRef) {
          const rect = pictureRef.getBoundingClientRect();
          const buffer = window.innerHeight / 2;

          if (rect.top < window.innerHeight + buffer) {
            setLoad(true);
            setScrollListener(null);
            window.removeEventListener(\\"scroll\\", listener);
          }
        }
      };

      setScrollListener(listener);
      window.addEventListener(\\"scroll\\", listener, {
        capture: true,
        passive: true,
      });
      listener();
    }
  });

  return (
    <>
      <div>
        <picture ref={pictureRef!}>
          <Show when={!useLazyLoading() || load()}>
            <img
              class={
                \\"builder-image\\" +
                (props._class ? \\" \\" + props._class : \\"\\") +
                \\" img-88889f3c\\"
              }
              alt={props.altText}
              aria-role={props.altText ? \\"presentation\\" : undefined}
              src={props.image}
              onLoad={(event) => setLoaded()}
              srcset={props.srcset}
              sizes={props.sizes}
            />
          </Show>
          <source srcset={props.srcset} />
        </picture>
        {props.children}
      </div>
      <style>{\`.img-88889f3c {
  opacity: 1;
  transition: opacity 0.2s ease-in-out;
  object-fit: cover;
  object-position: center;
}\`}</style>
    </>
  );
}

export default Image;
"
`;

exports[`Solid > jsx > Typescript Test > Image State 1`] = `
"import { For, createSignal, createMemo } from \\"solid-js\\";

function ImgStateComponent(props: any) {
  const [canShow, setCanShow] = createSignal(true);

  const [images, setImages] = createSignal([\\"http://example.com/qwik.png\\"]);

  return (
    <>
      <div>
        <For each={images()}>
          {(item, _index) => {
            const itemIndex = _index();
            return (
              <>
                <img class=\\"custom-class\\" src={item} key={itemIndex} />
              </>
            );
          }}
        </For>
      </div>
    </>
  );
}

export default ImgStateComponent;
"
`;

exports[`Solid > jsx > Typescript Test > Image State 2`] = `
"import { For, createSignal, createMemo } from \\"solid-js\\";

function ImgStateComponent(props: any) {
  const [canShow, setCanShow] = createSignal(true);

  const [images, setImages] = createSignal([\\"http://example.com/qwik.png\\"]);

  return (
    <>
      <div>
        <For each={images()}>
          {(item, _index) => {
            const itemIndex = _index();
            return (
              <>
                <img class=\\"custom-class\\" src={item} key={itemIndex} />
              </>
            );
          }}
        </For>
      </div>
    </>
  );
}

export default ImgStateComponent;
"
`;

exports[`Solid > jsx > Typescript Test > Img 1`] = `
"export interface ImgProps {
  attributes?: any;
  imgSrc?: string;
  altText?: string;
  backgroundSize?: \\"cover\\" | \\"contain\\";
  backgroundPosition?:
    | \\"center\\"
    | \\"top\\"
    | \\"left\\"
    | \\"right\\"
    | \\"bottom\\"
    | \\"top left\\"
    | \\"top right\\"
    | \\"bottom left\\"
    | \\"bottom right\\";
}

import { Builder } from \\"@builder.io/sdk\\";

function ImgComponent(props: ImgProps) {
  return (
    <>
      <img
        style={{
          \\"object-fit\\": props.backgroundSize || \\"cover\\",
          \\"object-position\\": props.backgroundPosition || \\"center\\",
        }}
        {...props.attributes}
        key={(Builder.isEditing && props.imgSrc) || \\"default-key\\"}
        alt={props.altText}
        src={props.imgSrc}
      />
    </>
  );
}

export default ImgComponent;
"
`;

exports[`Solid > jsx > Typescript Test > Img 2`] = `
"export interface ImgProps {
  attributes?: any;
  imgSrc?: string;
  altText?: string;
  backgroundSize?: \\"cover\\" | \\"contain\\";
  backgroundPosition?:
    | \\"center\\"
    | \\"top\\"
    | \\"left\\"
    | \\"right\\"
    | \\"bottom\\"
    | \\"top left\\"
    | \\"top right\\"
    | \\"bottom left\\"
    | \\"bottom right\\";
}

import { Builder } from \\"@builder.io/sdk\\";

function ImgComponent(props: ImgProps) {
  return (
    <>
      <img
        style={{
          \\"object-fit\\": props.backgroundSize || \\"cover\\",
          \\"object-position\\": props.backgroundPosition || \\"center\\",
        }}
        {...props.attributes}
        key={(Builder.isEditing && props.imgSrc) || \\"default-key\\"}
        alt={props.altText}
        src={props.imgSrc}
      />
    </>
  );
}

export default ImgComponent;
"
`;

exports[`Solid > jsx > Typescript Test > Input 1`] = `
"export interface FormInputProps {
  type?: string;
  attributes?: any;
  name?: string;
  value?: string;
  placeholder?: string;
  defaultValue?: string;
  required?: boolean;
  onChange?: (value: string) => void;
}

import { Builder } from \\"@builder.io/sdk\\";

function FormInputComponent(props: FormInputProps) {
  return (
    <>
      <input
        {...props.attributes}
        key={
          Builder.isEditing && props.defaultValue
            ? props.defaultValue
            : \\"default-key\\"
        }
        placeholder={props.placeholder}
        type={props.type}
        name={props.name}
        value={props.value}
        defaultValue={props.defaultValue}
        required={props.required}
        onInput={(event) => props.onChange?.(event.target.value)}
      />
    </>
  );
}

export default FormInputComponent;
"
`;

exports[`Solid > jsx > Typescript Test > Input 2`] = `
"export interface FormInputProps {
  type?: string;
  attributes?: any;
  name?: string;
  value?: string;
  placeholder?: string;
  defaultValue?: string;
  required?: boolean;
  onChange?: (value: string) => void;
}

import { Builder } from \\"@builder.io/sdk\\";

function FormInputComponent(props: FormInputProps) {
  return (
    <>
      <input
        {...props.attributes}
        key={
          Builder.isEditing && props.defaultValue
            ? props.defaultValue
            : \\"default-key\\"
        }
        placeholder={props.placeholder}
        type={props.type}
        name={props.name}
        value={props.value}
        defaultValue={props.defaultValue}
        required={props.required}
        onInput={(event) => props.onChange?.(event.target.value)}
      />
    </>
  );
}

export default FormInputComponent;
"
`;

exports[`Solid > jsx > Typescript Test > InputParent 1`] = `
"import { createSignal, createMemo } from \\"solid-js\\";

import FormInputComponent from \\"./input.raw\\";

function Stepper(props: any) {
  function handleChange(value: string) {
    console.log(value);
  }

  return (
    <>
      <FormInputComponent
        name=\\"kingzez\\"
        type=\\"text\\"
        onChange={(value) => handleChange(value)}
      ></FormInputComponent>
    </>
  );
}

export default Stepper;
"
`;

exports[`Solid > jsx > Typescript Test > InputParent 2`] = `
"import { createSignal, createMemo } from \\"solid-js\\";

import FormInputComponent from \\"./input.raw\\";

function Stepper(props: any) {
  function handleChange(value: string) {
    console.log(value);
  }

  return (
    <>
      <FormInputComponent
        name=\\"kingzez\\"
        type=\\"text\\"
        onChange={(value) => handleChange(value)}
      ></FormInputComponent>
    </>
  );
}

export default Stepper;
"
`;

exports[`Solid > jsx > Typescript Test > RawText 1`] = `
"export interface RawTextProps {
  attributes?: any;
  text?: string; // builderBlock?: any;
}

function RawText(props: RawTextProps) {
  return (
    <>
      <span
        class={props.attributes?.class || props.attributes?.className}
        innerHTML={props.text || \\"\\"}
      ></span>
    </>
  );
}

export default RawText;
"
`;

exports[`Solid > jsx > Typescript Test > RawText 2`] = `
"export interface RawTextProps {
  attributes?: any;
  text?: string; // builderBlock?: any;
}

function RawText(props: RawTextProps) {
  return (
    <>
      <span
        class={props.attributes?.class || props.attributes?.className}
        innerHTML={props.text || \\"\\"}
      ></span>
    </>
  );
}

export default RawText;
"
`;

exports[`Solid > jsx > Typescript Test > Section 1`] = `
"export interface SectionProps {
  maxWidth?: number;
  attributes?: any;
  children?: any;
}

function SectionComponent(props: SectionProps) {
  return (
    <>
      <section
        {...props.attributes}
        style={
          props.maxWidth && typeof props.maxWidth === \\"number\\"
            ? {
                \\"max-width\\": props.maxWidth,
              }
            : undefined
        }
      >
        {props.children}
      </section>
    </>
  );
}

export default SectionComponent;
"
`;

exports[`Solid > jsx > Typescript Test > Section 2`] = `
"import { Show, For, createSignal, createMemo } from \\"solid-js\\";

export interface SectionProps {
  maxWidth?: number;
  attributes?: any;
  children?: any;
}

function SectionStateComponent(props: SectionProps) {
  const [max, setMax] = createSignal(42);

  const [items, setItems] = createSignal([42]);

  return (
    <>
      <Show when={max()}>
        <For each={items()}>
          {(item, _index) => {
            const index = _index();
            return (
              <section
                {...props.attributes}
                style={{
                  \\"max-width\\": item + max(),
                }}
              >
                {props.children}
              </section>
            );
          }}
        </For>
      </Show>
    </>
  );
}

export default SectionStateComponent;
"
`;

exports[`Solid > jsx > Typescript Test > Section 3`] = `
"export interface SectionProps {
  maxWidth?: number;
  attributes?: any;
  children?: any;
}

function SectionComponent(props: SectionProps) {
  return (
    <>
      <section
        {...props.attributes}
        style={
          props.maxWidth && typeof props.maxWidth === \\"number\\"
            ? {
                \\"max-width\\": props.maxWidth,
              }
            : undefined
        }
      >
        {props.children}
      </section>
    </>
  );
}

export default SectionComponent;
"
`;

exports[`Solid > jsx > Typescript Test > Section 4`] = `
"import { Show, For, createSignal, createMemo } from \\"solid-js\\";

export interface SectionProps {
  maxWidth?: number;
  attributes?: any;
  children?: any;
}

function SectionStateComponent(props: SectionProps) {
  const [max, setMax] = createSignal(42);

  const [items, setItems] = createSignal([42]);

  return (
    <>
      <Show when={max()}>
        <For each={items()}>
          {(item, _index) => {
            const index = _index();
            return (
              <section
                {...props.attributes}
                style={{
                  \\"max-width\\": item + max(),
                }}
              >
                {props.children}
              </section>
            );
          }}
        </For>
      </Show>
    </>
  );
}

export default SectionStateComponent;
"
`;

exports[`Solid > jsx > Typescript Test > Select 1`] = `
"import { For } from \\"solid-js\\";

export interface FormSelectProps {
  options?: {
    name?: string;
    value: string;
  }[];
  attributes?: any;
  name?: string;
  value?: string;
  defaultValue?: string;
}

import { Builder } from \\"@builder.io/sdk\\";

function SelectComponent(props: FormSelectProps) {
  return (
    <>
      <select
        {...props.attributes}
        value={props.value}
        key={
          Builder.isEditing && props.defaultValue
            ? props.defaultValue
            : \\"default-key\\"
        }
        defaultValue={props.defaultValue}
        name={props.name}
      >
        <For each={props.options}>
          {(option, _index) => {
            const index = _index();
            return (
              <option value={option.value} data-index={index}>
                {option.name || option.value}
              </option>
            );
          }}
        </For>
      </select>
    </>
  );
}

export default SelectComponent;
"
`;

exports[`Solid > jsx > Typescript Test > Select 2`] = `
"import { For } from \\"solid-js\\";

export interface FormSelectProps {
  options?: {
    name?: string;
    value: string;
  }[];
  attributes?: any;
  name?: string;
  value?: string;
  defaultValue?: string;
}

import { Builder } from \\"@builder.io/sdk\\";

function SelectComponent(props: FormSelectProps) {
  return (
    <>
      <select
        {...props.attributes}
        value={props.value}
        key={
          Builder.isEditing && props.defaultValue
            ? props.defaultValue
            : \\"default-key\\"
        }
        defaultValue={props.defaultValue}
        name={props.name}
      >
        <For each={props.options}>
          {(option, _index) => {
            const index = _index();
            return (
              <option value={option.value} data-index={index}>
                {option.name || option.value}
              </option>
            );
          }}
        </For>
      </select>
    </>
  );
}

export default SelectComponent;
"
`;

exports[`Solid > jsx > Typescript Test > SlotDefault 1`] = `
"type Props = {
  [key: string]: string;
};

function SlotCode(props: Props) {
  return (
    <>
      <div>
        <Slot>
          <div class=\\"default-slot\\">Default content</div>
        </Slot>
      </div>
    </>
  );
}

export default SlotCode;
"
`;

exports[`Solid > jsx > Typescript Test > SlotDefault 2`] = `
"type Props = {
  [key: string]: string;
};

function SlotCode(props: Props) {
  return (
    <>
      <div>
        <Slot>
          <div class=\\"default-slot\\">Default content</div>
        </Slot>
      </div>
    </>
  );
}

export default SlotCode;
"
`;

exports[`Solid > jsx > Typescript Test > SlotHtml 1`] = `
"type Props = {
  [key: string]: string;
};

import ContentSlotCode from \\"./content-slot-jsx.raw\\";

function SlotCode(props: Props) {
  return (
    <>
      <div>
        <ContentSlotCode>
          <Slot testing={<div>Hello</div>}></Slot>
        </ContentSlotCode>
      </div>
    </>
  );
}

export default SlotCode;
"
`;

exports[`Solid > jsx > Typescript Test > SlotHtml 2`] = `
"type Props = {
  [key: string]: string;
};

import ContentSlotCode from \\"./content-slot-jsx.raw\\";

function SlotCode(props: Props) {
  return (
    <>
      <div>
        <ContentSlotCode>
          <Slot testing={<div>Hello</div>}></Slot>
        </ContentSlotCode>
      </div>
    </>
  );
}

export default SlotCode;
"
`;

exports[`Solid > jsx > Typescript Test > SlotJsx 1`] = `
"type Props = {
  [key: string]: string;
};

import ContentSlotCode from \\"./content-slot-jsx.raw\\";

function SlotCode(props: Props) {
  return (
    <>
      <div>
        <ContentSlotCode slotTesting={<div>Hello</div>}></ContentSlotCode>
      </div>
    </>
  );
}

export default SlotCode;
"
`;

exports[`Solid > jsx > Typescript Test > SlotJsx 2`] = `
"type Props = {
  [key: string]: string;
};

import ContentSlotCode from \\"./content-slot-jsx.raw\\";

function SlotCode(props: Props) {
  return (
    <>
      <div>
        <ContentSlotCode slotTesting={<div>Hello</div>}></ContentSlotCode>
      </div>
    </>
  );
}

export default SlotCode;
"
`;

exports[`Solid > jsx > Typescript Test > SlotNamed 1`] = `
"type Props = {
  [key: string]: string;
};

function SlotCode(props: Props) {
  return (
    <>
      <div>
        <Slot name=\\"myAwesomeSlot\\"></Slot>
        <Slot name=\\"top\\"></Slot>
        <Slot name=\\"left\\">Default left</Slot>
        <Slot>Default Child</Slot>
      </div>
    </>
  );
}

export default SlotCode;
"
`;

exports[`Solid > jsx > Typescript Test > SlotNamed 2`] = `
"type Props = {
  [key: string]: string;
};

function SlotCode(props: Props) {
  return (
    <>
      <div>
        <Slot name=\\"myAwesomeSlot\\"></Slot>
        <Slot name=\\"top\\"></Slot>
        <Slot name=\\"left\\">Default left</Slot>
        <Slot>Default Child</Slot>
      </div>
    </>
  );
}

export default SlotCode;
"
`;

exports[`Solid > jsx > Typescript Test > Stamped.io 1`] = `
"import { Show, For, onMount, createSignal, createMemo } from \\"solid-js\\";

type SmileReviewsProps = {
  productId: string;
  apiKey: string;
};

import { kebabCase, snakeCase } from \\"lodash\\";

function SmileReviews(props: SmileReviewsProps) {
  const [reviews, setReviews] = createSignal([]);

  const [name, setName] = createSignal(\\"test\\");

  const [showReviewPrompt, setShowReviewPrompt] = createSignal(false);

  function kebabCaseValue() {
    return kebabCase(\\"testThat\\");
  }

  function snakeCaseValue() {
    return snakeCase(\\"testThis\\");
  }

  onMount(() => {
    fetch(
      \`https://stamped.io/api/widget/reviews?storeUrl=builder-io.myshopify.com&apiKey=\${
        props.apiKey || \\"pubkey-8bbDq7W6w4sB3OWeM1HUy2s47702hM\\"
      }&productId=\${props.productId || \\"2410511106127\\"}\`
    )
      .then((res) => res.json())
      .then((data) => {
        setReviews(data.data);
      });
  });

  return (
    <>
      <div data-user={name()}>
        <button onClick={(event) => setShowReviewPrompt(true)}>
          Write a review
        </button>
        <Show when={showReviewPrompt() || \\"asdf\\"}>
          <input placeholder=\\"Email\\" />
          <input class=\\"input-4a97341e\\" placeholder=\\"Title\\" />
          <textarea
            class=\\"textarea-4a97341e\\"
            placeholder=\\"How was your experience?\\"
          ></textarea>
          <button
            class=\\"button-4a97341e\\"
            onClick={(event) => {
              event.preventDefault();
              setShowReviewPrompt(false);
            }}
          >
            Submit
          </button>
        </Show>
        <For each={reviews()}>
          {(review, _index) => {
            const index = _index();
            return (
              <div class=\\"div-4a97341e\\" key={review.id}>
                <img class=\\"img-4a97341e\\" src={review.avatar} />
                <div class={showReviewPrompt() ? \\"bg-primary\\" : \\"bg-secondary\\"}>
                  <div>
                    N:
                    {index}
                  </div>
                  <div>{review.author}</div>
                  <div>{review.reviewMessage}</div>
                </div>
              </div>
            );
          }}
        </For>
      </div>
      <style>{\`.input-4a97341e {
  display: block;
}.textarea-4a97341e {
  display: block;
}.button-4a97341e {
  display: block;
}.div-4a97341e {
  margin: 10px;
  padding: 10px;
  background: white;
  display: flex;
  border-radius: 5px;
  box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
  -webkit-font-smoothing: antialiased;
}.img-4a97341e {
  height: 30px;
  width: 30px;
  margin-right: 10px;
}\`}</style>
    </>
  );
}

export default SmileReviews;
"
`;

exports[`Solid > jsx > Typescript Test > Stamped.io 2`] = `
"import { Show, For, onMount, createSignal, createMemo } from \\"solid-js\\";

type SmileReviewsProps = {
  productId: string;
  apiKey: string;
};

import { kebabCase, snakeCase } from \\"lodash\\";

function SmileReviews(props: SmileReviewsProps) {
  const [reviews, setReviews] = createSignal([]);

  const [name, setName] = createSignal(\\"test\\");

  const [showReviewPrompt, setShowReviewPrompt] = createSignal(false);

  function kebabCaseValue() {
    return kebabCase(\\"testThat\\");
  }

  function snakeCaseValue() {
    return snakeCase(\\"testThis\\");
  }

  onMount(() => {
    fetch(
      \`https://stamped.io/api/widget/reviews?storeUrl=builder-io.myshopify.com&apiKey=\${
        props.apiKey || \\"pubkey-8bbDq7W6w4sB3OWeM1HUy2s47702hM\\"
      }&productId=\${props.productId || \\"2410511106127\\"}\`
    )
      .then((res) => res.json())
      .then((data) => {
        setReviews(data.data);
      });
  });

  return (
    <>
      <div data-user={name()}>
        <button onClick={(event) => setShowReviewPrompt(true)}>
          Write a review
        </button>
        <Show when={showReviewPrompt() || \\"asdf\\"}>
          <input placeholder=\\"Email\\" />
          <input class=\\"input-4a97341e\\" placeholder=\\"Title\\" />
          <textarea
            class=\\"textarea-4a97341e\\"
            placeholder=\\"How was your experience?\\"
          ></textarea>
          <button
            class=\\"button-4a97341e\\"
            onClick={(event) => {
              event.preventDefault();
              setShowReviewPrompt(false);
            }}
          >
            Submit
          </button>
        </Show>
        <For each={reviews()}>
          {(review, _index) => {
            const index = _index();
            return (
              <div class=\\"div-4a97341e\\" key={review.id}>
                <img class=\\"img-4a97341e\\" src={review.avatar} />
                <div class={showReviewPrompt() ? \\"bg-primary\\" : \\"bg-secondary\\"}>
                  <div>
                    N:
                    {index}
                  </div>
                  <div>{review.author}</div>
                  <div>{review.reviewMessage}</div>
                </div>
              </div>
            );
          }}
        </For>
      </div>
      <style>{\`.input-4a97341e {
  display: block;
}.textarea-4a97341e {
  display: block;
}.button-4a97341e {
  display: block;
}.div-4a97341e {
  margin: 10px;
  padding: 10px;
  background: white;
  display: flex;
  border-radius: 5px;
  box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
  -webkit-font-smoothing: antialiased;
}.img-4a97341e {
  height: 30px;
  width: 30px;
  margin-right: 10px;
}\`}</style>
    </>
  );
}

export default SmileReviews;
"
`;

exports[`Solid > jsx > Typescript Test > Submit 1`] = `
"export interface ButtonProps {
  attributes?: any;
  text?: string;
}

function SubmitButton(props: ButtonProps) {
  return (
    <>
      <button type=\\"submit\\" {...props.attributes}>
        {props.text}
      </button>
    </>
  );
}

export default SubmitButton;
"
`;

exports[`Solid > jsx > Typescript Test > Submit 2`] = `
"export interface ButtonProps {
  attributes?: any;
  text?: string;
}

function SubmitButton(props: ButtonProps) {
  return (
    <>
      <button type=\\"submit\\" {...props.attributes}>
        {props.text}
      </button>
    </>
  );
}

export default SubmitButton;
"
`;

exports[`Solid > jsx > Typescript Test > Text 1`] = `
"import { createSignal, createMemo } from \\"solid-js\\";

export interface TextProps {
  attributes?: any;
  rtlMode: boolean;
  text?: string;
  content?: string;
  builderBlock?: any;
}

import { Builder } from \\"@builder.io/sdk\\";

function Text(props: TextProps) {
  const [name, setName] = createSignal(\\"Decadef20\\");

  return (
    <>
      <div
        contentEditable={allowEditingText || undefined}
        data-name={{
          test: name() || \\"any name\\",
        }}
        innerHTML={
          props.text ||
          props.content ||
          name() ||
          '<p class=\\"text-lg\\">my name</p>'
        }
      ></div>
    </>
  );
}

export default Text;
"
`;

exports[`Solid > jsx > Typescript Test > Text 2`] = `
"import { createSignal, createMemo } from \\"solid-js\\";

export interface TextProps {
  attributes?: any;
  rtlMode: boolean;
  text?: string;
  content?: string;
  builderBlock?: any;
}

import { Builder } from \\"@builder.io/sdk\\";

function Text(props: TextProps) {
  const [name, setName] = createSignal(\\"Decadef20\\");

  return (
    <>
      <div
        contentEditable={allowEditingText || undefined}
        data-name={{
          test: name() || \\"any name\\",
        }}
        innerHTML={
          props.text ||
          props.content ||
          name() ||
          '<p class=\\"text-lg\\">my name</p>'
        }
      ></div>
    </>
  );
}

export default Text;
"
`;

exports[`Solid > jsx > Typescript Test > Textarea 1`] = `
"export interface TextareaProps {
  attributes?: any;
  name?: string;
  value?: string;
  defaultValue?: string;
  placeholder?: string;
}

function Textarea(props: TextareaProps) {
  return (
    <>
      <textarea
        {...props.attributes}
        placeholder={props.placeholder}
        name={props.name}
        value={props.value}
        defaultValue={props.defaultValue}
      ></textarea>
    </>
  );
}

export default Textarea;
"
`;

exports[`Solid > jsx > Typescript Test > Textarea 2`] = `
"export interface TextareaProps {
  attributes?: any;
  name?: string;
  value?: string;
  defaultValue?: string;
  placeholder?: string;
}

function Textarea(props: TextareaProps) {
  return (
    <>
      <textarea
        {...props.attributes}
        placeholder={props.placeholder}
        name={props.name}
        value={props.value}
        defaultValue={props.defaultValue}
      ></textarea>
    </>
  );
}

export default Textarea;
"
`;

exports[`Solid > jsx > Typescript Test > Video 1`] = `
"export interface VideoProps {
  attributes?: any;
  video?: string;
  autoPlay?: boolean;
  controls?: boolean;
  muted?: boolean;
  loop?: boolean;
  playsInline?: boolean;
  aspectRatio?: number;
  width?: number;
  height?: number;
  fit?: \\"contain\\" | \\"cover\\" | \\"fill\\";
  position?:
    | \\"center\\"
    | \\"top\\"
    | \\"left\\"
    | \\"right\\"
    | \\"bottom\\"
    | \\"top left\\"
    | \\"top right\\"
    | \\"bottom left\\"
    | \\"bottom right\\";
  posterImage?: string;
  lazyLoad?: boolean;
}

function Video(props: VideoProps) {
  return (
    <>
      <video
        preload=\\"none\\"
        {...props.attributes}
        style={{
          width: \\"100%\\",
          height: \\"100%\\",
          ...props.attributes?.style,
          \\"object-fit\\": props.fit,
          \\"object-position\\": props.position,
          // Hack to get object fit to work as expected and
          // not have the video overflow
          \\"border-radius\\": 1,
        }}
        key={props.video || \\"no-src\\"}
        poster={props.posterImage}
        autoplay={props.autoPlay}
        muted={props.muted}
        controls={props.controls}
        loop={props.loop}
      ></video>
    </>
  );
}

export default Video;
"
`;

exports[`Solid > jsx > Typescript Test > Video 2`] = `
"export interface VideoProps {
  attributes?: any;
  video?: string;
  autoPlay?: boolean;
  controls?: boolean;
  muted?: boolean;
  loop?: boolean;
  playsInline?: boolean;
  aspectRatio?: number;
  width?: number;
  height?: number;
  fit?: \\"contain\\" | \\"cover\\" | \\"fill\\";
  position?:
    | \\"center\\"
    | \\"top\\"
    | \\"left\\"
    | \\"right\\"
    | \\"bottom\\"
    | \\"top left\\"
    | \\"top right\\"
    | \\"bottom left\\"
    | \\"bottom right\\";
  posterImage?: string;
  lazyLoad?: boolean;
}

function Video(props: VideoProps) {
  return (
    <>
      <video
        preload=\\"none\\"
        {...props.attributes}
        style={{
          width: \\"100%\\",
          height: \\"100%\\",
          ...props.attributes?.style,
          \\"object-fit\\": props.fit,
          \\"object-position\\": props.position,
          // Hack to get object fit to work as expected and
          // not have the video overflow
          \\"border-radius\\": 1,
        }}
        key={props.video || \\"no-src\\"}
        poster={props.posterImage}
        autoplay={props.autoPlay}
        muted={props.muted}
        controls={props.controls}
        loop={props.loop}
      ></video>
    </>
  );
}

export default Video;
"
`;

exports[`Solid > jsx > Typescript Test > arrowFunctionInUseStore 1`] = `
"import { createSignal, createMemo } from \\"solid-js\\";

function MyComponent(props: any) {
  const [name, setName] = createSignal(\\"steve\\");

  function setName(value) {
    setName(value);
  }

  function updateNameWithArrowFn(value) {
    setName(value);
  }

  return (
    <>
      <div>
        Hello
        {name()}
      </div>
    </>
  );
}

export default MyComponent;
"
`;

exports[`Solid > jsx > Typescript Test > arrowFunctionInUseStore 2`] = `
"import { createSignal, createMemo } from \\"solid-js\\";

function MyComponent(props: any) {
  const [name, setName] = createSignal(\\"steve\\");

  function setName(value) {
    setName(value);
  }

  function updateNameWithArrowFn(value) {
    setName(value);
  }

  return (
    <>
      <div>
        Hello
        {name()}
      </div>
    </>
  );
}

export default MyComponent;
"
`;

exports[`Solid > jsx > Typescript Test > basicForNoTagReference 1`] = `
"import { For, createSignal, createMemo } from \\"solid-js\\";
import { Dynamic } from \\"solid-js/web\\";

function MyBasicForNoTagRefComponent(props: any) {
  const [name, setName] = createSignal(\\"VincentW\\");

  const [TagName, setTagName] = createSignal(\\"div\\");

  const [tag, setTag] = createSignal(\\"span\\");

  const TagNameGetter = createMemo(() => {
    return \\"span\\";
  });

  return (
    <>
      <Dynamic component={TagNameGetter()}>
        Hello
        <Dynamic component={tag()}>{name()}</Dynamic>
        <For each={props.actions}>
          {(action, _index) => {
            const index = _index();
            return (
              <Dynamic component={TagName()}>
                <Dynamic component={action.icon}></Dynamic>
                <span>{action.text}</span>
              </Dynamic>
            );
          }}
        </For>
      </Dynamic>
    </>
  );
}

export default MyBasicForNoTagRefComponent;
"
`;

exports[`Solid > jsx > Typescript Test > basicForNoTagReference 2`] = `
"import { For, createSignal, createMemo } from \\"solid-js\\";
import { Dynamic } from \\"solid-js/web\\";

function MyBasicForNoTagRefComponent(props: any) {
  const [name, setName] = createSignal(\\"VincentW\\");

  const [TagName, setTagName] = createSignal(\\"div\\");

  const [tag, setTag] = createSignal(\\"span\\");

  const TagNameGetter = createMemo(() => {
    return \\"span\\";
  });

  return (
    <>
      <Dynamic component={TagNameGetter()}>
        Hello
        <Dynamic component={tag()}>{name()}</Dynamic>
        <For each={props.actions}>
          {(action, _index) => {
            const index = _index();
            return (
              <Dynamic component={TagName()}>
                <Dynamic component={action.icon}></Dynamic>
                <span>{action.text}</span>
              </Dynamic>
            );
          }}
        </For>
      </Dynamic>
    </>
  );
}

export default MyBasicForNoTagRefComponent;
"
`;

exports[`Solid > jsx > Typescript Test > basicForwardRef 1`] = `
"import { createSignal, createMemo } from \\"solid-js\\";

export interface Props {
  showInput: boolean;
  inputRef: HTMLInputElement;
}

function MyBasicForwardRefComponent(props: Props) {
  const [name, setName] = createSignal(\\"PatrickJS\\");

  return (
    <>
      <div>
        <input
          class=\\"input-b78c7450\\"
          ref={props.inputRef!}
          value={name()}
          onInput={(event) => setName(event.target.value)}
        />
      </div>
      <style>{\`.input-b78c7450 {
  color: red;
}\`}</style>
    </>
  );
}

export default MyBasicForwardRefComponent;
"
`;

exports[`Solid > jsx > Typescript Test > basicForwardRef 2`] = `
"import { createSignal, createMemo } from \\"solid-js\\";

export interface Props {
  showInput: boolean;
  inputRef: HTMLInputElement;
}

function MyBasicForwardRefComponent(props: Props) {
  const [name, setName] = createSignal(\\"PatrickJS\\");

  return (
    <>
      <div>
        <input
          class=\\"input-b78c7450\\"
          ref={props.inputRef!}
          value={name()}
          onInput={(event) => setName(event.target.value)}
        />
      </div>
      <style>{\`.input-b78c7450 {
  color: red;
}\`}</style>
    </>
  );
}

export default MyBasicForwardRefComponent;
"
`;

exports[`Solid > jsx > Typescript Test > basicForwardRefMetadata 1`] = `
"import { createSignal, createMemo } from \\"solid-js\\";

export interface Props {
  showInput: boolean;
  inputRef: HTMLInputElement;
}

function MyBasicForwardRefComponent(props: Props) {
  const [name, setName] = createSignal(\\"PatrickJS\\");

  return (
    <>
      <div>
        <input
          class=\\"input-551faa42\\"
          ref={props.inputRef!}
          value={name()}
          onInput={(event) => setName(event.target.value)}
        />
      </div>
      <style>{\`.input-551faa42 {
  color: red;
}\`}</style>
    </>
  );
}

export default MyBasicForwardRefComponent;
"
`;

exports[`Solid > jsx > Typescript Test > basicForwardRefMetadata 2`] = `
"import { createSignal, createMemo } from \\"solid-js\\";

export interface Props {
  showInput: boolean;
  inputRef: HTMLInputElement;
}

function MyBasicForwardRefComponent(props: Props) {
  const [name, setName] = createSignal(\\"PatrickJS\\");

  return (
    <>
      <div>
        <input
          class=\\"input-551faa42\\"
          ref={props.inputRef!}
          value={name()}
          onInput={(event) => setName(event.target.value)}
        />
      </div>
      <style>{\`.input-551faa42 {
  color: red;
}\`}</style>
    </>
  );
}

export default MyBasicForwardRefComponent;
"
`;

exports[`Solid > jsx > Typescript Test > basicOnUpdateReturn 1`] = `
"import { on, createEffect, createMemo, createSignal } from \\"solid-js\\";

function MyBasicOnUpdateReturnComponent(props: any) {
  const [name, setName] = createSignal(\\"PatrickJS\\");

  const onUpdateFn_0_name__ = createMemo(() => name());
  function onUpdateFn_0() {
    const controller = new AbortController();
    const signal = controller.signal;
    fetch(\\"https://patrickjs.com/api/resource.json\\", {
      signal,
    })
      .then((response) => response.json())
      .then((data) => {
        setName(data.name);
      });
    return () => {
      if (!signal.aborted) {
        controller.abort();
      }
    };
  }
  createEffect(on(() => [onUpdateFn_0_name__()], onUpdateFn_0));

  return (
    <>
      <div>
        Hello!
        {name()}
      </div>
    </>
  );
}

export default MyBasicOnUpdateReturnComponent;
"
`;

exports[`Solid > jsx > Typescript Test > basicOnUpdateReturn 2`] = `
"import { on, createEffect, createMemo, createSignal } from \\"solid-js\\";

function MyBasicOnUpdateReturnComponent(props: any) {
  const [name, setName] = createSignal(\\"PatrickJS\\");

  const onUpdateFn_0_name__ = createMemo(() => name());
  function onUpdateFn_0() {
    const controller = new AbortController();
    const signal = controller.signal;
    fetch(\\"https://patrickjs.com/api/resource.json\\", {
      signal,
    })
      .then((response) => response.json())
      .then((data) => {
        setName(data.name);
      });
    return () => {
      if (!signal.aborted) {
        controller.abort();
      }
    };
  }
  createEffect(on(() => [onUpdateFn_0_name__()], onUpdateFn_0));

  return (
    <>
      <div>
        Hello!
        {name()}
      </div>
    </>
  );
}

export default MyBasicOnUpdateReturnComponent;
"
`;

exports[`Solid > jsx > Typescript Test > class + ClassName + css 1`] = `
"function MyBasicComponent(props: any) {
  return (
    <>
      <div class=\\"test2 test div-6b6c27cc\\">
        Hello! I can run in React, Vue, Solid, or Liquid!
      </div>
      <style>{\`.div-6b6c27cc {
  padding: 10px;
}\`}</style>
    </>
  );
}

export default MyBasicComponent;
"
`;

exports[`Solid > jsx > Typescript Test > class + ClassName + css 2`] = `
"function MyBasicComponent(props: any) {
  return (
    <>
      <div class=\\"test2 test div-6b6c27cc\\">
        Hello! I can run in React, Vue, Solid, or Liquid!
      </div>
      <style>{\`.div-6b6c27cc {
  padding: 10px;
}\`}</style>
    </>
  );
}

export default MyBasicComponent;
"
`;

exports[`Solid > jsx > Typescript Test > class + css 1`] = `
"function MyBasicComponent(props: any) {
  return (
    <>
      <div class=\\"test div-fb8d32e6\\">
        Hello! I can run in React, Vue, Solid, or Liquid!
      </div>
      <style>{\`.div-fb8d32e6 {
  padding: 10px;
}\`}</style>
    </>
  );
}

export default MyBasicComponent;
"
`;

exports[`Solid > jsx > Typescript Test > class + css 2`] = `
"function MyBasicComponent(props: any) {
  return (
    <>
      <div class=\\"test div-fb8d32e6\\">
        Hello! I can run in React, Vue, Solid, or Liquid!
      </div>
      <style>{\`.div-fb8d32e6 {
  padding: 10px;
}\`}</style>
    </>
  );
}

export default MyBasicComponent;
"
`;

exports[`Solid > jsx > Typescript Test > className + css 1`] = `
"function MyBasicComponent(props: any) {
  return (
    <>
      <div class=\\"test div-fb8d32e6\\">
        Hello! I can run in React, Vue, Solid, or Liquid!
      </div>
      <style>{\`.div-fb8d32e6 {
  padding: 10px;
}\`}</style>
    </>
  );
}

export default MyBasicComponent;
"
`;

exports[`Solid > jsx > Typescript Test > className + css 2`] = `
"function MyBasicComponent(props: any) {
  return (
    <>
      <div class=\\"test div-fb8d32e6\\">
        Hello! I can run in React, Vue, Solid, or Liquid!
      </div>
      <style>{\`.div-fb8d32e6 {
  padding: 10px;
}\`}</style>
    </>
  );
}

export default MyBasicComponent;
"
`;

exports[`Solid > jsx > Typescript Test > className 1`] = `
"import { createSignal, createMemo } from \\"solid-js\\";

type Props = {
  [key: string]: string | JSX.Element;
  slotTesting: JSX.Element;
};

import type { JSX } from \\"../../../../jsx-runtime\\";

function ClassNameCode(props: Props) {
  const [bindings, setBindings] = createSignal(\\"a binding\\");

  return (
    <>
      <div>
        <div class=\\"no binding\\">Without Binding</div>
        <div class={bindings()}>With binding</div>
      </div>
    </>
  );
}

export default ClassNameCode;
"
`;

exports[`Solid > jsx > Typescript Test > className 2`] = `
"import { createSignal, createMemo } from \\"solid-js\\";

type Props = {
  [key: string]: string | JSX.Element;
  slotTesting: JSX.Element;
};

import type { JSX } from \\"../../../../jsx-runtime\\";

function ClassNameCode(props: Props) {
  const [bindings, setBindings] = createSignal(\\"a binding\\");

  return (
    <>
      <div>
        <div class=\\"no binding\\">Without Binding</div>
        <div class={bindings()}>With binding</div>
      </div>
    </>
  );
}

export default ClassNameCode;
"
`;

exports[`Solid > jsx > Typescript Test > classState 1`] = `
"import { createSignal, createMemo } from \\"solid-js\\";

function MyBasicComponent(props: any) {
  const [classState, setClassState] = createSignal(\\"testClassName\\");

  const [styleState, setStyleState] = createSignal({
    color: \\"red\\",
  });

  return (
    <>
      <div class={classState() + \\" div-70b306de\\"} style={styleState()}>
        Hello! I can run in React, Vue, Solid, or Liquid!
      </div>
      <style>{\`.div-70b306de {
  padding: 10px;
}\`}</style>
    </>
  );
}

export default MyBasicComponent;
"
`;

exports[`Solid > jsx > Typescript Test > classState 2`] = `
"import { createSignal, createMemo } from \\"solid-js\\";

function MyBasicComponent(props: any) {
  const [classState, setClassState] = createSignal(\\"testClassName\\");

  const [styleState, setStyleState] = createSignal({
    color: \\"red\\",
  });

  return (
    <>
      <div class={classState() + \\" div-70b306de\\"} style={styleState()}>
        Hello! I can run in React, Vue, Solid, or Liquid!
      </div>
      <style>{\`.div-70b306de {
  padding: 10px;
}\`}</style>
    </>
  );
}

export default MyBasicComponent;
"
`;

exports[`Solid > jsx > Typescript Test > componentWithContext 1`] = `
"import { useContext } from \\"solid-js\\";

export interface ComponentWithContextProps {
  content: string;
}

import Context1 from \\"@dummy/1\\";
import Context2 from \\"@dummy/2\\";

function ComponentWithContext(props: ComponentWithContextProps) {
  const foo = useContext(Context1);

  return (
    <>
      <Context2.Provider
        value={{
          bar: \\"baz\\",
        }}
      >
        <Context1.Provider
          value={{
            foo: \\"bar\\",

            content() {
              return props.content;
            },
          }}
        >
          <>
            <>{foo.value}</>
          </>
        </Context1.Provider>
      </Context2.Provider>
    </>
  );
}

export default ComponentWithContext;
"
`;

exports[`Solid > jsx > Typescript Test > componentWithContext 2`] = `
"import { useContext } from \\"solid-js\\";

export interface ComponentWithContextProps {
  content: string;
}

import Context1 from \\"@dummy/1\\";
import Context2 from \\"@dummy/2\\";

function ComponentWithContext(props: ComponentWithContextProps) {
  const foo = useContext(Context1);

  return (
    <>
      <Context2.Provider
        value={{
          bar: \\"baz\\",
        }}
      >
        <Context1.Provider
          value={{
            foo: \\"bar\\",

            content() {
              return props.content;
            },
          }}
        >
          <>
            <>{foo.value}</>
          </>
        </Context1.Provider>
      </Context2.Provider>
    </>
  );
}

export default ComponentWithContext;
"
`;

exports[`Solid > jsx > Typescript Test > componentWithContextMultiRoot 1`] = `
"import { useContext } from \\"solid-js\\";

export interface ComponentWithContextProps {
  content: string;
}

import Context1 from \\"@dummy/1\\";
import Context2 from \\"@dummy/2\\";

function ComponentWithContext(props: ComponentWithContextProps) {
  const foo = useContext(Context1);

  return (
    <>
      <Context2.Provider
        value={{
          bar: \\"baz\\",
        }}
      >
        <Context1.Provider
          value={{
            foo: \\"bar\\",

            content() {
              return props.content;
            },
          }}
        >
          <>
            <>{foo.value}</>
            <div>other</div>
          </>
        </Context1.Provider>
      </Context2.Provider>
    </>
  );
}

export default ComponentWithContext;
"
`;

exports[`Solid > jsx > Typescript Test > componentWithContextMultiRoot 2`] = `
"import { useContext } from \\"solid-js\\";

export interface ComponentWithContextProps {
  content: string;
}

import Context1 from \\"@dummy/1\\";
import Context2 from \\"@dummy/2\\";

function ComponentWithContext(props: ComponentWithContextProps) {
  const foo = useContext(Context1);

  return (
    <>
      <Context2.Provider
        value={{
          bar: \\"baz\\",
        }}
      >
        <Context1.Provider
          value={{
            foo: \\"bar\\",

            content() {
              return props.content;
            },
          }}
        >
          <>
            <>{foo.value}</>
            <div>other</div>
          </>
        </Context1.Provider>
      </Context2.Provider>
    </>
  );
}

export default ComponentWithContext;
"
`;

exports[`Solid > jsx > Typescript Test > contentState 1`] = `
"import BuilderContext from \\"@dummy/context.js\\";

function RenderContent(props: any) {
  return (
    <>
      <BuilderContext.Provider
        value={{
          content: props.content,
          registeredComponents: props.customComponents,
        }}
      >
        <div>setting context</div>
      </BuilderContext.Provider>
    </>
  );
}

export default RenderContent;
"
`;

exports[`Solid > jsx > Typescript Test > contentState 2`] = `
"import BuilderContext from \\"@dummy/context.js\\";

function RenderContent(props: any) {
  return (
    <>
      <BuilderContext.Provider
        value={{
          content: props.content,
          registeredComponents: props.customComponents,
        }}
      >
        <div>setting context</div>
      </BuilderContext.Provider>
    </>
  );
}

export default RenderContent;
"
`;

exports[`Solid > jsx > Typescript Test > defaultProps 1`] = `
"import { Show } from \\"solid-js\\";

export interface ButtonProps {
  attributes?: any;
  text?: string;
  buttonText?: string; // no default value

  link?: string;
  openLinkInNewTab?: boolean;
  onClick?: () => void;
}

function Button(props: ButtonProps) {
  return (
    <>
      <div>
        <Show when={props.link}>
          <a
            {...props.attributes}
            href={props.link}
            target={props.openLinkInNewTab ? \\"_blank\\" : undefined}
          >
            {props.text}
          </a>
        </Show>
        <Show when={!props.link}>
          <button
            type=\\"button\\"
            {...props.attributes}
            onClick={(event) => props.onClick(event)}
          >
            {props.buttonText}
          </button>
        </Show>
      </div>
    </>
  );
}

export default Button;
"
`;

exports[`Solid > jsx > Typescript Test > defaultProps 2`] = `
"import { Show } from \\"solid-js\\";

export interface ButtonProps {
  attributes?: any;
  text?: string;
  buttonText?: string; // no default value

  link?: string;
  openLinkInNewTab?: boolean;
  onClick?: () => void;
}

function Button(props: ButtonProps) {
  return (
    <>
      <div>
        <Show when={props.link}>
          <a
            {...props.attributes}
            href={props.link}
            target={props.openLinkInNewTab ? \\"_blank\\" : undefined}
          >
            {props.text}
          </a>
        </Show>
        <Show when={!props.link}>
          <button
            type=\\"button\\"
            {...props.attributes}
            onClick={(event) => props.onClick(event)}
          >
            {props.buttonText}
          </button>
        </Show>
      </div>
    </>
  );
}

export default Button;
"
`;

exports[`Solid > jsx > Typescript Test > defaultPropsOutsideComponent 1`] = `
"import { Show } from \\"solid-js\\";

export interface ButtonProps {
  attributes?: any;
  text?: string;
  link?: string;
  openLinkInNewTab?: boolean;
  onClick: () => void;
}

function Button(props: ButtonProps) {
  return (
    <>
      <div>
        <Show when={props.link}>
          <a
            {...props.attributes}
            href={props.link}
            target={props.openLinkInNewTab ? \\"_blank\\" : undefined}
          >
            {props.text}
          </a>
        </Show>
        <Show when={!props.link}>
          <button
            type=\\"button\\"
            {...props.attributes}
            onClick={(event) => props.onClick(event)}
          >
            {props.text}
          </button>
        </Show>
      </div>
    </>
  );
}

export default Button;
"
`;

exports[`Solid > jsx > Typescript Test > defaultPropsOutsideComponent 2`] = `
"import { Show } from \\"solid-js\\";

export interface ButtonProps {
  attributes?: any;
  text?: string;
  link?: string;
  openLinkInNewTab?: boolean;
  onClick: () => void;
}

function Button(props: ButtonProps) {
  return (
    <>
      <div>
        <Show when={props.link}>
          <a
            {...props.attributes}
            href={props.link}
            target={props.openLinkInNewTab ? \\"_blank\\" : undefined}
          >
            {props.text}
          </a>
        </Show>
        <Show when={!props.link}>
          <button
            type=\\"button\\"
            {...props.attributes}
            onClick={(event) => props.onClick(event)}
          >
            {props.text}
          </button>
        </Show>
      </div>
    </>
  );
}

export default Button;
"
`;

exports[`Solid > jsx > Typescript Test > defaultValsWithTypes 1`] = `
"type Props = {
  name: string;
};

const DEFAULT_VALUES: Props = {
  name: \\"Sami\\",
};

function ComponentWithTypes(props: Props) {
  return (
    <>
      <div>
        {\\" \\"}
        Hello
        {props.name || DEFAULT_VALUES.name}
      </div>
    </>
  );
}

export default ComponentWithTypes;
"
`;

exports[`Solid > jsx > Typescript Test > defaultValsWithTypes 2`] = `
"type Props = {
  name: string;
};

const DEFAULT_VALUES: Props = {
  name: \\"Sami\\",
};

function ComponentWithTypes(props: Props) {
  return (
    <>
      <div>
        {\\" \\"}
        Hello
        {props.name || DEFAULT_VALUES.name}
      </div>
    </>
  );
}

export default ComponentWithTypes;
"
`;

exports[`Solid > jsx > Typescript Test > expressionState 1`] = `
"import { createSignal, createMemo } from \\"solid-js\\";

function MyComponent(props: any) {
  const [refToUse, setRefToUse] = createSignal(
    !(props.componentRef instanceof Function) ? props.componentRef : null
  );

  return (
    <>
      <div>{refToUse()}</div>
    </>
  );
}

export default MyComponent;
"
`;

exports[`Solid > jsx > Typescript Test > expressionState 2`] = `
"import { createSignal, createMemo } from \\"solid-js\\";

function MyComponent(props: any) {
  const [refToUse, setRefToUse] = createSignal(
    !(props.componentRef instanceof Function) ? props.componentRef : null
  );

  return (
    <>
      <div>{refToUse()}</div>
    </>
  );
}

export default MyComponent;
"
`;

exports[`Solid > jsx > Typescript Test > getterState 1`] = `
"import { createSignal, createMemo } from \\"solid-js\\";

export interface ButtonProps {
  foo: string;
}

function Button(props: ButtonProps) {
  const foo2 = createMemo(() => {
    return props.foo + \\"foo\\";
  });

  const bar = createMemo(() => {
    return \\"bar\\";
  });

  function baz(i: number) {
    return i + foo2().length;
  }

  return (
    <>
      <div>
        <p>{foo2()}</p>
        <p>{bar()}</p>
        <p>{baz(1)}</p>
      </div>
    </>
  );
}

export default Button;
"
`;

exports[`Solid > jsx > Typescript Test > getterState 2`] = `
"import { createSignal, createMemo } from \\"solid-js\\";

export interface ButtonProps {
  foo: string;
}

function Button(props: ButtonProps) {
  const foo2 = createMemo(() => {
    return props.foo + \\"foo\\";
  });

  const bar = createMemo(() => {
    return \\"bar\\";
  });

  function baz(i: number) {
    return i + foo2().length;
  }

  return (
    <>
      <div>
        <p>{foo2()}</p>
        <p>{bar()}</p>
        <p>{baz(1)}</p>
      </div>
    </>
  );
}

export default Button;
"
`;

exports[`Solid > jsx > Typescript Test > import types 1`] = `
"import { createSignal, createMemo } from \\"solid-js\\";

type RenderContentProps = {
  options?: GetContentOptions;
  content: BuilderContent;
  renderContentProps: RenderBlockProps;
};

import { BuilderContent, GetContentOptions } from \\"@builder.io/sdk\\";
import RenderBlock, { RenderBlockProps } from \\"./builder-render-block.raw\\";

function RenderContent(props: RenderContentProps) {
  function getRenderContentProps(block, index) {
    return {
      block: block,
      index: index,
    };
  }

  return (
    <>
      <RenderBlock
        {...getRenderContentProps(props.renderContentProps.block, 0)}
      ></RenderBlock>
    </>
  );
}

export default RenderContent;
"
`;

exports[`Solid > jsx > Typescript Test > import types 2`] = `
"import { createSignal, createMemo } from \\"solid-js\\";

type RenderContentProps = {
  options?: GetContentOptions;
  content: BuilderContent;
  renderContentProps: RenderBlockProps;
};

import { BuilderContent, GetContentOptions } from \\"@builder.io/sdk\\";
import RenderBlock, { RenderBlockProps } from \\"./builder-render-block.raw\\";

function RenderContent(props: RenderContentProps) {
  function getRenderContentProps(block, index) {
    return {
      block: block,
      index: index,
    };
  }

  return (
    <>
      <RenderBlock
        {...getRenderContentProps(props.renderContentProps.block, 0)}
      ></RenderBlock>
    </>
  );
}

export default RenderContent;
"
`;

exports[`Solid > jsx > Typescript Test > multipleOnUpdate 1`] = `
"import { on, createEffect, createMemo } from \\"solid-js\\";

function MultipleOnUpdate(props: any) {
  return (
    <>
      <div></div>
    </>
  );
}

export default MultipleOnUpdate;
"
`;

exports[`Solid > jsx > Typescript Test > multipleOnUpdate 2`] = `
"import { on, createEffect, createMemo } from \\"solid-js\\";

function MultipleOnUpdate(props: any) {
  return (
    <>
      <div></div>
    </>
  );
}

export default MultipleOnUpdate;
"
`;

exports[`Solid > jsx > Typescript Test > multipleOnUpdateWithDeps 1`] = `
"import { on, createEffect, createMemo, createSignal } from \\"solid-js\\";

function MultipleOnUpdateWithDeps(props: any) {
  const [a, setA] = createSignal(\\"a\\");

  const [b, setB] = createSignal(\\"b\\");

  const [c, setC] = createSignal(\\"c\\");

  const [d, setD] = createSignal(\\"d\\");

  const onUpdateFn_0_a__ = createMemo(() => a());
  const onUpdateFn_0_b__ = createMemo(() => b());
  function onUpdateFn_0() {
    console.log(\\"Runs when a or b changes\\", a(), b());

    if (a() === \\"a\\") {
      setA(\\"b\\");
    }
  }
  createEffect(
    on(() => [onUpdateFn_0_a__(), onUpdateFn_0_b__()], onUpdateFn_0)
  );

  const onUpdateFn_1_c__ = createMemo(() => c());
  const onUpdateFn_1_d__ = createMemo(() => d());
  function onUpdateFn_1() {
    console.log(\\"Runs when c or d changes\\", c(), d());

    if (a() === \\"a\\") {
      setA(\\"b\\");
    }
  }
  createEffect(
    on(() => [onUpdateFn_1_c__(), onUpdateFn_1_d__()], onUpdateFn_1)
  );

  return (
    <>
      <div></div>
    </>
  );
}

export default MultipleOnUpdateWithDeps;
"
`;

exports[`Solid > jsx > Typescript Test > multipleOnUpdateWithDeps 2`] = `
"import { on, createEffect, createMemo, createSignal } from \\"solid-js\\";

function MultipleOnUpdateWithDeps(props: any) {
  const [a, setA] = createSignal(\\"a\\");

  const [b, setB] = createSignal(\\"b\\");

  const [c, setC] = createSignal(\\"c\\");

  const [d, setD] = createSignal(\\"d\\");

  const onUpdateFn_0_a__ = createMemo(() => a());
  const onUpdateFn_0_b__ = createMemo(() => b());
  function onUpdateFn_0() {
    console.log(\\"Runs when a or b changes\\", a(), b());

    if (a() === \\"a\\") {
      setA(\\"b\\");
    }
  }
  createEffect(
    on(() => [onUpdateFn_0_a__(), onUpdateFn_0_b__()], onUpdateFn_0)
  );

  const onUpdateFn_1_c__ = createMemo(() => c());
  const onUpdateFn_1_d__ = createMemo(() => d());
  function onUpdateFn_1() {
    console.log(\\"Runs when c or d changes\\", c(), d());

    if (a() === \\"a\\") {
      setA(\\"b\\");
    }
  }
  createEffect(
    on(() => [onUpdateFn_1_c__(), onUpdateFn_1_d__()], onUpdateFn_1)
  );

  return (
    <>
      <div></div>
    </>
  );
}

export default MultipleOnUpdateWithDeps;
"
`;

exports[`Solid > jsx > Typescript Test > multipleSpreads 1`] = `
"import { createSignal, createMemo } from \\"solid-js\\";

function MyBasicComponent(props: any) {
  const [attrs, setAttrs] = createSignal({
    hello: \\"world\\",
  });

  return (
    <>
      <input {...attrs()} {...props} />
    </>
  );
}

export default MyBasicComponent;
"
`;

exports[`Solid > jsx > Typescript Test > multipleSpreads 2`] = `
"import { createSignal, createMemo } from \\"solid-js\\";

function MyBasicComponent(props: any) {
  const [attrs, setAttrs] = createSignal({
    hello: \\"world\\",
  });

  return (
    <>
      <input {...attrs()} {...props} />
    </>
  );
}

export default MyBasicComponent;
"
`;

exports[`Solid > jsx > Typescript Test > nestedShow 1`] = `
"import { Show } from \\"solid-js\\";

interface Props {
  conditionA: boolean;
  conditionB: boolean;
}

function NestedShow(props: Props) {
  return (
    <>
      <Show fallback={<div>else-condition-A</div>} when={props.conditionA}>
        <Show fallback={<div>else-condition-B</div>} when={!props.conditionB}>
          <div>if condition A and condition B</div>
        </Show>
      </Show>
    </>
  );
}

export default NestedShow;
"
`;

exports[`Solid > jsx > Typescript Test > nestedShow 2`] = `
"import { Show } from \\"solid-js\\";

interface Props {
  conditionA: boolean;
  conditionB: boolean;
}

function NestedShow(props: Props) {
  return (
    <>
      <Show fallback={<div>else-condition-A</div>} when={props.conditionA}>
        <Show fallback={<div>else-condition-B</div>} when={!props.conditionB}>
          <div>if condition A and condition B</div>
        </Show>
      </Show>
    </>
  );
}

export default NestedShow;
"
`;

exports[`Solid > jsx > Typescript Test > nestedStyles 1`] = `
"function NestedStyles(props: any) {
  return (
    <>
      <div class=\\"div-7ff9918d\\">Hello world</div>
      <style>{\`.div-7ff9918d {
  display: flex;
  --bar: red;
  color: var(--bar);
}@media (max-width: env(--mobile)) { .div-7ff9918d {   display: block; } }.div-7ff9918d:hover {
  display: flex;
}.div-7ff9918d:active {
  display: inline;
}.div-7ff9918d .nested-selector {
  display: grid;
}.div-7ff9918d .nested-selector:hover {
  display: block;
}.div-7ff9918d.nested-selector:active {
  display: inline-block;
}\`}</style>
    </>
  );
}

export default NestedStyles;
"
`;

exports[`Solid > jsx > Typescript Test > nestedStyles 2`] = `
"function NestedStyles(props: any) {
  return (
    <>
      <div class=\\"div-7ff9918d\\">Hello world</div>
      <style>{\`.div-7ff9918d {
  display: flex;
  --bar: red;
  color: var(--bar);
}@media (max-width: env(--mobile)) { .div-7ff9918d {   display: block; } }.div-7ff9918d:hover {
  display: flex;
}.div-7ff9918d:active {
  display: inline;
}.div-7ff9918d .nested-selector {
  display: grid;
}.div-7ff9918d .nested-selector:hover {
  display: block;
}.div-7ff9918d.nested-selector:active {
  display: inline-block;
}\`}</style>
    </>
  );
}

export default NestedStyles;
"
`;

exports[`Solid > jsx > Typescript Test > onEvent 1`] = `
"import { onMount, createSignal, createMemo } from \\"solid-js\\";

function Embed(props: any) {
  function foo(event) {
    console.log(\\"test2\\");
  }

  function elem_onInitEditingBldr(event) {
    console.log(\\"test\\");
    foo(event);
  }

  let elem: HTMLDivElement;

  onMount(() => {
    elem.dispatchEvent(new CustomEvent(\\"initEditingBldr\\"));
  });

  return (
    <>
      <div
        class=\\"builder-embed\\"
        ref={elem!}
        onInitEditingBldr={(event) => elem_onInitEditingBldr(event)}
      >
        <div>Test</div>
      </div>
    </>
  );
}

export default Embed;
"
`;

exports[`Solid > jsx > Typescript Test > onEvent 2`] = `
"import { onMount, createSignal, createMemo } from \\"solid-js\\";

function Embed(props: any) {
  function foo(event) {
    console.log(\\"test2\\");
  }

  function elem_onInitEditingBldr(event) {
    console.log(\\"test\\");
    foo(event);
  }

  let elem: HTMLDivElement;

  onMount(() => {
    elem.dispatchEvent(new CustomEvent(\\"initEditingBldr\\"));
  });

  return (
    <>
      <div
        class=\\"builder-embed\\"
        ref={elem!}
        onInitEditingBldr={(event) => elem_onInitEditingBldr(event)}
      >
        <div>Test</div>
      </div>
    </>
  );
}

export default Embed;
"
`;

exports[`Solid > jsx > Typescript Test > onInit & onMount 1`] = `
"import { onMount } from \\"solid-js\\";

function OnInit(props: any) {
  console.log(\\"onInit\\");

  onMount(() => {
    console.log(\\"onMount\\");
  });

  return (
    <>
      <div></div>
    </>
  );
}

export default OnInit;
"
`;

exports[`Solid > jsx > Typescript Test > onInit & onMount 2`] = `
"import { onMount } from \\"solid-js\\";

function OnInit(props: any) {
  console.log(\\"onInit\\");

  onMount(() => {
    console.log(\\"onMount\\");
  });

  return (
    <>
      <div></div>
    </>
  );
}

export default OnInit;
"
`;

exports[`Solid > jsx > Typescript Test > onInit 1`] = `
"import { createSignal, createMemo } from \\"solid-js\\";

type Props = {
  name: string;
};

export const defaultValues = {
  name: \\"PatrickJS\\",
};

function OnInit(props: Props) {
  const [name, setName] = createSignal(\\"\\");

  setName(defaultValues.name || props.name);
  console.log(\\"set defaults with props\\");

  return (
    <>
      <div>
        Default name defined by parent
        {name()}
      </div>
    </>
  );
}

export default OnInit;
"
`;

exports[`Solid > jsx > Typescript Test > onInit 2`] = `
"import { createSignal, createMemo } from \\"solid-js\\";

type Props = {
  name: string;
};

export const defaultValues = {
  name: \\"PatrickJS\\",
};

function OnInit(props: Props) {
  const [name, setName] = createSignal(\\"\\");

  setName(defaultValues.name || props.name);
  console.log(\\"set defaults with props\\");

  return (
    <>
      <div>
        Default name defined by parent
        {name()}
      </div>
    </>
  );
}

export default OnInit;
"
`;

exports[`Solid > jsx > Typescript Test > onMount 1`] = `
"import { onMount } from \\"solid-js\\";

function Comp(props: any) {
  onMount(() => {
    console.log(\\"Runs on mount\\");
  });

  return (
    <>
      <div></div>
    </>
  );
}

export default Comp;
"
`;

exports[`Solid > jsx > Typescript Test > onMount 2`] = `
"import { onMount } from \\"solid-js\\";

function Comp(props: any) {
  onMount(() => {
    console.log(\\"Runs on mount\\");
  });

  return (
    <>
      <div></div>
    </>
  );
}

export default Comp;
"
`;

exports[`Solid > jsx > Typescript Test > onMountMultiple 1`] = `
"import { onMount } from \\"solid-js\\";

function Comp(props: any) {
  onMount(() => {
    console.log(\\"Runs on mount\\");
  });
  onMount(() => {
    console.log(\\"Another one runs on Mount\\");
  });
  onMount(() => {
    console.log(\\"SSR runs on Mount\\");
  });

  return (
    <>
      <div></div>
    </>
  );
}

export default Comp;
"
`;

exports[`Solid > jsx > Typescript Test > onMountMultiple 2`] = `
"import { onMount } from \\"solid-js\\";

function Comp(props: any) {
  onMount(() => {
    console.log(\\"Runs on mount\\");
  });
  onMount(() => {
    console.log(\\"Another one runs on Mount\\");
  });
  onMount(() => {
    console.log(\\"SSR runs on Mount\\");
  });

  return (
    <>
      <div></div>
    </>
  );
}

export default Comp;
"
`;

exports[`Solid > jsx > Typescript Test > onUpdate 1`] = `
"import { on, createEffect, createMemo } from \\"solid-js\\";

function OnUpdate(props: any) {
  return (
    <>
      <div></div>
    </>
  );
}

export default OnUpdate;
"
`;

exports[`Solid > jsx > Typescript Test > onUpdate 2`] = `
"import { on, createEffect, createMemo } from \\"solid-js\\";

function OnUpdate(props: any) {
  return (
    <>
      <div></div>
    </>
  );
}

export default OnUpdate;
"
`;

exports[`Solid > jsx > Typescript Test > onUpdateWithDeps 1`] = `
"import { on, createEffect, createMemo, createSignal } from \\"solid-js\\";

type Props = {
  size: string;
};

function OnUpdateWithDeps(props: Props) {
  const [a, setA] = createSignal(\\"a\\");

  const [b, setB] = createSignal(\\"b\\");

  const onUpdateFn_0_a__ = createMemo(() => a());
  const onUpdateFn_0_b__ = createMemo(() => b());
  const onUpdateFn_0_props_size = createMemo(() => props.size);
  function onUpdateFn_0() {
    console.log(\\"Runs when a, b or size changes\\", a(), b(), props.size);
  }
  createEffect(
    on(
      () => [onUpdateFn_0_a__(), onUpdateFn_0_b__(), onUpdateFn_0_props_size()],
      onUpdateFn_0
    )
  );

  return (
    <>
      <div></div>
    </>
  );
}

export default OnUpdateWithDeps;
"
`;

exports[`Solid > jsx > Typescript Test > onUpdateWithDeps 2`] = `
"import { on, createEffect, createMemo, createSignal } from \\"solid-js\\";

type Props = {
  size: string;
};

function OnUpdateWithDeps(props: Props) {
  const [a, setA] = createSignal(\\"a\\");

  const [b, setB] = createSignal(\\"b\\");

  const onUpdateFn_0_a__ = createMemo(() => a());
  const onUpdateFn_0_b__ = createMemo(() => b());
  const onUpdateFn_0_props_size = createMemo(() => props.size);
  function onUpdateFn_0() {
    console.log(\\"Runs when a, b or size changes\\", a(), b(), props.size);
  }
  createEffect(
    on(
      () => [onUpdateFn_0_a__(), onUpdateFn_0_b__(), onUpdateFn_0_props_size()],
      onUpdateFn_0
    )
  );

  return (
    <>
      <div></div>
    </>
  );
}

export default OnUpdateWithDeps;
"
`;

exports[`Solid > jsx > Typescript Test > preserveExportOrLocalStatement 1`] = `
"type Types = {
  s: any[];
};
interface IPost {
  len: number;
}
export interface MyBasicComponentProps {
  id: string;
}

const b = 3;
const foo = () => {};
export const a = 3;
export const bar = () => {};
export function run<T>(value: T) {}

function MyBasicComponent(props: MyBasicComponentProps) {
  return (
    <>
      <div></div>
    </>
  );
}

export default MyBasicComponent;
"
`;

exports[`Solid > jsx > Typescript Test > preserveExportOrLocalStatement 2`] = `
"type Types = {
  s: any[];
};
interface IPost {
  len: number;
}
export interface MyBasicComponentProps {
  id: string;
}

const b = 3;
const foo = () => {};
export const a = 3;
export const bar = () => {};
export function run<T>(value: T) {}

function MyBasicComponent(props: MyBasicComponentProps) {
  return (
    <>
      <div></div>
    </>
  );
}

export default MyBasicComponent;
"
`;

exports[`Solid > jsx > Typescript Test > preserveTyping 1`] = `
"export type A = \\"test\\";
export interface C {
  n: \\"test\\";
}
type B = \\"test2\\";
interface D {
  n: \\"test\\";
}
export interface MyBasicComponentProps {
  name: string;
  age?: number;
}

function MyBasicComponent(props: MyBasicComponentProps) {
  return (
    <>
      <div>
        Hello! I can run in React, Vue, Solid, or Liquid!
        {props.name}
      </div>
    </>
  );
}

export default MyBasicComponent;
"
`;

exports[`Solid > jsx > Typescript Test > preserveTyping 2`] = `
"export type A = \\"test\\";
export interface C {
  n: \\"test\\";
}
type B = \\"test2\\";
interface D {
  n: \\"test\\";
}
export interface MyBasicComponentProps {
  name: string;
  age?: number;
}

function MyBasicComponent(props: MyBasicComponentProps) {
  return (
    <>
      <div>
        Hello! I can run in React, Vue, Solid, or Liquid!
        {props.name}
      </div>
    </>
  );
}

export default MyBasicComponent;
"
`;

exports[`Solid > jsx > Typescript Test > propsDestructure 1`] = `
"import { createSignal, createMemo } from \\"solid-js\\";

type Props = {
  children: any;
  type: string;
};

function MyBasicComponent(props: Props) {
  const [name, setName] = createSignal(\\"Decadef20\\");

  return (
    <>
      <div>
        {props.children}
        {props.type}
        Hello! I can run in React, Vue, Solid, or Liquid!
      </div>
    </>
  );
}

export default MyBasicComponent;
"
`;

exports[`Solid > jsx > Typescript Test > propsDestructure 2`] = `
"import { createSignal, createMemo } from \\"solid-js\\";

type Props = {
  children: any;
  type: string;
};

function MyBasicComponent(props: Props) {
  const [name, setName] = createSignal(\\"Decadef20\\");

  return (
    <>
      <div>
        {props.children}
        {props.type}
        Hello! I can run in React, Vue, Solid, or Liquid!
      </div>
    </>
  );
}

export default MyBasicComponent;
"
`;

exports[`Solid > jsx > Typescript Test > propsInterface 1`] = `
"interface Person {
  name: string;
  age?: number;
}

function MyBasicComponent(props: Person | never) {
  return (
    <>
      <div>
        Hello! I can run in React, Vue, Solid, or Liquid!
        {props.name}
      </div>
    </>
  );
}

export default MyBasicComponent;
"
`;

exports[`Solid > jsx > Typescript Test > propsInterface 2`] = `
"interface Person {
  name: string;
  age?: number;
}

function MyBasicComponent(props: Person | never) {
  return (
    <>
      <div>
        Hello! I can run in React, Vue, Solid, or Liquid!
        {props.name}
      </div>
    </>
  );
}

export default MyBasicComponent;
"
`;

exports[`Solid > jsx > Typescript Test > propsType 1`] = `
"type Person = {
  name: string;
  age?: number;
};

function MyBasicComponent(props: Person) {
  return (
    <>
      <div>
        Hello! I can run in React, Vue, Solid, or Liquid!
        {props.name}
      </div>
    </>
  );
}

export default MyBasicComponent;
"
`;

exports[`Solid > jsx > Typescript Test > propsType 2`] = `
"type Person = {
  name: string;
  age?: number;
};

function MyBasicComponent(props: Person) {
  return (
    <>
      <div>
        Hello! I can run in React, Vue, Solid, or Liquid!
        {props.name}
      </div>
    </>
  );
}

export default MyBasicComponent;
"
`;

exports[`Solid > jsx > Typescript Test > referencingFunInsideHook 1`] = `
"import { on, createEffect, createMemo, createSignal } from \\"solid-js\\";

function OnUpdate(props: any) {
  function foo(params) {}

  function bar() {}

  function zoo() {
    const params = {
      cb: bar,
    };
  }

  return (
    <>
      <div></div>
    </>
  );
}

export default OnUpdate;
"
`;

exports[`Solid > jsx > Typescript Test > referencingFunInsideHook 2`] = `
"import { on, createEffect, createMemo, createSignal } from \\"solid-js\\";

function OnUpdate(props: any) {
  function foo(params) {}

  function bar() {}

  function zoo() {
    const params = {
      cb: bar,
    };
  }

  return (
    <>
      <div></div>
    </>
  );
}

export default OnUpdate;
"
`;

exports[`Solid > jsx > Typescript Test > renderBlock 1`] = `
"import { Show, For, createSignal, createMemo } from \\"solid-js\\";
import { Dynamic } from \\"solid-js/web\\";

export type RenderBlockProps = {
  block: BuilderBlock;
  context: BuilderContextInterface;
};

import { TARGET } from \\"../../constants/target.js\\";
import type {
  BuilderContextInterface,
  RegisteredComponent,
} from \\"../../context/types.js\\";
import { evaluate } from \\"../../functions/evaluate.js\\";
import { extractTextStyles } from \\"../../functions/extract-text-styles.js\\";
import { getBlockActions } from \\"../../functions/get-block-actions.js\\";
import { getBlockComponentOptions } from \\"../../functions/get-block-component-options.js\\";
import { getBlockProperties } from \\"../../functions/get-block-properties.js\\";
import { getBlockTag } from \\"../../functions/get-block-tag.js\\";
import { getProcessedBlock } from \\"../../functions/get-processed-block.js\\";
import { getReactNativeBlockStyles } from \\"../../functions/get-react-native-block-styles.js\\";
import type { BuilderBlock } from \\"../../types/builder-block.js\\";
import type { Nullable } from \\"../../types/typescript.js\\";
import BlockStyles from \\"./block-styles\\";
import { isEmptyHtmlElement } from \\"./render-block.helpers.js\\";
import RenderComponentWithContext from \\"./render-component-with-context.js\\";
import type { RenderComponentProps } from \\"./render-component\\";
import RenderComponent from \\"./render-component\\";
import RenderRepeatedBlock from \\"./render-repeated-block\\";
import type { RepeatData } from \\"./types.js\\";

function RenderBlock(props: RenderBlockProps) {
  const component = createMemo(() => {
    const componentName = getProcessedBlock({
      block: props.block,
      state: props.context.state,
      context: props.context.context,
      shouldEvaluateBindings: false,
    }).component?.name;

    if (!componentName) {
      return null;
    }

    const ref = props.context.registeredComponents[componentName];

    if (!ref) {
      // TODO: Public doc page with more info about this message
      console.warn(\`
          Could not find a registered component named \\"\${componentName}\\".
          If you registered it, is the file that registered it imported by the file that needs to render it?\`);
      return undefined;
    } else {
      return ref;
    }
  });

  const tag = createMemo(() => {
    return getBlockTag(useBlock());
  });

  const useBlock = createMemo(() => {
    return repeatItemData()
      ? props.block
      : getProcessedBlock({
          block: props.block,
          state: props.context.state,
          context: props.context.context,
          shouldEvaluateBindings: true,
        });
  });

  const actions = createMemo(() => {
    return getBlockActions({
      block: useBlock(),
      state: props.context.state,
      context: props.context.context,
    });
  });

  const attributes = createMemo(() => {
    const blockProperties = getBlockProperties(useBlock());
    return {
      ...blockProperties,
      ...(TARGET === \\"reactNative\\"
        ? {
            style: getReactNativeBlockStyles({
              block: useBlock(),
              context: props.context,
              blockStyles: blockProperties.style,
            }),
          }
        : {}),
    };
  });

  const shouldWrap = createMemo(() => {
    return !component()?.noWrap;
  });

  const renderComponentProps = createMemo(() => {
    return {
      blockChildren: useChildren(),
      componentRef: component()?.component,
      componentOptions: {
        ...getBlockComponentOptions(useBlock()),

        /**
         * These attributes are passed to the wrapper element when there is one. If \`noWrap\` is set to true, then
         * they are provided to the component itself directly.
         */
        ...(shouldWrap()
          ? {}
          : {
              attributes: { ...attributes(), ...actions() },
            }),
        customBreakpoints: childrenContext()?.content?.meta?.breakpoints,
      },
      context: childrenContext(),
    };
  });

  const useChildren = createMemo(() => {
    // TO-DO: When should \`canHaveChildren\` dictate rendering?
    // This is currently commented out because some Builder components (e.g. Box) do not have \`canHaveChildren: true\`,
    // but still receive and need to render children.
    // return state.componentInfo?.canHaveChildren ? state.useBlock.children : [];
    return useBlock().children ?? [];
  });

  const childrenWithoutParentComponent = createMemo(() => {
    /**
     * When there is no \`componentRef\`, there might still be children that need to be rendered. In this case,
     * we render them outside of \`componentRef\`.
     * NOTE: We make sure not to render this if \`repeatItemData\` is non-null, because that means we are rendering an array of
     * blocks, and the children will be repeated within those blocks.
     */
    const shouldRenderChildrenOutsideRef =
      !component()?.component && !repeatItemData();
    return shouldRenderChildrenOutsideRef ? useChildren() : [];
  });

  const repeatItemData = createMemo(() => {
    /**
     * we don't use \`state.useBlock\` here because the processing done within its logic includes evaluating the block's bindings,
     * which will not work if there is a repeat.
     */
    const { repeat, ...blockWithoutRepeat } = props.block;

    if (!repeat?.collection) {
      return undefined;
    }

    const itemsArray = evaluate({
      code: repeat.collection,
      state: props.context.state,
      context: props.context.context,
    });

    if (!Array.isArray(itemsArray)) {
      return undefined;
    }

    const collectionName = repeat.collection.split(\\".\\").pop();
    const itemNameToUse =
      repeat.itemName || (collectionName ? collectionName + \\"Item\\" : \\"item\\");
    const repeatArray = itemsArray.map<RepeatData>((item, index) => ({
      context: {
        ...props.context,
        state: {
          ...props.context.state,
          $index: index,
          $item: item,
          [itemNameToUse]: item,
          [\`$\${itemNameToUse}Index\`]: index,
        },
      },
      block: blockWithoutRepeat,
    }));
    return repeatArray;
  });

  const inheritedTextStyles = createMemo(() => {
    if (TARGET !== \\"reactNative\\") {
      return {};
    }

    const styles = getReactNativeBlockStyles({
      block: useBlock(),
      context: props.context,
      blockStyles: attributes().style,
    });
    return extractTextStyles(styles);
  });

  const childrenContext = createMemo(() => {
    return {
      apiKey: props.context.apiKey,
      state: props.context.state,
      content: props.context.content,
      context: props.context.context,
      registeredComponents: props.context.registeredComponents,
      inheritedStyles: inheritedTextStyles(),
    };
  });

  const renderComponentTag = createMemo(() => {
    if (TARGET === \\"reactNative\\") {
      return RenderComponentWithContext;
    } else if (TARGET === \\"vue3\\") {
      // vue3 expects a string for the component tag
      return \\"RenderComponent\\";
    } else {
      return RenderComponent;
    }
  });

  return (
    <>
      <Show
        fallback={
          <Dynamic
            {...renderComponentProps()}
            component={renderComponentTag()}
          ></Dynamic>
        }
        when={shouldWrap()}
      >
        <Show when={isEmptyHtmlElement(tag())}>
          <Dynamic {...attributes()} {...actions()} component={tag()}></Dynamic>
        </Show>
        <Show when={!isEmptyHtmlElement(tag()) && repeatItemData()}>
          <For each={repeatItemData()}>
            {(data, _index) => {
              const index = _index();
              return (
                <RenderRepeatedBlock
                  key={index}
                  repeatContext={data.context}
                  block={data.block}
                ></RenderRepeatedBlock>
              );
            }}
          </For>
        </Show>
        <Show when={!isEmptyHtmlElement(tag()) && !repeatItemData()}>
          <Dynamic {...attributes()} {...actions()} component={tag()}>
            <Dynamic
              {...renderComponentProps()}
              component={renderComponentTag()}
            ></Dynamic>
            <For each={childrenWithoutParentComponent()}>
              {(child, _index) => {
                const index = _index();
                return (
                  <RenderBlock
                    key={\\"render-block-\\" + child.id}
                    block={child}
                    context={childrenContext()}
                  ></RenderBlock>
                );
              }}
            </For>
            <For each={childrenWithoutParentComponent()}>
              {(child, _index) => {
                const index = _index();
                return (
                  <BlockStyles
                    key={\\"block-style-\\" + child.id}
                    block={child}
                    context={childrenContext()}
                  ></BlockStyles>
                );
              }}
            </For>
          </Dynamic>
        </Show>
      </Show>
    </>
  );
}

export default RenderBlock;
"
`;

exports[`Solid > jsx > Typescript Test > renderBlock 2`] = `
"import { Show, For, createSignal, createMemo } from \\"solid-js\\";
import { Dynamic } from \\"solid-js/web\\";

export type RenderBlockProps = {
  block: BuilderBlock;
  context: BuilderContextInterface;
};

import { TARGET } from \\"../../constants/target.js\\";
import type {
  BuilderContextInterface,
  RegisteredComponent,
} from \\"../../context/types.js\\";
import { evaluate } from \\"../../functions/evaluate.js\\";
import { extractTextStyles } from \\"../../functions/extract-text-styles.js\\";
import { getBlockActions } from \\"../../functions/get-block-actions.js\\";
import { getBlockComponentOptions } from \\"../../functions/get-block-component-options.js\\";
import { getBlockProperties } from \\"../../functions/get-block-properties.js\\";
import { getBlockTag } from \\"../../functions/get-block-tag.js\\";
import { getProcessedBlock } from \\"../../functions/get-processed-block.js\\";
import { getReactNativeBlockStyles } from \\"../../functions/get-react-native-block-styles.js\\";
import type { BuilderBlock } from \\"../../types/builder-block.js\\";
import type { Nullable } from \\"../../types/typescript.js\\";
import BlockStyles from \\"./block-styles\\";
import { isEmptyHtmlElement } from \\"./render-block.helpers.js\\";
import RenderComponentWithContext from \\"./render-component-with-context.js\\";
import type { RenderComponentProps } from \\"./render-component\\";
import RenderComponent from \\"./render-component\\";
import RenderRepeatedBlock from \\"./render-repeated-block\\";
import type { RepeatData } from \\"./types.js\\";

function RenderBlock(props: RenderBlockProps) {
  const component = createMemo(() => {
    const componentName = getProcessedBlock({
      block: props.block,
      state: props.context.state,
      context: props.context.context,
      shouldEvaluateBindings: false,
    }).component?.name;

    if (!componentName) {
      return null;
    }

    const ref = props.context.registeredComponents[componentName];

    if (!ref) {
      // TODO: Public doc page with more info about this message
      console.warn(\`
          Could not find a registered component named \\"\${componentName}\\".
          If you registered it, is the file that registered it imported by the file that needs to render it?\`);
      return undefined;
    } else {
      return ref;
    }
  });

  const tag = createMemo(() => {
    return getBlockTag(useBlock());
  });

  const useBlock = createMemo(() => {
    return repeatItemData()
      ? props.block
      : getProcessedBlock({
          block: props.block,
          state: props.context.state,
          context: props.context.context,
          shouldEvaluateBindings: true,
        });
  });

  const actions = createMemo(() => {
    return getBlockActions({
      block: useBlock(),
      state: props.context.state,
      context: props.context.context,
    });
  });

  const attributes = createMemo(() => {
    const blockProperties = getBlockProperties(useBlock());
    return {
      ...blockProperties,
      ...(TARGET === \\"reactNative\\"
        ? {
            style: getReactNativeBlockStyles({
              block: useBlock(),
              context: props.context,
              blockStyles: blockProperties.style,
            }),
          }
        : {}),
    };
  });

  const shouldWrap = createMemo(() => {
    return !component()?.noWrap;
  });

  const renderComponentProps = createMemo(() => {
    return {
      blockChildren: useChildren(),
      componentRef: component()?.component,
      componentOptions: {
        ...getBlockComponentOptions(useBlock()),

        /**
         * These attributes are passed to the wrapper element when there is one. If \`noWrap\` is set to true, then
         * they are provided to the component itself directly.
         */
        ...(shouldWrap()
          ? {}
          : {
              attributes: { ...attributes(), ...actions() },
            }),
        customBreakpoints: childrenContext()?.content?.meta?.breakpoints,
      },
      context: childrenContext(),
    };
  });

  const useChildren = createMemo(() => {
    // TO-DO: When should \`canHaveChildren\` dictate rendering?
    // This is currently commented out because some Builder components (e.g. Box) do not have \`canHaveChildren: true\`,
    // but still receive and need to render children.
    // return state.componentInfo?.canHaveChildren ? state.useBlock.children : [];
    return useBlock().children ?? [];
  });

  const childrenWithoutParentComponent = createMemo(() => {
    /**
     * When there is no \`componentRef\`, there might still be children that need to be rendered. In this case,
     * we render them outside of \`componentRef\`.
     * NOTE: We make sure not to render this if \`repeatItemData\` is non-null, because that means we are rendering an array of
     * blocks, and the children will be repeated within those blocks.
     */
    const shouldRenderChildrenOutsideRef =
      !component()?.component && !repeatItemData();
    return shouldRenderChildrenOutsideRef ? useChildren() : [];
  });

  const repeatItemData = createMemo(() => {
    /**
     * we don't use \`state.useBlock\` here because the processing done within its logic includes evaluating the block's bindings,
     * which will not work if there is a repeat.
     */
    const { repeat, ...blockWithoutRepeat } = props.block;

    if (!repeat?.collection) {
      return undefined;
    }

    const itemsArray = evaluate({
      code: repeat.collection,
      state: props.context.state,
      context: props.context.context,
    });

    if (!Array.isArray(itemsArray)) {
      return undefined;
    }

    const collectionName = repeat.collection.split(\\".\\").pop();
    const itemNameToUse =
      repeat.itemName || (collectionName ? collectionName + \\"Item\\" : \\"item\\");
    const repeatArray = itemsArray.map<RepeatData>((item, index) => ({
      context: {
        ...props.context,
        state: {
          ...props.context.state,
          $index: index,
          $item: item,
          [itemNameToUse]: item,
          [\`$\${itemNameToUse}Index\`]: index,
        },
      },
      block: blockWithoutRepeat,
    }));
    return repeatArray;
  });

  const inheritedTextStyles = createMemo(() => {
    if (TARGET !== \\"reactNative\\") {
      return {};
    }

    const styles = getReactNativeBlockStyles({
      block: useBlock(),
      context: props.context,
      blockStyles: attributes().style,
    });
    return extractTextStyles(styles);
  });

  const childrenContext = createMemo(() => {
    return {
      apiKey: props.context.apiKey,
      state: props.context.state,
      content: props.context.content,
      context: props.context.context,
      registeredComponents: props.context.registeredComponents,
      inheritedStyles: inheritedTextStyles(),
    };
  });

  const renderComponentTag = createMemo(() => {
    if (TARGET === \\"reactNative\\") {
      return RenderComponentWithContext;
    } else if (TARGET === \\"vue3\\") {
      // vue3 expects a string for the component tag
      return \\"RenderComponent\\";
    } else {
      return RenderComponent;
    }
  });

  return (
    <>
      <Show
        fallback={
          <Dynamic
            {...renderComponentProps()}
            component={renderComponentTag()}
          ></Dynamic>
        }
        when={shouldWrap()}
      >
        <Show when={isEmptyHtmlElement(tag())}>
          <Dynamic {...attributes()} {...actions()} component={tag()}></Dynamic>
        </Show>
        <Show when={!isEmptyHtmlElement(tag()) && repeatItemData()}>
          <For each={repeatItemData()}>
            {(data, _index) => {
              const index = _index();
              return (
                <RenderRepeatedBlock
                  key={index}
                  repeatContext={data.context}
                  block={data.block}
                ></RenderRepeatedBlock>
              );
            }}
          </For>
        </Show>
        <Show when={!isEmptyHtmlElement(tag()) && !repeatItemData()}>
          <Dynamic {...attributes()} {...actions()} component={tag()}>
            <Dynamic
              {...renderComponentProps()}
              component={renderComponentTag()}
            ></Dynamic>
            <For each={childrenWithoutParentComponent()}>
              {(child, _index) => {
                const index = _index();
                return (
                  <RenderBlock
                    key={\\"render-block-\\" + child.id}
                    block={child}
                    context={childrenContext()}
                  ></RenderBlock>
                );
              }}
            </For>
            <For each={childrenWithoutParentComponent()}>
              {(child, _index) => {
                const index = _index();
                return (
                  <BlockStyles
                    key={\\"block-style-\\" + child.id}
                    block={child}
                    context={childrenContext()}
                  ></BlockStyles>
                );
              }}
            </For>
          </Dynamic>
        </Show>
      </Show>
    </>
  );
}

export default RenderBlock;
"
`;

exports[`Solid > jsx > Typescript Test > renderContentExample 1`] = `
"import { onMount, on, createEffect, createMemo } from \\"solid-js\\";

type Props = {
  customComponents: string[];
  content: {
    blocks: any[];
    id: string;
  };
};

import BuilderContext from \\"@dummy/context.js\\";
import {
  dispatchNewContentToVisualEditor,
  sendComponentsToVisualEditor,
  trackClick,
} from \\"@dummy/injection-js\\";
import RenderBlocks from \\"@dummy/RenderBlocks\\";

function RenderContent(props: Props) {
  onMount(() => {
    sendComponentsToVisualEditor(props.customComponents);
  });

  const onUpdateFn_0_props_content = createMemo(() => props.content);
  function onUpdateFn_0() {
    dispatchNewContentToVisualEditor(props.content);
  }
  createEffect(on(() => [onUpdateFn_0_props_content()], onUpdateFn_0));

  return (
    <>
      <BuilderContext.Provider
        value={{
          get content() {
            return 3;
          },

          get registeredComponents() {
            return 4;
          },
        }}
      >
        <div
          class=\\"div-67b8c6a0\\"
          onClick={(event) => trackClick(props.content.id)}
        >
          <RenderBlocks blocks={props.content.blocks}></RenderBlocks>
        </div>
      </BuilderContext.Provider>
      <style>{\`.div-67b8c6a0 {
  display: flex;
  flex-direction: columns;
}\`}</style>
    </>
  );
}

export default RenderContent;
"
`;

exports[`Solid > jsx > Typescript Test > renderContentExample 2`] = `
"import { onMount, on, createEffect, createMemo } from \\"solid-js\\";

type Props = {
  customComponents: string[];
  content: {
    blocks: any[];
    id: string;
  };
};

import BuilderContext from \\"@dummy/context.js\\";
import {
  dispatchNewContentToVisualEditor,
  sendComponentsToVisualEditor,
  trackClick,
} from \\"@dummy/injection-js\\";
import RenderBlocks from \\"@dummy/RenderBlocks\\";

function RenderContent(props: Props) {
  onMount(() => {
    sendComponentsToVisualEditor(props.customComponents);
  });

  const onUpdateFn_0_props_content = createMemo(() => props.content);
  function onUpdateFn_0() {
    dispatchNewContentToVisualEditor(props.content);
  }
  createEffect(on(() => [onUpdateFn_0_props_content()], onUpdateFn_0));

  return (
    <>
      <BuilderContext.Provider
        value={{
          get content() {
            return 3;
          },

          get registeredComponents() {
            return 4;
          },
        }}
      >
        <div
          class=\\"div-67b8c6a0\\"
          onClick={(event) => trackClick(props.content.id)}
        >
          <RenderBlocks blocks={props.content.blocks}></RenderBlocks>
        </div>
      </BuilderContext.Provider>
      <style>{\`.div-67b8c6a0 {
  display: flex;
  flex-direction: columns;
}\`}</style>
    </>
  );
}

export default RenderContent;
"
`;

exports[`Solid > jsx > Typescript Test > rootFragmentMultiNode 1`] = `
"import { Show } from \\"solid-js\\";

export interface ButtonProps {
  attributes?: any;
  text?: string;
  link?: string;
  openLinkInNewTab?: boolean;
}

function Button(props: ButtonProps) {
  return (
    <>
      <>
        <Show when={props.link}>
          <a
            {...props.attributes}
            href={props.link}
            target={props.openLinkInNewTab ? \\"_blank\\" : undefined}
          >
            {props.text}
          </a>
        </Show>
        <Show when={!props.link}>
          <button type=\\"button\\" {...props.attributes}>
            {props.text}
          </button>
        </Show>
      </>
    </>
  );
}

export default Button;
"
`;

exports[`Solid > jsx > Typescript Test > rootFragmentMultiNode 2`] = `
"import { Show } from \\"solid-js\\";

export interface ButtonProps {
  attributes?: any;
  text?: string;
  link?: string;
  openLinkInNewTab?: boolean;
}

function Button(props: ButtonProps) {
  return (
    <>
      <>
        <Show when={props.link}>
          <a
            {...props.attributes}
            href={props.link}
            target={props.openLinkInNewTab ? \\"_blank\\" : undefined}
          >
            {props.text}
          </a>
        </Show>
        <Show when={!props.link}>
          <button type=\\"button\\" {...props.attributes}>
            {props.text}
          </button>
        </Show>
      </>
    </>
  );
}

export default Button;
"
`;

exports[`Solid > jsx > Typescript Test > rootShow 1`] = `
"import { Show } from \\"solid-js\\";

export interface RenderStylesProps {
  foo: string;
}

function RenderStyles(props: RenderStylesProps) {
  return (
    <>
      <Show fallback={<div>Foo</div>} when={props.foo === \\"bar\\"}>
        <div>Bar</div>
      </Show>
    </>
  );
}

export default RenderStyles;
"
`;

exports[`Solid > jsx > Typescript Test > rootShow 2`] = `
"import { Show } from \\"solid-js\\";

export interface RenderStylesProps {
  foo: string;
}

function RenderStyles(props: RenderStylesProps) {
  return (
    <>
      <Show fallback={<div>Foo</div>} when={props.foo === \\"bar\\"}>
        <div>Bar</div>
      </Show>
    </>
  );
}

export default RenderStyles;
"
`;

exports[`Solid > jsx > Typescript Test > self-referencing component 1`] = `
"import { Show } from \\"solid-js\\";

function MyComponent(props: any) {
  return (
    <>
      <div>
        {props.name}
        <Show when={props.name === \\"Batman\\"}>
          <MyComponent name=\\"Bruce Wayne\\"></MyComponent>
        </Show>
      </div>
    </>
  );
}

export default MyComponent;
"
`;

exports[`Solid > jsx > Typescript Test > self-referencing component 2`] = `
"import { Show } from \\"solid-js\\";

function MyComponent(props: any) {
  return (
    <>
      <div>
        {props.name}
        <Show when={props.name === \\"Batman\\"}>
          <MyComponent name=\\"Bruce Wayne\\"></MyComponent>
        </Show>
      </div>
    </>
  );
}

export default MyComponent;
"
`;

exports[`Solid > jsx > Typescript Test > self-referencing component with children 1`] = `
"import { Show } from \\"solid-js\\";

function MyComponent(props: any) {
  return (
    <>
      <div>
        {props.name}
        {props.children}
        <Show when={props.name === \\"Batman\\"}>
          <MyComponent name=\\"Bruce\\">
            <div>Wayne</div>
          </MyComponent>
        </Show>
      </div>
    </>
  );
}

export default MyComponent;
"
`;

exports[`Solid > jsx > Typescript Test > self-referencing component with children 2`] = `
"import { Show } from \\"solid-js\\";

function MyComponent(props: any) {
  return (
    <>
      <div>
        {props.name}
        {props.children}
        <Show when={props.name === \\"Batman\\"}>
          <MyComponent name=\\"Bruce\\">
            <div>Wayne</div>
          </MyComponent>
        </Show>
      </div>
    </>
  );
}

export default MyComponent;
"
`;

exports[`Solid > jsx > Typescript Test > showExpressions 1`] = `
"An identifier or keyword cannot immediately follow a numeric literal. (39:34)
  37 | <Show fallback={123} when={props.conditionA} >ContentF</Show>
  38 | <Show fallback={ContentF} when={props.conditionA} >123</Show>
> 39 | <Show fallback={<Show fallback={9mb} when={props.conditionB === 'Complete'} >20mb</Show>} when={props.conditionA === 'Default'} >4mb</Show>
     |                                  ^
  40 | <Show fallback={4mb} when={props.conditionA === 'Default'} ><Show fallback={9mb} when={props.conditionB === 'Complete'} >20mb</Show></Show></div>
  41 |
  42 |"
`;

exports[`Solid > jsx > Typescript Test > showExpressions 2`] = `
"An identifier or keyword cannot immediately follow a numeric literal. (39:34)
  37 | <Show fallback={123} when={props.conditionA} >ContentF</Show>
  38 | <Show fallback={ContentF} when={props.conditionA} >123</Show>
> 39 | <Show fallback={<Show fallback={9mb} when={props.conditionB === 'Complete'} >20mb</Show>} when={props.conditionA === 'Default'} >4mb</Show>
     |                                  ^
  40 | <Show fallback={4mb} when={props.conditionA === 'Default'} ><Show fallback={9mb} when={props.conditionB === 'Complete'} >20mb</Show></Show></div>
  41 |
  42 |"
`;

exports[`Solid > jsx > Typescript Test > showWithFor 1`] = `
"import { Show, For } from \\"solid-js\\";

interface Props {
  conditionA: boolean;
  items: string[];
}

function NestedShow(props: Props) {
  return (
    <>
      <Show fallback={<div>else-condition-A</div>} when={props.conditionA}>
        <For each={props.items}>
          {(item, _index) => {
            const idx = _index();
            return <div key={idx}>{item}</div>;
          }}
        </For>
      </Show>
    </>
  );
}

export default NestedShow;
"
`;

exports[`Solid > jsx > Typescript Test > showWithFor 2`] = `
"import { Show, For } from \\"solid-js\\";

interface Props {
  conditionA: boolean;
  items: string[];
}

function NestedShow(props: Props) {
  return (
    <>
      <Show fallback={<div>else-condition-A</div>} when={props.conditionA}>
        <For each={props.items}>
          {(item, _index) => {
            const idx = _index();
            return <div key={idx}>{item}</div>;
          }}
        </For>
      </Show>
    </>
  );
}

export default NestedShow;
"
`;

exports[`Solid > jsx > Typescript Test > showWithOtherValues 1`] = `
"import { Show } from \\"solid-js\\";

interface Props {
  conditionA: boolean;
}

function ShowWithOtherValues(props: Props) {
  return (
    <>
      <div>
        <Show when={props.conditionA}>ContentA</Show>
        <Show fallback={{ undefined }} when={props.conditionA}>
          ContentB
        </Show>
        <Show when={props.conditionA}>ContentC</Show>
        <Show when={props.conditionA}>ContentD</Show>
        <Show fallback={hello} when={props.conditionA}>
          ContentE
        </Show>
        <Show fallback={123} when={props.conditionA}>
          ContentF
        </Show>
      </div>
    </>
  );
}

export default ShowWithOtherValues;
"
`;

exports[`Solid > jsx > Typescript Test > showWithOtherValues 2`] = `
"import { Show } from \\"solid-js\\";

interface Props {
  conditionA: boolean;
}

function ShowWithOtherValues(props: Props) {
  return (
    <>
      <div>
        <Show when={props.conditionA}>ContentA</Show>
        <Show fallback={{ undefined }} when={props.conditionA}>
          ContentB
        </Show>
        <Show when={props.conditionA}>ContentC</Show>
        <Show when={props.conditionA}>ContentD</Show>
        <Show fallback={hello} when={props.conditionA}>
          ContentE
        </Show>
        <Show fallback={123} when={props.conditionA}>
          ContentF
        </Show>
      </div>
    </>
  );
}

export default ShowWithOtherValues;
"
`;

exports[`Solid > jsx > Typescript Test > showWithRootText 1`] = `
"import { Show } from \\"solid-js\\";

interface Props {
  conditionA: boolean;
}

function ShowRootText(props: Props) {
  return (
    <>
      <Show fallback={<div>else-condition-A</div>} when={props.conditionA}>
        ContentA
      </Show>
    </>
  );
}

export default ShowRootText;
"
`;

exports[`Solid > jsx > Typescript Test > showWithRootText 2`] = `
"import { Show } from \\"solid-js\\";

interface Props {
  conditionA: boolean;
}

function ShowRootText(props: Props) {
  return (
    <>
      <Show fallback={<div>else-condition-A</div>} when={props.conditionA}>
        ContentA
      </Show>
    </>
  );
}

export default ShowRootText;
"
`;

exports[`Solid > jsx > Typescript Test > signalsOnUpdate 1`] = `
"import { on, createEffect, createMemo } from \\"solid-js\\";

type Props = {
  id: string;
  foo: {
    bar: {
      baz: number;
    };
  };
};

function MyBasicComponent(props: Props) {
  const onUpdateFn_0_props_id = createMemo(() => props.id);
  const onUpdateFn_0_props_foo_bar_baz = createMemo(() => props.foo.bar.baz);
  function onUpdateFn_0() {
    console.log(\\"props.id changed\\", props.id);
    console.log(\\"props.foo.value.bar.baz changed\\", props.foo.bar.baz);
  }
  createEffect(
    on(
      () => [onUpdateFn_0_props_id(), onUpdateFn_0_props_foo_bar_baz()],
      onUpdateFn_0
    )
  );

  return (
    <>
      <div class=\\"test div-52492278\\">
        {props.id}
        {props.foo.bar.baz}
      </div>
      <style>{\`.div-52492278 {
  padding: 10px;
}\`}</style>
    </>
  );
}

export default MyBasicComponent;
"
`;

exports[`Solid > jsx > Typescript Test > signalsOnUpdate 2`] = `
"import { on, createEffect, createMemo } from \\"solid-js\\";

type Props = {
  id: string;
  foo: {
    bar: {
      baz: number;
    };
  };
};

function MyBasicComponent(props: Props) {
  const onUpdateFn_0_props_id = createMemo(() => props.id);
  const onUpdateFn_0_props_foo_bar_baz = createMemo(() => props.foo.bar.baz);
  function onUpdateFn_0() {
    console.log(\\"props.id changed\\", props.id);
    console.log(\\"props.foo.value.bar.baz changed\\", props.foo.bar.baz);
  }
  createEffect(
    on(
      () => [onUpdateFn_0_props_id(), onUpdateFn_0_props_foo_bar_baz()],
      onUpdateFn_0
    )
  );

  return (
    <>
      <div class=\\"test div-52492278\\">
        {props.id}
        {props.foo.bar.baz}
      </div>
      <style>{\`.div-52492278 {
  padding: 10px;
}\`}</style>
    </>
  );
}

export default MyBasicComponent;
"
`;

exports[`Solid > jsx > Typescript Test > spreadAttrs 1`] = `
"function MyBasicComponent(props: any) {
  return (
    <>
      <input {...attrs} />
    </>
  );
}

export default MyBasicComponent;
"
`;

exports[`Solid > jsx > Typescript Test > spreadAttrs 2`] = `
"function MyBasicComponent(props: any) {
  return (
    <>
      <input {...attrs} />
    </>
  );
}

export default MyBasicComponent;
"
`;

exports[`Solid > jsx > Typescript Test > spreadNestedProps 1`] = `
"function MyBasicComponent(props: any) {
  return (
    <>
      <input {...props.nested} />
    </>
  );
}

export default MyBasicComponent;
"
`;

exports[`Solid > jsx > Typescript Test > spreadNestedProps 2`] = `
"function MyBasicComponent(props: any) {
  return (
    <>
      <input {...props.nested} />
    </>
  );
}

export default MyBasicComponent;
"
`;

exports[`Solid > jsx > Typescript Test > spreadProps 1`] = `
"function MyBasicComponent(props: any) {
  return (
    <>
      <input {...props} />
    </>
  );
}

export default MyBasicComponent;
"
`;

exports[`Solid > jsx > Typescript Test > spreadProps 2`] = `
"function MyBasicComponent(props: any) {
  return (
    <>
      <input {...props} />
    </>
  );
}

export default MyBasicComponent;
"
`;

exports[`Solid > jsx > Typescript Test > string-literal-store 1`] = `
"import { createSignal, createMemo } from \\"solid-js\\";

function StringLiteralStore(props: any) {
  const [foo, setFoo] = createSignal(123);

  return (
    <>
      <div>{foo()}</div>
    </>
  );
}

export default StringLiteralStore;
"
`;

exports[`Solid > jsx > Typescript Test > string-literal-store 2`] = `
"import { createSignal, createMemo } from \\"solid-js\\";

function StringLiteralStore(props: any) {
  const [foo, setFoo] = createSignal(123);

  return (
    <>
      <div>{foo()}</div>
    </>
  );
}

export default StringLiteralStore;
"
`;

exports[`Solid > jsx > Typescript Test > styleClassAndCss 1`] = `
"function MyComponent(props: any) {
  return (
    <>
      <div
        class=\\"builder-column div-53ff897e\\"
        style={{
          width: \\"100%\\",
        }}
      ></div>
      <style>{\`.div-53ff897e {
  display: flex;
  flex-direction: column;
  align-items: stretch;
}\`}</style>
    </>
  );
}

export default MyComponent;
"
`;

exports[`Solid > jsx > Typescript Test > styleClassAndCss 2`] = `
"function MyComponent(props: any) {
  return (
    <>
      <div
        class=\\"builder-column div-53ff897e\\"
        style={{
          width: \\"100%\\",
        }}
      ></div>
      <style>{\`.div-53ff897e {
  display: flex;
  flex-direction: column;
  align-items: stretch;
}\`}</style>
    </>
  );
}

export default MyComponent;
"
`;

exports[`Solid > jsx > Typescript Test > stylePropClassAndCss 1`] = `
"function StylePropClassAndCss(props: any) {
  return (
    <>
      <div
        class={props.attributes.class + \\" div-40d76e28\\"}
        style={props.attributes.style}
      ></div>
      <style>{\`.div-40d76e28 {
  display: flex;
  flex-direction: column;
  align-items: stretch;
}\`}</style>
    </>
  );
}

export default StylePropClassAndCss;
"
`;

exports[`Solid > jsx > Typescript Test > stylePropClassAndCss 2`] = `
"function StylePropClassAndCss(props: any) {
  return (
    <>
      <div
        class={props.attributes.class + \\" div-40d76e28\\"}
        style={props.attributes.style}
      ></div>
      <style>{\`.div-40d76e28 {
  display: flex;
  flex-direction: column;
  align-items: stretch;
}\`}</style>
    </>
  );
}

export default StylePropClassAndCss;
"
`;

exports[`Solid > jsx > Typescript Test > subComponent 1`] = `
"import Foo from \\"./foo-sub-component\\";

function SubComponent(props: any) {
  return (
    <>
      <Foo></Foo>
    </>
  );
}

export default SubComponent;
"
`;

exports[`Solid > jsx > Typescript Test > subComponent 2`] = `
"import Foo from \\"./foo-sub-component\\";

function SubComponent(props: any) {
  return (
    <>
      <Foo></Foo>
    </>
  );
}

export default SubComponent;
"
`;

exports[`Solid > jsx > Typescript Test > svgComponent 1`] = `
"function SvgComponent(props: any) {
  return (
    <>
      <svg
        fill=\\"none\\"
        role=\\"img\\"
        viewBox={\\"0 0 \\" + 42 + \\" \\" + 42}
        width={42}
        height={42}
      >
        <defs>
          <filter id=\\"prefix__filter0_f\\" filterUnits=\\"userSpaceOnUse\\">
            <feFlood result=\\"BackgroundImageFix\\"></feFlood>
            <feBlend
              in=\\"SourceGraphic\\"
              in2=\\"BackgroundImageFix\\"
              result=\\"shape\\"
            ></feBlend>
            <feGaussianBlur
              result=\\"effect1_foregroundBlur\\"
              stdDeviation={7}
            ></feGaussianBlur>
          </filter>
        </defs>
      </svg>
    </>
  );
}

export default SvgComponent;
"
`;

exports[`Solid > jsx > Typescript Test > svgComponent 2`] = `
"function SvgComponent(props: any) {
  return (
    <>
      <svg
        fill=\\"none\\"
        role=\\"img\\"
        viewBox={\\"0 0 \\" + 42 + \\" \\" + 42}
        width={42}
        height={42}
      >
        <defs>
          <filter id=\\"prefix__filter0_f\\" filterUnits=\\"userSpaceOnUse\\">
            <feFlood result=\\"BackgroundImageFix\\"></feFlood>
            <feBlend
              in=\\"SourceGraphic\\"
              in2=\\"BackgroundImageFix\\"
              result=\\"shape\\"
            ></feBlend>
            <feGaussianBlur
              result=\\"effect1_foregroundBlur\\"
              stdDeviation={7}
            ></feGaussianBlur>
          </filter>
        </defs>
      </svg>
    </>
  );
}

export default SvgComponent;
"
`;

exports[`Solid > jsx > Typescript Test > typeDependency 1`] = `
"export type TypeDependencyProps = {
  foo: Foo;
  foo2: Foo2;
};

import type { Foo } from \\"./foo-type\\";
import type { Foo as Foo2 } from \\"./type-export\\";

function TypeDependency(props: TypeDependencyProps) {
  return (
    <>
      <div>{props.foo}</div>
    </>
  );
}

export default TypeDependency;
"
`;

exports[`Solid > jsx > Typescript Test > typeDependency 2`] = `
"export type TypeDependencyProps = {
  foo: Foo;
  foo2: Foo2;
};

import type { Foo } from \\"./foo-type\\";
import type { Foo as Foo2 } from \\"./type-export\\";

function TypeDependency(props: TypeDependencyProps) {
  return (
    <>
      <div>{props.foo}</div>
    </>
  );
}

export default TypeDependency;
"
`;

exports[`Solid > jsx > Typescript Test > use-style 1`] = `
"function MyComponent(props: any) {
  return (
    <>
      <button type=\\"button\\">Button</button>
      <style>{\`
        button {
            background: blue;
            color: white;
            font-size: 12px;
            outline: 1px solid black;
        }

\`}</style>
    </>
  );
}

export default MyComponent;
"
`;

exports[`Solid > jsx > Typescript Test > use-style 2`] = `
"function MyComponent(props: any) {
  return (
    <>
      <button type=\\"button\\">Button</button>
      <style>{\`
        button {
            background: blue;
            color: white;
            font-size: 12px;
            outline: 1px solid black;
        }

\`}</style>
    </>
  );
}

export default MyComponent;
"
`;

exports[`Solid > jsx > Typescript Test > use-style-and-css 1`] = `
"function MyComponent(props: any) {
  return (
    <>
      <button class=\\"button-11144e0c\\" type=\\"button\\">
        Button
      </button>
      <style>{\`
        button {
            font-size: 12px;
            outline: 1px solid black;
        }

.button-11144e0c {
  background: blue;
  color: white;
}\`}</style>
    </>
  );
}

export default MyComponent;
"
`;

exports[`Solid > jsx > Typescript Test > use-style-and-css 2`] = `
"function MyComponent(props: any) {
  return (
    <>
      <button class=\\"button-11144e0c\\" type=\\"button\\">
        Button
      </button>
      <style>{\`
        button {
            font-size: 12px;
            outline: 1px solid black;
        }

.button-11144e0c {
  background: blue;
  color: white;
}\`}</style>
    </>
  );
}

export default MyComponent;
"
`;

exports[`Solid > jsx > Typescript Test > use-style-outside-component 1`] = `
"function MyComponent(props: any) {
  return (
    <>
      <button type=\\"button\\">Button</button>
      <style>{\`
  button {
      background: blue;
      color: white;
      font-size: 12px;
      outline: 1px solid black;
  }

\`}</style>
    </>
  );
}

export default MyComponent;
"
`;

exports[`Solid > jsx > Typescript Test > use-style-outside-component 2`] = `
"function MyComponent(props: any) {
  return (
    <>
      <button type=\\"button\\">Button</button>
      <style>{\`
  button {
      background: blue;
      color: white;
      font-size: 12px;
      outline: 1px solid black;
  }

\`}</style>
    </>
  );
}

export default MyComponent;
"
`;

exports[`Solid > jsx > Typescript Test > useTarget 1`] = `
"import { onMount, createSignal, createMemo } from \\"solid-js\\";

function UseTargetComponent(props: any) {
  const [lastName, setLastName] = createSignal(\\"bar\\");

  const name = createMemo(() => {
    const prefix = \\"so\\";
    return prefix + \\"foo\\";
  });

  onMount(() => {});

  return (
    <>
      <div>{name()}</div>
    </>
  );
}

export default UseTargetComponent;
"
`;

exports[`Solid > jsx > Typescript Test > useTarget 2`] = `
"import { onMount, createSignal, createMemo } from \\"solid-js\\";

function UseTargetComponent(props: any) {
  const [lastName, setLastName] = createSignal(\\"bar\\");

  const name = createMemo(() => {
    const prefix = \\"so\\";
    return prefix + \\"foo\\";
  });

  onMount(() => {});

  return (
    <>
      <div>{name()}</div>
    </>
  );
}

export default UseTargetComponent;
"
`;

exports[`Solid > jsx > Typescript Test > webComponent 1`] = `
"import { register } from \\"swiper/element/bundle\\";

function MyBasicWebComponent(props: any) {
  register();

  return (
    <>
      <swiper-container slides-per-view=\\"3\\" navigation=\\"true\\" pagination=\\"true\\">
        <swiper-slide>Slide 1</swiper-slide>
        <swiper-slide>Slide 2</swiper-slide>
        <swiper-slide>Slide 3</swiper-slide>
      </swiper-container>
    </>
  );
}

export default MyBasicWebComponent;
"
`;

exports[`Solid > jsx > Typescript Test > webComponent 2`] = `
"import { register } from \\"swiper/element/bundle\\";

function MyBasicWebComponent(props: any) {
  register();

  return (
    <>
      <swiper-container slides-per-view=\\"3\\" navigation=\\"true\\" pagination=\\"true\\">
        <swiper-slide>Slide 1</swiper-slide>
        <swiper-slide>Slide 2</swiper-slide>
        <swiper-slide>Slide 3</swiper-slide>
      </swiper-container>
    </>
  );
}

export default MyBasicWebComponent;
"
`;

exports[`Solid > svelte > Javascript Test > basic 1`] = `
"import { createSignal, createMemo } from \\"solid-js\\";

function MyComponent(props) {
  const [name, setName] = createSignal(\\"Steve\\");

  return (
    <>
      <div>
        <input
          onInput={(event) => setName(event.target.value)}
          value={name()}
        />
        Hello! I can run in React, Vue, Solid, or Liquid!
      </div>
    </>
  );
}

export default MyComponent;
"
`;

exports[`Solid > svelte > Javascript Test > basic 2`] = `
"import { createSignal, createMemo } from \\"solid-js\\";

function MyComponent(props) {
  const [name, setName] = createSignal(\\"Steve\\");

  return (
    <>
      <div>
        <input
          onInput={(event) => setName(event.target.value)}
          value={name()}
        />
        Hello! I can run in React, Vue, Solid, or Liquid!
      </div>
    </>
  );
}

export default MyComponent;
"
`;

exports[`Solid > svelte > Javascript Test > bindGroup 1`] = `
"import { createSignal, createMemo } from \\"solid-js\\";

function MyComponent(props) {
  const [tortilla, setTortilla] = createSignal(\\"Plain\\");

  const [fillings, setFillings] = createSignal([]);

  return (
    <>
      <div>
        <input
          type=\\"radio\\"
          value=\\"Plain\\"
          checked={tortilla() === \\"Plain\\"}
          onInput={(event) => setTortilla(event.target.value)}
        />
        <input
          type=\\"radio\\"
          value=\\"Whole wheat\\"
          checked={tortilla() === \\"Whole wheat\\"}
          onInput={(event) => setTortilla(event.target.value)}
        />
        <input
          type=\\"radio\\"
          value=\\"Spinach\\"
          checked={tortilla() === \\"Spinach\\"}
          onInput={(event) => setTortilla(event.target.value)}
        />
        <br />
        <br />
        <input
          type=\\"checkbox\\"
          value=\\"Rice\\"
          checked={fillings() === \\"Rice\\"}
          onInput={(event) => setFillings(event.target.value)}
        />
        <input
          type=\\"checkbox\\"
          value=\\"Beans\\"
          checked={fillings() === \\"Beans\\"}
          onInput={(event) => setFillings(event.target.value)}
        />
        <input
          type=\\"checkbox\\"
          value=\\"Cheese\\"
          checked={fillings() === \\"Cheese\\"}
          onInput={(event) => setFillings(event.target.value)}
        />
        <input
          type=\\"checkbox\\"
          value=\\"Guac (extra)\\"
          checked={fillings() === \\"Guac (extra)\\"}
          onInput={(event) => setFillings(event.target.value)}
        />
        <p>
          Tortilla:
          {tortilla()}
        </p>
        <p>
          Fillings:
          {fillings()}
        </p>
      </div>
    </>
  );
}

export default MyComponent;
"
`;

exports[`Solid > svelte > Javascript Test > bindGroup 2`] = `
"import { createSignal, createMemo } from \\"solid-js\\";

function MyComponent(props) {
  const [tortilla, setTortilla] = createSignal(\\"Plain\\");

  const [fillings, setFillings] = createSignal([]);

  return (
    <>
      <div>
        <input
          type=\\"radio\\"
          value=\\"Plain\\"
          checked={tortilla() === \\"Plain\\"}
          onInput={(event) => setTortilla(event.target.value)}
        />
        <input
          type=\\"radio\\"
          value=\\"Whole wheat\\"
          checked={tortilla() === \\"Whole wheat\\"}
          onInput={(event) => setTortilla(event.target.value)}
        />
        <input
          type=\\"radio\\"
          value=\\"Spinach\\"
          checked={tortilla() === \\"Spinach\\"}
          onInput={(event) => setTortilla(event.target.value)}
        />
        <br />
        <br />
        <input
          type=\\"checkbox\\"
          value=\\"Rice\\"
          checked={fillings() === \\"Rice\\"}
          onInput={(event) => setFillings(event.target.value)}
        />
        <input
          type=\\"checkbox\\"
          value=\\"Beans\\"
          checked={fillings() === \\"Beans\\"}
          onInput={(event) => setFillings(event.target.value)}
        />
        <input
          type=\\"checkbox\\"
          value=\\"Cheese\\"
          checked={fillings() === \\"Cheese\\"}
          onInput={(event) => setFillings(event.target.value)}
        />
        <input
          type=\\"checkbox\\"
          value=\\"Guac (extra)\\"
          checked={fillings() === \\"Guac (extra)\\"}
          onInput={(event) => setFillings(event.target.value)}
        />
        <p>
          Tortilla:
          {tortilla()}
        </p>
        <p>
          Fillings:
          {fillings()}
        </p>
      </div>
    </>
  );
}

export default MyComponent;
"
`;

exports[`Solid > svelte > Javascript Test > bindProperty 1`] = `
"import { createSignal, createMemo } from \\"solid-js\\";

function MyComponent(props) {
  const [value, setValue] = createSignal(\\"hello\\");

  return (
    <>
      <input value={value()} />
    </>
  );
}

export default MyComponent;
"
`;

exports[`Solid > svelte > Javascript Test > bindProperty 2`] = `
"import { createSignal, createMemo } from \\"solid-js\\";

function MyComponent(props) {
  const [value, setValue] = createSignal(\\"hello\\");

  return (
    <>
      <input value={value()} />
    </>
  );
}

export default MyComponent;
"
`;

exports[`Solid > svelte > Javascript Test > classDirective 1`] = `
"import { createSignal, createMemo } from \\"solid-js\\";

function MyComponent(props) {
  const [focus, setFocus] = createSignal(true);

  return (
    <>
      <input
        class={\`form-input \${props.disabled ? \\"disabled\\" : \\"\\"} \${
          focus() ? \\"focus\\" : \\"\\"
        }\`}
      />
    </>
  );
}

export default MyComponent;
"
`;

exports[`Solid > svelte > Javascript Test > classDirective 2`] = `
"import { createSignal, createMemo } from \\"solid-js\\";

function MyComponent(props) {
  const [focus, setFocus] = createSignal(true);

  return (
    <>
      <input
        class={\`form-input \${props.disabled ? \\"disabled\\" : \\"\\"} \${
          focus() ? \\"focus\\" : \\"\\"
        }\`}
      />
    </>
  );
}

export default MyComponent;
"
`;

exports[`Solid > svelte > Javascript Test > context 1`] = `
"Identifier expected. (29:8)
  27 |
  28 |     return (<>
> 29 |       <'activeTab'.Provider  value={activeTab()} ><div >{activeTab()}</div></'activeTab'.Provider>
     |        ^
  30 |
  31 |
  32 |       </>)"
`;

exports[`Solid > svelte > Javascript Test > context 2`] = `
"Identifier expected. (29:8)
  27 |
  28 |     return (<>
> 29 |       <'activeTab'.Provider  value={activeTab()} ><div >{activeTab()}</div></'activeTab'.Provider>
     |        ^
  30 |
  31 |
  32 |       </>)"
`;

exports[`Solid > svelte > Javascript Test > each 1`] = `
"import { For, createSignal, createMemo } from \\"solid-js\\";

function MyComponent(props) {
  const [numbers, setNumbers] = createSignal([\\"one\\", \\"two\\", \\"three\\"]);

  return (
    <>
      <ul>
        <For each={numbers()}>
          {(num, _index) => {
            const index = _index();
            return <li>{num}</li>;
          }}
        </For>
      </ul>
    </>
  );
}

export default MyComponent;
"
`;

exports[`Solid > svelte > Javascript Test > each 2`] = `
"import { For, createSignal, createMemo } from \\"solid-js\\";

function MyComponent(props) {
  const [numbers, setNumbers] = createSignal([\\"one\\", \\"two\\", \\"three\\"]);

  return (
    <>
      <ul>
        <For each={numbers()}>
          {(num, _index) => {
            const index = _index();
            return <li>{num}</li>;
          }}
        </For>
      </ul>
    </>
  );
}

export default MyComponent;
"
`;

exports[`Solid > svelte > Javascript Test > eventHandlers 1`] = `
"import { createSignal, createMemo } from \\"solid-js\\";

function MyComponent(props) {
  function log(msg = \\"hello\\") {
    console.log(msg);
  }

  return (
    <>
      <div>
        <button onClick={(a) => log(\\"hi\\")}>Log</button>
        <button onClick={(event) => log(event)}>Log</button>
        <button onClick={(event) => log(event)}>Log</button>
      </div>
    </>
  );
}

export default MyComponent;
"
`;

exports[`Solid > svelte > Javascript Test > eventHandlers 2`] = `
"import { createSignal, createMemo } from \\"solid-js\\";

function MyComponent(props) {
  function log(msg = \\"hello\\") {
    console.log(msg);
  }

  return (
    <>
      <div>
        <button onClick={(a) => log(\\"hi\\")}>Log</button>
        <button onClick={(event) => log(event)}>Log</button>
        <button onClick={(event) => log(event)}>Log</button>
      </div>
    </>
  );
}

export default MyComponent;
"
`;

exports[`Solid > svelte > Javascript Test > html 1`] = `
"import { createSignal, createMemo } from \\"solid-js\\";

function MyComponent(props) {
  const [html, setHtml] = createSignal(\\"<b>bold</b>\\");

  return (
    <>
      <div innerHTML={html()}></div>
    </>
  );
}

export default MyComponent;
"
`;

exports[`Solid > svelte > Javascript Test > html 2`] = `
"import { createSignal, createMemo } from \\"solid-js\\";

function MyComponent(props) {
  const [html, setHtml] = createSignal(\\"<b>bold</b>\\");

  return (
    <>
      <div innerHTML={html()}></div>
    </>
  );
}

export default MyComponent;
"
`;

exports[`Solid > svelte > Javascript Test > ifElse 1`] = `
"import { Show, createSignal, createMemo } from \\"solid-js\\";

function MyComponent(props) {
  const [show, setShow] = createSignal(true);

  function toggle() {
    setShow(!show());
  }

  return (
    <>
      <Show
        fallback={<button onClick={(event) => toggle(event)}> Show </button>}
        when={show()}
      >
        <button onClick={(event) => toggle(event)}> Hide </button>
      </Show>
    </>
  );
}

export default MyComponent;
"
`;

exports[`Solid > svelte > Javascript Test > ifElse 2`] = `
"import { Show, createSignal, createMemo } from \\"solid-js\\";

function MyComponent(props) {
  const [show, setShow] = createSignal(true);

  function toggle() {
    setShow(!show());
  }

  return (
    <>
      <Show
        fallback={<button onClick={(event) => toggle(event)}> Show </button>}
        when={show()}
      >
        <button onClick={(event) => toggle(event)}> Hide </button>
      </Show>
    </>
  );
}

export default MyComponent;
"
`;

exports[`Solid > svelte > Javascript Test > imports 1`] = `
"import { createSignal, createMemo } from \\"solid-js\\";

import Button from \\"./Button\\";

function MyComponent(props) {
  const [disabled, setDisabled] = createSignal(false);

  return (
    <>
      <div>
        <Button type=\\"button\\" disabled={disabled()}>
          <Slot></Slot>
        </Button>
      </div>
    </>
  );
}

export default MyComponent;
"
`;

exports[`Solid > svelte > Javascript Test > imports 2`] = `
"import { createSignal, createMemo } from \\"solid-js\\";

import Button from \\"./Button\\";

function MyComponent(props) {
  const [disabled, setDisabled] = createSignal(false);

  return (
    <>
      <div>
        <Button type=\\"button\\" disabled={disabled()}>
          <Slot></Slot>
        </Button>
      </div>
    </>
  );
}

export default MyComponent;
"
`;

exports[`Solid > svelte > Javascript Test > lifecycleHooks 1`] = `
"import { onMount, on, createEffect, createMemo } from \\"solid-js\\";

function MyComponent(props) {
  onMount(() => {
    console.log(\\"onMount\\");
  });

  return (
    <>
      <div></div>
    </>
  );
}

export default MyComponent;
"
`;

exports[`Solid > svelte > Javascript Test > lifecycleHooks 2`] = `
"import { onMount, on, createEffect, createMemo } from \\"solid-js\\";

function MyComponent(props) {
  onMount(() => {
    console.log(\\"onMount\\");
  });

  return (
    <>
      <div></div>
    </>
  );
}

export default MyComponent;
"
`;

exports[`Solid > svelte > Javascript Test > reactive 1`] = `
"import { createSignal, createMemo } from \\"solid-js\\";

function MyComponent(props) {
  const [name, setName] = createSignal(\\"Steve\\");

  const lowercaseName = createMemo(() => {
    return name().toLowerCase();
  });

  return (
    <>
      <div>
        <input value={name()} />
        Lowercase:
        {lowercaseName()}
      </div>
    </>
  );
}

export default MyComponent;
"
`;

exports[`Solid > svelte > Javascript Test > reactive 2`] = `
"import { createSignal, createMemo } from \\"solid-js\\";

function MyComponent(props) {
  const [name, setName] = createSignal(\\"Steve\\");

  const lowercaseName = createMemo(() => {
    return name().toLowerCase();
  });

  return (
    <>
      <div>
        <input value={name()} />
        Lowercase:
        {lowercaseName()}
      </div>
    </>
  );
}

export default MyComponent;
"
`;

exports[`Solid > svelte > Javascript Test > reactiveWithFn 1`] = `
"import { on, createEffect, createMemo, createSignal } from \\"solid-js\\";

function MyComponent(props) {
  const [a, setA] = createSignal(2);

  const [b, setB] = createSignal(5);

  const [result, setResult] = createSignal(null);

  function calculateResult(a_, b_) {
    setResult(a_ * b_);
  }

  const onUpdateFn_0_a__ = createMemo(() => a());
  const onUpdateFn_0_b__ = createMemo(() => b());
  function onUpdateFn_0() {
    calculateResult(a(), b());
  }
  createEffect(
    on(() => [onUpdateFn_0_a__(), onUpdateFn_0_b__()], onUpdateFn_0)
  );

  return (
    <>
      <div>
        <input
          type=\\"number\\"
          onInput={(event) => setA(event.target.value)}
          value={a()}
        />
        <input
          type=\\"number\\"
          onInput={(event) => setB(event.target.value)}
          value={b()}
        />
        Result:
        {result()}
      </div>
    </>
  );
}

export default MyComponent;
"
`;

exports[`Solid > svelte > Javascript Test > reactiveWithFn 2`] = `
"import { on, createEffect, createMemo, createSignal } from \\"solid-js\\";

function MyComponent(props) {
  const [a, setA] = createSignal(2);

  const [b, setB] = createSignal(5);

  const [result, setResult] = createSignal(null);

  function calculateResult(a_, b_) {
    setResult(a_ * b_);
  }

  const onUpdateFn_0_a__ = createMemo(() => a());
  const onUpdateFn_0_b__ = createMemo(() => b());
  function onUpdateFn_0() {
    calculateResult(a(), b());
  }
  createEffect(
    on(() => [onUpdateFn_0_a__(), onUpdateFn_0_b__()], onUpdateFn_0)
  );

  return (
    <>
      <div>
        <input
          type=\\"number\\"
          onInput={(event) => setA(event.target.value)}
          value={a()}
        />
        <input
          type=\\"number\\"
          onInput={(event) => setB(event.target.value)}
          value={b()}
        />
        Result:
        {result()}
      </div>
    </>
  );
}

export default MyComponent;
"
`;

exports[`Solid > svelte > Javascript Test > slots 1`] = `
"function MyComponent(props) {
  return (
    <>
      <div>
        <Slot>default</Slot>
        <Slot name=\\"Test\\">
          <div>default</div>
        </Slot>
      </div>
    </>
  );
}

export default MyComponent;
"
`;

exports[`Solid > svelte > Javascript Test > slots 2`] = `
"function MyComponent(props) {
  return (
    <>
      <div>
        <Slot>default</Slot>
        <Slot name=\\"Test\\">
          <div>default</div>
        </Slot>
      </div>
    </>
  );
}

export default MyComponent;
"
`;

exports[`Solid > svelte > Javascript Test > style 1`] = `
"function MyComponent(props) {
  return (
    <>
      <input class=\\"form-input\\" />
      <style>{\`
  input {
    color: red;
    font-size: 12px;
  }

  .form-input:focus {
    outline: 1px solid blue;
  }

\`}</style>
    </>
  );
}

export default MyComponent;
"
`;

exports[`Solid > svelte > Javascript Test > style 2`] = `
"function MyComponent(props) {
  return (
    <>
      <input class=\\"form-input\\" />
      <style>{\`
  input {
    color: red;
    font-size: 12px;
  }

  .form-input:focus {
    outline: 1px solid blue;
  }

\`}</style>
    </>
  );
}

export default MyComponent;
"
`;

exports[`Solid > svelte > Javascript Test > textExpressions 1`] = `
"import { createSignal, createMemo } from \\"solid-js\\";

function MyComponent(props) {
  const [a, setA] = createSignal(5);

  const [b, setB] = createSignal(12);

  return (
    <>
      <div>
        normal:
        {a() + b()}
        <br />
        conditional
        {a() > 2 ? \\"hello\\" : \\"bye\\"}
      </div>
    </>
  );
}

export default MyComponent;
"
`;

exports[`Solid > svelte > Javascript Test > textExpressions 2`] = `
"import { createSignal, createMemo } from \\"solid-js\\";

function MyComponent(props) {
  const [a, setA] = createSignal(5);

  const [b, setB] = createSignal(12);

  return (
    <>
      <div>
        normal:
        {a() + b()}
        <br />
        conditional
        {a() > 2 ? \\"hello\\" : \\"bye\\"}
      </div>
    </>
  );
}

export default MyComponent;
"
`;

exports[`Solid > svelte > Typescript Test > basic 1`] = `
"import { createSignal, createMemo } from \\"solid-js\\";

function MyComponent(props: any) {
  const [name, setName] = createSignal(\\"Steve\\");

  return (
    <>
      <div>
        <input
          onInput={(event) => setName(event.target.value)}
          value={name()}
        />
        Hello! I can run in React, Vue, Solid, or Liquid!
      </div>
    </>
  );
}

export default MyComponent;
"
`;

exports[`Solid > svelte > Typescript Test > basic 2`] = `
"import { createSignal, createMemo } from \\"solid-js\\";

function MyComponent(props: any) {
  const [name, setName] = createSignal(\\"Steve\\");

  return (
    <>
      <div>
        <input
          onInput={(event) => setName(event.target.value)}
          value={name()}
        />
        Hello! I can run in React, Vue, Solid, or Liquid!
      </div>
    </>
  );
}

export default MyComponent;
"
`;

exports[`Solid > svelte > Typescript Test > bindGroup 1`] = `
"import { createSignal, createMemo } from \\"solid-js\\";

function MyComponent(props: any) {
  const [tortilla, setTortilla] = createSignal(\\"Plain\\");

  const [fillings, setFillings] = createSignal([]);

  return (
    <>
      <div>
        <input
          type=\\"radio\\"
          value=\\"Plain\\"
          checked={tortilla() === \\"Plain\\"}
          onInput={(event) => setTortilla(event.target.value)}
        />
        <input
          type=\\"radio\\"
          value=\\"Whole wheat\\"
          checked={tortilla() === \\"Whole wheat\\"}
          onInput={(event) => setTortilla(event.target.value)}
        />
        <input
          type=\\"radio\\"
          value=\\"Spinach\\"
          checked={tortilla() === \\"Spinach\\"}
          onInput={(event) => setTortilla(event.target.value)}
        />
        <br />
        <br />
        <input
          type=\\"checkbox\\"
          value=\\"Rice\\"
          checked={fillings() === \\"Rice\\"}
          onInput={(event) => setFillings(event.target.value)}
        />
        <input
          type=\\"checkbox\\"
          value=\\"Beans\\"
          checked={fillings() === \\"Beans\\"}
          onInput={(event) => setFillings(event.target.value)}
        />
        <input
          type=\\"checkbox\\"
          value=\\"Cheese\\"
          checked={fillings() === \\"Cheese\\"}
          onInput={(event) => setFillings(event.target.value)}
        />
        <input
          type=\\"checkbox\\"
          value=\\"Guac (extra)\\"
          checked={fillings() === \\"Guac (extra)\\"}
          onInput={(event) => setFillings(event.target.value)}
        />
        <p>
          Tortilla:
          {tortilla()}
        </p>
        <p>
          Fillings:
          {fillings()}
        </p>
      </div>
    </>
  );
}

export default MyComponent;
"
`;

exports[`Solid > svelte > Typescript Test > bindGroup 2`] = `
"import { createSignal, createMemo } from \\"solid-js\\";

function MyComponent(props: any) {
  const [tortilla, setTortilla] = createSignal(\\"Plain\\");

  const [fillings, setFillings] = createSignal([]);

  return (
    <>
      <div>
        <input
          type=\\"radio\\"
          value=\\"Plain\\"
          checked={tortilla() === \\"Plain\\"}
          onInput={(event) => setTortilla(event.target.value)}
        />
        <input
          type=\\"radio\\"
          value=\\"Whole wheat\\"
          checked={tortilla() === \\"Whole wheat\\"}
          onInput={(event) => setTortilla(event.target.value)}
        />
        <input
          type=\\"radio\\"
          value=\\"Spinach\\"
          checked={tortilla() === \\"Spinach\\"}
          onInput={(event) => setTortilla(event.target.value)}
        />
        <br />
        <br />
        <input
          type=\\"checkbox\\"
          value=\\"Rice\\"
          checked={fillings() === \\"Rice\\"}
          onInput={(event) => setFillings(event.target.value)}
        />
        <input
          type=\\"checkbox\\"
          value=\\"Beans\\"
          checked={fillings() === \\"Beans\\"}
          onInput={(event) => setFillings(event.target.value)}
        />
        <input
          type=\\"checkbox\\"
          value=\\"Cheese\\"
          checked={fillings() === \\"Cheese\\"}
          onInput={(event) => setFillings(event.target.value)}
        />
        <input
          type=\\"checkbox\\"
          value=\\"Guac (extra)\\"
          checked={fillings() === \\"Guac (extra)\\"}
          onInput={(event) => setFillings(event.target.value)}
        />
        <p>
          Tortilla:
          {tortilla()}
        </p>
        <p>
          Fillings:
          {fillings()}
        </p>
      </div>
    </>
  );
}

export default MyComponent;
"
`;

exports[`Solid > svelte > Typescript Test > bindProperty 1`] = `
"import { createSignal, createMemo } from \\"solid-js\\";

function MyComponent(props: any) {
  const [value, setValue] = createSignal(\\"hello\\");

  return (
    <>
      <input value={value()} />
    </>
  );
}

export default MyComponent;
"
`;

exports[`Solid > svelte > Typescript Test > bindProperty 2`] = `
"import { createSignal, createMemo } from \\"solid-js\\";

function MyComponent(props: any) {
  const [value, setValue] = createSignal(\\"hello\\");

  return (
    <>
      <input value={value()} />
    </>
  );
}

export default MyComponent;
"
`;

exports[`Solid > svelte > Typescript Test > classDirective 1`] = `
"import { createSignal, createMemo } from \\"solid-js\\";

function MyComponent(props: any) {
  const [focus, setFocus] = createSignal(true);

  return (
    <>
      <input
        class={\`form-input \${props.disabled ? \\"disabled\\" : \\"\\"} \${
          focus() ? \\"focus\\" : \\"\\"
        }\`}
      />
    </>
  );
}

export default MyComponent;
"
`;

exports[`Solid > svelte > Typescript Test > classDirective 2`] = `
"import { createSignal, createMemo } from \\"solid-js\\";

function MyComponent(props: any) {
  const [focus, setFocus] = createSignal(true);

  return (
    <>
      <input
        class={\`form-input \${props.disabled ? \\"disabled\\" : \\"\\"} \${
          focus() ? \\"focus\\" : \\"\\"
        }\`}
      />
    </>
  );
}

export default MyComponent;
"
`;

exports[`Solid > svelte > Typescript Test > context 1`] = `
"Identifier expected. (29:8)
  27 |
  28 |     return (<>
> 29 |       <'activeTab'.Provider  value={activeTab()} ><div >{activeTab()}</div></'activeTab'.Provider>
     |        ^
  30 |
  31 |
  32 |       </>)"
`;

exports[`Solid > svelte > Typescript Test > context 2`] = `
"Identifier expected. (29:8)
  27 |
  28 |     return (<>
> 29 |       <'activeTab'.Provider  value={activeTab()} ><div >{activeTab()}</div></'activeTab'.Provider>
     |        ^
  30 |
  31 |
  32 |       </>)"
`;

exports[`Solid > svelte > Typescript Test > each 1`] = `
"import { For, createSignal, createMemo } from \\"solid-js\\";

function MyComponent(props: any) {
  const [numbers, setNumbers] = createSignal([\\"one\\", \\"two\\", \\"three\\"]);

  return (
    <>
      <ul>
        <For each={numbers()}>
          {(num, _index) => {
            const index = _index();
            return <li>{num}</li>;
          }}
        </For>
      </ul>
    </>
  );
}

export default MyComponent;
"
`;

exports[`Solid > svelte > Typescript Test > each 2`] = `
"import { For, createSignal, createMemo } from \\"solid-js\\";

function MyComponent(props: any) {
  const [numbers, setNumbers] = createSignal([\\"one\\", \\"two\\", \\"three\\"]);

  return (
    <>
      <ul>
        <For each={numbers()}>
          {(num, _index) => {
            const index = _index();
            return <li>{num}</li>;
          }}
        </For>
      </ul>
    </>
  );
}

export default MyComponent;
"
`;

exports[`Solid > svelte > Typescript Test > eventHandlers 1`] = `
"import { createSignal, createMemo } from \\"solid-js\\";

function MyComponent(props: any) {
  function log(msg = \\"hello\\") {
    console.log(msg);
  }

  return (
    <>
      <div>
        <button onClick={(a) => log(\\"hi\\")}>Log</button>
        <button onClick={(event) => log(event)}>Log</button>
        <button onClick={(event) => log(event)}>Log</button>
      </div>
    </>
  );
}

export default MyComponent;
"
`;

exports[`Solid > svelte > Typescript Test > eventHandlers 2`] = `
"import { createSignal, createMemo } from \\"solid-js\\";

function MyComponent(props: any) {
  function log(msg = \\"hello\\") {
    console.log(msg);
  }

  return (
    <>
      <div>
        <button onClick={(a) => log(\\"hi\\")}>Log</button>
        <button onClick={(event) => log(event)}>Log</button>
        <button onClick={(event) => log(event)}>Log</button>
      </div>
    </>
  );
}

export default MyComponent;
"
`;

exports[`Solid > svelte > Typescript Test > html 1`] = `
"import { createSignal, createMemo } from \\"solid-js\\";

function MyComponent(props: any) {
  const [html, setHtml] = createSignal(\\"<b>bold</b>\\");

  return (
    <>
      <div innerHTML={html()}></div>
    </>
  );
}

export default MyComponent;
"
`;

exports[`Solid > svelte > Typescript Test > html 2`] = `
"import { createSignal, createMemo } from \\"solid-js\\";

function MyComponent(props: any) {
  const [html, setHtml] = createSignal(\\"<b>bold</b>\\");

  return (
    <>
      <div innerHTML={html()}></div>
    </>
  );
}

export default MyComponent;
"
`;

exports[`Solid > svelte > Typescript Test > ifElse 1`] = `
"import { Show, createSignal, createMemo } from \\"solid-js\\";

function MyComponent(props: any) {
  const [show, setShow] = createSignal(true);

  function toggle() {
    setShow(!show());
  }

  return (
    <>
      <Show
        fallback={<button onClick={(event) => toggle(event)}> Show </button>}
        when={show()}
      >
        <button onClick={(event) => toggle(event)}> Hide </button>
      </Show>
    </>
  );
}

export default MyComponent;
"
`;

exports[`Solid > svelte > Typescript Test > ifElse 2`] = `
"import { Show, createSignal, createMemo } from \\"solid-js\\";

function MyComponent(props: any) {
  const [show, setShow] = createSignal(true);

  function toggle() {
    setShow(!show());
  }

  return (
    <>
      <Show
        fallback={<button onClick={(event) => toggle(event)}> Show </button>}
        when={show()}
      >
        <button onClick={(event) => toggle(event)}> Hide </button>
      </Show>
    </>
  );
}

export default MyComponent;
"
`;

exports[`Solid > svelte > Typescript Test > imports 1`] = `
"import { createSignal, createMemo } from \\"solid-js\\";

import Button from \\"./Button\\";

function MyComponent(props: any) {
  const [disabled, setDisabled] = createSignal(false);

  return (
    <>
      <div>
        <Button type=\\"button\\" disabled={disabled()}>
          <Slot></Slot>
        </Button>
      </div>
    </>
  );
}

export default MyComponent;
"
`;

exports[`Solid > svelte > Typescript Test > imports 2`] = `
"import { createSignal, createMemo } from \\"solid-js\\";

import Button from \\"./Button\\";

function MyComponent(props: any) {
  const [disabled, setDisabled] = createSignal(false);

  return (
    <>
      <div>
        <Button type=\\"button\\" disabled={disabled()}>
          <Slot></Slot>
        </Button>
      </div>
    </>
  );
}

export default MyComponent;
"
`;

exports[`Solid > svelte > Typescript Test > lifecycleHooks 1`] = `
"import { onMount, on, createEffect, createMemo } from \\"solid-js\\";

function MyComponent(props: any) {
  onMount(() => {
    console.log(\\"onMount\\");
  });

  return (
    <>
      <div></div>
    </>
  );
}

export default MyComponent;
"
`;

exports[`Solid > svelte > Typescript Test > lifecycleHooks 2`] = `
"import { onMount, on, createEffect, createMemo } from \\"solid-js\\";

function MyComponent(props: any) {
  onMount(() => {
    console.log(\\"onMount\\");
  });

  return (
    <>
      <div></div>
    </>
  );
}

export default MyComponent;
"
`;

exports[`Solid > svelte > Typescript Test > reactive 1`] = `
"import { createSignal, createMemo } from \\"solid-js\\";

function MyComponent(props: any) {
  const [name, setName] = createSignal(\\"Steve\\");

  const lowercaseName = createMemo(() => {
    return name().toLowerCase();
  });

  return (
    <>
      <div>
        <input value={name()} />
        Lowercase:
        {lowercaseName()}
      </div>
    </>
  );
}

export default MyComponent;
"
`;

exports[`Solid > svelte > Typescript Test > reactive 2`] = `
"import { createSignal, createMemo } from \\"solid-js\\";

function MyComponent(props: any) {
  const [name, setName] = createSignal(\\"Steve\\");

  const lowercaseName = createMemo(() => {
    return name().toLowerCase();
  });

  return (
    <>
      <div>
        <input value={name()} />
        Lowercase:
        {lowercaseName()}
      </div>
    </>
  );
}

export default MyComponent;
"
`;

exports[`Solid > svelte > Typescript Test > reactiveWithFn 1`] = `
"import { on, createEffect, createMemo, createSignal } from \\"solid-js\\";

function MyComponent(props: any) {
  const [a, setA] = createSignal(2);

  const [b, setB] = createSignal(5);

  const [result, setResult] = createSignal(null);

  function calculateResult(a_, b_) {
    setResult(a_ * b_);
  }

  const onUpdateFn_0_a__ = createMemo(() => a());
  const onUpdateFn_0_b__ = createMemo(() => b());
  function onUpdateFn_0() {
    calculateResult(a(), b());
  }
  createEffect(
    on(() => [onUpdateFn_0_a__(), onUpdateFn_0_b__()], onUpdateFn_0)
  );

  return (
    <>
      <div>
        <input
          type=\\"number\\"
          onInput={(event) => setA(event.target.value)}
          value={a()}
        />
        <input
          type=\\"number\\"
          onInput={(event) => setB(event.target.value)}
          value={b()}
        />
        Result:
        {result()}
      </div>
    </>
  );
}

export default MyComponent;
"
`;

exports[`Solid > svelte > Typescript Test > reactiveWithFn 2`] = `
"import { on, createEffect, createMemo, createSignal } from \\"solid-js\\";

function MyComponent(props: any) {
  const [a, setA] = createSignal(2);

  const [b, setB] = createSignal(5);

  const [result, setResult] = createSignal(null);

  function calculateResult(a_, b_) {
    setResult(a_ * b_);
  }

  const onUpdateFn_0_a__ = createMemo(() => a());
  const onUpdateFn_0_b__ = createMemo(() => b());
  function onUpdateFn_0() {
    calculateResult(a(), b());
  }
  createEffect(
    on(() => [onUpdateFn_0_a__(), onUpdateFn_0_b__()], onUpdateFn_0)
  );

  return (
    <>
      <div>
        <input
          type=\\"number\\"
          onInput={(event) => setA(event.target.value)}
          value={a()}
        />
        <input
          type=\\"number\\"
          onInput={(event) => setB(event.target.value)}
          value={b()}
        />
        Result:
        {result()}
      </div>
    </>
  );
}

export default MyComponent;
"
`;

exports[`Solid > svelte > Typescript Test > slots 1`] = `
"function MyComponent(props: any) {
  return (
    <>
      <div>
        <Slot>default</Slot>
        <Slot name=\\"Test\\">
          <div>default</div>
        </Slot>
      </div>
    </>
  );
}

export default MyComponent;
"
`;

exports[`Solid > svelte > Typescript Test > slots 2`] = `
"function MyComponent(props: any) {
  return (
    <>
      <div>
        <Slot>default</Slot>
        <Slot name=\\"Test\\">
          <div>default</div>
        </Slot>
      </div>
    </>
  );
}

export default MyComponent;
"
`;

exports[`Solid > svelte > Typescript Test > style 1`] = `
"function MyComponent(props: any) {
  return (
    <>
      <input class=\\"form-input\\" />
      <style>{\`
  input {
    color: red;
    font-size: 12px;
  }

  .form-input:focus {
    outline: 1px solid blue;
  }

\`}</style>
    </>
  );
}

export default MyComponent;
"
`;

exports[`Solid > svelte > Typescript Test > style 2`] = `
"function MyComponent(props: any) {
  return (
    <>
      <input class=\\"form-input\\" />
      <style>{\`
  input {
    color: red;
    font-size: 12px;
  }

  .form-input:focus {
    outline: 1px solid blue;
  }

\`}</style>
    </>
  );
}

export default MyComponent;
"
`;

exports[`Solid > svelte > Typescript Test > textExpressions 1`] = `
"import { createSignal, createMemo } from \\"solid-js\\";

function MyComponent(props: any) {
  const [a, setA] = createSignal(5);

  const [b, setB] = createSignal(12);

  return (
    <>
      <div>
        normal:
        {a() + b()}
        <br />
        conditional
        {a() > 2 ? \\"hello\\" : \\"bye\\"}
      </div>
    </>
  );
}

export default MyComponent;
"
`;

exports[`Solid > svelte > Typescript Test > textExpressions 2`] = `
"import { createSignal, createMemo } from \\"solid-js\\";

function MyComponent(props: any) {
  const [a, setA] = createSignal(5);

  const [b, setB] = createSignal(12);

  return (
    <>
      <div>
        normal:
        {a() + b()}
        <br />
        conditional
        {a() > 2 ? \\"hello\\" : \\"bye\\"}
      </div>
    </>
  );
}

export default MyComponent;
"
`;
