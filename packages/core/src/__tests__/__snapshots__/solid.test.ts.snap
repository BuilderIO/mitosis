// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Solid Basic 1`] = `
"import { createMutable } from \\"solid-js/store\\";
import { css } from \\"solid-styled-components\\";

export const DEFAULT_VALUES = {
  name: \\"Steve\\",
};

function MyBasicComponent(props) {
  const state = createMutable({
    name: \\"Steve\\",
    underscore_fn_name() {
      return \\"bar\\";
    },
  });

  return (
    <div
      class={
        \\"test \\" +
        css({
          padding: \\"10px\\",
        })
      }
    >
      <input
        value={DEFAULT_VALUES.name || state.name}
        onInput={(myEvent) => (state.name = myEvent.target.value)}
      />
      Hello! I can run in React, Vue, Solid, or Liquid!
    </div>
  );
}

export default MyBasicComponent;
"
`;

exports[`Solid Basic 2`] = `
"import { Show, For } from \\"solid-js\\";

import { createMutable } from \\"solid-js/store\\";

function MyBasicForShowComponent(props) {
  const state = createMutable({
    name: \\"PatrickJS\\",
    names: [\\"Steve\\", \\"PatrickJS\\"],
  });

  return (
    <div>
      <For each={state.names}>
        {(person, _index) => {
          const index = _index();
          return (
            <Show when={person === state.name}>
              <input
                value={state.name}
                onInput={(event) => {
                  state.name = event.target.value + \\" and \\" + person;
                }}
              />
              Hello
              {person}! I can run in Qwik, Web Component, React, Vue, Solid, or
              Liquid!
            </Show>
          );
        }}
      </For>
    </div>
  );
}

export default MyBasicForShowComponent;
"
`;

exports[`Solid Basic Context 1`] = `
"import { useContext, onMount } from \\"solid-js\\";
import { Dynamic } from \\"solid-js/web\\";
import { createMutable } from \\"solid-js/store\\";

import { Injector, createInjector, MyService } from \\"@dummy/injection-js\\";

function MyBasicComponent(props) {
  const state = createMutable({
    name: \\"PatrickJS\\",
    onChange: function onChange() {
      const change = myService.method(\\"change\\");
      console.log(change);
    },
  });

  const myService = useContext(MyService);

  onMount(() => {
    const bye = myService.method(\\"hi\\");
    console.log(bye);
  });

  return (
    <Dynamic component={Injector.Provider}>
      <div>
        {myService.method(\\"hello\\") + state.name}
        Hello! I can run in React, Vue, Solid, or Liquid!
        <input onInput={(event) => state.onChange} />
      </div>
    </Dynamic>
  );
}

export default MyBasicComponent;
"
`;

exports[`Solid Basic OnMount Update 1`] = `
"import { onMount } from \\"solid-js\\";

import { createMutable } from \\"solid-js/store\\";

function MyBasicOnMountUpdateComponent(props) {
  const state = createMutable({
    name: \\"PatrickJS\\",
    names: [\\"Steve\\", \\"PatrickJS\\"],
  });

  onMount(() => {
    state.name = \\"PatrickJS onMount\\" + props.bye;
  });

  return (
    <div>
      Hello
      {state.name}
    </div>
  );
}

export default MyBasicOnMountUpdateComponent;
"
`;

exports[`Solid Basic Outputs 1`] = `
"import { onMount } from \\"solid-js\\";

import { createMutable } from \\"solid-js/store\\";

function MyBasicOutputsComponent(props) {
  const state = createMutable({ name: \\"PatrickJS\\" });

  onMount(() => {
    props.onMessage(state.name);
    props.onEvent(props.message);
  });

  return <div></div>;
}

export default MyBasicOutputsComponent;
"
`;

exports[`Solid Basic Outputs Meta 1`] = `
"import { onMount } from \\"solid-js\\";

import { createMutable } from \\"solid-js/store\\";

function MyBasicOutputsComponent(props) {
  const state = createMutable({ name: \\"PatrickJS\\" });

  onMount(() => {
    props.onMessage(state.name);
    props.onEvent(props.message);
  });

  return <div></div>;
}

export default MyBasicOutputsComponent;
"
`;

exports[`Solid BasicChildComponent 1`] = `
"import { createMutable } from \\"solid-js/store\\";

import MyBasicComponent from \\"./basic.raw\\";
import MyBasicOnMountUpdateComponent from \\"./basic-onMount-update.raw\\";

function MyBasicChildComponent(props) {
  const state = createMutable({ name: \\"Steve\\", dev: \\"PatrickJS\\" });

  return (
    <div>
      <MyBasicComponent id={state.dev}></MyBasicComponent>
      <div>
        <MyBasicOnMountUpdateComponent
          hi={state.name}
          bye={state.dev}
        ></MyBasicOnMountUpdateComponent>
      </div>
    </div>
  );
}

export default MyBasicChildComponent;
"
`;

exports[`Solid BasicFor 1`] = `
"import { For, onMount } from \\"solid-js\\";

import { createMutable } from \\"solid-js/store\\";

function MyBasicForComponent(props) {
  const state = createMutable({
    name: \\"PatrickJS\\",
    names: [\\"Steve\\", \\"PatrickJS\\"],
  });

  onMount(() => {
    console.log(\\"onMount code\\");
  });

  return (
    <div>
      <For each={state.names}>
        {(person, _index) => {
          const index = _index();
          return (
            <>
              <input
                value={state.name}
                onInput={(event) => {
                  state.name = event.target.value + \\" and \\" + person;
                }}
              />
              Hello
              {person}! I can run in Qwik, Web Component, React, Vue, Solid, or
              Liquid!
            </>
          );
        }}
      </For>
    </div>
  );
}

export default MyBasicForComponent;
"
`;

exports[`Solid BasicRef 1`] = `
"import { Show, useRef } from \\"solid-js\\";

import { createMutable } from \\"solid-js/store\\";
import { css } from \\"solid-styled-components\\";

function MyBasicRefComponent(props) {
  const state = createMutable({
    name: \\"PatrickJS\\",
    onBlur: function onBlur() {
      // Maintain focus
      inputRef.focus();
    },
    lowerCaseName: function lowerCaseName() {
      return state.name.toLowerCase();
    },
  });

  const inputRef = useRef();
  const inputNoArgRef = useRef();

  return (
    <div>
      <Show when={props.showInput}>
        <>
          <input
            class={css({
              color: \\"red\\",
            })}
            ref={inputRef}
            value={state.name}
            onBlur={(event) => state.onBlur()}
            onInput={(event) => (state.name = event.target.value)}
          />
          <label for=\\"cars\\" ref={inputNoArgRef}>
            Choose a car:
          </label>
          <select name=\\"cars\\" id=\\"cars\\">
            <option value=\\"supra\\">GR Supra</option>
            <option value=\\"86\\">GR 86</option>
          </select>
        </>
      </Show>
      Hello
      {state.lowerCaseName()}! I can run in React, Qwik, Vue, Solid, or Web
      Component!
    </div>
  );
}

export default MyBasicRefComponent;
"
`;

exports[`Solid BasicRefAssignment 1`] = `
"import { createMutable } from \\"solid-js/store\\";

function MyBasicRefAssignmentComponent(props) {
  const state = createMutable({
    handlerClick: function handlerClick(event) {
      event.preventDefault();
      console.log(\\"current value\\", holdValueRef);
      holdValueRef = holdValueRef + \\"JS\\";
    },
  });

  return (
    <div>
      <button onClick={(evt) => state.handlerClick(evt)}>Click</button>
    </div>
  );
}

export default MyBasicRefAssignmentComponent;
"
`;

exports[`Solid BasicRefPrevious 1`] = `
"import { on, createEffect } from \\"solid-js\\";

import { createMutable } from \\"solid-js/store\\";

export function usePrevious<T>(value: T) {
  // The ref object is a generic container whose current property is mutable ...
  // ... and can hold any value, similar to an instance property on a class
  let ref = useRef<T>(null); // Store current value in ref

  onUpdate(() => {
    ref = value;
  }, [value]); // Only re-run if value changes
  // Return previous value (happens before update in useEffect above)

  return ref;
}

function MyPreviousComponent(props) {
  const state = createMutable({ count: 0 });

  function onUpdateFn_0() {
    prevCount = state.count;
  }
  createEffect(on(() => [state.count], onUpdateFn_0));

  return (
    <div>
      <h1>
        Now:
        {state.count}, before:
        {prevCount}
      </h1>
      <button onClick={(event) => (state.count += 1)}>Increment</button>
    </div>
  );
}

export default MyPreviousComponent;
"
`;

exports[`Solid Button 1`] = `
"import { Show } from \\"solid-js\\";

function Button(props) {
  return (
    <>
      <Show when={props.link}>
        <a
          {...props.attributes}
          href={props.link}
          target={props.openLinkInNewTab ? \\"_blank\\" : undefined}
        >
          {props.text}
        </a>
      </Show>
      <Show when={!props.link}>
        <button {...props.attributes} type=\\"button\\">
          {props.text}
        </button>
      </Show>
    </>
  );
}

export default Button;
"
`;

exports[`Solid Columns 1`] = `
"import { For } from \\"solid-js\\";

import { createMutable } from \\"solid-js/store\\";
import { css } from \\"solid-styled-components\\";

function Column(props) {
  const state = createMutable({
    getColumns() {
      return props.columns || [];
    },
    getGutterSize() {
      return typeof props.space === \\"number\\" ? props.space || 0 : 20;
    },
    getWidth(index: number) {
      const columns = this.getColumns();
      return (columns[index] && columns[index].width) || 100 / columns.length;
    },
    getColumnCssWidth(index: number) {
      const columns = this.getColumns();
      const gutterSize = this.getGutterSize();
      const subtractWidth =
        (gutterSize * (columns.length - 1)) / columns.length;
      return \`calc(\${this.getWidth(index)}% - \${subtractWidth}px)\`;
    },
  });

  return (
    <div
      class={
        \\"builder-columns \\" +
        css({
          display: \\"flex\\",
          flexDirection: \\"column\\",
          alignItems: \\"stretch\\",
          lineHeight: \\"normal\\",
          \\"@media (max-width: 999px)\\": {
            flexDirection: \\"row\\",
          },
          \\"@media (max-width: 639px)\\": {
            flexDirection: \\"row-reverse\\",
          },
        })
      }
    >
      <For each={props.columns}>
        {(column, _index) => {
          const index = _index();
          return (
            <div
              class={
                \\"builder-column \\" +
                css({
                  flexGrow: \\"1\\",
                })
              }
            >
              {column.content}
              {index}
            </div>
          );
        }}
      </For>
    </div>
  );
}

export default Column;
"
`;

exports[`Solid ContentSlotHtml 1`] = `
"function ContentSlotCode(props) {
  return (
    <div>
      <Slot name={props.slotTesting}></Slot>
      <div>
        <hr />
      </div>
      <div>
        <Slot></Slot>
      </div>
    </div>
  );
}

export default ContentSlotCode;
"
`;

exports[`Solid ContentSlotJSX 1`] = `
"function ContentSlotJsxCode(props) {
  return (
    <div>
      {props.slotTesting}
      <div>
        <hr />
      </div>
      <div>{props.children}</div>
    </div>
  );
}

export default ContentSlotJsxCode;
"
`;

exports[`Solid CustomCode 1`] = `
"import { onMount, useRef } from \\"solid-js\\";

import { createMutable } from \\"solid-js/store\\";

function CustomCode(props) {
  const state = createMutable({
    scriptsInserted: [],
    scriptsRun: [],
    findAndRunScripts() {
      // TODO: Move this function to standalone one in '@builder.io/utils'
      if (elem && typeof window !== \\"undefined\\") {
        /** @type {HTMLScriptElement[]} */
        const scripts = elem.getElementsByTagName(\\"script\\");

        for (let i = 0; i < scripts.length; i++) {
          const script = scripts[i];

          if (script.src) {
            if (state.scriptsInserted.includes(script.src)) {
              continue;
            }

            state.scriptsInserted.push(script.src);
            const newScript = document.createElement(\\"script\\");
            newScript.async = true;
            newScript.src = script.src;
            document.head.appendChild(newScript);
          } else if (
            !script.type ||
            [
              \\"text/javascript\\",
              \\"application/javascript\\",
              \\"application/ecmascript\\",
            ].includes(script.type)
          ) {
            if (state.scriptsRun.includes(script.innerText)) {
              continue;
            }

            try {
              state.scriptsRun.push(script.innerText);
              new Function(script.innerText)();
            } catch (error) {
              console.warn(\\"\`CustomCode\`: Error running script:\\", error);
            }
          }
        }
      }
    },
  });

  const elem = useRef();

  onMount(() => {
    state.findAndRunScripts();
  });

  return (
    <div
      class={
        \\"builder-custom-code\\" + (props.replaceNodes ? \\" replace-nodes\\" : \\"\\")
      }
      ref={elem}
      innerHTML={props.code}
    ></div>
  );
}

export default CustomCode;
"
`;

exports[`Solid Embed 1`] = `
"import { onMount, useRef } from \\"solid-js\\";

import { createMutable } from \\"solid-js/store\\";

function CustomCode(props) {
  const state = createMutable({
    scriptsInserted: [],
    scriptsRun: [],
    findAndRunScripts() {
      // TODO: Move this function to standalone one in '@builder.io/utils'
      if (elem && typeof window !== \\"undefined\\") {
        /** @type {HTMLScriptElement[]} */
        const scripts = elem.getElementsByTagName(\\"script\\");

        for (let i = 0; i < scripts.length; i++) {
          const script = scripts[i];

          if (script.src) {
            if (state.scriptsInserted.includes(script.src)) {
              continue;
            }

            state.scriptsInserted.push(script.src);
            const newScript = document.createElement(\\"script\\");
            newScript.async = true;
            newScript.src = script.src;
            document.head.appendChild(newScript);
          } else if (
            !script.type ||
            [
              \\"text/javascript\\",
              \\"application/javascript\\",
              \\"application/ecmascript\\",
            ].includes(script.type)
          ) {
            if (state.scriptsRun.includes(script.innerText)) {
              continue;
            }

            try {
              state.scriptsRun.push(script.innerText);
              new Function(script.innerText)();
            } catch (error) {
              console.warn(\\"\`CustomCode\`: Error running script:\\", error);
            }
          }
        }
      }
    },
  });

  const elem = useRef();

  onMount(() => {
    state.findAndRunScripts();
  });

  return (
    <div
      class={
        \\"builder-custom-code\\" + (props.replaceNodes ? \\" replace-nodes\\" : \\"\\")
      }
      ref={elem}
      innerHTML={props.code}
    ></div>
  );
}

export default CustomCode;
"
`;

exports[`Solid Form 1`] = `
"import { Show, For, useRef } from \\"solid-js\\";

import { createMutable } from \\"solid-js/store\\";
import { css } from \\"solid-styled-components\\";

import { BuilderBlockComponent as BuilderBlock } from \\"@fake\\";
import { Builder, builder } from \\"@builder.io/sdk\\";
import { BuilderBlocks } from \\"@fake\\";
import { set } from \\"@fake\\";
import { get } from \\"@fake\\";

function FormComponent(props) {
  const state = createMutable({
    state: \\"unsubmitted\\",
    responseData: null,
    formErrorMessage: \\"\\",
    get submissionState() {
      return (Builder.isEditing && props.previewState) || state.state;
    },
    onSubmit(
      event: Event & {
        currentTarget: HTMLFormElement;
      }
    ) {
      const sendWithJs =
        props.sendWithJs || props.sendSubmissionsTo === \\"email\\";

      if (props.sendSubmissionsTo === \\"zapier\\") {
        event.preventDefault();
      } else if (sendWithJs) {
        if (!(props.action || props.sendSubmissionsTo === \\"email\\")) {
          event.preventDefault();
          return;
        }

        event.preventDefault();
        const el = event.currentTarget;
        const headers = props.customHeaders || {};
        let body: any;
        const formData = new FormData(el); // TODO: maybe support null

        const formPairs: {
          key: string;
          value: File | boolean | number | string | FileList;
        }[] = Array.from(
          event.currentTarget.querySelectorAll(\\"input,select,textarea\\")
        )
          .filter((el) => !!(el as HTMLInputElement).name)
          .map((el) => {
            let value: any;
            const key = (el as HTMLImageElement).name;

            if (el instanceof HTMLInputElement) {
              if (el.type === \\"radio\\") {
                if (el.checked) {
                  value = el.name;
                  return {
                    key,
                    value,
                  };
                }
              } else if (el.type === \\"checkbox\\") {
                value = el.checked;
              } else if (el.type === \\"number\\" || el.type === \\"range\\") {
                const num = el.valueAsNumber;

                if (!isNaN(num)) {
                  value = num;
                }
              } else if (el.type === \\"file\\") {
                // TODO: one vs multiple files
                value = el.files;
              } else {
                value = el.value;
              }
            } else {
              value = (el as HTMLInputElement).value;
            }

            return {
              key,
              value,
            };
          });
        let contentType = props.contentType;

        if (props.sendSubmissionsTo === \\"email\\") {
          contentType = \\"multipart/form-data\\";
        }

        Array.from(formPairs).forEach(({ value }) => {
          if (
            value instanceof File ||
            (Array.isArray(value) && value[0] instanceof File) ||
            value instanceof FileList
          ) {
            contentType = \\"multipart/form-data\\";
          }
        }); // TODO: send as urlEncoded or multipart by default
        // because of ease of use and reliability in browser API
        // for encoding the form?

        if (contentType !== \\"application/json\\") {
          body = formData;
        } else {
          // Json
          const json = {};
          Array.from(formPairs).forEach(({ value, key }) => {
            set(json, key, value);
          });
          body = JSON.stringify(json);
        }

        if (contentType && contentType !== \\"multipart/form-data\\") {
          if (
            /* Zapier doesn't allow content-type header to be sent from browsers */
            !(sendWithJs && props.action?.includes(\\"zapier.com\\"))
          ) {
            headers[\\"content-type\\"] = contentType;
          }
        }

        const presubmitEvent = new CustomEvent(\\"presubmit\\", {
          detail: {
            body,
          },
        });

        if (formRef) {
          formRef.dispatchEvent(presubmitEvent);

          if (presubmitEvent.defaultPrevented) {
            return;
          }
        }

        state.state = \\"sending\\";
        const formUrl = \`\${
          builder.env === \\"dev\\" ? \\"http://localhost:5000\\" : \\"https://builder.io\\"
        }/api/v1/form-submit?apiKey=\${builder.apiKey}&to=\${btoa(
          props.sendSubmissionsToEmail || \\"\\"
        )}&name=\${encodeURIComponent(props.name || \\"\\")}\`;
        fetch(
          props.sendSubmissionsTo === \\"email\\" ? formUrl : props.action!,
          /* TODO: throw error if no action URL */
          {
            body,
            headers,
            method: props.method || \\"post\\",
          }
        ).then(
          async (res) => {
            let body;
            const contentType = res.headers.get(\\"content-type\\");

            if (contentType && contentType.indexOf(\\"application/json\\") !== -1) {
              body = await res.json();
            } else {
              body = await res.text();
            }

            if (!res.ok && props.errorMessagePath) {
              /* TODO: allow supplying an error formatter function */
              let message = get(body, props.errorMessagePath);

              if (message) {
                if (typeof message !== \\"string\\") {
                  /* TODO: ideally convert json to yaml so it woul dbe like
           error: - email has been taken */
                  message = JSON.stringify(message);
                }

                state.formErrorMessage = message;
              }
            }

            state.responseData = body;
            state.state = res.ok ? \\"success\\" : \\"error\\";

            if (res.ok) {
              const submitSuccessEvent = new CustomEvent(\\"submit:success\\", {
                detail: {
                  res,
                  body,
                },
              });

              if (formRef) {
                formRef.dispatchEvent(submitSuccessEvent);

                if (submitSuccessEvent.defaultPrevented) {
                  return;
                }
                /* TODO: option to turn this on/off? */

                if (props.resetFormOnSubmit !== false) {
                  formRef.reset();
                }
              }
              /* TODO: client side route event first that can be preventDefaulted */

              if (props.successUrl) {
                if (formRef) {
                  const event = new CustomEvent(\\"route\\", {
                    detail: {
                      url: props.successUrl,
                    },
                  });
                  formRef.dispatchEvent(event);

                  if (!event.defaultPrevented) {
                    location.href = props.successUrl;
                  }
                } else {
                  location.href = props.successUrl;
                }
              }
            }
          },
          (err) => {
            const submitErrorEvent = new CustomEvent(\\"submit:error\\", {
              detail: {
                error: err,
              },
            });

            if (formRef) {
              formRef.dispatchEvent(submitErrorEvent);

              if (submitErrorEvent.defaultPrevented) {
                return;
              }
            }

            state.responseData = err;
            state.state = \\"error\\";
          }
        );
      }
    },
  });

  const formRef = useRef();

  return (
    <form
      {...props.attributes}
      validate={props.validate}
      ref={formRef}
      action={!props.sendWithJs && props.action}
      method={props.method}
      name={props.name}
      onSubmit={(event) => state.onSubmit(event)}
    >
      <Show when={props.builderBlock && props.builderBlock.children}>
        <For each={props.builderBlock?.children}>
          {(block, _index) => {
            const index = _index();
            return (
              <BuilderBlockComponent
                key={block.id}
                block={block}
                index={index}
              ></BuilderBlockComponent>
            );
          }}
        </For>
      </Show>
      <Show when={state.submissionState === \\"error\\"}>
        <BuilderBlocks
          dataPath=\\"errorMessage\\"
          blocks={props.errorMessage}
        ></BuilderBlocks>
      </Show>
      <Show when={state.submissionState === \\"sending\\"}>
        <BuilderBlocks
          dataPath=\\"sendingMessage\\"
          blocks={props.sendingMessage}
        ></BuilderBlocks>
      </Show>
      <Show when={state.submissionState === \\"error\\" && state.responseData}>
        <pre
          class={
            \\"builder-form-error-text \\" +
            css({
              padding: \\"10px\\",
              color: \\"red\\",
              textAlign: \\"center\\",
            })
          }
        >
          {JSON.stringify(state.responseData, null, 2)}
        </pre>
      </Show>
      <Show when={state.submissionState === \\"success\\"}>
        <BuilderBlocks
          dataPath=\\"successMessage\\"
          blocks={props.successMessage}
        ></BuilderBlocks>
      </Show>
    </form>
  );
}

export default FormComponent;
"
`;

exports[`Solid Image 1`] = `
"import { Show, onMount, useRef } from \\"solid-js\\";

import { createMutable } from \\"solid-js/store\\";
import { css } from \\"solid-styled-components\\";

function Image(props) {
  const state = createMutable({
    scrollListener: null,
    imageLoaded: false,
    setLoaded() {
      state.imageLoaded = true;
    },
    useLazyLoading() {
      // TODO: Add more checks here, like testing for real web browsers
      return !!props.lazy && isBrowser();
    },
    isBrowser: function isBrowser() {
      return (
        typeof window !== \\"undefined\\" &&
        window.navigator.product != \\"ReactNative\\"
      );
    },
    load: false,
  });

  const pictureRef = useRef();

  onMount(() => {
    if (state.useLazyLoading()) {
      // throttled scroll capture listener
      const listener = () => {
        if (pictureRef) {
          const rect = pictureRef.getBoundingClientRect();
          const buffer = window.innerHeight / 2;

          if (rect.top < window.innerHeight + buffer) {
            setLoad(true);
            state.scrollListener = null;
            window.removeEventListener(\\"scroll\\", listener);
          }
        }
      };

      state.scrollListener = listener;
      window.addEventListener(\\"scroll\\", listener, {
        capture: true,
        passive: true,
      });
      listener();
    }
  });

  return (
    <>
      <picture ref={pictureRef}>
        <Show when={!state.useLazyLoading() || state.load}>
          <img
            class={
              \\"builder-image\\" +
              (props._class ? \\" \\" + props._class : \\"\\") +
              \\" \\" +
              css({
                opacity: \\"1\\",
                transition: \\"opacity 0.2s ease-in-out\\",
                objectFit: \\"cover\\",
                objectPosition: \\"center\\",
              })
            }
            alt={props.altText}
            aria-role={props.altText ? \\"presentation\\" : undefined}
            src={props.image}
            onLoad={(event) => state.setLoaded()}
            srcset={props.srcset}
            sizes={props.sizes}
          />
        </Show>
        <source srcset={props.srcset} />
      </picture>
      {props.children}
    </>
  );
}

export default Image;
"
`;

exports[`Solid Image State 1`] = `
"import { For } from \\"solid-js\\";

import { createMutable } from \\"solid-js/store\\";

function ImgStateComponent(props) {
  const state = createMutable({
    canShow: true,
    images: [\\"http://example.com/qwik.png\\"],
  });

  return (
    <div>
      <For each={state.images}>
        {(item, _index) => {
          const index = _index();
          return (
            <>
              <img class=\\"custom-class\\" src={item} key={itemIndex} />
            </>
          );
        }}
      </For>
    </div>
  );
}

export default ImgStateComponent;
"
`;

exports[`Solid Img 1`] = `
"import { Builder } from \\"@builder.io/sdk\\";

function ImgComponent(props) {
  return (
    <img
      {...props.attributes}
      style={{
        \\"object-fit\\": props.backgroundSize || \\"cover\\",
        \\"object-position\\": props.backgroundPosition || \\"center\\",
      }}
      key={(Builder.isEditing && props.imgSrc) || \\"default-key\\"}
      alt={props.altText}
      src={props.imgSrc}
    />
  );
}

export default ImgComponent;
"
`;

exports[`Solid Input 1`] = `
"import { Builder } from \\"@builder.io/sdk\\";

function FormInputComponent(props) {
  return (
    <input
      {...props.attributes}
      key={
        Builder.isEditing && props.defaultValue
          ? props.defaultValue
          : \\"default-key\\"
      }
      placeholder={props.placeholder}
      type={props.type}
      name={props.name}
      value={props.value}
      defaultValue={props.defaultValue}
      required={props.required}
    />
  );
}

export default FormInputComponent;
"
`;

exports[`Solid RawText 1`] = `
"function RawText(props) {
  return (
    <span
      class={props.attributes?.class || props.attributes?.className}
      innerHTML={props.text || \\"\\"}
    ></span>
  );
}

export default RawText;
"
`;

exports[`Solid Remove Internal mitosis package 1`] = `
"import { createMutable } from \\"solid-js/store\\";

function MyBasicComponent(props) {
  const state = createMutable({ name: \\"PatrickJS\\" });

  return (
    <div>
      Hello
      {state.name}! I can run in React, Qwik, Vue, Solid, or Liquid!
    </div>
  );
}

export default MyBasicComponent;
"
`;

exports[`Solid Section 1`] = `
"function SectionComponent(props) {
  return (
    <section
      {...props.attributes}
      style={
        props.maxWidth && typeof props.maxWidth === \\"number\\"
          ? {
              \\"max-width\\": props.maxWidth,
            }
          : undefined
      }
    >
      {props.children}
    </section>
  );
}

export default SectionComponent;
"
`;

exports[`Solid Section 2`] = `
"import { Show, For } from \\"solid-js\\";

import { createMutable } from \\"solid-js/store\\";

function SectionStateComponent(props) {
  const state = createMutable({ max: 42, items: [42] });

  return (
    <Show when={state.max}>
      <For each={state.items}>
        {(item, _index) => {
          const index = _index();
          return (
            <section
              {...props.attributes}
              style={{
                \\"max-width\\": item + state.max,
              }}
            >
              {props.children}
            </section>
          );
        }}
      </For>
    </Show>
  );
}

export default SectionStateComponent;
"
`;

exports[`Solid Select 1`] = `
"import { For } from \\"solid-js\\";

import { Builder } from \\"@builder.io/sdk\\";

function SelectComponent(props) {
  return (
    <select
      {...props.attributes}
      value={props.value}
      key={
        Builder.isEditing && props.defaultValue
          ? props.defaultValue
          : \\"default-key\\"
      }
      defaultValue={props.defaultValue}
      name={props.name}
    >
      <For each={props.options}>
        {(option, _index) => {
          const index = _index();
          return (
            <option value={option.value} data-index={index}>
              {option.name || option.value}
            </option>
          );
        }}
      </For>
    </select>
  );
}

export default SelectComponent;
"
`;

exports[`Solid SlotHtml 1`] = `
"import ContentSlotCode from \\"./content-slot-jsx.raw\\";

function SlotCode(props) {
  return (
    <div>
      <ContentSlotCode>
        <Slot testing={<div>Hello</div>}></Slot>
      </ContentSlotCode>
    </div>
  );
}

export default SlotCode;
"
`;

exports[`Solid SlotJsx 1`] = `
"import ContentSlotCode from \\"./content-slot-jsx.raw\\";

function SlotCode(props) {
  return (
    <div>
      <ContentSlotCode slotTesting={<div>Hello</div>}></ContentSlotCode>
    </div>
  );
}

export default SlotCode;
"
`;

exports[`Solid Stamped.io 1`] = `
"import { Show, For, onMount } from \\"solid-js\\";

import { createMutable } from \\"solid-js/store\\";
import { css } from \\"solid-styled-components\\";

import { kebabCase } from \\"lodash\\";
import { snakeCase } from \\"lodash\\";

function SmileReviews(props) {
  const state = createMutable({
    reviews: [],
    name: \\"test\\",
    showReviewPrompt: false,
    kebabCaseValue() {
      return kebabCase(\\"testThat\\");
    },
    snakeCaseValue() {
      return snakeCase(\\"testThis\\");
    },
  });

  onMount(() => {
    fetch(
      \`https://stamped.io/api/widget/reviews?storeUrl=builder-io.myshopify.com&apiKey=\${
        props.apiKey || \\"pubkey-8bbDq7W6w4sB3OWeM1HUy2s47702hM\\"
      }&productId=\${props.productId || \\"2410511106127\\"}\`
    )
      .then((res) => res.json())
      .then((data) => {
        state.reviews = data.data;
      });
  });

  return (
    <div data-user={state.name}>
      <button onClick={(event) => (state.showReviewPrompt = true)}>
        Write a review
      </button>
      <Show when={state.showReviewPrompt}>
        <input placeholder=\\"Email\\" />
        <input
          class={css({
            display: \\"block\\",
          })}
          placeholder=\\"Title\\"
        />
        <textarea
          class={css({
            display: \\"block\\",
          })}
          placeholder=\\"How was your experience?\\"
        ></textarea>
        <button
          class={css({
            display: \\"block\\",
          })}
          onClick={(event) => {
            state.showReviewPrompt = false;
          }}
        >
          Submit
        </button>
      </Show>
      <For each={state.reviews}>
        {(review, _index) => {
          const index = _index();
          return (
            <div
              class={css({
                margin: \\"10px\\",
                padding: \\"10px\\",
                background: \\"white\\",
                display: \\"flex\\",
                borderRadius: \\"5px\\",
                boxShadow: \\"0 2px 5px rgba(0, 0, 0, 0.1)\\",
              })}
              key={review.id}
            >
              <img
                class={css({
                  height: \\"30px\\",
                  width: \\"30px\\",
                  marginRight: \\"10px\\",
                })}
                src={review.avatar}
              />
              <div
                class={state.showReviewPrompt ? \\"bg-primary\\" : \\"bg-secondary\\"}
              >
                <div>
                  N:
                  {index}
                </div>
                <div>{review.author}</div>
                <div>{review.reviewMessage}</div>
              </div>
            </div>
          );
        }}
      </For>
    </div>
  );
}

export default SmileReviews;
"
`;

exports[`Solid Submit 1`] = `
"function SubmitButton(props) {
  return (
    <button {...props.attributes} type=\\"submit\\">
      {props.text}
    </button>
  );
}

export default SubmitButton;
"
`;

exports[`Solid Text 1`] = `
"import { createMutable } from \\"solid-js/store\\";

import { Builder } from \\"@builder.io/sdk\\";

function Text(props) {
  const state = createMutable({ name: \\"Decadef20\\" });

  return (
    <div
      contentEditable={allowEditingText || undefined}
      data-name={{
        test: state.name || \\"any name\\",
      }}
      innerHTML={
        props.text ||
        props.content ||
        state.name ||
        '<p class=\\"text-lg\\">my name</p>'
      }
    ></div>
  );
}

export default Text;
"
`;

exports[`Solid Textarea 1`] = `
"function Textarea(props) {
  return (
    <textarea
      {...props.attributes}
      placeholder={props.placeholder}
      name={props.name}
      value={props.value}
      defaultValue={props.defaultValue}
    ></textarea>
  );
}

export default Textarea;
"
`;

exports[`Solid Video 1`] = `
"function Video(props) {
  return (
    <video
      {...props.attributes}
      preload=\\"none\\"
      style={{
        width: \\"100%\\",
        height: \\"100%\\",
        ...props.attributes?.style,
        \\"object-fit\\": props.fit,
        \\"object-position\\": props.position,
        // Hack to get object fit to work as expected and
        // not have the video overflow
        \\"border-radius\\": 1,
      }}
      key={props.video || \\"no-src\\"}
      poster={props.posterImage}
      autoplay={props.autoPlay}
      muted={props.muted}
      controls={props.controls}
      loop={props.loop}
    ></video>
  );
}

export default Video;
"
`;

exports[`Solid class + ClassName + css 1`] = `
"import { css } from \\"solid-styled-components\\";

function MyBasicComponent(props) {
  return (
    <div
      class={
        \\"test2 test \\" +
        css({
          padding: \\"10px\\",
        })
      }
    >
      Hello! I can run in React, Vue, Solid, or Liquid!
    </div>
  );
}

export default MyBasicComponent;
"
`;

exports[`Solid class + css 1`] = `
"import { css } from \\"solid-styled-components\\";

function MyBasicComponent(props) {
  return (
    <div
      class={
        \\"test \\" +
        css({
          padding: \\"10px\\",
        })
      }
    >
      Hello! I can run in React, Vue, Solid, or Liquid!
    </div>
  );
}

export default MyBasicComponent;
"
`;

exports[`Solid className + css 1`] = `
"import { css } from \\"solid-styled-components\\";

function MyBasicComponent(props) {
  return (
    <div
      class={
        \\"test \\" +
        css({
          padding: \\"10px\\",
        })
      }
    >
      Hello! I can run in React, Vue, Solid, or Liquid!
    </div>
  );
}

export default MyBasicComponent;
"
`;

exports[`Solid className 1`] = `
"import { createMutable } from \\"solid-js/store\\";

function ClassNameCode(props) {
  const state = createMutable({ bindings: \\"a binding\\" });

  return (
    <div>
      <div class=\\"no binding\\">Without Binding</div>
      <div class={state.bindings}>With binding</div>
    </div>
  );
}

export default ClassNameCode;
"
`;

exports[`Solid classState 1`] = `
"import { createMutable } from \\"solid-js/store\\";
import { css } from \\"solid-styled-components\\";

function MyBasicComponent(props) {
  const state = createMutable({
    classState: \\"testClassName\\",
    styleState: { color: \\"red\\" },
  });

  return (
    <div
      class={
        state.classState +
        \\" \\" +
        css({
          padding: \\"10px\\",
        })
      }
      style={state.styleState}
    >
      Hello! I can run in React, Vue, Solid, or Liquid!
    </div>
  );
}

export default MyBasicComponent;
"
`;

exports[`Solid multipleOnUpdate 1`] = `
"import { on, createEffect } from \\"solid-js\\";

function MultipleOnUpdate(props) {
  return <div></div>;
}

export default MultipleOnUpdate;
"
`;

exports[`Solid multipleOnUpdateWithDeps 1`] = `
"import { on, createEffect } from \\"solid-js\\";

import { createMutable } from \\"solid-js/store\\";

function MultipleOnUpdateWithDeps(props) {
  const state = createMutable({ a: \\"a\\", b: \\"b\\", c: \\"c\\", d: \\"d\\" });

  function onUpdateFn_0() {
    console.log(\\"Runs when a or b changes\\", state.a, state.b);

    if (state.a === \\"a\\") {
      state.a = \\"b\\";
    }
  }
  createEffect(on(() => [state.a, state.b], onUpdateFn_0));

  function onUpdateFn_1() {
    console.log(\\"Runs when c or d changes\\", state.c, state.d);

    if (state.a === \\"a\\") {
      state.a = \\"b\\";
    }
  }
  createEffect(on(() => [state.c, state.d], onUpdateFn_1));

  return <div></div>;
}

export default MultipleOnUpdateWithDeps;
"
`;

exports[`Solid nestedShow 1`] = `
"import { Show } from \\"solid-js\\";

function NestedShow(props) {
  return (
    <Show fallback={<div>else-condition-A</div>} when={props.conditionA}>
      <Show fallback={<div>else-condition-B</div>} when={!props.conditionB}>
        <div>if condition A and condition B</div>
      </Show>
    </Show>
  );
}

export default NestedShow;
"
`;

exports[`Solid onInit & onMount 1`] = `
"import { onMount } from \\"solid-js\\";

function OnInit(props) {
  onMount(() => {
    console.log(\\"onMount\\");
  });

  return <div></div>;
}

export default OnInit;
"
`;

exports[`Solid onInit 1`] = `
"import { createMutable } from \\"solid-js/store\\";

export const defaultValues = {
  name: \\"PatrickJS\\",
};

function OnInit(props) {
  const state = createMutable({ name: \\"\\" });

  return (
    <div>
      Default name defined by parent
      {state.name}
    </div>
  );
}

export default OnInit;
"
`;

exports[`Solid onMount 1`] = `
"import { onMount } from \\"solid-js\\";

function Comp(props) {
  onMount(() => {
    console.log(\\"Runs on mount\\");
  });

  return <div></div>;
}

export default Comp;
"
`;

exports[`Solid onUpdate 1`] = `
"import { on, createEffect } from \\"solid-js\\";

function OnUpdate(props) {
  return <div></div>;
}

export default OnUpdate;
"
`;

exports[`Solid onUpdateWithDeps 1`] = `
"import { on, createEffect } from \\"solid-js\\";

import { createMutable } from \\"solid-js/store\\";

function OnUpdateWithDeps(props) {
  const state = createMutable({ a: \\"a\\", b: \\"b\\" });

  function onUpdateFn_0() {
    console.log(\\"Runs when a or b changes\\", state.a, state.b);
  }
  createEffect(on(() => [state.a, state.b], onUpdateFn_0));

  return <div></div>;
}

export default OnUpdateWithDeps;
"
`;

exports[`Solid preserveExportOrLocalStatement 1`] = `
"const b = 3;
const foo = () => {};
export const a = 3;
export const bar = () => {};
export function run<T>(value: T) {}

function MyBasicComponent(props) {
  return <div></div>;
}

export default MyBasicComponent;
"
`;

exports[`Solid preserveTyping 1`] = `
"function MyBasicComponent(props) {
  return (
    <div>
      Hello! I can run in React, Vue, Solid, or Liquid!
      {props.name}
    </div>
  );
}

export default MyBasicComponent;
"
`;

exports[`Solid propsDestructure 1`] = `
"import { createMutable } from \\"solid-js/store\\";

function MyBasicComponent(props) {
  const state = createMutable({ name: \\"Decadef20\\" });

  return (
    <div>
      {props.children}
      {props.type}
      Hello! I can run in React, Vue, Solid, or Liquid!
    </div>
  );
}

export default MyBasicComponent;
"
`;

exports[`Solid propsInterface 1`] = `
"function MyBasicComponent(props) {
  return (
    <div>
      Hello! I can run in React, Vue, Solid, or Liquid!
      {props.name}
    </div>
  );
}

export default MyBasicComponent;
"
`;

exports[`Solid propsType 1`] = `
"function MyBasicComponent(props) {
  return (
    <div>
      Hello! I can run in React, Vue, Solid, or Liquid!
      {props.name}
    </div>
  );
}

export default MyBasicComponent;
"
`;

exports[`Solid rootShow 1`] = `
"import { Show } from \\"solid-js\\";

function RenderStyles(props) {
  return (
    <Show fallback={<div>Foo</div>} when={props.foo === \\"bar\\"}>
      <div>Bar</div>
    </Show>
  );
}

export default RenderStyles;
"
`;

exports[`Solid self-referencing component 1`] = `
"import { Show } from \\"solid-js\\";

function MyComponent(props) {
  return (
    <div>
      {props.name}
      <Show when={props.name === \\"Batman\\"}>
        <MyComponent name=\\"Bruce Wayne\\"></MyComponent>
      </Show>
    </div>
  );
}

export default MyComponent;
"
`;

exports[`Solid self-referencing component with children 1`] = `
"import { Show } from \\"solid-js\\";

function MyComponent(props) {
  return (
    <div>
      {props.name}
      {props.children}
      <Show when={props.name === \\"Batman\\"}>
        <MyComponent name=\\"Bruce\\">
          <div>Wayne</div>
        </MyComponent>
      </Show>
    </div>
  );
}

export default MyComponent;
"
`;

exports[`Solid showWithFor 1`] = `
"import { Show, For } from \\"solid-js\\";

function NestedShow(props) {
  return (
    <Show fallback={<div>else-condition-A</div>} when={props.conditionA}>
      <For each={props.items}>
        {(item, _index) => {
          const index = _index();
          return <div key={idx}>{item}</div>;
        }}
      </For>
    </Show>
  );
}

export default NestedShow;
"
`;
