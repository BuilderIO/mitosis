// Vitest Snapshot v1

exports[`Solid > jsx > Javascript Test > AdvancedRef 1`] = `
"import { Show, on, createEffect, createSignal } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";

function MyBasicRefComponent(props) {
  const [name, setName] = createSignal(\\"PatrickJS\\");

  function onBlur() {
    // Maintain focus
    inputRef.focus();
  }

  function lowerCaseName() {
    return name().toLowerCase();
  }

  function onUpdateFn_0() {
    console.log(\\"Received an update\\");
  }
  createEffect(on(() => [inputRef, inputNoArgRef], onUpdateFn_0));

  return (
    <div>
      <div></div>
      <Show when={props.showInput}>
        <>
          <div></div>
          <input
            onblur={(event) => onBlur()}
            onchange={(event) => setName(event.target.value)}
          />
          <div></div>
          <label>
            <div></div>
          </label>
          <div></div>
          <select name=\\"cars\\">
            <div></div>
            <option>
              <div></div>
            </option>
            <div></div>
            <option>
              <div></div>
            </option>
            <div></div>
          </select>
          <div></div>
        </>
      </Show>
      <div></div>
      <div></div>
      <div></div>
    </div>
  );
}

export default MyBasicRefComponent;
"
`;

exports[`Solid > jsx > Javascript Test > AdvancedRef 2`] = `
"import { Show, on, createEffect, createSignal } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";

function MyBasicRefComponent(props) {
  const [name, setName] = createSignal(\\"PatrickJS\\");

  function onBlur() {
    // Maintain focus
    inputRef.focus();
  }

  function lowerCaseName() {
    return name().toLowerCase();
  }

  function onUpdateFn_0() {
    console.log(\\"Received an update\\");
  }
  createEffect(on(() => [inputRef, inputNoArgRef], onUpdateFn_0));

  return (
    <>
      <div>
        <div></div>
        <Show when={props.showInput}>
          <>
            <div></div>
            <input
              onblur={(event) => onBlur()}
              onchange={(event) => setName(event.target.value)}
            />
            <div></div>
            <label>
              <div></div>
            </label>
            <div></div>
            <select name=\\"cars\\">
              <div></div>
              <option>
                <div></div>
              </option>
              <div></div>
              <option>
                <div></div>
              </option>
              <div></div>
            </select>
            <div></div>
          </>
        </Show>
        <div></div>
        <div></div>
        <div></div>
      </div>
    </>
  );
}

export default MyBasicRefComponent;
"
`;

exports[`Solid > jsx > Javascript Test > Basic 1`] = `
"import { createSignal } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";

export const DEFAULT_VALUES = {
  name: \\"Steve\\",
};

function MyBasicComponent(props) {
  const [name, setName] = createSignal(\\"Steve\\");

  const [age, setAge] = createSignal(1);

  const [sports, setSports] = createSignal([\\"\\"]);

  function underscore_fn_name() {
    return \\"bar\\";
  }

  return (
    <div>
      <div></div>
      <input onchange={(myEvent) => setName(myEvent.target.value)} />
      <div></div>
    </div>
  );
}

export default MyBasicComponent;
"
`;

exports[`Solid > jsx > Javascript Test > Basic 2`] = `
"import { Show, For, createSignal } from \\"solid-js\\";

function MyBasicForShowComponent(props) {
  const [name, setName] = createSignal(\\"PatrickJS\\");

  const [names, setNames] = createSignal([\\"Steve\\", \\"PatrickJS\\"]);

  return (
    <div>
      <div></div>
      <For each={names()}>
        {(person, _index) => {
          const index = _index();
          return (
            <Show when={person === name()}>
              <div></div>
              <input
                onchange={(event) => {
                  setName(event.target.value + \\" and \\" + person);
                }}
              />
              <div></div>
              <div></div>
              <div></div>
            </Show>
          );
        }}
      </For>
      <div></div>
    </div>
  );
}

export default MyBasicForShowComponent;
"
`;

exports[`Solid > jsx > Javascript Test > Basic 3`] = `
"import { createSignal } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";

export const DEFAULT_VALUES = {
  name: \\"Steve\\",
};

function MyBasicComponent(props) {
  const [name, setName] = createSignal(\\"Steve\\");

  const [age, setAge] = createSignal(1);

  const [sports, setSports] = createSignal([\\"\\"]);

  function underscore_fn_name() {
    return \\"bar\\";
  }

  return (
    <>
      <div>
        <div></div>
        <input onchange={(myEvent) => setName(myEvent.target.value)} />
        <div></div>
      </div>
    </>
  );
}

export default MyBasicComponent;
"
`;

exports[`Solid > jsx > Javascript Test > Basic 4`] = `
"import { Show, For, createSignal } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";

function MyBasicForShowComponent(props) {
  const [name, setName] = createSignal(\\"PatrickJS\\");

  const [names, setNames] = createSignal([\\"Steve\\", \\"PatrickJS\\"]);

  return (
    <>
      <div>
        <div></div>
        <For each={names()}>
          {(person, _index) => {
            const index = _index();
            return (
              <Show when={person === name()}>
                <div></div>
                <input
                  onchange={(event) => {
                    setName(event.target.value + \\" and \\" + person);
                  }}
                />
                <div></div>
                <div></div>
                <div></div>
              </Show>
            );
          }}
        </For>
        <div></div>
      </div>
    </>
  );
}

export default MyBasicForShowComponent;
"
`;

exports[`Solid > jsx > Javascript Test > Basic Context 1`] = `
"import { useContext, onMount, createSignal } from \\"solid-js\\";

import { Injector, createInjector, MyService } from \\"@dummy/injection-js\\";

function MyBasicComponent(props) {
  const [name, setName] = createSignal(\\"PatrickJS\\");

  function onChange() {
    const change = myService.method(\\"change\\");
    console.log(change);
  }

  const myService = useContext(MyService);

  onMount(() => {
    const bye = myService.method(\\"hi\\");
    console.log(bye);
  });

  return (
    <Injector.Provider>
      <div>
        <div></div>
        <div></div>
        <div></div>
        <input onchange={(event) => onChange} />
        <div></div>
      </div>
    </Injector.Provider>
  );
}

export default MyBasicComponent;
"
`;

exports[`Solid > jsx > Javascript Test > Basic Context 2`] = `
"import { useContext, onMount, createSignal } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";

import { Injector, createInjector, MyService } from \\"@dummy/injection-js\\";

function MyBasicComponent(props) {
  const [name, setName] = createSignal(\\"PatrickJS\\");

  function onChange() {
    const change = myService.method(\\"change\\");
    console.log(change);
  }

  const myService = useContext(MyService);

  onMount(() => {
    const bye = myService.method(\\"hi\\");
    console.log(bye);
  });

  return (
    <>
      <Injector.Provider>
        <div>
          <div></div>
          <div></div>
          <div></div>
          <input onchange={(event) => onChange} />
          <div></div>
        </div>
      </Injector.Provider>
    </>
  );
}

export default MyBasicComponent;
"
`;

exports[`Solid > jsx > Javascript Test > Basic OnMount Update 1`] = `
"import { onMount, createSignal } from \\"solid-js\\";

function MyBasicOnMountUpdateComponent(props) {
  const [name, setName] = createSignal(\\"PatrickJS\\");

  const [names, setNames] = createSignal([\\"Steve\\", \\"PatrickJS\\"]);

  onMount(() => {
    setName(\\"PatrickJS onMount\\" + props.bye);
  });

  return (
    <div>
      <div></div>
      <div></div>
    </div>
  );
}

export default MyBasicOnMountUpdateComponent;
"
`;

exports[`Solid > jsx > Javascript Test > Basic OnMount Update 2`] = `
"import { onMount, createSignal } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";

function MyBasicOnMountUpdateComponent(props) {
  const [name, setName] = createSignal(\\"PatrickJS\\");

  const [names, setNames] = createSignal([\\"Steve\\", \\"PatrickJS\\"]);

  onMount(() => {
    setName(\\"PatrickJS onMount\\" + props.bye);
  });

  return (
    <>
      <div>
        <div></div>
        <div></div>
      </div>
    </>
  );
}

export default MyBasicOnMountUpdateComponent;
"
`;

exports[`Solid > jsx > Javascript Test > Basic Outputs 1`] = `
"import { onMount, createSignal } from \\"solid-js\\";

function MyBasicOutputsComponent(props) {
  const [name, setName] = createSignal(\\"PatrickJS\\");

  onMount(() => {
    props.onMessage(name());
    props.onEvent(props.message);
  });

  return <div></div>;
}

export default MyBasicOutputsComponent;
"
`;

exports[`Solid > jsx > Javascript Test > Basic Outputs 2`] = `
"import { onMount, createSignal } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";

function MyBasicOutputsComponent(props) {
  const [name, setName] = createSignal(\\"PatrickJS\\");

  onMount(() => {
    props.onMessage(name());
    props.onEvent(props.message);
  });

  return (
    <>
      <div></div>
    </>
  );
}

export default MyBasicOutputsComponent;
"
`;

exports[`Solid > jsx > Javascript Test > Basic Outputs Meta 1`] = `
"import { onMount, createSignal } from \\"solid-js\\";

function MyBasicOutputsComponent(props) {
  const [name, setName] = createSignal(\\"PatrickJS\\");

  onMount(() => {
    props.onMessage(name());
    props.onEvent(props.message);
  });

  return <div></div>;
}

export default MyBasicOutputsComponent;
"
`;

exports[`Solid > jsx > Javascript Test > Basic Outputs Meta 2`] = `
"import { onMount, createSignal } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";

function MyBasicOutputsComponent(props) {
  const [name, setName] = createSignal(\\"PatrickJS\\");

  onMount(() => {
    props.onMessage(name());
    props.onEvent(props.message);
  });

  return (
    <>
      <div></div>
    </>
  );
}

export default MyBasicOutputsComponent;
"
`;

exports[`Solid > jsx > Javascript Test > BasicAttribute 1`] = `
"function MyComponent(props) {
  return <input />;
}

export default MyComponent;
"
`;

exports[`Solid > jsx > Javascript Test > BasicAttribute 2`] = `
"import { css } from \\"solid-styled-components\\";

function MyComponent(props) {
  return (
    <>
      <input />
    </>
  );
}

export default MyComponent;
"
`;

exports[`Solid > jsx > Javascript Test > BasicBooleanAttribute 1`] = `
"import MyBooleanAttributeComponent from \\"./basic-boolean-attribute-component.raw\\";

function MyBooleanAttribute(props) {
  return (
    <div>
      <div></div>
      <div></div>
      <div></div>
      <div></div>
      <div></div>
      <MyBooleanAttributeComponent toggle={true}></MyBooleanAttributeComponent>
      <div></div>
      <MyBooleanAttributeComponent toggle={true}></MyBooleanAttributeComponent>
      <div></div>
      <MyBooleanAttributeComponent list={null}></MyBooleanAttributeComponent>
      <div></div>
    </div>
  );
}

export default MyBooleanAttribute;
"
`;

exports[`Solid > jsx > Javascript Test > BasicBooleanAttribute 2`] = `
"import { css } from \\"solid-styled-components\\";

import MyBooleanAttributeComponent from \\"./basic-boolean-attribute-component.raw\\";

function MyBooleanAttribute(props) {
  return (
    <>
      <div>
        <div></div>
        <div></div>
        <div></div>
        <div></div>
        <div></div>
        <MyBooleanAttributeComponent
          toggle={true}
        ></MyBooleanAttributeComponent>
        <div></div>
        <MyBooleanAttributeComponent
          toggle={true}
        ></MyBooleanAttributeComponent>
        <div></div>
        <MyBooleanAttributeComponent list={null}></MyBooleanAttributeComponent>
        <div></div>
      </div>
    </>
  );
}

export default MyBooleanAttribute;
"
`;

exports[`Solid > jsx > Javascript Test > BasicChildComponent 1`] = `
"import { createSignal } from \\"solid-js\\";

import MyBasicComponent from \\"./basic.raw\\";
import MyBasicOnMountUpdateComponent from \\"./basic-onMount-update.raw\\";

function MyBasicChildComponent(props) {
  const [name, setName] = createSignal(\\"Steve\\");

  const [dev, setDev] = createSignal(\\"PatrickJS\\");

  return (
    <div>
      <div></div>
      <MyBasicComponent id={dev()}></MyBasicComponent>
      <div></div>
      <div>
        <div></div>
        <MyBasicOnMountUpdateComponent
          hi={name()}
          bye={dev()}
        ></MyBasicOnMountUpdateComponent>
        <div></div>
      </div>
      <div></div>
    </div>
  );
}

export default MyBasicChildComponent;
"
`;

exports[`Solid > jsx > Javascript Test > BasicChildComponent 2`] = `
"import { createSignal } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";

import MyBasicComponent from \\"./basic.raw\\";
import MyBasicOnMountUpdateComponent from \\"./basic-onMount-update.raw\\";

function MyBasicChildComponent(props) {
  const [name, setName] = createSignal(\\"Steve\\");

  const [dev, setDev] = createSignal(\\"PatrickJS\\");

  return (
    <>
      <div>
        <div></div>
        <MyBasicComponent id={dev()}></MyBasicComponent>
        <div></div>
        <div>
          <div></div>
          <MyBasicOnMountUpdateComponent
            hi={name()}
            bye={dev()}
          ></MyBasicOnMountUpdateComponent>
          <div></div>
        </div>
        <div></div>
      </div>
    </>
  );
}

export default MyBasicChildComponent;
"
`;

exports[`Solid > jsx > Javascript Test > BasicFor 1`] = `
"import { For, onMount, createSignal } from \\"solid-js\\";

function MyBasicForComponent(props) {
  const [name, setName] = createSignal(\\"PatrickJS\\");

  const [names, setNames] = createSignal([\\"Steve\\", \\"PatrickJS\\"]);

  onMount(() => {
    console.log(\\"onMount code\\");
  });

  return (
    <div>
      <div></div>
      <For each={names()}>
        {(person, _index) => {
          const index = _index();
          return (
            <>
              <div></div>
              <input
                onchange={(event) => {
                  setName(event.target.value + \\" and \\" + person);
                }}
              />
              <div></div>
              <div></div>
              <div></div>
            </>
          );
        }}
      </For>
      <div></div>
    </div>
  );
}

export default MyBasicForComponent;
"
`;

exports[`Solid > jsx > Javascript Test > BasicFor 2`] = `
"import { For, onMount, createSignal } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";

function MyBasicForComponent(props) {
  const [name, setName] = createSignal(\\"PatrickJS\\");

  const [names, setNames] = createSignal([\\"Steve\\", \\"PatrickJS\\"]);

  onMount(() => {
    console.log(\\"onMount code\\");
  });

  return (
    <>
      <div>
        <div></div>
        <For each={names()}>
          {(person, _index) => {
            const index = _index();
            return (
              <>
                <div></div>
                <input
                  onchange={(event) => {
                    setName(event.target.value + \\" and \\" + person);
                  }}
                />
                <div></div>
                <div></div>
                <div></div>
              </>
            );
          }}
        </For>
        <div></div>
      </div>
    </>
  );
}

export default MyBasicForComponent;
"
`;

exports[`Solid > jsx > Javascript Test > BasicRef 1`] = `
"import { Show, createSignal } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";

function MyBasicRefComponent(props) {
  const [name, setName] = createSignal(\\"PatrickJS\\");

  function onBlur() {
    // Maintain focus
    inputRef.focus();
  }

  function lowerCaseName() {
    return name().toLowerCase();
  }

  return (
    <div>
      <div></div>
      <Show when={props.showInput}>
        <>
          <div></div>
          <input
            onblur={(event) => onBlur()}
            onchange={(event) => setName(event.target.value)}
          />
          <div></div>
          <label>
            <div></div>
          </label>
          <div></div>
          <select name=\\"cars\\">
            <div></div>
            <option>
              <div></div>
            </option>
            <div></div>
            <option>
              <div></div>
            </option>
            <div></div>
          </select>
          <div></div>
        </>
      </Show>
      <div></div>
      <div></div>
      <div></div>
    </div>
  );
}

export default MyBasicRefComponent;
"
`;

exports[`Solid > jsx > Javascript Test > BasicRef 2`] = `
"import { Show, createSignal } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";

function MyBasicRefComponent(props) {
  const [name, setName] = createSignal(\\"PatrickJS\\");

  function onBlur() {
    // Maintain focus
    inputRef.focus();
  }

  function lowerCaseName() {
    return name().toLowerCase();
  }

  return (
    <>
      <div>
        <div></div>
        <Show when={props.showInput}>
          <>
            <div></div>
            <input
              onblur={(event) => onBlur()}
              onchange={(event) => setName(event.target.value)}
            />
            <div></div>
            <label>
              <div></div>
            </label>
            <div></div>
            <select name=\\"cars\\">
              <div></div>
              <option>
                <div></div>
              </option>
              <div></div>
              <option>
                <div></div>
              </option>
              <div></div>
            </select>
            <div></div>
          </>
        </Show>
        <div></div>
        <div></div>
        <div></div>
      </div>
    </>
  );
}

export default MyBasicRefComponent;
"
`;

exports[`Solid > jsx > Javascript Test > BasicRefAssignment 1`] = `
"import { createSignal } from \\"solid-js\\";

function MyBasicRefAssignmentComponent(props) {
  function handlerClick(event) {
    event.preventDefault();
    console.log(\\"current value\\", holdValueRef);
    holdValueRef = holdValueRef + \\"JS\\";
  }

  return (
    <div>
      <div></div>
      <button onclick={(evt) => handlerClick(evt)}>
        <div></div>
      </button>
      <div></div>
    </div>
  );
}

export default MyBasicRefAssignmentComponent;
"
`;

exports[`Solid > jsx > Javascript Test > BasicRefAssignment 2`] = `
"import { createSignal } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";

function MyBasicRefAssignmentComponent(props) {
  function handlerClick(event) {
    event.preventDefault();
    console.log(\\"current value\\", holdValueRef);
    holdValueRef = holdValueRef + \\"JS\\";
  }

  return (
    <>
      <div>
        <div></div>
        <button onclick={(evt) => handlerClick(evt)}>
          <div></div>
        </button>
        <div></div>
      </div>
    </>
  );
}

export default MyBasicRefAssignmentComponent;
"
`;

exports[`Solid > jsx > Javascript Test > BasicRefPrevious 1`] = `
"import { on, createEffect, createSignal } from \\"solid-js\\";

export function usePrevious<T>(value: T) {
  // The ref object is a generic container whose current property is mutable ...
  // ... and can hold any value, similar to an instance property on a class
  let ref = useRef<T>(null); // Store current value in ref

  onUpdate(() => {
    ref = value;
  }, [value]); // Only re-run if value changes
  // Return previous value (happens before update in useEffect above)

  return ref;
}

function MyPreviousComponent(props) {
  const [count, setCount] = createSignal(0);

  function onUpdateFn_0() {
    prevCount = count();
  }
  createEffect(on(() => [count()], onUpdateFn_0));

  return (
    <div>
      <div></div>
      <h1>
        <div></div>
        <div></div>
        <div></div>
        <div></div>
        <div></div>
      </h1>
      <div></div>
      <button onclick={(event) => setCount(1)}>
        <div></div>
      </button>
      <div></div>
    </div>
  );
}

export default MyPreviousComponent;
"
`;

exports[`Solid > jsx > Javascript Test > BasicRefPrevious 2`] = `
"import { on, createEffect, createSignal } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";

export function usePrevious<T>(value: T) {
  // The ref object is a generic container whose current property is mutable ...
  // ... and can hold any value, similar to an instance property on a class
  let ref = useRef<T>(null); // Store current value in ref

  onUpdate(() => {
    ref = value;
  }, [value]); // Only re-run if value changes
  // Return previous value (happens before update in useEffect above)

  return ref;
}

function MyPreviousComponent(props) {
  const [count, setCount] = createSignal(0);

  function onUpdateFn_0() {
    prevCount = count();
  }
  createEffect(on(() => [count()], onUpdateFn_0));

  return (
    <>
      <div>
        <div></div>
        <h1>
          <div></div>
          <div></div>
          <div></div>
          <div></div>
          <div></div>
        </h1>
        <div></div>
        <button onclick={(event) => setCount(1)}>
          <div></div>
        </button>
        <div></div>
      </div>
    </>
  );
}

export default MyPreviousComponent;
"
`;

exports[`Solid > jsx > Javascript Test > Button 1`] = `
"import { Show } from \\"solid-js\\";

function Button(props) {
  return (
    <div>
      <div></div>
      <Show when={props.link}>
        <div></div>
        <a>
          <div></div>
          <div></div>
          <div></div>
        </a>
        <div></div>
      </Show>
      <div></div>
      <Show when={!props.link}>
        <div></div>
        <button>
          <div></div>
          <div></div>
          <div></div>
        </button>
        <div></div>
      </Show>
      <div></div>
    </div>
  );
}

export default Button;
"
`;

exports[`Solid > jsx > Javascript Test > Button 2`] = `
"import { Show } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";

function Button(props) {
  return (
    <>
      <div>
        <div></div>
        <Show when={props.link}>
          <div></div>
          <a>
            <div></div>
            <div></div>
            <div></div>
          </a>
          <div></div>
        </Show>
        <div></div>
        <Show when={!props.link}>
          <div></div>
          <button>
            <div></div>
            <div></div>
            <div></div>
          </button>
          <div></div>
        </Show>
        <div></div>
      </div>
    </>
  );
}

export default Button;
"
`;

exports[`Solid > jsx > Javascript Test > Columns 1`] = `
"import { For, createSignal } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";

function Column(props) {
  function getColumns() {
    return props.columns || [];
  }

  function getGutterSize() {
    return typeof props.space === \\"number\\" ? props.space || 0 : 20;
  }

  function getWidth(index) {
    const columns = getColumns();
    return (columns[index] && columns[index].width) || 100 / columns.length;
  }

  function getColumnCssWidth(index) {
    const columns = getColumns();
    const gutterSize = getGutterSize();
    const subtractWidth = (gutterSize * (columns.length - 1)) / columns.length;
    return \`calc(\${getWidth(index)}% - \${subtractWidth}px)\`;
  }

  return (
    <div>
      <div></div>
      <For each={props.columns}>
        {(column, _index) => {
          const index = _index();
          return (
            <div>
              <div></div>
              <div></div>
              <div></div>
              <div></div>
              <div></div>
            </div>
          );
        }}
      </For>
      <div></div>
    </div>
  );
}

export default Column;
"
`;

exports[`Solid > jsx > Javascript Test > Columns 2`] = `
"import { For, createSignal } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";

function Column(props) {
  function getColumns() {
    return props.columns || [];
  }

  function getGutterSize() {
    return typeof props.space === \\"number\\" ? props.space || 0 : 20;
  }

  function getWidth(index) {
    const columns = getColumns();
    return (columns[index] && columns[index].width) || 100 / columns.length;
  }

  function getColumnCssWidth(index) {
    const columns = getColumns();
    const gutterSize = getGutterSize();
    const subtractWidth = (gutterSize * (columns.length - 1)) / columns.length;
    return \`calc(\${getWidth(index)}% - \${subtractWidth}px)\`;
  }

  return (
    <>
      <div>
        <div></div>
        <For each={props.columns}>
          {(column, _index) => {
            const index = _index();
            return (
              <div>
                <div></div>
                <div></div>
                <div></div>
                <div></div>
                <div></div>
              </div>
            );
          }}
        </For>
        <div></div>
      </div>
    </>
  );
}

export default Column;
"
`;

exports[`Solid > jsx > Javascript Test > ContentSlotHtml 1`] = `
"function ContentSlotCode(props) {
  return (
    <div>
      <div></div>
      <Slot name={props.slotTesting}></Slot>
      <div></div>
      <div>
        <div></div>
        <hr />
        <div></div>
      </div>
      <div></div>
      <div>
        <div></div>
        <Slot></Slot>
        <div></div>
      </div>
      <div></div>
    </div>
  );
}

export default ContentSlotCode;
"
`;

exports[`Solid > jsx > Javascript Test > ContentSlotHtml 2`] = `
"import { css } from \\"solid-styled-components\\";

function ContentSlotCode(props) {
  return (
    <>
      <div>
        <div></div>
        <Slot name={props.slotTesting}></Slot>
        <div></div>
        <div>
          <div></div>
          <hr />
          <div></div>
        </div>
        <div></div>
        <div>
          <div></div>
          <Slot></Slot>
          <div></div>
        </div>
        <div></div>
      </div>
    </>
  );
}

export default ContentSlotCode;
"
`;

exports[`Solid > jsx > Javascript Test > ContentSlotJSX 1`] = `
"import { Show, createSignal } from \\"solid-js\\";

function ContentSlotJsxCode(props) {
  const [name, setName] = createSignal(\\"king\\");

  const [showContent, setShowContent] = createSignal(false);

  function cls() {
    return props.slotContent && props.children ? \`\${name()}-content\` : \\"\\";
  }

  function show() {
    props.slotContent ? 1 : \\"\\";
  }

  return (
    <Show when={props.slotReference}>
      <div></div>
      <div
        name={props.slotContent ? \\"name1\\" : \\"name2\\"}
        onclick={(event) => show()}
      >
        <div></div>
        <Show when={showContent() && props.slotContent}>
          <div></div>
          <Slot name=\\"content\\">
            <div></div>
          </Slot>
          <div></div>
        </Show>
        <div></div>
        <div>
          <div></div>
          <hr />
          <div></div>
        </div>
        <div></div>
        <div>
          <div></div>
        </div>
        <div></div>
      </div>
      <div></div>
    </Show>
  );
}

export default ContentSlotJsxCode;
"
`;

exports[`Solid > jsx > Javascript Test > ContentSlotJSX 2`] = `
"import { Show, createSignal } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";

function ContentSlotJsxCode(props) {
  const [name, setName] = createSignal(\\"king\\");

  const [showContent, setShowContent] = createSignal(false);

  function cls() {
    return props.slotContent && props.children ? \`\${name()}-content\` : \\"\\";
  }

  function show() {
    props.slotContent ? 1 : \\"\\";
  }

  return (
    <>
      <Show when={props.slotReference}>
        <div></div>
        <div
          name={props.slotContent ? \\"name1\\" : \\"name2\\"}
          onclick={(event) => show()}
        >
          <div></div>
          <Show when={showContent() && props.slotContent}>
            <div></div>
            <Slot name=\\"content\\">
              <div></div>
            </Slot>
            <div></div>
          </Show>
          <div></div>
          <div>
            <div></div>
            <hr />
            <div></div>
          </div>
          <div></div>
          <div>
            <div></div>
          </div>
          <div></div>
        </div>
        <div></div>
      </Show>
    </>
  );
}

export default ContentSlotJsxCode;
"
`;

exports[`Solid > jsx > Javascript Test > CustomCode 1`] = `
"import { onMount, createSignal } from \\"solid-js\\";

function CustomCode(props) {
  const [scriptsInserted, setScriptsInserted] = createSignal([]);

  const [scriptsRun, setScriptsRun] = createSignal([]);

  function findAndRunScripts() {
    // TODO: Move this function to standalone one in '@builder.io/utils'
    if (elem && typeof window !== \\"undefined\\") {
      /** @type {HTMLScriptElement[]} */
      const scripts = elem.getElementsByTagName(\\"script\\");

      for (let i = 0; i < scripts.length; i++) {
        const script = scripts[i];

        if (script.src) {
          if (scriptsInserted().includes(script.src)) {
            continue;
          }

          scriptsInserted().push(script.src);
          const newScript = document.createElement(\\"script\\");
          newScript.async = true;
          newScript.src = script.src;
          document.head.appendChild(newScript);
        } else if (
          !script.type ||
          [
            \\"text/javascript\\",
            \\"application/javascript\\",
            \\"application/ecmascript\\",
          ].includes(script.type)
        ) {
          if (scriptsRun().includes(script.innerText)) {
            continue;
          }

          try {
            scriptsRun().push(script.innerText);
            new Function(script.innerText)();
          } catch (error) {
            console.warn(\\"\`CustomCode\`: Error running script:\\", error);
          }
        }
      }
    }
  }

  onMount(() => {
    findAndRunScripts();
  });

  return <div innerhtml={props.code}></div>;
}

export default CustomCode;
"
`;

exports[`Solid > jsx > Javascript Test > CustomCode 2`] = `
"import { onMount, createSignal } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";

function CustomCode(props) {
  const [scriptsInserted, setScriptsInserted] = createSignal([]);

  const [scriptsRun, setScriptsRun] = createSignal([]);

  function findAndRunScripts() {
    // TODO: Move this function to standalone one in '@builder.io/utils'
    if (elem && typeof window !== \\"undefined\\") {
      /** @type {HTMLScriptElement[]} */
      const scripts = elem.getElementsByTagName(\\"script\\");

      for (let i = 0; i < scripts.length; i++) {
        const script = scripts[i];

        if (script.src) {
          if (scriptsInserted().includes(script.src)) {
            continue;
          }

          scriptsInserted().push(script.src);
          const newScript = document.createElement(\\"script\\");
          newScript.async = true;
          newScript.src = script.src;
          document.head.appendChild(newScript);
        } else if (
          !script.type ||
          [
            \\"text/javascript\\",
            \\"application/javascript\\",
            \\"application/ecmascript\\",
          ].includes(script.type)
        ) {
          if (scriptsRun().includes(script.innerText)) {
            continue;
          }

          try {
            scriptsRun().push(script.innerText);
            new Function(script.innerText)();
          } catch (error) {
            console.warn(\\"\`CustomCode\`: Error running script:\\", error);
          }
        }
      }
    }
  }

  onMount(() => {
    findAndRunScripts();
  });

  return (
    <>
      <div innerhtml={props.code}></div>
    </>
  );
}

export default CustomCode;
"
`;

exports[`Solid > jsx > Javascript Test > Embed 1`] = `
"import { onMount, createSignal } from \\"solid-js\\";

function CustomCode(props) {
  const [scriptsInserted, setScriptsInserted] = createSignal([]);

  const [scriptsRun, setScriptsRun] = createSignal([]);

  function findAndRunScripts() {
    // TODO: Move this function to standalone one in '@builder.io/utils'
    if (elem && typeof window !== \\"undefined\\") {
      /** @type {HTMLScriptElement[]} */
      const scripts = elem.getElementsByTagName(\\"script\\");

      for (let i = 0; i < scripts.length; i++) {
        const script = scripts[i];

        if (script.src) {
          if (scriptsInserted().includes(script.src)) {
            continue;
          }

          scriptsInserted().push(script.src);
          const newScript = document.createElement(\\"script\\");
          newScript.async = true;
          newScript.src = script.src;
          document.head.appendChild(newScript);
        } else if (
          !script.type ||
          [
            \\"text/javascript\\",
            \\"application/javascript\\",
            \\"application/ecmascript\\",
          ].includes(script.type)
        ) {
          if (scriptsRun().includes(script.innerText)) {
            continue;
          }

          try {
            scriptsRun().push(script.innerText);
            new Function(script.innerText)();
          } catch (error) {
            console.warn(\\"\`CustomCode\`: Error running script:\\", error);
          }
        }
      }
    }
  }

  onMount(() => {
    findAndRunScripts();
  });

  return <div innerhtml={props.code}></div>;
}

export default CustomCode;
"
`;

exports[`Solid > jsx > Javascript Test > Embed 2`] = `
"import { onMount, createSignal } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";

function CustomCode(props) {
  const [scriptsInserted, setScriptsInserted] = createSignal([]);

  const [scriptsRun, setScriptsRun] = createSignal([]);

  function findAndRunScripts() {
    // TODO: Move this function to standalone one in '@builder.io/utils'
    if (elem && typeof window !== \\"undefined\\") {
      /** @type {HTMLScriptElement[]} */
      const scripts = elem.getElementsByTagName(\\"script\\");

      for (let i = 0; i < scripts.length; i++) {
        const script = scripts[i];

        if (script.src) {
          if (scriptsInserted().includes(script.src)) {
            continue;
          }

          scriptsInserted().push(script.src);
          const newScript = document.createElement(\\"script\\");
          newScript.async = true;
          newScript.src = script.src;
          document.head.appendChild(newScript);
        } else if (
          !script.type ||
          [
            \\"text/javascript\\",
            \\"application/javascript\\",
            \\"application/ecmascript\\",
          ].includes(script.type)
        ) {
          if (scriptsRun().includes(script.innerText)) {
            continue;
          }

          try {
            scriptsRun().push(script.innerText);
            new Function(script.innerText)();
          } catch (error) {
            console.warn(\\"\`CustomCode\`: Error running script:\\", error);
          }
        }
      }
    }
  }

  onMount(() => {
    findAndRunScripts();
  });

  return (
    <>
      <div innerhtml={props.code}></div>
    </>
  );
}

export default CustomCode;
"
`;

exports[`Solid > jsx > Javascript Test > Form 1`] = `
"import { Show, For, createSignal } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";

import { BuilderBlock as BuilderBlockComponent } from \\"@fake\\";
import { Builder, builder } from \\"@builder.io/sdk\\";
import { BuilderBlocks } from \\"@fake\\";
import { set } from \\"@fake\\";
import { get } from \\"@fake\\";

function FormComponent(props) {
  const [formState, setFormState] = createSignal(\\"unsubmitted\\");

  const [responseData, setResponseData] = createSignal(null);

  const [formErrorMessage, setFormErrorMessage] = createSignal(\\"\\");

  function submissionState() {
    return (Builder.isEditing && props.previewState) || formState();
  }

  function onSubmit(event) {
    const sendWithJs = props.sendWithJs || props.sendSubmissionsTo === \\"email\\";

    if (props.sendSubmissionsTo === \\"zapier\\") {
      event.preventDefault();
    } else if (sendWithJs) {
      if (!(props.action || props.sendSubmissionsTo === \\"email\\")) {
        event.preventDefault();
        return;
      }

      event.preventDefault();
      const el = event.currentTarget;
      const headers = props.customHeaders || {};
      let body;
      const formData = new FormData(el); // TODO: maybe support null

      const formPairs = Array.from(
        event.currentTarget.querySelectorAll(\\"input,select,textarea\\")
      )
        .filter((el) => !!el.name)
        .map((el) => {
          let value;
          const key = el.name;

          if (el instanceof HTMLInputElement) {
            if (el.type === \\"radio\\") {
              if (el.checked) {
                value = el.name;
                return {
                  key,
                  value,
                };
              }
            } else if (el.type === \\"checkbox\\") {
              value = el.checked;
            } else if (el.type === \\"number\\" || el.type === \\"range\\") {
              const num = el.valueAsNumber;

              if (!isNaN(num)) {
                value = num;
              }
            } else if (el.type === \\"file\\") {
              // TODO: one vs multiple files
              value = el.files;
            } else {
              value = el.value;
            }
          } else {
            value = el.value;
          }

          return {
            key,
            value,
          };
        });
      let contentType = props.contentType;

      if (props.sendSubmissionsTo === \\"email\\") {
        contentType = \\"multipart/form-data\\";
      }

      Array.from(formPairs).forEach(({ value }) => {
        if (
          value instanceof File ||
          (Array.isArray(value) && value[0] instanceof File) ||
          value instanceof FileList
        ) {
          contentType = \\"multipart/form-data\\";
        }
      }); // TODO: send as urlEncoded or multipart by default
      // because of ease of use and reliability in browser API
      // for encoding the form?

      if (contentType !== \\"application/json\\") {
        body = formData;
      } else {
        // Json
        const json = {};
        Array.from(formPairs).forEach(({ value, key }) => {
          set(json, key, value);
        });
        body = JSON.stringify(json);
      }

      if (contentType && contentType !== \\"multipart/form-data\\") {
        if (
          /* Zapier doesn't allow content-type header to be sent from browsers */
          !(sendWithJs && props.action?.includes(\\"zapier.com\\"))
        ) {
          headers[\\"content-type\\"] = contentType;
        }
      }

      const presubmitEvent = new CustomEvent(\\"presubmit\\", {
        detail: {
          body,
        },
      });

      if (formRef) {
        formRef.dispatchEvent(presubmitEvent);

        if (presubmitEvent.defaultPrevented) {
          return;
        }
      }

      setFormState(\\"sending\\");
      const formUrl = \`\${
        builder.env === \\"dev\\" ? \\"http://localhost:5000\\" : \\"https://builder.io\\"
      }/api/v1/form-submit?apiKey=\${builder.apiKey}&to=\${btoa(
        props.sendSubmissionsToEmail || \\"\\"
      )}&name=\${encodeURIComponent(props.name || \\"\\")}\`;
      fetch(
        props.sendSubmissionsTo === \\"email\\" ? formUrl : props.action,
        /* TODO: throw error if no action URL */
        {
          body,
          headers,
          method: props.method || \\"post\\",
        }
      ).then(
        async (res) => {
          let body;
          const contentType = res.headers.get(\\"content-type\\");

          if (contentType && contentType.indexOf(\\"application/json\\") !== -1) {
            body = await res.json();
          } else {
            body = await res.text();
          }

          if (!res.ok && props.errorMessagePath) {
            /* TODO: allow supplying an error formatter function */
            let message = get(body, props.errorMessagePath);

            if (message) {
              if (typeof message !== \\"string\\") {
                /* TODO: ideally convert json to yaml so it woul dbe like
           error: - email has been taken */
                message = JSON.stringify(message);
              }

              setFormErrorMessage(message);
            }
          }

          setResponseData(body);
          setFormState(res.ok ? \\"success\\" : \\"error\\");

          if (res.ok) {
            const submitSuccessEvent = new CustomEvent(\\"submit:success\\", {
              detail: {
                res,
                body,
              },
            });

            if (formRef) {
              formRef.dispatchEvent(submitSuccessEvent);

              if (submitSuccessEvent.defaultPrevented) {
                return;
              }
              /* TODO: option to turn this on/off? */

              if (props.resetFormOnSubmit !== false) {
                formRef.reset();
              }
            }
            /* TODO: client side route event first that can be preventDefaulted */

            if (props.successUrl) {
              if (formRef) {
                const event = new CustomEvent(\\"route\\", {
                  detail: {
                    url: props.successUrl,
                  },
                });
                formRef.dispatchEvent(event);

                if (!event.defaultPrevented) {
                  location.href = props.successUrl;
                }
              } else {
                location.href = props.successUrl;
              }
            }
          }
        },
        (err) => {
          const submitErrorEvent = new CustomEvent(\\"submit:error\\", {
            detail: {
              error: err,
            },
          });

          if (formRef) {
            formRef.dispatchEvent(submitErrorEvent);

            if (submitErrorEvent.defaultPrevented) {
              return;
            }
          }

          setResponseData(err);
          setFormState(\\"error\\");
        }
      );
    }
  }

  return (
    <form name={props.name} onsubmit={(event) => onSubmit(event)}>
      <div></div>
      <Show when={props.builderBlock && props.builderBlock.children}>
        <div></div>
        <For each={props.builderBlock?.children}>
          {(block, _index) => {
            const index = _index();
            return (
              <BuilderBlockComponent
                key={block.id}
                block={block}
                index={index}
              ></BuilderBlockComponent>
            );
          }}
        </For>
        <div></div>
      </Show>
      <div></div>
      <Show when={submissionState() === \\"error\\"}>
        <div></div>
        <BuilderBlocks
          dataPath=\\"errorMessage\\"
          blocks={props.errorMessage}
        ></BuilderBlocks>
        <div></div>
      </Show>
      <div></div>
      <Show when={submissionState() === \\"sending\\"}>
        <div></div>
        <BuilderBlocks
          dataPath=\\"sendingMessage\\"
          blocks={props.sendingMessage}
        ></BuilderBlocks>
        <div></div>
      </Show>
      <div></div>
      <Show when={submissionState() === \\"error\\" && responseData()}>
        <div></div>
        <pre>
          <div></div>
          <div></div>
          <div></div>
        </pre>
        <div></div>
      </Show>
      <div></div>
      <Show when={submissionState() === \\"success\\"}>
        <div></div>
        <BuilderBlocks
          dataPath=\\"successMessage\\"
          blocks={props.successMessage}
        ></BuilderBlocks>
        <div></div>
      </Show>
      <div></div>
    </form>
  );
}

export default FormComponent;
"
`;

exports[`Solid > jsx > Javascript Test > Form 2`] = `
"import { Show, For, createSignal } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";

import { BuilderBlock as BuilderBlockComponent } from \\"@fake\\";
import { Builder, builder } from \\"@builder.io/sdk\\";
import { BuilderBlocks } from \\"@fake\\";
import { set } from \\"@fake\\";
import { get } from \\"@fake\\";

function FormComponent(props) {
  const [formState, setFormState] = createSignal(\\"unsubmitted\\");

  const [responseData, setResponseData] = createSignal(null);

  const [formErrorMessage, setFormErrorMessage] = createSignal(\\"\\");

  function submissionState() {
    return (Builder.isEditing && props.previewState) || formState();
  }

  function onSubmit(event) {
    const sendWithJs = props.sendWithJs || props.sendSubmissionsTo === \\"email\\";

    if (props.sendSubmissionsTo === \\"zapier\\") {
      event.preventDefault();
    } else if (sendWithJs) {
      if (!(props.action || props.sendSubmissionsTo === \\"email\\")) {
        event.preventDefault();
        return;
      }

      event.preventDefault();
      const el = event.currentTarget;
      const headers = props.customHeaders || {};
      let body;
      const formData = new FormData(el); // TODO: maybe support null

      const formPairs = Array.from(
        event.currentTarget.querySelectorAll(\\"input,select,textarea\\")
      )
        .filter((el) => !!el.name)
        .map((el) => {
          let value;
          const key = el.name;

          if (el instanceof HTMLInputElement) {
            if (el.type === \\"radio\\") {
              if (el.checked) {
                value = el.name;
                return {
                  key,
                  value,
                };
              }
            } else if (el.type === \\"checkbox\\") {
              value = el.checked;
            } else if (el.type === \\"number\\" || el.type === \\"range\\") {
              const num = el.valueAsNumber;

              if (!isNaN(num)) {
                value = num;
              }
            } else if (el.type === \\"file\\") {
              // TODO: one vs multiple files
              value = el.files;
            } else {
              value = el.value;
            }
          } else {
            value = el.value;
          }

          return {
            key,
            value,
          };
        });
      let contentType = props.contentType;

      if (props.sendSubmissionsTo === \\"email\\") {
        contentType = \\"multipart/form-data\\";
      }

      Array.from(formPairs).forEach(({ value }) => {
        if (
          value instanceof File ||
          (Array.isArray(value) && value[0] instanceof File) ||
          value instanceof FileList
        ) {
          contentType = \\"multipart/form-data\\";
        }
      }); // TODO: send as urlEncoded or multipart by default
      // because of ease of use and reliability in browser API
      // for encoding the form?

      if (contentType !== \\"application/json\\") {
        body = formData;
      } else {
        // Json
        const json = {};
        Array.from(formPairs).forEach(({ value, key }) => {
          set(json, key, value);
        });
        body = JSON.stringify(json);
      }

      if (contentType && contentType !== \\"multipart/form-data\\") {
        if (
          /* Zapier doesn't allow content-type header to be sent from browsers */
          !(sendWithJs && props.action?.includes(\\"zapier.com\\"))
        ) {
          headers[\\"content-type\\"] = contentType;
        }
      }

      const presubmitEvent = new CustomEvent(\\"presubmit\\", {
        detail: {
          body,
        },
      });

      if (formRef) {
        formRef.dispatchEvent(presubmitEvent);

        if (presubmitEvent.defaultPrevented) {
          return;
        }
      }

      setFormState(\\"sending\\");
      const formUrl = \`\${
        builder.env === \\"dev\\" ? \\"http://localhost:5000\\" : \\"https://builder.io\\"
      }/api/v1/form-submit?apiKey=\${builder.apiKey}&to=\${btoa(
        props.sendSubmissionsToEmail || \\"\\"
      )}&name=\${encodeURIComponent(props.name || \\"\\")}\`;
      fetch(
        props.sendSubmissionsTo === \\"email\\" ? formUrl : props.action,
        /* TODO: throw error if no action URL */
        {
          body,
          headers,
          method: props.method || \\"post\\",
        }
      ).then(
        async (res) => {
          let body;
          const contentType = res.headers.get(\\"content-type\\");

          if (contentType && contentType.indexOf(\\"application/json\\") !== -1) {
            body = await res.json();
          } else {
            body = await res.text();
          }

          if (!res.ok && props.errorMessagePath) {
            /* TODO: allow supplying an error formatter function */
            let message = get(body, props.errorMessagePath);

            if (message) {
              if (typeof message !== \\"string\\") {
                /* TODO: ideally convert json to yaml so it woul dbe like
           error: - email has been taken */
                message = JSON.stringify(message);
              }

              setFormErrorMessage(message);
            }
          }

          setResponseData(body);
          setFormState(res.ok ? \\"success\\" : \\"error\\");

          if (res.ok) {
            const submitSuccessEvent = new CustomEvent(\\"submit:success\\", {
              detail: {
                res,
                body,
              },
            });

            if (formRef) {
              formRef.dispatchEvent(submitSuccessEvent);

              if (submitSuccessEvent.defaultPrevented) {
                return;
              }
              /* TODO: option to turn this on/off? */

              if (props.resetFormOnSubmit !== false) {
                formRef.reset();
              }
            }
            /* TODO: client side route event first that can be preventDefaulted */

            if (props.successUrl) {
              if (formRef) {
                const event = new CustomEvent(\\"route\\", {
                  detail: {
                    url: props.successUrl,
                  },
                });
                formRef.dispatchEvent(event);

                if (!event.defaultPrevented) {
                  location.href = props.successUrl;
                }
              } else {
                location.href = props.successUrl;
              }
            }
          }
        },
        (err) => {
          const submitErrorEvent = new CustomEvent(\\"submit:error\\", {
            detail: {
              error: err,
            },
          });

          if (formRef) {
            formRef.dispatchEvent(submitErrorEvent);

            if (submitErrorEvent.defaultPrevented) {
              return;
            }
          }

          setResponseData(err);
          setFormState(\\"error\\");
        }
      );
    }
  }

  return (
    <>
      <form name={props.name} onsubmit={(event) => onSubmit(event)}>
        <div></div>
        <Show when={props.builderBlock && props.builderBlock.children}>
          <div></div>
          <For each={props.builderBlock?.children}>
            {(block, _index) => {
              const index = _index();
              return (
                <BuilderBlockComponent
                  key={block.id}
                  block={block}
                  index={index}
                ></BuilderBlockComponent>
              );
            }}
          </For>
          <div></div>
        </Show>
        <div></div>
        <Show when={submissionState() === \\"error\\"}>
          <div></div>
          <BuilderBlocks
            dataPath=\\"errorMessage\\"
            blocks={props.errorMessage}
          ></BuilderBlocks>
          <div></div>
        </Show>
        <div></div>
        <Show when={submissionState() === \\"sending\\"}>
          <div></div>
          <BuilderBlocks
            dataPath=\\"sendingMessage\\"
            blocks={props.sendingMessage}
          ></BuilderBlocks>
          <div></div>
        </Show>
        <div></div>
        <Show when={submissionState() === \\"error\\" && responseData()}>
          <div></div>
          <pre>
            <div></div>
            <div></div>
            <div></div>
          </pre>
          <div></div>
        </Show>
        <div></div>
        <Show when={submissionState() === \\"success\\"}>
          <div></div>
          <BuilderBlocks
            dataPath=\\"successMessage\\"
            blocks={props.successMessage}
          ></BuilderBlocks>
          <div></div>
        </Show>
        <div></div>
      </form>
    </>
  );
}

export default FormComponent;
"
`;

exports[`Solid > jsx > Javascript Test > Image 1`] = `
"import { Show, onMount, createSignal } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";

function Image(props) {
  const [scrollListener, setScrollListener] = createSignal(null);

  const [imageLoaded, setImageLoaded] = createSignal(false);

  const [load, setLoad] = createSignal(false);

  function setLoaded() {
    setImageLoaded(true);
  }

  function useLazyLoading() {
    // TODO: Add more checks here, like testing for real web browsers
    return !!props.lazy && isBrowser();
  }

  function isBrowser() {
    return (
      typeof window !== \\"undefined\\" && window.navigator.product != \\"ReactNative\\"
    );
  }

  onMount(() => {
    if (useLazyLoading()) {
      // throttled scroll capture listener
      const listener = () => {
        if (pictureRef) {
          const rect = pictureRef.getBoundingClientRect();
          const buffer = window.innerHeight / 2;

          if (rect.top < window.innerHeight + buffer) {
            setLoad(true);
            setScrollListener(null);
            window.removeEventListener(\\"scroll\\", listener);
          }
        }
      };

      setScrollListener(listener);
      window.addEventListener(\\"scroll\\", listener, {
        capture: true,
        passive: true,
      });
      listener();
    }
  });

  return (
    <div>
      <div></div>
      <picture>
        <div></div>
        <Show when={!useLazyLoading() || load()}>
          <div></div>
          <img
            aria-role={props.altText ? \\"presentation\\" : undefined}
            onload={(event) => setLoaded()}
          />
          <div></div>
        </Show>
        <div></div>
        <source />
        <div></div>
      </picture>
      <div></div>
      <div></div>
      <div></div>
    </div>
  );
}

export default Image;
"
`;

exports[`Solid > jsx > Javascript Test > Image 2`] = `
"import { Show, onMount, createSignal } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";

function Image(props) {
  const [scrollListener, setScrollListener] = createSignal(null);

  const [imageLoaded, setImageLoaded] = createSignal(false);

  const [load, setLoad] = createSignal(false);

  function setLoaded() {
    setImageLoaded(true);
  }

  function useLazyLoading() {
    // TODO: Add more checks here, like testing for real web browsers
    return !!props.lazy && isBrowser();
  }

  function isBrowser() {
    return (
      typeof window !== \\"undefined\\" && window.navigator.product != \\"ReactNative\\"
    );
  }

  onMount(() => {
    if (useLazyLoading()) {
      // throttled scroll capture listener
      const listener = () => {
        if (pictureRef) {
          const rect = pictureRef.getBoundingClientRect();
          const buffer = window.innerHeight / 2;

          if (rect.top < window.innerHeight + buffer) {
            setLoad(true);
            setScrollListener(null);
            window.removeEventListener(\\"scroll\\", listener);
          }
        }
      };

      setScrollListener(listener);
      window.addEventListener(\\"scroll\\", listener, {
        capture: true,
        passive: true,
      });
      listener();
    }
  });

  return (
    <>
      <div>
        <div></div>
        <picture>
          <div></div>
          <Show when={!useLazyLoading() || load()}>
            <div></div>
            <img
              aria-role={props.altText ? \\"presentation\\" : undefined}
              onload={(event) => setLoaded()}
            />
            <div></div>
          </Show>
          <div></div>
          <source />
          <div></div>
        </picture>
        <div></div>
        <div></div>
        <div></div>
      </div>
    </>
  );
}

export default Image;
"
`;

exports[`Solid > jsx > Javascript Test > Image State 1`] = `
"import { For, createSignal } from \\"solid-js\\";

function ImgStateComponent(props) {
  const [canShow, setCanShow] = createSignal(true);

  const [images, setImages] = createSignal([\\"http://example.com/qwik.png\\"]);

  return (
    <div>
      <div></div>
      <For each={images()}>
        {(item, _index) => {
          const itemIndex = _index();
          return (
            <>
              <div></div>
              <img />
              <div></div>
            </>
          );
        }}
      </For>
      <div></div>
    </div>
  );
}

export default ImgStateComponent;
"
`;

exports[`Solid > jsx > Javascript Test > Image State 2`] = `
"import { For, createSignal } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";

function ImgStateComponent(props) {
  const [canShow, setCanShow] = createSignal(true);

  const [images, setImages] = createSignal([\\"http://example.com/qwik.png\\"]);

  return (
    <>
      <div>
        <div></div>
        <For each={images()}>
          {(item, _index) => {
            const itemIndex = _index();
            return (
              <>
                <div></div>
                <img />
                <div></div>
              </>
            );
          }}
        </For>
        <div></div>
      </div>
    </>
  );
}

export default ImgStateComponent;
"
`;

exports[`Solid > jsx > Javascript Test > Img 1`] = `
"import { Builder } from \\"@builder.io/sdk\\";

function ImgComponent(props) {
  return <img />;
}

export default ImgComponent;
"
`;

exports[`Solid > jsx > Javascript Test > Img 2`] = `
"import { css } from \\"solid-styled-components\\";

import { Builder } from \\"@builder.io/sdk\\";

function ImgComponent(props) {
  return (
    <>
      <img />
    </>
  );
}

export default ImgComponent;
"
`;

exports[`Solid > jsx > Javascript Test > Input 1`] = `
"import { Builder } from \\"@builder.io/sdk\\";

function FormInputComponent(props) {
  return <input name={props.name} defaultvalue={props.defaultValue} />;
}

export default FormInputComponent;
"
`;

exports[`Solid > jsx > Javascript Test > Input 2`] = `
"import { css } from \\"solid-styled-components\\";

import { Builder } from \\"@builder.io/sdk\\";

function FormInputComponent(props) {
  return (
    <>
      <input name={props.name} defaultvalue={props.defaultValue} />
    </>
  );
}

export default FormInputComponent;
"
`;

exports[`Solid > jsx > Javascript Test > RawText 1`] = `
"function RawText(props) {
  return <span innerhtml={props.text || \\"\\"}></span>;
}

export default RawText;
"
`;

exports[`Solid > jsx > Javascript Test > RawText 2`] = `
"import { css } from \\"solid-styled-components\\";

function RawText(props) {
  return (
    <>
      <span innerhtml={props.text || \\"\\"}></span>
    </>
  );
}

export default RawText;
"
`;

exports[`Solid > jsx > Javascript Test > Section 1`] = `
"function SectionComponent(props) {
  return (
    <section>
      <div></div>
      <div></div>
      <div></div>
    </section>
  );
}

export default SectionComponent;
"
`;

exports[`Solid > jsx > Javascript Test > Section 2`] = `
"import { Show, For, createSignal } from \\"solid-js\\";

function SectionStateComponent(props) {
  const [max, setMax] = createSignal(42);

  const [items, setItems] = createSignal([42]);

  return (
    <Show when={max()}>
      <div></div>
      <For each={items()}>
        {(item, _index) => {
          const index = _index();
          return (
            <section>
              <div></div>
              <div></div>
              <div></div>
            </section>
          );
        }}
      </For>
      <div></div>
    </Show>
  );
}

export default SectionStateComponent;
"
`;

exports[`Solid > jsx > Javascript Test > Section 3`] = `
"import { css } from \\"solid-styled-components\\";

function SectionComponent(props) {
  return (
    <>
      <section>
        <div></div>
        <div></div>
        <div></div>
      </section>
    </>
  );
}

export default SectionComponent;
"
`;

exports[`Solid > jsx > Javascript Test > Section 4`] = `
"import { Show, For, createSignal } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";

function SectionStateComponent(props) {
  const [max, setMax] = createSignal(42);

  const [items, setItems] = createSignal([42]);

  return (
    <>
      <Show when={max()}>
        <div></div>
        <For each={items()}>
          {(item, _index) => {
            const index = _index();
            return (
              <section>
                <div></div>
                <div></div>
                <div></div>
              </section>
            );
          }}
        </For>
        <div></div>
      </Show>
    </>
  );
}

export default SectionStateComponent;
"
`;

exports[`Solid > jsx > Javascript Test > Select 1`] = `
"import { For } from \\"solid-js\\";

import { Builder } from \\"@builder.io/sdk\\";

function SelectComponent(props) {
  return (
    <select name={props.name} defaultvalue={props.defaultValue}>
      <div></div>
      <For each={props.options}>
        {(option, _index) => {
          const index = _index();
          return (
            <option data-index={index}>
              <div></div>
              <div></div>
              <div></div>
            </option>
          );
        }}
      </For>
      <div></div>
    </select>
  );
}

export default SelectComponent;
"
`;

exports[`Solid > jsx > Javascript Test > Select 2`] = `
"import { For } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";

import { Builder } from \\"@builder.io/sdk\\";

function SelectComponent(props) {
  return (
    <>
      <select name={props.name} defaultvalue={props.defaultValue}>
        <div></div>
        <For each={props.options}>
          {(option, _index) => {
            const index = _index();
            return (
              <option data-index={index}>
                <div></div>
                <div></div>
                <div></div>
              </option>
            );
          }}
        </For>
        <div></div>
      </select>
    </>
  );
}

export default SelectComponent;
"
`;

exports[`Solid > jsx > Javascript Test > SlotDefault 1`] = `
"function SlotCode(props) {
  return (
    <div>
      <div></div>
      <Slot>
        <div></div>
        <div>
          <div></div>
        </div>
        <div></div>
      </Slot>
      <div></div>
    </div>
  );
}

export default SlotCode;
"
`;

exports[`Solid > jsx > Javascript Test > SlotDefault 2`] = `
"import { css } from \\"solid-styled-components\\";

function SlotCode(props) {
  return (
    <>
      <div>
        <div></div>
        <Slot>
          <div></div>
          <div>
            <div></div>
          </div>
          <div></div>
        </Slot>
        <div></div>
      </div>
    </>
  );
}

export default SlotCode;
"
`;

exports[`Solid > jsx > Javascript Test > SlotHtml 1`] = `
"import ContentSlotCode from \\"./content-slot-jsx.raw\\";

function SlotCode(props) {
  return (
    <div>
      <div></div>
      <ContentSlotCode>
        <div></div>
        <Slot testing={<div>Hello</div>}></Slot>
        <div></div>
      </ContentSlotCode>
      <div></div>
    </div>
  );
}

export default SlotCode;
"
`;

exports[`Solid > jsx > Javascript Test > SlotHtml 2`] = `
"import { css } from \\"solid-styled-components\\";

import ContentSlotCode from \\"./content-slot-jsx.raw\\";

function SlotCode(props) {
  return (
    <>
      <div>
        <div></div>
        <ContentSlotCode>
          <div></div>
          <Slot testing={<div>Hello</div>}></Slot>
          <div></div>
        </ContentSlotCode>
        <div></div>
      </div>
    </>
  );
}

export default SlotCode;
"
`;

exports[`Solid > jsx > Javascript Test > SlotJsx 1`] = `
"import ContentSlotCode from \\"./content-slot-jsx.raw\\";

function SlotCode(props) {
  return (
    <div>
      <div></div>
      <ContentSlotCode slotTesting={<div>Hello</div>}></ContentSlotCode>
      <div></div>
    </div>
  );
}

export default SlotCode;
"
`;

exports[`Solid > jsx > Javascript Test > SlotJsx 2`] = `
"import { css } from \\"solid-styled-components\\";

import ContentSlotCode from \\"./content-slot-jsx.raw\\";

function SlotCode(props) {
  return (
    <>
      <div>
        <div></div>
        <ContentSlotCode slotTesting={<div>Hello</div>}></ContentSlotCode>
        <div></div>
      </div>
    </>
  );
}

export default SlotCode;
"
`;

exports[`Solid > jsx > Javascript Test > SlotNamed 1`] = `
"function SlotCode(props) {
  return (
    <div>
      <div></div>
      <Slot name=\\"top\\"></Slot>
      <div></div>
      <Slot name=\\"left\\">
        <div></div>
      </Slot>
      <div></div>
      <Slot>
        <div></div>
      </Slot>
      <div></div>
    </div>
  );
}

export default SlotCode;
"
`;

exports[`Solid > jsx > Javascript Test > SlotNamed 2`] = `
"import { css } from \\"solid-styled-components\\";

function SlotCode(props) {
  return (
    <>
      <div>
        <div></div>
        <Slot name=\\"top\\"></Slot>
        <div></div>
        <Slot name=\\"left\\">
          <div></div>
        </Slot>
        <div></div>
        <Slot>
          <div></div>
        </Slot>
        <div></div>
      </div>
    </>
  );
}

export default SlotCode;
"
`;

exports[`Solid > jsx > Javascript Test > Stamped.io 1`] = `
"import { Show, For, onMount, createSignal } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";

import { kebabCase } from \\"lodash\\";
import { snakeCase } from \\"lodash\\";

function SmileReviews(props) {
  const [reviews, setReviews] = createSignal([]);

  const [name, setName] = createSignal(\\"test\\");

  const [showReviewPrompt, setShowReviewPrompt] = createSignal(false);

  function kebabCaseValue() {
    return kebabCase(\\"testThat\\");
  }

  function snakeCaseValue() {
    return snakeCase(\\"testThis\\");
  }

  onMount(() => {
    fetch(
      \`https://stamped.io/api/widget/reviews?storeUrl=builder-io.myshopify.com&apiKey=\${
        props.apiKey || \\"pubkey-8bbDq7W6w4sB3OWeM1HUy2s47702hM\\"
      }&productId=\${props.productId || \\"2410511106127\\"}\`
    )
      .then((res) => res.json())
      .then((data) => {
        setReviews(data.data);
      });
  });

  return (
    <div data-user={name()}>
      <div></div>
      <button onclick={(event) => setShowReviewPrompt(true)}>
        <div></div>
      </button>
      <div></div>
      <Show when={showReviewPrompt() || \\"asdf\\"}>
        <div></div>
        <input />
        <div></div>
        <input />
        <div></div>
        <textarea></textarea>
        <div></div>
        <button
          onclick={(event) => {
            event.preventDefault();
            setShowReviewPrompt(false);
          }}
        >
          <div></div>
        </button>
        <div></div>
      </Show>
      <div></div>
      <For each={reviews()}>
        {(review, _index) => {
          const index = _index();
          return (
            <div>
              <div></div>
              <img />
              <div></div>
              <div>
                <div></div>
                <div>
                  <div></div>
                  <div></div>
                </div>
                <div></div>
                <div>
                  <div></div>
                </div>
                <div></div>
                <div>
                  <div></div>
                </div>
                <div></div>
              </div>
              <div></div>
            </div>
          );
        }}
      </For>
      <div></div>
    </div>
  );
}

export default SmileReviews;
"
`;

exports[`Solid > jsx > Javascript Test > Stamped.io 2`] = `
"import { Show, For, onMount, createSignal } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";

import { kebabCase } from \\"lodash\\";
import { snakeCase } from \\"lodash\\";

function SmileReviews(props) {
  const [reviews, setReviews] = createSignal([]);

  const [name, setName] = createSignal(\\"test\\");

  const [showReviewPrompt, setShowReviewPrompt] = createSignal(false);

  function kebabCaseValue() {
    return kebabCase(\\"testThat\\");
  }

  function snakeCaseValue() {
    return snakeCase(\\"testThis\\");
  }

  onMount(() => {
    fetch(
      \`https://stamped.io/api/widget/reviews?storeUrl=builder-io.myshopify.com&apiKey=\${
        props.apiKey || \\"pubkey-8bbDq7W6w4sB3OWeM1HUy2s47702hM\\"
      }&productId=\${props.productId || \\"2410511106127\\"}\`
    )
      .then((res) => res.json())
      .then((data) => {
        setReviews(data.data);
      });
  });

  return (
    <>
      <div data-user={name()}>
        <div></div>
        <button onclick={(event) => setShowReviewPrompt(true)}>
          <div></div>
        </button>
        <div></div>
        <Show when={showReviewPrompt() || \\"asdf\\"}>
          <div></div>
          <input />
          <div></div>
          <input />
          <div></div>
          <textarea></textarea>
          <div></div>
          <button
            onclick={(event) => {
              event.preventDefault();
              setShowReviewPrompt(false);
            }}
          >
            <div></div>
          </button>
          <div></div>
        </Show>
        <div></div>
        <For each={reviews()}>
          {(review, _index) => {
            const index = _index();
            return (
              <div>
                <div></div>
                <img />
                <div></div>
                <div>
                  <div></div>
                  <div>
                    <div></div>
                    <div></div>
                  </div>
                  <div></div>
                  <div>
                    <div></div>
                  </div>
                  <div></div>
                  <div>
                    <div></div>
                  </div>
                  <div></div>
                </div>
                <div></div>
              </div>
            );
          }}
        </For>
        <div></div>
      </div>
    </>
  );
}

export default SmileReviews;
"
`;

exports[`Solid > jsx > Javascript Test > Submit 1`] = `
"function SubmitButton(props) {
  return (
    <button>
      <div></div>
      <div></div>
      <div></div>
    </button>
  );
}

export default SubmitButton;
"
`;

exports[`Solid > jsx > Javascript Test > Submit 2`] = `
"import { css } from \\"solid-styled-components\\";

function SubmitButton(props) {
  return (
    <>
      <button>
        <div></div>
        <div></div>
        <div></div>
      </button>
    </>
  );
}

export default SubmitButton;
"
`;

exports[`Solid > jsx > Javascript Test > Text 1`] = `
"import { createSignal } from \\"solid-js\\";

import { Builder } from \\"@builder.io/sdk\\";

function Text(props) {
  const [name, setName] = createSignal(\\"Decadef20\\");

  return (
    <div
      data-name={{
        test: name() || \\"any name\\",
      }}
      contenteditable={allowEditingText || undefined}
      innerhtml={
        props.text ||
        props.content ||
        name() ||
        '<p class=\\"text-lg\\">my name</p>'
      }
    ></div>
  );
}

export default Text;
"
`;

exports[`Solid > jsx > Javascript Test > Text 2`] = `
"import { createSignal } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";

import { Builder } from \\"@builder.io/sdk\\";

function Text(props) {
  const [name, setName] = createSignal(\\"Decadef20\\");

  return (
    <>
      <div
        data-name={{
          test: name() || \\"any name\\",
        }}
        contenteditable={allowEditingText || undefined}
        innerhtml={
          props.text ||
          props.content ||
          name() ||
          '<p class=\\"text-lg\\">my name</p>'
        }
      ></div>
    </>
  );
}

export default Text;
"
`;

exports[`Solid > jsx > Javascript Test > Textarea 1`] = `
"function Textarea(props) {
  return (
    <textarea name={props.name} defaultvalue={props.defaultValue}></textarea>
  );
}

export default Textarea;
"
`;

exports[`Solid > jsx > Javascript Test > Textarea 2`] = `
"import { css } from \\"solid-styled-components\\";

function Textarea(props) {
  return (
    <>
      <textarea name={props.name} defaultvalue={props.defaultValue}></textarea>
    </>
  );
}

export default Textarea;
"
`;

exports[`Solid > jsx > Javascript Test > Video 1`] = `
"function Video(props) {
  return <video></video>;
}

export default Video;
"
`;

exports[`Solid > jsx > Javascript Test > Video 2`] = `
"import { css } from \\"solid-styled-components\\";

function Video(props) {
  return (
    <>
      <video></video>
    </>
  );
}

export default Video;
"
`;

exports[`Solid > jsx > Javascript Test > arrowFunctionInUseStore 1`] = `
"import { createSignal } from \\"solid-js\\";

function MyComponent(props) {
  const [name, setName] = createSignal(\\"steve\\");

  function setName(value) {
    setName(value);
  }

  function updateNameWithArrowFn(value) {
    setName(value);
  }

  return (
    <div>
      <div></div>
      <div></div>
    </div>
  );
}

export default MyComponent;
"
`;

exports[`Solid > jsx > Javascript Test > arrowFunctionInUseStore 2`] = `
"import { createSignal } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";

function MyComponent(props) {
  const [name, setName] = createSignal(\\"steve\\");

  function setName(value) {
    setName(value);
  }

  function updateNameWithArrowFn(value) {
    setName(value);
  }

  return (
    <>
      <div>
        <div></div>
        <div></div>
      </div>
    </>
  );
}

export default MyComponent;
"
`;

exports[`Solid > jsx > Javascript Test > basicOnUpdateReturn 1`] = `
"import { on, createEffect, createSignal } from \\"solid-js\\";

function MyBasicOnUpdateReturnComponent(props) {
  const [name, setName] = createSignal(\\"PatrickJS\\");

  function onUpdateFn_0() {
    const controller = new AbortController();
    const signal = controller.signal;
    fetch(\\"https://patrickjs.com/api/resource.json\\", {
      signal,
    })
      .then((response) => response.json())
      .then((data) => {
        setName(data.name);
      });
    return () => {
      if (!signal.aborted) {
        controller.abort();
      }
    };
  }
  createEffect(on(() => [name()], onUpdateFn_0));

  return (
    <div>
      <div></div>
      <div></div>
    </div>
  );
}

export default MyBasicOnUpdateReturnComponent;
"
`;

exports[`Solid > jsx > Javascript Test > basicOnUpdateReturn 2`] = `
"import { on, createEffect, createSignal } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";

function MyBasicOnUpdateReturnComponent(props) {
  const [name, setName] = createSignal(\\"PatrickJS\\");

  function onUpdateFn_0() {
    const controller = new AbortController();
    const signal = controller.signal;
    fetch(\\"https://patrickjs.com/api/resource.json\\", {
      signal,
    })
      .then((response) => response.json())
      .then((data) => {
        setName(data.name);
      });
    return () => {
      if (!signal.aborted) {
        controller.abort();
      }
    };
  }
  createEffect(on(() => [name()], onUpdateFn_0));

  return (
    <>
      <div>
        <div></div>
        <div></div>
      </div>
    </>
  );
}

export default MyBasicOnUpdateReturnComponent;
"
`;

exports[`Solid > jsx > Javascript Test > camelCasedAttributes 1`] = `
"import { createSignal } from \\"solid-js\\";

import React from \\"@builder.io/react\\";

function MyComponent(props) {
  const [name, setName] = createSignal(\\"Steve\\");

  return (
    <div>
      <div></div>
      <img srcset=\\"http://example.com\\" />
      <div></div>
    </div>
  );
}

export default MyComponent;
"
`;

exports[`Solid > jsx > Javascript Test > camelCasedAttributes 2`] = `
"import { createSignal } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";

import React from \\"@builder.io/react\\";

function MyComponent(props) {
  const [name, setName] = createSignal(\\"Steve\\");

  return (
    <>
      <div>
        <div></div>
        <img srcset=\\"http://example.com\\" />
        <div></div>
      </div>
    </>
  );
}

export default MyComponent;
"
`;

exports[`Solid > jsx > Javascript Test > class + ClassName + css 1`] = `
"import { css } from \\"solid-styled-components\\";

function MyBasicComponent(props) {
  return (
    <div>
      <div></div>
    </div>
  );
}

export default MyBasicComponent;
"
`;

exports[`Solid > jsx > Javascript Test > class + ClassName + css 2`] = `
"import { css } from \\"solid-styled-components\\";

function MyBasicComponent(props) {
  return (
    <>
      <div>
        <div></div>
      </div>
    </>
  );
}

export default MyBasicComponent;
"
`;

exports[`Solid > jsx > Javascript Test > class + css 1`] = `
"import { css } from \\"solid-styled-components\\";

function MyBasicComponent(props) {
  return (
    <div>
      <div></div>
    </div>
  );
}

export default MyBasicComponent;
"
`;

exports[`Solid > jsx > Javascript Test > class + css 2`] = `
"import { css } from \\"solid-styled-components\\";

function MyBasicComponent(props) {
  return (
    <>
      <div>
        <div></div>
      </div>
    </>
  );
}

export default MyBasicComponent;
"
`;

exports[`Solid > jsx > Javascript Test > className + css 1`] = `
"import { css } from \\"solid-styled-components\\";

function MyBasicComponent(props) {
  return (
    <div>
      <div></div>
    </div>
  );
}

export default MyBasicComponent;
"
`;

exports[`Solid > jsx > Javascript Test > className + css 2`] = `
"import { css } from \\"solid-styled-components\\";

function MyBasicComponent(props) {
  return (
    <>
      <div>
        <div></div>
      </div>
    </>
  );
}

export default MyBasicComponent;
"
`;

exports[`Solid > jsx > Javascript Test > className 1`] = `
"import { createSignal } from \\"solid-js\\";

function ClassNameCode(props) {
  const [bindings, setBindings] = createSignal(\\"a binding\\");

  return (
    <div>
      <div></div>
      <div></div>
      <div>
        <div></div>
      </div>
      <div></div>
      <div></div>
      <div>
        <div></div>
      </div>
      <div></div>
    </div>
  );
}

export default ClassNameCode;
"
`;

exports[`Solid > jsx > Javascript Test > className 2`] = `
"import { createSignal } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";

function ClassNameCode(props) {
  const [bindings, setBindings] = createSignal(\\"a binding\\");

  return (
    <>
      <div>
        <div></div>
        <div></div>
        <div>
          <div></div>
        </div>
        <div></div>
        <div></div>
        <div>
          <div></div>
        </div>
        <div></div>
      </div>
    </>
  );
}

export default ClassNameCode;
"
`;

exports[`Solid > jsx > Javascript Test > classState 1`] = `
"import { createSignal } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";

function MyBasicComponent(props) {
  const [classState, setClassState] = createSignal(\\"testClassName\\");

  const [styleState, setStyleState] = createSignal({
    color: \\"red\\",
  });

  return (
    <div>
      <div></div>
    </div>
  );
}

export default MyBasicComponent;
"
`;

exports[`Solid > jsx > Javascript Test > classState 2`] = `
"import { createSignal } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";

function MyBasicComponent(props) {
  const [classState, setClassState] = createSignal(\\"testClassName\\");

  const [styleState, setStyleState] = createSignal({
    color: \\"red\\",
  });

  return (
    <>
      <div>
        <div></div>
      </div>
    </>
  );
}

export default MyBasicComponent;
"
`;

exports[`Solid > jsx > Javascript Test > componentWithContext 1`] = `
"import { useContext } from \\"solid-js\\";

import Context1 from \\"@dummy/1\\";
import Context2 from \\"@dummy/2\\";

function ComponentWithContext(props) {
  const foo = useContext(Context1);

  return (
    <Context2.Provider
      value={{
        bar: \\"baz\\",
      }}
    >
      <Context1.Provider
        value={{
          foo: \\"bar\\",

          content() {
            return props.content;
          },
        }}
      >
        <>
          <div></div>
          <>
            <div></div>
          </>
          <div></div>
        </>
      </Context1.Provider>
    </Context2.Provider>
  );
}

export default ComponentWithContext;
"
`;

exports[`Solid > jsx > Javascript Test > componentWithContext 2`] = `
"import { useContext } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";

import Context1 from \\"@dummy/1\\";
import Context2 from \\"@dummy/2\\";

function ComponentWithContext(props) {
  const foo = useContext(Context1);

  return (
    <>
      <Context2.Provider
        value={{
          bar: \\"baz\\",
        }}
      >
        <Context1.Provider
          value={{
            foo: \\"bar\\",

            content() {
              return props.content;
            },
          }}
        >
          <>
            <div></div>
            <>
              <div></div>
            </>
            <div></div>
          </>
        </Context1.Provider>
      </Context2.Provider>
    </>
  );
}

export default ComponentWithContext;
"
`;

exports[`Solid > jsx > Javascript Test > componentWithContextMultiRoot 1`] = `
"import { useContext } from \\"solid-js\\";

import Context1 from \\"@dummy/1\\";
import Context2 from \\"@dummy/2\\";

function ComponentWithContext(props) {
  const foo = useContext(Context1);

  return (
    <Context2.Provider
      value={{
        bar: \\"baz\\",
      }}
    >
      <Context1.Provider
        value={{
          foo: \\"bar\\",

          content() {
            return props.content;
          },
        }}
      >
        <>
          <div></div>
          <>
            <div></div>
          </>
          <div></div>
          <div>
            <div></div>
          </div>
          <div></div>
        </>
      </Context1.Provider>
    </Context2.Provider>
  );
}

export default ComponentWithContext;
"
`;

exports[`Solid > jsx > Javascript Test > componentWithContextMultiRoot 2`] = `
"import { useContext } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";

import Context1 from \\"@dummy/1\\";
import Context2 from \\"@dummy/2\\";

function ComponentWithContext(props) {
  const foo = useContext(Context1);

  return (
    <>
      <Context2.Provider
        value={{
          bar: \\"baz\\",
        }}
      >
        <Context1.Provider
          value={{
            foo: \\"bar\\",

            content() {
              return props.content;
            },
          }}
        >
          <>
            <div></div>
            <>
              <div></div>
            </>
            <div></div>
            <div>
              <div></div>
            </div>
            <div></div>
          </>
        </Context1.Provider>
      </Context2.Provider>
    </>
  );
}

export default ComponentWithContext;
"
`;

exports[`Solid > jsx > Javascript Test > contentState 1`] = `
"import BuilderContext from \\"@dummy/context.jsx\\";

function RenderContent(props) {
  return (
    <BuilderContext.Provider
      value={{
        content: props.content,
        registeredComponents: props.customComponents,
      }}
    >
      <div>
        <div></div>
      </div>
    </BuilderContext.Provider>
  );
}

export default RenderContent;
"
`;

exports[`Solid > jsx > Javascript Test > contentState 2`] = `
"import { css } from \\"solid-styled-components\\";

import BuilderContext from \\"@dummy/context.jsx\\";

function RenderContent(props) {
  return (
    <>
      <BuilderContext.Provider
        value={{
          content: props.content,
          registeredComponents: props.customComponents,
        }}
      >
        <div>
          <div></div>
        </div>
      </BuilderContext.Provider>
    </>
  );
}

export default RenderContent;
"
`;

exports[`Solid > jsx > Javascript Test > defaultProps 1`] = `
"import { Show } from \\"solid-js\\";

function Button(props) {
  return (
    <div>
      <div></div>
      <Show when={props.link}>
        <div></div>
        <a>
          <div></div>
          <div></div>
          <div></div>
        </a>
        <div></div>
      </Show>
      <div></div>
      <Show when={!props.link}>
        <div></div>
        <button onclick={(event) => props.onClick(event)}>
          <div></div>
          <div></div>
          <div></div>
        </button>
        <div></div>
      </Show>
      <div></div>
    </div>
  );
}

export default Button;
"
`;

exports[`Solid > jsx > Javascript Test > defaultProps 2`] = `
"import { Show } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";

function Button(props) {
  return (
    <>
      <div>
        <div></div>
        <Show when={props.link}>
          <div></div>
          <a>
            <div></div>
            <div></div>
            <div></div>
          </a>
          <div></div>
        </Show>
        <div></div>
        <Show when={!props.link}>
          <div></div>
          <button onclick={(event) => props.onClick(event)}>
            <div></div>
            <div></div>
            <div></div>
          </button>
          <div></div>
        </Show>
        <div></div>
      </div>
    </>
  );
}

export default Button;
"
`;

exports[`Solid > jsx > Javascript Test > defaultPropsOutsideComponent 1`] = `
"import { Show } from \\"solid-js\\";

function Button(props) {
  return (
    <div>
      <div></div>
      <Show when={props.link}>
        <div></div>
        <a>
          <div></div>
          <div></div>
          <div></div>
        </a>
        <div></div>
      </Show>
      <div></div>
      <Show when={!props.link}>
        <div></div>
        <button onclick={(event) => props.onClick(event)}>
          <div></div>
          <div></div>
          <div></div>
        </button>
        <div></div>
      </Show>
      <div></div>
    </div>
  );
}

export default Button;
"
`;

exports[`Solid > jsx > Javascript Test > defaultPropsOutsideComponent 2`] = `
"import { Show } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";

function Button(props) {
  return (
    <>
      <div>
        <div></div>
        <Show when={props.link}>
          <div></div>
          <a>
            <div></div>
            <div></div>
            <div></div>
          </a>
          <div></div>
        </Show>
        <div></div>
        <Show when={!props.link}>
          <div></div>
          <button onclick={(event) => props.onClick(event)}>
            <div></div>
            <div></div>
            <div></div>
          </button>
          <div></div>
        </Show>
        <div></div>
      </div>
    </>
  );
}

export default Button;
"
`;

exports[`Solid > jsx > Javascript Test > defaultValsWithTypes 1`] = `
"const DEFAULT_VALUES: Props = {
  name: \\"Sami\\",
};

function ComponentWithTypes(props) {
  return (
    <div>
      <div></div>
      <div></div>
    </div>
  );
}

export default ComponentWithTypes;
"
`;

exports[`Solid > jsx > Javascript Test > defaultValsWithTypes 2`] = `
"import { css } from \\"solid-styled-components\\";

const DEFAULT_VALUES: Props = {
  name: \\"Sami\\",
};

function ComponentWithTypes(props) {
  return (
    <>
      <div>
        <div></div>
        <div></div>
      </div>
    </>
  );
}

export default ComponentWithTypes;
"
`;

exports[`Solid > jsx > Javascript Test > expressionState 1`] = `
"import { createSignal } from \\"solid-js\\";

function MyComponent(props) {
  const [refToUse, setRefToUse] = createSignal(
    !(props.componentRef instanceof Function) ? props.componentRef : null
  );

  return (
    <div>
      <div></div>
    </div>
  );
}

export default MyComponent;
"
`;

exports[`Solid > jsx > Javascript Test > expressionState 2`] = `
"import { createSignal } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";

function MyComponent(props) {
  const [refToUse, setRefToUse] = createSignal(
    !(props.componentRef instanceof Function) ? props.componentRef : null
  );

  return (
    <>
      <div>
        <div></div>
      </div>
    </>
  );
}

export default MyComponent;
"
`;

exports[`Solid > jsx > Javascript Test > import types 1`] = `
"import { createSignal } from \\"solid-js\\";

import RenderBlock from \\"./builder-render-block.raw\\";

function RenderContent(props) {
  function getRenderContentProps(block, index) {
    return {
      block: block,
      index: index,
    };
  }

  return (
    <RenderBlock
      {...getRenderContentProps(props.renderContentProps.block, 0)}
    ></RenderBlock>
  );
}

export default RenderContent;
"
`;

exports[`Solid > jsx > Javascript Test > import types 2`] = `
"import { createSignal } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";

import RenderBlock from \\"./builder-render-block.raw\\";

function RenderContent(props) {
  function getRenderContentProps(block, index) {
    return {
      block: block,
      index: index,
    };
  }

  return (
    <>
      <RenderBlock
        {...getRenderContentProps(props.renderContentProps.block, 0)}
      ></RenderBlock>
    </>
  );
}

export default RenderContent;
"
`;

exports[`Solid > jsx > Javascript Test > multipleOnUpdate 1`] = `
"import { on, createEffect } from \\"solid-js\\";

function MultipleOnUpdate(props) {
  return <div></div>;
}

export default MultipleOnUpdate;
"
`;

exports[`Solid > jsx > Javascript Test > multipleOnUpdate 2`] = `
"import { on, createEffect } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";

function MultipleOnUpdate(props) {
  return (
    <>
      <div></div>
    </>
  );
}

export default MultipleOnUpdate;
"
`;

exports[`Solid > jsx > Javascript Test > multipleOnUpdateWithDeps 1`] = `
"import { on, createEffect, createSignal } from \\"solid-js\\";

function MultipleOnUpdateWithDeps(props) {
  const [a, setA] = createSignal(\\"a\\");

  const [b, setB] = createSignal(\\"b\\");

  const [c, setC] = createSignal(\\"c\\");

  const [d, setD] = createSignal(\\"d\\");

  function onUpdateFn_0() {
    console.log(\\"Runs when a or b changes\\", a(), b());

    if (a() === \\"a\\") {
      setA(\\"b\\");
    }
  }
  createEffect(on(() => [a(), b()], onUpdateFn_0));

  function onUpdateFn_1() {
    console.log(\\"Runs when c or d changes\\", c(), d());

    if (a() === \\"a\\") {
      setA(\\"b\\");
    }
  }
  createEffect(on(() => [c(), d()], onUpdateFn_1));

  return <div></div>;
}

export default MultipleOnUpdateWithDeps;
"
`;

exports[`Solid > jsx > Javascript Test > multipleOnUpdateWithDeps 2`] = `
"import { on, createEffect, createSignal } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";

function MultipleOnUpdateWithDeps(props) {
  const [a, setA] = createSignal(\\"a\\");

  const [b, setB] = createSignal(\\"b\\");

  const [c, setC] = createSignal(\\"c\\");

  const [d, setD] = createSignal(\\"d\\");

  function onUpdateFn_0() {
    console.log(\\"Runs when a or b changes\\", a(), b());

    if (a() === \\"a\\") {
      setA(\\"b\\");
    }
  }
  createEffect(on(() => [a(), b()], onUpdateFn_0));

  function onUpdateFn_1() {
    console.log(\\"Runs when c or d changes\\", c(), d());

    if (a() === \\"a\\") {
      setA(\\"b\\");
    }
  }
  createEffect(on(() => [c(), d()], onUpdateFn_1));

  return (
    <>
      <div></div>
    </>
  );
}

export default MultipleOnUpdateWithDeps;
"
`;

exports[`Solid > jsx > Javascript Test > multipleSpreads 1`] = `
"import { createSignal } from \\"solid-js\\";

function MyBasicComponent(props) {
  const [attrs, setAttrs] = createSignal({
    hello: \\"world\\",
  });

  return <input />;
}

export default MyBasicComponent;
"
`;

exports[`Solid > jsx > Javascript Test > multipleSpreads 2`] = `
"import { createSignal } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";

function MyBasicComponent(props) {
  const [attrs, setAttrs] = createSignal({
    hello: \\"world\\",
  });

  return (
    <>
      <input />
    </>
  );
}

export default MyBasicComponent;
"
`;

exports[`Solid > jsx > Javascript Test > nestedShow 1`] = `
"import { Show } from \\"solid-js\\";

function NestedShow(props) {
  return (
    <Show
      fallback={
        <div>
          <div></div>
        </div>
      }
      when={props.conditionA}
    >
      <div></div>
      <Show
        fallback={
          <div>
            <div></div>
          </div>
        }
        when={!props.conditionB}
      >
        <div></div>
        <div>
          <div></div>
        </div>
        <div></div>
      </Show>
      <div></div>
    </Show>
  );
}

export default NestedShow;
"
`;

exports[`Solid > jsx > Javascript Test > nestedShow 2`] = `
"import { Show } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";

function NestedShow(props) {
  return (
    <>
      <Show
        fallback={
          <div>
            <div></div>
          </div>
        }
        when={props.conditionA}
      >
        <div></div>
        <Show
          fallback={
            <div>
              <div></div>
            </div>
          }
          when={!props.conditionB}
        >
          <div></div>
          <div>
            <div></div>
          </div>
          <div></div>
        </Show>
        <div></div>
      </Show>
    </>
  );
}

export default NestedShow;
"
`;

exports[`Solid > jsx > Javascript Test > nestedStyles 1`] = `
"import { css } from \\"solid-styled-components\\";

function NestedStyles(props) {
  return (
    <div>
      <div></div>
    </div>
  );
}

export default NestedStyles;
"
`;

exports[`Solid > jsx > Javascript Test > nestedStyles 2`] = `
"import { css } from \\"solid-styled-components\\";

function NestedStyles(props) {
  return (
    <>
      <div>
        <div></div>
      </div>
    </>
  );
}

export default NestedStyles;
"
`;

exports[`Solid > jsx > Javascript Test > onInit & onMount 1`] = `
"import { onMount } from \\"solid-js\\";

function OnInit(props) {
  onMount(() => {
    console.log(\\"onMount\\");
  });

  return <div></div>;
}

export default OnInit;
"
`;

exports[`Solid > jsx > Javascript Test > onInit & onMount 2`] = `
"import { onMount } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";

function OnInit(props) {
  onMount(() => {
    console.log(\\"onMount\\");
  });

  return (
    <>
      <div></div>
    </>
  );
}

export default OnInit;
"
`;

exports[`Solid > jsx > Javascript Test > onInit 1`] = `
"import { createSignal } from \\"solid-js\\";

export const defaultValues = {
  name: \\"PatrickJS\\",
};

function OnInit(props) {
  const [name, setName] = createSignal(\\"\\");

  return (
    <div>
      <div></div>
      <div></div>
    </div>
  );
}

export default OnInit;
"
`;

exports[`Solid > jsx > Javascript Test > onInit 2`] = `
"import { createSignal } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";

export const defaultValues = {
  name: \\"PatrickJS\\",
};

function OnInit(props) {
  const [name, setName] = createSignal(\\"\\");

  return (
    <>
      <div>
        <div></div>
        <div></div>
      </div>
    </>
  );
}

export default OnInit;
"
`;

exports[`Solid > jsx > Javascript Test > onMount 1`] = `
"import { onMount } from \\"solid-js\\";

function Comp(props) {
  onMount(() => {
    console.log(\\"Runs on mount\\");
  });

  return <div></div>;
}

export default Comp;
"
`;

exports[`Solid > jsx > Javascript Test > onMount 2`] = `
"import { onMount } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";

function Comp(props) {
  onMount(() => {
    console.log(\\"Runs on mount\\");
  });

  return (
    <>
      <div></div>
    </>
  );
}

export default Comp;
"
`;

exports[`Solid > jsx > Javascript Test > onUpdate 1`] = `
"import { on, createEffect } from \\"solid-js\\";

function OnUpdate(props) {
  return <div></div>;
}

export default OnUpdate;
"
`;

exports[`Solid > jsx > Javascript Test > onUpdate 2`] = `
"import { on, createEffect } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";

function OnUpdate(props) {
  return (
    <>
      <div></div>
    </>
  );
}

export default OnUpdate;
"
`;

exports[`Solid > jsx > Javascript Test > onUpdateWithDeps 1`] = `
"import { on, createEffect, createSignal } from \\"solid-js\\";

function OnUpdateWithDeps(props) {
  const [a, setA] = createSignal(\\"a\\");

  const [b, setB] = createSignal(\\"b\\");

  function onUpdateFn_0() {
    console.log(\\"Runs when a, b or size changes\\", a(), b(), props.size);
  }
  createEffect(on(() => [a(), b(), props.size], onUpdateFn_0));

  return <div></div>;
}

export default OnUpdateWithDeps;
"
`;

exports[`Solid > jsx > Javascript Test > onUpdateWithDeps 2`] = `
"import { on, createEffect, createSignal } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";

function OnUpdateWithDeps(props) {
  const [a, setA] = createSignal(\\"a\\");

  const [b, setB] = createSignal(\\"b\\");

  function onUpdateFn_0() {
    console.log(\\"Runs when a, b or size changes\\", a(), b(), props.size);
  }
  createEffect(on(() => [a(), b(), props.size], onUpdateFn_0));

  return (
    <>
      <div></div>
    </>
  );
}

export default OnUpdateWithDeps;
"
`;

exports[`Solid > jsx > Javascript Test > preserveExportOrLocalStatement 1`] = `
"const b = 3;
const foo = () => {};
export const a = 3;
export const bar = () => {};
export function run<T>(value: T) {}

function MyBasicComponent(props) {
  return <div></div>;
}

export default MyBasicComponent;
"
`;

exports[`Solid > jsx > Javascript Test > preserveExportOrLocalStatement 2`] = `
"import { css } from \\"solid-styled-components\\";

const b = 3;
const foo = () => {};
export const a = 3;
export const bar = () => {};
export function run<T>(value: T) {}

function MyBasicComponent(props) {
  return (
    <>
      <div></div>
    </>
  );
}

export default MyBasicComponent;
"
`;

exports[`Solid > jsx > Javascript Test > preserveTyping 1`] = `
"function MyBasicComponent(props) {
  return (
    <div>
      <div></div>
      <div></div>
    </div>
  );
}

export default MyBasicComponent;
"
`;

exports[`Solid > jsx > Javascript Test > preserveTyping 2`] = `
"import { css } from \\"solid-styled-components\\";

function MyBasicComponent(props) {
  return (
    <>
      <div>
        <div></div>
        <div></div>
      </div>
    </>
  );
}

export default MyBasicComponent;
"
`;

exports[`Solid > jsx > Javascript Test > propsDestructure 1`] = `
"import { createSignal } from \\"solid-js\\";

function MyBasicComponent(props) {
  const [name, setName] = createSignal(\\"Decadef20\\");

  return (
    <div>
      <div></div>
      <div></div>
      <div></div>
      <div></div>
      <div></div>
    </div>
  );
}

export default MyBasicComponent;
"
`;

exports[`Solid > jsx > Javascript Test > propsDestructure 2`] = `
"import { createSignal } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";

function MyBasicComponent(props) {
  const [name, setName] = createSignal(\\"Decadef20\\");

  return (
    <>
      <div>
        <div></div>
        <div></div>
        <div></div>
        <div></div>
        <div></div>
      </div>
    </>
  );
}

export default MyBasicComponent;
"
`;

exports[`Solid > jsx > Javascript Test > propsInterface 1`] = `
"function MyBasicComponent(props) {
  return (
    <div>
      <div></div>
      <div></div>
    </div>
  );
}

export default MyBasicComponent;
"
`;

exports[`Solid > jsx > Javascript Test > propsInterface 2`] = `
"import { css } from \\"solid-styled-components\\";

function MyBasicComponent(props) {
  return (
    <>
      <div>
        <div></div>
        <div></div>
      </div>
    </>
  );
}

export default MyBasicComponent;
"
`;

exports[`Solid > jsx > Javascript Test > propsType 1`] = `
"function MyBasicComponent(props) {
  return (
    <div>
      <div></div>
      <div></div>
    </div>
  );
}

export default MyBasicComponent;
"
`;

exports[`Solid > jsx > Javascript Test > propsType 2`] = `
"import { css } from \\"solid-styled-components\\";

function MyBasicComponent(props) {
  return (
    <>
      <div>
        <div></div>
        <div></div>
      </div>
    </>
  );
}

export default MyBasicComponent;
"
`;

exports[`Solid > jsx > Javascript Test > referencingFunInsideHook 1`] = `
"import { on, createEffect, createSignal } from \\"solid-js\\";

function OnUpdate(props) {
  function foo(params) {}

  function bar() {}

  function zoo() {
    const params = {
      cb: bar,
    };
  }

  return <div></div>;
}

export default OnUpdate;
"
`;

exports[`Solid > jsx > Javascript Test > referencingFunInsideHook 2`] = `
"import { on, createEffect, createSignal } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";

function OnUpdate(props) {
  function foo(params) {}

  function bar() {}

  function zoo() {
    const params = {
      cb: bar,
    };
  }

  return (
    <>
      <div></div>
    </>
  );
}

export default OnUpdate;
"
`;

exports[`Solid > jsx > Javascript Test > renderBlock 1`] = `
"import { Show, For, createSignal } from \\"solid-js\\";
import { Dynamic } from \\"solid-js/web\\";

import { getBlockActions } from \\"../../functions/get-block-actions.js\\";
import { getBlockComponentOptions } from \\"../../functions/get-block-component-options.js\\";
import { getBlockProperties } from \\"../../functions/get-block-properties.js\\";
import { getBlockTag } from \\"../../functions/get-block-tag.js\\";
import { getProcessedBlock } from \\"../../functions/get-processed-block.js\\";
import { evaluate } from \\"../../functions/evaluate.js\\";
import BlockStyles from \\"./block-styles.jsx\\";
import { isEmptyHtmlElement } from \\"./render-block.helpers.js\\";
import RenderRepeatedBlock from \\"./render-repeated-block.jsx\\";
import { TARGET } from \\"../../constants/target.js\\";
import { extractTextStyles } from \\"../../functions/extract-text-styles.js\\";
import RenderComponentWithContext from \\"./render-component-with-context.jsx\\";
import RenderComponent from \\"./render-component.jsx\\";
import { getReactNativeBlockStyles } from \\"../../functions/get-react-native-block-styles.js\\";

function RenderBlock(props) {
  function component() {
    const componentName = getProcessedBlock({
      block: props.block,
      state: props.context.state,
      context: props.context.context,
      shouldEvaluateBindings: false,
    }).component?.name;

    if (!componentName) {
      return null;
    }

    const ref = props.context.registeredComponents[componentName];

    if (!ref) {
      // TODO: Public doc page with more info about this message
      console.warn(\`
        Could not find a registered component named \\"\${componentName}\\". 
        If you registered it, is the file that registered it imported by the file that needs to render it?\`);
      return undefined;
    } else {
      return ref;
    }
  }

  function tag() {
    return getBlockTag(useBlock());
  }

  function useBlock() {
    return repeatItemData()
      ? props.block
      : getProcessedBlock({
          block: props.block,
          state: props.context.state,
          context: props.context.context,
          shouldEvaluateBindings: true,
        });
  }

  function actions() {
    return getBlockActions({
      block: useBlock(),
      state: props.context.state,
      context: props.context.context,
    });
  }

  function attributes() {
    const blockProperties = getBlockProperties(useBlock());
    return {
      ...blockProperties,
      ...(TARGET === \\"reactNative\\"
        ? {
            style: getReactNativeBlockStyles({
              block: useBlock(),
              context: props.context,
              blockStyles: blockProperties.style,
            }),
          }
        : {}),
    };
  }

  function shouldWrap() {
    return !component()?.noWrap;
  }

  function renderComponentProps() {
    return {
      blockChildren: useChildren(),
      componentRef: component()?.component,
      componentOptions: {
        ...getBlockComponentOptions(useBlock()),

        /**
         * These attributes are passed to the wrapper element when there is one. If \`noWrap\` is set to true, then
         * they are provided to the component itself directly.
         */
        ...(shouldWrap()
          ? {}
          : {
              attributes: { ...attributes(), ...actions() },
            }),
        customBreakpoints: childrenContext()?.content?.meta?.breakpoints,
      },
      context: childrenContext(),
    };
  }

  function useChildren() {
    // TO-DO: When should \`canHaveChildren\` dictate rendering?
    // This is currently commented out because some Builder components (e.g. Box) do not have \`canHaveChildren: true\`,
    // but still receive and need to render children.
    // return state.componentInfo?.canHaveChildren ? state.useBlock.children : [];
    return useBlock().children ?? [];
  }

  function childrenWithoutParentComponent() {
    /**
     * When there is no \`componentRef\`, there might still be children that need to be rendered. In this case,
     * we render them outside of \`componentRef\`.
     * NOTE: We make sure not to render this if \`repeatItemData\` is non-null, because that means we are rendering an array of
     * blocks, and the children will be repeated within those blocks.
     */
    const shouldRenderChildrenOutsideRef =
      !component()?.component && !repeatItemData();
    return shouldRenderChildrenOutsideRef ? useChildren() : [];
  }

  function repeatItemData() {
    /**
     * we don't use \`state.useBlock\` here because the processing done within its logic includes evaluating the block's bindings,
     * which will not work if there is a repeat.
     */
    const { repeat, ...blockWithoutRepeat } = props.block;

    if (!repeat?.collection) {
      return undefined;
    }

    const itemsArray = evaluate({
      code: repeat.collection,
      state: props.context.state,
      context: props.context.context,
    });

    if (!Array.isArray(itemsArray)) {
      return undefined;
    }

    const collectionName = repeat.collection.split(\\".\\").pop();
    const itemNameToUse =
      repeat.itemName || (collectionName ? collectionName + \\"Item\\" : \\"item\\");
    const repeatArray = itemsArray.map((item, index) => ({
      context: {
        ...props.context,
        state: {
          ...props.context.state,
          $index: index,
          $item: item,
          [itemNameToUse]: item,
          [\`$\${itemNameToUse}Index\`]: index,
        },
      },
      block: blockWithoutRepeat,
    }));
    return repeatArray;
  }

  function inheritedTextStyles() {
    if (TARGET !== \\"reactNative\\") {
      return {};
    }

    const styles = getReactNativeBlockStyles({
      block: useBlock(),
      context: props.context,
      blockStyles: attributes().style,
    });
    return extractTextStyles(styles);
  }

  function childrenContext() {
    return {
      apiKey: props.context.apiKey,
      state: props.context.state,
      content: props.context.content,
      context: props.context.context,
      registeredComponents: props.context.registeredComponents,
      inheritedStyles: inheritedTextStyles(),
    };
  }

  function renderComponentTag() {
    if (TARGET === \\"reactNative\\") {
      return RenderComponentWithContext;
    } else if (TARGET === \\"vue3\\") {
      // vue3 expects a string for the component tag
      return \\"RenderComponent\\";
    } else {
      return RenderComponent;
    }
  }

  return (
    <Show
      fallback={
        <Dynamic
          {...renderComponentProps()}
          component={renderComponentTag()}
        ></Dynamic>
      }
      when={shouldWrap()}
    >
      <div></div>
      <div></div>
      <Show when={isEmptyHtmlElement(tag())}>
        <div></div>
        <Dynamic {...attributes()} {...actions()} component={tag()}></Dynamic>
        <div></div>
      </Show>
      <div></div>
      <Show when={!isEmptyHtmlElement(tag()) && repeatItemData()}>
        <div></div>
        <For each={repeatItemData()}>
          {(data, _index) => {
            const index = _index();
            return (
              <RenderRepeatedBlock
                key={index}
                repeatContext={data.context}
                block={data.block}
              ></RenderRepeatedBlock>
            );
          }}
        </For>
        <div></div>
      </Show>
      <div></div>
      <Show when={!isEmptyHtmlElement(tag()) && !repeatItemData()}>
        <div></div>
        <Dynamic {...attributes()} {...actions()} component={tag()}>
          <div></div>
          <Dynamic
            {...renderComponentProps()}
            component={renderComponentTag()}
          ></Dynamic>
          <div></div>
          <div></div>
          <For each={childrenWithoutParentComponent()}>
            {(child, _index) => {
              const index = _index();
              return (
                <RenderBlock
                  key={\\"render-block-\\" + child.id}
                  block={child}
                  context={childrenContext()}
                ></RenderBlock>
              );
            }}
          </For>
          <div></div>
          <For each={childrenWithoutParentComponent()}>
            {(child, _index) => {
              const index = _index();
              return (
                <BlockStyles
                  key={\\"block-style-\\" + child.id}
                  block={child}
                  context={childrenContext()}
                ></BlockStyles>
              );
            }}
          </For>
          <div></div>
        </Dynamic>
        <div></div>
      </Show>
      <div></div>
    </Show>
  );
}

export default RenderBlock;
"
`;

exports[`Solid > jsx > Javascript Test > renderBlock 2`] = `
"import { Show, For, createSignal } from \\"solid-js\\";
import { Dynamic } from \\"solid-js/web\\";

import { css } from \\"solid-styled-components\\";

import { getBlockActions } from \\"../../functions/get-block-actions.js\\";
import { getBlockComponentOptions } from \\"../../functions/get-block-component-options.js\\";
import { getBlockProperties } from \\"../../functions/get-block-properties.js\\";
import { getBlockTag } from \\"../../functions/get-block-tag.js\\";
import { getProcessedBlock } from \\"../../functions/get-processed-block.js\\";
import { evaluate } from \\"../../functions/evaluate.js\\";
import BlockStyles from \\"./block-styles.jsx\\";
import { isEmptyHtmlElement } from \\"./render-block.helpers.js\\";
import RenderRepeatedBlock from \\"./render-repeated-block.jsx\\";
import { TARGET } from \\"../../constants/target.js\\";
import { extractTextStyles } from \\"../../functions/extract-text-styles.js\\";
import RenderComponentWithContext from \\"./render-component-with-context.jsx\\";
import RenderComponent from \\"./render-component.jsx\\";
import { getReactNativeBlockStyles } from \\"../../functions/get-react-native-block-styles.js\\";

function RenderBlock(props) {
  function component() {
    const componentName = getProcessedBlock({
      block: props.block,
      state: props.context.state,
      context: props.context.context,
      shouldEvaluateBindings: false,
    }).component?.name;

    if (!componentName) {
      return null;
    }

    const ref = props.context.registeredComponents[componentName];

    if (!ref) {
      // TODO: Public doc page with more info about this message
      console.warn(\`
        Could not find a registered component named \\"\${componentName}\\". 
        If you registered it, is the file that registered it imported by the file that needs to render it?\`);
      return undefined;
    } else {
      return ref;
    }
  }

  function tag() {
    return getBlockTag(useBlock());
  }

  function useBlock() {
    return repeatItemData()
      ? props.block
      : getProcessedBlock({
          block: props.block,
          state: props.context.state,
          context: props.context.context,
          shouldEvaluateBindings: true,
        });
  }

  function actions() {
    return getBlockActions({
      block: useBlock(),
      state: props.context.state,
      context: props.context.context,
    });
  }

  function attributes() {
    const blockProperties = getBlockProperties(useBlock());
    return {
      ...blockProperties,
      ...(TARGET === \\"reactNative\\"
        ? {
            style: getReactNativeBlockStyles({
              block: useBlock(),
              context: props.context,
              blockStyles: blockProperties.style,
            }),
          }
        : {}),
    };
  }

  function shouldWrap() {
    return !component()?.noWrap;
  }

  function renderComponentProps() {
    return {
      blockChildren: useChildren(),
      componentRef: component()?.component,
      componentOptions: {
        ...getBlockComponentOptions(useBlock()),

        /**
         * These attributes are passed to the wrapper element when there is one. If \`noWrap\` is set to true, then
         * they are provided to the component itself directly.
         */
        ...(shouldWrap()
          ? {}
          : {
              attributes: { ...attributes(), ...actions() },
            }),
        customBreakpoints: childrenContext()?.content?.meta?.breakpoints,
      },
      context: childrenContext(),
    };
  }

  function useChildren() {
    // TO-DO: When should \`canHaveChildren\` dictate rendering?
    // This is currently commented out because some Builder components (e.g. Box) do not have \`canHaveChildren: true\`,
    // but still receive and need to render children.
    // return state.componentInfo?.canHaveChildren ? state.useBlock.children : [];
    return useBlock().children ?? [];
  }

  function childrenWithoutParentComponent() {
    /**
     * When there is no \`componentRef\`, there might still be children that need to be rendered. In this case,
     * we render them outside of \`componentRef\`.
     * NOTE: We make sure not to render this if \`repeatItemData\` is non-null, because that means we are rendering an array of
     * blocks, and the children will be repeated within those blocks.
     */
    const shouldRenderChildrenOutsideRef =
      !component()?.component && !repeatItemData();
    return shouldRenderChildrenOutsideRef ? useChildren() : [];
  }

  function repeatItemData() {
    /**
     * we don't use \`state.useBlock\` here because the processing done within its logic includes evaluating the block's bindings,
     * which will not work if there is a repeat.
     */
    const { repeat, ...blockWithoutRepeat } = props.block;

    if (!repeat?.collection) {
      return undefined;
    }

    const itemsArray = evaluate({
      code: repeat.collection,
      state: props.context.state,
      context: props.context.context,
    });

    if (!Array.isArray(itemsArray)) {
      return undefined;
    }

    const collectionName = repeat.collection.split(\\".\\").pop();
    const itemNameToUse =
      repeat.itemName || (collectionName ? collectionName + \\"Item\\" : \\"item\\");
    const repeatArray = itemsArray.map((item, index) => ({
      context: {
        ...props.context,
        state: {
          ...props.context.state,
          $index: index,
          $item: item,
          [itemNameToUse]: item,
          [\`$\${itemNameToUse}Index\`]: index,
        },
      },
      block: blockWithoutRepeat,
    }));
    return repeatArray;
  }

  function inheritedTextStyles() {
    if (TARGET !== \\"reactNative\\") {
      return {};
    }

    const styles = getReactNativeBlockStyles({
      block: useBlock(),
      context: props.context,
      blockStyles: attributes().style,
    });
    return extractTextStyles(styles);
  }

  function childrenContext() {
    return {
      apiKey: props.context.apiKey,
      state: props.context.state,
      content: props.context.content,
      context: props.context.context,
      registeredComponents: props.context.registeredComponents,
      inheritedStyles: inheritedTextStyles(),
    };
  }

  function renderComponentTag() {
    if (TARGET === \\"reactNative\\") {
      return RenderComponentWithContext;
    } else if (TARGET === \\"vue3\\") {
      // vue3 expects a string for the component tag
      return \\"RenderComponent\\";
    } else {
      return RenderComponent;
    }
  }

  return (
    <>
      <Show
        fallback={
          <Dynamic
            {...renderComponentProps()}
            component={renderComponentTag()}
          ></Dynamic>
        }
        when={shouldWrap()}
      >
        <div></div>
        <div></div>
        <Show when={isEmptyHtmlElement(tag())}>
          <div></div>
          <Dynamic {...attributes()} {...actions()} component={tag()}></Dynamic>
          <div></div>
        </Show>
        <div></div>
        <Show when={!isEmptyHtmlElement(tag()) && repeatItemData()}>
          <div></div>
          <For each={repeatItemData()}>
            {(data, _index) => {
              const index = _index();
              return (
                <RenderRepeatedBlock
                  key={index}
                  repeatContext={data.context}
                  block={data.block}
                ></RenderRepeatedBlock>
              );
            }}
          </For>
          <div></div>
        </Show>
        <div></div>
        <Show when={!isEmptyHtmlElement(tag()) && !repeatItemData()}>
          <div></div>
          <Dynamic {...attributes()} {...actions()} component={tag()}>
            <div></div>
            <Dynamic
              {...renderComponentProps()}
              component={renderComponentTag()}
            ></Dynamic>
            <div></div>
            <div></div>
            <For each={childrenWithoutParentComponent()}>
              {(child, _index) => {
                const index = _index();
                return (
                  <RenderBlock
                    key={\\"render-block-\\" + child.id}
                    block={child}
                    context={childrenContext()}
                  ></RenderBlock>
                );
              }}
            </For>
            <div></div>
            <For each={childrenWithoutParentComponent()}>
              {(child, _index) => {
                const index = _index();
                return (
                  <BlockStyles
                    key={\\"block-style-\\" + child.id}
                    block={child}
                    context={childrenContext()}
                  ></BlockStyles>
                );
              }}
            </For>
            <div></div>
          </Dynamic>
          <div></div>
        </Show>
        <div></div>
      </Show>
    </>
  );
}

export default RenderBlock;
"
`;

exports[`Solid > jsx > Javascript Test > renderContentExample 1`] = `
"import { onMount, on, createEffect } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";

import {
  sendComponentsToVisualEditor,
  dispatchNewContentToVisualEditor,
  trackClick,
} from \\"@dummy/injection-js\\";
import BuilderContext from \\"@dummy/context.jsx\\";
import RenderBlocks from \\"@dummy/RenderBlocks.lite.tsx\\";

function RenderContent(props) {
  onMount(() => {
    sendComponentsToVisualEditor(props.customComponents);
  });

  function onUpdateFn_0() {
    dispatchNewContentToVisualEditor(props.content);
  }
  createEffect(on(() => [props.content], onUpdateFn_0));

  return (
    <BuilderContext.Provider
      value={{
        get content() {
          return 3;
        },

        get registeredComponents() {
          return 4;
        },
      }}
    >
      <div onclick={(event) => trackClick(props.content.id)}>
        <div></div>
        <RenderBlocks blocks={props.content.blocks}></RenderBlocks>
        <div></div>
      </div>
    </BuilderContext.Provider>
  );
}

export default RenderContent;
"
`;

exports[`Solid > jsx > Javascript Test > renderContentExample 2`] = `
"import { onMount, on, createEffect } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";

import {
  sendComponentsToVisualEditor,
  dispatchNewContentToVisualEditor,
  trackClick,
} from \\"@dummy/injection-js\\";
import BuilderContext from \\"@dummy/context.jsx\\";
import RenderBlocks from \\"@dummy/RenderBlocks.lite.tsx\\";

function RenderContent(props) {
  onMount(() => {
    sendComponentsToVisualEditor(props.customComponents);
  });

  function onUpdateFn_0() {
    dispatchNewContentToVisualEditor(props.content);
  }
  createEffect(on(() => [props.content], onUpdateFn_0));

  return (
    <>
      <BuilderContext.Provider
        value={{
          get content() {
            return 3;
          },

          get registeredComponents() {
            return 4;
          },
        }}
      >
        <div onclick={(event) => trackClick(props.content.id)}>
          <div></div>
          <RenderBlocks blocks={props.content.blocks}></RenderBlocks>
          <div></div>
        </div>
      </BuilderContext.Provider>
    </>
  );
}

export default RenderContent;
"
`;

exports[`Solid > jsx > Javascript Test > rootFragmentMultiNode 1`] = `
"import { Show } from \\"solid-js\\";

function Button(props) {
  return (
    <>
      <div></div>
      <Show when={props.link}>
        <div></div>
        <a>
          <div></div>
          <div></div>
          <div></div>
        </a>
        <div></div>
      </Show>
      <div></div>
      <Show when={!props.link}>
        <div></div>
        <button>
          <div></div>
          <div></div>
          <div></div>
        </button>
        <div></div>
      </Show>
      <div></div>
    </>
  );
}

export default Button;
"
`;

exports[`Solid > jsx > Javascript Test > rootFragmentMultiNode 2`] = `
"import { Show } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";

function Button(props) {
  return (
    <>
      <>
        <div></div>
        <Show when={props.link}>
          <div></div>
          <a>
            <div></div>
            <div></div>
            <div></div>
          </a>
          <div></div>
        </Show>
        <div></div>
        <Show when={!props.link}>
          <div></div>
          <button>
            <div></div>
            <div></div>
            <div></div>
          </button>
          <div></div>
        </Show>
        <div></div>
      </>
    </>
  );
}

export default Button;
"
`;

exports[`Solid > jsx > Javascript Test > rootShow 1`] = `
"import { Show } from \\"solid-js\\";

function RenderStyles(props) {
  return (
    <Show
      fallback={
        <div>
          <div></div>
        </div>
      }
      when={props.foo === \\"bar\\"}
    >
      <div></div>
      <div>
        <div></div>
      </div>
      <div></div>
    </Show>
  );
}

export default RenderStyles;
"
`;

exports[`Solid > jsx > Javascript Test > rootShow 2`] = `
"import { Show } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";

function RenderStyles(props) {
  return (
    <>
      <Show
        fallback={
          <div>
            <div></div>
          </div>
        }
        when={props.foo === \\"bar\\"}
      >
        <div></div>
        <div>
          <div></div>
        </div>
        <div></div>
      </Show>
    </>
  );
}

export default RenderStyles;
"
`;

exports[`Solid > jsx > Javascript Test > self-referencing component 1`] = `
"import { Show } from \\"solid-js\\";

function MyComponent(props) {
  return (
    <div>
      <div></div>
      <div></div>
      <div></div>
      <Show when={props.name === \\"Batman\\"}>
        <div></div>
        <MyComponent name=\\"Bruce Wayne\\"></MyComponent>
        <div></div>
      </Show>
      <div></div>
    </div>
  );
}

export default MyComponent;
"
`;

exports[`Solid > jsx > Javascript Test > self-referencing component 2`] = `
"import { Show } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";

function MyComponent(props) {
  return (
    <>
      <div>
        <div></div>
        <div></div>
        <div></div>
        <Show when={props.name === \\"Batman\\"}>
          <div></div>
          <MyComponent name=\\"Bruce Wayne\\"></MyComponent>
          <div></div>
        </Show>
        <div></div>
      </div>
    </>
  );
}

export default MyComponent;
"
`;

exports[`Solid > jsx > Javascript Test > self-referencing component with children 1`] = `
"import { Show } from \\"solid-js\\";

function MyComponent(props) {
  return (
    <div>
      <div></div>
      <div></div>
      <div></div>
      <div></div>
      <div></div>
      <Show when={props.name === \\"Batman\\"}>
        <div></div>
        <MyComponent name=\\"Bruce\\">
          <div></div>
          <div>
            <div></div>
          </div>
          <div></div>
        </MyComponent>
        <div></div>
      </Show>
      <div></div>
    </div>
  );
}

export default MyComponent;
"
`;

exports[`Solid > jsx > Javascript Test > self-referencing component with children 2`] = `
"import { Show } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";

function MyComponent(props) {
  return (
    <>
      <div>
        <div></div>
        <div></div>
        <div></div>
        <div></div>
        <div></div>
        <Show when={props.name === \\"Batman\\"}>
          <div></div>
          <MyComponent name=\\"Bruce\\">
            <div></div>
            <div>
              <div></div>
            </div>
            <div></div>
          </MyComponent>
          <div></div>
        </Show>
        <div></div>
      </div>
    </>
  );
}

export default MyComponent;
"
`;

exports[`Solid > jsx > Javascript Test > showWithFor 1`] = `
"import { Show, For } from \\"solid-js\\";

function NestedShow(props) {
  return (
    <Show
      fallback={
        <div>
          <div></div>
        </div>
      }
      when={props.conditionA}
    >
      <div></div>
      <For each={props.items}>
        {(item, _index) => {
          const idx = _index();
          return (
            <div>
              <div></div>
            </div>
          );
        }}
      </For>
      <div></div>
    </Show>
  );
}

export default NestedShow;
"
`;

exports[`Solid > jsx > Javascript Test > showWithFor 2`] = `
"import { Show, For } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";

function NestedShow(props) {
  return (
    <>
      <Show
        fallback={
          <div>
            <div></div>
          </div>
        }
        when={props.conditionA}
      >
        <div></div>
        <For each={props.items}>
          {(item, _index) => {
            const idx = _index();
            return (
              <div>
                <div></div>
              </div>
            );
          }}
        </For>
        <div></div>
      </Show>
    </>
  );
}

export default NestedShow;
"
`;

exports[`Solid > jsx > Javascript Test > spreadAttrs 1`] = `
"function MyBasicComponent(props) {
  return <input />;
}

export default MyBasicComponent;
"
`;

exports[`Solid > jsx > Javascript Test > spreadAttrs 2`] = `
"import { css } from \\"solid-styled-components\\";

function MyBasicComponent(props) {
  return (
    <>
      <input />
    </>
  );
}

export default MyBasicComponent;
"
`;

exports[`Solid > jsx > Javascript Test > spreadNestedProps 1`] = `
"function MyBasicComponent(props) {
  return <input />;
}

export default MyBasicComponent;
"
`;

exports[`Solid > jsx > Javascript Test > spreadNestedProps 2`] = `
"import { css } from \\"solid-styled-components\\";

function MyBasicComponent(props) {
  return (
    <>
      <input />
    </>
  );
}

export default MyBasicComponent;
"
`;

exports[`Solid > jsx > Javascript Test > spreadProps 1`] = `
"function MyBasicComponent(props) {
  return <input />;
}

export default MyBasicComponent;
"
`;

exports[`Solid > jsx > Javascript Test > spreadProps 2`] = `
"import { css } from \\"solid-styled-components\\";

function MyBasicComponent(props) {
  return (
    <>
      <input />
    </>
  );
}

export default MyBasicComponent;
"
`;

exports[`Solid > jsx > Javascript Test > styleClassAndCss 1`] = `
"import { css } from \\"solid-styled-components\\";

function MyComponent(props) {
  return <div></div>;
}

export default MyComponent;
"
`;

exports[`Solid > jsx > Javascript Test > styleClassAndCss 2`] = `
"import { css } from \\"solid-styled-components\\";

function MyComponent(props) {
  return (
    <>
      <div></div>
    </>
  );
}

export default MyComponent;
"
`;

exports[`Solid > jsx > Javascript Test > subComponent 1`] = `
"import Foo from \\"./foo-sub-component.jsx\\";

function SubComponent(props) {
  return <Foo></Foo>;
}

export default SubComponent;
"
`;

exports[`Solid > jsx > Javascript Test > subComponent 2`] = `
"import { css } from \\"solid-styled-components\\";

import Foo from \\"./foo-sub-component.jsx\\";

function SubComponent(props) {
  return (
    <>
      <Foo></Foo>
    </>
  );
}

export default SubComponent;
"
`;

exports[`Solid > jsx > Javascript Test > svgComponent 1`] = `
"function SvgComponent(props) {
  return (
    <svg viewbox={\\"0 0 \\" + 42 + \\" \\" + 42}>
      <div></div>
      <defs>
        <div></div>
        <filter filterunits=\\"userSpaceOnUse\\">
          <div></div>
          <feFlood></feFlood>
          <div></div>
          <feBlend></feBlend>
          <div></div>
          <feGaussianBlur stddeviation={7}></feGaussianBlur>
          <div></div>
        </filter>
        <div></div>
      </defs>
      <div></div>
    </svg>
  );
}

export default SvgComponent;
"
`;

exports[`Solid > jsx > Javascript Test > svgComponent 2`] = `
"import { css } from \\"solid-styled-components\\";

function SvgComponent(props) {
  return (
    <>
      <svg viewbox={\\"0 0 \\" + 42 + \\" \\" + 42}>
        <div></div>
        <defs>
          <div></div>
          <filter filterunits=\\"userSpaceOnUse\\">
            <div></div>
            <feFlood></feFlood>
            <div></div>
            <feBlend></feBlend>
            <div></div>
            <feGaussianBlur stddeviation={7}></feGaussianBlur>
            <div></div>
          </filter>
          <div></div>
        </defs>
        <div></div>
      </svg>
    </>
  );
}

export default SvgComponent;
"
`;

exports[`Solid > jsx > Javascript Test > typeDependency 1`] = `
"function TypeDependency(props) {
  return (
    <div>
      <div></div>
    </div>
  );
}

export default TypeDependency;
"
`;

exports[`Solid > jsx > Javascript Test > typeDependency 2`] = `
"import { css } from \\"solid-styled-components\\";

function TypeDependency(props) {
  return (
    <>
      <div>
        <div></div>
      </div>
    </>
  );
}

export default TypeDependency;
"
`;

exports[`Solid > jsx > Javascript Test > use-style 1`] = `
"import { css } from \\"solid-styled-components\\";

function MyComponent(props) {
  return (
    <button>
      <div></div>
    </button>
  );
}

export default MyComponent;
"
`;

exports[`Solid > jsx > Javascript Test > use-style 2`] = `
"import { css } from \\"solid-styled-components\\";

function MyComponent(props) {
  return (
    <>
      <button>
        <div></div>
      </button>
      <style jsx>{\`
        button {
          background: blue;
          color: white;
          font-size: 12px;
          outline: 1px solid black;
        }
      \`}</style>
    </>
  );
}

export default MyComponent;
"
`;

exports[`Solid > jsx > Javascript Test > use-style-and-css 1`] = `
"import { css } from \\"solid-styled-components\\";

function MyComponent(props) {
  return (
    <button>
      <div></div>
    </button>
  );
}

export default MyComponent;
"
`;

exports[`Solid > jsx > Javascript Test > use-style-and-css 2`] = `
"import { css } from \\"solid-styled-components\\";

function MyComponent(props) {
  return (
    <>
      <button>
        <div></div>
      </button>
      <style jsx>{\`
        button {
          font-size: 12px;
          outline: 1px solid black;
        }
      \`}</style>
    </>
  );
}

export default MyComponent;
"
`;

exports[`Solid > jsx > Javascript Test > use-style-outside-component 1`] = `
"import { css } from \\"solid-styled-components\\";

function MyComponent(props) {
  return (
    <button>
      <div></div>
    </button>
  );
}

export default MyComponent;
"
`;

exports[`Solid > jsx > Javascript Test > use-style-outside-component 2`] = `
"import { css } from \\"solid-styled-components\\";

function MyComponent(props) {
  return (
    <>
      <button>
        <div></div>
      </button>
      <style jsx>{\`
        button {
          background: blue;
          color: white;
          font-size: 12px;
          outline: 1px solid black;
        }
      \`}</style>
    </>
  );
}

export default MyComponent;
"
`;

exports[`Solid > jsx > Remove Internal mitosis package 1`] = `
"import { createSignal } from \\"solid-js\\";

function MyBasicComponent(props) {
  const [name, setName] = createSignal(\\"PatrickJS\\");

  return (
    <div>
      <div></div>
      <div></div>
      <div></div>
    </div>
  );
}

export default MyBasicComponent;
"
`;

exports[`Solid > jsx > Remove Internal mitosis package 2`] = `
"import { createSignal } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";

function MyBasicComponent(props) {
  const [name, setName] = createSignal(\\"PatrickJS\\");

  return (
    <>
      <div>
        <div></div>
        <div></div>
        <div></div>
      </div>
    </>
  );
}

export default MyBasicComponent;
"
`;

exports[`Solid > jsx > Typescript Test > AdvancedRef 1`] = `
"import { Show, on, createEffect, createSignal } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";
export interface Props {
  showInput: boolean;
}

function MyBasicRefComponent(props: Props) {
  const [name, setName] = createSignal(\\"PatrickJS\\");

  function onBlur() {
    // Maintain focus
    inputRef.focus();
  }

  function lowerCaseName() {
    return name().toLowerCase();
  }

  function onUpdateFn_0() {
    console.log(\\"Received an update\\");
  }
  createEffect(on(() => [inputRef, inputNoArgRef], onUpdateFn_0));

  return (
    <div>
      <div></div>
      <Show when={props.showInput}>
        <>
          <div></div>
          <input
            onblur={(event) => onBlur()}
            onchange={(event) => setName(event.target.value)}
          />
          <div></div>
          <label>
            <div></div>
          </label>
          <div></div>
          <select name=\\"cars\\">
            <div></div>
            <option>
              <div></div>
            </option>
            <div></div>
            <option>
              <div></div>
            </option>
            <div></div>
          </select>
          <div></div>
        </>
      </Show>
      <div></div>
      <div></div>
      <div></div>
    </div>
  );
}

export default MyBasicRefComponent;
"
`;

exports[`Solid > jsx > Typescript Test > AdvancedRef 2`] = `
"import { Show, on, createEffect, createSignal } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";
export interface Props {
  showInput: boolean;
}

function MyBasicRefComponent(props: Props) {
  const [name, setName] = createSignal(\\"PatrickJS\\");

  function onBlur() {
    // Maintain focus
    inputRef.focus();
  }

  function lowerCaseName() {
    return name().toLowerCase();
  }

  function onUpdateFn_0() {
    console.log(\\"Received an update\\");
  }
  createEffect(on(() => [inputRef, inputNoArgRef], onUpdateFn_0));

  return (
    <>
      <div>
        <div></div>
        <Show when={props.showInput}>
          <>
            <div></div>
            <input
              onblur={(event) => onBlur()}
              onchange={(event) => setName(event.target.value)}
            />
            <div></div>
            <label>
              <div></div>
            </label>
            <div></div>
            <select name=\\"cars\\">
              <div></div>
              <option>
                <div></div>
              </option>
              <div></div>
              <option>
                <div></div>
              </option>
              <div></div>
            </select>
            <div></div>
          </>
        </Show>
        <div></div>
        <div></div>
        <div></div>
      </div>
    </>
  );
}

export default MyBasicRefComponent;
"
`;

exports[`Solid > jsx > Typescript Test > Basic 1`] = `
"import { createSignal } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";
export interface MyBasicComponentProps {
  id: string;
}

export const DEFAULT_VALUES = {
  name: \\"Steve\\",
};

function MyBasicComponent(props: MyBasicComponentProps) {
  const [name, setName] = createSignal(\\"Steve\\");

  const [age, setAge] = createSignal(1);

  const [sports, setSports] = createSignal([\\"\\"]);

  function underscore_fn_name() {
    return \\"bar\\";
  }

  return (
    <div>
      <div></div>
      <input onchange={(myEvent) => setName(myEvent.target.value)} />
      <div></div>
    </div>
  );
}

export default MyBasicComponent;
"
`;

exports[`Solid > jsx > Typescript Test > Basic 2`] = `
"import { Show, For, createSignal } from \\"solid-js\\";

function MyBasicForShowComponent(props: any) {
  const [name, setName] = createSignal(\\"PatrickJS\\");

  const [names, setNames] = createSignal([\\"Steve\\", \\"PatrickJS\\"]);

  return (
    <div>
      <div></div>
      <For each={names()}>
        {(person, _index) => {
          const index = _index();
          return (
            <Show when={person === name()}>
              <div></div>
              <input
                onchange={(event) => {
                  setName(event.target.value + \\" and \\" + person);
                }}
              />
              <div></div>
              <div></div>
              <div></div>
            </Show>
          );
        }}
      </For>
      <div></div>
    </div>
  );
}

export default MyBasicForShowComponent;
"
`;

exports[`Solid > jsx > Typescript Test > Basic 3`] = `
"import { createSignal } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";
export interface MyBasicComponentProps {
  id: string;
}

export const DEFAULT_VALUES = {
  name: \\"Steve\\",
};

function MyBasicComponent(props: MyBasicComponentProps) {
  const [name, setName] = createSignal(\\"Steve\\");

  const [age, setAge] = createSignal(1);

  const [sports, setSports] = createSignal([\\"\\"]);

  function underscore_fn_name() {
    return \\"bar\\";
  }

  return (
    <>
      <div>
        <div></div>
        <input onchange={(myEvent) => setName(myEvent.target.value)} />
        <div></div>
      </div>
    </>
  );
}

export default MyBasicComponent;
"
`;

exports[`Solid > jsx > Typescript Test > Basic 4`] = `
"import { Show, For, createSignal } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";

function MyBasicForShowComponent(props: any) {
  const [name, setName] = createSignal(\\"PatrickJS\\");

  const [names, setNames] = createSignal([\\"Steve\\", \\"PatrickJS\\"]);

  return (
    <>
      <div>
        <div></div>
        <For each={names()}>
          {(person, _index) => {
            const index = _index();
            return (
              <Show when={person === name()}>
                <div></div>
                <input
                  onchange={(event) => {
                    setName(event.target.value + \\" and \\" + person);
                  }}
                />
                <div></div>
                <div></div>
                <div></div>
              </Show>
            );
          }}
        </For>
        <div></div>
      </div>
    </>
  );
}

export default MyBasicForShowComponent;
"
`;

exports[`Solid > jsx > Typescript Test > Basic Context 1`] = `
"import { useContext, onMount, createSignal } from \\"solid-js\\";

import { Injector, createInjector, MyService } from \\"@dummy/injection-js\\";

function MyBasicComponent(props: any) {
  const [name, setName] = createSignal(\\"PatrickJS\\");

  function onChange() {
    const change = myService.method(\\"change\\");
    console.log(change);
  }

  const myService = useContext(MyService);

  onMount(() => {
    const bye = myService.method(\\"hi\\");
    console.log(bye);
  });

  return (
    <Injector.Provider>
      <div>
        <div></div>
        <div></div>
        <div></div>
        <input onchange={(event) => onChange} />
        <div></div>
      </div>
    </Injector.Provider>
  );
}

export default MyBasicComponent;
"
`;

exports[`Solid > jsx > Typescript Test > Basic Context 2`] = `
"import { useContext, onMount, createSignal } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";

import { Injector, createInjector, MyService } from \\"@dummy/injection-js\\";

function MyBasicComponent(props: any) {
  const [name, setName] = createSignal(\\"PatrickJS\\");

  function onChange() {
    const change = myService.method(\\"change\\");
    console.log(change);
  }

  const myService = useContext(MyService);

  onMount(() => {
    const bye = myService.method(\\"hi\\");
    console.log(bye);
  });

  return (
    <>
      <Injector.Provider>
        <div>
          <div></div>
          <div></div>
          <div></div>
          <input onchange={(event) => onChange} />
          <div></div>
        </div>
      </Injector.Provider>
    </>
  );
}

export default MyBasicComponent;
"
`;

exports[`Solid > jsx > Typescript Test > Basic OnMount Update 1`] = `
"import { onMount, createSignal } from \\"solid-js\\";

export interface Props {
  hi: string;
  bye: string;
}

function MyBasicOnMountUpdateComponent(props: Props) {
  const [name, setName] = createSignal(\\"PatrickJS\\");

  const [names, setNames] = createSignal([\\"Steve\\", \\"PatrickJS\\"]);

  onMount(() => {
    setName(\\"PatrickJS onMount\\" + props.bye);
  });

  return (
    <div>
      <div></div>
      <div></div>
    </div>
  );
}

export default MyBasicOnMountUpdateComponent;
"
`;

exports[`Solid > jsx > Typescript Test > Basic OnMount Update 2`] = `
"import { onMount, createSignal } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";
export interface Props {
  hi: string;
  bye: string;
}

function MyBasicOnMountUpdateComponent(props: Props) {
  const [name, setName] = createSignal(\\"PatrickJS\\");

  const [names, setNames] = createSignal([\\"Steve\\", \\"PatrickJS\\"]);

  onMount(() => {
    setName(\\"PatrickJS onMount\\" + props.bye);
  });

  return (
    <>
      <div>
        <div></div>
        <div></div>
      </div>
    </>
  );
}

export default MyBasicOnMountUpdateComponent;
"
`;

exports[`Solid > jsx > Typescript Test > Basic Outputs 1`] = `
"import { onMount, createSignal } from \\"solid-js\\";

function MyBasicOutputsComponent(props: any) {
  const [name, setName] = createSignal(\\"PatrickJS\\");

  onMount(() => {
    props.onMessage(name());
    props.onEvent(props.message);
  });

  return <div></div>;
}

export default MyBasicOutputsComponent;
"
`;

exports[`Solid > jsx > Typescript Test > Basic Outputs 2`] = `
"import { onMount, createSignal } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";

function MyBasicOutputsComponent(props: any) {
  const [name, setName] = createSignal(\\"PatrickJS\\");

  onMount(() => {
    props.onMessage(name());
    props.onEvent(props.message);
  });

  return (
    <>
      <div></div>
    </>
  );
}

export default MyBasicOutputsComponent;
"
`;

exports[`Solid > jsx > Typescript Test > Basic Outputs Meta 1`] = `
"import { onMount, createSignal } from \\"solid-js\\";

function MyBasicOutputsComponent(props: any) {
  const [name, setName] = createSignal(\\"PatrickJS\\");

  onMount(() => {
    props.onMessage(name());
    props.onEvent(props.message);
  });

  return <div></div>;
}

export default MyBasicOutputsComponent;
"
`;

exports[`Solid > jsx > Typescript Test > Basic Outputs Meta 2`] = `
"import { onMount, createSignal } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";

function MyBasicOutputsComponent(props: any) {
  const [name, setName] = createSignal(\\"PatrickJS\\");

  onMount(() => {
    props.onMessage(name());
    props.onEvent(props.message);
  });

  return (
    <>
      <div></div>
    </>
  );
}

export default MyBasicOutputsComponent;
"
`;

exports[`Solid > jsx > Typescript Test > BasicAttribute 1`] = `
"function MyComponent(props: any) {
  return <input />;
}

export default MyComponent;
"
`;

exports[`Solid > jsx > Typescript Test > BasicAttribute 2`] = `
"import { css } from \\"solid-styled-components\\";

function MyComponent(props: any) {
  return (
    <>
      <input />
    </>
  );
}

export default MyComponent;
"
`;

exports[`Solid > jsx > Typescript Test > BasicBooleanAttribute 1`] = `
"type Props = {
  children: any;
  type: string;
};

import MyBooleanAttributeComponent from \\"./basic-boolean-attribute-component.raw\\";

function MyBooleanAttribute(props: Props) {
  return (
    <div>
      <div></div>
      <div></div>
      <div></div>
      <div></div>
      <div></div>
      <MyBooleanAttributeComponent toggle={true}></MyBooleanAttributeComponent>
      <div></div>
      <MyBooleanAttributeComponent toggle={true}></MyBooleanAttributeComponent>
      <div></div>
      <MyBooleanAttributeComponent list={null}></MyBooleanAttributeComponent>
      <div></div>
    </div>
  );
}

export default MyBooleanAttribute;
"
`;

exports[`Solid > jsx > Typescript Test > BasicBooleanAttribute 2`] = `
"import { css } from \\"solid-styled-components\\";
type Props = {
  children: any;
  type: string;
};

import MyBooleanAttributeComponent from \\"./basic-boolean-attribute-component.raw\\";

function MyBooleanAttribute(props: Props) {
  return (
    <>
      <div>
        <div></div>
        <div></div>
        <div></div>
        <div></div>
        <div></div>
        <MyBooleanAttributeComponent
          toggle={true}
        ></MyBooleanAttributeComponent>
        <div></div>
        <MyBooleanAttributeComponent
          toggle={true}
        ></MyBooleanAttributeComponent>
        <div></div>
        <MyBooleanAttributeComponent list={null}></MyBooleanAttributeComponent>
        <div></div>
      </div>
    </>
  );
}

export default MyBooleanAttribute;
"
`;

exports[`Solid > jsx > Typescript Test > BasicChildComponent 1`] = `
"import { createSignal } from \\"solid-js\\";

import MyBasicComponent from \\"./basic.raw\\";
import MyBasicOnMountUpdateComponent from \\"./basic-onMount-update.raw\\";

function MyBasicChildComponent(props: any) {
  const [name, setName] = createSignal(\\"Steve\\");

  const [dev, setDev] = createSignal(\\"PatrickJS\\");

  return (
    <div>
      <div></div>
      <MyBasicComponent id={dev()}></MyBasicComponent>
      <div></div>
      <div>
        <div></div>
        <MyBasicOnMountUpdateComponent
          hi={name()}
          bye={dev()}
        ></MyBasicOnMountUpdateComponent>
        <div></div>
      </div>
      <div></div>
    </div>
  );
}

export default MyBasicChildComponent;
"
`;

exports[`Solid > jsx > Typescript Test > BasicChildComponent 2`] = `
"import { createSignal } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";

import MyBasicComponent from \\"./basic.raw\\";
import MyBasicOnMountUpdateComponent from \\"./basic-onMount-update.raw\\";

function MyBasicChildComponent(props: any) {
  const [name, setName] = createSignal(\\"Steve\\");

  const [dev, setDev] = createSignal(\\"PatrickJS\\");

  return (
    <>
      <div>
        <div></div>
        <MyBasicComponent id={dev()}></MyBasicComponent>
        <div></div>
        <div>
          <div></div>
          <MyBasicOnMountUpdateComponent
            hi={name()}
            bye={dev()}
          ></MyBasicOnMountUpdateComponent>
          <div></div>
        </div>
        <div></div>
      </div>
    </>
  );
}

export default MyBasicChildComponent;
"
`;

exports[`Solid > jsx > Typescript Test > BasicFor 1`] = `
"import { For, onMount, createSignal } from \\"solid-js\\";

function MyBasicForComponent(props: any) {
  const [name, setName] = createSignal(\\"PatrickJS\\");

  const [names, setNames] = createSignal([\\"Steve\\", \\"PatrickJS\\"]);

  onMount(() => {
    console.log(\\"onMount code\\");
  });

  return (
    <div>
      <div></div>
      <For each={names()}>
        {(person, _index) => {
          const index = _index();
          return (
            <>
              <div></div>
              <input
                onchange={(event) => {
                  setName(event.target.value + \\" and \\" + person);
                }}
              />
              <div></div>
              <div></div>
              <div></div>
            </>
          );
        }}
      </For>
      <div></div>
    </div>
  );
}

export default MyBasicForComponent;
"
`;

exports[`Solid > jsx > Typescript Test > BasicFor 2`] = `
"import { For, onMount, createSignal } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";

function MyBasicForComponent(props: any) {
  const [name, setName] = createSignal(\\"PatrickJS\\");

  const [names, setNames] = createSignal([\\"Steve\\", \\"PatrickJS\\"]);

  onMount(() => {
    console.log(\\"onMount code\\");
  });

  return (
    <>
      <div>
        <div></div>
        <For each={names()}>
          {(person, _index) => {
            const index = _index();
            return (
              <>
                <div></div>
                <input
                  onchange={(event) => {
                    setName(event.target.value + \\" and \\" + person);
                  }}
                />
                <div></div>
                <div></div>
                <div></div>
              </>
            );
          }}
        </For>
        <div></div>
      </div>
    </>
  );
}

export default MyBasicForComponent;
"
`;

exports[`Solid > jsx > Typescript Test > BasicRef 1`] = `
"import { Show, createSignal } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";
export interface Props {
  showInput: boolean;
}

function MyBasicRefComponent(props: Props) {
  const [name, setName] = createSignal(\\"PatrickJS\\");

  function onBlur() {
    // Maintain focus
    inputRef.focus();
  }

  function lowerCaseName() {
    return name().toLowerCase();
  }

  return (
    <div>
      <div></div>
      <Show when={props.showInput}>
        <>
          <div></div>
          <input
            onblur={(event) => onBlur()}
            onchange={(event) => setName(event.target.value)}
          />
          <div></div>
          <label>
            <div></div>
          </label>
          <div></div>
          <select name=\\"cars\\">
            <div></div>
            <option>
              <div></div>
            </option>
            <div></div>
            <option>
              <div></div>
            </option>
            <div></div>
          </select>
          <div></div>
        </>
      </Show>
      <div></div>
      <div></div>
      <div></div>
    </div>
  );
}

export default MyBasicRefComponent;
"
`;

exports[`Solid > jsx > Typescript Test > BasicRef 2`] = `
"import { Show, createSignal } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";
export interface Props {
  showInput: boolean;
}

function MyBasicRefComponent(props: Props) {
  const [name, setName] = createSignal(\\"PatrickJS\\");

  function onBlur() {
    // Maintain focus
    inputRef.focus();
  }

  function lowerCaseName() {
    return name().toLowerCase();
  }

  return (
    <>
      <div>
        <div></div>
        <Show when={props.showInput}>
          <>
            <div></div>
            <input
              onblur={(event) => onBlur()}
              onchange={(event) => setName(event.target.value)}
            />
            <div></div>
            <label>
              <div></div>
            </label>
            <div></div>
            <select name=\\"cars\\">
              <div></div>
              <option>
                <div></div>
              </option>
              <div></div>
              <option>
                <div></div>
              </option>
              <div></div>
            </select>
            <div></div>
          </>
        </Show>
        <div></div>
        <div></div>
        <div></div>
      </div>
    </>
  );
}

export default MyBasicRefComponent;
"
`;

exports[`Solid > jsx > Typescript Test > BasicRefAssignment 1`] = `
"import { createSignal } from \\"solid-js\\";

export interface Props {
  showInput: boolean;
}

function MyBasicRefAssignmentComponent(props: Props) {
  function handlerClick(event) {
    event.preventDefault();
    console.log(\\"current value\\", holdValueRef);
    holdValueRef = holdValueRef + \\"JS\\";
  }

  return (
    <div>
      <div></div>
      <button onclick={(evt) => handlerClick(evt)}>
        <div></div>
      </button>
      <div></div>
    </div>
  );
}

export default MyBasicRefAssignmentComponent;
"
`;

exports[`Solid > jsx > Typescript Test > BasicRefAssignment 2`] = `
"import { createSignal } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";
export interface Props {
  showInput: boolean;
}

function MyBasicRefAssignmentComponent(props: Props) {
  function handlerClick(event) {
    event.preventDefault();
    console.log(\\"current value\\", holdValueRef);
    holdValueRef = holdValueRef + \\"JS\\";
  }

  return (
    <>
      <div>
        <div></div>
        <button onclick={(evt) => handlerClick(evt)}>
          <div></div>
        </button>
        <div></div>
      </div>
    </>
  );
}

export default MyBasicRefAssignmentComponent;
"
`;

exports[`Solid > jsx > Typescript Test > BasicRefPrevious 1`] = `
"import { on, createEffect, createSignal } from \\"solid-js\\";

export interface Props {
  showInput: boolean;
}

export function usePrevious<T>(value: T) {
  // The ref object is a generic container whose current property is mutable ...
  // ... and can hold any value, similar to an instance property on a class
  let ref = useRef<T>(null); // Store current value in ref

  onUpdate(() => {
    ref = value;
  }, [value]); // Only re-run if value changes
  // Return previous value (happens before update in useEffect above)

  return ref;
}

function MyPreviousComponent(props: Props) {
  const [count, setCount] = createSignal(0);

  function onUpdateFn_0() {
    prevCount = count();
  }
  createEffect(on(() => [count()], onUpdateFn_0));

  return (
    <div>
      <div></div>
      <h1>
        <div></div>
        <div></div>
        <div></div>
        <div></div>
        <div></div>
      </h1>
      <div></div>
      <button onclick={(event) => setCount(1)}>
        <div></div>
      </button>
      <div></div>
    </div>
  );
}

export default MyPreviousComponent;
"
`;

exports[`Solid > jsx > Typescript Test > BasicRefPrevious 2`] = `
"import { on, createEffect, createSignal } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";
export interface Props {
  showInput: boolean;
}

export function usePrevious<T>(value: T) {
  // The ref object is a generic container whose current property is mutable ...
  // ... and can hold any value, similar to an instance property on a class
  let ref = useRef<T>(null); // Store current value in ref

  onUpdate(() => {
    ref = value;
  }, [value]); // Only re-run if value changes
  // Return previous value (happens before update in useEffect above)

  return ref;
}

function MyPreviousComponent(props: Props) {
  const [count, setCount] = createSignal(0);

  function onUpdateFn_0() {
    prevCount = count();
  }
  createEffect(on(() => [count()], onUpdateFn_0));

  return (
    <>
      <div>
        <div></div>
        <h1>
          <div></div>
          <div></div>
          <div></div>
          <div></div>
          <div></div>
        </h1>
        <div></div>
        <button onclick={(event) => setCount(1)}>
          <div></div>
        </button>
        <div></div>
      </div>
    </>
  );
}

export default MyPreviousComponent;
"
`;

exports[`Solid > jsx > Typescript Test > Button 1`] = `
"import { Show } from \\"solid-js\\";

export interface ButtonProps {
  attributes?: any;
  text?: string;
  link?: string;
  openLinkInNewTab?: boolean;
}

function Button(props: ButtonProps) {
  return (
    <div>
      <div></div>
      <Show when={props.link}>
        <div></div>
        <a>
          <div></div>
          <div></div>
          <div></div>
        </a>
        <div></div>
      </Show>
      <div></div>
      <Show when={!props.link}>
        <div></div>
        <button>
          <div></div>
          <div></div>
          <div></div>
        </button>
        <div></div>
      </Show>
      <div></div>
    </div>
  );
}

export default Button;
"
`;

exports[`Solid > jsx > Typescript Test > Button 2`] = `
"import { Show } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";
export interface ButtonProps {
  attributes?: any;
  text?: string;
  link?: string;
  openLinkInNewTab?: boolean;
}

function Button(props: ButtonProps) {
  return (
    <>
      <div>
        <div></div>
        <Show when={props.link}>
          <div></div>
          <a>
            <div></div>
            <div></div>
            <div></div>
          </a>
          <div></div>
        </Show>
        <div></div>
        <Show when={!props.link}>
          <div></div>
          <button>
            <div></div>
            <div></div>
            <div></div>
          </button>
          <div></div>
        </Show>
        <div></div>
      </div>
    </>
  );
}

export default Button;
"
`;

exports[`Solid > jsx > Typescript Test > Columns 1`] = `
"import { For, createSignal } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";
type Column = {
  content: any; // TODO: Implement this when support for dynamic CSS lands

  width?: number;
};
export interface ColumnProps {
  columns?: Column[]; // TODO: Implement this when support for dynamic CSS lands

  space?: number; // TODO: Implement this when support for dynamic CSS lands

  stackColumnsAt?: \\"tablet\\" | \\"mobile\\" | \\"never\\"; // TODO: Implement this when support for dynamic CSS lands

  reverseColumnsWhenStacked?: boolean;
}

function Column(props: ColumnProps) {
  function getColumns() {
    return props.columns || [];
  }

  function getGutterSize() {
    return typeof props.space === \\"number\\" ? props.space || 0 : 20;
  }

  function getWidth(index) {
    const columns = getColumns();
    return (columns[index] && columns[index].width) || 100 / columns.length;
  }

  function getColumnCssWidth(index) {
    const columns = getColumns();
    const gutterSize = getGutterSize();
    const subtractWidth = (gutterSize * (columns.length - 1)) / columns.length;
    return \`calc(\${getWidth(index)}% - \${subtractWidth}px)\`;
  }

  return (
    <div>
      <div></div>
      <For each={props.columns}>
        {(column, _index) => {
          const index = _index();
          return (
            <div>
              <div></div>
              <div></div>
              <div></div>
              <div></div>
              <div></div>
            </div>
          );
        }}
      </For>
      <div></div>
    </div>
  );
}

export default Column;
"
`;

exports[`Solid > jsx > Typescript Test > Columns 2`] = `
"import { For, createSignal } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";
type Column = {
  content: any; // TODO: Implement this when support for dynamic CSS lands

  width?: number;
};
export interface ColumnProps {
  columns?: Column[]; // TODO: Implement this when support for dynamic CSS lands

  space?: number; // TODO: Implement this when support for dynamic CSS lands

  stackColumnsAt?: \\"tablet\\" | \\"mobile\\" | \\"never\\"; // TODO: Implement this when support for dynamic CSS lands

  reverseColumnsWhenStacked?: boolean;
}

function Column(props: ColumnProps) {
  function getColumns() {
    return props.columns || [];
  }

  function getGutterSize() {
    return typeof props.space === \\"number\\" ? props.space || 0 : 20;
  }

  function getWidth(index) {
    const columns = getColumns();
    return (columns[index] && columns[index].width) || 100 / columns.length;
  }

  function getColumnCssWidth(index) {
    const columns = getColumns();
    const gutterSize = getGutterSize();
    const subtractWidth = (gutterSize * (columns.length - 1)) / columns.length;
    return \`calc(\${getWidth(index)}% - \${subtractWidth}px)\`;
  }

  return (
    <>
      <div>
        <div></div>
        <For each={props.columns}>
          {(column, _index) => {
            const index = _index();
            return (
              <div>
                <div></div>
                <div></div>
                <div></div>
                <div></div>
                <div></div>
              </div>
            );
          }}
        </For>
        <div></div>
      </div>
    </>
  );
}

export default Column;
"
`;

exports[`Solid > jsx > Typescript Test > ContentSlotHtml 1`] = `
"type Props = {
  [key: string]: string | JSX.Element;
  slotTesting: JSX.Element;
};

function ContentSlotCode(props: Props) {
  return (
    <div>
      <div></div>
      <Slot name={props.slotTesting}></Slot>
      <div></div>
      <div>
        <div></div>
        <hr />
        <div></div>
      </div>
      <div></div>
      <div>
        <div></div>
        <Slot></Slot>
        <div></div>
      </div>
      <div></div>
    </div>
  );
}

export default ContentSlotCode;
"
`;

exports[`Solid > jsx > Typescript Test > ContentSlotHtml 2`] = `
"import { css } from \\"solid-styled-components\\";
type Props = {
  [key: string]: string | JSX.Element;
  slotTesting: JSX.Element;
};

function ContentSlotCode(props: Props) {
  return (
    <>
      <div>
        <div></div>
        <Slot name={props.slotTesting}></Slot>
        <div></div>
        <div>
          <div></div>
          <hr />
          <div></div>
        </div>
        <div></div>
        <div>
          <div></div>
          <Slot></Slot>
          <div></div>
        </div>
        <div></div>
      </div>
    </>
  );
}

export default ContentSlotCode;
"
`;

exports[`Solid > jsx > Typescript Test > ContentSlotJSX 1`] = `
"import { Show, createSignal } from \\"solid-js\\";

type Props = {
  [key: string]: string | JSX.Element;
};

function ContentSlotJsxCode(props: Props) {
  const [name, setName] = createSignal(\\"king\\");

  const [showContent, setShowContent] = createSignal(false);

  function cls() {
    return props.slotContent && props.children ? \`\${name()}-content\` : \\"\\";
  }

  function show() {
    props.slotContent ? 1 : \\"\\";
  }

  return (
    <Show when={props.slotReference}>
      <div></div>
      <div
        name={props.slotContent ? \\"name1\\" : \\"name2\\"}
        onclick={(event) => show()}
      >
        <div></div>
        <Show when={showContent() && props.slotContent}>
          <div></div>
          <Slot name=\\"content\\">
            <div></div>
          </Slot>
          <div></div>
        </Show>
        <div></div>
        <div>
          <div></div>
          <hr />
          <div></div>
        </div>
        <div></div>
        <div>
          <div></div>
        </div>
        <div></div>
      </div>
      <div></div>
    </Show>
  );
}

export default ContentSlotJsxCode;
"
`;

exports[`Solid > jsx > Typescript Test > ContentSlotJSX 2`] = `
"import { Show, createSignal } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";
type Props = {
  [key: string]: string | JSX.Element;
};

function ContentSlotJsxCode(props: Props) {
  const [name, setName] = createSignal(\\"king\\");

  const [showContent, setShowContent] = createSignal(false);

  function cls() {
    return props.slotContent && props.children ? \`\${name()}-content\` : \\"\\";
  }

  function show() {
    props.slotContent ? 1 : \\"\\";
  }

  return (
    <>
      <Show when={props.slotReference}>
        <div></div>
        <div
          name={props.slotContent ? \\"name1\\" : \\"name2\\"}
          onclick={(event) => show()}
        >
          <div></div>
          <Show when={showContent() && props.slotContent}>
            <div></div>
            <Slot name=\\"content\\">
              <div></div>
            </Slot>
            <div></div>
          </Show>
          <div></div>
          <div>
            <div></div>
            <hr />
            <div></div>
          </div>
          <div></div>
          <div>
            <div></div>
          </div>
          <div></div>
        </div>
        <div></div>
      </Show>
    </>
  );
}

export default ContentSlotJsxCode;
"
`;

exports[`Solid > jsx > Typescript Test > CustomCode 1`] = `
"import { onMount, createSignal } from \\"solid-js\\";

export interface CustomCodeProps {
  code: string;
  replaceNodes?: boolean;
}

function CustomCode(props: CustomCodeProps) {
  const [scriptsInserted, setScriptsInserted] = createSignal([]);

  const [scriptsRun, setScriptsRun] = createSignal([]);

  function findAndRunScripts() {
    // TODO: Move this function to standalone one in '@builder.io/utils'
    if (elem && typeof window !== \\"undefined\\") {
      /** @type {HTMLScriptElement[]} */
      const scripts = elem.getElementsByTagName(\\"script\\");

      for (let i = 0; i < scripts.length; i++) {
        const script = scripts[i];

        if (script.src) {
          if (scriptsInserted().includes(script.src)) {
            continue;
          }

          scriptsInserted().push(script.src);
          const newScript = document.createElement(\\"script\\");
          newScript.async = true;
          newScript.src = script.src;
          document.head.appendChild(newScript);
        } else if (
          !script.type ||
          [
            \\"text/javascript\\",
            \\"application/javascript\\",
            \\"application/ecmascript\\",
          ].includes(script.type)
        ) {
          if (scriptsRun().includes(script.innerText)) {
            continue;
          }

          try {
            scriptsRun().push(script.innerText);
            new Function(script.innerText)();
          } catch (error) {
            console.warn(\\"\`CustomCode\`: Error running script:\\", error);
          }
        }
      }
    }
  }

  onMount(() => {
    findAndRunScripts();
  });

  return <div innerhtml={props.code}></div>;
}

export default CustomCode;
"
`;

exports[`Solid > jsx > Typescript Test > CustomCode 2`] = `
"import { onMount, createSignal } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";
export interface CustomCodeProps {
  code: string;
  replaceNodes?: boolean;
}

function CustomCode(props: CustomCodeProps) {
  const [scriptsInserted, setScriptsInserted] = createSignal([]);

  const [scriptsRun, setScriptsRun] = createSignal([]);

  function findAndRunScripts() {
    // TODO: Move this function to standalone one in '@builder.io/utils'
    if (elem && typeof window !== \\"undefined\\") {
      /** @type {HTMLScriptElement[]} */
      const scripts = elem.getElementsByTagName(\\"script\\");

      for (let i = 0; i < scripts.length; i++) {
        const script = scripts[i];

        if (script.src) {
          if (scriptsInserted().includes(script.src)) {
            continue;
          }

          scriptsInserted().push(script.src);
          const newScript = document.createElement(\\"script\\");
          newScript.async = true;
          newScript.src = script.src;
          document.head.appendChild(newScript);
        } else if (
          !script.type ||
          [
            \\"text/javascript\\",
            \\"application/javascript\\",
            \\"application/ecmascript\\",
          ].includes(script.type)
        ) {
          if (scriptsRun().includes(script.innerText)) {
            continue;
          }

          try {
            scriptsRun().push(script.innerText);
            new Function(script.innerText)();
          } catch (error) {
            console.warn(\\"\`CustomCode\`: Error running script:\\", error);
          }
        }
      }
    }
  }

  onMount(() => {
    findAndRunScripts();
  });

  return (
    <>
      <div innerhtml={props.code}></div>
    </>
  );
}

export default CustomCode;
"
`;

exports[`Solid > jsx > Typescript Test > Embed 1`] = `
"import { onMount, createSignal } from \\"solid-js\\";

export interface CustomCodeProps {
  code: string;
  replaceNodes?: boolean;
}

function CustomCode(props: CustomCodeProps) {
  const [scriptsInserted, setScriptsInserted] = createSignal([]);

  const [scriptsRun, setScriptsRun] = createSignal([]);

  function findAndRunScripts() {
    // TODO: Move this function to standalone one in '@builder.io/utils'
    if (elem && typeof window !== \\"undefined\\") {
      /** @type {HTMLScriptElement[]} */
      const scripts = elem.getElementsByTagName(\\"script\\");

      for (let i = 0; i < scripts.length; i++) {
        const script = scripts[i];

        if (script.src) {
          if (scriptsInserted().includes(script.src)) {
            continue;
          }

          scriptsInserted().push(script.src);
          const newScript = document.createElement(\\"script\\");
          newScript.async = true;
          newScript.src = script.src;
          document.head.appendChild(newScript);
        } else if (
          !script.type ||
          [
            \\"text/javascript\\",
            \\"application/javascript\\",
            \\"application/ecmascript\\",
          ].includes(script.type)
        ) {
          if (scriptsRun().includes(script.innerText)) {
            continue;
          }

          try {
            scriptsRun().push(script.innerText);
            new Function(script.innerText)();
          } catch (error) {
            console.warn(\\"\`CustomCode\`: Error running script:\\", error);
          }
        }
      }
    }
  }

  onMount(() => {
    findAndRunScripts();
  });

  return <div innerhtml={props.code}></div>;
}

export default CustomCode;
"
`;

exports[`Solid > jsx > Typescript Test > Embed 2`] = `
"import { onMount, createSignal } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";
export interface CustomCodeProps {
  code: string;
  replaceNodes?: boolean;
}

function CustomCode(props: CustomCodeProps) {
  const [scriptsInserted, setScriptsInserted] = createSignal([]);

  const [scriptsRun, setScriptsRun] = createSignal([]);

  function findAndRunScripts() {
    // TODO: Move this function to standalone one in '@builder.io/utils'
    if (elem && typeof window !== \\"undefined\\") {
      /** @type {HTMLScriptElement[]} */
      const scripts = elem.getElementsByTagName(\\"script\\");

      for (let i = 0; i < scripts.length; i++) {
        const script = scripts[i];

        if (script.src) {
          if (scriptsInserted().includes(script.src)) {
            continue;
          }

          scriptsInserted().push(script.src);
          const newScript = document.createElement(\\"script\\");
          newScript.async = true;
          newScript.src = script.src;
          document.head.appendChild(newScript);
        } else if (
          !script.type ||
          [
            \\"text/javascript\\",
            \\"application/javascript\\",
            \\"application/ecmascript\\",
          ].includes(script.type)
        ) {
          if (scriptsRun().includes(script.innerText)) {
            continue;
          }

          try {
            scriptsRun().push(script.innerText);
            new Function(script.innerText)();
          } catch (error) {
            console.warn(\\"\`CustomCode\`: Error running script:\\", error);
          }
        }
      }
    }
  }

  onMount(() => {
    findAndRunScripts();
  });

  return (
    <>
      <div innerhtml={props.code}></div>
    </>
  );
}

export default CustomCode;
"
`;

exports[`Solid > jsx > Typescript Test > Form 1`] = `
"import { Show, For, createSignal } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";
export interface FormProps {
  attributes?: any;
  name?: string;
  action?: string;
  validate?: boolean;
  method?: string;
  builderBlock?: BuilderElement;
  sendSubmissionsTo?: string;
  sendSubmissionsToEmail?: string;
  sendWithJs?: boolean;
  contentType?: string;
  customHeaders?: {
    [key: string]: string;
  };
  successUrl?: string;
  previewState?: FormState;
  successMessage?: BuilderElement[];
  errorMessage?: BuilderElement[];
  sendingMessage?: BuilderElement[];
  resetFormOnSubmit?: boolean;
  errorMessagePath?: string;
}
export type FormState = \\"unsubmitted\\" | \\"sending\\" | \\"success\\" | \\"error\\";

import { BuilderBlock as BuilderBlockComponent } from \\"@fake\\";
import { Builder, builder } from \\"@builder.io/sdk\\";
import { BuilderBlocks } from \\"@fake\\";
import { set } from \\"@fake\\";
import { get } from \\"@fake\\";

function FormComponent(props: FormProps) {
  const [formState, setFormState] = createSignal(\\"unsubmitted\\");

  const [responseData, setResponseData] = createSignal(null);

  const [formErrorMessage, setFormErrorMessage] = createSignal(\\"\\");

  function submissionState() {
    return (Builder.isEditing && props.previewState) || formState();
  }

  function onSubmit(event) {
    const sendWithJs = props.sendWithJs || props.sendSubmissionsTo === \\"email\\";

    if (props.sendSubmissionsTo === \\"zapier\\") {
      event.preventDefault();
    } else if (sendWithJs) {
      if (!(props.action || props.sendSubmissionsTo === \\"email\\")) {
        event.preventDefault();
        return;
      }

      event.preventDefault();
      const el = event.currentTarget;
      const headers = props.customHeaders || {};
      let body;
      const formData = new FormData(el); // TODO: maybe support null

      const formPairs = Array.from(
        event.currentTarget.querySelectorAll(\\"input,select,textarea\\")
      )
        .filter((el) => !!el.name)
        .map((el) => {
          let value;
          const key = el.name;

          if (el instanceof HTMLInputElement) {
            if (el.type === \\"radio\\") {
              if (el.checked) {
                value = el.name;
                return {
                  key,
                  value,
                };
              }
            } else if (el.type === \\"checkbox\\") {
              value = el.checked;
            } else if (el.type === \\"number\\" || el.type === \\"range\\") {
              const num = el.valueAsNumber;

              if (!isNaN(num)) {
                value = num;
              }
            } else if (el.type === \\"file\\") {
              // TODO: one vs multiple files
              value = el.files;
            } else {
              value = el.value;
            }
          } else {
            value = el.value;
          }

          return {
            key,
            value,
          };
        });
      let contentType = props.contentType;

      if (props.sendSubmissionsTo === \\"email\\") {
        contentType = \\"multipart/form-data\\";
      }

      Array.from(formPairs).forEach(({ value }) => {
        if (
          value instanceof File ||
          (Array.isArray(value) && value[0] instanceof File) ||
          value instanceof FileList
        ) {
          contentType = \\"multipart/form-data\\";
        }
      }); // TODO: send as urlEncoded or multipart by default
      // because of ease of use and reliability in browser API
      // for encoding the form?

      if (contentType !== \\"application/json\\") {
        body = formData;
      } else {
        // Json
        const json = {};
        Array.from(formPairs).forEach(({ value, key }) => {
          set(json, key, value);
        });
        body = JSON.stringify(json);
      }

      if (contentType && contentType !== \\"multipart/form-data\\") {
        if (
          /* Zapier doesn't allow content-type header to be sent from browsers */
          !(sendWithJs && props.action?.includes(\\"zapier.com\\"))
        ) {
          headers[\\"content-type\\"] = contentType;
        }
      }

      const presubmitEvent = new CustomEvent(\\"presubmit\\", {
        detail: {
          body,
        },
      });

      if (formRef) {
        formRef.dispatchEvent(presubmitEvent);

        if (presubmitEvent.defaultPrevented) {
          return;
        }
      }

      setFormState(\\"sending\\");
      const formUrl = \`\${
        builder.env === \\"dev\\" ? \\"http://localhost:5000\\" : \\"https://builder.io\\"
      }/api/v1/form-submit?apiKey=\${builder.apiKey}&to=\${btoa(
        props.sendSubmissionsToEmail || \\"\\"
      )}&name=\${encodeURIComponent(props.name || \\"\\")}\`;
      fetch(
        props.sendSubmissionsTo === \\"email\\" ? formUrl : props.action,
        /* TODO: throw error if no action URL */
        {
          body,
          headers,
          method: props.method || \\"post\\",
        }
      ).then(
        async (res) => {
          let body;
          const contentType = res.headers.get(\\"content-type\\");

          if (contentType && contentType.indexOf(\\"application/json\\") !== -1) {
            body = await res.json();
          } else {
            body = await res.text();
          }

          if (!res.ok && props.errorMessagePath) {
            /* TODO: allow supplying an error formatter function */
            let message = get(body, props.errorMessagePath);

            if (message) {
              if (typeof message !== \\"string\\") {
                /* TODO: ideally convert json to yaml so it woul dbe like
           error: - email has been taken */
                message = JSON.stringify(message);
              }

              setFormErrorMessage(message);
            }
          }

          setResponseData(body);
          setFormState(res.ok ? \\"success\\" : \\"error\\");

          if (res.ok) {
            const submitSuccessEvent = new CustomEvent(\\"submit:success\\", {
              detail: {
                res,
                body,
              },
            });

            if (formRef) {
              formRef.dispatchEvent(submitSuccessEvent);

              if (submitSuccessEvent.defaultPrevented) {
                return;
              }
              /* TODO: option to turn this on/off? */

              if (props.resetFormOnSubmit !== false) {
                formRef.reset();
              }
            }
            /* TODO: client side route event first that can be preventDefaulted */

            if (props.successUrl) {
              if (formRef) {
                const event = new CustomEvent(\\"route\\", {
                  detail: {
                    url: props.successUrl,
                  },
                });
                formRef.dispatchEvent(event);

                if (!event.defaultPrevented) {
                  location.href = props.successUrl;
                }
              } else {
                location.href = props.successUrl;
              }
            }
          }
        },
        (err) => {
          const submitErrorEvent = new CustomEvent(\\"submit:error\\", {
            detail: {
              error: err,
            },
          });

          if (formRef) {
            formRef.dispatchEvent(submitErrorEvent);

            if (submitErrorEvent.defaultPrevented) {
              return;
            }
          }

          setResponseData(err);
          setFormState(\\"error\\");
        }
      );
    }
  }

  return (
    <form name={props.name} onsubmit={(event) => onSubmit(event)}>
      <div></div>
      <Show when={props.builderBlock && props.builderBlock.children}>
        <div></div>
        <For each={props.builderBlock?.children}>
          {(block, _index) => {
            const index = _index();
            return (
              <BuilderBlockComponent
                key={block.id}
                block={block}
                index={index}
              ></BuilderBlockComponent>
            );
          }}
        </For>
        <div></div>
      </Show>
      <div></div>
      <Show when={submissionState() === \\"error\\"}>
        <div></div>
        <BuilderBlocks
          dataPath=\\"errorMessage\\"
          blocks={props.errorMessage}
        ></BuilderBlocks>
        <div></div>
      </Show>
      <div></div>
      <Show when={submissionState() === \\"sending\\"}>
        <div></div>
        <BuilderBlocks
          dataPath=\\"sendingMessage\\"
          blocks={props.sendingMessage}
        ></BuilderBlocks>
        <div></div>
      </Show>
      <div></div>
      <Show when={submissionState() === \\"error\\" && responseData()}>
        <div></div>
        <pre>
          <div></div>
          <div></div>
          <div></div>
        </pre>
        <div></div>
      </Show>
      <div></div>
      <Show when={submissionState() === \\"success\\"}>
        <div></div>
        <BuilderBlocks
          dataPath=\\"successMessage\\"
          blocks={props.successMessage}
        ></BuilderBlocks>
        <div></div>
      </Show>
      <div></div>
    </form>
  );
}

export default FormComponent;
"
`;

exports[`Solid > jsx > Typescript Test > Form 2`] = `
"import { Show, For, createSignal } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";
export interface FormProps {
  attributes?: any;
  name?: string;
  action?: string;
  validate?: boolean;
  method?: string;
  builderBlock?: BuilderElement;
  sendSubmissionsTo?: string;
  sendSubmissionsToEmail?: string;
  sendWithJs?: boolean;
  contentType?: string;
  customHeaders?: {
    [key: string]: string;
  };
  successUrl?: string;
  previewState?: FormState;
  successMessage?: BuilderElement[];
  errorMessage?: BuilderElement[];
  sendingMessage?: BuilderElement[];
  resetFormOnSubmit?: boolean;
  errorMessagePath?: string;
}
export type FormState = \\"unsubmitted\\" | \\"sending\\" | \\"success\\" | \\"error\\";

import { BuilderBlock as BuilderBlockComponent } from \\"@fake\\";
import { Builder, builder } from \\"@builder.io/sdk\\";
import { BuilderBlocks } from \\"@fake\\";
import { set } from \\"@fake\\";
import { get } from \\"@fake\\";

function FormComponent(props: FormProps) {
  const [formState, setFormState] = createSignal(\\"unsubmitted\\");

  const [responseData, setResponseData] = createSignal(null);

  const [formErrorMessage, setFormErrorMessage] = createSignal(\\"\\");

  function submissionState() {
    return (Builder.isEditing && props.previewState) || formState();
  }

  function onSubmit(event) {
    const sendWithJs = props.sendWithJs || props.sendSubmissionsTo === \\"email\\";

    if (props.sendSubmissionsTo === \\"zapier\\") {
      event.preventDefault();
    } else if (sendWithJs) {
      if (!(props.action || props.sendSubmissionsTo === \\"email\\")) {
        event.preventDefault();
        return;
      }

      event.preventDefault();
      const el = event.currentTarget;
      const headers = props.customHeaders || {};
      let body;
      const formData = new FormData(el); // TODO: maybe support null

      const formPairs = Array.from(
        event.currentTarget.querySelectorAll(\\"input,select,textarea\\")
      )
        .filter((el) => !!el.name)
        .map((el) => {
          let value;
          const key = el.name;

          if (el instanceof HTMLInputElement) {
            if (el.type === \\"radio\\") {
              if (el.checked) {
                value = el.name;
                return {
                  key,
                  value,
                };
              }
            } else if (el.type === \\"checkbox\\") {
              value = el.checked;
            } else if (el.type === \\"number\\" || el.type === \\"range\\") {
              const num = el.valueAsNumber;

              if (!isNaN(num)) {
                value = num;
              }
            } else if (el.type === \\"file\\") {
              // TODO: one vs multiple files
              value = el.files;
            } else {
              value = el.value;
            }
          } else {
            value = el.value;
          }

          return {
            key,
            value,
          };
        });
      let contentType = props.contentType;

      if (props.sendSubmissionsTo === \\"email\\") {
        contentType = \\"multipart/form-data\\";
      }

      Array.from(formPairs).forEach(({ value }) => {
        if (
          value instanceof File ||
          (Array.isArray(value) && value[0] instanceof File) ||
          value instanceof FileList
        ) {
          contentType = \\"multipart/form-data\\";
        }
      }); // TODO: send as urlEncoded or multipart by default
      // because of ease of use and reliability in browser API
      // for encoding the form?

      if (contentType !== \\"application/json\\") {
        body = formData;
      } else {
        // Json
        const json = {};
        Array.from(formPairs).forEach(({ value, key }) => {
          set(json, key, value);
        });
        body = JSON.stringify(json);
      }

      if (contentType && contentType !== \\"multipart/form-data\\") {
        if (
          /* Zapier doesn't allow content-type header to be sent from browsers */
          !(sendWithJs && props.action?.includes(\\"zapier.com\\"))
        ) {
          headers[\\"content-type\\"] = contentType;
        }
      }

      const presubmitEvent = new CustomEvent(\\"presubmit\\", {
        detail: {
          body,
        },
      });

      if (formRef) {
        formRef.dispatchEvent(presubmitEvent);

        if (presubmitEvent.defaultPrevented) {
          return;
        }
      }

      setFormState(\\"sending\\");
      const formUrl = \`\${
        builder.env === \\"dev\\" ? \\"http://localhost:5000\\" : \\"https://builder.io\\"
      }/api/v1/form-submit?apiKey=\${builder.apiKey}&to=\${btoa(
        props.sendSubmissionsToEmail || \\"\\"
      )}&name=\${encodeURIComponent(props.name || \\"\\")}\`;
      fetch(
        props.sendSubmissionsTo === \\"email\\" ? formUrl : props.action,
        /* TODO: throw error if no action URL */
        {
          body,
          headers,
          method: props.method || \\"post\\",
        }
      ).then(
        async (res) => {
          let body;
          const contentType = res.headers.get(\\"content-type\\");

          if (contentType && contentType.indexOf(\\"application/json\\") !== -1) {
            body = await res.json();
          } else {
            body = await res.text();
          }

          if (!res.ok && props.errorMessagePath) {
            /* TODO: allow supplying an error formatter function */
            let message = get(body, props.errorMessagePath);

            if (message) {
              if (typeof message !== \\"string\\") {
                /* TODO: ideally convert json to yaml so it woul dbe like
           error: - email has been taken */
                message = JSON.stringify(message);
              }

              setFormErrorMessage(message);
            }
          }

          setResponseData(body);
          setFormState(res.ok ? \\"success\\" : \\"error\\");

          if (res.ok) {
            const submitSuccessEvent = new CustomEvent(\\"submit:success\\", {
              detail: {
                res,
                body,
              },
            });

            if (formRef) {
              formRef.dispatchEvent(submitSuccessEvent);

              if (submitSuccessEvent.defaultPrevented) {
                return;
              }
              /* TODO: option to turn this on/off? */

              if (props.resetFormOnSubmit !== false) {
                formRef.reset();
              }
            }
            /* TODO: client side route event first that can be preventDefaulted */

            if (props.successUrl) {
              if (formRef) {
                const event = new CustomEvent(\\"route\\", {
                  detail: {
                    url: props.successUrl,
                  },
                });
                formRef.dispatchEvent(event);

                if (!event.defaultPrevented) {
                  location.href = props.successUrl;
                }
              } else {
                location.href = props.successUrl;
              }
            }
          }
        },
        (err) => {
          const submitErrorEvent = new CustomEvent(\\"submit:error\\", {
            detail: {
              error: err,
            },
          });

          if (formRef) {
            formRef.dispatchEvent(submitErrorEvent);

            if (submitErrorEvent.defaultPrevented) {
              return;
            }
          }

          setResponseData(err);
          setFormState(\\"error\\");
        }
      );
    }
  }

  return (
    <>
      <form name={props.name} onsubmit={(event) => onSubmit(event)}>
        <div></div>
        <Show when={props.builderBlock && props.builderBlock.children}>
          <div></div>
          <For each={props.builderBlock?.children}>
            {(block, _index) => {
              const index = _index();
              return (
                <BuilderBlockComponent
                  key={block.id}
                  block={block}
                  index={index}
                ></BuilderBlockComponent>
              );
            }}
          </For>
          <div></div>
        </Show>
        <div></div>
        <Show when={submissionState() === \\"error\\"}>
          <div></div>
          <BuilderBlocks
            dataPath=\\"errorMessage\\"
            blocks={props.errorMessage}
          ></BuilderBlocks>
          <div></div>
        </Show>
        <div></div>
        <Show when={submissionState() === \\"sending\\"}>
          <div></div>
          <BuilderBlocks
            dataPath=\\"sendingMessage\\"
            blocks={props.sendingMessage}
          ></BuilderBlocks>
          <div></div>
        </Show>
        <div></div>
        <Show when={submissionState() === \\"error\\" && responseData()}>
          <div></div>
          <pre>
            <div></div>
            <div></div>
            <div></div>
          </pre>
          <div></div>
        </Show>
        <div></div>
        <Show when={submissionState() === \\"success\\"}>
          <div></div>
          <BuilderBlocks
            dataPath=\\"successMessage\\"
            blocks={props.successMessage}
          ></BuilderBlocks>
          <div></div>
        </Show>
        <div></div>
      </form>
    </>
  );
}

export default FormComponent;
"
`;

exports[`Solid > jsx > Typescript Test > Image 1`] = `
"import { Show, onMount, createSignal } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";
// TODO: AMP Support?
export interface ImageProps {
  _class?: string;
  image: string;
  sizes?: string;
  lazy?: boolean;
  height?: number;
  width?: number;
  altText?: string;
  backgroundSize?: string;
  backgroundPosition?: string; // TODO: Support generating Builder.io and or Shopify \`srcset\`s when needed

  srcset?: string; // TODO: Implement support for custom aspect ratios

  aspectRatio?: number; // TODO: This might not work as expected in terms of positioning

  children?: any;
}

function Image(props: ImageProps) {
  const [scrollListener, setScrollListener] = createSignal(null);

  const [imageLoaded, setImageLoaded] = createSignal(false);

  const [load, setLoad] = createSignal(false);

  function setLoaded() {
    setImageLoaded(true);
  }

  function useLazyLoading() {
    // TODO: Add more checks here, like testing for real web browsers
    return !!props.lazy && isBrowser();
  }

  function isBrowser() {
    return (
      typeof window !== \\"undefined\\" && window.navigator.product != \\"ReactNative\\"
    );
  }

  onMount(() => {
    if (useLazyLoading()) {
      // throttled scroll capture listener
      const listener = () => {
        if (pictureRef) {
          const rect = pictureRef.getBoundingClientRect();
          const buffer = window.innerHeight / 2;

          if (rect.top < window.innerHeight + buffer) {
            setLoad(true);
            setScrollListener(null);
            window.removeEventListener(\\"scroll\\", listener);
          }
        }
      };

      setScrollListener(listener);
      window.addEventListener(\\"scroll\\", listener, {
        capture: true,
        passive: true,
      });
      listener();
    }
  });

  return (
    <div>
      <div></div>
      <picture>
        <div></div>
        <Show when={!useLazyLoading() || load()}>
          <div></div>
          <img
            aria-role={props.altText ? \\"presentation\\" : undefined}
            onload={(event) => setLoaded()}
          />
          <div></div>
        </Show>
        <div></div>
        <source />
        <div></div>
      </picture>
      <div></div>
      <div></div>
      <div></div>
    </div>
  );
}

export default Image;
"
`;

exports[`Solid > jsx > Typescript Test > Image 2`] = `
"import { Show, onMount, createSignal } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";
// TODO: AMP Support?
export interface ImageProps {
  _class?: string;
  image: string;
  sizes?: string;
  lazy?: boolean;
  height?: number;
  width?: number;
  altText?: string;
  backgroundSize?: string;
  backgroundPosition?: string; // TODO: Support generating Builder.io and or Shopify \`srcset\`s when needed

  srcset?: string; // TODO: Implement support for custom aspect ratios

  aspectRatio?: number; // TODO: This might not work as expected in terms of positioning

  children?: any;
}

function Image(props: ImageProps) {
  const [scrollListener, setScrollListener] = createSignal(null);

  const [imageLoaded, setImageLoaded] = createSignal(false);

  const [load, setLoad] = createSignal(false);

  function setLoaded() {
    setImageLoaded(true);
  }

  function useLazyLoading() {
    // TODO: Add more checks here, like testing for real web browsers
    return !!props.lazy && isBrowser();
  }

  function isBrowser() {
    return (
      typeof window !== \\"undefined\\" && window.navigator.product != \\"ReactNative\\"
    );
  }

  onMount(() => {
    if (useLazyLoading()) {
      // throttled scroll capture listener
      const listener = () => {
        if (pictureRef) {
          const rect = pictureRef.getBoundingClientRect();
          const buffer = window.innerHeight / 2;

          if (rect.top < window.innerHeight + buffer) {
            setLoad(true);
            setScrollListener(null);
            window.removeEventListener(\\"scroll\\", listener);
          }
        }
      };

      setScrollListener(listener);
      window.addEventListener(\\"scroll\\", listener, {
        capture: true,
        passive: true,
      });
      listener();
    }
  });

  return (
    <>
      <div>
        <div></div>
        <picture>
          <div></div>
          <Show when={!useLazyLoading() || load()}>
            <div></div>
            <img
              aria-role={props.altText ? \\"presentation\\" : undefined}
              onload={(event) => setLoaded()}
            />
            <div></div>
          </Show>
          <div></div>
          <source />
          <div></div>
        </picture>
        <div></div>
        <div></div>
        <div></div>
      </div>
    </>
  );
}

export default Image;
"
`;

exports[`Solid > jsx > Typescript Test > Image State 1`] = `
"import { For, createSignal } from \\"solid-js\\";

function ImgStateComponent(props: any) {
  const [canShow, setCanShow] = createSignal(true);

  const [images, setImages] = createSignal([\\"http://example.com/qwik.png\\"]);

  return (
    <div>
      <div></div>
      <For each={images()}>
        {(item, _index) => {
          const itemIndex = _index();
          return (
            <>
              <div></div>
              <img />
              <div></div>
            </>
          );
        }}
      </For>
      <div></div>
    </div>
  );
}

export default ImgStateComponent;
"
`;

exports[`Solid > jsx > Typescript Test > Image State 2`] = `
"import { For, createSignal } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";

function ImgStateComponent(props: any) {
  const [canShow, setCanShow] = createSignal(true);

  const [images, setImages] = createSignal([\\"http://example.com/qwik.png\\"]);

  return (
    <>
      <div>
        <div></div>
        <For each={images()}>
          {(item, _index) => {
            const itemIndex = _index();
            return (
              <>
                <div></div>
                <img />
                <div></div>
              </>
            );
          }}
        </For>
        <div></div>
      </div>
    </>
  );
}

export default ImgStateComponent;
"
`;

exports[`Solid > jsx > Typescript Test > Img 1`] = `
"export interface ImgProps {
  attributes?: any;
  imgSrc?: string;
  altText?: string;
  backgroundSize?: \\"cover\\" | \\"contain\\";
  backgroundPosition?:
    | \\"center\\"
    | \\"top\\"
    | \\"left\\"
    | \\"right\\"
    | \\"bottom\\"
    | \\"top left\\"
    | \\"top right\\"
    | \\"bottom left\\"
    | \\"bottom right\\";
}

import { Builder } from \\"@builder.io/sdk\\";

function ImgComponent(props: ImgProps) {
  return <img />;
}

export default ImgComponent;
"
`;

exports[`Solid > jsx > Typescript Test > Img 2`] = `
"import { css } from \\"solid-styled-components\\";
export interface ImgProps {
  attributes?: any;
  imgSrc?: string;
  altText?: string;
  backgroundSize?: \\"cover\\" | \\"contain\\";
  backgroundPosition?:
    | \\"center\\"
    | \\"top\\"
    | \\"left\\"
    | \\"right\\"
    | \\"bottom\\"
    | \\"top left\\"
    | \\"top right\\"
    | \\"bottom left\\"
    | \\"bottom right\\";
}

import { Builder } from \\"@builder.io/sdk\\";

function ImgComponent(props: ImgProps) {
  return (
    <>
      <img />
    </>
  );
}

export default ImgComponent;
"
`;

exports[`Solid > jsx > Typescript Test > Input 1`] = `
"export interface FormInputProps {
  type?: string;
  attributes?: any;
  name?: string;
  value?: string;
  placeholder?: string;
  defaultValue?: string;
  required?: boolean;
}

import { Builder } from \\"@builder.io/sdk\\";

function FormInputComponent(props: FormInputProps) {
  return <input name={props.name} defaultvalue={props.defaultValue} />;
}

export default FormInputComponent;
"
`;

exports[`Solid > jsx > Typescript Test > Input 2`] = `
"import { css } from \\"solid-styled-components\\";
export interface FormInputProps {
  type?: string;
  attributes?: any;
  name?: string;
  value?: string;
  placeholder?: string;
  defaultValue?: string;
  required?: boolean;
}

import { Builder } from \\"@builder.io/sdk\\";

function FormInputComponent(props: FormInputProps) {
  return (
    <>
      <input name={props.name} defaultvalue={props.defaultValue} />
    </>
  );
}

export default FormInputComponent;
"
`;

exports[`Solid > jsx > Typescript Test > RawText 1`] = `
"export interface RawTextProps {
  attributes?: any;
  text?: string; // builderBlock?: any;
}

function RawText(props: RawTextProps) {
  return <span innerhtml={props.text || \\"\\"}></span>;
}

export default RawText;
"
`;

exports[`Solid > jsx > Typescript Test > RawText 2`] = `
"import { css } from \\"solid-styled-components\\";
export interface RawTextProps {
  attributes?: any;
  text?: string; // builderBlock?: any;
}

function RawText(props: RawTextProps) {
  return (
    <>
      <span innerhtml={props.text || \\"\\"}></span>
    </>
  );
}

export default RawText;
"
`;

exports[`Solid > jsx > Typescript Test > Section 1`] = `
"export interface SectionProps {
  maxWidth?: number;
  attributes?: any;
  children?: any;
}

function SectionComponent(props: SectionProps) {
  return (
    <section>
      <div></div>
      <div></div>
      <div></div>
    </section>
  );
}

export default SectionComponent;
"
`;

exports[`Solid > jsx > Typescript Test > Section 2`] = `
"import { Show, For, createSignal } from \\"solid-js\\";

export interface SectionProps {
  maxWidth?: number;
  attributes?: any;
  children?: any;
}

function SectionStateComponent(props: SectionProps) {
  const [max, setMax] = createSignal(42);

  const [items, setItems] = createSignal([42]);

  return (
    <Show when={max()}>
      <div></div>
      <For each={items()}>
        {(item, _index) => {
          const index = _index();
          return (
            <section>
              <div></div>
              <div></div>
              <div></div>
            </section>
          );
        }}
      </For>
      <div></div>
    </Show>
  );
}

export default SectionStateComponent;
"
`;

exports[`Solid > jsx > Typescript Test > Section 3`] = `
"import { css } from \\"solid-styled-components\\";
export interface SectionProps {
  maxWidth?: number;
  attributes?: any;
  children?: any;
}

function SectionComponent(props: SectionProps) {
  return (
    <>
      <section>
        <div></div>
        <div></div>
        <div></div>
      </section>
    </>
  );
}

export default SectionComponent;
"
`;

exports[`Solid > jsx > Typescript Test > Section 4`] = `
"import { Show, For, createSignal } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";
export interface SectionProps {
  maxWidth?: number;
  attributes?: any;
  children?: any;
}

function SectionStateComponent(props: SectionProps) {
  const [max, setMax] = createSignal(42);

  const [items, setItems] = createSignal([42]);

  return (
    <>
      <Show when={max()}>
        <div></div>
        <For each={items()}>
          {(item, _index) => {
            const index = _index();
            return (
              <section>
                <div></div>
                <div></div>
                <div></div>
              </section>
            );
          }}
        </For>
        <div></div>
      </Show>
    </>
  );
}

export default SectionStateComponent;
"
`;

exports[`Solid > jsx > Typescript Test > Select 1`] = `
"import { For } from \\"solid-js\\";

export interface FormSelectProps {
  options?: {
    name?: string;
    value: string;
  }[];
  attributes?: any;
  name?: string;
  value?: string;
  defaultValue?: string;
}

import { Builder } from \\"@builder.io/sdk\\";

function SelectComponent(props: FormSelectProps) {
  return (
    <select name={props.name} defaultvalue={props.defaultValue}>
      <div></div>
      <For each={props.options}>
        {(option, _index) => {
          const index = _index();
          return (
            <option data-index={index}>
              <div></div>
              <div></div>
              <div></div>
            </option>
          );
        }}
      </For>
      <div></div>
    </select>
  );
}

export default SelectComponent;
"
`;

exports[`Solid > jsx > Typescript Test > Select 2`] = `
"import { For } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";
export interface FormSelectProps {
  options?: {
    name?: string;
    value: string;
  }[];
  attributes?: any;
  name?: string;
  value?: string;
  defaultValue?: string;
}

import { Builder } from \\"@builder.io/sdk\\";

function SelectComponent(props: FormSelectProps) {
  return (
    <>
      <select name={props.name} defaultvalue={props.defaultValue}>
        <div></div>
        <For each={props.options}>
          {(option, _index) => {
            const index = _index();
            return (
              <option data-index={index}>
                <div></div>
                <div></div>
                <div></div>
              </option>
            );
          }}
        </For>
        <div></div>
      </select>
    </>
  );
}

export default SelectComponent;
"
`;

exports[`Solid > jsx > Typescript Test > SlotDefault 1`] = `
"type Props = {
  [key: string]: string;
};

function SlotCode(props: Props) {
  return (
    <div>
      <div></div>
      <Slot>
        <div></div>
        <div>
          <div></div>
        </div>
        <div></div>
      </Slot>
      <div></div>
    </div>
  );
}

export default SlotCode;
"
`;

exports[`Solid > jsx > Typescript Test > SlotDefault 2`] = `
"import { css } from \\"solid-styled-components\\";
type Props = {
  [key: string]: string;
};

function SlotCode(props: Props) {
  return (
    <>
      <div>
        <div></div>
        <Slot>
          <div></div>
          <div>
            <div></div>
          </div>
          <div></div>
        </Slot>
        <div></div>
      </div>
    </>
  );
}

export default SlotCode;
"
`;

exports[`Solid > jsx > Typescript Test > SlotHtml 1`] = `
"type Props = {
  [key: string]: string;
};

import ContentSlotCode from \\"./content-slot-jsx.raw\\";

function SlotCode(props: Props) {
  return (
    <div>
      <div></div>
      <ContentSlotCode>
        <div></div>
        <Slot testing={<div>Hello</div>}></Slot>
        <div></div>
      </ContentSlotCode>
      <div></div>
    </div>
  );
}

export default SlotCode;
"
`;

exports[`Solid > jsx > Typescript Test > SlotHtml 2`] = `
"import { css } from \\"solid-styled-components\\";
type Props = {
  [key: string]: string;
};

import ContentSlotCode from \\"./content-slot-jsx.raw\\";

function SlotCode(props: Props) {
  return (
    <>
      <div>
        <div></div>
        <ContentSlotCode>
          <div></div>
          <Slot testing={<div>Hello</div>}></Slot>
          <div></div>
        </ContentSlotCode>
        <div></div>
      </div>
    </>
  );
}

export default SlotCode;
"
`;

exports[`Solid > jsx > Typescript Test > SlotJsx 1`] = `
"type Props = {
  [key: string]: string;
};

import ContentSlotCode from \\"./content-slot-jsx.raw\\";

function SlotCode(props: Props) {
  return (
    <div>
      <div></div>
      <ContentSlotCode slotTesting={<div>Hello</div>}></ContentSlotCode>
      <div></div>
    </div>
  );
}

export default SlotCode;
"
`;

exports[`Solid > jsx > Typescript Test > SlotJsx 2`] = `
"import { css } from \\"solid-styled-components\\";
type Props = {
  [key: string]: string;
};

import ContentSlotCode from \\"./content-slot-jsx.raw\\";

function SlotCode(props: Props) {
  return (
    <>
      <div>
        <div></div>
        <ContentSlotCode slotTesting={<div>Hello</div>}></ContentSlotCode>
        <div></div>
      </div>
    </>
  );
}

export default SlotCode;
"
`;

exports[`Solid > jsx > Typescript Test > SlotNamed 1`] = `
"type Props = {
  [key: string]: string;
};

function SlotCode(props: Props) {
  return (
    <div>
      <div></div>
      <Slot name=\\"top\\"></Slot>
      <div></div>
      <Slot name=\\"left\\">
        <div></div>
      </Slot>
      <div></div>
      <Slot>
        <div></div>
      </Slot>
      <div></div>
    </div>
  );
}

export default SlotCode;
"
`;

exports[`Solid > jsx > Typescript Test > SlotNamed 2`] = `
"import { css } from \\"solid-styled-components\\";
type Props = {
  [key: string]: string;
};

function SlotCode(props: Props) {
  return (
    <>
      <div>
        <div></div>
        <Slot name=\\"top\\"></Slot>
        <div></div>
        <Slot name=\\"left\\">
          <div></div>
        </Slot>
        <div></div>
        <Slot>
          <div></div>
        </Slot>
        <div></div>
      </div>
    </>
  );
}

export default SlotCode;
"
`;

exports[`Solid > jsx > Typescript Test > Stamped.io 1`] = `
"import { Show, For, onMount, createSignal } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";
type SmileReviewsProps = {
  productId: string;
  apiKey: string;
};

import { kebabCase } from \\"lodash\\";
import { snakeCase } from \\"lodash\\";

function SmileReviews(props: SmileReviewsProps) {
  const [reviews, setReviews] = createSignal([]);

  const [name, setName] = createSignal(\\"test\\");

  const [showReviewPrompt, setShowReviewPrompt] = createSignal(false);

  function kebabCaseValue() {
    return kebabCase(\\"testThat\\");
  }

  function snakeCaseValue() {
    return snakeCase(\\"testThis\\");
  }

  onMount(() => {
    fetch(
      \`https://stamped.io/api/widget/reviews?storeUrl=builder-io.myshopify.com&apiKey=\${
        props.apiKey || \\"pubkey-8bbDq7W6w4sB3OWeM1HUy2s47702hM\\"
      }&productId=\${props.productId || \\"2410511106127\\"}\`
    )
      .then((res) => res.json())
      .then((data) => {
        setReviews(data.data);
      });
  });

  return (
    <div data-user={name()}>
      <div></div>
      <button onclick={(event) => setShowReviewPrompt(true)}>
        <div></div>
      </button>
      <div></div>
      <Show when={showReviewPrompt() || \\"asdf\\"}>
        <div></div>
        <input />
        <div></div>
        <input />
        <div></div>
        <textarea></textarea>
        <div></div>
        <button
          onclick={(event) => {
            event.preventDefault();
            setShowReviewPrompt(false);
          }}
        >
          <div></div>
        </button>
        <div></div>
      </Show>
      <div></div>
      <For each={reviews()}>
        {(review, _index) => {
          const index = _index();
          return (
            <div>
              <div></div>
              <img />
              <div></div>
              <div>
                <div></div>
                <div>
                  <div></div>
                  <div></div>
                </div>
                <div></div>
                <div>
                  <div></div>
                </div>
                <div></div>
                <div>
                  <div></div>
                </div>
                <div></div>
              </div>
              <div></div>
            </div>
          );
        }}
      </For>
      <div></div>
    </div>
  );
}

export default SmileReviews;
"
`;

exports[`Solid > jsx > Typescript Test > Stamped.io 2`] = `
"import { Show, For, onMount, createSignal } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";
type SmileReviewsProps = {
  productId: string;
  apiKey: string;
};

import { kebabCase } from \\"lodash\\";
import { snakeCase } from \\"lodash\\";

function SmileReviews(props: SmileReviewsProps) {
  const [reviews, setReviews] = createSignal([]);

  const [name, setName] = createSignal(\\"test\\");

  const [showReviewPrompt, setShowReviewPrompt] = createSignal(false);

  function kebabCaseValue() {
    return kebabCase(\\"testThat\\");
  }

  function snakeCaseValue() {
    return snakeCase(\\"testThis\\");
  }

  onMount(() => {
    fetch(
      \`https://stamped.io/api/widget/reviews?storeUrl=builder-io.myshopify.com&apiKey=\${
        props.apiKey || \\"pubkey-8bbDq7W6w4sB3OWeM1HUy2s47702hM\\"
      }&productId=\${props.productId || \\"2410511106127\\"}\`
    )
      .then((res) => res.json())
      .then((data) => {
        setReviews(data.data);
      });
  });

  return (
    <>
      <div data-user={name()}>
        <div></div>
        <button onclick={(event) => setShowReviewPrompt(true)}>
          <div></div>
        </button>
        <div></div>
        <Show when={showReviewPrompt() || \\"asdf\\"}>
          <div></div>
          <input />
          <div></div>
          <input />
          <div></div>
          <textarea></textarea>
          <div></div>
          <button
            onclick={(event) => {
              event.preventDefault();
              setShowReviewPrompt(false);
            }}
          >
            <div></div>
          </button>
          <div></div>
        </Show>
        <div></div>
        <For each={reviews()}>
          {(review, _index) => {
            const index = _index();
            return (
              <div>
                <div></div>
                <img />
                <div></div>
                <div>
                  <div></div>
                  <div>
                    <div></div>
                    <div></div>
                  </div>
                  <div></div>
                  <div>
                    <div></div>
                  </div>
                  <div></div>
                  <div>
                    <div></div>
                  </div>
                  <div></div>
                </div>
                <div></div>
              </div>
            );
          }}
        </For>
        <div></div>
      </div>
    </>
  );
}

export default SmileReviews;
"
`;

exports[`Solid > jsx > Typescript Test > Submit 1`] = `
"export interface ButtonProps {
  attributes?: any;
  text?: string;
}

function SubmitButton(props: ButtonProps) {
  return (
    <button>
      <div></div>
      <div></div>
      <div></div>
    </button>
  );
}

export default SubmitButton;
"
`;

exports[`Solid > jsx > Typescript Test > Submit 2`] = `
"import { css } from \\"solid-styled-components\\";
export interface ButtonProps {
  attributes?: any;
  text?: string;
}

function SubmitButton(props: ButtonProps) {
  return (
    <>
      <button>
        <div></div>
        <div></div>
        <div></div>
      </button>
    </>
  );
}

export default SubmitButton;
"
`;

exports[`Solid > jsx > Typescript Test > Text 1`] = `
"import { createSignal } from \\"solid-js\\";

export interface TextProps {
  attributes?: any;
  rtlMode: boolean;
  text?: string;
  content?: string;
  builderBlock?: any;
}

import { Builder } from \\"@builder.io/sdk\\";

function Text(props: TextProps) {
  const [name, setName] = createSignal(\\"Decadef20\\");

  return (
    <div
      data-name={{
        test: name() || \\"any name\\",
      }}
      contenteditable={allowEditingText || undefined}
      innerhtml={
        props.text ||
        props.content ||
        name() ||
        '<p class=\\"text-lg\\">my name</p>'
      }
    ></div>
  );
}

export default Text;
"
`;

exports[`Solid > jsx > Typescript Test > Text 2`] = `
"import { createSignal } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";
export interface TextProps {
  attributes?: any;
  rtlMode: boolean;
  text?: string;
  content?: string;
  builderBlock?: any;
}

import { Builder } from \\"@builder.io/sdk\\";

function Text(props: TextProps) {
  const [name, setName] = createSignal(\\"Decadef20\\");

  return (
    <>
      <div
        data-name={{
          test: name() || \\"any name\\",
        }}
        contenteditable={allowEditingText || undefined}
        innerhtml={
          props.text ||
          props.content ||
          name() ||
          '<p class=\\"text-lg\\">my name</p>'
        }
      ></div>
    </>
  );
}

export default Text;
"
`;

exports[`Solid > jsx > Typescript Test > Textarea 1`] = `
"export interface TextareaProps {
  attributes?: any;
  name?: string;
  value?: string;
  defaultValue?: string;
  placeholder?: string;
}

function Textarea(props: TextareaProps) {
  return (
    <textarea name={props.name} defaultvalue={props.defaultValue}></textarea>
  );
}

export default Textarea;
"
`;

exports[`Solid > jsx > Typescript Test > Textarea 2`] = `
"import { css } from \\"solid-styled-components\\";
export interface TextareaProps {
  attributes?: any;
  name?: string;
  value?: string;
  defaultValue?: string;
  placeholder?: string;
}

function Textarea(props: TextareaProps) {
  return (
    <>
      <textarea name={props.name} defaultvalue={props.defaultValue}></textarea>
    </>
  );
}

export default Textarea;
"
`;

exports[`Solid > jsx > Typescript Test > Video 1`] = `
"export interface VideoProps {
  attributes?: any;
  video?: string;
  autoPlay?: boolean;
  controls?: boolean;
  muted?: boolean;
  loop?: boolean;
  playsInline?: boolean;
  aspectRatio?: number;
  width?: number;
  height?: number;
  fit?: \\"contain\\" | \\"cover\\" | \\"fill\\";
  position?:
    | \\"center\\"
    | \\"top\\"
    | \\"left\\"
    | \\"right\\"
    | \\"bottom\\"
    | \\"top left\\"
    | \\"top right\\"
    | \\"bottom left\\"
    | \\"bottom right\\";
  posterImage?: string;
  lazyLoad?: boolean;
}

function Video(props: VideoProps) {
  return <video></video>;
}

export default Video;
"
`;

exports[`Solid > jsx > Typescript Test > Video 2`] = `
"import { css } from \\"solid-styled-components\\";
export interface VideoProps {
  attributes?: any;
  video?: string;
  autoPlay?: boolean;
  controls?: boolean;
  muted?: boolean;
  loop?: boolean;
  playsInline?: boolean;
  aspectRatio?: number;
  width?: number;
  height?: number;
  fit?: \\"contain\\" | \\"cover\\" | \\"fill\\";
  position?:
    | \\"center\\"
    | \\"top\\"
    | \\"left\\"
    | \\"right\\"
    | \\"bottom\\"
    | \\"top left\\"
    | \\"top right\\"
    | \\"bottom left\\"
    | \\"bottom right\\";
  posterImage?: string;
  lazyLoad?: boolean;
}

function Video(props: VideoProps) {
  return (
    <>
      <video></video>
    </>
  );
}

export default Video;
"
`;

exports[`Solid > jsx > Typescript Test > arrowFunctionInUseStore 1`] = `
"import { createSignal } from \\"solid-js\\";

function MyComponent(props: any) {
  const [name, setName] = createSignal(\\"steve\\");

  function setName(value) {
    setName(value);
  }

  function updateNameWithArrowFn(value) {
    setName(value);
  }

  return (
    <div>
      <div></div>
      <div></div>
    </div>
  );
}

export default MyComponent;
"
`;

exports[`Solid > jsx > Typescript Test > arrowFunctionInUseStore 2`] = `
"import { createSignal } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";

function MyComponent(props: any) {
  const [name, setName] = createSignal(\\"steve\\");

  function setName(value) {
    setName(value);
  }

  function updateNameWithArrowFn(value) {
    setName(value);
  }

  return (
    <>
      <div>
        <div></div>
        <div></div>
      </div>
    </>
  );
}

export default MyComponent;
"
`;

exports[`Solid > jsx > Typescript Test > basicOnUpdateReturn 1`] = `
"import { on, createEffect, createSignal } from \\"solid-js\\";

function MyBasicOnUpdateReturnComponent(props: any) {
  const [name, setName] = createSignal(\\"PatrickJS\\");

  function onUpdateFn_0() {
    const controller = new AbortController();
    const signal = controller.signal;
    fetch(\\"https://patrickjs.com/api/resource.json\\", {
      signal,
    })
      .then((response) => response.json())
      .then((data) => {
        setName(data.name);
      });
    return () => {
      if (!signal.aborted) {
        controller.abort();
      }
    };
  }
  createEffect(on(() => [name()], onUpdateFn_0));

  return (
    <div>
      <div></div>
      <div></div>
    </div>
  );
}

export default MyBasicOnUpdateReturnComponent;
"
`;

exports[`Solid > jsx > Typescript Test > basicOnUpdateReturn 2`] = `
"import { on, createEffect, createSignal } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";

function MyBasicOnUpdateReturnComponent(props: any) {
  const [name, setName] = createSignal(\\"PatrickJS\\");

  function onUpdateFn_0() {
    const controller = new AbortController();
    const signal = controller.signal;
    fetch(\\"https://patrickjs.com/api/resource.json\\", {
      signal,
    })
      .then((response) => response.json())
      .then((data) => {
        setName(data.name);
      });
    return () => {
      if (!signal.aborted) {
        controller.abort();
      }
    };
  }
  createEffect(on(() => [name()], onUpdateFn_0));

  return (
    <>
      <div>
        <div></div>
        <div></div>
      </div>
    </>
  );
}

export default MyBasicOnUpdateReturnComponent;
"
`;

exports[`Solid > jsx > Typescript Test > camelCasedAttributes 1`] = `
"import { createSignal } from \\"solid-js\\";

import React from \\"@builder.io/react\\";

function MyComponent(props: any) {
  const [name, setName] = createSignal(\\"Steve\\");

  return (
    <div>
      <div></div>
      <img srcset=\\"http://example.com\\" />
      <div></div>
    </div>
  );
}

export default MyComponent;
"
`;

exports[`Solid > jsx > Typescript Test > camelCasedAttributes 2`] = `
"import { createSignal } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";

import React from \\"@builder.io/react\\";

function MyComponent(props: any) {
  const [name, setName] = createSignal(\\"Steve\\");

  return (
    <>
      <div>
        <div></div>
        <img srcset=\\"http://example.com\\" />
        <div></div>
      </div>
    </>
  );
}

export default MyComponent;
"
`;

exports[`Solid > jsx > Typescript Test > class + ClassName + css 1`] = `
"import { css } from \\"solid-styled-components\\";

function MyBasicComponent(props: any) {
  return (
    <div>
      <div></div>
    </div>
  );
}

export default MyBasicComponent;
"
`;

exports[`Solid > jsx > Typescript Test > class + ClassName + css 2`] = `
"import { css } from \\"solid-styled-components\\";

function MyBasicComponent(props: any) {
  return (
    <>
      <div>
        <div></div>
      </div>
    </>
  );
}

export default MyBasicComponent;
"
`;

exports[`Solid > jsx > Typescript Test > class + css 1`] = `
"import { css } from \\"solid-styled-components\\";

function MyBasicComponent(props: any) {
  return (
    <div>
      <div></div>
    </div>
  );
}

export default MyBasicComponent;
"
`;

exports[`Solid > jsx > Typescript Test > class + css 2`] = `
"import { css } from \\"solid-styled-components\\";

function MyBasicComponent(props: any) {
  return (
    <>
      <div>
        <div></div>
      </div>
    </>
  );
}

export default MyBasicComponent;
"
`;

exports[`Solid > jsx > Typescript Test > className + css 1`] = `
"import { css } from \\"solid-styled-components\\";

function MyBasicComponent(props: any) {
  return (
    <div>
      <div></div>
    </div>
  );
}

export default MyBasicComponent;
"
`;

exports[`Solid > jsx > Typescript Test > className + css 2`] = `
"import { css } from \\"solid-styled-components\\";

function MyBasicComponent(props: any) {
  return (
    <>
      <div>
        <div></div>
      </div>
    </>
  );
}

export default MyBasicComponent;
"
`;

exports[`Solid > jsx > Typescript Test > className 1`] = `
"import { createSignal } from \\"solid-js\\";

type Props = {
  [key: string]: string | JSX.Element;
  slotTesting: JSX.Element;
};

function ClassNameCode(props: Props) {
  const [bindings, setBindings] = createSignal(\\"a binding\\");

  return (
    <div>
      <div></div>
      <div></div>
      <div>
        <div></div>
      </div>
      <div></div>
      <div></div>
      <div>
        <div></div>
      </div>
      <div></div>
    </div>
  );
}

export default ClassNameCode;
"
`;

exports[`Solid > jsx > Typescript Test > className 2`] = `
"import { createSignal } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";
type Props = {
  [key: string]: string | JSX.Element;
  slotTesting: JSX.Element;
};

function ClassNameCode(props: Props) {
  const [bindings, setBindings] = createSignal(\\"a binding\\");

  return (
    <>
      <div>
        <div></div>
        <div></div>
        <div>
          <div></div>
        </div>
        <div></div>
        <div></div>
        <div>
          <div></div>
        </div>
        <div></div>
      </div>
    </>
  );
}

export default ClassNameCode;
"
`;

exports[`Solid > jsx > Typescript Test > classState 1`] = `
"import { createSignal } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";

function MyBasicComponent(props: any) {
  const [classState, setClassState] = createSignal(\\"testClassName\\");

  const [styleState, setStyleState] = createSignal({
    color: \\"red\\",
  });

  return (
    <div>
      <div></div>
    </div>
  );
}

export default MyBasicComponent;
"
`;

exports[`Solid > jsx > Typescript Test > classState 2`] = `
"import { createSignal } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";

function MyBasicComponent(props: any) {
  const [classState, setClassState] = createSignal(\\"testClassName\\");

  const [styleState, setStyleState] = createSignal({
    color: \\"red\\",
  });

  return (
    <>
      <div>
        <div></div>
      </div>
    </>
  );
}

export default MyBasicComponent;
"
`;

exports[`Solid > jsx > Typescript Test > componentWithContext 1`] = `
"import { useContext } from \\"solid-js\\";

export interface ComponentWithContextProps {
  content: string;
}

import Context1 from \\"@dummy/1\\";
import Context2 from \\"@dummy/2\\";

function ComponentWithContext(props: ComponentWithContextProps) {
  const foo = useContext(Context1);

  return (
    <Context2.Provider
      value={{
        bar: \\"baz\\",
      }}
    >
      <Context1.Provider
        value={{
          foo: \\"bar\\",

          content() {
            return props.content;
          },
        }}
      >
        <>
          <div></div>
          <>
            <div></div>
          </>
          <div></div>
        </>
      </Context1.Provider>
    </Context2.Provider>
  );
}

export default ComponentWithContext;
"
`;

exports[`Solid > jsx > Typescript Test > componentWithContext 2`] = `
"import { useContext } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";
export interface ComponentWithContextProps {
  content: string;
}

import Context1 from \\"@dummy/1\\";
import Context2 from \\"@dummy/2\\";

function ComponentWithContext(props: ComponentWithContextProps) {
  const foo = useContext(Context1);

  return (
    <>
      <Context2.Provider
        value={{
          bar: \\"baz\\",
        }}
      >
        <Context1.Provider
          value={{
            foo: \\"bar\\",

            content() {
              return props.content;
            },
          }}
        >
          <>
            <div></div>
            <>
              <div></div>
            </>
            <div></div>
          </>
        </Context1.Provider>
      </Context2.Provider>
    </>
  );
}

export default ComponentWithContext;
"
`;

exports[`Solid > jsx > Typescript Test > componentWithContextMultiRoot 1`] = `
"import { useContext } from \\"solid-js\\";

export interface ComponentWithContextProps {
  content: string;
}

import Context1 from \\"@dummy/1\\";
import Context2 from \\"@dummy/2\\";

function ComponentWithContext(props: ComponentWithContextProps) {
  const foo = useContext(Context1);

  return (
    <Context2.Provider
      value={{
        bar: \\"baz\\",
      }}
    >
      <Context1.Provider
        value={{
          foo: \\"bar\\",

          content() {
            return props.content;
          },
        }}
      >
        <>
          <div></div>
          <>
            <div></div>
          </>
          <div></div>
          <div>
            <div></div>
          </div>
          <div></div>
        </>
      </Context1.Provider>
    </Context2.Provider>
  );
}

export default ComponentWithContext;
"
`;

exports[`Solid > jsx > Typescript Test > componentWithContextMultiRoot 2`] = `
"import { useContext } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";
export interface ComponentWithContextProps {
  content: string;
}

import Context1 from \\"@dummy/1\\";
import Context2 from \\"@dummy/2\\";

function ComponentWithContext(props: ComponentWithContextProps) {
  const foo = useContext(Context1);

  return (
    <>
      <Context2.Provider
        value={{
          bar: \\"baz\\",
        }}
      >
        <Context1.Provider
          value={{
            foo: \\"bar\\",

            content() {
              return props.content;
            },
          }}
        >
          <>
            <div></div>
            <>
              <div></div>
            </>
            <div></div>
            <div>
              <div></div>
            </div>
            <div></div>
          </>
        </Context1.Provider>
      </Context2.Provider>
    </>
  );
}

export default ComponentWithContext;
"
`;

exports[`Solid > jsx > Typescript Test > contentState 1`] = `
"import BuilderContext from \\"@dummy/context.jsx\\";

function RenderContent(props: any) {
  return (
    <BuilderContext.Provider
      value={{
        content: props.content,
        registeredComponents: props.customComponents,
      }}
    >
      <div>
        <div></div>
      </div>
    </BuilderContext.Provider>
  );
}

export default RenderContent;
"
`;

exports[`Solid > jsx > Typescript Test > contentState 2`] = `
"import { css } from \\"solid-styled-components\\";

import BuilderContext from \\"@dummy/context.jsx\\";

function RenderContent(props: any) {
  return (
    <>
      <BuilderContext.Provider
        value={{
          content: props.content,
          registeredComponents: props.customComponents,
        }}
      >
        <div>
          <div></div>
        </div>
      </BuilderContext.Provider>
    </>
  );
}

export default RenderContent;
"
`;

exports[`Solid > jsx > Typescript Test > defaultProps 1`] = `
"import { Show } from \\"solid-js\\";

export interface ButtonProps {
  attributes?: any;
  text?: string;
  buttonText?: string; // no default value

  link?: string;
  openLinkInNewTab?: boolean;
  onClick?: () => void;
}

function Button(props: ButtonProps) {
  return (
    <div>
      <div></div>
      <Show when={props.link}>
        <div></div>
        <a>
          <div></div>
          <div></div>
          <div></div>
        </a>
        <div></div>
      </Show>
      <div></div>
      <Show when={!props.link}>
        <div></div>
        <button onclick={(event) => props.onClick(event)}>
          <div></div>
          <div></div>
          <div></div>
        </button>
        <div></div>
      </Show>
      <div></div>
    </div>
  );
}

export default Button;
"
`;

exports[`Solid > jsx > Typescript Test > defaultProps 2`] = `
"import { Show } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";
export interface ButtonProps {
  attributes?: any;
  text?: string;
  buttonText?: string; // no default value

  link?: string;
  openLinkInNewTab?: boolean;
  onClick?: () => void;
}

function Button(props: ButtonProps) {
  return (
    <>
      <div>
        <div></div>
        <Show when={props.link}>
          <div></div>
          <a>
            <div></div>
            <div></div>
            <div></div>
          </a>
          <div></div>
        </Show>
        <div></div>
        <Show when={!props.link}>
          <div></div>
          <button onclick={(event) => props.onClick(event)}>
            <div></div>
            <div></div>
            <div></div>
          </button>
          <div></div>
        </Show>
        <div></div>
      </div>
    </>
  );
}

export default Button;
"
`;

exports[`Solid > jsx > Typescript Test > defaultPropsOutsideComponent 1`] = `
"import { Show } from \\"solid-js\\";

export interface ButtonProps {
  attributes?: any;
  text?: string;
  link?: string;
  openLinkInNewTab?: boolean;
  onClick: () => void;
}

function Button(props: ButtonProps) {
  return (
    <div>
      <div></div>
      <Show when={props.link}>
        <div></div>
        <a>
          <div></div>
          <div></div>
          <div></div>
        </a>
        <div></div>
      </Show>
      <div></div>
      <Show when={!props.link}>
        <div></div>
        <button onclick={(event) => props.onClick(event)}>
          <div></div>
          <div></div>
          <div></div>
        </button>
        <div></div>
      </Show>
      <div></div>
    </div>
  );
}

export default Button;
"
`;

exports[`Solid > jsx > Typescript Test > defaultPropsOutsideComponent 2`] = `
"import { Show } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";
export interface ButtonProps {
  attributes?: any;
  text?: string;
  link?: string;
  openLinkInNewTab?: boolean;
  onClick: () => void;
}

function Button(props: ButtonProps) {
  return (
    <>
      <div>
        <div></div>
        <Show when={props.link}>
          <div></div>
          <a>
            <div></div>
            <div></div>
            <div></div>
          </a>
          <div></div>
        </Show>
        <div></div>
        <Show when={!props.link}>
          <div></div>
          <button onclick={(event) => props.onClick(event)}>
            <div></div>
            <div></div>
            <div></div>
          </button>
          <div></div>
        </Show>
        <div></div>
      </div>
    </>
  );
}

export default Button;
"
`;

exports[`Solid > jsx > Typescript Test > defaultValsWithTypes 1`] = `
"type Props = {
  name: string;
};

const DEFAULT_VALUES: Props = {
  name: \\"Sami\\",
};

function ComponentWithTypes(props: Props) {
  return (
    <div>
      <div></div>
      <div></div>
    </div>
  );
}

export default ComponentWithTypes;
"
`;

exports[`Solid > jsx > Typescript Test > defaultValsWithTypes 2`] = `
"import { css } from \\"solid-styled-components\\";
type Props = {
  name: string;
};

const DEFAULT_VALUES: Props = {
  name: \\"Sami\\",
};

function ComponentWithTypes(props: Props) {
  return (
    <>
      <div>
        <div></div>
        <div></div>
      </div>
    </>
  );
}

export default ComponentWithTypes;
"
`;

exports[`Solid > jsx > Typescript Test > expressionState 1`] = `
"import { createSignal } from \\"solid-js\\";

function MyComponent(props: any) {
  const [refToUse, setRefToUse] = createSignal(
    !(props.componentRef instanceof Function) ? props.componentRef : null
  );

  return (
    <div>
      <div></div>
    </div>
  );
}

export default MyComponent;
"
`;

exports[`Solid > jsx > Typescript Test > expressionState 2`] = `
"import { createSignal } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";

function MyComponent(props: any) {
  const [refToUse, setRefToUse] = createSignal(
    !(props.componentRef instanceof Function) ? props.componentRef : null
  );

  return (
    <>
      <div>
        <div></div>
      </div>
    </>
  );
}

export default MyComponent;
"
`;

exports[`Solid > jsx > Typescript Test > import types 1`] = `
"import { createSignal } from \\"solid-js\\";

type RenderContentProps = {
  options?: GetContentOptions;
  content: BuilderContent;
  renderContentProps: RenderBlockProps;
};

import RenderBlock from \\"./builder-render-block.raw\\";

function RenderContent(props: RenderContentProps) {
  function getRenderContentProps(block, index) {
    return {
      block: block,
      index: index,
    };
  }

  return (
    <RenderBlock
      {...getRenderContentProps(props.renderContentProps.block, 0)}
    ></RenderBlock>
  );
}

export default RenderContent;
"
`;

exports[`Solid > jsx > Typescript Test > import types 2`] = `
"import { createSignal } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";
type RenderContentProps = {
  options?: GetContentOptions;
  content: BuilderContent;
  renderContentProps: RenderBlockProps;
};

import RenderBlock from \\"./builder-render-block.raw\\";

function RenderContent(props: RenderContentProps) {
  function getRenderContentProps(block, index) {
    return {
      block: block,
      index: index,
    };
  }

  return (
    <>
      <RenderBlock
        {...getRenderContentProps(props.renderContentProps.block, 0)}
      ></RenderBlock>
    </>
  );
}

export default RenderContent;
"
`;

exports[`Solid > jsx > Typescript Test > multipleOnUpdate 1`] = `
"import { on, createEffect } from \\"solid-js\\";

function MultipleOnUpdate(props: any) {
  return <div></div>;
}

export default MultipleOnUpdate;
"
`;

exports[`Solid > jsx > Typescript Test > multipleOnUpdate 2`] = `
"import { on, createEffect } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";

function MultipleOnUpdate(props: any) {
  return (
    <>
      <div></div>
    </>
  );
}

export default MultipleOnUpdate;
"
`;

exports[`Solid > jsx > Typescript Test > multipleOnUpdateWithDeps 1`] = `
"import { on, createEffect, createSignal } from \\"solid-js\\";

function MultipleOnUpdateWithDeps(props: any) {
  const [a, setA] = createSignal(\\"a\\");

  const [b, setB] = createSignal(\\"b\\");

  const [c, setC] = createSignal(\\"c\\");

  const [d, setD] = createSignal(\\"d\\");

  function onUpdateFn_0() {
    console.log(\\"Runs when a or b changes\\", a(), b());

    if (a() === \\"a\\") {
      setA(\\"b\\");
    }
  }
  createEffect(on(() => [a(), b()], onUpdateFn_0));

  function onUpdateFn_1() {
    console.log(\\"Runs when c or d changes\\", c(), d());

    if (a() === \\"a\\") {
      setA(\\"b\\");
    }
  }
  createEffect(on(() => [c(), d()], onUpdateFn_1));

  return <div></div>;
}

export default MultipleOnUpdateWithDeps;
"
`;

exports[`Solid > jsx > Typescript Test > multipleOnUpdateWithDeps 2`] = `
"import { on, createEffect, createSignal } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";

function MultipleOnUpdateWithDeps(props: any) {
  const [a, setA] = createSignal(\\"a\\");

  const [b, setB] = createSignal(\\"b\\");

  const [c, setC] = createSignal(\\"c\\");

  const [d, setD] = createSignal(\\"d\\");

  function onUpdateFn_0() {
    console.log(\\"Runs when a or b changes\\", a(), b());

    if (a() === \\"a\\") {
      setA(\\"b\\");
    }
  }
  createEffect(on(() => [a(), b()], onUpdateFn_0));

  function onUpdateFn_1() {
    console.log(\\"Runs when c or d changes\\", c(), d());

    if (a() === \\"a\\") {
      setA(\\"b\\");
    }
  }
  createEffect(on(() => [c(), d()], onUpdateFn_1));

  return (
    <>
      <div></div>
    </>
  );
}

export default MultipleOnUpdateWithDeps;
"
`;

exports[`Solid > jsx > Typescript Test > multipleSpreads 1`] = `
"import { createSignal } from \\"solid-js\\";

function MyBasicComponent(props: any) {
  const [attrs, setAttrs] = createSignal({
    hello: \\"world\\",
  });

  return <input />;
}

export default MyBasicComponent;
"
`;

exports[`Solid > jsx > Typescript Test > multipleSpreads 2`] = `
"import { createSignal } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";

function MyBasicComponent(props: any) {
  const [attrs, setAttrs] = createSignal({
    hello: \\"world\\",
  });

  return (
    <>
      <input />
    </>
  );
}

export default MyBasicComponent;
"
`;

exports[`Solid > jsx > Typescript Test > nestedShow 1`] = `
"import { Show } from \\"solid-js\\";

interface Props {
  conditionA: boolean;
  conditionB: boolean;
}

function NestedShow(props: Props) {
  return (
    <Show
      fallback={
        <div>
          <div></div>
        </div>
      }
      when={props.conditionA}
    >
      <div></div>
      <Show
        fallback={
          <div>
            <div></div>
          </div>
        }
        when={!props.conditionB}
      >
        <div></div>
        <div>
          <div></div>
        </div>
        <div></div>
      </Show>
      <div></div>
    </Show>
  );
}

export default NestedShow;
"
`;

exports[`Solid > jsx > Typescript Test > nestedShow 2`] = `
"import { Show } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";
interface Props {
  conditionA: boolean;
  conditionB: boolean;
}

function NestedShow(props: Props) {
  return (
    <>
      <Show
        fallback={
          <div>
            <div></div>
          </div>
        }
        when={props.conditionA}
      >
        <div></div>
        <Show
          fallback={
            <div>
              <div></div>
            </div>
          }
          when={!props.conditionB}
        >
          <div></div>
          <div>
            <div></div>
          </div>
          <div></div>
        </Show>
        <div></div>
      </Show>
    </>
  );
}

export default NestedShow;
"
`;

exports[`Solid > jsx > Typescript Test > nestedStyles 1`] = `
"import { css } from \\"solid-styled-components\\";

function NestedStyles(props: any) {
  return (
    <div>
      <div></div>
    </div>
  );
}

export default NestedStyles;
"
`;

exports[`Solid > jsx > Typescript Test > nestedStyles 2`] = `
"import { css } from \\"solid-styled-components\\";

function NestedStyles(props: any) {
  return (
    <>
      <div>
        <div></div>
      </div>
    </>
  );
}

export default NestedStyles;
"
`;

exports[`Solid > jsx > Typescript Test > onInit & onMount 1`] = `
"import { onMount } from \\"solid-js\\";

function OnInit(props: any) {
  onMount(() => {
    console.log(\\"onMount\\");
  });

  return <div></div>;
}

export default OnInit;
"
`;

exports[`Solid > jsx > Typescript Test > onInit & onMount 2`] = `
"import { onMount } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";

function OnInit(props: any) {
  onMount(() => {
    console.log(\\"onMount\\");
  });

  return (
    <>
      <div></div>
    </>
  );
}

export default OnInit;
"
`;

exports[`Solid > jsx > Typescript Test > onInit 1`] = `
"import { createSignal } from \\"solid-js\\";

type Props = {
  name: string;
};

export const defaultValues = {
  name: \\"PatrickJS\\",
};

function OnInit(props: Props) {
  const [name, setName] = createSignal(\\"\\");

  return (
    <div>
      <div></div>
      <div></div>
    </div>
  );
}

export default OnInit;
"
`;

exports[`Solid > jsx > Typescript Test > onInit 2`] = `
"import { createSignal } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";
type Props = {
  name: string;
};

export const defaultValues = {
  name: \\"PatrickJS\\",
};

function OnInit(props: Props) {
  const [name, setName] = createSignal(\\"\\");

  return (
    <>
      <div>
        <div></div>
        <div></div>
      </div>
    </>
  );
}

export default OnInit;
"
`;

exports[`Solid > jsx > Typescript Test > onMount 1`] = `
"import { onMount } from \\"solid-js\\";

function Comp(props: any) {
  onMount(() => {
    console.log(\\"Runs on mount\\");
  });

  return <div></div>;
}

export default Comp;
"
`;

exports[`Solid > jsx > Typescript Test > onMount 2`] = `
"import { onMount } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";

function Comp(props: any) {
  onMount(() => {
    console.log(\\"Runs on mount\\");
  });

  return (
    <>
      <div></div>
    </>
  );
}

export default Comp;
"
`;

exports[`Solid > jsx > Typescript Test > onUpdate 1`] = `
"import { on, createEffect } from \\"solid-js\\";

function OnUpdate(props: any) {
  return <div></div>;
}

export default OnUpdate;
"
`;

exports[`Solid > jsx > Typescript Test > onUpdate 2`] = `
"import { on, createEffect } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";

function OnUpdate(props: any) {
  return (
    <>
      <div></div>
    </>
  );
}

export default OnUpdate;
"
`;

exports[`Solid > jsx > Typescript Test > onUpdateWithDeps 1`] = `
"import { on, createEffect, createSignal } from \\"solid-js\\";

type Props = {
  size: string;
};

function OnUpdateWithDeps(props: Props) {
  const [a, setA] = createSignal(\\"a\\");

  const [b, setB] = createSignal(\\"b\\");

  function onUpdateFn_0() {
    console.log(\\"Runs when a, b or size changes\\", a(), b(), props.size);
  }
  createEffect(on(() => [a(), b(), props.size], onUpdateFn_0));

  return <div></div>;
}

export default OnUpdateWithDeps;
"
`;

exports[`Solid > jsx > Typescript Test > onUpdateWithDeps 2`] = `
"import { on, createEffect, createSignal } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";
type Props = {
  size: string;
};

function OnUpdateWithDeps(props: Props) {
  const [a, setA] = createSignal(\\"a\\");

  const [b, setB] = createSignal(\\"b\\");

  function onUpdateFn_0() {
    console.log(\\"Runs when a, b or size changes\\", a(), b(), props.size);
  }
  createEffect(on(() => [a(), b(), props.size], onUpdateFn_0));

  return (
    <>
      <div></div>
    </>
  );
}

export default OnUpdateWithDeps;
"
`;

exports[`Solid > jsx > Typescript Test > preserveExportOrLocalStatement 1`] = `
"type Types = {
  s: any[];
};
interface IPost {
  len: number;
}
export interface MyBasicComponentProps {
  id: string;
}

const b = 3;
const foo = () => {};
export const a = 3;
export const bar = () => {};
export function run<T>(value: T) {}

function MyBasicComponent(props: MyBasicComponentProps) {
  return <div></div>;
}

export default MyBasicComponent;
"
`;

exports[`Solid > jsx > Typescript Test > preserveExportOrLocalStatement 2`] = `
"import { css } from \\"solid-styled-components\\";
type Types = {
  s: any[];
};
interface IPost {
  len: number;
}
export interface MyBasicComponentProps {
  id: string;
}

const b = 3;
const foo = () => {};
export const a = 3;
export const bar = () => {};
export function run<T>(value: T) {}

function MyBasicComponent(props: MyBasicComponentProps) {
  return (
    <>
      <div></div>
    </>
  );
}

export default MyBasicComponent;
"
`;

exports[`Solid > jsx > Typescript Test > preserveTyping 1`] = `
"export type A = \\"test\\";
export interface C {
  n: \\"test\\";
}
type B = \\"test2\\";
interface D {
  n: \\"test\\";
}
export interface MyBasicComponentProps {
  name: string;
  age?: number;
}

function MyBasicComponent(props: MyBasicComponentProps) {
  return (
    <div>
      <div></div>
      <div></div>
    </div>
  );
}

export default MyBasicComponent;
"
`;

exports[`Solid > jsx > Typescript Test > preserveTyping 2`] = `
"import { css } from \\"solid-styled-components\\";
export type A = \\"test\\";
export interface C {
  n: \\"test\\";
}
type B = \\"test2\\";
interface D {
  n: \\"test\\";
}
export interface MyBasicComponentProps {
  name: string;
  age?: number;
}

function MyBasicComponent(props: MyBasicComponentProps) {
  return (
    <>
      <div>
        <div></div>
        <div></div>
      </div>
    </>
  );
}

export default MyBasicComponent;
"
`;

exports[`Solid > jsx > Typescript Test > propsDestructure 1`] = `
"import { createSignal } from \\"solid-js\\";

type Props = {
  children: any;
  type: string;
};

function MyBasicComponent(props: Props) {
  const [name, setName] = createSignal(\\"Decadef20\\");

  return (
    <div>
      <div></div>
      <div></div>
      <div></div>
      <div></div>
      <div></div>
    </div>
  );
}

export default MyBasicComponent;
"
`;

exports[`Solid > jsx > Typescript Test > propsDestructure 2`] = `
"import { createSignal } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";
type Props = {
  children: any;
  type: string;
};

function MyBasicComponent(props: Props) {
  const [name, setName] = createSignal(\\"Decadef20\\");

  return (
    <>
      <div>
        <div></div>
        <div></div>
        <div></div>
        <div></div>
        <div></div>
      </div>
    </>
  );
}

export default MyBasicComponent;
"
`;

exports[`Solid > jsx > Typescript Test > propsInterface 1`] = `
"interface Person {
  name: string;
  age?: number;
}

function MyBasicComponent(props: Person | never) {
  return (
    <div>
      <div></div>
      <div></div>
    </div>
  );
}

export default MyBasicComponent;
"
`;

exports[`Solid > jsx > Typescript Test > propsInterface 2`] = `
"import { css } from \\"solid-styled-components\\";
interface Person {
  name: string;
  age?: number;
}

function MyBasicComponent(props: Person | never) {
  return (
    <>
      <div>
        <div></div>
        <div></div>
      </div>
    </>
  );
}

export default MyBasicComponent;
"
`;

exports[`Solid > jsx > Typescript Test > propsType 1`] = `
"type Person = {
  name: string;
  age?: number;
};

function MyBasicComponent(props: Person) {
  return (
    <div>
      <div></div>
      <div></div>
    </div>
  );
}

export default MyBasicComponent;
"
`;

exports[`Solid > jsx > Typescript Test > propsType 2`] = `
"import { css } from \\"solid-styled-components\\";
type Person = {
  name: string;
  age?: number;
};

function MyBasicComponent(props: Person) {
  return (
    <>
      <div>
        <div></div>
        <div></div>
      </div>
    </>
  );
}

export default MyBasicComponent;
"
`;

exports[`Solid > jsx > Typescript Test > referencingFunInsideHook 1`] = `
"import { on, createEffect, createSignal } from \\"solid-js\\";

function OnUpdate(props: any) {
  function foo(params) {}

  function bar() {}

  function zoo() {
    const params = {
      cb: bar,
    };
  }

  return <div></div>;
}

export default OnUpdate;
"
`;

exports[`Solid > jsx > Typescript Test > referencingFunInsideHook 2`] = `
"import { on, createEffect, createSignal } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";

function OnUpdate(props: any) {
  function foo(params) {}

  function bar() {}

  function zoo() {
    const params = {
      cb: bar,
    };
  }

  return (
    <>
      <div></div>
    </>
  );
}

export default OnUpdate;
"
`;

exports[`Solid > jsx > Typescript Test > renderBlock 1`] = `
"import { Show, For, createSignal } from \\"solid-js\\";
import { Dynamic } from \\"solid-js/web\\";

import type {
  BuilderContextInterface,
  RegisteredComponent,
} from \\"../../context/types.js\\";
import type { BuilderBlock } from \\"../../types/builder-block.js\\";
import type { Nullable } from \\"../../types/typescript.js\\";
import type { RenderComponentProps } from \\"./render-component\\";
import type { RepeatData } from \\"./types.js\\";
export type RenderBlockProps = {
  block: BuilderBlock;
  context: BuilderContextInterface;
};

import { getBlockActions } from \\"../../functions/get-block-actions.js\\";
import { getBlockComponentOptions } from \\"../../functions/get-block-component-options.js\\";
import { getBlockProperties } from \\"../../functions/get-block-properties.js\\";
import { getBlockTag } from \\"../../functions/get-block-tag.js\\";
import { getProcessedBlock } from \\"../../functions/get-processed-block.js\\";
import { evaluate } from \\"../../functions/evaluate.js\\";
import BlockStyles from \\"./block-styles.jsx\\";
import { isEmptyHtmlElement } from \\"./render-block.helpers.js\\";
import RenderRepeatedBlock from \\"./render-repeated-block.jsx\\";
import { TARGET } from \\"../../constants/target.js\\";
import { extractTextStyles } from \\"../../functions/extract-text-styles.js\\";
import RenderComponentWithContext from \\"./render-component-with-context.jsx\\";
import RenderComponent from \\"./render-component.jsx\\";
import { getReactNativeBlockStyles } from \\"../../functions/get-react-native-block-styles.js\\";

function RenderBlock(props: RenderBlockProps) {
  function component() {
    const componentName = getProcessedBlock({
      block: props.block,
      state: props.context.state,
      context: props.context.context,
      shouldEvaluateBindings: false,
    }).component?.name;

    if (!componentName) {
      return null;
    }

    const ref = props.context.registeredComponents[componentName];

    if (!ref) {
      // TODO: Public doc page with more info about this message
      console.warn(\`
        Could not find a registered component named \\"\${componentName}\\". 
        If you registered it, is the file that registered it imported by the file that needs to render it?\`);
      return undefined;
    } else {
      return ref;
    }
  }

  function tag() {
    return getBlockTag(useBlock());
  }

  function useBlock() {
    return repeatItemData()
      ? props.block
      : getProcessedBlock({
          block: props.block,
          state: props.context.state,
          context: props.context.context,
          shouldEvaluateBindings: true,
        });
  }

  function actions() {
    return getBlockActions({
      block: useBlock(),
      state: props.context.state,
      context: props.context.context,
    });
  }

  function attributes() {
    const blockProperties = getBlockProperties(useBlock());
    return {
      ...blockProperties,
      ...(TARGET === \\"reactNative\\"
        ? {
            style: getReactNativeBlockStyles({
              block: useBlock(),
              context: props.context,
              blockStyles: blockProperties.style,
            }),
          }
        : {}),
    };
  }

  function shouldWrap() {
    return !component()?.noWrap;
  }

  function renderComponentProps() {
    return {
      blockChildren: useChildren(),
      componentRef: component()?.component,
      componentOptions: {
        ...getBlockComponentOptions(useBlock()),

        /**
         * These attributes are passed to the wrapper element when there is one. If \`noWrap\` is set to true, then
         * they are provided to the component itself directly.
         */
        ...(shouldWrap()
          ? {}
          : {
              attributes: { ...attributes(), ...actions() },
            }),
        customBreakpoints: childrenContext()?.content?.meta?.breakpoints,
      },
      context: childrenContext(),
    };
  }

  function useChildren() {
    // TO-DO: When should \`canHaveChildren\` dictate rendering?
    // This is currently commented out because some Builder components (e.g. Box) do not have \`canHaveChildren: true\`,
    // but still receive and need to render children.
    // return state.componentInfo?.canHaveChildren ? state.useBlock.children : [];
    return useBlock().children ?? [];
  }

  function childrenWithoutParentComponent() {
    /**
     * When there is no \`componentRef\`, there might still be children that need to be rendered. In this case,
     * we render them outside of \`componentRef\`.
     * NOTE: We make sure not to render this if \`repeatItemData\` is non-null, because that means we are rendering an array of
     * blocks, and the children will be repeated within those blocks.
     */
    const shouldRenderChildrenOutsideRef =
      !component()?.component && !repeatItemData();
    return shouldRenderChildrenOutsideRef ? useChildren() : [];
  }

  function repeatItemData() {
    /**
     * we don't use \`state.useBlock\` here because the processing done within its logic includes evaluating the block's bindings,
     * which will not work if there is a repeat.
     */
    const { repeat, ...blockWithoutRepeat } = props.block;

    if (!repeat?.collection) {
      return undefined;
    }

    const itemsArray = evaluate({
      code: repeat.collection,
      state: props.context.state,
      context: props.context.context,
    });

    if (!Array.isArray(itemsArray)) {
      return undefined;
    }

    const collectionName = repeat.collection.split(\\".\\").pop();
    const itemNameToUse =
      repeat.itemName || (collectionName ? collectionName + \\"Item\\" : \\"item\\");
    const repeatArray = itemsArray.map((item, index) => ({
      context: {
        ...props.context,
        state: {
          ...props.context.state,
          $index: index,
          $item: item,
          [itemNameToUse]: item,
          [\`$\${itemNameToUse}Index\`]: index,
        },
      },
      block: blockWithoutRepeat,
    }));
    return repeatArray;
  }

  function inheritedTextStyles() {
    if (TARGET !== \\"reactNative\\") {
      return {};
    }

    const styles = getReactNativeBlockStyles({
      block: useBlock(),
      context: props.context,
      blockStyles: attributes().style,
    });
    return extractTextStyles(styles);
  }

  function childrenContext() {
    return {
      apiKey: props.context.apiKey,
      state: props.context.state,
      content: props.context.content,
      context: props.context.context,
      registeredComponents: props.context.registeredComponents,
      inheritedStyles: inheritedTextStyles(),
    };
  }

  function renderComponentTag() {
    if (TARGET === \\"reactNative\\") {
      return RenderComponentWithContext;
    } else if (TARGET === \\"vue3\\") {
      // vue3 expects a string for the component tag
      return \\"RenderComponent\\";
    } else {
      return RenderComponent;
    }
  }

  return (
    <Show
      fallback={
        <Dynamic
          {...renderComponentProps()}
          component={renderComponentTag()}
        ></Dynamic>
      }
      when={shouldWrap()}
    >
      <div></div>
      <div></div>
      <Show when={isEmptyHtmlElement(tag())}>
        <div></div>
        <Dynamic {...attributes()} {...actions()} component={tag()}></Dynamic>
        <div></div>
      </Show>
      <div></div>
      <Show when={!isEmptyHtmlElement(tag()) && repeatItemData()}>
        <div></div>
        <For each={repeatItemData()}>
          {(data, _index) => {
            const index = _index();
            return (
              <RenderRepeatedBlock
                key={index}
                repeatContext={data.context}
                block={data.block}
              ></RenderRepeatedBlock>
            );
          }}
        </For>
        <div></div>
      </Show>
      <div></div>
      <Show when={!isEmptyHtmlElement(tag()) && !repeatItemData()}>
        <div></div>
        <Dynamic {...attributes()} {...actions()} component={tag()}>
          <div></div>
          <Dynamic
            {...renderComponentProps()}
            component={renderComponentTag()}
          ></Dynamic>
          <div></div>
          <div></div>
          <For each={childrenWithoutParentComponent()}>
            {(child, _index) => {
              const index = _index();
              return (
                <RenderBlock
                  key={\\"render-block-\\" + child.id}
                  block={child}
                  context={childrenContext()}
                ></RenderBlock>
              );
            }}
          </For>
          <div></div>
          <For each={childrenWithoutParentComponent()}>
            {(child, _index) => {
              const index = _index();
              return (
                <BlockStyles
                  key={\\"block-style-\\" + child.id}
                  block={child}
                  context={childrenContext()}
                ></BlockStyles>
              );
            }}
          </For>
          <div></div>
        </Dynamic>
        <div></div>
      </Show>
      <div></div>
    </Show>
  );
}

export default RenderBlock;
"
`;

exports[`Solid > jsx > Typescript Test > renderBlock 2`] = `
"import { Show, For, createSignal } from \\"solid-js\\";
import { Dynamic } from \\"solid-js/web\\";

import { css } from \\"solid-styled-components\\";
import type {
  BuilderContextInterface,
  RegisteredComponent,
} from \\"../../context/types.js\\";
import type { BuilderBlock } from \\"../../types/builder-block.js\\";
import type { Nullable } from \\"../../types/typescript.js\\";
import type { RenderComponentProps } from \\"./render-component\\";
import type { RepeatData } from \\"./types.js\\";
export type RenderBlockProps = {
  block: BuilderBlock;
  context: BuilderContextInterface;
};

import { getBlockActions } from \\"../../functions/get-block-actions.js\\";
import { getBlockComponentOptions } from \\"../../functions/get-block-component-options.js\\";
import { getBlockProperties } from \\"../../functions/get-block-properties.js\\";
import { getBlockTag } from \\"../../functions/get-block-tag.js\\";
import { getProcessedBlock } from \\"../../functions/get-processed-block.js\\";
import { evaluate } from \\"../../functions/evaluate.js\\";
import BlockStyles from \\"./block-styles.jsx\\";
import { isEmptyHtmlElement } from \\"./render-block.helpers.js\\";
import RenderRepeatedBlock from \\"./render-repeated-block.jsx\\";
import { TARGET } from \\"../../constants/target.js\\";
import { extractTextStyles } from \\"../../functions/extract-text-styles.js\\";
import RenderComponentWithContext from \\"./render-component-with-context.jsx\\";
import RenderComponent from \\"./render-component.jsx\\";
import { getReactNativeBlockStyles } from \\"../../functions/get-react-native-block-styles.js\\";

function RenderBlock(props: RenderBlockProps) {
  function component() {
    const componentName = getProcessedBlock({
      block: props.block,
      state: props.context.state,
      context: props.context.context,
      shouldEvaluateBindings: false,
    }).component?.name;

    if (!componentName) {
      return null;
    }

    const ref = props.context.registeredComponents[componentName];

    if (!ref) {
      // TODO: Public doc page with more info about this message
      console.warn(\`
        Could not find a registered component named \\"\${componentName}\\". 
        If you registered it, is the file that registered it imported by the file that needs to render it?\`);
      return undefined;
    } else {
      return ref;
    }
  }

  function tag() {
    return getBlockTag(useBlock());
  }

  function useBlock() {
    return repeatItemData()
      ? props.block
      : getProcessedBlock({
          block: props.block,
          state: props.context.state,
          context: props.context.context,
          shouldEvaluateBindings: true,
        });
  }

  function actions() {
    return getBlockActions({
      block: useBlock(),
      state: props.context.state,
      context: props.context.context,
    });
  }

  function attributes() {
    const blockProperties = getBlockProperties(useBlock());
    return {
      ...blockProperties,
      ...(TARGET === \\"reactNative\\"
        ? {
            style: getReactNativeBlockStyles({
              block: useBlock(),
              context: props.context,
              blockStyles: blockProperties.style,
            }),
          }
        : {}),
    };
  }

  function shouldWrap() {
    return !component()?.noWrap;
  }

  function renderComponentProps() {
    return {
      blockChildren: useChildren(),
      componentRef: component()?.component,
      componentOptions: {
        ...getBlockComponentOptions(useBlock()),

        /**
         * These attributes are passed to the wrapper element when there is one. If \`noWrap\` is set to true, then
         * they are provided to the component itself directly.
         */
        ...(shouldWrap()
          ? {}
          : {
              attributes: { ...attributes(), ...actions() },
            }),
        customBreakpoints: childrenContext()?.content?.meta?.breakpoints,
      },
      context: childrenContext(),
    };
  }

  function useChildren() {
    // TO-DO: When should \`canHaveChildren\` dictate rendering?
    // This is currently commented out because some Builder components (e.g. Box) do not have \`canHaveChildren: true\`,
    // but still receive and need to render children.
    // return state.componentInfo?.canHaveChildren ? state.useBlock.children : [];
    return useBlock().children ?? [];
  }

  function childrenWithoutParentComponent() {
    /**
     * When there is no \`componentRef\`, there might still be children that need to be rendered. In this case,
     * we render them outside of \`componentRef\`.
     * NOTE: We make sure not to render this if \`repeatItemData\` is non-null, because that means we are rendering an array of
     * blocks, and the children will be repeated within those blocks.
     */
    const shouldRenderChildrenOutsideRef =
      !component()?.component && !repeatItemData();
    return shouldRenderChildrenOutsideRef ? useChildren() : [];
  }

  function repeatItemData() {
    /**
     * we don't use \`state.useBlock\` here because the processing done within its logic includes evaluating the block's bindings,
     * which will not work if there is a repeat.
     */
    const { repeat, ...blockWithoutRepeat } = props.block;

    if (!repeat?.collection) {
      return undefined;
    }

    const itemsArray = evaluate({
      code: repeat.collection,
      state: props.context.state,
      context: props.context.context,
    });

    if (!Array.isArray(itemsArray)) {
      return undefined;
    }

    const collectionName = repeat.collection.split(\\".\\").pop();
    const itemNameToUse =
      repeat.itemName || (collectionName ? collectionName + \\"Item\\" : \\"item\\");
    const repeatArray = itemsArray.map((item, index) => ({
      context: {
        ...props.context,
        state: {
          ...props.context.state,
          $index: index,
          $item: item,
          [itemNameToUse]: item,
          [\`$\${itemNameToUse}Index\`]: index,
        },
      },
      block: blockWithoutRepeat,
    }));
    return repeatArray;
  }

  function inheritedTextStyles() {
    if (TARGET !== \\"reactNative\\") {
      return {};
    }

    const styles = getReactNativeBlockStyles({
      block: useBlock(),
      context: props.context,
      blockStyles: attributes().style,
    });
    return extractTextStyles(styles);
  }

  function childrenContext() {
    return {
      apiKey: props.context.apiKey,
      state: props.context.state,
      content: props.context.content,
      context: props.context.context,
      registeredComponents: props.context.registeredComponents,
      inheritedStyles: inheritedTextStyles(),
    };
  }

  function renderComponentTag() {
    if (TARGET === \\"reactNative\\") {
      return RenderComponentWithContext;
    } else if (TARGET === \\"vue3\\") {
      // vue3 expects a string for the component tag
      return \\"RenderComponent\\";
    } else {
      return RenderComponent;
    }
  }

  return (
    <>
      <Show
        fallback={
          <Dynamic
            {...renderComponentProps()}
            component={renderComponentTag()}
          ></Dynamic>
        }
        when={shouldWrap()}
      >
        <div></div>
        <div></div>
        <Show when={isEmptyHtmlElement(tag())}>
          <div></div>
          <Dynamic {...attributes()} {...actions()} component={tag()}></Dynamic>
          <div></div>
        </Show>
        <div></div>
        <Show when={!isEmptyHtmlElement(tag()) && repeatItemData()}>
          <div></div>
          <For each={repeatItemData()}>
            {(data, _index) => {
              const index = _index();
              return (
                <RenderRepeatedBlock
                  key={index}
                  repeatContext={data.context}
                  block={data.block}
                ></RenderRepeatedBlock>
              );
            }}
          </For>
          <div></div>
        </Show>
        <div></div>
        <Show when={!isEmptyHtmlElement(tag()) && !repeatItemData()}>
          <div></div>
          <Dynamic {...attributes()} {...actions()} component={tag()}>
            <div></div>
            <Dynamic
              {...renderComponentProps()}
              component={renderComponentTag()}
            ></Dynamic>
            <div></div>
            <div></div>
            <For each={childrenWithoutParentComponent()}>
              {(child, _index) => {
                const index = _index();
                return (
                  <RenderBlock
                    key={\\"render-block-\\" + child.id}
                    block={child}
                    context={childrenContext()}
                  ></RenderBlock>
                );
              }}
            </For>
            <div></div>
            <For each={childrenWithoutParentComponent()}>
              {(child, _index) => {
                const index = _index();
                return (
                  <BlockStyles
                    key={\\"block-style-\\" + child.id}
                    block={child}
                    context={childrenContext()}
                  ></BlockStyles>
                );
              }}
            </For>
            <div></div>
          </Dynamic>
          <div></div>
        </Show>
        <div></div>
      </Show>
    </>
  );
}

export default RenderBlock;
"
`;

exports[`Solid > jsx > Typescript Test > renderContentExample 1`] = `
"import { onMount, on, createEffect } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";
type Props = {
  customComponents: string[];
  content: {
    blocks: any[];
    id: string;
  };
};

import {
  sendComponentsToVisualEditor,
  dispatchNewContentToVisualEditor,
  trackClick,
} from \\"@dummy/injection-js\\";
import BuilderContext from \\"@dummy/context.jsx\\";
import RenderBlocks from \\"@dummy/RenderBlocks.lite.tsx\\";

function RenderContent(props: Props) {
  onMount(() => {
    sendComponentsToVisualEditor(props.customComponents);
  });

  function onUpdateFn_0() {
    dispatchNewContentToVisualEditor(props.content);
  }
  createEffect(on(() => [props.content], onUpdateFn_0));

  return (
    <BuilderContext.Provider
      value={{
        get content() {
          return 3;
        },

        get registeredComponents() {
          return 4;
        },
      }}
    >
      <div onclick={(event) => trackClick(props.content.id)}>
        <div></div>
        <RenderBlocks blocks={props.content.blocks}></RenderBlocks>
        <div></div>
      </div>
    </BuilderContext.Provider>
  );
}

export default RenderContent;
"
`;

exports[`Solid > jsx > Typescript Test > renderContentExample 2`] = `
"import { onMount, on, createEffect } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";
type Props = {
  customComponents: string[];
  content: {
    blocks: any[];
    id: string;
  };
};

import {
  sendComponentsToVisualEditor,
  dispatchNewContentToVisualEditor,
  trackClick,
} from \\"@dummy/injection-js\\";
import BuilderContext from \\"@dummy/context.jsx\\";
import RenderBlocks from \\"@dummy/RenderBlocks.lite.tsx\\";

function RenderContent(props: Props) {
  onMount(() => {
    sendComponentsToVisualEditor(props.customComponents);
  });

  function onUpdateFn_0() {
    dispatchNewContentToVisualEditor(props.content);
  }
  createEffect(on(() => [props.content], onUpdateFn_0));

  return (
    <>
      <BuilderContext.Provider
        value={{
          get content() {
            return 3;
          },

          get registeredComponents() {
            return 4;
          },
        }}
      >
        <div onclick={(event) => trackClick(props.content.id)}>
          <div></div>
          <RenderBlocks blocks={props.content.blocks}></RenderBlocks>
          <div></div>
        </div>
      </BuilderContext.Provider>
    </>
  );
}

export default RenderContent;
"
`;

exports[`Solid > jsx > Typescript Test > rootFragmentMultiNode 1`] = `
"import { Show } from \\"solid-js\\";

export interface ButtonProps {
  attributes?: any;
  text?: string;
  link?: string;
  openLinkInNewTab?: boolean;
}

function Button(props: ButtonProps) {
  return (
    <>
      <div></div>
      <Show when={props.link}>
        <div></div>
        <a>
          <div></div>
          <div></div>
          <div></div>
        </a>
        <div></div>
      </Show>
      <div></div>
      <Show when={!props.link}>
        <div></div>
        <button>
          <div></div>
          <div></div>
          <div></div>
        </button>
        <div></div>
      </Show>
      <div></div>
    </>
  );
}

export default Button;
"
`;

exports[`Solid > jsx > Typescript Test > rootFragmentMultiNode 2`] = `
"import { Show } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";
export interface ButtonProps {
  attributes?: any;
  text?: string;
  link?: string;
  openLinkInNewTab?: boolean;
}

function Button(props: ButtonProps) {
  return (
    <>
      <>
        <div></div>
        <Show when={props.link}>
          <div></div>
          <a>
            <div></div>
            <div></div>
            <div></div>
          </a>
          <div></div>
        </Show>
        <div></div>
        <Show when={!props.link}>
          <div></div>
          <button>
            <div></div>
            <div></div>
            <div></div>
          </button>
          <div></div>
        </Show>
        <div></div>
      </>
    </>
  );
}

export default Button;
"
`;

exports[`Solid > jsx > Typescript Test > rootShow 1`] = `
"import { Show } from \\"solid-js\\";

export interface RenderStylesProps {
  foo: string;
}

function RenderStyles(props: RenderStylesProps) {
  return (
    <Show
      fallback={
        <div>
          <div></div>
        </div>
      }
      when={props.foo === \\"bar\\"}
    >
      <div></div>
      <div>
        <div></div>
      </div>
      <div></div>
    </Show>
  );
}

export default RenderStyles;
"
`;

exports[`Solid > jsx > Typescript Test > rootShow 2`] = `
"import { Show } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";
export interface RenderStylesProps {
  foo: string;
}

function RenderStyles(props: RenderStylesProps) {
  return (
    <>
      <Show
        fallback={
          <div>
            <div></div>
          </div>
        }
        when={props.foo === \\"bar\\"}
      >
        <div></div>
        <div>
          <div></div>
        </div>
        <div></div>
      </Show>
    </>
  );
}

export default RenderStyles;
"
`;

exports[`Solid > jsx > Typescript Test > self-referencing component 1`] = `
"import { Show } from \\"solid-js\\";

function MyComponent(props: any) {
  return (
    <div>
      <div></div>
      <div></div>
      <div></div>
      <Show when={props.name === \\"Batman\\"}>
        <div></div>
        <MyComponent name=\\"Bruce Wayne\\"></MyComponent>
        <div></div>
      </Show>
      <div></div>
    </div>
  );
}

export default MyComponent;
"
`;

exports[`Solid > jsx > Typescript Test > self-referencing component 2`] = `
"import { Show } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";

function MyComponent(props: any) {
  return (
    <>
      <div>
        <div></div>
        <div></div>
        <div></div>
        <Show when={props.name === \\"Batman\\"}>
          <div></div>
          <MyComponent name=\\"Bruce Wayne\\"></MyComponent>
          <div></div>
        </Show>
        <div></div>
      </div>
    </>
  );
}

export default MyComponent;
"
`;

exports[`Solid > jsx > Typescript Test > self-referencing component with children 1`] = `
"import { Show } from \\"solid-js\\";

function MyComponent(props: any) {
  return (
    <div>
      <div></div>
      <div></div>
      <div></div>
      <div></div>
      <div></div>
      <Show when={props.name === \\"Batman\\"}>
        <div></div>
        <MyComponent name=\\"Bruce\\">
          <div></div>
          <div>
            <div></div>
          </div>
          <div></div>
        </MyComponent>
        <div></div>
      </Show>
      <div></div>
    </div>
  );
}

export default MyComponent;
"
`;

exports[`Solid > jsx > Typescript Test > self-referencing component with children 2`] = `
"import { Show } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";

function MyComponent(props: any) {
  return (
    <>
      <div>
        <div></div>
        <div></div>
        <div></div>
        <div></div>
        <div></div>
        <Show when={props.name === \\"Batman\\"}>
          <div></div>
          <MyComponent name=\\"Bruce\\">
            <div></div>
            <div>
              <div></div>
            </div>
            <div></div>
          </MyComponent>
          <div></div>
        </Show>
        <div></div>
      </div>
    </>
  );
}

export default MyComponent;
"
`;

exports[`Solid > jsx > Typescript Test > showWithFor 1`] = `
"import { Show, For } from \\"solid-js\\";

interface Props {
  conditionA: boolean;
  items: string[];
}

function NestedShow(props: Props) {
  return (
    <Show
      fallback={
        <div>
          <div></div>
        </div>
      }
      when={props.conditionA}
    >
      <div></div>
      <For each={props.items}>
        {(item, _index) => {
          const idx = _index();
          return (
            <div>
              <div></div>
            </div>
          );
        }}
      </For>
      <div></div>
    </Show>
  );
}

export default NestedShow;
"
`;

exports[`Solid > jsx > Typescript Test > showWithFor 2`] = `
"import { Show, For } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";
interface Props {
  conditionA: boolean;
  items: string[];
}

function NestedShow(props: Props) {
  return (
    <>
      <Show
        fallback={
          <div>
            <div></div>
          </div>
        }
        when={props.conditionA}
      >
        <div></div>
        <For each={props.items}>
          {(item, _index) => {
            const idx = _index();
            return (
              <div>
                <div></div>
              </div>
            );
          }}
        </For>
        <div></div>
      </Show>
    </>
  );
}

export default NestedShow;
"
`;

exports[`Solid > jsx > Typescript Test > spreadAttrs 1`] = `
"function MyBasicComponent(props: any) {
  return <input />;
}

export default MyBasicComponent;
"
`;

exports[`Solid > jsx > Typescript Test > spreadAttrs 2`] = `
"import { css } from \\"solid-styled-components\\";

function MyBasicComponent(props: any) {
  return (
    <>
      <input />
    </>
  );
}

export default MyBasicComponent;
"
`;

exports[`Solid > jsx > Typescript Test > spreadNestedProps 1`] = `
"function MyBasicComponent(props: any) {
  return <input />;
}

export default MyBasicComponent;
"
`;

exports[`Solid > jsx > Typescript Test > spreadNestedProps 2`] = `
"import { css } from \\"solid-styled-components\\";

function MyBasicComponent(props: any) {
  return (
    <>
      <input />
    </>
  );
}

export default MyBasicComponent;
"
`;

exports[`Solid > jsx > Typescript Test > spreadProps 1`] = `
"function MyBasicComponent(props: any) {
  return <input />;
}

export default MyBasicComponent;
"
`;

exports[`Solid > jsx > Typescript Test > spreadProps 2`] = `
"import { css } from \\"solid-styled-components\\";

function MyBasicComponent(props: any) {
  return (
    <>
      <input />
    </>
  );
}

export default MyBasicComponent;
"
`;

exports[`Solid > jsx > Typescript Test > styleClassAndCss 1`] = `
"import { css } from \\"solid-styled-components\\";

function MyComponent(props: any) {
  return <div></div>;
}

export default MyComponent;
"
`;

exports[`Solid > jsx > Typescript Test > styleClassAndCss 2`] = `
"import { css } from \\"solid-styled-components\\";

function MyComponent(props: any) {
  return (
    <>
      <div></div>
    </>
  );
}

export default MyComponent;
"
`;

exports[`Solid > jsx > Typescript Test > subComponent 1`] = `
"import Foo from \\"./foo-sub-component.jsx\\";

function SubComponent(props: any) {
  return <Foo></Foo>;
}

export default SubComponent;
"
`;

exports[`Solid > jsx > Typescript Test > subComponent 2`] = `
"import { css } from \\"solid-styled-components\\";

import Foo from \\"./foo-sub-component.jsx\\";

function SubComponent(props: any) {
  return (
    <>
      <Foo></Foo>
    </>
  );
}

export default SubComponent;
"
`;

exports[`Solid > jsx > Typescript Test > svgComponent 1`] = `
"function SvgComponent(props: any) {
  return (
    <svg viewbox={\\"0 0 \\" + 42 + \\" \\" + 42}>
      <div></div>
      <defs>
        <div></div>
        <filter filterunits=\\"userSpaceOnUse\\">
          <div></div>
          <feFlood></feFlood>
          <div></div>
          <feBlend></feBlend>
          <div></div>
          <feGaussianBlur stddeviation={7}></feGaussianBlur>
          <div></div>
        </filter>
        <div></div>
      </defs>
      <div></div>
    </svg>
  );
}

export default SvgComponent;
"
`;

exports[`Solid > jsx > Typescript Test > svgComponent 2`] = `
"import { css } from \\"solid-styled-components\\";

function SvgComponent(props: any) {
  return (
    <>
      <svg viewbox={\\"0 0 \\" + 42 + \\" \\" + 42}>
        <div></div>
        <defs>
          <div></div>
          <filter filterunits=\\"userSpaceOnUse\\">
            <div></div>
            <feFlood></feFlood>
            <div></div>
            <feBlend></feBlend>
            <div></div>
            <feGaussianBlur stddeviation={7}></feGaussianBlur>
            <div></div>
          </filter>
          <div></div>
        </defs>
        <div></div>
      </svg>
    </>
  );
}

export default SvgComponent;
"
`;

exports[`Solid > jsx > Typescript Test > typeDependency 1`] = `
"import type { Foo } from \\"./foo-type\\";
import type { Foo as Foo2 } from \\"./type-export\\";
export type TypeDependencyProps = {
  foo: Foo;
  foo2: Foo2;
};

function TypeDependency(props: TypeDependencyProps) {
  return (
    <div>
      <div></div>
    </div>
  );
}

export default TypeDependency;
"
`;

exports[`Solid > jsx > Typescript Test > typeDependency 2`] = `
"import { css } from \\"solid-styled-components\\";
import type { Foo } from \\"./foo-type\\";
import type { Foo as Foo2 } from \\"./type-export\\";
export type TypeDependencyProps = {
  foo: Foo;
  foo2: Foo2;
};

function TypeDependency(props: TypeDependencyProps) {
  return (
    <>
      <div>
        <div></div>
      </div>
    </>
  );
}

export default TypeDependency;
"
`;

exports[`Solid > jsx > Typescript Test > use-style 1`] = `
"import { css } from \\"solid-styled-components\\";

function MyComponent(props: any) {
  return (
    <button>
      <div></div>
    </button>
  );
}

export default MyComponent;
"
`;

exports[`Solid > jsx > Typescript Test > use-style 2`] = `
"import { css } from \\"solid-styled-components\\";

function MyComponent(props: any) {
  return (
    <>
      <button>
        <div></div>
      </button>
      <style jsx>{\`
        button {
          background: blue;
          color: white;
          font-size: 12px;
          outline: 1px solid black;
        }
      \`}</style>
    </>
  );
}

export default MyComponent;
"
`;

exports[`Solid > jsx > Typescript Test > use-style-and-css 1`] = `
"import { css } from \\"solid-styled-components\\";

function MyComponent(props: any) {
  return (
    <button>
      <div></div>
    </button>
  );
}

export default MyComponent;
"
`;

exports[`Solid > jsx > Typescript Test > use-style-and-css 2`] = `
"import { css } from \\"solid-styled-components\\";

function MyComponent(props: any) {
  return (
    <>
      <button>
        <div></div>
      </button>
      <style jsx>{\`
        button {
          font-size: 12px;
          outline: 1px solid black;
        }
      \`}</style>
    </>
  );
}

export default MyComponent;
"
`;

exports[`Solid > jsx > Typescript Test > use-style-outside-component 1`] = `
"import { css } from \\"solid-styled-components\\";

function MyComponent(props: any) {
  return (
    <button>
      <div></div>
    </button>
  );
}

export default MyComponent;
"
`;

exports[`Solid > jsx > Typescript Test > use-style-outside-component 2`] = `
"import { css } from \\"solid-styled-components\\";

function MyComponent(props: any) {
  return (
    <>
      <button>
        <div></div>
      </button>
      <style jsx>{\`
        button {
          background: blue;
          color: white;
          font-size: 12px;
          outline: 1px solid black;
        }
      \`}</style>
    </>
  );
}

export default MyComponent;
"
`;

exports[`Solid > svelte > Javascript Test > basic 1`] = `
"import { createSignal } from \\"solid-js\\";

function MyComponent(props) {
  const [name, setName] = createSignal(\\"Steve\\");

  return (
    <div>
      <input onchange={(event) => setName(event.target.value)} />
      <div></div>
    </div>
  );
}

export default MyComponent;
"
`;

exports[`Solid > svelte > Javascript Test > basic 2`] = `
"import { createSignal } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";

function MyComponent(props) {
  const [name, setName] = createSignal(\\"Steve\\");

  return (
    <>
      <div>
        <input onchange={(event) => setName(event.target.value)} />
        <div></div>
      </div>
    </>
  );
}

export default MyComponent;
"
`;

exports[`Solid > svelte > Javascript Test > bindGroup 1`] = `
"import { createSignal } from \\"solid-js\\";

function MyComponent(props) {
  const [tortilla, setTortilla] = createSignal(\\"Plain\\");

  const [fillings, setFillings] = createSignal([]);

  return (
    <div>
      <input onchange={(event) => setTortilla(event.target.value)} />
      <input onchange={(event) => setTortilla(event.target.value)} />
      <input onchange={(event) => setTortilla(event.target.value)} />
      <br />
      <br />
      <input onchange={(event) => setFillings(event.target.value)} />
      <input onchange={(event) => setFillings(event.target.value)} />
      <input onchange={(event) => setFillings(event.target.value)} />
      <input onchange={(event) => setFillings(event.target.value)} />
      <p>
        <div></div>
        <div></div>
      </p>
      <p>
        <div></div>
        <div></div>
      </p>
    </div>
  );
}

export default MyComponent;
"
`;

exports[`Solid > svelte > Javascript Test > bindGroup 2`] = `
"import { createSignal } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";

function MyComponent(props) {
  const [tortilla, setTortilla] = createSignal(\\"Plain\\");

  const [fillings, setFillings] = createSignal([]);

  return (
    <>
      <div>
        <input onchange={(event) => setTortilla(event.target.value)} />
        <input onchange={(event) => setTortilla(event.target.value)} />
        <input onchange={(event) => setTortilla(event.target.value)} />
        <br />
        <br />
        <input onchange={(event) => setFillings(event.target.value)} />
        <input onchange={(event) => setFillings(event.target.value)} />
        <input onchange={(event) => setFillings(event.target.value)} />
        <input onchange={(event) => setFillings(event.target.value)} />
        <p>
          <div></div>
          <div></div>
        </p>
        <p>
          <div></div>
          <div></div>
        </p>
      </div>
    </>
  );
}

export default MyComponent;
"
`;

exports[`Solid > svelte > Javascript Test > bindProperty 1`] = `
"import { createSignal } from \\"solid-js\\";

function MyComponent(props) {
  const [value, setValue] = createSignal(\\"hello\\");

  return <input />;
}

export default MyComponent;
"
`;

exports[`Solid > svelte > Javascript Test > bindProperty 2`] = `
"import { createSignal } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";

function MyComponent(props) {
  const [value, setValue] = createSignal(\\"hello\\");

  return (
    <>
      <input />
    </>
  );
}

export default MyComponent;
"
`;

exports[`Solid > svelte > Javascript Test > classDirective 1`] = `
"import { createSignal } from \\"solid-js\\";

function MyComponent(props) {
  const [focus, setFocus] = createSignal(true);

  return <input />;
}

export default MyComponent;
"
`;

exports[`Solid > svelte > Javascript Test > classDirective 2`] = `
"import { createSignal } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";

function MyComponent(props) {
  const [focus, setFocus] = createSignal(true);

  return (
    <>
      <input />
    </>
  );
}

export default MyComponent;
"
`;

exports[`Solid > svelte > Javascript Test > context 1`] = `
"'>' expected. (28:19)
  26 |
  27 |     return (
> 28 |       <'activeTab'.Provider ><div ><div ></div></div></'activeTab'.Provider>
     |                   ^
  29 |       
  30 |       )
  31 |   }"
`;

exports[`Solid > svelte > Javascript Test > context 2`] = `
"Identifier expected. (28:8)
  26 |
  27 |     return (<>
> 28 |       <'activeTab'.Provider ><div ><div ></div></div></'activeTab'.Provider>
     |        ^
  29 |       
  30 |       </>)
  31 |   }"
`;

exports[`Solid > svelte > Javascript Test > each 1`] = `
"import { For, createSignal } from \\"solid-js\\";

function MyComponent(props) {
  const [numbers, setNumbers] = createSignal([\\"one\\", \\"two\\", \\"three\\"]);

  return (
    <ul>
      <For each={numbers()}>
        {(num, _index) => {
          const index = _index();
          return (
            <li>
              <div></div>
            </li>
          );
        }}
      </For>
    </ul>
  );
}

export default MyComponent;
"
`;

exports[`Solid > svelte > Javascript Test > each 2`] = `
"import { For, createSignal } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";

function MyComponent(props) {
  const [numbers, setNumbers] = createSignal([\\"one\\", \\"two\\", \\"three\\"]);

  return (
    <>
      <ul>
        <For each={numbers()}>
          {(num, _index) => {
            const index = _index();
            return (
              <li>
                <div></div>
              </li>
            );
          }}
        </For>
      </ul>
    </>
  );
}

export default MyComponent;
"
`;

exports[`Solid > svelte > Javascript Test > eventHandlers 1`] = `
"import { createSignal } from \\"solid-js\\";

function MyComponent(props) {
  function log(msg = \\"hello\\") {
    console.log(msg);
  }

  return (
    <div>
      <button onclick={(a) => log(\\"hi\\")}>
        <div></div>
      </button>
      <button onclick={(event) => log(event)}>
        <div></div>
      </button>
      <button onclick={(event) => log(event)}>
        <div></div>
      </button>
    </div>
  );
}

export default MyComponent;
"
`;

exports[`Solid > svelte > Javascript Test > eventHandlers 2`] = `
"import { createSignal } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";

function MyComponent(props) {
  function log(msg = \\"hello\\") {
    console.log(msg);
  }

  return (
    <>
      <div>
        <button onclick={(a) => log(\\"hi\\")}>
          <div></div>
        </button>
        <button onclick={(event) => log(event)}>
          <div></div>
        </button>
        <button onclick={(event) => log(event)}>
          <div></div>
        </button>
      </div>
    </>
  );
}

export default MyComponent;
"
`;

exports[`Solid > svelte > Javascript Test > html 1`] = `
"import { createSignal } from \\"solid-js\\";

function MyComponent(props) {
  const [html, setHtml] = createSignal(\\"<b>bold</b>\\");

  return <div innerhtml={html()}></div>;
}

export default MyComponent;
"
`;

exports[`Solid > svelte > Javascript Test > html 2`] = `
"import { createSignal } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";

function MyComponent(props) {
  const [html, setHtml] = createSignal(\\"<b>bold</b>\\");

  return (
    <>
      <div innerhtml={html()}></div>
    </>
  );
}

export default MyComponent;
"
`;

exports[`Solid > svelte > Javascript Test > ifElse 1`] = `
"import { Show, createSignal } from \\"solid-js\\";

function MyComponent(props) {
  const [show, setShow] = createSignal(true);

  function toggle() {
    setShow(!show());
  }

  return (
    <Show
      fallback={
        <button onclick={(event) => toggle(event)}>
          <div></div>
        </button>
      }
      when={show()}
    >
      <button onclick={(event) => toggle(event)}>
        <div></div>
      </button>
    </Show>
  );
}

export default MyComponent;
"
`;

exports[`Solid > svelte > Javascript Test > ifElse 2`] = `
"import { Show, createSignal } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";

function MyComponent(props) {
  const [show, setShow] = createSignal(true);

  function toggle() {
    setShow(!show());
  }

  return (
    <>
      <Show
        fallback={
          <button onclick={(event) => toggle(event)}>
            <div></div>
          </button>
        }
        when={show()}
      >
        <button onclick={(event) => toggle(event)}>
          <div></div>
        </button>
      </Show>
    </>
  );
}

export default MyComponent;
"
`;

exports[`Solid > svelte > Javascript Test > imports 1`] = `
"import { createSignal } from \\"solid-js\\";

import Button from \\"./Button.jsx\\";

function MyComponent(props) {
  const [disabled, setDisabled] = createSignal(false);

  return (
    <div>
      <Button type=\\"button\\" disabled={disabled()}>
        <Slot></Slot>
      </Button>
    </div>
  );
}

export default MyComponent;
"
`;

exports[`Solid > svelte > Javascript Test > imports 2`] = `
"import { createSignal } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";

import Button from \\"./Button.jsx\\";

function MyComponent(props) {
  const [disabled, setDisabled] = createSignal(false);

  return (
    <>
      <div>
        <Button type=\\"button\\" disabled={disabled()}>
          <Slot></Slot>
        </Button>
      </div>
    </>
  );
}

export default MyComponent;
"
`;

exports[`Solid > svelte > Javascript Test > lifecycleHooks 1`] = `
"import { onMount, on, createEffect } from \\"solid-js\\";

function MyComponent(props) {
  onMount(() => {
    console.log(\\"onMount\\");
  });

  return <div></div>;
}

export default MyComponent;
"
`;

exports[`Solid > svelte > Javascript Test > lifecycleHooks 2`] = `
"import { onMount, on, createEffect } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";

function MyComponent(props) {
  onMount(() => {
    console.log(\\"onMount\\");
  });

  return (
    <>
      <div></div>
    </>
  );
}

export default MyComponent;
"
`;

exports[`Solid > svelte > Javascript Test > reactive 1`] = `
"import { createSignal } from \\"solid-js\\";

function MyComponent(props) {
  const [name, setName] = createSignal(\\"Steve\\");

  function lowercaseName() {
    return name().toLowerCase();
  }

  return (
    <div>
      <input />
      <div></div>
      <div></div>
    </div>
  );
}

export default MyComponent;
"
`;

exports[`Solid > svelte > Javascript Test > reactive 2`] = `
"import { createSignal } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";

function MyComponent(props) {
  const [name, setName] = createSignal(\\"Steve\\");

  function lowercaseName() {
    return name().toLowerCase();
  }

  return (
    <>
      <div>
        <input />
        <div></div>
        <div></div>
      </div>
    </>
  );
}

export default MyComponent;
"
`;

exports[`Solid > svelte > Javascript Test > reactiveWithFn 1`] = `
"import { on, createEffect, createSignal } from \\"solid-js\\";

function MyComponent(props) {
  const [a, setA] = createSignal(2);

  const [b, setB] = createSignal(5);

  const [result, setResult] = createSignal(null);

  function calculateResult(a_, b_) {
    setResult(a_ * b_);
  }

  function onUpdateFn_0() {
    calculateResult(a(), b());
  }
  createEffect(on(() => [a(), b()], onUpdateFn_0));

  return (
    <div>
      <input onchange={(event) => setA(event.target.value)} />
      <input onchange={(event) => setB(event.target.value)} />
      <div></div>
      <div></div>
    </div>
  );
}

export default MyComponent;
"
`;

exports[`Solid > svelte > Javascript Test > reactiveWithFn 2`] = `
"import { on, createEffect, createSignal } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";

function MyComponent(props) {
  const [a, setA] = createSignal(2);

  const [b, setB] = createSignal(5);

  const [result, setResult] = createSignal(null);

  function calculateResult(a_, b_) {
    setResult(a_ * b_);
  }

  function onUpdateFn_0() {
    calculateResult(a(), b());
  }
  createEffect(on(() => [a(), b()], onUpdateFn_0));

  return (
    <>
      <div>
        <input onchange={(event) => setA(event.target.value)} />
        <input onchange={(event) => setB(event.target.value)} />
        <div></div>
        <div></div>
      </div>
    </>
  );
}

export default MyComponent;
"
`;

exports[`Solid > svelte > Javascript Test > slots 1`] = `
"function MyComponent(props) {
  return (
    <div>
      <Slot>
        <div></div>
      </Slot>
      <Slot name=\\"Test\\">
        <div>
          <div></div>
        </div>
      </Slot>
    </div>
  );
}

export default MyComponent;
"
`;

exports[`Solid > svelte > Javascript Test > slots 2`] = `
"import { css } from \\"solid-styled-components\\";

function MyComponent(props) {
  return (
    <>
      <div>
        <Slot>
          <div></div>
        </Slot>
        <Slot name=\\"Test\\">
          <div>
            <div></div>
          </div>
        </Slot>
      </div>
    </>
  );
}

export default MyComponent;
"
`;

exports[`Solid > svelte > Javascript Test > style 1`] = `
"import { css } from \\"solid-styled-components\\";

function MyComponent(props) {
  return <input />;
}

export default MyComponent;
"
`;

exports[`Solid > svelte > Javascript Test > style 2`] = `
"import { css } from \\"solid-styled-components\\";

function MyComponent(props) {
  return (
    <>
      <input />
      <style jsx>{\`
        input {
          color: red;
          font-size: 12px;
        }

        .form-input:focus {
          outline: 1px solid blue;
        }
      \`}</style>
    </>
  );
}

export default MyComponent;
"
`;

exports[`Solid > svelte > Javascript Test > textExpressions 1`] = `
"import { createSignal } from \\"solid-js\\";

function MyComponent(props) {
  const [a, setA] = createSignal(5);

  const [b, setB] = createSignal(12);

  return (
    <div>
      <div></div>
      <div></div>
      <br />
      <div></div>
      <div></div>
    </div>
  );
}

export default MyComponent;
"
`;

exports[`Solid > svelte > Javascript Test > textExpressions 2`] = `
"import { createSignal } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";

function MyComponent(props) {
  const [a, setA] = createSignal(5);

  const [b, setB] = createSignal(12);

  return (
    <>
      <div>
        <div></div>
        <div></div>
        <br />
        <div></div>
        <div></div>
      </div>
    </>
  );
}

export default MyComponent;
"
`;

exports[`Solid > svelte > Typescript Test > basic 1`] = `
"import { createSignal } from \\"solid-js\\";

function MyComponent(props: any) {
  const [name, setName] = createSignal(\\"Steve\\");

  return (
    <div>
      <input onchange={(event) => setName(event.target.value)} />
      <div></div>
    </div>
  );
}

export default MyComponent;
"
`;

exports[`Solid > svelte > Typescript Test > basic 2`] = `
"import { createSignal } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";

function MyComponent(props: any) {
  const [name, setName] = createSignal(\\"Steve\\");

  return (
    <>
      <div>
        <input onchange={(event) => setName(event.target.value)} />
        <div></div>
      </div>
    </>
  );
}

export default MyComponent;
"
`;

exports[`Solid > svelte > Typescript Test > bindGroup 1`] = `
"import { createSignal } from \\"solid-js\\";

function MyComponent(props: any) {
  const [tortilla, setTortilla] = createSignal(\\"Plain\\");

  const [fillings, setFillings] = createSignal([]);

  return (
    <div>
      <input onchange={(event) => setTortilla(event.target.value)} />
      <input onchange={(event) => setTortilla(event.target.value)} />
      <input onchange={(event) => setTortilla(event.target.value)} />
      <br />
      <br />
      <input onchange={(event) => setFillings(event.target.value)} />
      <input onchange={(event) => setFillings(event.target.value)} />
      <input onchange={(event) => setFillings(event.target.value)} />
      <input onchange={(event) => setFillings(event.target.value)} />
      <p>
        <div></div>
        <div></div>
      </p>
      <p>
        <div></div>
        <div></div>
      </p>
    </div>
  );
}

export default MyComponent;
"
`;

exports[`Solid > svelte > Typescript Test > bindGroup 2`] = `
"import { createSignal } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";

function MyComponent(props: any) {
  const [tortilla, setTortilla] = createSignal(\\"Plain\\");

  const [fillings, setFillings] = createSignal([]);

  return (
    <>
      <div>
        <input onchange={(event) => setTortilla(event.target.value)} />
        <input onchange={(event) => setTortilla(event.target.value)} />
        <input onchange={(event) => setTortilla(event.target.value)} />
        <br />
        <br />
        <input onchange={(event) => setFillings(event.target.value)} />
        <input onchange={(event) => setFillings(event.target.value)} />
        <input onchange={(event) => setFillings(event.target.value)} />
        <input onchange={(event) => setFillings(event.target.value)} />
        <p>
          <div></div>
          <div></div>
        </p>
        <p>
          <div></div>
          <div></div>
        </p>
      </div>
    </>
  );
}

export default MyComponent;
"
`;

exports[`Solid > svelte > Typescript Test > bindProperty 1`] = `
"import { createSignal } from \\"solid-js\\";

function MyComponent(props: any) {
  const [value, setValue] = createSignal(\\"hello\\");

  return <input />;
}

export default MyComponent;
"
`;

exports[`Solid > svelte > Typescript Test > bindProperty 2`] = `
"import { createSignal } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";

function MyComponent(props: any) {
  const [value, setValue] = createSignal(\\"hello\\");

  return (
    <>
      <input />
    </>
  );
}

export default MyComponent;
"
`;

exports[`Solid > svelte > Typescript Test > classDirective 1`] = `
"import { createSignal } from \\"solid-js\\";

function MyComponent(props: any) {
  const [focus, setFocus] = createSignal(true);

  return <input />;
}

export default MyComponent;
"
`;

exports[`Solid > svelte > Typescript Test > classDirective 2`] = `
"import { createSignal } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";

function MyComponent(props: any) {
  const [focus, setFocus] = createSignal(true);

  return (
    <>
      <input />
    </>
  );
}

export default MyComponent;
"
`;

exports[`Solid > svelte > Typescript Test > context 1`] = `
"'>' expected. (28:19)
  26 |
  27 |     return (
> 28 |       <'activeTab'.Provider ><div ><div ></div></div></'activeTab'.Provider>
     |                   ^
  29 |       
  30 |       )
  31 |   }"
`;

exports[`Solid > svelte > Typescript Test > context 2`] = `
"Identifier expected. (28:8)
  26 |
  27 |     return (<>
> 28 |       <'activeTab'.Provider ><div ><div ></div></div></'activeTab'.Provider>
     |        ^
  29 |       
  30 |       </>)
  31 |   }"
`;

exports[`Solid > svelte > Typescript Test > each 1`] = `
"import { For, createSignal } from \\"solid-js\\";

function MyComponent(props: any) {
  const [numbers, setNumbers] = createSignal([\\"one\\", \\"two\\", \\"three\\"]);

  return (
    <ul>
      <For each={numbers()}>
        {(num, _index) => {
          const index = _index();
          return (
            <li>
              <div></div>
            </li>
          );
        }}
      </For>
    </ul>
  );
}

export default MyComponent;
"
`;

exports[`Solid > svelte > Typescript Test > each 2`] = `
"import { For, createSignal } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";

function MyComponent(props: any) {
  const [numbers, setNumbers] = createSignal([\\"one\\", \\"two\\", \\"three\\"]);

  return (
    <>
      <ul>
        <For each={numbers()}>
          {(num, _index) => {
            const index = _index();
            return (
              <li>
                <div></div>
              </li>
            );
          }}
        </For>
      </ul>
    </>
  );
}

export default MyComponent;
"
`;

exports[`Solid > svelte > Typescript Test > eventHandlers 1`] = `
"import { createSignal } from \\"solid-js\\";

function MyComponent(props: any) {
  function log(msg = \\"hello\\") {
    console.log(msg);
  }

  return (
    <div>
      <button onclick={(a) => log(\\"hi\\")}>
        <div></div>
      </button>
      <button onclick={(event) => log(event)}>
        <div></div>
      </button>
      <button onclick={(event) => log(event)}>
        <div></div>
      </button>
    </div>
  );
}

export default MyComponent;
"
`;

exports[`Solid > svelte > Typescript Test > eventHandlers 2`] = `
"import { createSignal } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";

function MyComponent(props: any) {
  function log(msg = \\"hello\\") {
    console.log(msg);
  }

  return (
    <>
      <div>
        <button onclick={(a) => log(\\"hi\\")}>
          <div></div>
        </button>
        <button onclick={(event) => log(event)}>
          <div></div>
        </button>
        <button onclick={(event) => log(event)}>
          <div></div>
        </button>
      </div>
    </>
  );
}

export default MyComponent;
"
`;

exports[`Solid > svelte > Typescript Test > html 1`] = `
"import { createSignal } from \\"solid-js\\";

function MyComponent(props: any) {
  const [html, setHtml] = createSignal(\\"<b>bold</b>\\");

  return <div innerhtml={html()}></div>;
}

export default MyComponent;
"
`;

exports[`Solid > svelte > Typescript Test > html 2`] = `
"import { createSignal } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";

function MyComponent(props: any) {
  const [html, setHtml] = createSignal(\\"<b>bold</b>\\");

  return (
    <>
      <div innerhtml={html()}></div>
    </>
  );
}

export default MyComponent;
"
`;

exports[`Solid > svelte > Typescript Test > ifElse 1`] = `
"import { Show, createSignal } from \\"solid-js\\";

function MyComponent(props: any) {
  const [show, setShow] = createSignal(true);

  function toggle() {
    setShow(!show());
  }

  return (
    <Show
      fallback={
        <button onclick={(event) => toggle(event)}>
          <div></div>
        </button>
      }
      when={show()}
    >
      <button onclick={(event) => toggle(event)}>
        <div></div>
      </button>
    </Show>
  );
}

export default MyComponent;
"
`;

exports[`Solid > svelte > Typescript Test > ifElse 2`] = `
"import { Show, createSignal } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";

function MyComponent(props: any) {
  const [show, setShow] = createSignal(true);

  function toggle() {
    setShow(!show());
  }

  return (
    <>
      <Show
        fallback={
          <button onclick={(event) => toggle(event)}>
            <div></div>
          </button>
        }
        when={show()}
      >
        <button onclick={(event) => toggle(event)}>
          <div></div>
        </button>
      </Show>
    </>
  );
}

export default MyComponent;
"
`;

exports[`Solid > svelte > Typescript Test > imports 1`] = `
"import { createSignal } from \\"solid-js\\";

import Button from \\"./Button.jsx\\";

function MyComponent(props: any) {
  const [disabled, setDisabled] = createSignal(false);

  return (
    <div>
      <Button type=\\"button\\" disabled={disabled()}>
        <Slot></Slot>
      </Button>
    </div>
  );
}

export default MyComponent;
"
`;

exports[`Solid > svelte > Typescript Test > imports 2`] = `
"import { createSignal } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";

import Button from \\"./Button.jsx\\";

function MyComponent(props: any) {
  const [disabled, setDisabled] = createSignal(false);

  return (
    <>
      <div>
        <Button type=\\"button\\" disabled={disabled()}>
          <Slot></Slot>
        </Button>
      </div>
    </>
  );
}

export default MyComponent;
"
`;

exports[`Solid > svelte > Typescript Test > lifecycleHooks 1`] = `
"import { onMount, on, createEffect } from \\"solid-js\\";

function MyComponent(props: any) {
  onMount(() => {
    console.log(\\"onMount\\");
  });

  return <div></div>;
}

export default MyComponent;
"
`;

exports[`Solid > svelte > Typescript Test > lifecycleHooks 2`] = `
"import { onMount, on, createEffect } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";

function MyComponent(props: any) {
  onMount(() => {
    console.log(\\"onMount\\");
  });

  return (
    <>
      <div></div>
    </>
  );
}

export default MyComponent;
"
`;

exports[`Solid > svelte > Typescript Test > reactive 1`] = `
"import { createSignal } from \\"solid-js\\";

function MyComponent(props: any) {
  const [name, setName] = createSignal(\\"Steve\\");

  function lowercaseName() {
    return name().toLowerCase();
  }

  return (
    <div>
      <input />
      <div></div>
      <div></div>
    </div>
  );
}

export default MyComponent;
"
`;

exports[`Solid > svelte > Typescript Test > reactive 2`] = `
"import { createSignal } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";

function MyComponent(props: any) {
  const [name, setName] = createSignal(\\"Steve\\");

  function lowercaseName() {
    return name().toLowerCase();
  }

  return (
    <>
      <div>
        <input />
        <div></div>
        <div></div>
      </div>
    </>
  );
}

export default MyComponent;
"
`;

exports[`Solid > svelte > Typescript Test > reactiveWithFn 1`] = `
"import { on, createEffect, createSignal } from \\"solid-js\\";

function MyComponent(props: any) {
  const [a, setA] = createSignal(2);

  const [b, setB] = createSignal(5);

  const [result, setResult] = createSignal(null);

  function calculateResult(a_, b_) {
    setResult(a_ * b_);
  }

  function onUpdateFn_0() {
    calculateResult(a(), b());
  }
  createEffect(on(() => [a(), b()], onUpdateFn_0));

  return (
    <div>
      <input onchange={(event) => setA(event.target.value)} />
      <input onchange={(event) => setB(event.target.value)} />
      <div></div>
      <div></div>
    </div>
  );
}

export default MyComponent;
"
`;

exports[`Solid > svelte > Typescript Test > reactiveWithFn 2`] = `
"import { on, createEffect, createSignal } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";

function MyComponent(props: any) {
  const [a, setA] = createSignal(2);

  const [b, setB] = createSignal(5);

  const [result, setResult] = createSignal(null);

  function calculateResult(a_, b_) {
    setResult(a_ * b_);
  }

  function onUpdateFn_0() {
    calculateResult(a(), b());
  }
  createEffect(on(() => [a(), b()], onUpdateFn_0));

  return (
    <>
      <div>
        <input onchange={(event) => setA(event.target.value)} />
        <input onchange={(event) => setB(event.target.value)} />
        <div></div>
        <div></div>
      </div>
    </>
  );
}

export default MyComponent;
"
`;

exports[`Solid > svelte > Typescript Test > slots 1`] = `
"function MyComponent(props: any) {
  return (
    <div>
      <Slot>
        <div></div>
      </Slot>
      <Slot name=\\"Test\\">
        <div>
          <div></div>
        </div>
      </Slot>
    </div>
  );
}

export default MyComponent;
"
`;

exports[`Solid > svelte > Typescript Test > slots 2`] = `
"import { css } from \\"solid-styled-components\\";

function MyComponent(props: any) {
  return (
    <>
      <div>
        <Slot>
          <div></div>
        </Slot>
        <Slot name=\\"Test\\">
          <div>
            <div></div>
          </div>
        </Slot>
      </div>
    </>
  );
}

export default MyComponent;
"
`;

exports[`Solid > svelte > Typescript Test > style 1`] = `
"import { css } from \\"solid-styled-components\\";

function MyComponent(props: any) {
  return <input />;
}

export default MyComponent;
"
`;

exports[`Solid > svelte > Typescript Test > style 2`] = `
"import { css } from \\"solid-styled-components\\";

function MyComponent(props: any) {
  return (
    <>
      <input />
      <style jsx>{\`
        input {
          color: red;
          font-size: 12px;
        }

        .form-input:focus {
          outline: 1px solid blue;
        }
      \`}</style>
    </>
  );
}

export default MyComponent;
"
`;

exports[`Solid > svelte > Typescript Test > textExpressions 1`] = `
"import { createSignal } from \\"solid-js\\";

function MyComponent(props: any) {
  const [a, setA] = createSignal(5);

  const [b, setB] = createSignal(12);

  return (
    <div>
      <div></div>
      <div></div>
      <br />
      <div></div>
      <div></div>
    </div>
  );
}

export default MyComponent;
"
`;

exports[`Solid > svelte > Typescript Test > textExpressions 2`] = `
"import { createSignal } from \\"solid-js\\";

import { css } from \\"solid-styled-components\\";

function MyComponent(props: any) {
  const [a, setA] = createSignal(5);

  const [b, setB] = createSignal(12);

  return (
    <>
      <div>
        <div></div>
        <div></div>
        <br />
        <div></div>
        <div></div>
      </div>
    </>
  );
}

export default MyComponent;
"
`;
