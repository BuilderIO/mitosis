// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`React - stateType: variables > jsx > Javascript Test > AdvancedRef 1`] = `
"'(' expected. (18:34)
  16 | const inputNoArgRef = useRef(null);
  17 | const name= 'PatrickJS'
> 18 | const onBlur = onBlur = function function onBlur() {
     |                                  ^
  19 | // Maintain focus
  20 | inputRef.current.focus();
  21 | }"
`;

exports[`React - stateType: variables > jsx > Javascript Test > Basic 1`] = `
"\\"use client\\";
import * as React from \\"react\\";

export const DEFAULT_VALUES = {
  name: \\"Steve\\",
};

function MyBasicComponent(props) {
  const name = \\"Steve\\";
  const underscore_fn_name = function underscore_fn_name() {
    return \\"bar\\";
  };
  const age = 1;
  const sports = [\\"\\"];

  return (
    <>
      <div className=\\"test div\\">
        <input
          value={DEFAULT_VALUES.name || name}
          onChange={(myEvent) => (name = myEvent.target.value)}
        />
        Hello! I can run in React, Vue, Solid, or Liquid! &gt;
      </div>
      <style jsx>{\`
        .div {
          padding: 10px;
        }
      \`}</style>
    </>
  );
}

export default MyBasicComponent;
"
`;

exports[`React - stateType: variables > jsx > Javascript Test > Basic Context 1`] = `
"'(' expected. (16:38)
  14 |   function MyBasicComponent(props) {
  15 |   const name= 'PatrickJS'
> 16 | const onChange = onChange = function function onChange() {
     |                                      ^
  17 | const change = myService.method('change');
  18 | console.log(change);
  19 | }"
`;

exports[`React - stateType: variables > jsx > Javascript Test > Basic OnMount Update 1`] = `
"\\"use client\\";
import * as React from \\"react\\";
import { useRef, useEffect } from \\"react\\";

function MyBasicOnMountUpdateComponent(props) {
  const name = \\"PatrickJS\\";
  const names = [\\"Steve\\", \\"PatrickJS\\"];

  const hasInitialized = useRef(false);
  if (!hasInitialized.current) {
    name = \\"PatrickJS onInit\\" + props.hi;
    hasInitialized.current = true;
  }

  useEffect(() => {
    name = \\"PatrickJS onMount\\" + props.bye;
  }, []);

  return <div>Hello {name}</div>;
}

export default MyBasicOnMountUpdateComponent;
"
`;

exports[`React - stateType: variables > jsx > Javascript Test > Basic Outputs 1`] = `
"\\"use client\\";
import * as React from \\"react\\";
import { useEffect } from \\"react\\";

function MyBasicOutputsComponent(props) {
  const name = \\"PatrickJS\\";

  useEffect(() => {
    props.onMessage(name);
    props.onEvent(props.message);
  }, []);

  return <div />;
}

export default MyBasicOutputsComponent;
"
`;

exports[`React - stateType: variables > jsx > Javascript Test > Basic Outputs Meta 1`] = `
"\\"use client\\";
import * as React from \\"react\\";
import { useEffect } from \\"react\\";

function MyBasicOutputsComponent(props) {
  const name = \\"PatrickJS\\";

  useEffect(() => {
    props.onMessage(name);
    props.onEvent(props.message);
  }, []);

  return <div />;
}

export default MyBasicOutputsComponent;
"
`;

exports[`React - stateType: variables > jsx > Javascript Test > BasicAttribute 1`] = `
"import * as React from \\"react\\";

function MyComponent(props) {
  return <input autoCapitalize=\\"on\\" autoComplete=\\"on\\" spellCheck />;
}

export default MyComponent;
"
`;

exports[`React - stateType: variables > jsx > Javascript Test > BasicBooleanAttribute 1`] = `
"import * as React from \\"react\\";
import MyBooleanAttributeComponent from \\"./basic-boolean-attribute-component.raw\\";

function MyBooleanAttribute(props) {
  return (
    <div>
      {props.children ? (
        <>
          {props.children}
          {props.type}
        </>
      ) : null}
      <MyBooleanAttributeComponent toggle />
      <MyBooleanAttributeComponent toggle />
      <MyBooleanAttributeComponent list={null} />
    </div>
  );
}

export default MyBooleanAttribute;
"
`;

exports[`React - stateType: variables > jsx > Javascript Test > BasicChildComponent 1`] = `
"\\"use client\\";
import * as React from \\"react\\";
import MyBasicOnMountUpdateComponent from \\"./basic-onMount-update.raw\\";
import MyBasicComponent from \\"./basic.raw\\";

function MyBasicChildComponent(props) {
  const name = \\"Steve\\";
  const dev = \\"PatrickJS\\";

  return (
    <div>
      <MyBasicComponent id={dev} />
      <div>
        <MyBasicOnMountUpdateComponent hi={name} bye={dev} />
      </div>
    </div>
  );
}

export default MyBasicChildComponent;
"
`;

exports[`React - stateType: variables > jsx > Javascript Test > BasicFor 1`] = `
"\\"use client\\";
import * as React from \\"react\\";
import { useEffect } from \\"react\\";

function MyBasicForComponent(props) {
  const name = \\"PatrickJS\\";
  const names = [\\"Steve\\", \\"PatrickJS\\"];

  useEffect(() => {
    console.log(\\"onMount code\\");
  }, []);

  return (
    <div>
      {names?.map((person) => (
        <>
          <input
            value={name}
            onChange={(event) => {
              name = event.target.value + \\" and \\" + person;
            }}
          />
          Hello
          {person}! I can run in Qwik, Web Component, React, Vue, Solid, or
          Liquid!
        </>
      ))}
    </div>
  );
}

export default MyBasicForComponent;
"
`;

exports[`React - stateType: variables > jsx > Javascript Test > BasicRef 1`] = `
"'(' expected. (18:34)
  16 | const inputNoArgRef = useRef(null);
  17 | const name= 'PatrickJS'
> 18 | const onBlur = onBlur = function function onBlur() {
     |                                  ^
  19 | // Maintain focus
  20 | inputRef.current?.focus();
  21 | }"
`;

exports[`React - stateType: variables > jsx > Javascript Test > BasicRefAssignment 1`] = `
"'(' expected. (16:46)
  14 |   function MyBasicRefAssignmentComponent(props) {
  15 |   const holdValueRef = useRef('Patrick');
> 16 | const handlerClick = handlerClick = function function handlerClick(event) {
     |                                              ^
  17 | event.preventDefault();
  18 | console.log('current value', holdValueRef.current);
  19 | holdValueRef.current = holdValueRef.current + 'JS';"
`;

exports[`React - stateType: variables > jsx > Javascript Test > BasicRefPrevious 1`] = `
"\\"use client\\";
import * as React from \\"react\\";
import { useRef, useEffect } from \\"react\\";

export function usePrevious(value) {
  // The ref object is a generic container whose current property is mutable ...
  // ... and can hold any value, similar to an instance property on a class
  let ref = useRef(null); // Store current value in ref

  onUpdate(() => {
    ref = value;
  }, [value]); // Only re-run if value changes
  // Return previous value (happens before update in useEffect above)

  return ref;
}

function MyPreviousComponent(props) {
  const count = 0;

  const prevCount = useRef(state.count);

  useEffect(() => {
    prevCount.current = count;
  }, [count]);

  return (
    <div>
      <h1>
        Now: {count}, before: {prevCount.current}
      </h1>
      <button onClick={(event) => (count += 1)}>Increment</button>
    </div>
  );
}

export default MyPreviousComponent;
"
`;

exports[`React - stateType: variables > jsx > Javascript Test > Button 1`] = `
"import * as React from \\"react\\";

function Button(props) {
  return (
    <div>
      {props.link ? (
        <a
          {...props.attributes}
          href={props.link}
          target={props.openLinkInNewTab ? \\"_blank\\" : undefined}
        >
          {props.text}
        </a>
      ) : null}
      {!props.link ? (
        <button type=\\"button\\" {...props.attributes}>
          {props.text}
        </button>
      ) : null}
    </div>
  );
}

export default Button;
"
`;

exports[`React - stateType: variables > jsx > Javascript Test > Columns 1`] = `
"import * as React from \\"react\\";

function Column(props) {
  const getColumns = function getColumns() {
    return props.columns || [];
  };
  const getGutterSize = function getGutterSize() {
    return typeof props.space === \\"number\\" ? props.space || 0 : 20;
  };
  const getWidth = function getWidth(index) {
    const columns = getColumns();
    return (columns[index] && columns[index].width) || 100 / columns.length;
  };
  const getColumnCssWidth = function getColumnCssWidth(index) {
    const columns = getColumns();
    const gutterSize = getGutterSize();
    const subtractWidth = (gutterSize * (columns.length - 1)) / columns.length;
    return \`calc(\${getWidth(index)}% - \${subtractWidth}px)\`;
  };

  return (
    <>
      <div className=\\"builder-columns div\\">
        {props.columns?.map((column, index) => (
          <div className=\\"builder-column div-2\\">
            {column.content}
            {index}
          </div>
        ))}
      </div>
      <style jsx>{\`
        .div {
          display: flex;
          flex-direction: column;
          align-items: stretch;
          line-height: normal;
        }
        @media (max-width: 999px) {
          .div {
            flex-direction: row;
          }
        }
        @media (max-width: 639px) {
          .div {
            flex-direction: row-reverse;
          }
        }
        .div-2 {
          flex-grow: 1;
        }
      \`}</style>
    </>
  );
}

export default Column;
"
`;

exports[`React - stateType: variables > jsx > Javascript Test > ContentSlotHtml 1`] = `
"import * as React from \\"react\\";

function ContentSlotCode(props) {
  return (
    <div>
      <>{props.slotTesting}</>
      <div>
        <hr />
      </div>
      <div>
        <>{props.children}</>
      </div>
    </div>
  );
}

export default ContentSlotCode;
"
`;

exports[`React - stateType: variables > jsx > Javascript Test > ContentSlotJSX 1`] = `
"\\"use client\\";
import * as React from \\"react\\";

function ContentSlotJsxCode(props) {
  const name = \\"king\\";
  const showContent = false;
  const cls = function cls() {
    return props.slotContent && props.children ? \`\${name}-content\` : \\"\\";
  };
  const show = function show() {
    props.slotContent ? 1 : \\"\\";
  };

  return (
    <>
      {props.slotReference ? (
        <>
          <div
            name={props.slotContent ? \\"name1\\" : \\"name2\\"}
            title={props.slotContent ? \\"title1\\" : \\"title2\\"}
            {...props.attributes}
            onClick={(event) => show()}
            className={cls()}
          >
            {showContent && props.slotContent ? (
              <>{props.content || \\"{props.content}\\"}</>
            ) : null}
            <div>
              <hr />
            </div>
            <div>{props.children}</div>
          </div>
        </>
      ) : null}
    </>
  );
}

ContentSlotJsxCode.defaultProps = {
  content: \\"\\",
  slotReference: undefined,
  slotContent: undefined,
};

export default ContentSlotJsxCode;
"
`;

exports[`React - stateType: variables > jsx > Javascript Test > CustomCode 1`] = `
"\\"use client\\";
import * as React from \\"react\\";
import { useRef, useEffect } from \\"react\\";

function CustomCode(props) {
  const elem = useRef(null);
  const scriptsInserted = [];
  const scriptsRun = [];
  const findAndRunScripts = function findAndRunScripts() {
    // TODO: Move this function to standalone one in '@builder.io/utils'
    if (elem.current && typeof window !== \\"undefined\\") {
      /** @type {HTMLScriptElement[]} */
      const scripts = elem.current.getElementsByTagName(\\"script\\");

      for (let i = 0; i < scripts.length; i++) {
        const script = scripts[i];

        if (script.src) {
          if (scriptsInserted.includes(script.src)) {
            continue;
          }

          scriptsInserted.push(script.src);
          const newScript = document.createElement(\\"script\\");
          newScript.async = true;
          newScript.src = script.src;
          document.head.appendChild(newScript);
        } else if (
          !script.type ||
          [
            \\"text/javascript\\",
            \\"application/javascript\\",
            \\"application/ecmascript\\",
          ].includes(script.type)
        ) {
          if (scriptsRun.includes(script.innerText)) {
            continue;
          }

          try {
            scriptsRun.push(script.innerText);
            new Function(script.innerText)();
          } catch (error) {
            console.warn(\\"\`CustomCode\`: Error running script:\\", error);
          }
        }
      }
    }
  };

  useEffect(() => {
    findAndRunScripts();
  }, []);

  return (
    <div
      ref={elem}
      className={
        \\"builder-custom-code\\" + (props.replaceNodes ? \\" replace-nodes\\" : \\"\\")
      }
      dangerouslySetInnerHTML={{ __html: props.code }}
    />
  );
}

export default CustomCode;
"
`;

exports[`React - stateType: variables > jsx > Javascript Test > Embed 1`] = `
"\\"use client\\";
import * as React from \\"react\\";
import { useRef, useEffect } from \\"react\\";

function CustomCode(props) {
  const elem = useRef(null);
  const scriptsInserted = [];
  const scriptsRun = [];
  const findAndRunScripts = function findAndRunScripts() {
    // TODO: Move this function to standalone one in '@builder.io/utils'
    if (elem.current && typeof window !== \\"undefined\\") {
      /** @type {HTMLScriptElement[]} */
      const scripts = elem.current.getElementsByTagName(\\"script\\");

      for (let i = 0; i < scripts.length; i++) {
        const script = scripts[i];

        if (script.src) {
          if (scriptsInserted.includes(script.src)) {
            continue;
          }

          scriptsInserted.push(script.src);
          const newScript = document.createElement(\\"script\\");
          newScript.async = true;
          newScript.src = script.src;
          document.head.appendChild(newScript);
        } else if (
          !script.type ||
          [
            \\"text/javascript\\",
            \\"application/javascript\\",
            \\"application/ecmascript\\",
          ].includes(script.type)
        ) {
          if (scriptsRun.includes(script.innerText)) {
            continue;
          }

          try {
            scriptsRun.push(script.innerText);
            new Function(script.innerText)();
          } catch (error) {
            console.warn(\\"\`CustomCode\`: Error running script:\\", error);
          }
        }
      }
    }
  };

  useEffect(() => {
    findAndRunScripts();
  }, []);

  return (
    <div
      ref={elem}
      className={
        \\"builder-custom-code\\" + (props.replaceNodes ? \\" replace-nodes\\" : \\"\\")
      }
      dangerouslySetInnerHTML={{ __html: props.code }}
    />
  );
}

export default CustomCode;
"
`;

exports[`React - stateType: variables > jsx > Javascript Test > Form 1`] = `
"',' expected. (108:2796)
  106 | if (contentType && contentType !== 'multipart/form-data') {
  107 |   if (
> 108 |   /* Zapier doesn't allow content-type header to be sent from browsers */   !(sendWithJs && props.action?.includes('zapier.com'))) {     headers['content-type'] = contentType;   } }  const presubmitEvent = new CustomEvent('presubmit', {   detail: {     body   } });  if (formRef.current) {   formRef.current.dispatchEvent(presubmitEvent);    if (presubmitEvent.defaultPrevented) {     return;   } }  formState = 'sending'; const formUrl = \`\${builder.env === 'dev' ? 'http://localhost:5000' : 'https://builder.io'}/api/v1/form-submit?apiKey=\${builder.apiKey}&to=\${btoa(props.sendSubmissionsToEmail || '')}&name=\${encodeURIComponent(props.name || '')}\`; fetch(props.sendSubmissionsTo === 'email' ? formUrl : props.action /* TODO: throw error if no action URL */ , {   body,   headers,   method: props.method || 'post' }).then(async res => {   let body;   const contentType = res.headers.get('content-type');    if (contentType && contentType.indexOf('application/json') !== -1) {     body = await res.json();   } else {     body = await res.text();   }    if (!res.ok && props.errorMessagePath) {     /* TODO: allow supplying an error formatter function */     let message = get(body, props.errorMessagePath);      if (message) {       if (typeof message !== 'string') {         /* TODO: ideally convert json to yaml so it woul dbe like          error: - email has been taken */         message = JSON.stringify(message);       }        formErrorMessage = message;     }   }    responseData = body;   formState = res.ok ? 'success' : 'error';    if (res.ok) {     const submitSuccessEvent = new CustomEvent('submit:success', {       detail: {         res,         body       }     });      if (formRef.current) {       formRef.current.dispatchEvent(submitSuccessEvent);        if (submitSuccessEvent.defaultPrevented) {         return;       }       /* TODO: option to turn this on/off? */         if (props.resetFormOnSubmit !== false) {         formRef.current.reset();       }     }     /* TODO: client side route event first that can be preventDefaulted */       if (props.successUrl) {       if (formRef.current) {         const event = new CustomEvent('route', {           detail: {             url: props.successUrl           }         });         formRef.current.dispatchEvent(event);          if (!event.defaultPrevented) {           location.href = props.successUrl;         }       } else {         location.href = props.successUrl;       }     }   } }, err => {   const submitErrorEvent = new CustomEvent('submit:error', {     detail: {       error: err     }   });    if (formRef.current) {     formRef.current.dispatchEvent(submitErrorEvent);      if (submitErrorEvent.defaultPrevented) {       return;     }   }    responseData = err;   formState = 'error'; }); } }                 return (   <>   <form  validate={props.validate}  ref={formRef}  action={!props.sendWithJs && props.action}  method={props.method}  name={props.name}  onSubmit={(event) => onSubmit(event) }  {...(props.attributes)}>{props.builderBlock && props.builderBlock.children ? (   <>{props.builderBlock?.children?.map((block, index) => (   <BuilderBlockComponent  key={block.id}  block={block}  index={index}  /> ))}</> ) : null}{submissionState() === 'error' ? (   <BuilderBlocks  dataPath=\\"errorMessage\\"  blocks={props.errorMessage}  /> ) : null}{submissionState() === 'sending' ? (   <BuilderBlocks  dataPath=\\"sendingMessage\\"  blocks={props.sendingMessage}  /> ) : null}{submissionState() === 'error' && responseData ? (   <pre className=\\"builder-form-error-text pre\\">{JSON.stringify(responseData, null, 2)}</pre> ) : null}{submissionState() === 'success' ? (   <BuilderBlocks  dataPath=\\"successMessage\\"  blocks={props.successMessage}  /> ) : null}</form>   <style jsx>{\`.pre {   padding: 10px;   color: red;   text-align: center; }\`}</style>     </> ); }         export default FormComponent;
      |
  109 |
  110 |
  111 |"
`;

exports[`React - stateType: variables > jsx > Javascript Test > Image 1`] = `
"'(' expected. (25:40)
  23 | return !!props.lazy && isBrowser();
  24 | }
> 25 | const isBrowser = isBrowser = function function isBrowser() {
     |                                        ^
  26 | return typeof window !== 'undefined' && window.navigator.product != 'ReactNative';
  27 | }
  28 | const load= false"
`;

exports[`React - stateType: variables > jsx > Javascript Test > Image State 1`] = `
"\\"use client\\";
import * as React from \\"react\\";

function ImgStateComponent(props) {
  const canShow = true;
  const images = [\\"http://example.com/qwik.png\\"];

  return (
    <div>
      {images?.map((item, itemIndex) => (
        <img className=\\"custom-class\\" src={item} key={itemIndex} />
      ))}
    </div>
  );
}

export default ImgStateComponent;
"
`;

exports[`React - stateType: variables > jsx > Javascript Test > Img 1`] = `
"import * as React from \\"react\\";
import { Builder } from \\"@builder.io/sdk\\";

function ImgComponent(props) {
  return (
    <img
      style={{
        objectFit: props.backgroundSize || \\"cover\\",
        objectPosition: props.backgroundPosition || \\"center\\",
      }}
      {...props.attributes}
      key={(Builder.isEditing && props.imgSrc) || \\"default-key\\"}
      alt={props.altText}
      src={props.imgSrc}
    />
  );
}

export default ImgComponent;
"
`;

exports[`React - stateType: variables > jsx > Javascript Test > Input 1`] = `
"\\"use client\\";
import * as React from \\"react\\";
import { Builder } from \\"@builder.io/sdk\\";

function FormInputComponent(props) {
  return (
    <input
      {...props.attributes}
      key={
        Builder.isEditing && props.defaultValue
          ? props.defaultValue
          : \\"default-key\\"
      }
      placeholder={props.placeholder}
      type={props.type}
      name={props.name}
      value={props.value}
      defaultValue={props.defaultValue}
      required={props.required}
      onChange={(event) => props.onChange?.(event.target.value)}
    />
  );
}

export default FormInputComponent;
"
`;

exports[`React - stateType: variables > jsx > Javascript Test > InputParent 1`] = `
"import * as React from \\"react\\";
import FormInputComponent from \\"./input.raw\\";

function Stepper(props) {
  const handleChange = function handleChange(value) {
    console.log(value);
  };

  return (
    <FormInputComponent
      name=\\"kingzez\\"
      type=\\"text\\"
      onChange={(value) => handleChange(value)}
    />
  );
}

export default Stepper;
"
`;

exports[`React - stateType: variables > jsx > Javascript Test > NestedStore 1`] = `
"\\"use client\\";
import * as React from \\"react\\";

function NestedStore(props) {
  const _id = \\"abc\\";
  const _messageId = _id + \\"-message\\";

  return (
    <div id={_id}>
      Test
      <p id={_messageId}>Message</p>
    </div>
  );
}

export default NestedStore;
"
`;

exports[`React - stateType: variables > jsx > Javascript Test > RawText 1`] = `
"import * as React from \\"react\\";

function RawText(props) {
  return (
    <span
      className={props.attributes?.class || props.attributes?.className}
      dangerouslySetInnerHTML={{ __html: props.text || \\"\\" }}
    />
  );
}

export default RawText;
"
`;

exports[`React - stateType: variables > jsx > Javascript Test > Section 1`] = `
"import * as React from \\"react\\";

function SectionComponent(props) {
  return (
    <section
      {...props.attributes}
      style={
        props.maxWidth && typeof props.maxWidth === \\"number\\"
          ? {
              maxWidth: props.maxWidth,
            }
          : undefined
      }
    >
      {props.children}
    </section>
  );
}

export default SectionComponent;
"
`;

exports[`React - stateType: variables > jsx > Javascript Test > Select 1`] = `
"import * as React from \\"react\\";
import { Builder } from \\"@builder.io/sdk\\";

function SelectComponent(props) {
  return (
    <select
      {...props.attributes}
      value={props.value}
      key={
        Builder.isEditing && props.defaultValue
          ? props.defaultValue
          : \\"default-key\\"
      }
      defaultValue={props.defaultValue}
      name={props.name}
    >
      {props.options?.map((option, index) => (
        <option value={option.value} data-index={index}>
          {option.name || option.value}
        </option>
      ))}
    </select>
  );
}

export default SelectComponent;
"
`;

exports[`React - stateType: variables > jsx > Javascript Test > SlotDefault 1`] = `
"import * as React from \\"react\\";

function SlotCode(props) {
  return (
    <div>
      <>
        {props.children || <div className=\\"default-slot\\">Default content</div>}
      </>
    </div>
  );
}

export default SlotCode;
"
`;

exports[`React - stateType: variables > jsx > Javascript Test > SlotHtml 1`] = `
"import * as React from \\"react\\";
import ContentSlotCode from \\"./content-slot-jsx.raw\\";

function SlotCode(props) {
  return (
    <div>
      <ContentSlotCode testing={<div>Hello</div>}></ContentSlotCode>
    </div>
  );
}

export default SlotCode;
"
`;

exports[`React - stateType: variables > jsx > Javascript Test > SlotJsx 1`] = `
"import * as React from \\"react\\";
import ContentSlotCode from \\"./content-slot-jsx.raw\\";

function SlotCode(props) {
  return (
    <div>
      <ContentSlotCode slotTesting={<div>Hello</div>} />
    </div>
  );
}

export default SlotCode;
"
`;

exports[`React - stateType: variables > jsx > Javascript Test > SlotNamed 1`] = `
"import * as React from \\"react\\";

function SlotCode(props) {
  return (
    <div>
      <>{props.myAwesomeSlot}</>
      <>{props.top}</>
      <>{props.left || \\"Default left\\"}</>
      <>{props.children || \\"Default Child\\"}</>
    </div>
  );
}

export default SlotCode;
"
`;

exports[`React - stateType: variables > jsx > Javascript Test > Stamped.io 1`] = `
"\\"use client\\";
import * as React from \\"react\\";
import { useEffect } from \\"react\\";
import { kebabCase, snakeCase } from \\"lodash\\";

function SmileReviews(props) {
  const reviews = [];
  const name = \\"test\\";
  const showReviewPrompt = false;
  const kebabCaseValue = function kebabCaseValue() {
    return kebabCase(\\"testThat\\");
  };
  const snakeCaseValue = function snakeCaseValue() {
    return snakeCase(\\"testThis\\");
  };

  useEffect(() => {
    fetch(
      \`https://stamped.io/api/widget/reviews?storeUrl=builder-io.myshopify.com&apiKey=\${
        props.apiKey || \\"pubkey-8bbDq7W6w4sB3OWeM1HUy2s47702hM\\"
      }&productId=\${props.productId || \\"2410511106127\\"}\`
    )
      .then((res) => res.json())
      .then((data) => {
        reviews = data.data;
      });
  }, []);

  return (
    <>
      <div data-user={name}>
        <button onClick={(event) => (showReviewPrompt = true)}>
          Write a review
        </button>
        {showReviewPrompt || \\"asdf\\" ? (
          <>
            <input placeholder=\\"Email\\" />
            <input placeholder=\\"Title\\" className=\\"input\\" />
            <textarea
              placeholder=\\"How was your experience?\\"
              className=\\"textarea\\"
            />
            <button
              className=\\"button\\"
              onClick={(ev) => {
                ev.preventDefault();
                showReviewPrompt = false;
              }}
            >
              Submit
            </button>
          </>
        ) : null}
        {reviews?.map((review, index) => (
          <div className=\\"review\\" key={review.id}>
            <img className=\\"img\\" src={review.avatar} />
            <div className={showReviewPrompt ? \\"bg-primary\\" : \\"bg-secondary\\"}>
              <div>N: {index}</div>
              <div>{review.author}</div>
              <div>{review.reviewMessage}</div>
            </div>
          </div>
        ))}
      </div>
      <style jsx>{\`
        .input {
          display: block;
        }
        .textarea {
          display: block;
        }
        .button {
          display: block;
        }
        .review {
          margin: 10px;
          padding: 10px;
          background: white;
          display: flex;
          border-radius: 5px;
          box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
          -webkit-font-smoothing: antialiased;
        }
        .img {
          height: 30px;
          width: 30px;
          margin-right: 10px;
        }
      \`}</style>
    </>
  );
}

export default SmileReviews;
"
`;

exports[`React - stateType: variables > jsx > Javascript Test > StoreShadowVars 1`] = `
"import * as React from \\"react\\";

function MyComponent(props) {
  return <></>;
}

export default MyComponent;
"
`;

exports[`React - stateType: variables > jsx > Javascript Test > StoreWithState 1`] = `
"\\"use client\\";
import * as React from \\"react\\";

function MyComponent(props) {
  const foo = false;

  return <></>;
}

export default MyComponent;
"
`;

exports[`React - stateType: variables > jsx > Javascript Test > Submit 1`] = `
"import * as React from \\"react\\";

function SubmitButton(props) {
  return (
    <button type=\\"submit\\" {...props.attributes}>
      {props.text}
    </button>
  );
}

export default SubmitButton;
"
`;

exports[`React - stateType: variables > jsx > Javascript Test > Text 1`] = `
"\\"use client\\";
import * as React from \\"react\\";
import { Builder } from \\"@builder.io/sdk\\";

function Text(props) {
  const name = \\"Decadef20\\";

  return (
    <div
      contentEditable={allowEditingText || undefined}
      data-name={{
        test: name || \\"any name\\",
      }}
      dangerouslySetInnerHTML={{
        __html:
          props.text ||
          props.content ||
          name ||
          '<p class=\\"text-lg\\">my name</p>',
      }}
    />
  );
}

export default Text;
"
`;

exports[`React - stateType: variables > jsx > Javascript Test > Textarea 1`] = `
"import * as React from \\"react\\";

function Textarea(props) {
  return (
    <textarea
      {...props.attributes}
      placeholder={props.placeholder}
      name={props.name}
      value={props.value}
      defaultValue={props.defaultValue}
    />
  );
}

export default Textarea;
"
`;

exports[`React - stateType: variables > jsx > Javascript Test > UseValueAndFnFromStore 1`] = `
"\\"use client\\";
import * as React from \\"react\\";
import { useEffect } from \\"react\\";

function UseValueAndFnFromStore(props) {
  const _id = \\"abc\\";
  const _active = false;
  const _do = function _do(id) {
    _active = !!id;

    if (props.onChange) {
      props.onChange(_active);
    }
  };

  useEffect(() => {
    if (_do) {
      _do(_id);
    }
  });

  return <div>Test</div>;
}

export default UseValueAndFnFromStore;
"
`;

exports[`React - stateType: variables > jsx > Javascript Test > Video 1`] = `
"import * as React from \\"react\\";

function Video(props) {
  return (
    <video
      preload=\\"none\\"
      {...props.attributes}
      style={{
        width: \\"100%\\",
        height: \\"100%\\",
        ...props.attributes?.style,
        objectFit: props.fit,
        objectPosition: props.position,
        // Hack to get object fit to work as expected and
        // not have the video overflow
        borderRadius: 1,
      }}
      key={props.video || \\"no-src\\"}
      poster={props.posterImage}
      autoplay={props.autoPlay}
      muted={props.muted}
      controls={props.controls}
      loop={props.loop}
    />
  );
}

export default Video;
"
`;

exports[`React - stateType: variables > jsx > Javascript Test > arrowFunctionInUseStore 1`] = `
"\\"use client\\";
import * as React from \\"react\\";

function MyComponent(props) {
  const name = \\"steve\\";
  const setName = function setName(value) {
    name = value;
  };
  const updateNameWithArrowFn = function updateNameWithArrowFn(value) {
    name = value;
  };

  return <div>Hello {name}</div>;
}

export default MyComponent;
"
`;

exports[`React - stateType: variables > jsx > Javascript Test > basicForNoTagReference 1`] = `
"Identifier expected. (39:17)
  37 | return (
  38 |
> 39 |   <TagNameGetter()>
     |                 ^
  40 |   Hello <tag>{name}</tag>{props.actions?.map((action) => (
  41 |   <TagName><action.icon  /><span>{action.text}</span></TagName>
  42 | ))}</TagNameGetter()>"
`;

exports[`React - stateType: variables > jsx > Javascript Test > basicForwardRef 1`] = `
"\\"use client\\";
import * as React from \\"react\\";
import { forwardRef } from \\"react\\";

const MyBasicForwardRefComponent = forwardRef(
  function MyBasicForwardRefComponent(props, inputRef) {
    const name = \\"PatrickJS\\";

    return (
      <>
        <div>
          <input
            className=\\"input\\"
            ref={inputRef}
            value={name}
            onChange={(event) => (name = event.target.value)}
          />
        </div>
        <style jsx>{\`
          .input {
            color: red;
          }
        \`}</style>
      </>
    );
  }
);

export default MyBasicForwardRefComponent;
"
`;

exports[`React - stateType: variables > jsx > Javascript Test > basicForwardRefMetadata 1`] = `
"\\"use client\\";
import * as React from \\"react\\";
import { forwardRef } from \\"react\\";

const MyBasicForwardRefComponent = forwardRef(
  function MyBasicForwardRefComponent(props, inputRef) {
    const name = \\"PatrickJS\\";

    return (
      <>
        <div>
          <input
            className=\\"input\\"
            ref={inputRef}
            value={name}
            onChange={(event) => (name = event.target.value)}
          />
        </div>
        <style jsx>{\`
          .input {
            color: red;
          }
        \`}</style>
      </>
    );
  }
);

export default MyBasicForwardRefComponent;
"
`;

exports[`React - stateType: variables > jsx > Javascript Test > basicOnUpdateReturn 1`] = `
"\\"use client\\";
import * as React from \\"react\\";
import { useEffect } from \\"react\\";

function MyBasicOnUpdateReturnComponent(props) {
  const name = \\"PatrickJS\\";

  useEffect(() => {
    const controller = new AbortController();
    const signal = controller.signal;
    fetch(\\"https://patrickjs.com/api/resource.json\\", {
      signal,
    })
      .then((response) => response.json())
      .then((data) => {
        name = data.name;
      });
    return () => {
      if (!signal.aborted) {
        controller.abort();
      }
    };
  }, [name]);

  return <div>Hello! {name}</div>;
}

export default MyBasicOnUpdateReturnComponent;
"
`;

exports[`React - stateType: variables > jsx > Javascript Test > class + ClassName + css 1`] = `
"import * as React from \\"react\\";
import MyComp from \\"./my-component\\";

function MyBasicComponent(props) {
  return (
    <>
      <div>
        <MyComp className=\\"test\\" className=\\"test2\\">
          Hello! I can run in React, Vue, Solid, or Liquid!
        </MyComp>
        <div className=\\"test2 test div\\">
          Hello! I can run in React, Vue, Solid, or Liquid!
        </div>
      </div>
      <style jsx>{\`
        .div {
          padding: 10px;
        }
      \`}</style>
    </>
  );
}

export default MyBasicComponent;
"
`;

exports[`React - stateType: variables > jsx > Javascript Test > class + css 1`] = `
"import * as React from \\"react\\";

function MyBasicComponent(props) {
  return (
    <>
      <div className=\\"test div\\">
        Hello! I can run in React, Vue, Solid, or Liquid!
      </div>
      <style jsx>{\`
        .div {
          padding: 10px;
        }
      \`}</style>
    </>
  );
}

export default MyBasicComponent;
"
`;

exports[`React - stateType: variables > jsx > Javascript Test > className + css 1`] = `
"import * as React from \\"react\\";

function MyBasicComponent(props) {
  return (
    <>
      <div className=\\"test div\\">
        Hello! I can run in React, Vue, Solid, or Liquid!
      </div>
      <style jsx>{\`
        .div {
          padding: 10px;
        }
      \`}</style>
    </>
  );
}

export default MyBasicComponent;
"
`;

exports[`React - stateType: variables > jsx > Javascript Test > className 1`] = `
"\\"use client\\";
import * as React from \\"react\\";

function ClassNameCode(props) {
  const bindings = \\"a binding\\";

  return (
    <div>
      <div className=\\"no binding\\">Without Binding</div>
      <div className={bindings}>With binding</div>
    </div>
  );
}

export default ClassNameCode;
"
`;

exports[`React - stateType: variables > jsx > Javascript Test > classState 1`] = `
"\\"use client\\";
import * as React from \\"react\\";

function MyBasicComponent(props) {
  const classState = \\"testClassName\\";
  const styleState = {
    color: \\"red\\",
  };

  return (
    <>
      <div className={classState + \\" div\\"} style={styleState}>
        Hello! I can run in React, Vue, Solid, or Liquid!
      </div>
      <style jsx>{\`
        .div {
          padding: 10px;
        }
      \`}</style>
    </>
  );
}

export default MyBasicComponent;
"
`;

exports[`React - stateType: variables > jsx > Javascript Test > componentWithContext 1`] = `
"\\"use client\\";
import * as React from \\"react\\";
import { useContext } from \\"react\\";
import Context1 from \\"@dummy/1\\";
import Context2 from \\"@dummy/2\\";

function ComponentWithContext(props) {
  const foo = useContext(Context1);

  return (
    <Context2.Provider
      value={{
        bar: \\"baz\\",
      }}
    >
      <Context1.Provider
        value={{
          foo: \\"bar\\",

          content() {
            return props.content;
          },
        }}
      >
        <>{foo.value}</>
      </Context1.Provider>
    </Context2.Provider>
  );
}

export default ComponentWithContext;
"
`;

exports[`React - stateType: variables > jsx > Javascript Test > componentWithContextMultiRoot 1`] = `
"\\"use client\\";
import * as React from \\"react\\";
import { useContext } from \\"react\\";
import Context1 from \\"@dummy/1\\";
import Context2 from \\"@dummy/2\\";

function ComponentWithContext(props) {
  const foo = useContext(Context1);

  return (
    <Context2.Provider
      value={{
        bar: \\"baz\\",
      }}
    >
      <Context1.Provider
        value={{
          foo: \\"bar\\",

          content() {
            return props.content;
          },
        }}
      >
        <>
          <>{foo.value}</>
          <div>other</div>
        </>
      </Context1.Provider>
    </Context2.Provider>
  );
}

export default ComponentWithContext;
"
`;

exports[`React - stateType: variables > jsx > Javascript Test > contentState 1`] = `
"\\"use client\\";
import * as React from \\"react\\";
import { useContext } from \\"react\\";
import BuilderContext from \\"@dummy/context.js\\";

function RenderContent(props) {
  return (
    <BuilderContext.Provider
      value={{
        content: props.content,
        registeredComponents: props.customComponents,
      }}
    >
      <div>setting context</div>
    </BuilderContext.Provider>
  );
}

export default RenderContent;
"
`;

exports[`React - stateType: variables > jsx > Javascript Test > defaultProps 1`] = `
"\\"use client\\";
import * as React from \\"react\\";

function Button(props) {
  return (
    <div>
      {props.link ? (
        <a
          {...props.attributes}
          href={props.link}
          target={props.openLinkInNewTab ? \\"_blank\\" : undefined}
        >
          {props.text}
        </a>
      ) : null}
      {!props.link ? (
        <button
          type=\\"button\\"
          {...props.attributes}
          onClick={(event) => props.onClick()}
        >
          {props.buttonText}
        </button>
      ) : null}
    </div>
  );
}

Button.defaultProps = {
  text: \\"default text\\",
  link: \\"https://builder.io/\\",
  openLinkInNewTab: false,
  onClick: () => {
    console.log(\\"hi\\");
  },
};

export default Button;
"
`;

exports[`React - stateType: variables > jsx > Javascript Test > defaultPropsOutsideComponent 1`] = `
"\\"use client\\";
import * as React from \\"react\\";

function Button(props) {
  return (
    <div>
      {props.link ? (
        <a
          {...props.attributes}
          href={props.link}
          target={props.openLinkInNewTab ? \\"_blank\\" : undefined}
        >
          {props.text}
        </a>
      ) : null}
      {!props.link ? (
        <button
          type=\\"button\\"
          {...props.attributes}
          onClick={(event) => props.onClick(event)}
        >
          {props.text}
        </button>
      ) : null}
    </div>
  );
}

Button.defaultProps = {
  text: \\"default text\\",
  link: \\"https://builder.io/\\",
  openLinkInNewTab: false,
  onClick: () => {},
};

export default Button;
"
`;

exports[`React - stateType: variables > jsx > Javascript Test > defaultValsWithTypes 1`] = `
"import * as React from \\"react\\";

const DEFAULT_VALUES = {
  name: \\"Sami\\",
};

function ComponentWithTypes(props) {
  return <div> Hello {props.name || DEFAULT_VALUES.name}</div>;
}

export default ComponentWithTypes;
"
`;

exports[`React - stateType: variables > jsx > Javascript Test > eventInputAndChange 1`] = `
"\\"use client\\";
import * as React from \\"react\\";

function EventInputAndChange(props) {
  const name = \\"Steve\\";

  return (
    <>
      <div>
        <input
          className=\\"input\\"
          value={name}
          onInput={(event) => (name = event.target.value)}
          onChange={(event) => (name = event.target.value)}
        />
        Hello! I can run in React, Vue, Solid, or Liquid!
      </div>
      <style jsx>{\`
        .input {
          color: red;
        }
      \`}</style>
    </>
  );
}

export default EventInputAndChange;
"
`;

exports[`React - stateType: variables > jsx > Javascript Test > expressionState 1`] = `
"\\"use client\\";
import * as React from \\"react\\";

function MyComponent(props) {
  const refToUse = !(props.componentRef instanceof Function)
    ? props.componentRef
    : null;

  return <div>{refToUse}</div>;
}

export default MyComponent;
"
`;

exports[`React - stateType: variables > jsx > Javascript Test > getterState 1`] = `
"import * as React from \\"react\\";

function Button(props) {
  const foo2 = function foo2() {
    return props.foo + \\"foo\\";
  };
  const bar = function bar() {
    return \\"bar\\";
  };
  const baz = function baz(i) {
    return i + foo2().length;
  };

  return (
    <div>
      <p>{foo2()}</p>
      <p>{bar()}</p>
      <p>{baz(1)}</p>
    </div>
  );
}

export default Button;
"
`;

exports[`React - stateType: variables > jsx > Javascript Test > import types 1`] = `
"import * as React from \\"react\\";
import RenderBlock from \\"./builder-render-block.raw\\";

function RenderContent(props) {
  const getRenderContentProps = function getRenderContentProps(block, index) {
    return {
      block: block,
      index: index,
    };
  };

  return (
    <RenderBlock
      {...getRenderContentProps(props.renderContentProps.block, 0)}
    />
  );
}

export default RenderContent;
"
`;

exports[`React - stateType: variables > jsx > Javascript Test > multipleOnUpdate 1`] = `
"\\"use client\\";
import * as React from \\"react\\";
import { useEffect } from \\"react\\";

function MultipleOnUpdate(props) {
  useEffect(() => {
    console.log(\\"Runs on every update/rerender\\");
  });
  useEffect(() => {
    console.log(\\"Runs on every update/rerender as well\\");
  });

  return <div />;
}

export default MultipleOnUpdate;
"
`;

exports[`React - stateType: variables > jsx > Javascript Test > multipleOnUpdateWithDeps 1`] = `
"\\"use client\\";
import * as React from \\"react\\";
import { useEffect } from \\"react\\";

function MultipleOnUpdateWithDeps(props) {
  const a = \\"a\\";
  const b = \\"b\\";
  const c = \\"c\\";
  const d = \\"d\\";

  useEffect(() => {
    console.log(\\"Runs when a or b changes\\", a, b);

    if (a === \\"a\\") {
      a = \\"b\\";
    }
  }, [a, b]);
  useEffect(() => {
    console.log(\\"Runs when c or d changes\\", c, d);

    if (a === \\"a\\") {
      a = \\"b\\";
    }
  }, [c, d]);

  return <div />;
}

export default MultipleOnUpdateWithDeps;
"
`;

exports[`React - stateType: variables > jsx > Javascript Test > multipleSpreads 1`] = `
"\\"use client\\";
import * as React from \\"react\\";

function MyBasicComponent(props) {
  const attrs = {
    hello: \\"world\\",
  };

  return <input {...attrs} {...props} />;
}

export default MyBasicComponent;
"
`;

exports[`React - stateType: variables > jsx > Javascript Test > nestedShow 1`] = `
"import * as React from \\"react\\";

function NestedShow(props) {
  return (
    <>
      {props.conditionA ? (
        <>
          {!props.conditionB ? (
            <div>if condition A and condition B</div>
          ) : (
            <div>else-condition-B</div>
          )}
        </>
      ) : (
        <div>else-condition-A</div>
      )}
    </>
  );
}

export default NestedShow;
"
`;

exports[`React - stateType: variables > jsx > Javascript Test > nestedStyles 1`] = `
"import * as React from \\"react\\";

function NestedStyles(props) {
  return (
    <>
      <div className=\\"div\\">Hello world</div>
      <style jsx>{\`
        .div {
          display: flex;
          --bar: red;
          color: var(--bar);
        }
        @media (max-width: env(--mobile)) {
          .div {
            display: block;
          }
        }
        .div:hover {
          display: flex;
        }
        .div:active {
          display: inline;
        }
        .div .nested-selector {
          display: grid;
        }
        .div .nested-selector:hover {
          display: block;
        }
        .div.nested-selector:active {
          display: inline-block;
        }
      \`}</style>
    </>
  );
}

export default NestedStyles;
"
`;

exports[`React - stateType: variables > jsx > Javascript Test > onEvent 1`] = `
"\\"use client\\";
import * as React from \\"react\\";
import { useRef, useEffect } from \\"react\\";

function Embed(props) {
  const elem = useRef(null);
  const foo = function foo(event) {
    console.log(\\"test2\\");
  };
  const elem_onInitEditingBldr = function elem_onInitEditingBldr(event) {
    console.log(\\"test\\");
    foo(event);
  };

  useEffect(() => {
    elem.current?.addEventListener(\\"initEditingBldr\\", elem_onInitEditingBldr);
    return () =>
      elem.current?.removeEventListener(
        \\"initEditingBldr\\",
        elem_onInitEditingBldr
      );
  }, []);

  useEffect(() => {
    elem.current.dispatchEvent(new CustomEvent(\\"initEditingBldr\\"));
  }, []);

  return (
    <div className=\\"builder-embed\\" ref={elem}>
      <div>Test</div>
    </div>
  );
}

export default Embed;
"
`;

exports[`React - stateType: variables > jsx > Javascript Test > onInit & onMount 1`] = `
"\\"use client\\";
import * as React from \\"react\\";
import { useRef, useEffect } from \\"react\\";

function OnInit(props) {
  const hasInitialized = useRef(false);
  if (!hasInitialized.current) {
    console.log(\\"onInit\\");
    hasInitialized.current = true;
  }

  useEffect(() => {
    console.log(\\"onMount\\");
  }, []);

  return <div />;
}

export default OnInit;
"
`;

exports[`React - stateType: variables > jsx > Javascript Test > onInit 1`] = `
"\\"use client\\";
import * as React from \\"react\\";
import { useRef } from \\"react\\";

export const defaultValues = {
  name: \\"PatrickJS\\",
};

function OnInit(props) {
  const name = \\"\\";

  const hasInitialized = useRef(false);
  if (!hasInitialized.current) {
    name = defaultValues.name || props.name;
    console.log(\\"set defaults with props\\");
    hasInitialized.current = true;
  }

  return <div>Default name defined by parent {name}</div>;
}

export default OnInit;
"
`;

exports[`React - stateType: variables > jsx > Javascript Test > onInitPlain 1`] = `
"import * as React from \\"react\\";
import { useRef } from \\"react\\";

function OnInitPlain(props) {
  const hasInitialized = useRef(false);
  if (!hasInitialized.current) {
    console.log(\\"onInit\\");
    hasInitialized.current = true;
  }

  return <div />;
}

export default OnInitPlain;
"
`;

exports[`React - stateType: variables > jsx > Javascript Test > onMount 1`] = `
"\\"use client\\";
import * as React from \\"react\\";
import { useEffect } from \\"react\\";

function Comp(props) {
  useEffect(() => {
    console.log(\\"Runs on mount\\");
  }, []);

  useEffect(() => {
    return () => {
      console.log(\\"Runs on unMount\\");
    };
  }, []);

  return <div />;
}

export default Comp;
"
`;

exports[`React - stateType: variables > jsx > Javascript Test > onMountMultiple 1`] = `
"\\"use client\\";
import * as React from \\"react\\";
import { useEffect } from \\"react\\";

function Comp(props) {
  useEffect(() => {
    console.log(\\"Runs on mount\\");
  }, []);
  useEffect(() => {
    console.log(\\"Another one runs on Mount\\");
  }, []);
  useEffect(() => {
    console.log(\\"SSR runs on Mount\\");
  }, []);

  return <div />;
}

export default Comp;
"
`;

exports[`React - stateType: variables > jsx > Javascript Test > onUpdate 1`] = `
"\\"use client\\";
import * as React from \\"react\\";
import { useEffect } from \\"react\\";

function OnUpdate(props) {
  useEffect(() => {
    console.log(\\"Runs on every update/rerender\\");
  });

  return <div />;
}

export default OnUpdate;
"
`;

exports[`React - stateType: variables > jsx > Javascript Test > onUpdateWithDeps 1`] = `
"\\"use client\\";
import * as React from \\"react\\";
import { useEffect } from \\"react\\";

function OnUpdateWithDeps(props) {
  const a = \\"a\\";
  const b = \\"b\\";

  useEffect(() => {
    console.log(\\"Runs when a, b or size changes\\", a, b, props.size);
  }, [a, b, props.size]);

  return <div />;
}

export default OnUpdateWithDeps;
"
`;

exports[`React - stateType: variables > jsx > Javascript Test > preserveExportOrLocalStatement 1`] = `
"import * as React from \\"react\\";

const b = 3;
const foo = () => {};
export const a = 3;
export const bar = () => {};
export function run(value) {}

function MyBasicComponent(props) {
  return <div />;
}

export default MyBasicComponent;
"
`;

exports[`React - stateType: variables > jsx > Javascript Test > preserveTyping 1`] = `
"import * as React from \\"react\\";

function MyBasicComponent(props) {
  return (
    <div>Hello! I can run in React, Vue, Solid, or Liquid! {props.name}</div>
  );
}

export default MyBasicComponent;
"
`;

exports[`React - stateType: variables > jsx > Javascript Test > propsDestructure 1`] = `
"\\"use client\\";
import * as React from \\"react\\";

function MyBasicComponent(props) {
  const name = \\"Decadef20\\";

  return (
    <div>
      {props.children}
      {props.type}
      Hello! I can run in React, Vue, Solid, or Liquid!
    </div>
  );
}

export default MyBasicComponent;
"
`;

exports[`React - stateType: variables > jsx > Javascript Test > propsInterface 1`] = `
"import * as React from \\"react\\";

function MyBasicComponent(props) {
  return (
    <div>Hello! I can run in React, Vue, Solid, or Liquid! {props.name}</div>
  );
}

export default MyBasicComponent;
"
`;

exports[`React - stateType: variables > jsx > Javascript Test > propsType 1`] = `
"import * as React from \\"react\\";

function MyBasicComponent(props) {
  return (
    <div>Hello! I can run in React, Vue, Solid, or Liquid! {props.name}</div>
  );
}

export default MyBasicComponent;
"
`;

exports[`React - stateType: variables > jsx > Javascript Test > referencingFunInsideHook 1`] = `
"'(' expected. (15:30)
  13 |
  14 |   function OnUpdate(props) {
> 15 |   const foo = foo = function function foo(params) {}
     |                              ^
  16 | const bar = bar = function function bar() {}
  17 | const zoo = zoo = function function zoo() {
  18 | const params = {"
`;

exports[`React - stateType: variables > jsx > Javascript Test > renderBlock 1`] = `
"Identifier expected. (214:8)
  212 |    {shouldWrap() ? (
  213 |    <>{isEmptyHtmlElement(tag()) ? (
> 214 |    <tag()  {...(attributes())}  {...(actions())}  />
      |        ^
  215 |  ) : null}
  216 | {!isEmptyHtmlElement(tag()) && repeatItemData() ? (
  217 |    <>{repeatItemData()?.map((data, index) => ("
`;

exports[`React - stateType: variables > jsx > Javascript Test > renderContentExample 1`] = `
"\\"use client\\";
import * as React from \\"react\\";
import { useContext, useEffect } from \\"react\\";
import BuilderContext from \\"@dummy/context.js\\";
import {
  dispatchNewContentToVisualEditor,
  sendComponentsToVisualEditor,
  trackClick,
} from \\"@dummy/injection-js\\";
import RenderBlocks from \\"@dummy/RenderBlocks\\";

function RenderContent(props) {
  useEffect(() => {
    sendComponentsToVisualEditor(props.customComponents);
  }, []);

  useEffect(() => {
    dispatchNewContentToVisualEditor(props.content);
  }, [props.content]);

  return (
    <>
      <BuilderContext.Provider
        value={{
          get content() {
            return 3;
          },

          get registeredComponents() {
            return 4;
          },
        }}
      >
        <div className=\\"div\\" onClick={(event) => trackClick(props.content.id)}>
          <RenderBlocks blocks={props.content.blocks} />
        </div>
      </BuilderContext.Provider>
      <style jsx>{\`
        .div {
          display: flex;
          flex-direction: columns;
        }
      \`}</style>
    </>
  );
}

export default RenderContent;
"
`;

exports[`React - stateType: variables > jsx > Javascript Test > rootFragmentMultiNode 1`] = `
"import * as React from \\"react\\";

function Button(props) {
  return (
    <>
      {props.link ? (
        <a
          {...props.attributes}
          href={props.link}
          target={props.openLinkInNewTab ? \\"_blank\\" : undefined}
        >
          {props.text}
        </a>
      ) : null}
      {!props.link ? (
        <button type=\\"button\\" {...props.attributes}>
          {props.text}
        </button>
      ) : null}
    </>
  );
}

export default Button;
"
`;

exports[`React - stateType: variables > jsx > Javascript Test > rootShow 1`] = `
"import * as React from \\"react\\";

function RenderStyles(props) {
  return (
    <>
      {props.foo === \\"bar\\" ? (
        <>
          <div>Bar</div>
        </>
      ) : (
        <div>Foo</div>
      )}
    </>
  );
}

export default RenderStyles;
"
`;

exports[`React - stateType: variables > jsx > Javascript Test > self-referencing component 1`] = `
"import * as React from \\"react\\";

function MyComponent(props) {
  return (
    <div>
      {props.name}
      {props.name === \\"Batman\\" ? <MyComponent name=\\"Bruce Wayne\\" /> : null}
    </div>
  );
}

export default MyComponent;
"
`;

exports[`React - stateType: variables > jsx > Javascript Test > self-referencing component with children 1`] = `
"import * as React from \\"react\\";

function MyComponent(props) {
  return (
    <div>
      {props.name}
      {props.children}
      {props.name === \\"Batman\\" ? (
        <MyComponent name=\\"Bruce\\">
          <div>Wayne</div>
        </MyComponent>
      ) : null}
    </div>
  );
}

export default MyComponent;
"
`;

exports[`React - stateType: variables > jsx > Javascript Test > setState 1`] = `
"\\"use client\\";
import * as React from \\"react\\";

function SetState(props) {
  const n = [\\"123\\"];
  const someFn = function someFn() {
    n[0] = \\"123\\";
  };

  return (
    <div>
      <button onClick={(event) => someFn()}>Click me</button>
    </div>
  );
}

export default SetState;
"
`;

exports[`React - stateType: variables > jsx > Javascript Test > showExpressions 1`] = `
"import * as React from \\"react\\";

function ShowWithOtherValues(props) {
  return (
    <div>
      {props.conditionA ? <>Content0</> : <>ContentA</>}
      {props.conditionA ? <>ContentA</> : null}
      {props.conditionA ? <></> : <>ContentA</>}
      {props.conditionA ? <>ContentB</> : <>{undefined}</>}
      {props.conditionA ? <>{undefined}</> : <>ContentB</>}
      {props.conditionA ? <>ContentC</> : null}
      {props.conditionA ? <></> : <>ContentC</>}
      {props.conditionA ? <>ContentD</> : null}
      {props.conditionA ? <></> : <>ContentD</>}
      {props.conditionA ? <>ContentE</> : <>hello</>}
      {props.conditionA ? <>hello</> : <>ContentE</>}
      {props.conditionA ? <>ContentF</> : <>123</>}
      {props.conditionA ? <>123</> : <>ContentF</>}
      {props.conditionA === \\"Default\\" ? (
        <>4mb</>
      ) : props.conditionB === \\"Complete\\" ? (
        <>20mb</>
      ) : (
        <>9mb</>
      )}
      {props.conditionA === \\"Default\\" ? (
        <>{props.conditionB === \\"Complete\\" ? <>20mb</> : <>9mb</>}</>
      ) : (
        <>4mb</>
      )}
      {props.conditionA === \\"Default\\" ? (
        <>{props.conditionB === \\"Complete\\" ? <div>complete</div> : <>9mb</>}</>
      ) : props.conditionC === \\"Complete\\" ? (
        <>dff</>
      ) : (
        <div>complete else</div>
      )}
    </div>
  );
}

export default ShowWithOtherValues;
"
`;

exports[`React - stateType: variables > jsx > Javascript Test > showWithFor 1`] = `
"import * as React from \\"react\\";

function NestedShow(props) {
  return (
    <>
      {props.conditionA ? (
        <>
          {props.items?.map((item, idx) => (
            <div key={idx}>{item}</div>
          ))}
        </>
      ) : (
        <div>else-condition-A</div>
      )}
    </>
  );
}

export default NestedShow;
"
`;

exports[`React - stateType: variables > jsx > Javascript Test > showWithOtherValues 1`] = `
"import * as React from \\"react\\";

function ShowWithOtherValues(props) {
  return (
    <div>
      {props.conditionA ? <>ContentA</> : null}
      {props.conditionA ? <>ContentB</> : <>{undefined}</>}
      {props.conditionA ? <>ContentC</> : null}
      {props.conditionA ? <>ContentD</> : null}
      {props.conditionA ? <>ContentE</> : <>hello</>}
      {props.conditionA ? <>ContentF</> : <>123</>}
    </div>
  );
}

export default ShowWithOtherValues;
"
`;

exports[`React - stateType: variables > jsx > Javascript Test > showWithRootText 1`] = `
"import * as React from \\"react\\";

function ShowRootText(props) {
  return <>{props.conditionA ? <>ContentA</> : <div>else-condition-A</div>}</>;
}

export default ShowRootText;
"
`;

exports[`React - stateType: variables > jsx > Javascript Test > signalsOnUpdate 1`] = `
"\\"use client\\";
import * as React from \\"react\\";
import { useEffect } from \\"react\\";

function MyBasicComponent(props) {
  useEffect(() => {
    console.log(\\"props.id changed\\", props.id);
    console.log(\\"props.foo.value.bar.baz changed\\", props.foo.value.bar.baz);
  }, [props.id, props.foo.value.bar.baz]);

  return (
    <>
      <div className=\\"test div\\">
        {props.id}
        {props.foo.value.bar.baz}
      </div>
      <style jsx>{\`
        .div {
          padding: 10px;
        }
      \`}</style>
    </>
  );
}

export default MyBasicComponent;
"
`;

exports[`React - stateType: variables > jsx > Javascript Test > spreadAttrs 1`] = `
"import * as React from \\"react\\";

function MyBasicComponent(props) {
  return <input {...attrs} />;
}

export default MyBasicComponent;
"
`;

exports[`React - stateType: variables > jsx > Javascript Test > spreadNestedProps 1`] = `
"import * as React from \\"react\\";

function MyBasicComponent(props) {
  return <input {...props.nested} />;
}

export default MyBasicComponent;
"
`;

exports[`React - stateType: variables > jsx > Javascript Test > spreadProps 1`] = `
"import * as React from \\"react\\";

function MyBasicComponent(props) {
  return <input {...props} />;
}

export default MyBasicComponent;
"
`;

exports[`React - stateType: variables > jsx > Javascript Test > store-async-function 1`] = `
"import * as React from \\"react\\";

function StringLiteralStore(props) {
  const arrowFunction = async function arrowFunction() {
    return Promise.resolve();
  };
  const namedFunction = async function namedFunction() {
    return Promise.resolve();
  };
  const fetchUsers = async function fetchUsers() {
    return Promise.resolve();
  };

  return <div />;
}

export default StringLiteralStore;
"
`;

exports[`React - stateType: variables > jsx > Javascript Test > string-literal-store 1`] = `
"\\"use client\\";
import * as React from \\"react\\";

function StringLiteralStore(props) {
  const foo = 123;

  return <div>{foo}</div>;
}

export default StringLiteralStore;
"
`;

exports[`React - stateType: variables > jsx > Javascript Test > styleClassAndCss 1`] = `
"import * as React from \\"react\\";

function MyComponent(props) {
  return (
    <>
      <div
        className=\\"builder-column div\\"
        style={{
          width: \\"100%\\",
        }}
      />
      <style jsx>{\`
        .div {
          display: flex;
          flex-direction: column;
          align-items: stretch;
        }
      \`}</style>
    </>
  );
}

export default MyComponent;
"
`;

exports[`React - stateType: variables > jsx > Javascript Test > stylePropClassAndCss 1`] = `
"import * as React from \\"react\\";

function StylePropClassAndCss(props) {
  return (
    <>
      <div
        style={props.attributes.style}
        className={props.attributes.class + \\" div\\"}
      />
      <style jsx>{\`
        .div {
          display: flex;
          flex-direction: column;
          align-items: stretch;
        }
      \`}</style>
    </>
  );
}

export default StylePropClassAndCss;
"
`;

exports[`React - stateType: variables > jsx > Javascript Test > subComponent 1`] = `
"import * as React from \\"react\\";
import Foo from \\"./foo-sub-component\\";

function SubComponent(props) {
  return <Foo />;
}

export default SubComponent;
"
`;

exports[`React - stateType: variables > jsx > Javascript Test > svgComponent 1`] = `
"import * as React from \\"react\\";

function SvgComponent(props) {
  return (
    <svg
      fill=\\"none\\"
      role=\\"img\\"
      viewBox={\\"0 0 \\" + 42 + \\" \\" + 42}
      width={42}
      height={42}
    >
      <defs>
        <filter id=\\"prefix__filter0_f\\" filterUnits=\\"userSpaceOnUse\\">
          <feFlood result=\\"BackgroundImageFix\\" />
          <feBlend in=\\"SourceGraphic\\" in2=\\"BackgroundImageFix\\" result=\\"shape\\" />
          <feGaussianBlur result=\\"effect1_foregroundBlur\\" stdDeviation={7} />
        </filter>
      </defs>
    </svg>
  );
}

export default SvgComponent;
"
`;

exports[`React - stateType: variables > jsx > Javascript Test > typeDependency 1`] = `
"import * as React from \\"react\\";

function TypeDependency(props) {
  return <div>{props.foo}</div>;
}

export default TypeDependency;
"
`;

exports[`React - stateType: variables > jsx > Javascript Test > typeExternalStore 1`] = `
"\\"use client\\";
import * as React from \\"react\\";

function TypeExternalStore(props) {
  const _name = \\"test\\";

  return <div>Hello {_name}! </div>;
}

export default TypeExternalStore;
"
`;

exports[`React - stateType: variables > jsx > Javascript Test > typeGetterStore 1`] = `
"\\"use client\\";
import * as React from \\"react\\";

function TypeGetterStore(props) {
  const name = \\"test\\";
  const getName = function getName() {
    if (name === \\"a\\") {
      return \\"b\\";
    }

    return name;
  };
  const test = function test() {
    return \\"test\\";
  };

  return <div>Hello {name}! </div>;
}

export default TypeGetterStore;
"
`;

exports[`React - stateType: variables > jsx > Javascript Test > use-style 1`] = `
"import * as React from \\"react\\";

function MyComponent(props) {
  return (
    <>
      <button type=\\"button\\">Button</button>
      <style jsx>{\`
        button {
          background: blue;
          color: white;
          font-size: 12px;
          outline: 1px solid black;
        }
      \`}</style>
    </>
  );
}

export default MyComponent;
"
`;

exports[`React - stateType: variables > jsx > Javascript Test > use-style-and-css 1`] = `
"import * as React from \\"react\\";

function MyComponent(props) {
  return (
    <>
      <button type=\\"button\\" className=\\"button\\">
        Button
      </button>
      <style jsx>{\`
        button {
          font-size: 12px;
          outline: 1px solid black;
        }

        .button {
          background: blue;
          color: white;
        }
      \`}</style>
    </>
  );
}

export default MyComponent;
"
`;

exports[`React - stateType: variables > jsx > Javascript Test > use-style-outside-component 1`] = `
"import * as React from \\"react\\";

function MyComponent(props) {
  return (
    <>
      <button type=\\"button\\">Button</button>
      <style jsx>{\`
        button {
          background: blue;
          color: white;
          font-size: 12px;
          outline: 1px solid black;
        }
      \`}</style>
    </>
  );
}

export default MyComponent;
"
`;

exports[`React - stateType: variables > jsx > Javascript Test > useTarget 1`] = `
"\\"use client\\";
import * as React from \\"react\\";
import { useEffect } from \\"react\\";

function UseTargetComponent(props) {
  const name = function name() {
    const prefix = 123;
    return prefix + \\"foo\\";
  };
  const lastName = \\"bar\\";
  const foo = \\"bar\\";

  useEffect(() => {
    console.log(foo);
    foo = \\"bar\\";
    console.log(\\"react\\");
    lastName = \\"baz\\";
    console.log(foo);
    foo = \\"baz\\";
  }, []);

  return <div>{name()}</div>;
}

export default UseTargetComponent;
"
`;

exports[`React - stateType: variables > jsx > Javascript Test > webComponent 1`] = `
"import * as React from \\"react\\";
import { useRef } from \\"react\\";
import { register } from \\"swiper/element/bundle\\";

function MyBasicWebComponent(props) {
  const hasInitialized = useRef(false);
  if (!hasInitialized.current) {
    register();
    hasInitialized.current = true;
  }

  return (
    <swiper-container slides-per-view=\\"3\\" navigation=\\"true\\" pagination=\\"true\\">
      <swiper-slide>Slide 1</swiper-slide>
      <swiper-slide>Slide 2</swiper-slide>
      <swiper-slide>Slide 3</swiper-slide>
    </swiper-container>
  );
}

export default MyBasicWebComponent;
"
`;

exports[`React - stateType: variables > jsx > Remove Internal mitosis package 1`] = `
"\\"use client\\";
import * as React from \\"react\\";

function MyBasicComponent(props) {
  const name = \\"PatrickJS\\";

  return (
    <div>Hello {name}! I can run in React, Qwik, Vue, Solid, or Liquid!</div>
  );
}

export default MyBasicComponent;
"
`;

exports[`React - stateType: variables > jsx > Typescript Test > AdvancedRef 1`] = `
"'(' expected. (20:34)
  18 | const inputNoArgRef = useRef<HTMLLabelElement>(null);
  19 | const name= 'PatrickJS'
> 20 | const onBlur = onBlur = function function onBlur() {
     |                                  ^
  21 | // Maintain focus
  22 | inputRef.current.focus();
  23 | }"
`;

exports[`React - stateType: variables > jsx > Typescript Test > Basic 1`] = `
"\\"use client\\";
import * as React from \\"react\\";

export interface MyBasicComponentProps {
  id: string;
}

export const DEFAULT_VALUES = {
  name: \\"Steve\\",
};

function MyBasicComponent(props: MyBasicComponentProps) {
  const name = \\"Steve\\";
  const underscore_fn_name = function underscore_fn_name() {
    return \\"bar\\";
  };
  const age = 1;
  const sports = [\\"\\"];

  return (
    <>
      <div className=\\"test div\\">
        <input
          value={DEFAULT_VALUES.name || name}
          onChange={(myEvent) => (name = myEvent.target.value)}
        />
        Hello! I can run in React, Vue, Solid, or Liquid! &gt;
      </div>
      <style jsx>{\`
        .div {
          padding: 10px;
        }
      \`}</style>
    </>
  );
}

export default MyBasicComponent;
"
`;

exports[`React - stateType: variables > jsx > Typescript Test > Basic Context 1`] = `
"'(' expected. (16:38)
  14 |   function MyBasicComponent(props:any) {
  15 |   const name= 'PatrickJS'
> 16 | const onChange = onChange = function function onChange() {
     |                                      ^
  17 | const change = myService.method('change');
  18 | console.log(change);
  19 | }"
`;

exports[`React - stateType: variables > jsx > Typescript Test > Basic OnMount Update 1`] = `
"\\"use client\\";
import * as React from \\"react\\";
import { useRef, useEffect } from \\"react\\";

export interface Props {
  hi: string;
  bye: string;
}

function MyBasicOnMountUpdateComponent(props: Props) {
  const name = \\"PatrickJS\\";
  const names = [\\"Steve\\", \\"PatrickJS\\"];

  const hasInitialized = useRef(false);
  if (!hasInitialized.current) {
    name = \\"PatrickJS onInit\\" + props.hi;
    hasInitialized.current = true;
  }

  useEffect(() => {
    name = \\"PatrickJS onMount\\" + props.bye;
  }, []);

  return <div>Hello {name}</div>;
}

export default MyBasicOnMountUpdateComponent;
"
`;

exports[`React - stateType: variables > jsx > Typescript Test > Basic Outputs 1`] = `
"\\"use client\\";
import * as React from \\"react\\";
import { useEffect } from \\"react\\";

function MyBasicOutputsComponent(props: any) {
  const name = \\"PatrickJS\\";

  useEffect(() => {
    props.onMessage(name);
    props.onEvent(props.message);
  }, []);

  return <div />;
}

export default MyBasicOutputsComponent;
"
`;

exports[`React - stateType: variables > jsx > Typescript Test > Basic Outputs Meta 1`] = `
"\\"use client\\";
import * as React from \\"react\\";
import { useEffect } from \\"react\\";

function MyBasicOutputsComponent(props: any) {
  const name = \\"PatrickJS\\";

  useEffect(() => {
    props.onMessage(name);
    props.onEvent(props.message);
  }, []);

  return <div />;
}

export default MyBasicOutputsComponent;
"
`;

exports[`React - stateType: variables > jsx > Typescript Test > BasicAttribute 1`] = `
"import * as React from \\"react\\";

function MyComponent(props: any) {
  return <input autoCapitalize=\\"on\\" autoComplete=\\"on\\" spellCheck />;
}

export default MyComponent;
"
`;

exports[`React - stateType: variables > jsx > Typescript Test > BasicBooleanAttribute 1`] = `
"import * as React from \\"react\\";

type Props = {
  children: any;
  type: string;
};
import MyBooleanAttributeComponent from \\"./basic-boolean-attribute-component.raw\\";

function MyBooleanAttribute(props: Props) {
  return (
    <div>
      {props.children ? (
        <>
          {props.children}
          {props.type}
        </>
      ) : null}
      <MyBooleanAttributeComponent toggle />
      <MyBooleanAttributeComponent toggle />
      <MyBooleanAttributeComponent list={null} />
    </div>
  );
}

export default MyBooleanAttribute;
"
`;

exports[`React - stateType: variables > jsx > Typescript Test > BasicChildComponent 1`] = `
"\\"use client\\";
import * as React from \\"react\\";
import MyBasicOnMountUpdateComponent from \\"./basic-onMount-update.raw\\";
import MyBasicComponent from \\"./basic.raw\\";

function MyBasicChildComponent(props: any) {
  const name = \\"Steve\\";
  const dev = \\"PatrickJS\\";

  return (
    <div>
      <MyBasicComponent id={dev} />
      <div>
        <MyBasicOnMountUpdateComponent hi={name} bye={dev} />
      </div>
    </div>
  );
}

export default MyBasicChildComponent;
"
`;

exports[`React - stateType: variables > jsx > Typescript Test > BasicFor 1`] = `
"\\"use client\\";
import * as React from \\"react\\";
import { useEffect } from \\"react\\";

function MyBasicForComponent(props: any) {
  const name = \\"PatrickJS\\";
  const names = [\\"Steve\\", \\"PatrickJS\\"];

  useEffect(() => {
    console.log(\\"onMount code\\");
  }, []);

  return (
    <div>
      {names?.map((person) => (
        <>
          <input
            value={name}
            onChange={(event) => {
              name = event.target.value + \\" and \\" + person;
            }}
          />
          Hello
          {person}! I can run in Qwik, Web Component, React, Vue, Solid, or
          Liquid!
        </>
      ))}
    </div>
  );
}

export default MyBasicForComponent;
"
`;

exports[`React - stateType: variables > jsx > Typescript Test > BasicRef 1`] = `
"'(' expected. (20:34)
  18 | const inputNoArgRef = useRef<HTMLLabelElement | null>(null);
  19 | const name= 'PatrickJS'
> 20 | const onBlur = onBlur = function function onBlur() {
     |                                  ^
  21 | // Maintain focus
  22 | inputRef.current?.focus();
  23 | }"
`;

exports[`React - stateType: variables > jsx > Typescript Test > BasicRefAssignment 1`] = `
"'(' expected. (18:46)
  16 |   function MyBasicRefAssignmentComponent(props:Props) {
  17 |   const holdValueRef = useRef('Patrick');
> 18 | const handlerClick = handlerClick = function function handlerClick(event: Event) {
     |                                              ^
  19 | event.preventDefault();
  20 | console.log('current value', holdValueRef.current);
  21 | holdValueRef.current = holdValueRef.current + 'JS';"
`;

exports[`React - stateType: variables > jsx > Typescript Test > BasicRefPrevious 1`] = `
"\\"use client\\";
import * as React from \\"react\\";
import { useRef, useEffect } from \\"react\\";

export interface Props {
  showInput: boolean;
}

export function usePrevious<T>(value: T) {
  // The ref object is a generic container whose current property is mutable ...
  // ... and can hold any value, similar to an instance property on a class
  let ref = useRef<T>(null); // Store current value in ref

  onUpdate(() => {
    ref = value;
  }, [value]); // Only re-run if value changes
  // Return previous value (happens before update in useEffect above)

  return ref;
}

function MyPreviousComponent(props: Props) {
  const count = 0;

  const prevCount = useRef(state.count);

  useEffect(() => {
    prevCount.current = count;
  }, [count]);

  return (
    <div>
      <h1>
        Now: {count}, before: {prevCount.current}
      </h1>
      <button onClick={(event) => (count += 1)}>Increment</button>
    </div>
  );
}

export default MyPreviousComponent;
"
`;

exports[`React - stateType: variables > jsx > Typescript Test > Button 1`] = `
"import * as React from \\"react\\";

export interface ButtonProps {
  attributes?: any;
  text?: string;
  link?: string;
  openLinkInNewTab?: boolean;
}

function Button(props: ButtonProps) {
  return (
    <div>
      {props.link ? (
        <a
          {...props.attributes}
          href={props.link}
          target={props.openLinkInNewTab ? \\"_blank\\" : undefined}
        >
          {props.text}
        </a>
      ) : null}
      {!props.link ? (
        <button type=\\"button\\" {...props.attributes}>
          {props.text}
        </button>
      ) : null}
    </div>
  );
}

export default Button;
"
`;

exports[`React - stateType: variables > jsx > Typescript Test > Columns 1`] = `
"import * as React from \\"react\\";

type Column = {
  content: any; // TODO: Implement this when support for dynamic CSS lands

  width?: number;
};
export interface ColumnProps {
  columns?: Column[]; // TODO: Implement this when support for dynamic CSS lands

  space?: number; // TODO: Implement this when support for dynamic CSS lands

  stackColumnsAt?: \\"tablet\\" | \\"mobile\\" | \\"never\\"; // TODO: Implement this when support for dynamic CSS lands

  reverseColumnsWhenStacked?: boolean;
}

function Column(props: ColumnProps) {
  const getColumns = function getColumns() {
    return props.columns || [];
  };
  const getGutterSize = function getGutterSize() {
    return typeof props.space === \\"number\\" ? props.space || 0 : 20;
  };
  const getWidth = function getWidth(index: number) {
    const columns = getColumns();
    return (columns[index] && columns[index].width) || 100 / columns.length;
  };
  const getColumnCssWidth = function getColumnCssWidth(index: number) {
    const columns = getColumns();
    const gutterSize = getGutterSize();
    const subtractWidth = (gutterSize * (columns.length - 1)) / columns.length;
    return \`calc(\${getWidth(index)}% - \${subtractWidth}px)\`;
  };

  return (
    <>
      <div className=\\"builder-columns div\\">
        {props.columns?.map((column, index) => (
          <div className=\\"builder-column div-2\\">
            {column.content}
            {index}
          </div>
        ))}
      </div>
      <style jsx>{\`
        .div {
          display: flex;
          flex-direction: column;
          align-items: stretch;
          line-height: normal;
        }
        @media (max-width: 999px) {
          .div {
            flex-direction: row;
          }
        }
        @media (max-width: 639px) {
          .div {
            flex-direction: row-reverse;
          }
        }
        .div-2 {
          flex-grow: 1;
        }
      \`}</style>
    </>
  );
}

export default Column;
"
`;

exports[`React - stateType: variables > jsx > Typescript Test > ContentSlotHtml 1`] = `
"import * as React from \\"react\\";

type Props = {
  [key: string]: string | JSX.Element;
  slotTesting: JSX.Element;
};
import type { JSX } from \\"../../../../jsx-runtime\\";

function ContentSlotCode(props: Props) {
  return (
    <div>
      <>{props.slotTesting}</>
      <div>
        <hr />
      </div>
      <div>
        <>{props.children}</>
      </div>
    </div>
  );
}

export default ContentSlotCode;
"
`;

exports[`React - stateType: variables > jsx > Typescript Test > ContentSlotJSX 1`] = `
"\\"use client\\";
import * as React from \\"react\\";

type Props = {
  [key: string]: string | JSX.Element;
};
import type { JSX } from \\"../../../../jsx-runtime\\";

function ContentSlotJsxCode(props: Props) {
  const name = \\"king\\";
  const showContent = false;
  const cls = function cls() {
    return props.slotContent && props.children ? \`\${name}-content\` : \\"\\";
  };
  const show = function show() {
    props.slotContent ? 1 : \\"\\";
  };

  return (
    <>
      {props.slotReference ? (
        <>
          <div
            name={props.slotContent ? \\"name1\\" : \\"name2\\"}
            title={props.slotContent ? \\"title1\\" : \\"title2\\"}
            {...props.attributes}
            onClick={(event) => show()}
            className={cls()}
          >
            {showContent && props.slotContent ? (
              <>{props.content || \\"{props.content}\\"}</>
            ) : null}
            <div>
              <hr />
            </div>
            <div>{props.children}</div>
          </div>
        </>
      ) : null}
    </>
  );
}

ContentSlotJsxCode.defaultProps = {
  content: \\"\\",
  slotReference: undefined,
  slotContent: undefined,
};

export default ContentSlotJsxCode;
"
`;

exports[`React - stateType: variables > jsx > Typescript Test > CustomCode 1`] = `
"\\"use client\\";
import * as React from \\"react\\";
import { useRef, useEffect } from \\"react\\";

export interface CustomCodeProps {
  code: string;
  replaceNodes?: boolean;
}

function CustomCode(props: CustomCodeProps) {
  const elem = useRef<HTMLDivElement>(null);
  const scriptsInserted = [];
  const scriptsRun = [];
  const findAndRunScripts = function findAndRunScripts() {
    // TODO: Move this function to standalone one in '@builder.io/utils'
    if (elem.current && typeof window !== \\"undefined\\") {
      /** @type {HTMLScriptElement[]} */
      const scripts = elem.current.getElementsByTagName(\\"script\\");

      for (let i = 0; i < scripts.length; i++) {
        const script = scripts[i];

        if (script.src) {
          if (scriptsInserted.includes(script.src)) {
            continue;
          }

          scriptsInserted.push(script.src);
          const newScript = document.createElement(\\"script\\");
          newScript.async = true;
          newScript.src = script.src;
          document.head.appendChild(newScript);
        } else if (
          !script.type ||
          [
            \\"text/javascript\\",
            \\"application/javascript\\",
            \\"application/ecmascript\\",
          ].includes(script.type)
        ) {
          if (scriptsRun.includes(script.innerText)) {
            continue;
          }

          try {
            scriptsRun.push(script.innerText);
            new Function(script.innerText)();
          } catch (error) {
            console.warn(\\"\`CustomCode\`: Error running script:\\", error);
          }
        }
      }
    }
  };

  useEffect(() => {
    findAndRunScripts();
  }, []);

  return (
    <div
      ref={elem}
      className={
        \\"builder-custom-code\\" + (props.replaceNodes ? \\" replace-nodes\\" : \\"\\")
      }
      dangerouslySetInnerHTML={{ __html: props.code }}
    />
  );
}

export default CustomCode;
"
`;

exports[`React - stateType: variables > jsx > Typescript Test > Embed 1`] = `
"\\"use client\\";
import * as React from \\"react\\";
import { useRef, useEffect } from \\"react\\";

export interface CustomCodeProps {
  code: string;
  replaceNodes?: boolean;
}

function CustomCode(props: CustomCodeProps) {
  const elem = useRef<HTMLDivElement>(null);
  const scriptsInserted = [];
  const scriptsRun = [];
  const findAndRunScripts = function findAndRunScripts() {
    // TODO: Move this function to standalone one in '@builder.io/utils'
    if (elem.current && typeof window !== \\"undefined\\") {
      /** @type {HTMLScriptElement[]} */
      const scripts = elem.current.getElementsByTagName(\\"script\\");

      for (let i = 0; i < scripts.length; i++) {
        const script = scripts[i];

        if (script.src) {
          if (scriptsInserted.includes(script.src)) {
            continue;
          }

          scriptsInserted.push(script.src);
          const newScript = document.createElement(\\"script\\");
          newScript.async = true;
          newScript.src = script.src;
          document.head.appendChild(newScript);
        } else if (
          !script.type ||
          [
            \\"text/javascript\\",
            \\"application/javascript\\",
            \\"application/ecmascript\\",
          ].includes(script.type)
        ) {
          if (scriptsRun.includes(script.innerText)) {
            continue;
          }

          try {
            scriptsRun.push(script.innerText);
            new Function(script.innerText)();
          } catch (error) {
            console.warn(\\"\`CustomCode\`: Error running script:\\", error);
          }
        }
      }
    }
  };

  useEffect(() => {
    findAndRunScripts();
  }, []);

  return (
    <div
      ref={elem}
      className={
        \\"builder-custom-code\\" + (props.replaceNodes ? \\" replace-nodes\\" : \\"\\")
      }
      dangerouslySetInnerHTML={{ __html: props.code }}
    />
  );
}

export default CustomCode;
"
`;

exports[`React - stateType: variables > jsx > Typescript Test > Form 1`] = `
"',' expected. (135:2797)
  133 | if (contentType && contentType !== 'multipart/form-data') {
  134 |   if (
> 135 |   /* Zapier doesn't allow content-type header to be sent from browsers */   !(sendWithJs && props.action?.includes('zapier.com'))) {     headers['content-type'] = contentType;   } }  const presubmitEvent = new CustomEvent('presubmit', {   detail: {     body   } });  if (formRef.current) {   formRef.current.dispatchEvent(presubmitEvent);    if (presubmitEvent.defaultPrevented) {     return;   } }  formState = 'sending'; const formUrl = \`\${builder.env === 'dev' ? 'http://localhost:5000' : 'https://builder.io'}/api/v1/form-submit?apiKey=\${builder.apiKey}&to=\${btoa(props.sendSubmissionsToEmail || '')}&name=\${encodeURIComponent(props.name || '')}\`; fetch(props.sendSubmissionsTo === 'email' ? formUrl : props.action! /* TODO: throw error if no action URL */ , {   body,   headers,   method: props.method || 'post' }).then(async res => {   let body;   const contentType = res.headers.get('content-type');    if (contentType && contentType.indexOf('application/json') !== -1) {     body = await res.json();   } else {     body = await res.text();   }    if (!res.ok && props.errorMessagePath) {     /* TODO: allow supplying an error formatter function */     let message = get(body, props.errorMessagePath);      if (message) {       if (typeof message !== 'string') {         /* TODO: ideally convert json to yaml so it woul dbe like          error: - email has been taken */         message = JSON.stringify(message);       }        formErrorMessage = message;     }   }    responseData = body;   formState = res.ok ? 'success' : 'error';    if (res.ok) {     const submitSuccessEvent = new CustomEvent('submit:success', {       detail: {         res,         body       }     });      if (formRef.current) {       formRef.current.dispatchEvent(submitSuccessEvent);        if (submitSuccessEvent.defaultPrevented) {         return;       }       /* TODO: option to turn this on/off? */         if (props.resetFormOnSubmit !== false) {         formRef.current.reset();       }     }     /* TODO: client side route event first that can be preventDefaulted */       if (props.successUrl) {       if (formRef.current) {         const event = new CustomEvent('route', {           detail: {             url: props.successUrl           }         });         formRef.current.dispatchEvent(event);          if (!event.defaultPrevented) {           location.href = props.successUrl;         }       } else {         location.href = props.successUrl;       }     }   } }, err => {   const submitErrorEvent = new CustomEvent('submit:error', {     detail: {       error: err     }   });    if (formRef.current) {     formRef.current.dispatchEvent(submitErrorEvent);      if (submitErrorEvent.defaultPrevented) {       return;     }   }    responseData = err;   formState = 'error'; }); } }                 return (   <>   <form  validate={props.validate}  ref={formRef}  action={!props.sendWithJs && props.action}  method={props.method}  name={props.name}  onSubmit={(event) => onSubmit(event) }  {...(props.attributes)}>{props.builderBlock && props.builderBlock.children ? (   <>{props.builderBlock?.children?.map((block, index) => (   <BuilderBlockComponent  key={block.id}  block={block}  index={index}  /> ))}</> ) : null}{submissionState() === 'error' ? (   <BuilderBlocks  dataPath=\\"errorMessage\\"  blocks={props.errorMessage!}  /> ) : null}{submissionState() === 'sending' ? (   <BuilderBlocks  dataPath=\\"sendingMessage\\"  blocks={props.sendingMessage!}  /> ) : null}{submissionState() === 'error' && responseData ? (   <pre className=\\"builder-form-error-text pre\\">{JSON.stringify(responseData, null, 2)}</pre> ) : null}{submissionState() === 'success' ? (   <BuilderBlocks  dataPath=\\"successMessage\\"  blocks={props.successMessage!}  /> ) : null}</form>   <style jsx>{\`.pre {   padding: 10px;   color: red;   text-align: center; }\`}</style>     </> ); }         export default FormComponent;
      |
  136 |
  137 |
  138 |"
`;

exports[`React - stateType: variables > jsx > Typescript Test > Image 1`] = `
"'(' expected. (42:40)
  40 | return !!props.lazy && isBrowser();
  41 | }
> 42 | const isBrowser = isBrowser = function function isBrowser() {
     |                                        ^
  43 | return typeof window !== 'undefined' && window.navigator.product != 'ReactNative';
  44 | }
  45 | const load= false"
`;

exports[`React - stateType: variables > jsx > Typescript Test > Image State 1`] = `
"\\"use client\\";
import * as React from \\"react\\";

function ImgStateComponent(props: any) {
  const canShow = true;
  const images = [\\"http://example.com/qwik.png\\"];

  return (
    <div>
      {images?.map((item, itemIndex) => (
        <img className=\\"custom-class\\" src={item} key={itemIndex} />
      ))}
    </div>
  );
}

export default ImgStateComponent;
"
`;

exports[`React - stateType: variables > jsx > Typescript Test > Img 1`] = `
"import * as React from \\"react\\";

export interface ImgProps {
  attributes?: any;
  imgSrc?: string;
  altText?: string;
  backgroundSize?: \\"cover\\" | \\"contain\\";
  backgroundPosition?:
    | \\"center\\"
    | \\"top\\"
    | \\"left\\"
    | \\"right\\"
    | \\"bottom\\"
    | \\"top left\\"
    | \\"top right\\"
    | \\"bottom left\\"
    | \\"bottom right\\";
}

import { Builder } from \\"@builder.io/sdk\\";

function ImgComponent(props: ImgProps) {
  return (
    <img
      style={{
        objectFit: props.backgroundSize || \\"cover\\",
        objectPosition: props.backgroundPosition || \\"center\\",
      }}
      {...props.attributes}
      key={(Builder.isEditing && props.imgSrc) || \\"default-key\\"}
      alt={props.altText}
      src={props.imgSrc}
    />
  );
}

export default ImgComponent;
"
`;

exports[`React - stateType: variables > jsx > Typescript Test > Input 1`] = `
"\\"use client\\";
import * as React from \\"react\\";

export interface FormInputProps {
  type?: string;
  attributes?: any;
  name?: string;
  value?: string;
  placeholder?: string;
  defaultValue?: string;
  required?: boolean;
  onChange?: (value: string) => void;
}

import { Builder } from \\"@builder.io/sdk\\";

function FormInputComponent(props: FormInputProps) {
  return (
    <input
      {...props.attributes}
      key={
        Builder.isEditing && props.defaultValue
          ? props.defaultValue
          : \\"default-key\\"
      }
      placeholder={props.placeholder}
      type={props.type}
      name={props.name}
      value={props.value}
      defaultValue={props.defaultValue}
      required={props.required}
      onChange={(event) => props.onChange?.(event.target.value)}
    />
  );
}

export default FormInputComponent;
"
`;

exports[`React - stateType: variables > jsx > Typescript Test > InputParent 1`] = `
"import * as React from \\"react\\";
import FormInputComponent from \\"./input.raw\\";

function Stepper(props: any) {
  const handleChange = function handleChange(value: string) {
    console.log(value);
  };

  return (
    <FormInputComponent
      name=\\"kingzez\\"
      type=\\"text\\"
      onChange={(value) => handleChange(value)}
    />
  );
}

export default Stepper;
"
`;

exports[`React - stateType: variables > jsx > Typescript Test > NestedStore 1`] = `
"\\"use client\\";
import * as React from \\"react\\";

type MyStore = {
  _id?: string;
  _messageId?: string;
};

function NestedStore(props: any) {
  const _id = \\"abc\\";
  const _messageId = _id + \\"-message\\";

  return (
    <div id={_id}>
      Test
      <p id={_messageId}>Message</p>
    </div>
  );
}

export default NestedStore;
"
`;

exports[`React - stateType: variables > jsx > Typescript Test > RawText 1`] = `
"import * as React from \\"react\\";

export interface RawTextProps {
  attributes?: any;
  text?: string; // builderBlock?: any;
}

function RawText(props: RawTextProps) {
  return (
    <span
      className={props.attributes?.class || props.attributes?.className}
      dangerouslySetInnerHTML={{ __html: props.text || \\"\\" }}
    />
  );
}

export default RawText;
"
`;

exports[`React - stateType: variables > jsx > Typescript Test > Section 1`] = `
"import * as React from \\"react\\";

export interface SectionProps {
  maxWidth?: number;
  attributes?: any;
  children?: any;
}

function SectionComponent(props: SectionProps) {
  return (
    <section
      {...props.attributes}
      style={
        props.maxWidth && typeof props.maxWidth === \\"number\\"
          ? {
              maxWidth: props.maxWidth,
            }
          : undefined
      }
    >
      {props.children}
    </section>
  );
}

export default SectionComponent;
"
`;

exports[`React - stateType: variables > jsx > Typescript Test > Select 1`] = `
"import * as React from \\"react\\";

export interface FormSelectProps {
  options?: {
    name?: string;
    value: string;
  }[];
  attributes?: any;
  name?: string;
  value?: string;
  defaultValue?: string;
}

import { Builder } from \\"@builder.io/sdk\\";

function SelectComponent(props: FormSelectProps) {
  return (
    <select
      {...props.attributes}
      value={props.value}
      key={
        Builder.isEditing && props.defaultValue
          ? props.defaultValue
          : \\"default-key\\"
      }
      defaultValue={props.defaultValue}
      name={props.name}
    >
      {props.options?.map((option, index) => (
        <option value={option.value} data-index={index}>
          {option.name || option.value}
        </option>
      ))}
    </select>
  );
}

export default SelectComponent;
"
`;

exports[`React - stateType: variables > jsx > Typescript Test > SlotDefault 1`] = `
"import * as React from \\"react\\";

type Props = {
  [key: string]: string;
};

function SlotCode(props: Props) {
  return (
    <div>
      <>
        {props.children || <div className=\\"default-slot\\">Default content</div>}
      </>
    </div>
  );
}

export default SlotCode;
"
`;

exports[`React - stateType: variables > jsx > Typescript Test > SlotHtml 1`] = `
"import * as React from \\"react\\";

type Props = {
  [key: string]: string;
};
import ContentSlotCode from \\"./content-slot-jsx.raw\\";

function SlotCode(props: Props) {
  return (
    <div>
      <ContentSlotCode testing={<div>Hello</div>}></ContentSlotCode>
    </div>
  );
}

export default SlotCode;
"
`;

exports[`React - stateType: variables > jsx > Typescript Test > SlotJsx 1`] = `
"import * as React from \\"react\\";

type Props = {
  [key: string]: string;
};
import ContentSlotCode from \\"./content-slot-jsx.raw\\";

function SlotCode(props: Props) {
  return (
    <div>
      <ContentSlotCode slotTesting={<div>Hello</div>} />
    </div>
  );
}

export default SlotCode;
"
`;

exports[`React - stateType: variables > jsx > Typescript Test > SlotNamed 1`] = `
"import * as React from \\"react\\";

type Props = {
  [key: string]: string;
};

function SlotCode(props: Props) {
  return (
    <div>
      <>{props.myAwesomeSlot}</>
      <>{props.top}</>
      <>{props.left || \\"Default left\\"}</>
      <>{props.children || \\"Default Child\\"}</>
    </div>
  );
}

export default SlotCode;
"
`;

exports[`React - stateType: variables > jsx > Typescript Test > Stamped.io 1`] = `
"\\"use client\\";
import * as React from \\"react\\";
import { useEffect } from \\"react\\";

type SmileReviewsProps = {
  productId: string;
  apiKey: string;
};
import { kebabCase, snakeCase } from \\"lodash\\";

function SmileReviews(props: SmileReviewsProps) {
  const reviews = [];
  const name = \\"test\\";
  const showReviewPrompt = false;
  const kebabCaseValue = function kebabCaseValue() {
    return kebabCase(\\"testThat\\");
  };
  const snakeCaseValue = function snakeCaseValue() {
    return snakeCase(\\"testThis\\");
  };

  useEffect(() => {
    fetch(
      \`https://stamped.io/api/widget/reviews?storeUrl=builder-io.myshopify.com&apiKey=\${
        props.apiKey || \\"pubkey-8bbDq7W6w4sB3OWeM1HUy2s47702hM\\"
      }&productId=\${props.productId || \\"2410511106127\\"}\`
    )
      .then((res) => res.json())
      .then((data) => {
        reviews = data.data;
      });
  }, []);

  return (
    <>
      <div data-user={name}>
        <button onClick={(event) => (showReviewPrompt = true)}>
          Write a review
        </button>
        {showReviewPrompt || \\"asdf\\" ? (
          <>
            <input placeholder=\\"Email\\" />
            <input placeholder=\\"Title\\" className=\\"input\\" />
            <textarea
              placeholder=\\"How was your experience?\\"
              className=\\"textarea\\"
            />
            <button
              className=\\"button\\"
              onClick={(ev) => {
                ev.preventDefault();
                showReviewPrompt = false;
              }}
            >
              Submit
            </button>
          </>
        ) : null}
        {reviews?.map((review, index) => (
          <div className=\\"review\\" key={review.id}>
            <img className=\\"img\\" src={review.avatar} />
            <div className={showReviewPrompt ? \\"bg-primary\\" : \\"bg-secondary\\"}>
              <div>N: {index}</div>
              <div>{review.author}</div>
              <div>{review.reviewMessage}</div>
            </div>
          </div>
        ))}
      </div>
      <style jsx>{\`
        .input {
          display: block;
        }
        .textarea {
          display: block;
        }
        .button {
          display: block;
        }
        .review {
          margin: 10px;
          padding: 10px;
          background: white;
          display: flex;
          border-radius: 5px;
          box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
          -webkit-font-smoothing: antialiased;
        }
        .img {
          height: 30px;
          width: 30px;
          margin-right: 10px;
        }
      \`}</style>
    </>
  );
}

export default SmileReviews;
"
`;

exports[`React - stateType: variables > jsx > Typescript Test > StoreShadowVars 1`] = `
"import * as React from \\"react\\";

function MyComponent(props: any) {
  return <></>;
}

export default MyComponent;
"
`;

exports[`React - stateType: variables > jsx > Typescript Test > StoreWithState 1`] = `
"\\"use client\\";
import * as React from \\"react\\";

function MyComponent(props: any) {
  const foo = false;

  return <></>;
}

export default MyComponent;
"
`;

exports[`React - stateType: variables > jsx > Typescript Test > Submit 1`] = `
"import * as React from \\"react\\";

export interface ButtonProps {
  attributes?: any;
  text?: string;
}

function SubmitButton(props: ButtonProps) {
  return (
    <button type=\\"submit\\" {...props.attributes}>
      {props.text}
    </button>
  );
}

export default SubmitButton;
"
`;

exports[`React - stateType: variables > jsx > Typescript Test > Text 1`] = `
"\\"use client\\";
import * as React from \\"react\\";

export interface TextProps {
  attributes?: any;
  rtlMode: boolean;
  text?: string;
  content?: string;
  builderBlock?: any;
}

import { Builder } from \\"@builder.io/sdk\\";

function Text(props: TextProps) {
  const name = \\"Decadef20\\";

  return (
    <div
      contentEditable={allowEditingText || undefined}
      data-name={{
        test: name || \\"any name\\",
      }}
      dangerouslySetInnerHTML={{
        __html:
          props.text ||
          props.content ||
          name ||
          '<p class=\\"text-lg\\">my name</p>',
      }}
    />
  );
}

export default Text;
"
`;

exports[`React - stateType: variables > jsx > Typescript Test > Textarea 1`] = `
"import * as React from \\"react\\";

export interface TextareaProps {
  attributes?: any;
  name?: string;
  value?: string;
  defaultValue?: string;
  placeholder?: string;
}

function Textarea(props: TextareaProps) {
  return (
    <textarea
      {...props.attributes}
      placeholder={props.placeholder}
      name={props.name}
      value={props.value}
      defaultValue={props.defaultValue}
    />
  );
}

export default Textarea;
"
`;

exports[`React - stateType: variables > jsx > Typescript Test > UseValueAndFnFromStore 1`] = `
"\\"use client\\";
import * as React from \\"react\\";
import { useEffect } from \\"react\\";

type MyProps = {
  onChange?: (active: boolean) => void;
};
type MyStore = {
  _id?: string;
  _active?: boolean;
  _do?: (id?: string) => void;
};

function UseValueAndFnFromStore(props: MyProps) {
  const _id = \\"abc\\";
  const _active = false;
  const _do = function _do(id?: string) {
    _active = !!id;

    if (props.onChange) {
      props.onChange(_active);
    }
  };

  useEffect(() => {
    if (_do) {
      _do(_id);
    }
  });

  return <div>Test</div>;
}

export default UseValueAndFnFromStore;
"
`;

exports[`React - stateType: variables > jsx > Typescript Test > Video 1`] = `
"import * as React from \\"react\\";

export interface VideoProps {
  attributes?: any;
  video?: string;
  autoPlay?: boolean;
  controls?: boolean;
  muted?: boolean;
  loop?: boolean;
  playsInline?: boolean;
  aspectRatio?: number;
  width?: number;
  height?: number;
  fit?: \\"contain\\" | \\"cover\\" | \\"fill\\";
  position?:
    | \\"center\\"
    | \\"top\\"
    | \\"left\\"
    | \\"right\\"
    | \\"bottom\\"
    | \\"top left\\"
    | \\"top right\\"
    | \\"bottom left\\"
    | \\"bottom right\\";
  posterImage?: string;
  lazyLoad?: boolean;
}

function Video(props: VideoProps) {
  return (
    <video
      preload=\\"none\\"
      {...props.attributes}
      style={{
        width: \\"100%\\",
        height: \\"100%\\",
        ...props.attributes?.style,
        objectFit: props.fit,
        objectPosition: props.position,
        // Hack to get object fit to work as expected and
        // not have the video overflow
        borderRadius: 1,
      }}
      key={props.video || \\"no-src\\"}
      poster={props.posterImage}
      autoplay={props.autoPlay}
      muted={props.muted}
      controls={props.controls}
      loop={props.loop}
    />
  );
}

export default Video;
"
`;

exports[`React - stateType: variables > jsx > Typescript Test > arrowFunctionInUseStore 1`] = `
"\\"use client\\";
import * as React from \\"react\\";

function MyComponent(props: any) {
  const name = \\"steve\\";
  const setName = function setName(value) {
    name = value;
  };
  const updateNameWithArrowFn = function updateNameWithArrowFn(value) {
    name = value;
  };

  return <div>Hello {name}</div>;
}

export default MyComponent;
"
`;

exports[`React - stateType: variables > jsx > Typescript Test > basicForNoTagReference 1`] = `
"Identifier expected. (39:17)
  37 | return (
  38 |
> 39 |   <TagNameGetter()>
     |                 ^
  40 |   Hello <tag>{name}</tag>{props.actions?.map((action) => (
  41 |   <TagName><action.icon  /><span>{action.text}</span></TagName>
  42 | ))}</TagNameGetter()>"
`;

exports[`React - stateType: variables > jsx > Typescript Test > basicForwardRef 1`] = `
"\\"use client\\";
import * as React from \\"react\\";
import { forwardRef } from \\"react\\";

export interface Props {
  showInput: boolean;
  inputRef: HTMLInputElement;
}

const MyBasicForwardRefComponent = forwardRef<Props[\\"inputRef\\"]>(
  function MyBasicForwardRefComponent(props: Props, inputRef) {
    const name = \\"PatrickJS\\";

    return (
      <>
        <div>
          <input
            className=\\"input\\"
            ref={inputRef}
            value={name}
            onChange={(event) => (name = event.target.value)}
          />
        </div>
        <style jsx>{\`
          .input {
            color: red;
          }
        \`}</style>
      </>
    );
  }
);

export default MyBasicForwardRefComponent;
"
`;

exports[`React - stateType: variables > jsx > Typescript Test > basicForwardRefMetadata 1`] = `
"\\"use client\\";
import * as React from \\"react\\";
import { forwardRef } from \\"react\\";

export interface Props {
  showInput: boolean;
  inputRef: HTMLInputElement;
}

const MyBasicForwardRefComponent = forwardRef<Props[\\"inputRef\\"]>(
  function MyBasicForwardRefComponent(props: Props, inputRef) {
    const name = \\"PatrickJS\\";

    return (
      <>
        <div>
          <input
            className=\\"input\\"
            ref={inputRef}
            value={name}
            onChange={(event) => (name = event.target.value)}
          />
        </div>
        <style jsx>{\`
          .input {
            color: red;
          }
        \`}</style>
      </>
    );
  }
);

export default MyBasicForwardRefComponent;
"
`;

exports[`React - stateType: variables > jsx > Typescript Test > basicOnUpdateReturn 1`] = `
"\\"use client\\";
import * as React from \\"react\\";
import { useEffect } from \\"react\\";

function MyBasicOnUpdateReturnComponent(props: any) {
  const name = \\"PatrickJS\\";

  useEffect(() => {
    const controller = new AbortController();
    const signal = controller.signal;
    fetch(\\"https://patrickjs.com/api/resource.json\\", {
      signal,
    })
      .then((response) => response.json())
      .then((data) => {
        name = data.name;
      });
    return () => {
      if (!signal.aborted) {
        controller.abort();
      }
    };
  }, [name]);

  return <div>Hello! {name}</div>;
}

export default MyBasicOnUpdateReturnComponent;
"
`;

exports[`React - stateType: variables > jsx > Typescript Test > class + ClassName + css 1`] = `
"import * as React from \\"react\\";
import MyComp from \\"./my-component\\";

function MyBasicComponent(props: any) {
  return (
    <>
      <div>
        <MyComp className=\\"test\\" className=\\"test2\\">
          Hello! I can run in React, Vue, Solid, or Liquid!
        </MyComp>
        <div className=\\"test2 test div\\">
          Hello! I can run in React, Vue, Solid, or Liquid!
        </div>
      </div>
      <style jsx>{\`
        .div {
          padding: 10px;
        }
      \`}</style>
    </>
  );
}

export default MyBasicComponent;
"
`;

exports[`React - stateType: variables > jsx > Typescript Test > class + css 1`] = `
"import * as React from \\"react\\";

function MyBasicComponent(props: any) {
  return (
    <>
      <div className=\\"test div\\">
        Hello! I can run in React, Vue, Solid, or Liquid!
      </div>
      <style jsx>{\`
        .div {
          padding: 10px;
        }
      \`}</style>
    </>
  );
}

export default MyBasicComponent;
"
`;

exports[`React - stateType: variables > jsx > Typescript Test > className + css 1`] = `
"import * as React from \\"react\\";

function MyBasicComponent(props: any) {
  return (
    <>
      <div className=\\"test div\\">
        Hello! I can run in React, Vue, Solid, or Liquid!
      </div>
      <style jsx>{\`
        .div {
          padding: 10px;
        }
      \`}</style>
    </>
  );
}

export default MyBasicComponent;
"
`;

exports[`React - stateType: variables > jsx > Typescript Test > className 1`] = `
"\\"use client\\";
import * as React from \\"react\\";

type Props = {
  [key: string]: string | JSX.Element;
  slotTesting: JSX.Element;
};
import type { JSX } from \\"../../../../jsx-runtime\\";

function ClassNameCode(props: Props) {
  const bindings = \\"a binding\\";

  return (
    <div>
      <div className=\\"no binding\\">Without Binding</div>
      <div className={bindings}>With binding</div>
    </div>
  );
}

export default ClassNameCode;
"
`;

exports[`React - stateType: variables > jsx > Typescript Test > classState 1`] = `
"\\"use client\\";
import * as React from \\"react\\";

function MyBasicComponent(props: any) {
  const classState = \\"testClassName\\";
  const styleState = {
    color: \\"red\\",
  };

  return (
    <>
      <div className={classState + \\" div\\"} style={styleState}>
        Hello! I can run in React, Vue, Solid, or Liquid!
      </div>
      <style jsx>{\`
        .div {
          padding: 10px;
        }
      \`}</style>
    </>
  );
}

export default MyBasicComponent;
"
`;

exports[`React - stateType: variables > jsx > Typescript Test > componentWithContext 1`] = `
"\\"use client\\";
import * as React from \\"react\\";
import { useContext } from \\"react\\";

export interface ComponentWithContextProps {
  content: string;
}

import Context1 from \\"@dummy/1\\";
import Context2 from \\"@dummy/2\\";

function ComponentWithContext(props: ComponentWithContextProps) {
  const foo = useContext(Context1);

  return (
    <Context2.Provider
      value={{
        bar: \\"baz\\",
      }}
    >
      <Context1.Provider
        value={{
          foo: \\"bar\\",

          content() {
            return props.content;
          },
        }}
      >
        <>{foo.value}</>
      </Context1.Provider>
    </Context2.Provider>
  );
}

export default ComponentWithContext;
"
`;

exports[`React - stateType: variables > jsx > Typescript Test > componentWithContextMultiRoot 1`] = `
"\\"use client\\";
import * as React from \\"react\\";
import { useContext } from \\"react\\";

export interface ComponentWithContextProps {
  content: string;
}

import Context1 from \\"@dummy/1\\";
import Context2 from \\"@dummy/2\\";

function ComponentWithContext(props: ComponentWithContextProps) {
  const foo = useContext(Context1);

  return (
    <Context2.Provider
      value={{
        bar: \\"baz\\",
      }}
    >
      <Context1.Provider
        value={{
          foo: \\"bar\\",

          content() {
            return props.content;
          },
        }}
      >
        <>
          <>{foo.value}</>
          <div>other</div>
        </>
      </Context1.Provider>
    </Context2.Provider>
  );
}

export default ComponentWithContext;
"
`;

exports[`React - stateType: variables > jsx > Typescript Test > contentState 1`] = `
"\\"use client\\";
import * as React from \\"react\\";
import { useContext } from \\"react\\";
import BuilderContext from \\"@dummy/context.js\\";

function RenderContent(props: any) {
  return (
    <BuilderContext.Provider
      value={{
        content: props.content,
        registeredComponents: props.customComponents,
      }}
    >
      <div>setting context</div>
    </BuilderContext.Provider>
  );
}

export default RenderContent;
"
`;

exports[`React - stateType: variables > jsx > Typescript Test > defaultProps 1`] = `
"\\"use client\\";
import * as React from \\"react\\";

export interface ButtonProps {
  attributes?: any;
  text?: string;
  buttonText?: string; // no default value

  link?: string;
  openLinkInNewTab?: boolean;
  onClick?: () => void;
}

function Button(props: ButtonProps) {
  return (
    <div>
      {props.link ? (
        <a
          {...props.attributes}
          href={props.link}
          target={props.openLinkInNewTab ? \\"_blank\\" : undefined}
        >
          {props.text}
        </a>
      ) : null}
      {!props.link ? (
        <button
          type=\\"button\\"
          {...props.attributes}
          onClick={(event) => props.onClick()}
        >
          {props.buttonText}
        </button>
      ) : null}
    </div>
  );
}

Button.defaultProps = {
  text: \\"default text\\",
  link: \\"https://builder.io/\\",
  openLinkInNewTab: false,
  onClick: () => {
    console.log(\\"hi\\");
  },
};

export default Button;
"
`;

exports[`React - stateType: variables > jsx > Typescript Test > defaultPropsOutsideComponent 1`] = `
"\\"use client\\";
import * as React from \\"react\\";

export interface ButtonProps {
  attributes?: any;
  text?: string;
  link?: string;
  openLinkInNewTab?: boolean;
  onClick: () => void;
}

function Button(props: ButtonProps) {
  return (
    <div>
      {props.link ? (
        <a
          {...props.attributes}
          href={props.link}
          target={props.openLinkInNewTab ? \\"_blank\\" : undefined}
        >
          {props.text}
        </a>
      ) : null}
      {!props.link ? (
        <button
          type=\\"button\\"
          {...props.attributes}
          onClick={(event) => props.onClick(event)}
        >
          {props.text}
        </button>
      ) : null}
    </div>
  );
}

Button.defaultProps = {
  text: \\"default text\\",
  link: \\"https://builder.io/\\",
  openLinkInNewTab: false,
  onClick: () => {},
};

export default Button;
"
`;

exports[`React - stateType: variables > jsx > Typescript Test > defaultValsWithTypes 1`] = `
"import * as React from \\"react\\";

type Props = {
  name: string;
};

const DEFAULT_VALUES: Props = {
  name: \\"Sami\\",
};

function ComponentWithTypes(props: Props) {
  return <div> Hello {props.name || DEFAULT_VALUES.name}</div>;
}

export default ComponentWithTypes;
"
`;

exports[`React - stateType: variables > jsx > Typescript Test > eventInputAndChange 1`] = `
"\\"use client\\";
import * as React from \\"react\\";

function EventInputAndChange(props: any) {
  const name = \\"Steve\\";

  return (
    <>
      <div>
        <input
          className=\\"input\\"
          value={name}
          onInput={(event) => (name = event.target.value)}
          onChange={(event) => (name = event.target.value)}
        />
        Hello! I can run in React, Vue, Solid, or Liquid!
      </div>
      <style jsx>{\`
        .input {
          color: red;
        }
      \`}</style>
    </>
  );
}

export default EventInputAndChange;
"
`;

exports[`React - stateType: variables > jsx > Typescript Test > expressionState 1`] = `
"\\"use client\\";
import * as React from \\"react\\";

function MyComponent(props: any) {
  const refToUse = !(props.componentRef instanceof Function)
    ? props.componentRef
    : null;

  return <div>{refToUse}</div>;
}

export default MyComponent;
"
`;

exports[`React - stateType: variables > jsx > Typescript Test > getterState 1`] = `
"import * as React from \\"react\\";

export interface ButtonProps {
  foo: string;
}

function Button(props: ButtonProps) {
  const foo2 = function foo2() {
    return props.foo + \\"foo\\";
  };
  const bar = function bar() {
    return \\"bar\\";
  };
  const baz = function baz(i: number) {
    return i + foo2().length;
  };

  return (
    <div>
      <p>{foo2()}</p>
      <p>{bar()}</p>
      <p>{baz(1)}</p>
    </div>
  );
}

export default Button;
"
`;

exports[`React - stateType: variables > jsx > Typescript Test > import types 1`] = `
"import * as React from \\"react\\";

type RenderContentProps = {
  options?: GetContentOptions;
  content: BuilderContent;
  renderContentProps: RenderBlockProps;
};
import { BuilderContent, GetContentOptions } from \\"@builder.io/sdk\\";
import RenderBlock, { RenderBlockProps } from \\"./builder-render-block.raw\\";

function RenderContent(props: RenderContentProps) {
  const getRenderContentProps = function getRenderContentProps(block, index) {
    return {
      block: block,
      index: index,
    };
  };

  return (
    <RenderBlock
      {...getRenderContentProps(props.renderContentProps.block, 0)}
    />
  );
}

export default RenderContent;
"
`;

exports[`React - stateType: variables > jsx > Typescript Test > multipleOnUpdate 1`] = `
"\\"use client\\";
import * as React from \\"react\\";
import { useEffect } from \\"react\\";

function MultipleOnUpdate(props: any) {
  useEffect(() => {
    console.log(\\"Runs on every update/rerender\\");
  });
  useEffect(() => {
    console.log(\\"Runs on every update/rerender as well\\");
  });

  return <div />;
}

export default MultipleOnUpdate;
"
`;

exports[`React - stateType: variables > jsx > Typescript Test > multipleOnUpdateWithDeps 1`] = `
"\\"use client\\";
import * as React from \\"react\\";
import { useEffect } from \\"react\\";

function MultipleOnUpdateWithDeps(props: any) {
  const a = \\"a\\";
  const b = \\"b\\";
  const c = \\"c\\";
  const d = \\"d\\";

  useEffect(() => {
    console.log(\\"Runs when a or b changes\\", a, b);

    if (a === \\"a\\") {
      a = \\"b\\";
    }
  }, [a, b]);
  useEffect(() => {
    console.log(\\"Runs when c or d changes\\", c, d);

    if (a === \\"a\\") {
      a = \\"b\\";
    }
  }, [c, d]);

  return <div />;
}

export default MultipleOnUpdateWithDeps;
"
`;

exports[`React - stateType: variables > jsx > Typescript Test > multipleSpreads 1`] = `
"\\"use client\\";
import * as React from \\"react\\";

function MyBasicComponent(props: any) {
  const attrs = {
    hello: \\"world\\",
  };

  return <input {...attrs} {...props} />;
}

export default MyBasicComponent;
"
`;

exports[`React - stateType: variables > jsx > Typescript Test > nestedShow 1`] = `
"import * as React from \\"react\\";

interface Props {
  conditionA: boolean;
  conditionB: boolean;
}

function NestedShow(props: Props) {
  return (
    <>
      {props.conditionA ? (
        <>
          {!props.conditionB ? (
            <div>if condition A and condition B</div>
          ) : (
            <div>else-condition-B</div>
          )}
        </>
      ) : (
        <div>else-condition-A</div>
      )}
    </>
  );
}

export default NestedShow;
"
`;

exports[`React - stateType: variables > jsx > Typescript Test > nestedStyles 1`] = `
"import * as React from \\"react\\";

function NestedStyles(props: any) {
  return (
    <>
      <div className=\\"div\\">Hello world</div>
      <style jsx>{\`
        .div {
          display: flex;
          --bar: red;
          color: var(--bar);
        }
        @media (max-width: env(--mobile)) {
          .div {
            display: block;
          }
        }
        .div:hover {
          display: flex;
        }
        .div:active {
          display: inline;
        }
        .div .nested-selector {
          display: grid;
        }
        .div .nested-selector:hover {
          display: block;
        }
        .div.nested-selector:active {
          display: inline-block;
        }
      \`}</style>
    </>
  );
}

export default NestedStyles;
"
`;

exports[`React - stateType: variables > jsx > Typescript Test > onEvent 1`] = `
"\\"use client\\";
import * as React from \\"react\\";
import { useRef, useEffect } from \\"react\\";

function Embed(props: any) {
  const elem = useRef<HTMLDivElement>(null);
  const foo = function foo(event) {
    console.log(\\"test2\\");
  };
  const elem_onInitEditingBldr = function elem_onInitEditingBldr(event) {
    console.log(\\"test\\");
    foo(event);
  };

  useEffect(() => {
    elem.current?.addEventListener(\\"initEditingBldr\\", elem_onInitEditingBldr);
    return () =>
      elem.current?.removeEventListener(
        \\"initEditingBldr\\",
        elem_onInitEditingBldr
      );
  }, []);

  useEffect(() => {
    elem.current.dispatchEvent(new CustomEvent(\\"initEditingBldr\\"));
  }, []);

  return (
    <div className=\\"builder-embed\\" ref={elem}>
      <div>Test</div>
    </div>
  );
}

export default Embed;
"
`;

exports[`React - stateType: variables > jsx > Typescript Test > onInit & onMount 1`] = `
"\\"use client\\";
import * as React from \\"react\\";
import { useRef, useEffect } from \\"react\\";

function OnInit(props: any) {
  const hasInitialized = useRef(false);
  if (!hasInitialized.current) {
    console.log(\\"onInit\\");
    hasInitialized.current = true;
  }

  useEffect(() => {
    console.log(\\"onMount\\");
  }, []);

  return <div />;
}

export default OnInit;
"
`;

exports[`React - stateType: variables > jsx > Typescript Test > onInit 1`] = `
"\\"use client\\";
import * as React from \\"react\\";
import { useRef } from \\"react\\";

type Props = {
  name: string;
};

export const defaultValues = {
  name: \\"PatrickJS\\",
};

function OnInit(props: Props) {
  const name = \\"\\";

  const hasInitialized = useRef(false);
  if (!hasInitialized.current) {
    name = defaultValues.name || props.name;
    console.log(\\"set defaults with props\\");
    hasInitialized.current = true;
  }

  return <div>Default name defined by parent {name}</div>;
}

export default OnInit;
"
`;

exports[`React - stateType: variables > jsx > Typescript Test > onInitPlain 1`] = `
"import * as React from \\"react\\";
import { useRef } from \\"react\\";

function OnInitPlain(props: any) {
  const hasInitialized = useRef(false);
  if (!hasInitialized.current) {
    console.log(\\"onInit\\");
    hasInitialized.current = true;
  }

  return <div />;
}

export default OnInitPlain;
"
`;

exports[`React - stateType: variables > jsx > Typescript Test > onMount 1`] = `
"\\"use client\\";
import * as React from \\"react\\";
import { useEffect } from \\"react\\";

function Comp(props: any) {
  useEffect(() => {
    console.log(\\"Runs on mount\\");
  }, []);

  useEffect(() => {
    return () => {
      console.log(\\"Runs on unMount\\");
    };
  }, []);

  return <div />;
}

export default Comp;
"
`;

exports[`React - stateType: variables > jsx > Typescript Test > onMountMultiple 1`] = `
"\\"use client\\";
import * as React from \\"react\\";
import { useEffect } from \\"react\\";

function Comp(props: any) {
  useEffect(() => {
    console.log(\\"Runs on mount\\");
  }, []);
  useEffect(() => {
    console.log(\\"Another one runs on Mount\\");
  }, []);
  useEffect(() => {
    console.log(\\"SSR runs on Mount\\");
  }, []);

  return <div />;
}

export default Comp;
"
`;

exports[`React - stateType: variables > jsx > Typescript Test > onUpdate 1`] = `
"\\"use client\\";
import * as React from \\"react\\";
import { useEffect } from \\"react\\";

function OnUpdate(props: any) {
  useEffect(() => {
    console.log(\\"Runs on every update/rerender\\");
  });

  return <div />;
}

export default OnUpdate;
"
`;

exports[`React - stateType: variables > jsx > Typescript Test > onUpdateWithDeps 1`] = `
"\\"use client\\";
import * as React from \\"react\\";
import { useEffect } from \\"react\\";

type Props = {
  size: string;
};

function OnUpdateWithDeps(props: Props) {
  const a = \\"a\\";
  const b = \\"b\\";

  useEffect(() => {
    console.log(\\"Runs when a, b or size changes\\", a, b, props.size);
  }, [a, b, props.size]);

  return <div />;
}

export default OnUpdateWithDeps;
"
`;

exports[`React - stateType: variables > jsx > Typescript Test > preserveExportOrLocalStatement 1`] = `
"import * as React from \\"react\\";

type Types = {
  s: any[];
};
interface IPost {
  len: number;
}
export interface MyBasicComponentProps {
  id: string;
}

const b = 3;
const foo = () => {};
export const a = 3;
export const bar = () => {};
export function run<T>(value: T) {}

function MyBasicComponent(props: MyBasicComponentProps) {
  return <div />;
}

export default MyBasicComponent;
"
`;

exports[`React - stateType: variables > jsx > Typescript Test > preserveTyping 1`] = `
"import * as React from \\"react\\";

export type A = \\"test\\";
export interface C {
  n: \\"test\\";
}
type B = \\"test2\\";
interface D {
  n: \\"test\\";
}
export interface MyBasicComponentProps {
  name: string;
  age?: number;
}

function MyBasicComponent(props: MyBasicComponentProps) {
  return (
    <div>Hello! I can run in React, Vue, Solid, or Liquid! {props.name}</div>
  );
}

export default MyBasicComponent;
"
`;

exports[`React - stateType: variables > jsx > Typescript Test > propsDestructure 1`] = `
"\\"use client\\";
import * as React from \\"react\\";

type Props = {
  children: any;
  type: string;
};

function MyBasicComponent(props: Props) {
  const name = \\"Decadef20\\";

  return (
    <div>
      {props.children}
      {props.type}
      Hello! I can run in React, Vue, Solid, or Liquid!
    </div>
  );
}

export default MyBasicComponent;
"
`;

exports[`React - stateType: variables > jsx > Typescript Test > propsInterface 1`] = `
"import * as React from \\"react\\";

interface Person {
  name: string;
  age?: number;
}

function MyBasicComponent(props: Person | never) {
  return (
    <div>Hello! I can run in React, Vue, Solid, or Liquid! {props.name}</div>
  );
}

export default MyBasicComponent;
"
`;

exports[`React - stateType: variables > jsx > Typescript Test > propsType 1`] = `
"import * as React from \\"react\\";

type Person = {
  name: string;
  age?: number;
};

function MyBasicComponent(props: Person) {
  return (
    <div>Hello! I can run in React, Vue, Solid, or Liquid! {props.name}</div>
  );
}

export default MyBasicComponent;
"
`;

exports[`React - stateType: variables > jsx > Typescript Test > referencingFunInsideHook 1`] = `
"'(' expected. (15:30)
  13 |
  14 |   function OnUpdate(props:any) {
> 15 |   const foo = foo = function function foo(params) {}
     |                              ^
  16 | const bar = bar = function function bar() {}
  17 | const zoo = zoo = function function zoo() {
  18 | const params = {"
`;

exports[`React - stateType: variables > jsx > Typescript Test > renderBlock 1`] = `
"Identifier expected. (222:8)
  220 |    {shouldWrap() ? (
  221 |    <>{isEmptyHtmlElement(tag()) ? (
> 222 |    <tag()  {...(attributes())}  {...(actions())}  />
      |        ^
  223 |  ) : null}
  224 | {!isEmptyHtmlElement(tag()) && repeatItemData() ? (
  225 |    <>{repeatItemData()?.map((data, index) => ("
`;

exports[`React - stateType: variables > jsx > Typescript Test > renderContentExample 1`] = `
"\\"use client\\";
import * as React from \\"react\\";
import { useContext, useEffect } from \\"react\\";

type Props = {
  customComponents: string[];
  content: {
    blocks: any[];
    id: string;
  };
};
import BuilderContext from \\"@dummy/context.js\\";
import {
  dispatchNewContentToVisualEditor,
  sendComponentsToVisualEditor,
  trackClick,
} from \\"@dummy/injection-js\\";
import RenderBlocks from \\"@dummy/RenderBlocks\\";

function RenderContent(props: Props) {
  useEffect(() => {
    sendComponentsToVisualEditor(props.customComponents);
  }, []);

  useEffect(() => {
    dispatchNewContentToVisualEditor(props.content);
  }, [props.content]);

  return (
    <>
      <BuilderContext.Provider
        value={{
          get content() {
            return 3;
          },

          get registeredComponents() {
            return 4;
          },
        }}
      >
        <div className=\\"div\\" onClick={(event) => trackClick(props.content.id)}>
          <RenderBlocks blocks={props.content.blocks} />
        </div>
      </BuilderContext.Provider>
      <style jsx>{\`
        .div {
          display: flex;
          flex-direction: columns;
        }
      \`}</style>
    </>
  );
}

export default RenderContent;
"
`;

exports[`React - stateType: variables > jsx > Typescript Test > rootFragmentMultiNode 1`] = `
"import * as React from \\"react\\";

export interface ButtonProps {
  attributes?: any;
  text?: string;
  link?: string;
  openLinkInNewTab?: boolean;
}

function Button(props: ButtonProps) {
  return (
    <>
      {props.link ? (
        <a
          {...props.attributes}
          href={props.link}
          target={props.openLinkInNewTab ? \\"_blank\\" : undefined}
        >
          {props.text}
        </a>
      ) : null}
      {!props.link ? (
        <button type=\\"button\\" {...props.attributes}>
          {props.text}
        </button>
      ) : null}
    </>
  );
}

export default Button;
"
`;

exports[`React - stateType: variables > jsx > Typescript Test > rootShow 1`] = `
"import * as React from \\"react\\";

export interface RenderStylesProps {
  foo: string;
}

function RenderStyles(props: RenderStylesProps) {
  return (
    <>
      {props.foo === \\"bar\\" ? (
        <>
          <div>Bar</div>
        </>
      ) : (
        <div>Foo</div>
      )}
    </>
  );
}

export default RenderStyles;
"
`;

exports[`React - stateType: variables > jsx > Typescript Test > self-referencing component 1`] = `
"import * as React from \\"react\\";

function MyComponent(props: any) {
  return (
    <div>
      {props.name}
      {props.name === \\"Batman\\" ? <MyComponent name=\\"Bruce Wayne\\" /> : null}
    </div>
  );
}

export default MyComponent;
"
`;

exports[`React - stateType: variables > jsx > Typescript Test > self-referencing component with children 1`] = `
"import * as React from \\"react\\";

function MyComponent(props: any) {
  return (
    <div>
      {props.name}
      {props.children}
      {props.name === \\"Batman\\" ? (
        <MyComponent name=\\"Bruce\\">
          <div>Wayne</div>
        </MyComponent>
      ) : null}
    </div>
  );
}

export default MyComponent;
"
`;

exports[`React - stateType: variables > jsx > Typescript Test > setState 1`] = `
"\\"use client\\";
import * as React from \\"react\\";

function SetState(props: any) {
  const n = [\\"123\\"];
  const someFn = function someFn() {
    n[0] = \\"123\\";
  };

  return (
    <div>
      <button onClick={(event) => someFn()}>Click me</button>
    </div>
  );
}

export default SetState;
"
`;

exports[`React - stateType: variables > jsx > Typescript Test > showExpressions 1`] = `
"import * as React from \\"react\\";

interface Props {
  conditionA: boolean;
  conditionB: boolean;
}

function ShowWithOtherValues(props: Props) {
  return (
    <div>
      {props.conditionA ? <>Content0</> : <>ContentA</>}
      {props.conditionA ? <>ContentA</> : null}
      {props.conditionA ? <></> : <>ContentA</>}
      {props.conditionA ? <>ContentB</> : <>{undefined}</>}
      {props.conditionA ? <>{undefined}</> : <>ContentB</>}
      {props.conditionA ? <>ContentC</> : null}
      {props.conditionA ? <></> : <>ContentC</>}
      {props.conditionA ? <>ContentD</> : null}
      {props.conditionA ? <></> : <>ContentD</>}
      {props.conditionA ? <>ContentE</> : <>hello</>}
      {props.conditionA ? <>hello</> : <>ContentE</>}
      {props.conditionA ? <>ContentF</> : <>123</>}
      {props.conditionA ? <>123</> : <>ContentF</>}
      {props.conditionA === \\"Default\\" ? (
        <>4mb</>
      ) : props.conditionB === \\"Complete\\" ? (
        <>20mb</>
      ) : (
        <>9mb</>
      )}
      {props.conditionA === \\"Default\\" ? (
        <>{props.conditionB === \\"Complete\\" ? <>20mb</> : <>9mb</>}</>
      ) : (
        <>4mb</>
      )}
      {props.conditionA === \\"Default\\" ? (
        <>{props.conditionB === \\"Complete\\" ? <div>complete</div> : <>9mb</>}</>
      ) : props.conditionC === \\"Complete\\" ? (
        <>dff</>
      ) : (
        <div>complete else</div>
      )}
    </div>
  );
}

export default ShowWithOtherValues;
"
`;

exports[`React - stateType: variables > jsx > Typescript Test > showWithFor 1`] = `
"import * as React from \\"react\\";

interface Props {
  conditionA: boolean;
  items: string[];
}

function NestedShow(props: Props) {
  return (
    <>
      {props.conditionA ? (
        <>
          {props.items?.map((item, idx) => (
            <div key={idx}>{item}</div>
          ))}
        </>
      ) : (
        <div>else-condition-A</div>
      )}
    </>
  );
}

export default NestedShow;
"
`;

exports[`React - stateType: variables > jsx > Typescript Test > showWithOtherValues 1`] = `
"import * as React from \\"react\\";

interface Props {
  conditionA: boolean;
}

function ShowWithOtherValues(props: Props) {
  return (
    <div>
      {props.conditionA ? <>ContentA</> : null}
      {props.conditionA ? <>ContentB</> : <>{undefined}</>}
      {props.conditionA ? <>ContentC</> : null}
      {props.conditionA ? <>ContentD</> : null}
      {props.conditionA ? <>ContentE</> : <>hello</>}
      {props.conditionA ? <>ContentF</> : <>123</>}
    </div>
  );
}

export default ShowWithOtherValues;
"
`;

exports[`React - stateType: variables > jsx > Typescript Test > showWithRootText 1`] = `
"import * as React from \\"react\\";

interface Props {
  conditionA: boolean;
}

function ShowRootText(props: Props) {
  return <>{props.conditionA ? <>ContentA</> : <div>else-condition-A</div>}</>;
}

export default ShowRootText;
"
`;

exports[`React - stateType: variables > jsx > Typescript Test > signalsOnUpdate 1`] = `
"\\"use client\\";
import * as React from \\"react\\";
import { useEffect } from \\"react\\";

type Props = {
  id: string;
  foo: {
    bar: {
      baz: number;
    };
  };
};

function MyBasicComponent(props: Props) {
  useEffect(() => {
    console.log(\\"props.id changed\\", props.id);
    console.log(\\"props.foo.value.bar.baz changed\\", props.foo.bar.baz);
  }, [props.id, props.foo.bar.baz]);

  return (
    <>
      <div className=\\"test div\\">
        {props.id}
        {props.foo.bar.baz}
      </div>
      <style jsx>{\`
        .div {
          padding: 10px;
        }
      \`}</style>
    </>
  );
}

export default MyBasicComponent;
"
`;

exports[`React - stateType: variables > jsx > Typescript Test > spreadAttrs 1`] = `
"import * as React from \\"react\\";

function MyBasicComponent(props: any) {
  return <input {...attrs} />;
}

export default MyBasicComponent;
"
`;

exports[`React - stateType: variables > jsx > Typescript Test > spreadNestedProps 1`] = `
"import * as React from \\"react\\";

function MyBasicComponent(props: any) {
  return <input {...props.nested} />;
}

export default MyBasicComponent;
"
`;

exports[`React - stateType: variables > jsx > Typescript Test > spreadProps 1`] = `
"import * as React from \\"react\\";

function MyBasicComponent(props: any) {
  return <input {...props} />;
}

export default MyBasicComponent;
"
`;

exports[`React - stateType: variables > jsx > Typescript Test > store-async-function 1`] = `
"import * as React from \\"react\\";

function StringLiteralStore(props: any) {
  const arrowFunction = async function arrowFunction() {
    return Promise.resolve();
  };
  const namedFunction = async function namedFunction() {
    return Promise.resolve();
  };
  const fetchUsers = async function fetchUsers() {
    return Promise.resolve();
  };

  return <div />;
}

export default StringLiteralStore;
"
`;

exports[`React - stateType: variables > jsx > Typescript Test > string-literal-store 1`] = `
"\\"use client\\";
import * as React from \\"react\\";

function StringLiteralStore(props: any) {
  const foo = 123;

  return <div>{foo}</div>;
}

export default StringLiteralStore;
"
`;

exports[`React - stateType: variables > jsx > Typescript Test > styleClassAndCss 1`] = `
"import * as React from \\"react\\";

function MyComponent(props: any) {
  return (
    <>
      <div
        className=\\"builder-column div\\"
        style={{
          width: \\"100%\\",
        }}
      />
      <style jsx>{\`
        .div {
          display: flex;
          flex-direction: column;
          align-items: stretch;
        }
      \`}</style>
    </>
  );
}

export default MyComponent;
"
`;

exports[`React - stateType: variables > jsx > Typescript Test > stylePropClassAndCss 1`] = `
"import * as React from \\"react\\";

function StylePropClassAndCss(props: any) {
  return (
    <>
      <div
        style={props.attributes.style}
        className={props.attributes.class + \\" div\\"}
      />
      <style jsx>{\`
        .div {
          display: flex;
          flex-direction: column;
          align-items: stretch;
        }
      \`}</style>
    </>
  );
}

export default StylePropClassAndCss;
"
`;

exports[`React - stateType: variables > jsx > Typescript Test > subComponent 1`] = `
"import * as React from \\"react\\";
import Foo from \\"./foo-sub-component\\";

function SubComponent(props: any) {
  return <Foo />;
}

export default SubComponent;
"
`;

exports[`React - stateType: variables > jsx > Typescript Test > svgComponent 1`] = `
"import * as React from \\"react\\";

function SvgComponent(props: any) {
  return (
    <svg
      fill=\\"none\\"
      role=\\"img\\"
      viewBox={\\"0 0 \\" + 42 + \\" \\" + 42}
      width={42}
      height={42}
    >
      <defs>
        <filter id=\\"prefix__filter0_f\\" filterUnits=\\"userSpaceOnUse\\">
          <feFlood result=\\"BackgroundImageFix\\" />
          <feBlend in=\\"SourceGraphic\\" in2=\\"BackgroundImageFix\\" result=\\"shape\\" />
          <feGaussianBlur result=\\"effect1_foregroundBlur\\" stdDeviation={7} />
        </filter>
      </defs>
    </svg>
  );
}

export default SvgComponent;
"
`;

exports[`React - stateType: variables > jsx > Typescript Test > typeDependency 1`] = `
"import * as React from \\"react\\";

export type TypeDependencyProps = {
  foo: Foo;
  foo2: Foo2;
};
import type { Foo } from \\"./foo-type\\";
import type { Foo as Foo2 } from \\"./type-export\\";

function TypeDependency(props: TypeDependencyProps) {
  return <div>{props.foo}</div>;
}

export default TypeDependency;
"
`;

exports[`React - stateType: variables > jsx > Typescript Test > typeExternalStore 1`] = `
"\\"use client\\";
import * as React from \\"react\\";
import { FooStore } from \\"./foo-store\\";

function TypeExternalStore(props: any) {
  const _name = \\"test\\";

  return <div>Hello {_name}! </div>;
}

export default TypeExternalStore;
"
`;

exports[`React - stateType: variables > jsx > Typescript Test > typeGetterStore 1`] = `
"\\"use client\\";
import * as React from \\"react\\";

type GetterStore = {
  getName: () => string;
  name: string;
  get test(): string;
};

function TypeGetterStore(props: any) {
  const name = \\"test\\";
  const getName = function getName() {
    if (name === \\"a\\") {
      return \\"b\\";
    }

    return name;
  };
  const test = function test() {
    return \\"test\\";
  };

  return <div>Hello {name}! </div>;
}

export default TypeGetterStore;
"
`;

exports[`React - stateType: variables > jsx > Typescript Test > use-style 1`] = `
"import * as React from \\"react\\";

function MyComponent(props: any) {
  return (
    <>
      <button type=\\"button\\">Button</button>
      <style jsx>{\`
        button {
          background: blue;
          color: white;
          font-size: 12px;
          outline: 1px solid black;
        }
      \`}</style>
    </>
  );
}

export default MyComponent;
"
`;

exports[`React - stateType: variables > jsx > Typescript Test > use-style-and-css 1`] = `
"import * as React from \\"react\\";

function MyComponent(props: any) {
  return (
    <>
      <button type=\\"button\\" className=\\"button\\">
        Button
      </button>
      <style jsx>{\`
        button {
          font-size: 12px;
          outline: 1px solid black;
        }

        .button {
          background: blue;
          color: white;
        }
      \`}</style>
    </>
  );
}

export default MyComponent;
"
`;

exports[`React - stateType: variables > jsx > Typescript Test > use-style-outside-component 1`] = `
"import * as React from \\"react\\";

function MyComponent(props: any) {
  return (
    <>
      <button type=\\"button\\">Button</button>
      <style jsx>{\`
        button {
          background: blue;
          color: white;
          font-size: 12px;
          outline: 1px solid black;
        }
      \`}</style>
    </>
  );
}

export default MyComponent;
"
`;

exports[`React - stateType: variables > jsx > Typescript Test > useTarget 1`] = `
"\\"use client\\";
import * as React from \\"react\\";
import { useEffect } from \\"react\\";

function UseTargetComponent(props: any) {
  const name = function name() {
    const prefix = 123;
    return prefix + \\"foo\\";
  };
  const lastName = \\"bar\\";
  const foo = \\"bar\\";

  useEffect(() => {
    console.log(foo);
    foo = \\"bar\\";
    console.log(\\"react\\");
    lastName = \\"baz\\";
    console.log(foo);
    foo = \\"baz\\";
  }, []);

  return <div>{name()}</div>;
}

export default UseTargetComponent;
"
`;

exports[`React - stateType: variables > jsx > Typescript Test > webComponent 1`] = `
"import * as React from \\"react\\";
import { useRef } from \\"react\\";
import { register } from \\"swiper/element/bundle\\";

function MyBasicWebComponent(props: any) {
  const hasInitialized = useRef(false);
  if (!hasInitialized.current) {
    register();
    hasInitialized.current = true;
  }

  return (
    <swiper-container slides-per-view=\\"3\\" navigation=\\"true\\" pagination=\\"true\\">
      <swiper-slide>Slide 1</swiper-slide>
      <swiper-slide>Slide 2</swiper-slide>
      <swiper-slide>Slide 3</swiper-slide>
    </swiper-container>
  );
}

export default MyBasicWebComponent;
"
`;

exports[`React - stateType: variables > svelte > Javascript Test > basic 1`] = `
"\\"use client\\";
import * as React from \\"react\\";

function MyComponent(props) {
  const name = \\"Steve\\";

  return (
    <div>
      <input onChange={(event) => (name = event.target.value)} value={name} />
      Hello! I can run in React, Vue, Solid, or Liquid!
    </div>
  );
}

export default MyComponent;
"
`;

exports[`React - stateType: variables > svelte > Javascript Test > bindGroup 1`] = `
"\\"use client\\";
import * as React from \\"react\\";

function MyComponent(props) {
  const tortilla = \\"Plain\\";
  const fillings = [];

  return (
    <div>
      <input
        type=\\"radio\\"
        value=\\"Plain\\"
        checked={tortilla === \\"Plain\\"}
        onChange={(event) => (tortilla = event.target.value)}
      />
      <input
        type=\\"radio\\"
        value=\\"Whole wheat\\"
        checked={tortilla === \\"Whole wheat\\"}
        onChange={(event) => (tortilla = event.target.value)}
      />
      <input
        type=\\"radio\\"
        value=\\"Spinach\\"
        checked={tortilla === \\"Spinach\\"}
        onChange={(event) => (tortilla = event.target.value)}
      />
      <br />
      <br />
      <input
        type=\\"checkbox\\"
        value=\\"Rice\\"
        checked={fillings === \\"Rice\\"}
        onChange={(event) => (fillings = event.target.value)}
      />
      <input
        type=\\"checkbox\\"
        value=\\"Beans\\"
        checked={fillings === \\"Beans\\"}
        onChange={(event) => (fillings = event.target.value)}
      />
      <input
        type=\\"checkbox\\"
        value=\\"Cheese\\"
        checked={fillings === \\"Cheese\\"}
        onChange={(event) => (fillings = event.target.value)}
      />
      <input
        type=\\"checkbox\\"
        value=\\"Guac (extra)\\"
        checked={fillings === \\"Guac (extra)\\"}
        onChange={(event) => (fillings = event.target.value)}
      />
      <p>Tortilla: {tortilla}</p>
      <p>Fillings: {fillings}</p>
    </div>
  );
}

export default MyComponent;
"
`;

exports[`React - stateType: variables > svelte > Javascript Test > bindProperty 1`] = `
"\\"use client\\";
import * as React from \\"react\\";

function MyComponent(props) {
  const value = \\"hello\\";

  return <input value={value} />;
}

export default MyComponent;
"
`;

exports[`React - stateType: variables > svelte > Javascript Test > classDirective 1`] = `
"\\"use client\\";
import * as React from \\"react\\";

function MyComponent(props) {
  const focus = true;

  return (
    <input
      className={\`form-input \${props.disabled ? \\"disabled\\" : \\"\\"} \${
        focus ? \\"focus\\" : \\"\\"
      }\`}
    />
  );
}

MyComponent.defaultProps = {};

export default MyComponent;
"
`;

exports[`React - stateType: variables > svelte > Javascript Test > context 1`] = `
"'>' expected. (36:13)
  34 | return (
  35 |
> 36 | <'activeTab'.Provider  value={activeTab}><div>{activeTab}</div></'activeTab'.Provider>
     |             ^
  37 |
  38 |
  39 |"
`;

exports[`React - stateType: variables > svelte > Javascript Test > each 1`] = `
"\\"use client\\";
import * as React from \\"react\\";

function MyComponent(props) {
  const numbers = [\\"one\\", \\"two\\", \\"three\\"];

  return (
    <ul>
      {numbers?.map((num) => (
        <li>{num}</li>
      ))}
    </ul>
  );
}

export default MyComponent;
"
`;

exports[`React - stateType: variables > svelte > Javascript Test > eventHandlers 1`] = `
"'(' expected. (15:30)
  13 |
  14 |   function MyComponent(props) {
> 15 |   const log = log = function function log(msg = 'hello') {
     |                              ^
  16 | console.log(msg);
  17 | }
  18 |"
`;

exports[`React - stateType: variables > svelte > Javascript Test > html 1`] = `
"\\"use client\\";
import * as React from \\"react\\";

function MyComponent(props) {
  const html = \\"<b>bold</b>\\";

  return <div dangerouslySetInnerHTML={{ __html: html }} />;
}

export default MyComponent;
"
`;

exports[`React - stateType: variables > svelte > Javascript Test > ifElse 1`] = `
"'(' expected. (16:34)
  14 |   function MyComponent(props) {
  15 |   const show= true
> 16 | const toggle = toggle = function function toggle() {
     |                                  ^
  17 | show = !show;
  18 | }
  19 |"
`;

exports[`React - stateType: variables > svelte > Javascript Test > imports 1`] = `
"\\"use client\\";
import * as React from \\"react\\";
import Button from \\"./Button\\";

function MyComponent(props) {
  const disabled = false;

  return (
    <div>
      <Button type=\\"button\\" disabled={disabled}>
        <>{props.children}</>
      </Button>
    </div>
  );
}

export default MyComponent;
"
`;

exports[`React - stateType: variables > svelte > Javascript Test > lifecycleHooks 1`] = `
"\\"use client\\";
import * as React from \\"react\\";
import { useEffect } from \\"react\\";

function MyComponent(props) {
  useEffect(() => {
    console.log(\\"onMount\\");
  }, []);

  useEffect(() => {
    console.log(\\"onAfterUpdate\\");
  });

  useEffect(() => {
    return () => {
      console.log(\\"onDestroy\\");
    };
  }, []);

  return <div />;
}

export default MyComponent;
"
`;

exports[`React - stateType: variables > svelte > Javascript Test > reactive 1`] = `
"\\"use client\\";
import * as React from \\"react\\";

function MyComponent(props) {
  const name = \\"Steve\\";
  const lowercaseName = function lowercaseName() {
    return name.toLowerCase();
  };

  return (
    <div>
      <input value={name} />
      Lowercase: {lowercaseName()}
    </div>
  );
}

export default MyComponent;
"
`;

exports[`React - stateType: variables > svelte > Javascript Test > reactiveWithFn 1`] = `
"'(' expected. (18:52)
  16 | const b= 5
  17 | const result= null
> 18 | const calculateResult = calculateResult = function function calculateResult(a_, b_) {
     |                                                    ^
  19 | result = a_ * b_;
  20 | }
  21 |"
`;

exports[`React - stateType: variables > svelte > Javascript Test > slots 1`] = `
"import * as React from \\"react\\";

function MyComponent(props) {
  return (
    <div>
      <>{props.children || \\"default\\"}</>
      <>{props.Test || <div>default</div>}</>
    </div>
  );
}

export default MyComponent;
"
`;

exports[`React - stateType: variables > svelte > Javascript Test > style 1`] = `
"import * as React from \\"react\\";

function MyComponent(props) {
  return (
    <>
      <input className=\\"form-input\\" />
      <style jsx>{\`
        input {
          color: red;
          font-size: 12px;
        }

        .form-input:focus {
          outline: 1px solid blue;
        }
      \`}</style>
    </>
  );
}

export default MyComponent;
"
`;

exports[`React - stateType: variables > svelte > Javascript Test > textExpressions 1`] = `
"\\"use client\\";
import * as React from \\"react\\";

function MyComponent(props) {
  const a = 5;
  const b = 12;

  return (
    <div>
      normal:
      {a + b}
      <br />
      conditional
      {a > 2 ? \\"hello\\" : \\"bye\\"}
    </div>
  );
}

export default MyComponent;
"
`;

exports[`React - stateType: variables > svelte > Typescript Test > basic 1`] = `
"\\"use client\\";
import * as React from \\"react\\";

function MyComponent(props: any) {
  const name = \\"Steve\\";

  return (
    <div>
      <input onChange={(event) => (name = event.target.value)} value={name} />
      Hello! I can run in React, Vue, Solid, or Liquid!
    </div>
  );
}

export default MyComponent;
"
`;

exports[`React - stateType: variables > svelte > Typescript Test > bindGroup 1`] = `
"\\"use client\\";
import * as React from \\"react\\";

function MyComponent(props: any) {
  const tortilla = \\"Plain\\";
  const fillings = [];

  return (
    <div>
      <input
        type=\\"radio\\"
        value=\\"Plain\\"
        checked={tortilla === \\"Plain\\"}
        onChange={(event) => (tortilla = event.target.value)}
      />
      <input
        type=\\"radio\\"
        value=\\"Whole wheat\\"
        checked={tortilla === \\"Whole wheat\\"}
        onChange={(event) => (tortilla = event.target.value)}
      />
      <input
        type=\\"radio\\"
        value=\\"Spinach\\"
        checked={tortilla === \\"Spinach\\"}
        onChange={(event) => (tortilla = event.target.value)}
      />
      <br />
      <br />
      <input
        type=\\"checkbox\\"
        value=\\"Rice\\"
        checked={fillings === \\"Rice\\"}
        onChange={(event) => (fillings = event.target.value)}
      />
      <input
        type=\\"checkbox\\"
        value=\\"Beans\\"
        checked={fillings === \\"Beans\\"}
        onChange={(event) => (fillings = event.target.value)}
      />
      <input
        type=\\"checkbox\\"
        value=\\"Cheese\\"
        checked={fillings === \\"Cheese\\"}
        onChange={(event) => (fillings = event.target.value)}
      />
      <input
        type=\\"checkbox\\"
        value=\\"Guac (extra)\\"
        checked={fillings === \\"Guac (extra)\\"}
        onChange={(event) => (fillings = event.target.value)}
      />
      <p>Tortilla: {tortilla}</p>
      <p>Fillings: {fillings}</p>
    </div>
  );
}

export default MyComponent;
"
`;

exports[`React - stateType: variables > svelte > Typescript Test > bindProperty 1`] = `
"\\"use client\\";
import * as React from \\"react\\";

function MyComponent(props: any) {
  const value = \\"hello\\";

  return <input value={value} />;
}

export default MyComponent;
"
`;

exports[`React - stateType: variables > svelte > Typescript Test > classDirective 1`] = `
"\\"use client\\";
import * as React from \\"react\\";

function MyComponent(props: any) {
  const focus = true;

  return (
    <input
      className={\`form-input \${props.disabled ? \\"disabled\\" : \\"\\"} \${
        focus ? \\"focus\\" : \\"\\"
      }\`}
    />
  );
}

MyComponent.defaultProps = {};

export default MyComponent;
"
`;

exports[`React - stateType: variables > svelte > Typescript Test > context 1`] = `
"'>' expected. (36:13)
  34 | return (
  35 |
> 36 | <'activeTab'.Provider  value={activeTab}><div>{activeTab}</div></'activeTab'.Provider>
     |             ^
  37 |
  38 |
  39 |"
`;

exports[`React - stateType: variables > svelte > Typescript Test > each 1`] = `
"\\"use client\\";
import * as React from \\"react\\";

function MyComponent(props: any) {
  const numbers = [\\"one\\", \\"two\\", \\"three\\"];

  return (
    <ul>
      {numbers?.map((num) => (
        <li>{num}</li>
      ))}
    </ul>
  );
}

export default MyComponent;
"
`;

exports[`React - stateType: variables > svelte > Typescript Test > eventHandlers 1`] = `
"'(' expected. (15:30)
  13 |
  14 |   function MyComponent(props:any) {
> 15 |   const log = log = function function log(msg = 'hello') {
     |                              ^
  16 | console.log(msg);
  17 | }
  18 |"
`;

exports[`React - stateType: variables > svelte > Typescript Test > html 1`] = `
"\\"use client\\";
import * as React from \\"react\\";

function MyComponent(props: any) {
  const html = \\"<b>bold</b>\\";

  return <div dangerouslySetInnerHTML={{ __html: html }} />;
}

export default MyComponent;
"
`;

exports[`React - stateType: variables > svelte > Typescript Test > ifElse 1`] = `
"'(' expected. (16:34)
  14 |   function MyComponent(props:any) {
  15 |   const show= true
> 16 | const toggle = toggle = function function toggle() {
     |                                  ^
  17 | show = !show;
  18 | }
  19 |"
`;

exports[`React - stateType: variables > svelte > Typescript Test > imports 1`] = `
"\\"use client\\";
import * as React from \\"react\\";
import Button from \\"./Button\\";

function MyComponent(props: any) {
  const disabled = false;

  return (
    <div>
      <Button type=\\"button\\" disabled={disabled}>
        <>{props.children}</>
      </Button>
    </div>
  );
}

export default MyComponent;
"
`;

exports[`React - stateType: variables > svelte > Typescript Test > lifecycleHooks 1`] = `
"\\"use client\\";
import * as React from \\"react\\";
import { useEffect } from \\"react\\";

function MyComponent(props: any) {
  useEffect(() => {
    console.log(\\"onMount\\");
  }, []);

  useEffect(() => {
    console.log(\\"onAfterUpdate\\");
  });

  useEffect(() => {
    return () => {
      console.log(\\"onDestroy\\");
    };
  }, []);

  return <div />;
}

export default MyComponent;
"
`;

exports[`React - stateType: variables > svelte > Typescript Test > reactive 1`] = `
"\\"use client\\";
import * as React from \\"react\\";

function MyComponent(props: any) {
  const name = \\"Steve\\";
  const lowercaseName = function lowercaseName() {
    return name.toLowerCase();
  };

  return (
    <div>
      <input value={name} />
      Lowercase: {lowercaseName()}
    </div>
  );
}

export default MyComponent;
"
`;

exports[`React - stateType: variables > svelte > Typescript Test > reactiveWithFn 1`] = `
"'(' expected. (18:52)
  16 | const b= 5
  17 | const result= null
> 18 | const calculateResult = calculateResult = function function calculateResult(a_, b_) {
     |                                                    ^
  19 | result = a_ * b_;
  20 | }
  21 |"
`;

exports[`React - stateType: variables > svelte > Typescript Test > slots 1`] = `
"import * as React from \\"react\\";

function MyComponent(props: any) {
  return (
    <div>
      <>{props.children || \\"default\\"}</>
      <>{props.Test || <div>default</div>}</>
    </div>
  );
}

export default MyComponent;
"
`;

exports[`React - stateType: variables > svelte > Typescript Test > style 1`] = `
"import * as React from \\"react\\";

function MyComponent(props: any) {
  return (
    <>
      <input className=\\"form-input\\" />
      <style jsx>{\`
        input {
          color: red;
          font-size: 12px;
        }

        .form-input:focus {
          outline: 1px solid blue;
        }
      \`}</style>
    </>
  );
}

export default MyComponent;
"
`;

exports[`React - stateType: variables > svelte > Typescript Test > textExpressions 1`] = `
"\\"use client\\";
import * as React from \\"react\\";

function MyComponent(props: any) {
  const a = 5;
  const b = 12;

  return (
    <div>
      normal:
      {a + b}
      <br />
      conditional
      {a > 2 ? \\"hello\\" : \\"bye\\"}
    </div>
  );
}

export default MyComponent;
"
`;
