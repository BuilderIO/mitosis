// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`React - stateType: variables > jsx > Javascript Test > AdvancedRef 1`] = `
"\\"use client\\";
import * as React from \\"react\\";
import { useRef, useEffect } from \\"react\\";

function MyBasicRefComponent(props) {
  const inputRef = useRef(null);
  const inputNoArgRef = useRef(null);
  const name = \\"PatrickJS\\";
  const onBlur = function onBlur() {
    // Maintain focus
    inputRef.current.focus();
  };
  const lowerCaseName = function lowerCaseName() {
    return name.toLowerCase();
  };

  useEffect(() => {
    console.log(\\"Received an update\\");
  }, [inputRef.current, inputNoArgRef.current]);

  return (
    <>
      <div>
        {props.showInput ? (
          <>
            <input
              className=\\"input\\"
              ref={inputRef}
              value={name}
              onBlur={(event) => onBlur()}
              onChange={(event) => (name = event.target.value)}
            />
            <label htmlFor=\\"cars\\" ref={inputNoArgRef}>
              Choose a car:
            </label>
            <select name=\\"cars\\" id=\\"cars\\">
              <option value=\\"supra\\">GR Supra</option>
              <option value=\\"86\\">GR 86</option>
            </select>
          </>
        ) : null}
        Hello
        {lowerCaseName()}! I can run in React, Qwik, Vue, Solid, or Web
        Component!
      </div>
      <style jsx>{\`
        .input {
          color: red;
        }
      \`}</style>
    </>
  );
}

export default MyBasicRefComponent;
"
`;

exports[`React - stateType: variables > jsx > Javascript Test > Basic 1`] = `
"'function' is not allowed as a variable declaration name. (19:7)
  17 |
  18 |   const name= 'Steve'
> 19 | const function underscore_fn_name() {
     |       ^
  20 | return 'bar';
  21 | }
  22 | const age= 1"
`;

exports[`React - stateType: variables > jsx > Javascript Test > Basic Context 1`] = `
"\\"use client\\";
import * as React from \\"react\\";
import { useContext, useRef, useEffect } from \\"react\\";
import { Injector, MyService, createInjector } from \\"@dummy/injection-js\\";

function MyBasicComponent(props) {
  const name = \\"PatrickJS\\";
  const onChange = function onChange() {
    const change = myService.method(\\"change\\");
    console.log(change);
  };

  const myService = useContext(MyService);

  const hasInitialized = useRef(false);
  if (!hasInitialized.current) {
    const hi = myService.method(\\"hi\\");
    console.log(hi);
    hasInitialized.current = true;
  }

  useEffect(() => {
    const bye = myService.method(\\"hi\\");
    console.log(bye);
  }, []);

  return (
    <Injector.Provider value={createInjector()}>
      <div>
        {myService.method(\\"hello\\") + name}
        Hello! I can run in React, Vue, Solid, or Liquid!
        <input onChange={(event) => onChange} />
      </div>
    </Injector.Provider>
  );
}

export default MyBasicComponent;
"
`;

exports[`React - stateType: variables > jsx > Javascript Test > Basic OnMount Update 1`] = `
"\\"use client\\";
import * as React from \\"react\\";
import { useRef, useEffect } from \\"react\\";

function MyBasicOnMountUpdateComponent(props) {
  const name = \\"PatrickJS\\";
  const names = [\\"Steve\\", \\"PatrickJS\\"];

  const hasInitialized = useRef(false);
  if (!hasInitialized.current) {
    name = \\"PatrickJS onInit\\" + props.hi;
    hasInitialized.current = true;
  }

  useEffect(() => {
    name = \\"PatrickJS onMount\\" + props.bye;
  }, []);

  return <div>Hello {name}</div>;
}

export default MyBasicOnMountUpdateComponent;
"
`;

exports[`React - stateType: variables > jsx > Javascript Test > Basic Outputs 1`] = `
"\\"use client\\";
import * as React from \\"react\\";
import { useEffect } from \\"react\\";

function MyBasicOutputsComponent(props) {
  const name = \\"PatrickJS\\";

  useEffect(() => {
    props.onMessage(name);
    props.onEvent(props.message);
  }, []);

  return <div />;
}

export default MyBasicOutputsComponent;
"
`;

exports[`React - stateType: variables > jsx > Javascript Test > Basic Outputs Meta 1`] = `
"/**
          useMetadata:
          {\\"outputs\\":[\\"onMessage\\",\\"onEvent\\"],\\"baz\\":\\"metadata inside component\\"}
          */

\\"use client\\";
import * as React from \\"react\\";
import { useEffect } from \\"react\\";

function MyBasicOutputsComponent(props) {
  const name = \\"PatrickJS\\";

  useEffect(() => {
    props.onMessage(name);
    props.onEvent(props.message);
  }, []);

  return <div />;
}

export default MyBasicOutputsComponent;
"
`;

exports[`React - stateType: variables > jsx > Javascript Test > BasicAttribute 1`] = `
"import * as React from \\"react\\";

function MyComponent(props) {
  return <input autoCapitalize=\\"on\\" autoComplete=\\"on\\" spellCheck />;
}

export default MyComponent;
"
`;

exports[`React - stateType: variables > jsx > Javascript Test > BasicBooleanAttribute 1`] = `
"import * as React from \\"react\\";
import MyBooleanAttributeComponent from \\"./basic-boolean-attribute-component.raw\\";

function MyBooleanAttribute(props) {
  return (
    <div>
      {props.children ? (
        <>
          {props.children}
          {props.type}
        </>
      ) : null}
      <MyBooleanAttributeComponent toggle />
      <MyBooleanAttributeComponent toggle />
      <MyBooleanAttributeComponent list={null} />
    </div>
  );
}

export default MyBooleanAttribute;
"
`;

exports[`React - stateType: variables > jsx > Javascript Test > BasicChildComponent 1`] = `
"\\"use client\\";
import * as React from \\"react\\";
import MyBasicOnMountUpdateComponent from \\"./basic-onMount-update.raw\\";
import MyBasicComponent from \\"./basic.raw\\";

function MyBasicChildComponent(props) {
  const name = \\"Steve\\";
  const dev = \\"PatrickJS\\";

  return (
    <div>
      <MyBasicComponent id={dev} />
      <div>
        <MyBasicOnMountUpdateComponent hi={name} bye={dev} />
      </div>
    </div>
  );
}

export default MyBasicChildComponent;
"
`;

exports[`React - stateType: variables > jsx > Javascript Test > BasicFor 1`] = `
"\\"use client\\";
import * as React from \\"react\\";
import { useEffect } from \\"react\\";

function MyBasicForComponent(props) {
  const name = \\"PatrickJS\\";
  const names = [\\"Steve\\", \\"PatrickJS\\"];

  useEffect(() => {
    console.log(\\"onMount code\\");
  }, []);

  return (
    <div>
      {names?.map((person) => (
        <>
          <input
            value={name}
            onChange={(event) => {
              name = event.target.value + \\" and \\" + person;
            }}
          />
          Hello
          {person}! I can run in Qwik, Web Component, React, Vue, Solid, or
          Liquid!
        </>
      ))}
    </div>
  );
}

export default MyBasicForComponent;
"
`;

exports[`React - stateType: variables > jsx > Javascript Test > BasicRef 1`] = `
"\\"use client\\";
import * as React from \\"react\\";
import { useRef } from \\"react\\";

function MyBasicRefComponent(props) {
  const inputRef = useRef(null);
  const inputNoArgRef = useRef(null);
  const name = \\"PatrickJS\\";
  const onBlur = function onBlur() {
    // Maintain focus
    inputRef.current?.focus();
  };
  const lowerCaseName = function lowerCaseName() {
    return name.toLowerCase();
  };

  return (
    <>
      <div>
        {props.showInput ? (
          <>
            <input
              className=\\"input\\"
              ref={inputRef}
              value={name}
              onBlur={(event) => onBlur()}
              onChange={(event) => (name = event.target.value)}
            />
            <label htmlFor=\\"cars\\" ref={inputNoArgRef}>
              Choose a car:
            </label>
            <select name=\\"cars\\" id=\\"cars\\">
              <option value=\\"supra\\">GR Supra</option>
              <option value=\\"86\\">GR 86</option>
            </select>
          </>
        ) : null}
        Hello
        {lowerCaseName()}! I can run in React, Qwik, Vue, Solid, or Web
        Component!
      </div>
      <style jsx>{\`
        .input {
          color: red;
        }
      \`}</style>
    </>
  );
}

export default MyBasicRefComponent;
"
`;

exports[`React - stateType: variables > jsx > Javascript Test > BasicRefAssignment 1`] = `
"\\"use client\\";
import * as React from \\"react\\";
import { useRef } from \\"react\\";

function MyBasicRefAssignmentComponent(props) {
  const holdValueRef = useRef(\\"Patrick\\");
  const handlerClick = function handlerClick(event) {
    event.preventDefault();
    console.log(\\"current value\\", holdValueRef.current);
    holdValueRef.current = holdValueRef.current + \\"JS\\";
  };

  return (
    <div>
      <button onClick={async (evt) => await handlerClick(evt)}>Click</button>
    </div>
  );
}

export default MyBasicRefAssignmentComponent;
"
`;

exports[`React - stateType: variables > jsx > Javascript Test > BasicRefPrevious 1`] = `
"\\"use client\\";
import * as React from \\"react\\";
import { useRef, useEffect } from \\"react\\";

export function usePrevious(value) {
  // The ref object is a generic container whose current property is mutable ...
  // ... and can hold any value, similar to an instance property on a class
  let ref = useRef(null); // Store current value in ref

  onUpdate(() => {
    ref = value;
  }, [value]); // Only re-run if value changes
  // Return previous value (happens before update in useEffect above)

  return ref;
}

function MyPreviousComponent(props) {
  const count = 0;

  const prevCount = useRef(state.count);

  useEffect(() => {
    prevCount.current = count;
  }, [count]);

  return (
    <div>
      <h1>
        Now: {count}, before: {prevCount.current}
      </h1>
      <button onClick={(event) => (count += 1)}>Increment</button>
    </div>
  );
}

export default MyPreviousComponent;
"
`;

exports[`React - stateType: variables > jsx > Javascript Test > Button 1`] = `
"import * as React from \\"react\\";

function Button(props) {
  return (
    <div>
      {props.link ? (
        <a
          {...props.attributes}
          href={props.link}
          target={props.openLinkInNewTab ? \\"_blank\\" : undefined}
        >
          {props.text}
        </a>
      ) : null}
      {!props.link ? (
        <button type=\\"button\\" {...props.attributes}>
          {props.text}
        </button>
      ) : null}
    </div>
  );
}

export default Button;
"
`;

exports[`React - stateType: variables > jsx > Javascript Test > Columns 1`] = `
"'function' is not allowed as a variable declaration name. (15:9)
  13 |   function Column(props) {
  14 |
> 15 |   const function getColumns() {
     |         ^
  16 | return props.columns || [];
  17 | }
  18 | const function getGutterSize() {"
`;

exports[`React - stateType: variables > jsx > Javascript Test > ContentSlotHtml 1`] = `
"import * as React from \\"react\\";

function ContentSlotCode(props) {
  return (
    <div>
      <>{props.slotTesting}</>
      <div>
        <hr />
      </div>
      <div>
        <>{props.children}</>
      </div>
    </div>
  );
}

export default ContentSlotCode;
"
`;

exports[`React - stateType: variables > jsx > Javascript Test > ContentSlotJSX 1`] = `
"'function' is not allowed as a variable declaration name. (18:7)
  16 |   const name= 'king'
  17 | const showContent= false
> 18 | const function cls() {
     |       ^
  19 | return props.slotContent && props.children ? \`\${name}-content\` : '';
  20 | }
  21 | const function show() {"
`;

exports[`React - stateType: variables > jsx > Javascript Test > CustomCode 1`] = `
"'function' is not allowed as a variable declaration name. (19:7)
  17 | const scriptsInserted= []
  18 | const scriptsRun= []
> 19 | const function findAndRunScripts() {
     |       ^
  20 | // TODO: Move this function to standalone one in '@builder.io/utils'
  21 | if (elem.current && typeof window !== 'undefined') {
  22 | /** @type {HTMLScriptElement[]} */"
`;

exports[`React - stateType: variables > jsx > Javascript Test > Embed 1`] = `
"'function' is not allowed as a variable declaration name. (19:7)
  17 | const scriptsInserted= []
  18 | const scriptsRun= []
> 19 | const function findAndRunScripts() {
     |       ^
  20 | // TODO: Move this function to standalone one in '@builder.io/utils'
  21 | if (elem.current && typeof window !== 'undefined') {
  22 | /** @type {HTMLScriptElement[]} */"
`;

exports[`React - stateType: variables > jsx > Javascript Test > Form 1`] = `
"'function' is not allowed as a variable declaration name. (21:7)
  19 | const responseData= null
  20 | const formErrorMessage= ''
> 21 | const function submissionState() {
     |       ^
  22 | return Builder.isEditing && props.previewState || formState;
  23 | }
  24 | const function onSubmit(event) {"
`;

exports[`React - stateType: variables > jsx > Javascript Test > Image 1`] = `
"'function' is not allowed as a variable declaration name. (19:7)
  17 | const scrollListener= null
  18 | const imageLoaded= false
> 19 | const function setLoaded() {
     |       ^
  20 | imageLoaded = true;
  21 | }
  22 | const function useLazyLoading() {"
`;

exports[`React - stateType: variables > jsx > Javascript Test > Image State 1`] = `
"\\"use client\\";
import * as React from \\"react\\";

function ImgStateComponent(props) {
  const canShow = true;
  const images = [\\"http://example.com/qwik.png\\"];

  return (
    <div>
      {images?.map((item, itemIndex) => (
        <img className=\\"custom-class\\" src={item} key={itemIndex} />
      ))}
    </div>
  );
}

export default ImgStateComponent;
"
`;

exports[`React - stateType: variables > jsx > Javascript Test > Img 1`] = `
"import * as React from \\"react\\";
import { Builder } from \\"@builder.io/sdk\\";

function ImgComponent(props) {
  return (
    <img
      style={{
        objectFit: props.backgroundSize || \\"cover\\",
        objectPosition: props.backgroundPosition || \\"center\\",
      }}
      {...props.attributes}
      key={(Builder.isEditing && props.imgSrc) || \\"default-key\\"}
      alt={props.altText}
      src={props.imgSrc}
    />
  );
}

export default ImgComponent;
"
`;

exports[`React - stateType: variables > jsx > Javascript Test > Input 1`] = `
"\\"use client\\";
import * as React from \\"react\\";
import { Builder } from \\"@builder.io/sdk\\";

function FormInputComponent(props) {
  return (
    <input
      {...props.attributes}
      key={
        Builder.isEditing && props.defaultValue
          ? props.defaultValue
          : \\"default-key\\"
      }
      placeholder={props.placeholder}
      type={props.type}
      name={props.name}
      value={props.value}
      defaultValue={props.defaultValue}
      required={props.required}
      onChange={(event) => props.onChange?.(event.target.value)}
    />
  );
}

export default FormInputComponent;
"
`;

exports[`React - stateType: variables > jsx > Javascript Test > InputParent 1`] = `
"'function' is not allowed as a variable declaration name. (15:9)
  13 |   function Stepper(props) {
  14 |
> 15 |   const function handleChange(value) {
     |         ^
  16 | console.log(value);
  17 | }
  18 |"
`;

exports[`React - stateType: variables > jsx > Javascript Test > NestedStore 1`] = `
"\\"use client\\";
import * as React from \\"react\\";

function NestedStore(props) {
  const _id = \\"abc\\";
  const _messageId = _id + \\"-message\\";

  return (
    <div id={_id}>
      Test
      <p id={_messageId}>Message</p>
    </div>
  );
}

export default NestedStore;
"
`;

exports[`React - stateType: variables > jsx > Javascript Test > RawText 1`] = `
"import * as React from \\"react\\";

function RawText(props) {
  return (
    <span
      className={props.attributes?.class || props.attributes?.className}
      dangerouslySetInnerHTML={{ __html: props.text || \\"\\" }}
    />
  );
}

export default RawText;
"
`;

exports[`React - stateType: variables > jsx > Javascript Test > Section 1`] = `
"import * as React from \\"react\\";

function SectionComponent(props) {
  return (
    <section
      {...props.attributes}
      style={
        props.maxWidth && typeof props.maxWidth === \\"number\\"
          ? {
              maxWidth: props.maxWidth,
            }
          : undefined
      }
    >
      {props.children}
    </section>
  );
}

export default SectionComponent;
"
`;

exports[`React - stateType: variables > jsx > Javascript Test > Select 1`] = `
"import * as React from \\"react\\";
import { Builder } from \\"@builder.io/sdk\\";

function SelectComponent(props) {
  return (
    <select
      {...props.attributes}
      value={props.value}
      key={
        Builder.isEditing && props.defaultValue
          ? props.defaultValue
          : \\"default-key\\"
      }
      defaultValue={props.defaultValue}
      name={props.name}
    >
      {props.options?.map((option, index) => (
        <option value={option.value} data-index={index}>
          {option.name || option.value}
        </option>
      ))}
    </select>
  );
}

export default SelectComponent;
"
`;

exports[`React - stateType: variables > jsx > Javascript Test > SlotDefault 1`] = `
"import * as React from \\"react\\";

function SlotCode(props) {
  return (
    <div>
      <>
        {props.children || <div className=\\"default-slot\\">Default content</div>}
      </>
    </div>
  );
}

export default SlotCode;
"
`;

exports[`React - stateType: variables > jsx > Javascript Test > SlotHtml 1`] = `
"import * as React from \\"react\\";
import ContentSlotCode from \\"./content-slot-jsx.raw\\";

function SlotCode(props) {
  return (
    <div>
      <ContentSlotCode testing={<div>Hello</div>}></ContentSlotCode>
    </div>
  );
}

export default SlotCode;
"
`;

exports[`React - stateType: variables > jsx > Javascript Test > SlotJsx 1`] = `
"import * as React from \\"react\\";
import ContentSlotCode from \\"./content-slot-jsx.raw\\";

function SlotCode(props) {
  return (
    <div>
      <ContentSlotCode slotTesting={<div>Hello</div>} />
    </div>
  );
}

export default SlotCode;
"
`;

exports[`React - stateType: variables > jsx > Javascript Test > SlotNamed 1`] = `
"import * as React from \\"react\\";

function SlotCode(props) {
  return (
    <div>
      <>{props.myAwesomeSlot}</>
      <>{props.top}</>
      <>{props.left || \\"Default left\\"}</>
      <>{props.children || \\"Default Child\\"}</>
    </div>
  );
}

export default SlotCode;
"
`;

exports[`React - stateType: variables > jsx > Javascript Test > Stamped.io 1`] = `
"'function' is not allowed as a variable declaration name. (19:7)
  17 | const name= 'test'
  18 | const showReviewPrompt= false
> 19 | const function kebabCaseValue() {
     |       ^
  20 | return kebabCase('testThat');
  21 | }
  22 | const function snakeCaseValue() {"
`;

exports[`React - stateType: variables > jsx > Javascript Test > StoreComment 1`] = `
"'function' is not allowed as a variable declaration name. (17:7)
  15 |
  16 |   const foo= true
> 17 | const function bar() {}
     |       ^
  18 |
  19 |
  20 |"
`;

exports[`React - stateType: variables > jsx > Javascript Test > StoreShadowVars 1`] = `
"'function' is not allowed as a variable declaration name. (17:7)
  15 |
  16 |   const errors= {}
> 17 | const function foo(errors) {
     |       ^
  18 | return errors;
  19 | }
  20 |"
`;

exports[`React - stateType: variables > jsx > Javascript Test > StoreWithState 1`] = `
"'function' is not allowed as a variable declaration name. (17:7)
  15 |
  16 |   const foo= false
> 17 | const function bar() {
     |       ^
  18 | return foo;
  19 | }
  20 |"
`;

exports[`React - stateType: variables > jsx > Javascript Test > Submit 1`] = `
"import * as React from \\"react\\";

function SubmitButton(props) {
  return (
    <button type=\\"submit\\" {...props.attributes}>
      {props.text}
    </button>
  );
}

export default SubmitButton;
"
`;

exports[`React - stateType: variables > jsx > Javascript Test > Text 1`] = `
"\\"use client\\";
import * as React from \\"react\\";
import { Builder } from \\"@builder.io/sdk\\";

function Text(props) {
  const name = \\"Decadef20\\";

  return (
    <div
      contentEditable={allowEditingText || undefined}
      data-name={{
        test: name || \\"any name\\",
      }}
      dangerouslySetInnerHTML={{
        __html:
          props.text ||
          props.content ||
          name ||
          '<p class=\\"text-lg\\">my name</p>',
      }}
    />
  );
}

export default Text;
"
`;

exports[`React - stateType: variables > jsx > Javascript Test > Textarea 1`] = `
"import * as React from \\"react\\";

function Textarea(props) {
  return (
    <textarea
      {...props.attributes}
      placeholder={props.placeholder}
      name={props.name}
      value={props.value}
      defaultValue={props.defaultValue}
    />
  );
}

export default Textarea;
"
`;

exports[`React - stateType: variables > jsx > Javascript Test > UseValueAndFnFromStore 1`] = `
"'function' is not allowed as a variable declaration name. (18:7)
  16 |   const _id= 'abc'
  17 | const _active= false
> 18 | const function _do(id) {
     |       ^
  19 | _active = !!id;
  20 |
  21 | if (props.onChange) {"
`;

exports[`React - stateType: variables > jsx > Javascript Test > Video 1`] = `
"import * as React from \\"react\\";

function Video(props) {
  return (
    <video
      preload=\\"none\\"
      {...props.attributes}
      style={{
        width: \\"100%\\",
        height: \\"100%\\",
        ...props.attributes?.style,
        objectFit: props.fit,
        objectPosition: props.position,
        // Hack to get object fit to work as expected and
        // not have the video overflow
        borderRadius: 1,
      }}
      key={props.video || \\"no-src\\"}
      poster={props.posterImage}
      autoplay={props.autoPlay}
      muted={props.muted}
      controls={props.controls}
      loop={props.loop}
    />
  );
}

export default Video;
"
`;

exports[`React - stateType: variables > jsx > Javascript Test > arrowFunctionInUseStore 1`] = `
"'function' is not allowed as a variable declaration name. (17:7)
  15 |
  16 |   const name= 'steve'
> 17 | const function setName(value) {
     |       ^
  18 | name = value;
  19 | }
  20 | const function updateNameWithArrowFn(value) {"
`;

exports[`React - stateType: variables > jsx > Javascript Test > basicForFragment 1`] = `
"\\"use client\\";
import * as React from \\"react\\";

function BasicForFragment(props) {
  const id = \\"xyz\\";

  return (
    <div>
      {[\\"a\\", \\"b\\", \\"c\\"]?.map((option) => (
        <React.Fragment key={\`key-\${option}\`}>
          <div>{option}</div>
        </React.Fragment>
      ))}
      {[\\"a\\", \\"b\\", \\"c\\"]?.map((option) => (
        <React.Fragment key={\`\${id}-\${option}\`}>
          <div>{option}</div>
        </React.Fragment>
      ))}
      <select>
        {[\\"d\\", \\"e\\", \\"f\\"]?.map((option) => (
          <option key={\`\${id}-\${option}\`} value={option}>
            {option}
          </option>
        ))}
      </select>
    </div>
  );
}

export default BasicForFragment;
"
`;

exports[`React - stateType: variables > jsx > Javascript Test > basicForNoTagReference 1`] = `
"'function' is not allowed as a variable declaration name. (19:7)
  17 | const TagName= 'div'
  18 | const tag= 'span'
> 19 | const function TagNameGetter() {
     |       ^
  20 | return 'span';
  21 | }
  22 |"
`;

exports[`React - stateType: variables > jsx > Javascript Test > basicForwardRef 1`] = `
"\\"use client\\";
import * as React from \\"react\\";
import { forwardRef } from \\"react\\";

const MyBasicForwardRefComponent = forwardRef(
  function MyBasicForwardRefComponent(props, inputRef) {
    const name = \\"PatrickJS\\";

    return (
      <>
        <div>
          <input
            className=\\"input\\"
            ref={inputRef}
            value={name}
            onChange={(event) => (name = event.target.value)}
          />
        </div>
        <style jsx>{\`
          .input {
            color: red;
          }
        \`}</style>
      </>
    );
  }
);

export default MyBasicForwardRefComponent;
"
`;

exports[`React - stateType: variables > jsx > Javascript Test > basicForwardRefMetadata 1`] = `
"/**
          useMetadata:
          {\\"forwardRef\\":\\"inputRef\\"}
          */

\\"use client\\";
import * as React from \\"react\\";
import { forwardRef } from \\"react\\";

const MyBasicForwardRefComponent = forwardRef(
  function MyBasicForwardRefComponent(props, inputRef) {
    const name = \\"PatrickJS\\";

    return (
      <>
        <div>
          <input
            className=\\"input\\"
            ref={inputRef}
            value={name}
            onChange={(event) => (name = event.target.value)}
          />
        </div>
        <style jsx>{\`
          .input {
            color: red;
          }
        \`}</style>
      </>
    );
  }
);

export default MyBasicForwardRefComponent;
"
`;

exports[`React - stateType: variables > jsx > Javascript Test > basicOnUpdateReturn 1`] = `
"\\"use client\\";
import * as React from \\"react\\";
import { useEffect } from \\"react\\";

function MyBasicOnUpdateReturnComponent(props) {
  const name = \\"PatrickJS\\";

  useEffect(() => {
    const controller = new AbortController();
    const signal = controller.signal;
    fetch(\\"https://patrickjs.com/api/resource.json\\", {
      signal,
    })
      .then((response) => response.json())
      .then((data) => {
        name = data.name;
      });
    return () => {
      if (!signal.aborted) {
        controller.abort();
      }
    };
  }, [name]);

  return <div>Hello! {name}</div>;
}

export default MyBasicOnUpdateReturnComponent;
"
`;

exports[`React - stateType: variables > jsx > Javascript Test > class + ClassName + css 1`] = `
"import * as React from \\"react\\";
import MyComp from \\"./my-component\\";

function MyBasicComponent(props) {
  return (
    <>
      <div>
        <MyComp className=\\"test\\" className=\\"test2\\">
          Hello! I can run in React, Vue, Solid, or Liquid!
        </MyComp>
        <div className=\\"test2 test div\\">
          Hello! I can run in React, Vue, Solid, or Liquid!
        </div>
      </div>
      <style jsx>{\`
        .div {
          padding: 10px;
        }
      \`}</style>
    </>
  );
}

export default MyBasicComponent;
"
`;

exports[`React - stateType: variables > jsx > Javascript Test > class + css 1`] = `
"import * as React from \\"react\\";

function MyBasicComponent(props) {
  return (
    <>
      <div className=\\"test div\\">
        Hello! I can run in React, Vue, Solid, or Liquid!
      </div>
      <style jsx>{\`
        .div {
          padding: 10px;
        }
      \`}</style>
    </>
  );
}

export default MyBasicComponent;
"
`;

exports[`React - stateType: variables > jsx > Javascript Test > className + css 1`] = `
"import * as React from \\"react\\";

function MyBasicComponent(props) {
  return (
    <>
      <div className=\\"test div\\">
        Hello! I can run in React, Vue, Solid, or Liquid!
      </div>
      <style jsx>{\`
        .div {
          padding: 10px;
        }
      \`}</style>
    </>
  );
}

export default MyBasicComponent;
"
`;

exports[`React - stateType: variables > jsx > Javascript Test > className 1`] = `
"\\"use client\\";
import * as React from \\"react\\";

function ClassNameCode(props) {
  const bindings = \\"a binding\\";

  return (
    <div>
      <div className=\\"no binding\\">Without Binding</div>
      <div className={bindings}>With binding</div>
    </div>
  );
}

export default ClassNameCode;
"
`;

exports[`React - stateType: variables > jsx > Javascript Test > classState 1`] = `
"\\"use client\\";
import * as React from \\"react\\";

function MyBasicComponent(props) {
  const classState = \\"testClassName\\";
  const styleState = {
    color: \\"red\\",
  };

  return (
    <>
      <div className={classState + \\" div\\"} style={styleState}>
        Hello! I can run in React, Vue, Solid, or Liquid!
      </div>
      <style jsx>{\`
        .div {
          padding: 10px;
        }
      \`}</style>
    </>
  );
}

export default MyBasicComponent;
"
`;

exports[`React - stateType: variables > jsx > Javascript Test > complexMeta 1`] = `
"/**
          useMetadata:
          {\\"x\\":\\"y\\",\\"asdf\\":{\\"stringValue\\":\\"d\\",\\"booleanValue\\":true,\\"numberValue\\":1,\\"innerObject\\":{\\"stringValue\\":\\"inner\\",\\"numberValue\\":2,\\"booleanValue\\":false},\\"spreadStringValue\\":\\"f\\"}}
          */

import * as React from \\"react\\";

function ComplexMetaRaw(props) {
  return <div />;
}

export default ComplexMetaRaw;
"
`;

exports[`React - stateType: variables > jsx > Javascript Test > componentWithContext 1`] = `
"\\"use client\\";
import * as React from \\"react\\";
import { useContext } from \\"react\\";
import Context1 from \\"@dummy/1\\";
import Context2 from \\"@dummy/2\\";

function ComponentWithContext(props) {
  const foo = useContext(Context1);

  return (
    <Context2.Provider
      value={{
        bar: \\"baz\\",
      }}
    >
      <Context1.Provider
        value={{
          foo: \\"bar\\",

          content() {
            return props.content;
          },
        }}
      >
        <>{foo.value}</>
      </Context1.Provider>
    </Context2.Provider>
  );
}

export default ComponentWithContext;
"
`;

exports[`React - stateType: variables > jsx > Javascript Test > componentWithContextMultiRoot 1`] = `
"\\"use client\\";
import * as React from \\"react\\";
import { useContext } from \\"react\\";
import Context1 from \\"@dummy/1\\";
import Context2 from \\"@dummy/2\\";

function ComponentWithContext(props) {
  const foo = useContext(Context1);

  return (
    <Context2.Provider
      value={{
        bar: \\"baz\\",
      }}
    >
      <Context1.Provider
        value={{
          foo: \\"bar\\",

          content() {
            return props.content;
          },
        }}
      >
        <>
          <>{foo.value}</>
          <div>other</div>
        </>
      </Context1.Provider>
    </Context2.Provider>
  );
}

export default ComponentWithContext;
"
`;

exports[`React - stateType: variables > jsx > Javascript Test > contentState 1`] = `
"\\"use client\\";
import * as React from \\"react\\";
import { useContext } from \\"react\\";
import BuilderContext from \\"@dummy/context.js\\";

function RenderContent(props) {
  return (
    <BuilderContext.Provider
      value={{
        content: props.content,
        registeredComponents: props.customComponents,
      }}
    >
      <div>setting context</div>
    </BuilderContext.Provider>
  );
}

export default RenderContent;
"
`;

exports[`React - stateType: variables > jsx > Javascript Test > defaultProps 1`] = `
"\\"use client\\";
import * as React from \\"react\\";

function Button(props) {
  props = {
    text: \\"default text\\",
    link: \\"https://builder.io/\\",
    openLinkInNewTab: false,
    onClick: () => {
      console.log(\\"hi\\");
    },
    ...props,
  };
  return (
    <div>
      {props.link ? (
        <a
          {...props.attributes}
          href={props.link}
          target={props.openLinkInNewTab ? \\"_blank\\" : undefined}
        >
          {props.text}
        </a>
      ) : null}
      {!props.link ? (
        <button
          type=\\"button\\"
          {...props.attributes}
          onClick={(event) => props.onClick()}
        >
          {props.buttonText}
        </button>
      ) : null}
    </div>
  );
}

export default Button;
"
`;

exports[`React - stateType: variables > jsx > Javascript Test > defaultPropsOutsideComponent 1`] = `
"\\"use client\\";
import * as React from \\"react\\";

function Button(props) {
  props = {
    text: \\"default text\\",
    link: \\"https://builder.io/\\",
    openLinkInNewTab: false,
    onClick: () => {},
    ...props,
  };
  return (
    <div>
      {props.link ? (
        <a
          {...props.attributes}
          href={props.link}
          target={props.openLinkInNewTab ? \\"_blank\\" : undefined}
        >
          {props.text}
        </a>
      ) : null}
      {!props.link ? (
        <button
          type=\\"button\\"
          {...props.attributes}
          onClick={(event) => props.onClick(event)}
        >
          {props.text}
        </button>
      ) : null}
    </div>
  );
}

export default Button;
"
`;

exports[`React - stateType: variables > jsx > Javascript Test > defaultValsWithTypes 1`] = `
"import * as React from \\"react\\";

const DEFAULT_VALUES = {
  name: \\"Sami\\",
};

function ComponentWithTypes(props) {
  return <div> Hello {props.name || DEFAULT_VALUES.name}</div>;
}

export default ComponentWithTypes;
"
`;

exports[`React - stateType: variables > jsx > Javascript Test > eventInputAndChange 1`] = `
"\\"use client\\";
import * as React from \\"react\\";

function EventInputAndChange(props) {
  const name = \\"Steve\\";

  return (
    <>
      <div>
        <input
          className=\\"input\\"
          value={name}
          onInput={(event) => (name = event.target.value)}
          onChange={(event) => (name = event.target.value)}
        />
        Hello! I can run in React, Vue, Solid, or Liquid!
      </div>
      <style jsx>{\`
        .input {
          color: red;
        }
      \`}</style>
    </>
  );
}

export default EventInputAndChange;
"
`;

exports[`React - stateType: variables > jsx > Javascript Test > expressionState 1`] = `
"\\"use client\\";
import * as React from \\"react\\";

function MyComponent(props) {
  const refToUse = !(props.componentRef instanceof Function)
    ? props.componentRef
    : null;

  return <div>{refToUse}</div>;
}

export default MyComponent;
"
`;

exports[`React - stateType: variables > jsx > Javascript Test > figmaMeta 1`] = `
"/**
          useMetadata:
          {\\"figma\\":{\\"name\\":\\"def-button-beta-outlined\\",\\"url\\":\\"https://www.figma.com/xxx\\",\\"props\\":{\\"iconSmall\\":{\\"type\\":\\"instance\\",\\"key\\":\\"📍 Icon Small\\"},\\"iconMedium\\":{\\"type\\":\\"instance\\",\\"key\\":\\"📍 Icon Medium\\"},\\"label\\":{\\"type\\":\\"string\\",\\"key\\":\\"✏️ Label\\"},\\"icon\\":{\\"type\\":\\"boolean\\",\\"key\\":\\"👁️ Icon\\",\\"value\\":{\\"false\\":false,\\"true\\":\\"placeholder\\"}},\\"interactiveState\\":{\\"type\\":\\"enum\\",\\"key\\":\\"Interactive State\\",\\"value\\":{\\"(Def) Enabled\\":false,\\"Hovered\\":false,\\"Pressed\\":false,\\"Focused\\":false,\\"Disabled\\":\\"true\\"}},\\"size\\":{\\"type\\":\\"enum\\",\\"key\\":\\"Size\\",\\"value\\":{\\"(Def) Medium\\":false,\\"Small\\":\\"small\\"}},\\"width\\":{\\"type\\":\\"enum\\",\\"key\\":\\"Width\\",\\"value\\":{\\"(Def) Auto Width\\":false,\\"Full Width\\":\\"full\\"}}}}}
          */

import * as React from \\"react\\";

function FigmaButton(props) {
  return (
    <button
      data-icon={props.icon}
      data-disabled={props.interactiveState}
      data-width={props.width}
      data-size={props.size}
    >
      {props.label}
    </button>
  );
}

export default FigmaButton;
"
`;

exports[`React - stateType: variables > jsx > Javascript Test > getterState 1`] = `
"'function' is not allowed as a variable declaration name. (15:9)
  13 |   function Button(props) {
  14 |
> 15 |   const function foo2() {
     |         ^
  16 | return props.foo + 'foo';
  17 | }
  18 | const function bar() {"
`;

exports[`React - stateType: variables > jsx > Javascript Test > import types 1`] = `
"'function' is not allowed as a variable declaration name. (15:9)
  13 |   function RenderContent(props) {
  14 |
> 15 |   const function getRenderContentProps(block, index) {
     |         ^
  16 | return {
  17 | block: block,
  18 | index: index"
`;

exports[`React - stateType: variables > jsx > Javascript Test > multipleOnUpdate 1`] = `
"\\"use client\\";
import * as React from \\"react\\";
import { useEffect } from \\"react\\";

function MultipleOnUpdate(props) {
  useEffect(() => {
    console.log(\\"Runs on every update/rerender\\");
  });
  useEffect(() => {
    console.log(\\"Runs on every update/rerender as well\\");
  });

  return <div />;
}

export default MultipleOnUpdate;
"
`;

exports[`React - stateType: variables > jsx > Javascript Test > multipleOnUpdateWithDeps 1`] = `
"\\"use client\\";
import * as React from \\"react\\";
import { useEffect } from \\"react\\";

function MultipleOnUpdateWithDeps(props) {
  const a = \\"a\\";
  const b = \\"b\\";
  const c = \\"c\\";
  const d = \\"d\\";

  useEffect(() => {
    console.log(\\"Runs when a or b changes\\", a, b);

    if (a === \\"a\\") {
      a = \\"b\\";
    }
  }, [a, b]);
  useEffect(() => {
    console.log(\\"Runs when c or d changes\\", c, d);

    if (a === \\"a\\") {
      a = \\"b\\";
    }
  }, [c, d]);

  return <div />;
}

export default MultipleOnUpdateWithDeps;
"
`;

exports[`React - stateType: variables > jsx > Javascript Test > multipleSpreads 1`] = `
"\\"use client\\";
import * as React from \\"react\\";

function MyBasicComponent(props) {
  const attrs = {
    hello: \\"world\\",
  };

  return <input {...attrs} {...props} />;
}

export default MyBasicComponent;
"
`;

exports[`React - stateType: variables > jsx > Javascript Test > nestedShow 1`] = `
"import * as React from \\"react\\";

function NestedShow(props) {
  return (
    <>
      {props.conditionA ? (
        <>
          {!props.conditionB ? (
            <div>if condition A and condition B</div>
          ) : (
            <div>else-condition-B</div>
          )}
        </>
      ) : (
        <div>else-condition-A</div>
      )}
    </>
  );
}

export default NestedShow;
"
`;

exports[`React - stateType: variables > jsx > Javascript Test > nestedStyles 1`] = `
"import * as React from \\"react\\";

function NestedStyles(props) {
  return (
    <>
      <div className=\\"div\\">Hello world</div>
      <style jsx>{\`
        .div {
          display: flex;
          --bar: red;
          color: var(--bar);
        }
        @media (max-width: env(--mobile)) {
          .div {
            display: block;
          }
        }
        .div:hover {
          display: flex;
        }
        .div:active {
          display: inline;
        }
        .div .nested-selector {
          display: grid;
        }
        .div .nested-selector:hover {
          display: block;
        }
        .div.nested-selector:active {
          display: inline-block;
        }
      \`}</style>
    </>
  );
}

export default NestedStyles;
"
`;

exports[`React - stateType: variables > jsx > Javascript Test > onEvent 1`] = `
"'function' is not allowed as a variable declaration name. (17:7)
  15 |
  16 |   const elem = useRef(null);
> 17 | const function foo(event) {
     |       ^
  18 | console.log('test2');
  19 | }
  20 | const function elem_onInitEditingBldr(event) {"
`;

exports[`React - stateType: variables > jsx > Javascript Test > onInit & onMount 1`] = `
"\\"use client\\";
import * as React from \\"react\\";
import { useRef, useEffect } from \\"react\\";

function OnInit(props) {
  const hasInitialized = useRef(false);
  if (!hasInitialized.current) {
    console.log(\\"onInit\\");
    hasInitialized.current = true;
  }

  useEffect(() => {
    console.log(\\"onMount\\");
  }, []);

  return <div />;
}

export default OnInit;
"
`;

exports[`React - stateType: variables > jsx > Javascript Test > onInit 1`] = `
"\\"use client\\";
import * as React from \\"react\\";
import { useRef } from \\"react\\";

export const defaultValues = {
  name: \\"PatrickJS\\",
};

function OnInit(props) {
  const name = \\"\\";

  const hasInitialized = useRef(false);
  if (!hasInitialized.current) {
    name = defaultValues.name || props.name;
    console.log(\\"set defaults with props\\");
    hasInitialized.current = true;
  }

  return <div>Default name defined by parent {name}</div>;
}

export default OnInit;
"
`;

exports[`React - stateType: variables > jsx > Javascript Test > onInitPlain 1`] = `
"import * as React from \\"react\\";
import { useRef } from \\"react\\";

function OnInitPlain(props) {
  const hasInitialized = useRef(false);
  if (!hasInitialized.current) {
    console.log(\\"onInit\\");
    hasInitialized.current = true;
  }

  return <div />;
}

export default OnInitPlain;
"
`;

exports[`React - stateType: variables > jsx > Javascript Test > onMount 1`] = `
"\\"use client\\";
import * as React from \\"react\\";
import { useEffect } from \\"react\\";

function Comp(props) {
  useEffect(() => {
    console.log(\\"Runs on mount\\");
  }, []);

  useEffect(() => {
    return () => {
      console.log(\\"Runs on unMount\\");
    };
  }, []);

  return <div />;
}

export default Comp;
"
`;

exports[`React - stateType: variables > jsx > Javascript Test > onMountMultiple 1`] = `
"\\"use client\\";
import * as React from \\"react\\";
import { useEffect } from \\"react\\";

function Comp(props) {
  useEffect(() => {
    console.log(\\"Runs on mount\\");
  }, []);
  useEffect(() => {
    console.log(\\"Another one runs on Mount\\");
  }, []);
  useEffect(() => {
    console.log(\\"SSR runs on Mount\\");
  }, []);

  return <div />;
}

export default Comp;
"
`;

exports[`React - stateType: variables > jsx > Javascript Test > onUpdate 1`] = `
"\\"use client\\";
import * as React from \\"react\\";
import { useEffect } from \\"react\\";

function OnUpdate(props) {
  useEffect(() => {
    console.log(\\"Runs on every update/rerender\\");
  });

  return <div />;
}

export default OnUpdate;
"
`;

exports[`React - stateType: variables > jsx > Javascript Test > onUpdateWithDeps 1`] = `
"\\"use client\\";
import * as React from \\"react\\";
import { useEffect } from \\"react\\";

function OnUpdateWithDeps(props) {
  const a = \\"a\\";
  const b = \\"b\\";

  useEffect(() => {
    console.log(\\"Runs when a, b or size changes\\", a, b, props.size);
  }, [a, b, props.size]);

  return <div />;
}

export default OnUpdateWithDeps;
"
`;

exports[`React - stateType: variables > jsx > Javascript Test > preserveExportOrLocalStatement 1`] = `
"import * as React from \\"react\\";

const b = 3;
const foo = () => {};
export const a = 3;
export const bar = () => {};
export function run(value) {}

function MyBasicComponent(props) {
  return <div />;
}

export default MyBasicComponent;
"
`;

exports[`React - stateType: variables > jsx > Javascript Test > preserveTyping 1`] = `
"import * as React from \\"react\\";

function MyBasicComponent(props) {
  return (
    <div>Hello! I can run in React, Vue, Solid, or Liquid! {props.name}</div>
  );
}

export default MyBasicComponent;
"
`;

exports[`React - stateType: variables > jsx > Javascript Test > propsDestructure 1`] = `
"\\"use client\\";
import * as React from \\"react\\";

function MyBasicComponent(props) {
  const name = \\"Decadef20\\";

  return (
    <div>
      {props.children}
      {props.type}
      Hello! I can run in React, Vue, Solid, or Liquid!
    </div>
  );
}

export default MyBasicComponent;
"
`;

exports[`React - stateType: variables > jsx > Javascript Test > propsInterface 1`] = `
"import * as React from \\"react\\";

function MyBasicComponent(props) {
  return (
    <div>Hello! I can run in React, Vue, Solid, or Liquid! {props.name}</div>
  );
}

export default MyBasicComponent;
"
`;

exports[`React - stateType: variables > jsx > Javascript Test > propsType 1`] = `
"import * as React from \\"react\\";

function MyBasicComponent(props) {
  return (
    <div>Hello! I can run in React, Vue, Solid, or Liquid! {props.name}</div>
  );
}

export default MyBasicComponent;
"
`;

exports[`React - stateType: variables > jsx > Javascript Test > referencingFunInsideHook 1`] = `
"\\"use client\\";
import * as React from \\"react\\";
import { useEffect } from \\"react\\";

function OnUpdate(props) {
  const foo = function foo(params) {};
  const bar = function bar() {};
  const zoo = function zoo() {
    const params = {
      cb: bar,
    };
  };

  useEffect(() => {
    foo({
      someOption: bar,
    });
  });

  return <div />;
}

export default OnUpdate;
"
`;

exports[`React - stateType: variables > jsx > Javascript Test > renderBlock 1`] = `
"'function' is not allowed as a variable declaration name. (29:10)
  27 |    function RenderBlock(props) {
  28 |
> 29 |    const function component() {
     |          ^
  30 | const componentName = getProcessedBlock({
  31 |  block: props.block,
  32 |  state: props.context.state,"
`;

exports[`React - stateType: variables > jsx > Javascript Test > renderContentExample 1`] = `
"\\"use client\\";
import * as React from \\"react\\";
import { useContext, useEffect } from \\"react\\";
import BuilderContext from \\"@dummy/context.js\\";
import {
  dispatchNewContentToVisualEditor,
  sendComponentsToVisualEditor,
  trackClick,
} from \\"@dummy/injection-js\\";
import RenderBlocks from \\"@dummy/RenderBlocks\\";

function RenderContent(props) {
  useEffect(() => {
    sendComponentsToVisualEditor(props.customComponents);
  }, []);
  useEffect(() => {
    dispatchNewContentToVisualEditor(props.content);
  }, [props.content]);

  return (
    <>
      <BuilderContext.Provider
        value={{
          get content() {
            return 3;
          },

          get registeredComponents() {
            return 4;
          },
        }}
      >
        <div className=\\"div\\" onClick={(event) => trackClick(props.content.id)}>
          <RenderBlocks blocks={props.content.blocks} />
        </div>
      </BuilderContext.Provider>
      <style jsx>{\`
        .div {
          display: flex;
          flex-direction: columns;
        }
      \`}</style>
    </>
  );
}

export default RenderContent;
"
`;

exports[`React - stateType: variables > jsx > Javascript Test > rootFragmentMultiNode 1`] = `
"import * as React from \\"react\\";

function Button(props) {
  return (
    <>
      {props.link ? (
        <a
          {...props.attributes}
          href={props.link}
          target={props.openLinkInNewTab ? \\"_blank\\" : undefined}
        >
          {props.text}
        </a>
      ) : null}
      {!props.link ? (
        <button type=\\"button\\" {...props.attributes}>
          {props.text}
        </button>
      ) : null}
    </>
  );
}

export default Button;
"
`;

exports[`React - stateType: variables > jsx > Javascript Test > rootShow 1`] = `
"import * as React from \\"react\\";

function RenderStyles(props) {
  return (
    <>
      {props.foo === \\"bar\\" ? (
        <>
          <div>Bar</div>
        </>
      ) : (
        <div>Foo</div>
      )}
    </>
  );
}

export default RenderStyles;
"
`;

exports[`React - stateType: variables > jsx > Javascript Test > self-referencing component 1`] = `
"import * as React from \\"react\\";

function MyComponent(props) {
  return (
    <div>
      {props.name}
      {props.name === \\"Batman\\" ? <MyComponent name=\\"Bruce Wayne\\" /> : null}
    </div>
  );
}

export default MyComponent;
"
`;

exports[`React - stateType: variables > jsx > Javascript Test > self-referencing component with children 1`] = `
"import * as React from \\"react\\";

function MyComponent(props) {
  return (
    <div>
      {props.name}
      {props.children}
      {props.name === \\"Batman\\" ? (
        <MyComponent name=\\"Bruce\\">
          <div>Wayne</div>
        </MyComponent>
      ) : null}
    </div>
  );
}

export default MyComponent;
"
`;

exports[`React - stateType: variables > jsx > Javascript Test > setState 1`] = `
"'function' is not allowed as a variable declaration name. (17:7)
  15 |
  16 |   const n= ['123']
> 17 | const function someFn() {
     |       ^
  18 | n[0] = '123';
  19 | }
  20 |"
`;

exports[`React - stateType: variables > jsx > Javascript Test > showExpressions 1`] = `
"import * as React from \\"react\\";

function ShowWithOtherValues(props) {
  return (
    <div>
      {props.conditionA ? <>Content0</> : <>ContentA</>}
      {props.conditionA ? <>ContentA</> : null}
      {props.conditionA ? <></> : <>ContentA</>}
      {props.conditionA ? <>ContentB</> : <>{undefined}</>}
      {props.conditionA ? <>{undefined}</> : <>ContentB</>}
      {props.conditionA ? <>ContentC</> : null}
      {props.conditionA ? <></> : <>ContentC</>}
      {props.conditionA ? <>ContentD</> : null}
      {props.conditionA ? <></> : <>ContentD</>}
      {props.conditionA ? <>ContentE</> : <>hello</>}
      {props.conditionA ? <>hello</> : <>ContentE</>}
      {props.conditionA ? <>ContentF</> : <>123</>}
      {props.conditionA ? <>123</> : <>ContentF</>}
      {props.conditionA === \\"Default\\" ? (
        <>4mb</>
      ) : props.conditionB === \\"Complete\\" ? (
        <>20mb</>
      ) : (
        <>9mb</>
      )}
      {props.conditionA === \\"Default\\" ? (
        <>{props.conditionB === \\"Complete\\" ? <>20mb</> : <>9mb</>}</>
      ) : (
        <>4mb</>
      )}
      {props.conditionA === \\"Default\\" ? (
        <>{props.conditionB === \\"Complete\\" ? <div>complete</div> : <>9mb</>}</>
      ) : props.conditionC === \\"Complete\\" ? (
        <>dff</>
      ) : (
        <div>complete else</div>
      )}
    </div>
  );
}

export default ShowWithOtherValues;
"
`;

exports[`React - stateType: variables > jsx > Javascript Test > showWithFor 1`] = `
"import * as React from \\"react\\";

function NestedShow(props) {
  return (
    <>
      {props.conditionA ? (
        <>
          {props.items?.map((item, idx) => (
            <div key={idx}>{item}</div>
          ))}
        </>
      ) : (
        <div>else-condition-A</div>
      )}
    </>
  );
}

export default NestedShow;
"
`;

exports[`React - stateType: variables > jsx > Javascript Test > showWithOtherValues 1`] = `
"import * as React from \\"react\\";

function ShowWithOtherValues(props) {
  return (
    <div>
      {props.conditionA ? <>ContentA</> : null}
      {props.conditionA ? <>ContentB</> : <>{undefined}</>}
      {props.conditionA ? <>ContentC</> : null}
      {props.conditionA ? <>ContentD</> : null}
      {props.conditionA ? <>ContentE</> : <>hello</>}
      {props.conditionA ? <>ContentF</> : <>123</>}
    </div>
  );
}

export default ShowWithOtherValues;
"
`;

exports[`React - stateType: variables > jsx > Javascript Test > showWithRootText 1`] = `
"import * as React from \\"react\\";

function ShowRootText(props) {
  return <>{props.conditionA ? <>ContentA</> : <div>else-condition-A</div>}</>;
}

export default ShowRootText;
"
`;

exports[`React - stateType: variables > jsx > Javascript Test > signalsOnUpdate 1`] = `
"\\"use client\\";
import * as React from \\"react\\";
import { useEffect } from \\"react\\";

function MyBasicComponent(props) {
  useEffect(() => {
    console.log(\\"props.id changed\\", props.id);
    console.log(\\"props.foo.value.bar.baz changed\\", props.foo.value.bar.baz);
  }, [props.id, props.foo.value.bar.baz]);

  return (
    <>
      <div className=\\"test div\\">
        {props.id}
        {props.foo.value.bar.baz}
      </div>
      <style jsx>{\`
        .div {
          padding: 10px;
        }
      \`}</style>
    </>
  );
}

export default MyBasicComponent;
"
`;

exports[`React - stateType: variables > jsx > Javascript Test > spreadAttrs 1`] = `
"import * as React from \\"react\\";

function MyBasicComponent(props) {
  return <input {...attrs} />;
}

export default MyBasicComponent;
"
`;

exports[`React - stateType: variables > jsx > Javascript Test > spreadNestedProps 1`] = `
"import * as React from \\"react\\";

function MyBasicComponent(props) {
  return <input {...props.nested} />;
}

export default MyBasicComponent;
"
`;

exports[`React - stateType: variables > jsx > Javascript Test > spreadProps 1`] = `
"import * as React from \\"react\\";

function MyBasicComponent(props) {
  return <input {...props} />;
}

export default MyBasicComponent;
"
`;

exports[`React - stateType: variables > jsx > Javascript Test > store-async-function 1`] = `
"import * as React from \\"react\\";

function StringLiteralStore(props) {
  const arrowFunction = async function arrowFunction() {
    return Promise.resolve();
  };
  const namedFunction = async function namedFunction() {
    return Promise.resolve();
  };
  const fetchUsers = async function fetchUsers() {
    return Promise.resolve();
  };

  return <div />;
}

export default StringLiteralStore;
"
`;

exports[`React - stateType: variables > jsx > Javascript Test > string-literal-store 1`] = `
"\\"use client\\";
import * as React from \\"react\\";

function StringLiteralStore(props) {
  const foo = 123;

  return <div>{foo}</div>;
}

export default StringLiteralStore;
"
`;

exports[`React - stateType: variables > jsx > Javascript Test > styleClassAndCss 1`] = `
"import * as React from \\"react\\";

function MyComponent(props) {
  return (
    <>
      <div
        className=\\"builder-column div\\"
        style={{
          width: \\"100%\\",
        }}
      />
      <style jsx>{\`
        .div {
          display: flex;
          flex-direction: column;
          align-items: stretch;
        }
      \`}</style>
    </>
  );
}

export default MyComponent;
"
`;

exports[`React - stateType: variables > jsx > Javascript Test > stylePropClassAndCss 1`] = `
"import * as React from \\"react\\";

function StylePropClassAndCss(props) {
  return (
    <>
      <div
        style={props.attributes.style}
        className={props.attributes.class + \\" div\\"}
      />
      <style jsx>{\`
        .div {
          display: flex;
          flex-direction: column;
          align-items: stretch;
        }
      \`}</style>
    </>
  );
}

export default StylePropClassAndCss;
"
`;

exports[`React - stateType: variables > jsx > Javascript Test > subComponent 1`] = `
"import * as React from \\"react\\";
import Foo from \\"./foo-sub-component\\";

function SubComponent(props) {
  return <Foo />;
}

export default SubComponent;
"
`;

exports[`React - stateType: variables > jsx > Javascript Test > svgComponent 1`] = `
"import * as React from \\"react\\";

function SvgComponent(props) {
  return (
    <svg
      fill=\\"none\\"
      role=\\"img\\"
      viewBox={\\"0 0 \\" + 42 + \\" \\" + 42}
      width={42}
      height={42}
    >
      <defs>
        <filter id=\\"prefix__filter0_f\\" filterUnits=\\"userSpaceOnUse\\">
          <feFlood result=\\"BackgroundImageFix\\" />
          <feBlend in=\\"SourceGraphic\\" in2=\\"BackgroundImageFix\\" result=\\"shape\\" />
          <feGaussianBlur result=\\"effect1_foregroundBlur\\" stdDeviation={7} />
        </filter>
      </defs>
    </svg>
  );
}

export default SvgComponent;
"
`;

exports[`React - stateType: variables > jsx > Javascript Test > typeDependency 1`] = `
"import * as React from \\"react\\";

function TypeDependency(props) {
  return <div>{props.foo}</div>;
}

export default TypeDependency;
"
`;

exports[`React - stateType: variables > jsx > Javascript Test > typeExternalStore 1`] = `
"\\"use client\\";
import * as React from \\"react\\";

function TypeExternalStore(props) {
  const _name = \\"test\\";

  return <div>Hello {_name}! </div>;
}

export default TypeExternalStore;
"
`;

exports[`React - stateType: variables > jsx > Javascript Test > typeGetterStore 1`] = `
"'function' is not allowed as a variable declaration name. (17:7)
  15 |
  16 |   const name= 'test'
> 17 | const function getName() {
     |       ^
  18 | if (name === 'a') {
  19 | return 'b';
  20 | }"
`;

exports[`React - stateType: variables > jsx > Javascript Test > use-style 1`] = `
"import * as React from \\"react\\";

function MyComponent(props) {
  return (
    <>
      <button type=\\"button\\">Button</button>
      <style jsx>{\`
        button {
          background: blue;
          color: white;
          font-size: 12px;
          outline: 1px solid black;
        }
      \`}</style>
    </>
  );
}

export default MyComponent;
"
`;

exports[`React - stateType: variables > jsx > Javascript Test > use-style-and-css 1`] = `
"import * as React from \\"react\\";

function MyComponent(props) {
  return (
    <>
      <button type=\\"button\\" className=\\"button\\">
        Button
      </button>
      <style jsx>{\`
        button {
          font-size: 12px;
          outline: 1px solid black;
        }

        .button {
          background: blue;
          color: white;
        }
      \`}</style>
    </>
  );
}

export default MyComponent;
"
`;

exports[`React - stateType: variables > jsx > Javascript Test > use-style-outside-component 1`] = `
"import * as React from \\"react\\";

function MyComponent(props) {
  return (
    <>
      <button type=\\"button\\">Button</button>
      <style jsx>{\`
        button {
          background: blue;
          color: white;
          font-size: 12px;
          outline: 1px solid black;
        }
      \`}</style>
    </>
  );
}

export default MyComponent;
"
`;

exports[`React - stateType: variables > jsx > Javascript Test > useTarget 1`] = `
"'function' is not allowed as a variable declaration name. (16:9)
  14 |   function UseTargetComponent(props) {
  15 |
> 16 |   const function name() {
     |         ^
  17 | const prefix = 123;
  18 | return prefix + 'foo';
  19 | }"
`;

exports[`React - stateType: variables > jsx > Javascript Test > webComponent 1`] = `
"import * as React from \\"react\\";
import { useRef } from \\"react\\";
import { register } from \\"swiper/element/bundle\\";

function MyBasicWebComponent(props) {
  const hasInitialized = useRef(false);
  if (!hasInitialized.current) {
    register();
    hasInitialized.current = true;
  }

  return (
    <swiper-container slides-per-view=\\"3\\" navigation=\\"true\\" pagination=\\"true\\">
      <swiper-slide>Slide 1</swiper-slide>
      <swiper-slide>Slide 2</swiper-slide>
      <swiper-slide>Slide 3</swiper-slide>
    </swiper-container>
  );
}

export default MyBasicWebComponent;
"
`;

exports[`React - stateType: variables > jsx > Remove Internal mitosis package 1`] = `
"\\"use client\\";
import * as React from \\"react\\";

function MyBasicComponent(props) {
  const name = \\"PatrickJS\\";

  return (
    <div>Hello {name}! I can run in React, Qwik, Vue, Solid, or Liquid!</div>
  );
}

export default MyBasicComponent;
"
`;

exports[`React - stateType: variables > jsx > Typescript Test > AdvancedRef 1`] = `
"\\"use client\\";
import * as React from \\"react\\";
import { useRef, useEffect } from \\"react\\";

export interface Props {
  showInput: boolean;
}

function MyBasicRefComponent(props: Props) {
  const inputRef = useRef<HTMLInputElement>(null);
  const inputNoArgRef = useRef<HTMLLabelElement>(null);
  const name = \\"PatrickJS\\";
  const onBlur = function onBlur() {
    // Maintain focus
    inputRef.current.focus();
  };
  const lowerCaseName = function lowerCaseName() {
    return name.toLowerCase();
  };

  useEffect(() => {
    console.log(\\"Received an update\\");
  }, [inputRef.current, inputNoArgRef.current]);

  return (
    <>
      <div>
        {props.showInput ? (
          <>
            <input
              className=\\"input\\"
              ref={inputRef}
              value={name}
              onBlur={(event) => onBlur()}
              onChange={(event) => (name = event.target.value)}
            />
            <label htmlFor=\\"cars\\" ref={inputNoArgRef}>
              Choose a car:
            </label>
            <select name=\\"cars\\" id=\\"cars\\">
              <option value=\\"supra\\">GR Supra</option>
              <option value=\\"86\\">GR 86</option>
            </select>
          </>
        ) : null}
        Hello
        {lowerCaseName()}! I can run in React, Qwik, Vue, Solid, or Web
        Component!
      </div>
      <style jsx>{\`
        .input {
          color: red;
        }
      \`}</style>
    </>
  );
}

export default MyBasicRefComponent;
"
`;

exports[`React - stateType: variables > jsx > Typescript Test > Basic 1`] = `
"'function' is not allowed as a variable declaration name. (21:7)
  19 |
  20 |   const name= 'Steve'
> 21 | const function underscore_fn_name() {
     |       ^
  22 | return 'bar';
  23 | }
  24 | const age= 1"
`;

exports[`React - stateType: variables > jsx > Typescript Test > Basic Context 1`] = `
"\\"use client\\";
import * as React from \\"react\\";
import { useContext, useRef, useEffect } from \\"react\\";
import { Injector, MyService, createInjector } from \\"@dummy/injection-js\\";

function MyBasicComponent(props: any) {
  const name = \\"PatrickJS\\";
  const onChange = function onChange() {
    const change = myService.method(\\"change\\");
    console.log(change);
  };

  const myService = useContext(MyService);

  const hasInitialized = useRef(false);
  if (!hasInitialized.current) {
    const hi = myService.method(\\"hi\\");
    console.log(hi);
    hasInitialized.current = true;
  }

  useEffect(() => {
    const bye = myService.method(\\"hi\\");
    console.log(bye);
  }, []);

  return (
    <Injector.Provider value={createInjector()}>
      <div>
        {myService.method(\\"hello\\") + name}
        Hello! I can run in React, Vue, Solid, or Liquid!
        <input onChange={(event) => onChange} />
      </div>
    </Injector.Provider>
  );
}

export default MyBasicComponent;
"
`;

exports[`React - stateType: variables > jsx > Typescript Test > Basic OnMount Update 1`] = `
"\\"use client\\";
import * as React from \\"react\\";
import { useRef, useEffect } from \\"react\\";

export interface Props {
  hi: string;
  bye: string;
}

function MyBasicOnMountUpdateComponent(props: Props) {
  const name = \\"PatrickJS\\";
  const names = [\\"Steve\\", \\"PatrickJS\\"];

  const hasInitialized = useRef(false);
  if (!hasInitialized.current) {
    name = \\"PatrickJS onInit\\" + props.hi;
    hasInitialized.current = true;
  }

  useEffect(() => {
    name = \\"PatrickJS onMount\\" + props.bye;
  }, []);

  return <div>Hello {name}</div>;
}

export default MyBasicOnMountUpdateComponent;
"
`;

exports[`React - stateType: variables > jsx > Typescript Test > Basic Outputs 1`] = `
"\\"use client\\";
import * as React from \\"react\\";
import { useEffect } from \\"react\\";

function MyBasicOutputsComponent(props: any) {
  const name = \\"PatrickJS\\";

  useEffect(() => {
    props.onMessage(name);
    props.onEvent(props.message);
  }, []);

  return <div />;
}

export default MyBasicOutputsComponent;
"
`;

exports[`React - stateType: variables > jsx > Typescript Test > Basic Outputs Meta 1`] = `
"/**
          useMetadata:
          {\\"outputs\\":[\\"onMessage\\",\\"onEvent\\"],\\"baz\\":\\"metadata inside component\\"}
          */

\\"use client\\";
import * as React from \\"react\\";
import { useEffect } from \\"react\\";

function MyBasicOutputsComponent(props: any) {
  const name = \\"PatrickJS\\";

  useEffect(() => {
    props.onMessage(name);
    props.onEvent(props.message);
  }, []);

  return <div />;
}

export default MyBasicOutputsComponent;
"
`;

exports[`React - stateType: variables > jsx > Typescript Test > BasicAttribute 1`] = `
"import * as React from \\"react\\";

function MyComponent(props: any) {
  return <input autoCapitalize=\\"on\\" autoComplete=\\"on\\" spellCheck />;
}

export default MyComponent;
"
`;

exports[`React - stateType: variables > jsx > Typescript Test > BasicBooleanAttribute 1`] = `
"import * as React from \\"react\\";

type Props = {
  children: any;
  type: string;
};
import MyBooleanAttributeComponent from \\"./basic-boolean-attribute-component.raw\\";

function MyBooleanAttribute(props: Props) {
  return (
    <div>
      {props.children ? (
        <>
          {props.children}
          {props.type}
        </>
      ) : null}
      <MyBooleanAttributeComponent toggle />
      <MyBooleanAttributeComponent toggle />
      <MyBooleanAttributeComponent list={null} />
    </div>
  );
}

export default MyBooleanAttribute;
"
`;

exports[`React - stateType: variables > jsx > Typescript Test > BasicChildComponent 1`] = `
"\\"use client\\";
import * as React from \\"react\\";
import MyBasicOnMountUpdateComponent from \\"./basic-onMount-update.raw\\";
import MyBasicComponent from \\"./basic.raw\\";

function MyBasicChildComponent(props: any) {
  const name = \\"Steve\\";
  const dev = \\"PatrickJS\\";

  return (
    <div>
      <MyBasicComponent id={dev} />
      <div>
        <MyBasicOnMountUpdateComponent hi={name} bye={dev} />
      </div>
    </div>
  );
}

export default MyBasicChildComponent;
"
`;

exports[`React - stateType: variables > jsx > Typescript Test > BasicFor 1`] = `
"\\"use client\\";
import * as React from \\"react\\";
import { useEffect } from \\"react\\";

function MyBasicForComponent(props: any) {
  const name = \\"PatrickJS\\";
  const names = [\\"Steve\\", \\"PatrickJS\\"];

  useEffect(() => {
    console.log(\\"onMount code\\");
  }, []);

  return (
    <div>
      {names?.map((person) => (
        <>
          <input
            value={name}
            onChange={(event) => {
              name = event.target.value + \\" and \\" + person;
            }}
          />
          Hello
          {person}! I can run in Qwik, Web Component, React, Vue, Solid, or
          Liquid!
        </>
      ))}
    </div>
  );
}

export default MyBasicForComponent;
"
`;

exports[`React - stateType: variables > jsx > Typescript Test > BasicRef 1`] = `
"\\"use client\\";
import * as React from \\"react\\";
import { useRef } from \\"react\\";

export interface Props {
  showInput: boolean;
}

function MyBasicRefComponent(props: Props) {
  const inputRef = useRef<HTMLInputElement | null>(null);
  const inputNoArgRef = useRef<HTMLLabelElement | null>(null);
  const name = \\"PatrickJS\\";
  const onBlur = function onBlur() {
    // Maintain focus
    inputRef.current?.focus();
  };
  const lowerCaseName = function lowerCaseName() {
    return name.toLowerCase();
  };

  return (
    <>
      <div>
        {props.showInput ? (
          <>
            <input
              className=\\"input\\"
              ref={inputRef}
              value={name}
              onBlur={(event) => onBlur()}
              onChange={(event) => (name = event.target.value)}
            />
            <label htmlFor=\\"cars\\" ref={inputNoArgRef}>
              Choose a car:
            </label>
            <select name=\\"cars\\" id=\\"cars\\">
              <option value=\\"supra\\">GR Supra</option>
              <option value=\\"86\\">GR 86</option>
            </select>
          </>
        ) : null}
        Hello
        {lowerCaseName()}! I can run in React, Qwik, Vue, Solid, or Web
        Component!
      </div>
      <style jsx>{\`
        .input {
          color: red;
        }
      \`}</style>
    </>
  );
}

export default MyBasicRefComponent;
"
`;

exports[`React - stateType: variables > jsx > Typescript Test > BasicRefAssignment 1`] = `
"\\"use client\\";
import * as React from \\"react\\";
import { useRef } from \\"react\\";

export interface Props {
  showInput: boolean;
}

function MyBasicRefAssignmentComponent(props: Props) {
  const holdValueRef = useRef(\\"Patrick\\");
  const handlerClick = function handlerClick(event: Event) {
    event.preventDefault();
    console.log(\\"current value\\", holdValueRef.current);
    holdValueRef.current = holdValueRef.current + \\"JS\\";
  };

  return (
    <div>
      <button onClick={async (evt) => await handlerClick(evt)}>Click</button>
    </div>
  );
}

export default MyBasicRefAssignmentComponent;
"
`;

exports[`React - stateType: variables > jsx > Typescript Test > BasicRefPrevious 1`] = `
"\\"use client\\";
import * as React from \\"react\\";
import { useRef, useEffect } from \\"react\\";

export interface Props {
  showInput: boolean;
}

export function usePrevious<T>(value: T) {
  // The ref object is a generic container whose current property is mutable ...
  // ... and can hold any value, similar to an instance property on a class
  let ref = useRef<T>(null); // Store current value in ref

  onUpdate(() => {
    ref = value;
  }, [value]); // Only re-run if value changes
  // Return previous value (happens before update in useEffect above)

  return ref;
}

function MyPreviousComponent(props: Props) {
  const count = 0;

  const prevCount = useRef(state.count);

  useEffect(() => {
    prevCount.current = count;
  }, [count]);

  return (
    <div>
      <h1>
        Now: {count}, before: {prevCount.current}
      </h1>
      <button onClick={(event) => (count += 1)}>Increment</button>
    </div>
  );
}

export default MyPreviousComponent;
"
`;

exports[`React - stateType: variables > jsx > Typescript Test > Button 1`] = `
"import * as React from \\"react\\";

export interface ButtonProps {
  attributes?: any;
  text?: string;
  link?: string;
  openLinkInNewTab?: boolean;
}

function Button(props: ButtonProps) {
  return (
    <div>
      {props.link ? (
        <a
          {...props.attributes}
          href={props.link}
          target={props.openLinkInNewTab ? \\"_blank\\" : undefined}
        >
          {props.text}
        </a>
      ) : null}
      {!props.link ? (
        <button type=\\"button\\" {...props.attributes}>
          {props.text}
        </button>
      ) : null}
    </div>
  );
}

export default Button;
"
`;

exports[`React - stateType: variables > jsx > Typescript Test > Columns 1`] = `
"'function' is not allowed as a variable declaration name. (28:9)
  26 |   function Column(props:ColumnProps) {
  27 |
> 28 |   const function getColumns() {
     |         ^
  29 | return props.columns || [];
  30 | }
  31 | const function getGutterSize() {"
`;

exports[`React - stateType: variables > jsx > Typescript Test > ContentSlotHtml 1`] = `
"import * as React from \\"react\\";

type Props = {
  [key: string]: string | JSX.Element;
  slotTesting: JSX.Element;
};
import type { JSX } from \\"../../../../jsx-runtime\\";

function ContentSlotCode(props: Props) {
  return (
    <div>
      <>{props.slotTesting}</>
      <div>
        <hr />
      </div>
      <div>
        <>{props.children}</>
      </div>
    </div>
  );
}

export default ContentSlotCode;
"
`;

exports[`React - stateType: variables > jsx > Typescript Test > ContentSlotJSX 1`] = `
"'function' is not allowed as a variable declaration name. (20:7)
  18 |   const name= 'king'
  19 | const showContent= false
> 20 | const function cls() {
     |       ^
  21 | return props.slotContent && props.children ? \`\${name}-content\` : '';
  22 | }
  23 | const function show() {"
`;

exports[`React - stateType: variables > jsx > Typescript Test > CustomCode 1`] = `
"'function' is not allowed as a variable declaration name. (22:7)
  20 | const scriptsInserted= []
  21 | const scriptsRun= []
> 22 | const function findAndRunScripts() {
     |       ^
  23 | // TODO: Move this function to standalone one in '@builder.io/utils'
  24 | if (elem.current && typeof window !== 'undefined') {
  25 | /** @type {HTMLScriptElement[]} */"
`;

exports[`React - stateType: variables > jsx > Typescript Test > Embed 1`] = `
"'function' is not allowed as a variable declaration name. (22:7)
  20 | const scriptsInserted= []
  21 | const scriptsRun= []
> 22 | const function findAndRunScripts() {
     |       ^
  23 | // TODO: Move this function to standalone one in '@builder.io/utils'
  24 | if (elem.current && typeof window !== 'undefined') {
  25 | /** @type {HTMLScriptElement[]} */"
`;

exports[`React - stateType: variables > jsx > Typescript Test > Form 1`] = `
"'function' is not allowed as a variable declaration name. (43:7)
  41 | const responseData= null
  42 | const formErrorMessage= ''
> 43 | const function submissionState() {
     |       ^
  44 | return Builder.isEditing && props.previewState || formState;
  45 | }
  46 | const function onSubmit(event: Event & {"
`;

exports[`React - stateType: variables > jsx > Typescript Test > Image 1`] = `
"'function' is not allowed as a variable declaration name. (36:7)
  34 | const scrollListener= null
  35 | const imageLoaded= false
> 36 | const function setLoaded() {
     |       ^
  37 | imageLoaded = true;
  38 | }
  39 | const function useLazyLoading() {"
`;

exports[`React - stateType: variables > jsx > Typescript Test > Image State 1`] = `
"\\"use client\\";
import * as React from \\"react\\";

function ImgStateComponent(props: any) {
  const canShow = true;
  const images = [\\"http://example.com/qwik.png\\"];

  return (
    <div>
      {images?.map((item, itemIndex) => (
        <img className=\\"custom-class\\" src={item} key={itemIndex} />
      ))}
    </div>
  );
}

export default ImgStateComponent;
"
`;

exports[`React - stateType: variables > jsx > Typescript Test > Img 1`] = `
"import * as React from \\"react\\";

export interface ImgProps {
  attributes?: any;
  imgSrc?: string;
  altText?: string;
  backgroundSize?: \\"cover\\" | \\"contain\\";
  backgroundPosition?:
    | \\"center\\"
    | \\"top\\"
    | \\"left\\"
    | \\"right\\"
    | \\"bottom\\"
    | \\"top left\\"
    | \\"top right\\"
    | \\"bottom left\\"
    | \\"bottom right\\";
}

import { Builder } from \\"@builder.io/sdk\\";

function ImgComponent(props: ImgProps) {
  return (
    <img
      style={{
        objectFit: props.backgroundSize || \\"cover\\",
        objectPosition: props.backgroundPosition || \\"center\\",
      }}
      {...props.attributes}
      key={(Builder.isEditing && props.imgSrc) || \\"default-key\\"}
      alt={props.altText}
      src={props.imgSrc}
    />
  );
}

export default ImgComponent;
"
`;

exports[`React - stateType: variables > jsx > Typescript Test > Input 1`] = `
"\\"use client\\";
import * as React from \\"react\\";

export interface FormInputProps {
  type?: string;
  attributes?: any;
  name?: string;
  value?: string;
  placeholder?: string;
  defaultValue?: string;
  required?: boolean;
  onChange?: (value: string) => void;
}

import { Builder } from \\"@builder.io/sdk\\";

function FormInputComponent(props: FormInputProps) {
  return (
    <input
      {...props.attributes}
      key={
        Builder.isEditing && props.defaultValue
          ? props.defaultValue
          : \\"default-key\\"
      }
      placeholder={props.placeholder}
      type={props.type}
      name={props.name}
      value={props.value}
      defaultValue={props.defaultValue}
      required={props.required}
      onChange={(event) => props.onChange?.(event.target.value)}
    />
  );
}

export default FormInputComponent;
"
`;

exports[`React - stateType: variables > jsx > Typescript Test > InputParent 1`] = `
"'function' is not allowed as a variable declaration name. (15:9)
  13 |   function Stepper(props:any) {
  14 |
> 15 |   const function handleChange(value: string) {
     |         ^
  16 | console.log(value);
  17 | }
  18 |"
`;

exports[`React - stateType: variables > jsx > Typescript Test > NestedStore 1`] = `
"\\"use client\\";
import * as React from \\"react\\";

type MyStore = {
  _id?: string;
  _messageId?: string;
};

function NestedStore(props: any) {
  const _id = \\"abc\\";
  const _messageId = _id + \\"-message\\";

  return (
    <div id={_id}>
      Test
      <p id={_messageId}>Message</p>
    </div>
  );
}

export default NestedStore;
"
`;

exports[`React - stateType: variables > jsx > Typescript Test > RawText 1`] = `
"import * as React from \\"react\\";

export interface RawTextProps {
  attributes?: any;
  text?: string; // builderBlock?: any;
}

function RawText(props: RawTextProps) {
  return (
    <span
      className={props.attributes?.class || props.attributes?.className}
      dangerouslySetInnerHTML={{ __html: props.text || \\"\\" }}
    />
  );
}

export default RawText;
"
`;

exports[`React - stateType: variables > jsx > Typescript Test > Section 1`] = `
"import * as React from \\"react\\";

export interface SectionProps {
  maxWidth?: number;
  attributes?: any;
  children?: any;
}

function SectionComponent(props: SectionProps) {
  return (
    <section
      {...props.attributes}
      style={
        props.maxWidth && typeof props.maxWidth === \\"number\\"
          ? {
              maxWidth: props.maxWidth,
            }
          : undefined
      }
    >
      {props.children}
    </section>
  );
}

export default SectionComponent;
"
`;

exports[`React - stateType: variables > jsx > Typescript Test > Select 1`] = `
"import * as React from \\"react\\";

export interface FormSelectProps {
  options?: {
    name?: string;
    value: string;
  }[];
  attributes?: any;
  name?: string;
  value?: string;
  defaultValue?: string;
}

import { Builder } from \\"@builder.io/sdk\\";

function SelectComponent(props: FormSelectProps) {
  return (
    <select
      {...props.attributes}
      value={props.value}
      key={
        Builder.isEditing && props.defaultValue
          ? props.defaultValue
          : \\"default-key\\"
      }
      defaultValue={props.defaultValue}
      name={props.name}
    >
      {props.options?.map((option, index) => (
        <option value={option.value} data-index={index}>
          {option.name || option.value}
        </option>
      ))}
    </select>
  );
}

export default SelectComponent;
"
`;

exports[`React - stateType: variables > jsx > Typescript Test > SlotDefault 1`] = `
"import * as React from \\"react\\";

type Props = {
  [key: string]: string;
};

function SlotCode(props: Props) {
  return (
    <div>
      <>
        {props.children || <div className=\\"default-slot\\">Default content</div>}
      </>
    </div>
  );
}

export default SlotCode;
"
`;

exports[`React - stateType: variables > jsx > Typescript Test > SlotHtml 1`] = `
"import * as React from \\"react\\";

type Props = {
  [key: string]: string;
};
import ContentSlotCode from \\"./content-slot-jsx.raw\\";

function SlotCode(props: Props) {
  return (
    <div>
      <ContentSlotCode testing={<div>Hello</div>}></ContentSlotCode>
    </div>
  );
}

export default SlotCode;
"
`;

exports[`React - stateType: variables > jsx > Typescript Test > SlotJsx 1`] = `
"import * as React from \\"react\\";

type Props = {
  [key: string]: string;
};
import ContentSlotCode from \\"./content-slot-jsx.raw\\";

function SlotCode(props: Props) {
  return (
    <div>
      <ContentSlotCode slotTesting={<div>Hello</div>} />
    </div>
  );
}

export default SlotCode;
"
`;

exports[`React - stateType: variables > jsx > Typescript Test > SlotNamed 1`] = `
"import * as React from \\"react\\";

type Props = {
  [key: string]: string;
};

function SlotCode(props: Props) {
  return (
    <div>
      <>{props.myAwesomeSlot}</>
      <>{props.top}</>
      <>{props.left || \\"Default left\\"}</>
      <>{props.children || \\"Default Child\\"}</>
    </div>
  );
}

export default SlotCode;
"
`;

exports[`React - stateType: variables > jsx > Typescript Test > Stamped.io 1`] = `
"'function' is not allowed as a variable declaration name. (22:7)
  20 | const name= 'test'
  21 | const showReviewPrompt= false
> 22 | const function kebabCaseValue() {
     |       ^
  23 | return kebabCase('testThat');
  24 | }
  25 | const function snakeCaseValue() {"
`;

exports[`React - stateType: variables > jsx > Typescript Test > StoreComment 1`] = `
"'function' is not allowed as a variable declaration name. (17:7)
  15 |
  16 |   const foo= true
> 17 | const function bar() {}
     |       ^
  18 |
  19 |
  20 |"
`;

exports[`React - stateType: variables > jsx > Typescript Test > StoreShadowVars 1`] = `
"'function' is not allowed as a variable declaration name. (17:7)
  15 |
  16 |   const errors= {}
> 17 | const function foo(errors) {
     |       ^
  18 | return errors;
  19 | }
  20 |"
`;

exports[`React - stateType: variables > jsx > Typescript Test > StoreWithState 1`] = `
"'function' is not allowed as a variable declaration name. (17:7)
  15 |
  16 |   const foo= false
> 17 | const function bar() {
     |       ^
  18 | return foo;
  19 | }
  20 |"
`;

exports[`React - stateType: variables > jsx > Typescript Test > Submit 1`] = `
"import * as React from \\"react\\";

export interface ButtonProps {
  attributes?: any;
  text?: string;
}

function SubmitButton(props: ButtonProps) {
  return (
    <button type=\\"submit\\" {...props.attributes}>
      {props.text}
    </button>
  );
}

export default SubmitButton;
"
`;

exports[`React - stateType: variables > jsx > Typescript Test > Text 1`] = `
"\\"use client\\";
import * as React from \\"react\\";

export interface TextProps {
  attributes?: any;
  rtlMode: boolean;
  text?: string;
  content?: string;
  builderBlock?: any;
}

import { Builder } from \\"@builder.io/sdk\\";

function Text(props: TextProps) {
  const name = \\"Decadef20\\";

  return (
    <div
      contentEditable={allowEditingText || undefined}
      data-name={{
        test: name || \\"any name\\",
      }}
      dangerouslySetInnerHTML={{
        __html:
          props.text ||
          props.content ||
          name ||
          '<p class=\\"text-lg\\">my name</p>',
      }}
    />
  );
}

export default Text;
"
`;

exports[`React - stateType: variables > jsx > Typescript Test > Textarea 1`] = `
"import * as React from \\"react\\";

export interface TextareaProps {
  attributes?: any;
  name?: string;
  value?: string;
  defaultValue?: string;
  placeholder?: string;
}

function Textarea(props: TextareaProps) {
  return (
    <textarea
      {...props.attributes}
      placeholder={props.placeholder}
      name={props.name}
      value={props.value}
      defaultValue={props.defaultValue}
    />
  );
}

export default Textarea;
"
`;

exports[`React - stateType: variables > jsx > Typescript Test > UseValueAndFnFromStore 1`] = `
"'function' is not allowed as a variable declaration name. (25:7)
  23 |   const _id= 'abc'
  24 | const _active= false
> 25 | const function _do(id?: string) {
     |       ^
  26 | _active = !!id;
  27 |
  28 | if (props.onChange) {"
`;

exports[`React - stateType: variables > jsx > Typescript Test > Video 1`] = `
"import * as React from \\"react\\";

export interface VideoProps {
  attributes?: any;
  video?: string;
  autoPlay?: boolean;
  controls?: boolean;
  muted?: boolean;
  loop?: boolean;
  playsInline?: boolean;
  aspectRatio?: number;
  width?: number;
  height?: number;
  fit?: \\"contain\\" | \\"cover\\" | \\"fill\\";
  position?:
    | \\"center\\"
    | \\"top\\"
    | \\"left\\"
    | \\"right\\"
    | \\"bottom\\"
    | \\"top left\\"
    | \\"top right\\"
    | \\"bottom left\\"
    | \\"bottom right\\";
  posterImage?: string;
  lazyLoad?: boolean;
}

function Video(props: VideoProps) {
  return (
    <video
      preload=\\"none\\"
      {...props.attributes}
      style={{
        width: \\"100%\\",
        height: \\"100%\\",
        ...props.attributes?.style,
        objectFit: props.fit,
        objectPosition: props.position,
        // Hack to get object fit to work as expected and
        // not have the video overflow
        borderRadius: 1,
      }}
      key={props.video || \\"no-src\\"}
      poster={props.posterImage}
      autoplay={props.autoPlay}
      muted={props.muted}
      controls={props.controls}
      loop={props.loop}
    />
  );
}

export default Video;
"
`;

exports[`React - stateType: variables > jsx > Typescript Test > arrowFunctionInUseStore 1`] = `
"'function' is not allowed as a variable declaration name. (17:7)
  15 |
  16 |   const name= 'steve'
> 17 | const function setName(value) {
     |       ^
  18 | name = value;
  19 | }
  20 | const function updateNameWithArrowFn(value) {"
`;

exports[`React - stateType: variables > jsx > Typescript Test > basicForFragment 1`] = `
"\\"use client\\";
import * as React from \\"react\\";

function BasicForFragment(props: any) {
  const id = \\"xyz\\";

  return (
    <div>
      {[\\"a\\", \\"b\\", \\"c\\"]?.map((option) => (
        <React.Fragment key={\`key-\${option}\`}>
          <div>{option}</div>
        </React.Fragment>
      ))}
      {[\\"a\\", \\"b\\", \\"c\\"]?.map((option) => (
        <React.Fragment key={\`\${id}-\${option}\`}>
          <div>{option}</div>
        </React.Fragment>
      ))}
      <select>
        {[\\"d\\", \\"e\\", \\"f\\"]?.map((option) => (
          <option key={\`\${id}-\${option}\`} value={option}>
            {option}
          </option>
        ))}
      </select>
    </div>
  );
}

export default BasicForFragment;
"
`;

exports[`React - stateType: variables > jsx > Typescript Test > basicForNoTagReference 1`] = `
"'function' is not allowed as a variable declaration name. (19:7)
  17 | const TagName= 'div'
  18 | const tag= 'span'
> 19 | const function TagNameGetter() {
     |       ^
  20 | return 'span';
  21 | }
  22 |"
`;

exports[`React - stateType: variables > jsx > Typescript Test > basicForwardRef 1`] = `
"\\"use client\\";
import * as React from \\"react\\";
import { forwardRef } from \\"react\\";

export interface Props {
  showInput: boolean;
  inputRef: HTMLInputElement;
}

const MyBasicForwardRefComponent = forwardRef<Props[\\"inputRef\\"]>(
  function MyBasicForwardRefComponent(props: Props, inputRef) {
    const name = \\"PatrickJS\\";

    return (
      <>
        <div>
          <input
            className=\\"input\\"
            ref={inputRef}
            value={name}
            onChange={(event) => (name = event.target.value)}
          />
        </div>
        <style jsx>{\`
          .input {
            color: red;
          }
        \`}</style>
      </>
    );
  }
);

export default MyBasicForwardRefComponent;
"
`;

exports[`React - stateType: variables > jsx > Typescript Test > basicForwardRefMetadata 1`] = `
"/**
          useMetadata:
          {\\"forwardRef\\":\\"inputRef\\"}
          */

\\"use client\\";
import * as React from \\"react\\";
import { forwardRef } from \\"react\\";

export interface Props {
  showInput: boolean;
  inputRef: HTMLInputElement;
}

const MyBasicForwardRefComponent = forwardRef<Props[\\"inputRef\\"]>(
  function MyBasicForwardRefComponent(props: Props, inputRef) {
    const name = \\"PatrickJS\\";

    return (
      <>
        <div>
          <input
            className=\\"input\\"
            ref={inputRef}
            value={name}
            onChange={(event) => (name = event.target.value)}
          />
        </div>
        <style jsx>{\`
          .input {
            color: red;
          }
        \`}</style>
      </>
    );
  }
);

export default MyBasicForwardRefComponent;
"
`;

exports[`React - stateType: variables > jsx > Typescript Test > basicOnUpdateReturn 1`] = `
"\\"use client\\";
import * as React from \\"react\\";
import { useEffect } from \\"react\\";

function MyBasicOnUpdateReturnComponent(props: any) {
  const name = \\"PatrickJS\\";

  useEffect(() => {
    const controller = new AbortController();
    const signal = controller.signal;
    fetch(\\"https://patrickjs.com/api/resource.json\\", {
      signal,
    })
      .then((response) => response.json())
      .then((data) => {
        name = data.name;
      });
    return () => {
      if (!signal.aborted) {
        controller.abort();
      }
    };
  }, [name]);

  return <div>Hello! {name}</div>;
}

export default MyBasicOnUpdateReturnComponent;
"
`;

exports[`React - stateType: variables > jsx > Typescript Test > class + ClassName + css 1`] = `
"import * as React from \\"react\\";
import MyComp from \\"./my-component\\";

function MyBasicComponent(props: any) {
  return (
    <>
      <div>
        <MyComp className=\\"test\\" className=\\"test2\\">
          Hello! I can run in React, Vue, Solid, or Liquid!
        </MyComp>
        <div className=\\"test2 test div\\">
          Hello! I can run in React, Vue, Solid, or Liquid!
        </div>
      </div>
      <style jsx>{\`
        .div {
          padding: 10px;
        }
      \`}</style>
    </>
  );
}

export default MyBasicComponent;
"
`;

exports[`React - stateType: variables > jsx > Typescript Test > class + css 1`] = `
"import * as React from \\"react\\";

function MyBasicComponent(props: any) {
  return (
    <>
      <div className=\\"test div\\">
        Hello! I can run in React, Vue, Solid, or Liquid!
      </div>
      <style jsx>{\`
        .div {
          padding: 10px;
        }
      \`}</style>
    </>
  );
}

export default MyBasicComponent;
"
`;

exports[`React - stateType: variables > jsx > Typescript Test > className + css 1`] = `
"import * as React from \\"react\\";

function MyBasicComponent(props: any) {
  return (
    <>
      <div className=\\"test div\\">
        Hello! I can run in React, Vue, Solid, or Liquid!
      </div>
      <style jsx>{\`
        .div {
          padding: 10px;
        }
      \`}</style>
    </>
  );
}

export default MyBasicComponent;
"
`;

exports[`React - stateType: variables > jsx > Typescript Test > className 1`] = `
"\\"use client\\";
import * as React from \\"react\\";

type Props = {
  [key: string]: string | JSX.Element;
  slotTesting: JSX.Element;
};
import type { JSX } from \\"../../../../jsx-runtime\\";

function ClassNameCode(props: Props) {
  const bindings = \\"a binding\\";

  return (
    <div>
      <div className=\\"no binding\\">Without Binding</div>
      <div className={bindings}>With binding</div>
    </div>
  );
}

export default ClassNameCode;
"
`;

exports[`React - stateType: variables > jsx > Typescript Test > classState 1`] = `
"\\"use client\\";
import * as React from \\"react\\";

function MyBasicComponent(props: any) {
  const classState = \\"testClassName\\";
  const styleState = {
    color: \\"red\\",
  };

  return (
    <>
      <div className={classState + \\" div\\"} style={styleState}>
        Hello! I can run in React, Vue, Solid, or Liquid!
      </div>
      <style jsx>{\`
        .div {
          padding: 10px;
        }
      \`}</style>
    </>
  );
}

export default MyBasicComponent;
"
`;

exports[`React - stateType: variables > jsx > Typescript Test > complexMeta 1`] = `
"/**
          useMetadata:
          {\\"x\\":\\"y\\",\\"asdf\\":{\\"stringValue\\":\\"d\\",\\"booleanValue\\":true,\\"numberValue\\":1,\\"innerObject\\":{\\"stringValue\\":\\"inner\\",\\"numberValue\\":2,\\"booleanValue\\":false},\\"spreadStringValue\\":\\"f\\"}}
          */

import * as React from \\"react\\";

function ComplexMetaRaw(props: any) {
  return <div />;
}

export default ComplexMetaRaw;
"
`;

exports[`React - stateType: variables > jsx > Typescript Test > componentWithContext 1`] = `
"\\"use client\\";
import * as React from \\"react\\";
import { useContext } from \\"react\\";

export interface ComponentWithContextProps {
  content: string;
}

import Context1 from \\"@dummy/1\\";
import Context2 from \\"@dummy/2\\";

function ComponentWithContext(props: ComponentWithContextProps) {
  const foo = useContext(Context1);

  return (
    <Context2.Provider
      value={{
        bar: \\"baz\\",
      }}
    >
      <Context1.Provider
        value={{
          foo: \\"bar\\",

          content() {
            return props.content;
          },
        }}
      >
        <>{foo.value}</>
      </Context1.Provider>
    </Context2.Provider>
  );
}

export default ComponentWithContext;
"
`;

exports[`React - stateType: variables > jsx > Typescript Test > componentWithContextMultiRoot 1`] = `
"\\"use client\\";
import * as React from \\"react\\";
import { useContext } from \\"react\\";

export interface ComponentWithContextProps {
  content: string;
}

import Context1 from \\"@dummy/1\\";
import Context2 from \\"@dummy/2\\";

function ComponentWithContext(props: ComponentWithContextProps) {
  const foo = useContext(Context1);

  return (
    <Context2.Provider
      value={{
        bar: \\"baz\\",
      }}
    >
      <Context1.Provider
        value={{
          foo: \\"bar\\",

          content() {
            return props.content;
          },
        }}
      >
        <>
          <>{foo.value}</>
          <div>other</div>
        </>
      </Context1.Provider>
    </Context2.Provider>
  );
}

export default ComponentWithContext;
"
`;

exports[`React - stateType: variables > jsx > Typescript Test > contentState 1`] = `
"\\"use client\\";
import * as React from \\"react\\";
import { useContext } from \\"react\\";
import BuilderContext from \\"@dummy/context.js\\";

function RenderContent(props: any) {
  return (
    <BuilderContext.Provider
      value={{
        content: props.content,
        registeredComponents: props.customComponents,
      }}
    >
      <div>setting context</div>
    </BuilderContext.Provider>
  );
}

export default RenderContent;
"
`;

exports[`React - stateType: variables > jsx > Typescript Test > defaultProps 1`] = `
"\\"use client\\";
import * as React from \\"react\\";

export interface ButtonProps {
  attributes?: any;
  text?: string;
  buttonText?: string; // no default value

  link?: string;
  openLinkInNewTab?: boolean;
  onClick?: () => void;
}

function Button(props: ButtonProps) {
  props = {
    text: \\"default text\\",
    link: \\"https://builder.io/\\",
    openLinkInNewTab: false,
    onClick: () => {
      console.log(\\"hi\\");
    },
    ...props,
  };
  return (
    <div>
      {props.link ? (
        <a
          {...props.attributes}
          href={props.link}
          target={props.openLinkInNewTab ? \\"_blank\\" : undefined}
        >
          {props.text}
        </a>
      ) : null}
      {!props.link ? (
        <button
          type=\\"button\\"
          {...props.attributes}
          onClick={(event) => props.onClick()}
        >
          {props.buttonText}
        </button>
      ) : null}
    </div>
  );
}

export default Button;
"
`;

exports[`React - stateType: variables > jsx > Typescript Test > defaultPropsOutsideComponent 1`] = `
"\\"use client\\";
import * as React from \\"react\\";

export interface ButtonProps {
  attributes?: any;
  text?: string;
  link?: string;
  openLinkInNewTab?: boolean;
  onClick: () => void;
}

function Button(props: ButtonProps) {
  props = {
    text: \\"default text\\",
    link: \\"https://builder.io/\\",
    openLinkInNewTab: false,
    onClick: () => {},
    ...props,
  };
  return (
    <div>
      {props.link ? (
        <a
          {...props.attributes}
          href={props.link}
          target={props.openLinkInNewTab ? \\"_blank\\" : undefined}
        >
          {props.text}
        </a>
      ) : null}
      {!props.link ? (
        <button
          type=\\"button\\"
          {...props.attributes}
          onClick={(event) => props.onClick(event)}
        >
          {props.text}
        </button>
      ) : null}
    </div>
  );
}

export default Button;
"
`;

exports[`React - stateType: variables > jsx > Typescript Test > defaultValsWithTypes 1`] = `
"import * as React from \\"react\\";

type Props = {
  name: string;
};

const DEFAULT_VALUES: Props = {
  name: \\"Sami\\",
};

function ComponentWithTypes(props: Props) {
  return <div> Hello {props.name || DEFAULT_VALUES.name}</div>;
}

export default ComponentWithTypes;
"
`;

exports[`React - stateType: variables > jsx > Typescript Test > eventInputAndChange 1`] = `
"\\"use client\\";
import * as React from \\"react\\";

function EventInputAndChange(props: any) {
  const name = \\"Steve\\";

  return (
    <>
      <div>
        <input
          className=\\"input\\"
          value={name}
          onInput={(event) => (name = event.target.value)}
          onChange={(event) => (name = event.target.value)}
        />
        Hello! I can run in React, Vue, Solid, or Liquid!
      </div>
      <style jsx>{\`
        .input {
          color: red;
        }
      \`}</style>
    </>
  );
}

export default EventInputAndChange;
"
`;

exports[`React - stateType: variables > jsx > Typescript Test > expressionState 1`] = `
"\\"use client\\";
import * as React from \\"react\\";

function MyComponent(props: any) {
  const refToUse = !(props.componentRef instanceof Function)
    ? props.componentRef
    : null;

  return <div>{refToUse}</div>;
}

export default MyComponent;
"
`;

exports[`React - stateType: variables > jsx > Typescript Test > figmaMeta 1`] = `
"/**
          useMetadata:
          {\\"figma\\":{\\"name\\":\\"def-button-beta-outlined\\",\\"url\\":\\"https://www.figma.com/xxx\\",\\"props\\":{\\"iconSmall\\":{\\"type\\":\\"instance\\",\\"key\\":\\"📍 Icon Small\\"},\\"iconMedium\\":{\\"type\\":\\"instance\\",\\"key\\":\\"📍 Icon Medium\\"},\\"label\\":{\\"type\\":\\"string\\",\\"key\\":\\"✏️ Label\\"},\\"icon\\":{\\"type\\":\\"boolean\\",\\"key\\":\\"👁️ Icon\\",\\"value\\":{\\"false\\":false,\\"true\\":\\"placeholder\\"}},\\"interactiveState\\":{\\"type\\":\\"enum\\",\\"key\\":\\"Interactive State\\",\\"value\\":{\\"(Def) Enabled\\":false,\\"Hovered\\":false,\\"Pressed\\":false,\\"Focused\\":false,\\"Disabled\\":\\"true\\"}},\\"size\\":{\\"type\\":\\"enum\\",\\"key\\":\\"Size\\",\\"value\\":{\\"(Def) Medium\\":false,\\"Small\\":\\"small\\"}},\\"width\\":{\\"type\\":\\"enum\\",\\"key\\":\\"Width\\",\\"value\\":{\\"(Def) Auto Width\\":false,\\"Full Width\\":\\"full\\"}}}}}
          */

import * as React from \\"react\\";

function FigmaButton(props: any) {
  return (
    <button
      data-icon={props.icon}
      data-disabled={props.interactiveState}
      data-width={props.width}
      data-size={props.size}
    >
      {props.label}
    </button>
  );
}

export default FigmaButton;
"
`;

exports[`React - stateType: variables > jsx > Typescript Test > getterState 1`] = `
"'function' is not allowed as a variable declaration name. (17:9)
  15 |   function Button(props:ButtonProps) {
  16 |
> 17 |   const function foo2() {
     |         ^
  18 | return props.foo + 'foo';
  19 | }
  20 | const function bar() {"
`;

exports[`React - stateType: variables > jsx > Typescript Test > import types 1`] = `
"'function' is not allowed as a variable declaration name. (20:9)
  18 |   function RenderContent(props:RenderContentProps) {
  19 |
> 20 |   const function getRenderContentProps(block, index) {
     |         ^
  21 | return {
  22 | block: block,
  23 | index: index"
`;

exports[`React - stateType: variables > jsx > Typescript Test > multipleOnUpdate 1`] = `
"\\"use client\\";
import * as React from \\"react\\";
import { useEffect } from \\"react\\";

function MultipleOnUpdate(props: any) {
  useEffect(() => {
    console.log(\\"Runs on every update/rerender\\");
  });
  useEffect(() => {
    console.log(\\"Runs on every update/rerender as well\\");
  });

  return <div />;
}

export default MultipleOnUpdate;
"
`;

exports[`React - stateType: variables > jsx > Typescript Test > multipleOnUpdateWithDeps 1`] = `
"\\"use client\\";
import * as React from \\"react\\";
import { useEffect } from \\"react\\";

function MultipleOnUpdateWithDeps(props: any) {
  const a = \\"a\\";
  const b = \\"b\\";
  const c = \\"c\\";
  const d = \\"d\\";

  useEffect(() => {
    console.log(\\"Runs when a or b changes\\", a, b);

    if (a === \\"a\\") {
      a = \\"b\\";
    }
  }, [a, b]);
  useEffect(() => {
    console.log(\\"Runs when c or d changes\\", c, d);

    if (a === \\"a\\") {
      a = \\"b\\";
    }
  }, [c, d]);

  return <div />;
}

export default MultipleOnUpdateWithDeps;
"
`;

exports[`React - stateType: variables > jsx > Typescript Test > multipleSpreads 1`] = `
"\\"use client\\";
import * as React from \\"react\\";

function MyBasicComponent(props: any) {
  const attrs = {
    hello: \\"world\\",
  };

  return <input {...attrs} {...props} />;
}

export default MyBasicComponent;
"
`;

exports[`React - stateType: variables > jsx > Typescript Test > nestedShow 1`] = `
"import * as React from \\"react\\";

interface Props {
  conditionA: boolean;
  conditionB: boolean;
}

function NestedShow(props: Props) {
  return (
    <>
      {props.conditionA ? (
        <>
          {!props.conditionB ? (
            <div>if condition A and condition B</div>
          ) : (
            <div>else-condition-B</div>
          )}
        </>
      ) : (
        <div>else-condition-A</div>
      )}
    </>
  );
}

export default NestedShow;
"
`;

exports[`React - stateType: variables > jsx > Typescript Test > nestedStyles 1`] = `
"import * as React from \\"react\\";

function NestedStyles(props: any) {
  return (
    <>
      <div className=\\"div\\">Hello world</div>
      <style jsx>{\`
        .div {
          display: flex;
          --bar: red;
          color: var(--bar);
        }
        @media (max-width: env(--mobile)) {
          .div {
            display: block;
          }
        }
        .div:hover {
          display: flex;
        }
        .div:active {
          display: inline;
        }
        .div .nested-selector {
          display: grid;
        }
        .div .nested-selector:hover {
          display: block;
        }
        .div.nested-selector:active {
          display: inline-block;
        }
      \`}</style>
    </>
  );
}

export default NestedStyles;
"
`;

exports[`React - stateType: variables > jsx > Typescript Test > onEvent 1`] = `
"'function' is not allowed as a variable declaration name. (17:7)
  15 |
  16 |   const elem = useRef<HTMLDivElement>(null);
> 17 | const function foo(event) {
     |       ^
  18 | console.log('test2');
  19 | }
  20 | const function elem_onInitEditingBldr(event) {"
`;

exports[`React - stateType: variables > jsx > Typescript Test > onInit & onMount 1`] = `
"\\"use client\\";
import * as React from \\"react\\";
import { useRef, useEffect } from \\"react\\";

function OnInit(props: any) {
  const hasInitialized = useRef(false);
  if (!hasInitialized.current) {
    console.log(\\"onInit\\");
    hasInitialized.current = true;
  }

  useEffect(() => {
    console.log(\\"onMount\\");
  }, []);

  return <div />;
}

export default OnInit;
"
`;

exports[`React - stateType: variables > jsx > Typescript Test > onInit 1`] = `
"\\"use client\\";
import * as React from \\"react\\";
import { useRef } from \\"react\\";

type Props = {
  name: string;
};

export const defaultValues = {
  name: \\"PatrickJS\\",
};

function OnInit(props: Props) {
  const name = \\"\\";

  const hasInitialized = useRef(false);
  if (!hasInitialized.current) {
    name = defaultValues.name || props.name;
    console.log(\\"set defaults with props\\");
    hasInitialized.current = true;
  }

  return <div>Default name defined by parent {name}</div>;
}

export default OnInit;
"
`;

exports[`React - stateType: variables > jsx > Typescript Test > onInitPlain 1`] = `
"import * as React from \\"react\\";
import { useRef } from \\"react\\";

function OnInitPlain(props: any) {
  const hasInitialized = useRef(false);
  if (!hasInitialized.current) {
    console.log(\\"onInit\\");
    hasInitialized.current = true;
  }

  return <div />;
}

export default OnInitPlain;
"
`;

exports[`React - stateType: variables > jsx > Typescript Test > onMount 1`] = `
"\\"use client\\";
import * as React from \\"react\\";
import { useEffect } from \\"react\\";

function Comp(props: any) {
  useEffect(() => {
    console.log(\\"Runs on mount\\");
  }, []);

  useEffect(() => {
    return () => {
      console.log(\\"Runs on unMount\\");
    };
  }, []);

  return <div />;
}

export default Comp;
"
`;

exports[`React - stateType: variables > jsx > Typescript Test > onMountMultiple 1`] = `
"\\"use client\\";
import * as React from \\"react\\";
import { useEffect } from \\"react\\";

function Comp(props: any) {
  useEffect(() => {
    console.log(\\"Runs on mount\\");
  }, []);
  useEffect(() => {
    console.log(\\"Another one runs on Mount\\");
  }, []);
  useEffect(() => {
    console.log(\\"SSR runs on Mount\\");
  }, []);

  return <div />;
}

export default Comp;
"
`;

exports[`React - stateType: variables > jsx > Typescript Test > onUpdate 1`] = `
"\\"use client\\";
import * as React from \\"react\\";
import { useEffect } from \\"react\\";

function OnUpdate(props: any) {
  useEffect(() => {
    console.log(\\"Runs on every update/rerender\\");
  });

  return <div />;
}

export default OnUpdate;
"
`;

exports[`React - stateType: variables > jsx > Typescript Test > onUpdateWithDeps 1`] = `
"\\"use client\\";
import * as React from \\"react\\";
import { useEffect } from \\"react\\";

type Props = {
  size: string;
};

function OnUpdateWithDeps(props: Props) {
  const a = \\"a\\";
  const b = \\"b\\";

  useEffect(() => {
    console.log(\\"Runs when a, b or size changes\\", a, b, props.size);
  }, [a, b, props.size]);

  return <div />;
}

export default OnUpdateWithDeps;
"
`;

exports[`React - stateType: variables > jsx > Typescript Test > preserveExportOrLocalStatement 1`] = `
"import * as React from \\"react\\";

type Types = {
  s: any[];
};
interface IPost {
  len: number;
}
export interface MyBasicComponentProps {
  id: string;
}

const b = 3;
const foo = () => {};
export const a = 3;
export const bar = () => {};
export function run<T>(value: T) {}

function MyBasicComponent(props: MyBasicComponentProps) {
  return <div />;
}

export default MyBasicComponent;
"
`;

exports[`React - stateType: variables > jsx > Typescript Test > preserveTyping 1`] = `
"import * as React from \\"react\\";

export type A = \\"test\\";
export interface C {
  n: \\"test\\";
}
type B = \\"test2\\";
interface D {
  n: \\"test\\";
}
export interface MyBasicComponentProps {
  name: string;
  age?: number;
}

function MyBasicComponent(props: MyBasicComponentProps) {
  return (
    <div>Hello! I can run in React, Vue, Solid, or Liquid! {props.name}</div>
  );
}

export default MyBasicComponent;
"
`;

exports[`React - stateType: variables > jsx > Typescript Test > propsDestructure 1`] = `
"\\"use client\\";
import * as React from \\"react\\";

type Props = {
  children: any;
  type: string;
};

function MyBasicComponent(props: Props) {
  const name = \\"Decadef20\\";

  return (
    <div>
      {props.children}
      {props.type}
      Hello! I can run in React, Vue, Solid, or Liquid!
    </div>
  );
}

export default MyBasicComponent;
"
`;

exports[`React - stateType: variables > jsx > Typescript Test > propsInterface 1`] = `
"import * as React from \\"react\\";

interface Person {
  name: string;
  age?: number;
}

function MyBasicComponent(props: Person | never) {
  return (
    <div>Hello! I can run in React, Vue, Solid, or Liquid! {props.name}</div>
  );
}

export default MyBasicComponent;
"
`;

exports[`React - stateType: variables > jsx > Typescript Test > propsType 1`] = `
"import * as React from \\"react\\";

type Person = {
  name: string;
  age?: number;
};

function MyBasicComponent(props: Person) {
  return (
    <div>Hello! I can run in React, Vue, Solid, or Liquid! {props.name}</div>
  );
}

export default MyBasicComponent;
"
`;

exports[`React - stateType: variables > jsx > Typescript Test > referencingFunInsideHook 1`] = `
"\\"use client\\";
import * as React from \\"react\\";
import { useEffect } from \\"react\\";

function OnUpdate(props: any) {
  const foo = function foo(params) {};
  const bar = function bar() {};
  const zoo = function zoo() {
    const params = {
      cb: bar,
    };
  };

  useEffect(() => {
    foo({
      someOption: bar,
    });
  });

  return <div />;
}

export default OnUpdate;
"
`;

exports[`React - stateType: variables > jsx > Typescript Test > renderBlock 1`] = `
"'function' is not allowed as a variable declaration name. (37:10)
  35 |    function RenderBlock(props:RenderBlockProps) {
  36 |
> 37 |    const function component() {
     |          ^
  38 | const componentName = getProcessedBlock({
  39 |  block: props.block,
  40 |  state: props.context.state,"
`;

exports[`React - stateType: variables > jsx > Typescript Test > renderContentExample 1`] = `
"\\"use client\\";
import * as React from \\"react\\";
import { useContext, useEffect } from \\"react\\";

type Props = {
  customComponents: string[];
  content: {
    blocks: any[];
    id: string;
  };
};
import BuilderContext from \\"@dummy/context.js\\";
import {
  dispatchNewContentToVisualEditor,
  sendComponentsToVisualEditor,
  trackClick,
} from \\"@dummy/injection-js\\";
import RenderBlocks from \\"@dummy/RenderBlocks\\";

function RenderContent(props: Props) {
  useEffect(() => {
    sendComponentsToVisualEditor(props.customComponents);
  }, []);
  useEffect(() => {
    dispatchNewContentToVisualEditor(props.content);
  }, [props.content]);

  return (
    <>
      <BuilderContext.Provider
        value={{
          get content() {
            return 3;
          },

          get registeredComponents() {
            return 4;
          },
        }}
      >
        <div className=\\"div\\" onClick={(event) => trackClick(props.content.id)}>
          <RenderBlocks blocks={props.content.blocks} />
        </div>
      </BuilderContext.Provider>
      <style jsx>{\`
        .div {
          display: flex;
          flex-direction: columns;
        }
      \`}</style>
    </>
  );
}

export default RenderContent;
"
`;

exports[`React - stateType: variables > jsx > Typescript Test > rootFragmentMultiNode 1`] = `
"import * as React from \\"react\\";

export interface ButtonProps {
  attributes?: any;
  text?: string;
  link?: string;
  openLinkInNewTab?: boolean;
}

function Button(props: ButtonProps) {
  return (
    <>
      {props.link ? (
        <a
          {...props.attributes}
          href={props.link}
          target={props.openLinkInNewTab ? \\"_blank\\" : undefined}
        >
          {props.text}
        </a>
      ) : null}
      {!props.link ? (
        <button type=\\"button\\" {...props.attributes}>
          {props.text}
        </button>
      ) : null}
    </>
  );
}

export default Button;
"
`;

exports[`React - stateType: variables > jsx > Typescript Test > rootShow 1`] = `
"import * as React from \\"react\\";

export interface RenderStylesProps {
  foo: string;
}

function RenderStyles(props: RenderStylesProps) {
  return (
    <>
      {props.foo === \\"bar\\" ? (
        <>
          <div>Bar</div>
        </>
      ) : (
        <div>Foo</div>
      )}
    </>
  );
}

export default RenderStyles;
"
`;

exports[`React - stateType: variables > jsx > Typescript Test > self-referencing component 1`] = `
"import * as React from \\"react\\";

function MyComponent(props: any) {
  return (
    <div>
      {props.name}
      {props.name === \\"Batman\\" ? <MyComponent name=\\"Bruce Wayne\\" /> : null}
    </div>
  );
}

export default MyComponent;
"
`;

exports[`React - stateType: variables > jsx > Typescript Test > self-referencing component with children 1`] = `
"import * as React from \\"react\\";

function MyComponent(props: any) {
  return (
    <div>
      {props.name}
      {props.children}
      {props.name === \\"Batman\\" ? (
        <MyComponent name=\\"Bruce\\">
          <div>Wayne</div>
        </MyComponent>
      ) : null}
    </div>
  );
}

export default MyComponent;
"
`;

exports[`React - stateType: variables > jsx > Typescript Test > setState 1`] = `
"'function' is not allowed as a variable declaration name. (17:7)
  15 |
  16 |   const n= ['123']
> 17 | const function someFn() {
     |       ^
  18 | n[0] = '123';
  19 | }
  20 |"
`;

exports[`React - stateType: variables > jsx > Typescript Test > showExpressions 1`] = `
"import * as React from \\"react\\";

interface Props {
  conditionA: boolean;
  conditionB: boolean;
}

function ShowWithOtherValues(props: Props) {
  return (
    <div>
      {props.conditionA ? <>Content0</> : <>ContentA</>}
      {props.conditionA ? <>ContentA</> : null}
      {props.conditionA ? <></> : <>ContentA</>}
      {props.conditionA ? <>ContentB</> : <>{undefined}</>}
      {props.conditionA ? <>{undefined}</> : <>ContentB</>}
      {props.conditionA ? <>ContentC</> : null}
      {props.conditionA ? <></> : <>ContentC</>}
      {props.conditionA ? <>ContentD</> : null}
      {props.conditionA ? <></> : <>ContentD</>}
      {props.conditionA ? <>ContentE</> : <>hello</>}
      {props.conditionA ? <>hello</> : <>ContentE</>}
      {props.conditionA ? <>ContentF</> : <>123</>}
      {props.conditionA ? <>123</> : <>ContentF</>}
      {props.conditionA === \\"Default\\" ? (
        <>4mb</>
      ) : props.conditionB === \\"Complete\\" ? (
        <>20mb</>
      ) : (
        <>9mb</>
      )}
      {props.conditionA === \\"Default\\" ? (
        <>{props.conditionB === \\"Complete\\" ? <>20mb</> : <>9mb</>}</>
      ) : (
        <>4mb</>
      )}
      {props.conditionA === \\"Default\\" ? (
        <>{props.conditionB === \\"Complete\\" ? <div>complete</div> : <>9mb</>}</>
      ) : props.conditionC === \\"Complete\\" ? (
        <>dff</>
      ) : (
        <div>complete else</div>
      )}
    </div>
  );
}

export default ShowWithOtherValues;
"
`;

exports[`React - stateType: variables > jsx > Typescript Test > showWithFor 1`] = `
"import * as React from \\"react\\";

interface Props {
  conditionA: boolean;
  items: string[];
}

function NestedShow(props: Props) {
  return (
    <>
      {props.conditionA ? (
        <>
          {props.items?.map((item, idx) => (
            <div key={idx}>{item}</div>
          ))}
        </>
      ) : (
        <div>else-condition-A</div>
      )}
    </>
  );
}

export default NestedShow;
"
`;

exports[`React - stateType: variables > jsx > Typescript Test > showWithOtherValues 1`] = `
"import * as React from \\"react\\";

interface Props {
  conditionA: boolean;
}

function ShowWithOtherValues(props: Props) {
  return (
    <div>
      {props.conditionA ? <>ContentA</> : null}
      {props.conditionA ? <>ContentB</> : <>{undefined}</>}
      {props.conditionA ? <>ContentC</> : null}
      {props.conditionA ? <>ContentD</> : null}
      {props.conditionA ? <>ContentE</> : <>hello</>}
      {props.conditionA ? <>ContentF</> : <>123</>}
    </div>
  );
}

export default ShowWithOtherValues;
"
`;

exports[`React - stateType: variables > jsx > Typescript Test > showWithRootText 1`] = `
"import * as React from \\"react\\";

interface Props {
  conditionA: boolean;
}

function ShowRootText(props: Props) {
  return <>{props.conditionA ? <>ContentA</> : <div>else-condition-A</div>}</>;
}

export default ShowRootText;
"
`;

exports[`React - stateType: variables > jsx > Typescript Test > signalsOnUpdate 1`] = `
"\\"use client\\";
import * as React from \\"react\\";
import { useEffect } from \\"react\\";

type Props = {
  id: string;
  foo: {
    bar: {
      baz: number;
    };
  };
};

function MyBasicComponent(props: Props) {
  useEffect(() => {
    console.log(\\"props.id changed\\", props.id);
    console.log(\\"props.foo.value.bar.baz changed\\", props.foo.bar.baz);
  }, [props.id, props.foo.bar.baz]);

  return (
    <>
      <div className=\\"test div\\">
        {props.id}
        {props.foo.bar.baz}
      </div>
      <style jsx>{\`
        .div {
          padding: 10px;
        }
      \`}</style>
    </>
  );
}

export default MyBasicComponent;
"
`;

exports[`React - stateType: variables > jsx > Typescript Test > spreadAttrs 1`] = `
"import * as React from \\"react\\";

function MyBasicComponent(props: any) {
  return <input {...attrs} />;
}

export default MyBasicComponent;
"
`;

exports[`React - stateType: variables > jsx > Typescript Test > spreadNestedProps 1`] = `
"import * as React from \\"react\\";

function MyBasicComponent(props: any) {
  return <input {...props.nested} />;
}

export default MyBasicComponent;
"
`;

exports[`React - stateType: variables > jsx > Typescript Test > spreadProps 1`] = `
"import * as React from \\"react\\";

function MyBasicComponent(props: any) {
  return <input {...props} />;
}

export default MyBasicComponent;
"
`;

exports[`React - stateType: variables > jsx > Typescript Test > store-async-function 1`] = `
"import * as React from \\"react\\";

function StringLiteralStore(props: any) {
  const arrowFunction = async function arrowFunction() {
    return Promise.resolve();
  };
  const namedFunction = async function namedFunction() {
    return Promise.resolve();
  };
  const fetchUsers = async function fetchUsers() {
    return Promise.resolve();
  };

  return <div />;
}

export default StringLiteralStore;
"
`;

exports[`React - stateType: variables > jsx > Typescript Test > string-literal-store 1`] = `
"\\"use client\\";
import * as React from \\"react\\";

function StringLiteralStore(props: any) {
  const foo = 123;

  return <div>{foo}</div>;
}

export default StringLiteralStore;
"
`;

exports[`React - stateType: variables > jsx > Typescript Test > styleClassAndCss 1`] = `
"import * as React from \\"react\\";

function MyComponent(props: any) {
  return (
    <>
      <div
        className=\\"builder-column div\\"
        style={{
          width: \\"100%\\",
        }}
      />
      <style jsx>{\`
        .div {
          display: flex;
          flex-direction: column;
          align-items: stretch;
        }
      \`}</style>
    </>
  );
}

export default MyComponent;
"
`;

exports[`React - stateType: variables > jsx > Typescript Test > stylePropClassAndCss 1`] = `
"import * as React from \\"react\\";

function StylePropClassAndCss(props: any) {
  return (
    <>
      <div
        style={props.attributes.style}
        className={props.attributes.class + \\" div\\"}
      />
      <style jsx>{\`
        .div {
          display: flex;
          flex-direction: column;
          align-items: stretch;
        }
      \`}</style>
    </>
  );
}

export default StylePropClassAndCss;
"
`;

exports[`React - stateType: variables > jsx > Typescript Test > subComponent 1`] = `
"import * as React from \\"react\\";
import Foo from \\"./foo-sub-component\\";

function SubComponent(props: any) {
  return <Foo />;
}

export default SubComponent;
"
`;

exports[`React - stateType: variables > jsx > Typescript Test > svgComponent 1`] = `
"import * as React from \\"react\\";

function SvgComponent(props: any) {
  return (
    <svg
      fill=\\"none\\"
      role=\\"img\\"
      viewBox={\\"0 0 \\" + 42 + \\" \\" + 42}
      width={42}
      height={42}
    >
      <defs>
        <filter id=\\"prefix__filter0_f\\" filterUnits=\\"userSpaceOnUse\\">
          <feFlood result=\\"BackgroundImageFix\\" />
          <feBlend in=\\"SourceGraphic\\" in2=\\"BackgroundImageFix\\" result=\\"shape\\" />
          <feGaussianBlur result=\\"effect1_foregroundBlur\\" stdDeviation={7} />
        </filter>
      </defs>
    </svg>
  );
}

export default SvgComponent;
"
`;

exports[`React - stateType: variables > jsx > Typescript Test > typeDependency 1`] = `
"import * as React from \\"react\\";

export type TypeDependencyProps = {
  foo: Foo;
  foo2: Foo2;
};
import type { Foo } from \\"./foo-type\\";
import type { Foo as Foo2 } from \\"./type-export\\";

function TypeDependency(props: TypeDependencyProps) {
  return <div>{props.foo}</div>;
}

export default TypeDependency;
"
`;

exports[`React - stateType: variables > jsx > Typescript Test > typeExternalStore 1`] = `
"\\"use client\\";
import * as React from \\"react\\";
import { FooStore } from \\"./foo-store\\";

function TypeExternalStore(props: any) {
  const _name = \\"test\\";

  return <div>Hello {_name}! </div>;
}

export default TypeExternalStore;
"
`;

exports[`React - stateType: variables > jsx > Typescript Test > typeGetterStore 1`] = `
"'function' is not allowed as a variable declaration name. (21:7)
  19 |
  20 |   const name= 'test'
> 21 | const function getName() {
     |       ^
  22 | if (name === 'a') {
  23 | return 'b';
  24 | }"
`;

exports[`React - stateType: variables > jsx > Typescript Test > use-style 1`] = `
"import * as React from \\"react\\";

function MyComponent(props: any) {
  return (
    <>
      <button type=\\"button\\">Button</button>
      <style jsx>{\`
        button {
          background: blue;
          color: white;
          font-size: 12px;
          outline: 1px solid black;
        }
      \`}</style>
    </>
  );
}

export default MyComponent;
"
`;

exports[`React - stateType: variables > jsx > Typescript Test > use-style-and-css 1`] = `
"import * as React from \\"react\\";

function MyComponent(props: any) {
  return (
    <>
      <button type=\\"button\\" className=\\"button\\">
        Button
      </button>
      <style jsx>{\`
        button {
          font-size: 12px;
          outline: 1px solid black;
        }

        .button {
          background: blue;
          color: white;
        }
      \`}</style>
    </>
  );
}

export default MyComponent;
"
`;

exports[`React - stateType: variables > jsx > Typescript Test > use-style-outside-component 1`] = `
"import * as React from \\"react\\";

function MyComponent(props: any) {
  return (
    <>
      <button type=\\"button\\">Button</button>
      <style jsx>{\`
        button {
          background: blue;
          color: white;
          font-size: 12px;
          outline: 1px solid black;
        }
      \`}</style>
    </>
  );
}

export default MyComponent;
"
`;

exports[`React - stateType: variables > jsx > Typescript Test > useTarget 1`] = `
"'function' is not allowed as a variable declaration name. (16:9)
  14 |   function UseTargetComponent(props:any) {
  15 |
> 16 |   const function name() {
     |         ^
  17 | const prefix = 123;
  18 | return prefix + 'foo';
  19 | }"
`;

exports[`React - stateType: variables > jsx > Typescript Test > webComponent 1`] = `
"import * as React from \\"react\\";
import { useRef } from \\"react\\";
import { register } from \\"swiper/element/bundle\\";

function MyBasicWebComponent(props: any) {
  const hasInitialized = useRef(false);
  if (!hasInitialized.current) {
    register();
    hasInitialized.current = true;
  }

  return (
    <swiper-container slides-per-view=\\"3\\" navigation=\\"true\\" pagination=\\"true\\">
      <swiper-slide>Slide 1</swiper-slide>
      <swiper-slide>Slide 2</swiper-slide>
      <swiper-slide>Slide 3</swiper-slide>
    </swiper-container>
  );
}

export default MyBasicWebComponent;
"
`;

exports[`React - stateType: variables > svelte > Javascript Test > basic 1`] = `
"\\"use client\\";
import * as React from \\"react\\";

function MyComponent(props) {
  const name = \\"Steve\\";

  return (
    <div>
      <input onChange={(event) => (name = event.target.value)} value={name} />
      Hello! I can run in React, Vue, Solid, or Liquid!
    </div>
  );
}

export default MyComponent;
"
`;

exports[`React - stateType: variables > svelte > Javascript Test > bindGroup 1`] = `
"\\"use client\\";
import * as React from \\"react\\";

function MyComponent(props) {
  const tortilla = \\"Plain\\";
  const fillings = [];

  return (
    <div>
      <input
        type=\\"radio\\"
        value=\\"Plain\\"
        checked={tortilla === \\"Plain\\"}
        onChange={(event) => (tortilla = event.target.value)}
      />
      <input
        type=\\"radio\\"
        value=\\"Whole wheat\\"
        checked={tortilla === \\"Whole wheat\\"}
        onChange={(event) => (tortilla = event.target.value)}
      />
      <input
        type=\\"radio\\"
        value=\\"Spinach\\"
        checked={tortilla === \\"Spinach\\"}
        onChange={(event) => (tortilla = event.target.value)}
      />
      <br />
      <br />
      <input
        type=\\"checkbox\\"
        value=\\"Rice\\"
        checked={fillings === \\"Rice\\"}
        onChange={(event) => (fillings = event.target.value)}
      />
      <input
        type=\\"checkbox\\"
        value=\\"Beans\\"
        checked={fillings === \\"Beans\\"}
        onChange={(event) => (fillings = event.target.value)}
      />
      <input
        type=\\"checkbox\\"
        value=\\"Cheese\\"
        checked={fillings === \\"Cheese\\"}
        onChange={(event) => (fillings = event.target.value)}
      />
      <input
        type=\\"checkbox\\"
        value=\\"Guac (extra)\\"
        checked={fillings === \\"Guac (extra)\\"}
        onChange={(event) => (fillings = event.target.value)}
      />
      <p>Tortilla: {tortilla}</p>
      <p>Fillings: {fillings}</p>
    </div>
  );
}

export default MyComponent;
"
`;

exports[`React - stateType: variables > svelte > Javascript Test > bindProperty 1`] = `
"\\"use client\\";
import * as React from \\"react\\";

function MyComponent(props) {
  const value = \\"hello\\";

  return <input value={value} />;
}

export default MyComponent;
"
`;

exports[`React - stateType: variables > svelte > Javascript Test > classDirective 1`] = `
"\\"use client\\";
import * as React from \\"react\\";

function MyComponent(props) {
  const focus = true;

  return (
    <input
      className={\`form-input \${props.disabled ? \\"disabled\\" : \\"\\"} \${
        focus ? \\"focus\\" : \\"\\"
      }\`}
    />
  );
}

export default MyComponent;
"
`;

exports[`React - stateType: variables > svelte > Javascript Test > context 1`] = `
"'>' expected. (33:13)
  31 | return (
  32 |
> 33 | <'activeTab'.Provider  value={activeTab}><div>{activeTab}</div></'activeTab'.Provider>
     |             ^
  34 |
  35 |
  36 |"
`;

exports[`React - stateType: variables > svelte > Javascript Test > each 1`] = `
"\\"use client\\";
import * as React from \\"react\\";

function MyComponent(props) {
  const numbers = [\\"one\\", \\"two\\", \\"three\\"];

  return (
    <ul>
      {numbers?.map((num) => (
        <li>{num}</li>
      ))}
    </ul>
  );
}

export default MyComponent;
"
`;

exports[`React - stateType: variables > svelte > Javascript Test > eventHandlers 1`] = `
"\\"use client\\";
import * as React from \\"react\\";

function MyComponent(props) {
  const log = function log(msg = \\"hello\\") {
    console.log(msg);
  };

  return (
    <div>
      <button onClick={(a) => log(\\"hi\\")}>Log</button>
      <button onClick={(event) => log(event)}>Log</button>
      <button onClick={(event) => log(event)}>Log</button>
    </div>
  );
}

export default MyComponent;
"
`;

exports[`React - stateType: variables > svelte > Javascript Test > html 1`] = `
"\\"use client\\";
import * as React from \\"react\\";

function MyComponent(props) {
  const html = \\"<b>bold</b>\\";

  return <div dangerouslySetInnerHTML={{ __html: html }} />;
}

export default MyComponent;
"
`;

exports[`React - stateType: variables > svelte > Javascript Test > ifElse 1`] = `
"\\"use client\\";
import * as React from \\"react\\";

function MyComponent(props) {
  const show = true;
  const toggle = function toggle() {
    show = !show;
  };

  return (
    <>
      {show ? (
        <>
          <button onClick={(event) => toggle(event)}> Hide </button>
        </>
      ) : (
        <button onClick={(event) => toggle(event)}> Show </button>
      )}
    </>
  );
}

export default MyComponent;
"
`;

exports[`React - stateType: variables > svelte > Javascript Test > imports 1`] = `
"\\"use client\\";
import * as React from \\"react\\";
import Button from \\"./Button\\";

function MyComponent(props) {
  const disabled = false;

  return (
    <div>
      <Button type=\\"button\\" disabled={disabled}>
        <>{props.children}</>
      </Button>
    </div>
  );
}

export default MyComponent;
"
`;

exports[`React - stateType: variables > svelte > Javascript Test > lifecycleHooks 1`] = `
"\\"use client\\";
import * as React from \\"react\\";
import { useEffect } from \\"react\\";

function MyComponent(props) {
  useEffect(() => {
    console.log(\\"onMount\\");
  }, []);
  useEffect(() => {
    console.log(\\"onAfterUpdate\\");
  });
  useEffect(() => {
    return () => {
      console.log(\\"onDestroy\\");
    };
  }, []);

  return <div />;
}

export default MyComponent;
"
`;

exports[`React - stateType: variables > svelte > Javascript Test > reactive 1`] = `
"'function' is not allowed as a variable declaration name. (17:7)
  15 |
  16 |   const name= \\"Steve\\"
> 17 | const function lowercaseName() {
     |       ^
  18 | return name.toLowerCase();
  19 | }
  20 |"
`;

exports[`React - stateType: variables > svelte > Javascript Test > reactiveWithFn 1`] = `
"\\"use client\\";
import * as React from \\"react\\";
import { useEffect } from \\"react\\";

function MyComponent(props) {
  const a = 2;
  const b = 5;
  const result = null;
  const calculateResult = function calculateResult(a_, b_) {
    result = a_ * b_;
  };

  useEffect(() => {
    calculateResult(a, b);
  }, [a, b]);

  return (
    <div>
      <input
        type=\\"number\\"
        onChange={(event) => (a = event.target.value)}
        value={a}
      />
      <input
        type=\\"number\\"
        onChange={(event) => (b = event.target.value)}
        value={b}
      />
      Result: {result}
    </div>
  );
}

export default MyComponent;
"
`;

exports[`React - stateType: variables > svelte > Javascript Test > slots 1`] = `
"import * as React from \\"react\\";

function MyComponent(props) {
  return (
    <div>
      <>{props.children || \\"default\\"}</>
      <>{props.Test || <div>default</div>}</>
    </div>
  );
}

export default MyComponent;
"
`;

exports[`React - stateType: variables > svelte > Javascript Test > style 1`] = `
"import * as React from \\"react\\";

function MyComponent(props) {
  return (
    <>
      <input className=\\"form-input\\" />
      <style jsx>{\`
        input {
          color: red;
          font-size: 12px;
        }

        .form-input:focus {
          outline: 1px solid blue;
        }
      \`}</style>
    </>
  );
}

export default MyComponent;
"
`;

exports[`React - stateType: variables > svelte > Javascript Test > textExpressions 1`] = `
"\\"use client\\";
import * as React from \\"react\\";

function MyComponent(props) {
  const a = 5;
  const b = 12;

  return (
    <div>
      normal:
      {a + b}
      <br />
      conditional
      {a > 2 ? \\"hello\\" : \\"bye\\"}
    </div>
  );
}

export default MyComponent;
"
`;

exports[`React - stateType: variables > svelte > Typescript Test > basic 1`] = `
"\\"use client\\";
import * as React from \\"react\\";

function MyComponent(props: any) {
  const name = \\"Steve\\";

  return (
    <div>
      <input onChange={(event) => (name = event.target.value)} value={name} />
      Hello! I can run in React, Vue, Solid, or Liquid!
    </div>
  );
}

export default MyComponent;
"
`;

exports[`React - stateType: variables > svelte > Typescript Test > bindGroup 1`] = `
"\\"use client\\";
import * as React from \\"react\\";

function MyComponent(props: any) {
  const tortilla = \\"Plain\\";
  const fillings = [];

  return (
    <div>
      <input
        type=\\"radio\\"
        value=\\"Plain\\"
        checked={tortilla === \\"Plain\\"}
        onChange={(event) => (tortilla = event.target.value)}
      />
      <input
        type=\\"radio\\"
        value=\\"Whole wheat\\"
        checked={tortilla === \\"Whole wheat\\"}
        onChange={(event) => (tortilla = event.target.value)}
      />
      <input
        type=\\"radio\\"
        value=\\"Spinach\\"
        checked={tortilla === \\"Spinach\\"}
        onChange={(event) => (tortilla = event.target.value)}
      />
      <br />
      <br />
      <input
        type=\\"checkbox\\"
        value=\\"Rice\\"
        checked={fillings === \\"Rice\\"}
        onChange={(event) => (fillings = event.target.value)}
      />
      <input
        type=\\"checkbox\\"
        value=\\"Beans\\"
        checked={fillings === \\"Beans\\"}
        onChange={(event) => (fillings = event.target.value)}
      />
      <input
        type=\\"checkbox\\"
        value=\\"Cheese\\"
        checked={fillings === \\"Cheese\\"}
        onChange={(event) => (fillings = event.target.value)}
      />
      <input
        type=\\"checkbox\\"
        value=\\"Guac (extra)\\"
        checked={fillings === \\"Guac (extra)\\"}
        onChange={(event) => (fillings = event.target.value)}
      />
      <p>Tortilla: {tortilla}</p>
      <p>Fillings: {fillings}</p>
    </div>
  );
}

export default MyComponent;
"
`;

exports[`React - stateType: variables > svelte > Typescript Test > bindProperty 1`] = `
"\\"use client\\";
import * as React from \\"react\\";

function MyComponent(props: any) {
  const value = \\"hello\\";

  return <input value={value} />;
}

export default MyComponent;
"
`;

exports[`React - stateType: variables > svelte > Typescript Test > classDirective 1`] = `
"\\"use client\\";
import * as React from \\"react\\";

function MyComponent(props: any) {
  const focus = true;

  return (
    <input
      className={\`form-input \${props.disabled ? \\"disabled\\" : \\"\\"} \${
        focus ? \\"focus\\" : \\"\\"
      }\`}
    />
  );
}

export default MyComponent;
"
`;

exports[`React - stateType: variables > svelte > Typescript Test > context 1`] = `
"'>' expected. (33:13)
  31 | return (
  32 |
> 33 | <'activeTab'.Provider  value={activeTab}><div>{activeTab}</div></'activeTab'.Provider>
     |             ^
  34 |
  35 |
  36 |"
`;

exports[`React - stateType: variables > svelte > Typescript Test > each 1`] = `
"\\"use client\\";
import * as React from \\"react\\";

function MyComponent(props: any) {
  const numbers = [\\"one\\", \\"two\\", \\"three\\"];

  return (
    <ul>
      {numbers?.map((num) => (
        <li>{num}</li>
      ))}
    </ul>
  );
}

export default MyComponent;
"
`;

exports[`React - stateType: variables > svelte > Typescript Test > eventHandlers 1`] = `
"\\"use client\\";
import * as React from \\"react\\";

function MyComponent(props: any) {
  const log = function log(msg = \\"hello\\") {
    console.log(msg);
  };

  return (
    <div>
      <button onClick={(a) => log(\\"hi\\")}>Log</button>
      <button onClick={(event) => log(event)}>Log</button>
      <button onClick={(event) => log(event)}>Log</button>
    </div>
  );
}

export default MyComponent;
"
`;

exports[`React - stateType: variables > svelte > Typescript Test > html 1`] = `
"\\"use client\\";
import * as React from \\"react\\";

function MyComponent(props: any) {
  const html = \\"<b>bold</b>\\";

  return <div dangerouslySetInnerHTML={{ __html: html }} />;
}

export default MyComponent;
"
`;

exports[`React - stateType: variables > svelte > Typescript Test > ifElse 1`] = `
"\\"use client\\";
import * as React from \\"react\\";

function MyComponent(props: any) {
  const show = true;
  const toggle = function toggle() {
    show = !show;
  };

  return (
    <>
      {show ? (
        <>
          <button onClick={(event) => toggle(event)}> Hide </button>
        </>
      ) : (
        <button onClick={(event) => toggle(event)}> Show </button>
      )}
    </>
  );
}

export default MyComponent;
"
`;

exports[`React - stateType: variables > svelte > Typescript Test > imports 1`] = `
"\\"use client\\";
import * as React from \\"react\\";
import Button from \\"./Button\\";

function MyComponent(props: any) {
  const disabled = false;

  return (
    <div>
      <Button type=\\"button\\" disabled={disabled}>
        <>{props.children}</>
      </Button>
    </div>
  );
}

export default MyComponent;
"
`;

exports[`React - stateType: variables > svelte > Typescript Test > lifecycleHooks 1`] = `
"\\"use client\\";
import * as React from \\"react\\";
import { useEffect } from \\"react\\";

function MyComponent(props: any) {
  useEffect(() => {
    console.log(\\"onMount\\");
  }, []);
  useEffect(() => {
    console.log(\\"onAfterUpdate\\");
  });
  useEffect(() => {
    return () => {
      console.log(\\"onDestroy\\");
    };
  }, []);

  return <div />;
}

export default MyComponent;
"
`;

exports[`React - stateType: variables > svelte > Typescript Test > reactive 1`] = `
"'function' is not allowed as a variable declaration name. (17:7)
  15 |
  16 |   const name= \\"Steve\\"
> 17 | const function lowercaseName() {
     |       ^
  18 | return name.toLowerCase();
  19 | }
  20 |"
`;

exports[`React - stateType: variables > svelte > Typescript Test > reactiveWithFn 1`] = `
"\\"use client\\";
import * as React from \\"react\\";
import { useEffect } from \\"react\\";

function MyComponent(props: any) {
  const a = 2;
  const b = 5;
  const result = null;
  const calculateResult = function calculateResult(a_, b_) {
    result = a_ * b_;
  };

  useEffect(() => {
    calculateResult(a, b);
  }, [a, b]);

  return (
    <div>
      <input
        type=\\"number\\"
        onChange={(event) => (a = event.target.value)}
        value={a}
      />
      <input
        type=\\"number\\"
        onChange={(event) => (b = event.target.value)}
        value={b}
      />
      Result: {result}
    </div>
  );
}

export default MyComponent;
"
`;

exports[`React - stateType: variables > svelte > Typescript Test > slots 1`] = `
"import * as React from \\"react\\";

function MyComponent(props: any) {
  return (
    <div>
      <>{props.children || \\"default\\"}</>
      <>{props.Test || <div>default</div>}</>
    </div>
  );
}

export default MyComponent;
"
`;

exports[`React - stateType: variables > svelte > Typescript Test > style 1`] = `
"import * as React from \\"react\\";

function MyComponent(props: any) {
  return (
    <>
      <input className=\\"form-input\\" />
      <style jsx>{\`
        input {
          color: red;
          font-size: 12px;
        }

        .form-input:focus {
          outline: 1px solid blue;
        }
      \`}</style>
    </>
  );
}

export default MyComponent;
"
`;

exports[`React - stateType: variables > svelte > Typescript Test > textExpressions 1`] = `
"\\"use client\\";
import * as React from \\"react\\";

function MyComponent(props: any) {
  const a = 5;
  const b = 12;

  return (
    <div>
      normal:
      {a + b}
      <br />
      conditional
      {a > 2 ? \\"hello\\" : \\"bye\\"}
    </div>
  );
}

export default MyComponent;
"
`;
