// Vitest Snapshot v1

exports[`Angular with Import Mapper Tests > jsx > Javascript Test > AdvancedRef 1`] = `
"import { NgModule } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

import { Component, ViewChild, ElementRef, Input } from \\"@angular/core\\";

export interface Props {
  showInput: boolean;
}

@Component({
  selector: \\"my-basic-ref-component, MyBasicRefComponent\\",
  template: \`
    <div>
      <ng-container *ngIf=\\"showInput\\">
        <ng-container>
          <input
            class=\\"input\\"
            #inputRef
            [attr.value]=\\"name\\"
            (blur)=\\"onBlur()\\"
            (input)=\\"name = $event.target.value\\"
          />

          <label for=\\"cars\\" #inputNoArgRef>Choose a car:</label>

          <select name=\\"cars\\" id=\\"cars\\">
            <option value=\\"supra\\">GR Supra</option>

            <option value=\\"86\\">GR 86</option>
          </select>
        </ng-container>
      </ng-container>

      Hello {{lowerCaseName()}} ! I can run in React, Qwik, Vue, Solid, or Web
      Component!
    </div>
  \`,
  styles: [
    \`
      .input {
        color: red;
      }
    \`,
  ],
})
export class MyBasicRefComponent {
  @Input() showInput: Props[\\"showInput\\"];

  @ViewChild(\\"inputRef\\") inputRef: ElementRef;
  @ViewChild(\\"inputNoArgRef\\") inputNoArgRef: ElementRef;

  name = \\"PatrickJS\\";
  onBlur = function onBlur() {
    // Maintain focus
    this.inputRef.nativeElement.focus();
  };
  lowerCaseName = function lowerCaseName() {
    return this.name.toLowerCase();
  };

  ngAfterContentChecked() {
    console.log(\\"Received an update\\");
  }
}

@NgModule({
  declarations: [MyBasicRefComponent],
  imports: [CommonModule],
  exports: [MyBasicRefComponent],
  bootstrap: [SomeOtherComponent],
})
export class MyBasicRefComponentModule {}
"
`;

exports[`Angular with Import Mapper Tests > jsx > Javascript Test > Basic 1`] = `
"import { NgModule } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

import { Component } from \\"@angular/core\\";

export interface MyBasicComponentProps {
  id: string;
}

export const DEFAULT_VALUES = {
  name: \\"Steve\\",
};

@Component({
  selector: \\"my-basic-component, MyBasicComponent\\",
  template: \`
    <div class=\\"test div\\">
      <input
        [attr.value]=\\"DEFAULT_VALUES.name || name\\"
        (input)=\\"name = $event.target.value\\"
      />

      Hello! I can run in React, Vue, Solid, or Liquid!
    </div>
  \`,
  styles: [
    \`
      .div {
        padding: 10px;
      }
    \`,
  ],
})
export class MyBasicComponent {
  DEFAULT_VALUES = DEFAULT_VALUES;

  name = \\"Steve\\";
  underscore_fn_name() {
    return \\"bar\\";
  }
  age = 1;
  sports = [\\"\\"];
}

@NgModule({
  declarations: [MyBasicComponent],
  imports: [CommonModule],
  exports: [MyBasicComponent],
  bootstrap: [SomeOtherComponent],
})
export class MyBasicComponentModule {}
"
`;

exports[`Angular with Import Mapper Tests > jsx > Javascript Test > Basic 2`] = `
"import { NgModule } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

import { Component } from \\"@angular/core\\";

@Component({
  selector: \\"my-basic-for-show-component, MyBasicForShowComponent\\",
  template: \`
    <div>
      <ng-container *ngFor=\\"let person of names\\">
        <ng-container *ngIf=\\"person === name\\">
          <input
            [attr.value]=\\"name\\"
            (input)=\\"
         name = $event.target.value + ' and ' + person;
       \\"
          />

          Hello {{person}} ! I can run in Qwik, Web Component, React, Vue,
          Solid, or Liquid!
        </ng-container>
      </ng-container>
    </div>
  \`,
})
export class MyBasicForShowComponent {
  name = \\"PatrickJS\\";
  names = [\\"Steve\\", \\"PatrickJS\\"];
}

@NgModule({
  declarations: [MyBasicForShowComponent],
  imports: [CommonModule],
  exports: [MyBasicForShowComponent],
  bootstrap: [SomeOtherComponent],
})
export class MyBasicForShowComponentModule {}
"
`;

exports[`Angular with Import Mapper Tests > jsx > Javascript Test > Basic Context 1`] = `
"import { NgModule } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

import { Component } from \\"@angular/core\\";

import { Injector, createInjector, MyService } from \\"@dummy/injection-js\\";

@Component({
  selector: \\"my-basic-component, MyBasicComponent\\",
  template: \`
    <div>
      {{myService.method('hello') + name}} Hello! I can run in React, Vue,
      Solid, or Liquid!

      <input (input)=\\"onChange\\" />
    </div>
  \`,
})
export class MyBasicComponent {
  name = \\"PatrickJS\\";
  onChange = function onChange() {
    const change = this.myService.method(\\"change\\");
    console.log(change);
  };

  constructor(public myService: MyService) {
    const hi = this.myService.method(\\"hi\\");
    console.log(hi);
  }

  ngOnInit() {
    const bye = this.myService.method(\\"hi\\");
    console.log(bye);
  }
}

@NgModule({
  declarations: [MyBasicComponent],
  imports: [CommonModule],
  exports: [MyBasicComponent],
  bootstrap: [SomeOtherComponent],
})
export class MyBasicComponentModule {}
"
`;

exports[`Angular with Import Mapper Tests > jsx > Javascript Test > Basic OnMount Update 1`] = `
"import { NgModule } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

import { Component, Input } from \\"@angular/core\\";

export interface Props {
  hi: string;
  bye: string;
}

@Component({
  selector: \\"my-basic-on-mount-update-component, MyBasicOnMountUpdateComponent\\",
  template: \`
    <div>Hello {{name}}</div>
  \`,
})
export class MyBasicOnMountUpdateComponent {
  @Input() hi: Props[\\"hi\\"];
  @Input() bye: Props[\\"bye\\"];

  name = \\"PatrickJS\\";
  names = [\\"Steve\\", \\"PatrickJS\\"];

  constructor() {
    this.name = \\"PatrickJS onInit\\" + this.hi;
  }

  ngOnInit() {
    this.name = \\"PatrickJS onMount\\" + this.bye;
  }
}

@NgModule({
  declarations: [MyBasicOnMountUpdateComponent],
  imports: [CommonModule],
  exports: [MyBasicOnMountUpdateComponent],
  bootstrap: [SomeOtherComponent],
})
export class MyBasicOnMountUpdateComponentModule {}
"
`;

exports[`Angular with Import Mapper Tests > jsx > Javascript Test > Basic Outputs 1`] = `
"import { NgModule } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

import { Output, EventEmitter, Component, Input } from \\"@angular/core\\";

@Component({
  selector: \\"my-basic-outputs-component, MyBasicOutputsComponent\\",
  template: \`
    <div></div>
  \`,
})
export class MyBasicOutputsComponent {
  @Input() message: any;

  @Output() onMessage = new EventEmitter();
  @Output() onEvent = new EventEmitter();

  name = \\"PatrickJS\\";

  ngOnInit() {
    this.onMessage.emit(this.name);
    this.onEvent.emit(this.message);
  }
}

@NgModule({
  declarations: [MyBasicOutputsComponent],
  imports: [CommonModule],
  exports: [MyBasicOutputsComponent],
  bootstrap: [SomeOtherComponent],
})
export class MyBasicOutputsComponentModule {}
"
`;

exports[`Angular with Import Mapper Tests > jsx > Javascript Test > Basic Outputs Meta 1`] = `
"import { NgModule } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

import { Output, EventEmitter, Component, Input } from \\"@angular/core\\";

@Component({
  selector: \\"my-basic-outputs-component, MyBasicOutputsComponent\\",
  template: \`
    <div></div>
  \`,
})
export class MyBasicOutputsComponent {
  @Input() message: any;

  @Output() onMessage = new EventEmitter();
  @Output() onEvent = new EventEmitter();

  name = \\"PatrickJS\\";

  ngOnInit() {
    this.onMessage.emit(this.name);
    this.onEvent.emit(this.message);
  }
}

@NgModule({
  declarations: [MyBasicOutputsComponent],
  imports: [CommonModule],
  exports: [MyBasicOutputsComponent],
  bootstrap: [SomeOtherComponent],
})
export class MyBasicOutputsComponentModule {}
"
`;

exports[`Angular with Import Mapper Tests > jsx > Javascript Test > BasicAttribute 1`] = `
"import { NgModule } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

import { Component } from \\"@angular/core\\";

@Component({
  selector: \\"my-component, MyComponent\\",
  template: \`
    <input autocapitalize=\\"on\\" autocomplete=\\"on\\" [attr.spellcheck]=\\"true\\" />
  \`,
})
export class MyComponent {}

@NgModule({
  declarations: [MyComponent],
  imports: [CommonModule],
  exports: [MyComponent],
  bootstrap: [SomeOtherComponent],
})
export class MyComponentModule {}
"
`;

exports[`Angular with Import Mapper Tests > jsx > Javascript Test > BasicBooleanAttribute 1`] = `
"import { NgModule } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

import { Component, Input } from \\"@angular/core\\";

type Props = {
  children: any;
  type: string;
};

import MyBooleanAttributeComponentModule from \\"./basic-boolean-attribute-component.raw/angular\\";

@Component({
  selector: \\"my-boolean-attribute, MyBooleanAttribute\\",
  template: \`
    <div>
      <ng-content></ng-content>

      {{type}}

      <my-boolean-attribute-component
        [toggle]=\\"true\\"
      ></my-boolean-attribute-component>

      <my-boolean-attribute-component
        [toggle]=\\"true\\"
      ></my-boolean-attribute-component>

      <my-boolean-attribute-component
        [list]=\\"null\\"
      ></my-boolean-attribute-component>
    </div>
  \`,
})
export class MyBooleanAttribute {
  @Input() type: Props[\\"type\\"];
}

@NgModule({
  declarations: [MyBooleanAttribute],
  imports: [CommonModule, MyBooleanAttributeComponentModule],
  exports: [MyBooleanAttribute],
  bootstrap: [SomeOtherComponent],
})
export class MyBooleanAttributeModule {}
"
`;

exports[`Angular with Import Mapper Tests > jsx > Javascript Test > BasicChildComponent 1`] = `
"import { NgModule } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

import { Component } from \\"@angular/core\\";

import MyBasicComponentModule from \\"./basic.raw/angular\\";
import MyBasicOnMountUpdateComponentModule from \\"./basic-onMount-update.raw/angular\\";

@Component({
  selector: \\"my-basic-child-component, MyBasicChildComponent\\",
  template: \`
    <div>
      <my-basic-component [id]=\\"dev\\"></my-basic-component>

      <div>
        <my-basic-on-mount-update-component
          [hi]=\\"name\\"
          [bye]=\\"dev\\"
        ></my-basic-on-mount-update-component>
      </div>
    </div>
  \`,
})
export class MyBasicChildComponent {
  name = \\"Steve\\";
  dev = \\"PatrickJS\\";
}

@NgModule({
  declarations: [MyBasicChildComponent],
  imports: [
    CommonModule,
    MyBasicComponentModule,
    MyBasicOnMountUpdateComponentModule,
  ],
  exports: [MyBasicChildComponent],
  bootstrap: [SomeOtherComponent],
})
export class MyBasicChildComponentModule {}
"
`;

exports[`Angular with Import Mapper Tests > jsx > Javascript Test > BasicFor 1`] = `
"import { NgModule } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

import { Component } from \\"@angular/core\\";

@Component({
  selector: \\"my-basic-for-component, MyBasicForComponent\\",
  template: \`
    <div>
      <ng-container *ngFor=\\"let person of names\\">
        <ng-container>
          <input
            [attr.value]=\\"name\\"
            (input)=\\"
         name = $event.target.value + ' and ' + person;
       \\"
          />

          Hello {{person}} ! I can run in Qwik, Web Component, React, Vue,
          Solid, or Liquid!
        </ng-container>
      </ng-container>
    </div>
  \`,
})
export class MyBasicForComponent {
  name = \\"PatrickJS\\";
  names = [\\"Steve\\", \\"PatrickJS\\"];

  ngOnInit() {
    console.log(\\"onMount code\\");
  }
}

@NgModule({
  declarations: [MyBasicForComponent],
  imports: [CommonModule],
  exports: [MyBasicForComponent],
  bootstrap: [SomeOtherComponent],
})
export class MyBasicForComponentModule {}
"
`;

exports[`Angular with Import Mapper Tests > jsx > Javascript Test > BasicRef 1`] = `
"import { NgModule } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

import { Component, ViewChild, ElementRef, Input } from \\"@angular/core\\";

export interface Props {
  showInput: boolean;
}

@Component({
  selector: \\"my-basic-ref-component, MyBasicRefComponent\\",
  template: \`
    <div>
      <ng-container *ngIf=\\"showInput\\">
        <ng-container>
          <input
            class=\\"input\\"
            #inputRef
            [attr.value]=\\"name\\"
            (blur)=\\"onBlur()\\"
            (input)=\\"name = $event.target.value\\"
          />

          <label for=\\"cars\\" #inputNoArgRef>Choose a car:</label>

          <select name=\\"cars\\" id=\\"cars\\">
            <option value=\\"supra\\">GR Supra</option>

            <option value=\\"86\\">GR 86</option>
          </select>
        </ng-container>
      </ng-container>

      Hello {{lowerCaseName()}} ! I can run in React, Qwik, Vue, Solid, or Web
      Component!
    </div>
  \`,
  styles: [
    \`
      .input {
        color: red;
      }
    \`,
  ],
})
export class MyBasicRefComponent {
  @Input() showInput: Props[\\"showInput\\"];

  @ViewChild(\\"inputRef\\") inputRef: ElementRef;
  @ViewChild(\\"inputNoArgRef\\") inputNoArgRef: ElementRef;

  name = \\"PatrickJS\\";
  onBlur = function onBlur() {
    // Maintain focus
    this.inputRef.nativeElement.focus();
  };
  lowerCaseName = function lowerCaseName() {
    return this.name.toLowerCase();
  };
}

@NgModule({
  declarations: [MyBasicRefComponent],
  imports: [CommonModule],
  exports: [MyBasicRefComponent],
  bootstrap: [SomeOtherComponent],
})
export class MyBasicRefComponentModule {}
"
`;

exports[`Angular with Import Mapper Tests > jsx > Javascript Test > BasicRefAssignment 1`] = `
"import { NgModule } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

import { Component } from \\"@angular/core\\";

export interface Props {
  showInput: boolean;
}

@Component({
  selector: \\"my-basic-ref-assignment-component, MyBasicRefAssignmentComponent\\",
  template: \`
    <div>
      <button (click)=\\"handlerClick($event)\\">Click</button>
    </div>
  \`,
})
export class MyBasicRefAssignmentComponent {
  handlerClick = function handlerClick(event) {
    event.preventDefault();
    console.log(\\"current value\\", this._holdValueRef);
    this._holdValueRef = this._holdValueRef + \\"JS\\";
  };

  private _holdValueRef = \\"Patrick\\";
}

@NgModule({
  declarations: [MyBasicRefAssignmentComponent],
  imports: [CommonModule],
  exports: [MyBasicRefAssignmentComponent],
  bootstrap: [SomeOtherComponent],
})
export class MyBasicRefAssignmentComponentModule {}
"
`;

exports[`Angular with Import Mapper Tests > jsx > Javascript Test > BasicRefPrevious 1`] = `
"import { NgModule } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

import { Component } from \\"@angular/core\\";

export interface Props {
  showInput: boolean;
}

export function usePrevious<T>(value: T) {
  // The ref object is a generic container whose current property is mutable ...
  // ... and can hold any value, similar to an instance property on a class
  let ref = useRef<T>(null); // Store current value in ref

  onUpdate(() => {
    ref = value;
  }, [value]); // Only re-run if value changes
  // Return previous value (happens before update in useEffect above)

  return ref;
}

@Component({
  selector: \\"my-previous-component, MyPreviousComponent\\",
  template: \`
    <div>
      <h1>Now: {{count}} , before: {{this._prevCount}}</h1>

      <button (click)=\\"count += 1\\">Increment</button>
    </div>
  \`,
})
export class MyPreviousComponent {
  count = 0;

  private _prevCount = this.count;

  ngAfterContentChecked() {
    this._prevCount = this.count;
  }
}

@NgModule({
  declarations: [MyPreviousComponent],
  imports: [CommonModule],
  exports: [MyPreviousComponent],
  bootstrap: [SomeOtherComponent],
})
export class MyPreviousComponentModule {}
"
`;

exports[`Angular with Import Mapper Tests > jsx > Javascript Test > Button 1`] = `
"import { NgModule } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

import { Component, Input } from \\"@angular/core\\";

export interface ButtonProps {
  attributes?: any;
  text?: string;
  link?: string;
  openLinkInNewTab?: boolean;
}

@Component({
  selector: \\"button, Button\\",
  template: \`
    <div>
      <ng-container *ngIf=\\"link\\">
        <a
          [attr.href]=\\"link\\"
          [attr.target]=\\"openLinkInNewTab ? '_blank' : undefined\\"
        >
          {{text}}
        </a>
      </ng-container>

      <ng-container *ngIf=\\"!link\\">
        <button type=\\"button\\">{{text}}</button>
      </ng-container>
    </div>
  \`,
})
export class Button {
  @Input() link: ButtonProps[\\"link\\"];
  @Input() attributes: ButtonProps[\\"attributes\\"];
  @Input() openLinkInNewTab: ButtonProps[\\"openLinkInNewTab\\"];
  @Input() text: ButtonProps[\\"text\\"];
}

@NgModule({
  declarations: [Button],
  imports: [CommonModule],
  exports: [Button],
  bootstrap: [SomeOtherComponent],
})
export class ButtonModule {}
"
`;

exports[`Angular with Import Mapper Tests > jsx > Javascript Test > Columns 1`] = `
"import { NgModule } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

import { Component, Input } from \\"@angular/core\\";

type Column = {
  content: any; // TODO: Implement this when support for dynamic CSS lands

  width?: number;
};
export interface ColumnProps {
  columns?: Column[]; // TODO: Implement this when support for dynamic CSS lands

  space?: number; // TODO: Implement this when support for dynamic CSS lands

  stackColumnsAt?: \\"tablet\\" | \\"mobile\\" | \\"never\\"; // TODO: Implement this when support for dynamic CSS lands

  reverseColumnsWhenStacked?: boolean;
}

@Component({
  selector: \\"column, Column\\",
  template: \`
    <div class=\\"builder-columns div\\">
      <ng-container *ngFor=\\"let column of columns; let index = index\\">
        <div class=\\"builder-column div-2\\">{{column.content}} {{index}}</div>
      </ng-container>
    </div>
  \`,
  styles: [
    \`
      .div {
        display: flex;
        flex-direction: column;
        align-items: stretch;
        line-height: normal;
      }
      @media (max-width: 999px) {
        .div {
          flex-direction: row;
        }
      }
      @media (max-width: 639px) {
        .div {
          flex-direction: row-reverse;
        }
      }
      .div-2 {
        flex-grow: 1;
      }
    \`,
  ],
})
export class Column {
  @Input() columns: ColumnProps[\\"columns\\"];
  @Input() space: ColumnProps[\\"space\\"];

  getColumns() {
    return this.columns || [];
  }
  getGutterSize() {
    return typeof this.space === \\"number\\" ? this.space || 0 : 20;
  }
  getWidth(index) {
    const columns = this.getColumns();
    return (columns[index] && columns[index].width) || 100 / columns.length;
  }
  getColumnCssWidth(index) {
    const columns = this.getColumns();
    const gutterSize = this.getGutterSize();
    const subtractWidth = (gutterSize * (columns.length - 1)) / columns.length;
    return \`calc(\${this.getWidth(index)}% - \${subtractWidth}px)\`;
  }
}

@NgModule({
  declarations: [Column],
  imports: [CommonModule],
  exports: [Column],
  bootstrap: [SomeOtherComponent],
})
export class ColumnModule {}
"
`;

exports[`Angular with Import Mapper Tests > jsx > Javascript Test > ContentSlotHtml 1`] = `
"import { NgModule } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

import { Component, Input } from \\"@angular/core\\";

type Props = {
  [key: string]: string | JSX.Element;
  slotTesting: JSX.Element;
};

@Component({
  selector: \\"content-slot-code, ContentSlotCode\\",
  template: \`
    <div>
      <ng-content select=\\"[testing]\\"></ng-content>

      <div>
        <hr />
      </div>

      <div>
        <ng-content></ng-content>
      </div>
    </div>
  \`,
})
export class ContentSlotCode {}

@NgModule({
  declarations: [ContentSlotCode],
  imports: [CommonModule],
  exports: [ContentSlotCode],
  bootstrap: [SomeOtherComponent],
})
export class ContentSlotCodeModule {}
"
`;

exports[`Angular with Import Mapper Tests > jsx > Javascript Test > ContentSlotJSX 1`] = `
"import { NgModule } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

import { Component, Input } from \\"@angular/core\\";

type Props = {
  [key: string]: string | JSX.Element;
};

@Component({
  selector: \\"content-slot-jsx-code, ContentSlotJsxCode\\",
  template: \`
    <div>
      <ng-container *ngIf=\\"slotTesting\\">
        <div><ng-content select=\\"[testing]\\"></ng-content></div>
      </ng-container>

      <div>
        <hr />
      </div>

      <div><ng-content></ng-content></div>
    </div>
  \`,
})
export class ContentSlotJsxCode {}

@NgModule({
  declarations: [ContentSlotJsxCode],
  imports: [CommonModule],
  exports: [ContentSlotJsxCode],
  bootstrap: [SomeOtherComponent],
})
export class ContentSlotJsxCodeModule {}
"
`;

exports[`Angular with Import Mapper Tests > jsx > Javascript Test > CustomCode 1`] = `
"import { NgModule } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

import { Component, ViewChild, ElementRef, Input } from \\"@angular/core\\";

export interface CustomCodeProps {
  code: string;
  replaceNodes?: boolean;
}

@Component({
  selector: \\"custom-code, CustomCode\\",
  template: \`
    <div
      #elem
      [class]=\\"'builder-custom-code' + (replaceNodes ? ' replace-nodes' : '')\\"
      [innerHTML]=\\"code\\"
    ></div>
  \`,
})
export class CustomCode {
  @Input() replaceNodes: CustomCodeProps[\\"replaceNodes\\"];
  @Input() code: CustomCodeProps[\\"code\\"];

  @ViewChild(\\"elem\\") elem: ElementRef;

  scriptsInserted = [];
  scriptsRun = [];
  findAndRunScripts() {
    // TODO: Move this function to standalone one in '@builder.io/utils'
    if (this.elem.nativeElement && typeof window !== \\"undefined\\") {
      /** @type {HTMLScriptElement[]} */
      const scripts = this.elem.nativeElement.getElementsByTagName(\\"script\\");

      for (let i = 0; i < scripts.length; i++) {
        const script = scripts[i];

        if (script.src) {
          if (this.scriptsInserted.includes(script.src)) {
            continue;
          }

          this.scriptsInserted.push(script.src);
          const newScript = document.createElement(\\"script\\");
          newScript.async = true;
          newScript.src = script.src;
          document.head.appendChild(newScript);
        } else if (
          !script.type ||
          [
            \\"text/javascript\\",
            \\"application/javascript\\",
            \\"application/ecmascript\\",
          ].includes(script.type)
        ) {
          if (this.scriptsRun.includes(script.innerText)) {
            continue;
          }

          try {
            this.scriptsRun.push(script.innerText);
            new Function(script.innerText)();
          } catch (error) {
            console.warn(\\"\`CustomCode\`: Error running script:\\", error);
          }
        }
      }
    }
  }

  ngOnInit() {
    this.findAndRunScripts();
  }
}

@NgModule({
  declarations: [CustomCode],
  imports: [CommonModule],
  exports: [CustomCode],
  bootstrap: [SomeOtherComponent],
})
export class CustomCodeModule {}
"
`;

exports[`Angular with Import Mapper Tests > jsx > Javascript Test > Embed 1`] = `
"import { NgModule } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

import { Component, ViewChild, ElementRef, Input } from \\"@angular/core\\";

export interface CustomCodeProps {
  code: string;
  replaceNodes?: boolean;
}

@Component({
  selector: \\"custom-code, CustomCode\\",
  template: \`
    <div
      #elem
      [class]=\\"'builder-custom-code' + (replaceNodes ? ' replace-nodes' : '')\\"
      [innerHTML]=\\"code\\"
    ></div>
  \`,
})
export class CustomCode {
  @Input() replaceNodes: CustomCodeProps[\\"replaceNodes\\"];
  @Input() code: CustomCodeProps[\\"code\\"];

  @ViewChild(\\"elem\\") elem: ElementRef;

  scriptsInserted = [];
  scriptsRun = [];
  findAndRunScripts() {
    // TODO: Move this function to standalone one in '@builder.io/utils'
    if (this.elem.nativeElement && typeof window !== \\"undefined\\") {
      /** @type {HTMLScriptElement[]} */
      const scripts = this.elem.nativeElement.getElementsByTagName(\\"script\\");

      for (let i = 0; i < scripts.length; i++) {
        const script = scripts[i];

        if (script.src) {
          if (this.scriptsInserted.includes(script.src)) {
            continue;
          }

          this.scriptsInserted.push(script.src);
          const newScript = document.createElement(\\"script\\");
          newScript.async = true;
          newScript.src = script.src;
          document.head.appendChild(newScript);
        } else if (
          !script.type ||
          [
            \\"text/javascript\\",
            \\"application/javascript\\",
            \\"application/ecmascript\\",
          ].includes(script.type)
        ) {
          if (this.scriptsRun.includes(script.innerText)) {
            continue;
          }

          try {
            this.scriptsRun.push(script.innerText);
            new Function(script.innerText)();
          } catch (error) {
            console.warn(\\"\`CustomCode\`: Error running script:\\", error);
          }
        }
      }
    }
  }

  ngOnInit() {
    this.findAndRunScripts();
  }
}

@NgModule({
  declarations: [CustomCode],
  imports: [CommonModule],
  exports: [CustomCode],
  bootstrap: [SomeOtherComponent],
})
export class CustomCodeModule {}
"
`;

exports[`Angular with Import Mapper Tests > jsx > Javascript Test > Form 1`] = `
"import { NgModule } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

import { Component, ViewChild, ElementRef, Input } from \\"@angular/core\\";

export interface FormProps {
  attributes?: any;
  name?: string;
  action?: string;
  validate?: boolean;
  method?: string;
  builderBlock?: BuilderElement;
  sendSubmissionsTo?: string;
  sendSubmissionsToEmail?: string;
  sendWithJs?: boolean;
  contentType?: string;
  customHeaders?: {
    [key: string]: string;
  };
  successUrl?: string;
  previewState?: FormState;
  successMessage?: BuilderElement[];
  errorMessage?: BuilderElement[];
  sendingMessage?: BuilderElement[];
  resetFormOnSubmit?: boolean;
  errorMessagePath?: string;
}
export type FormState = \\"unsubmitted\\" | \\"sending\\" | \\"success\\" | \\"error\\";

import { BuilderBlock as BuilderBlockComponentModule } from \\"@fake/angular\\";
import { Builder, builder } from \\"@builder.io/sdk\\";
import { BuilderBlocksModule } from \\"@fake/angular\\";
import { set } from \\"@fake\\";
import { get } from \\"@fake\\";

@Component({
  selector: \\"form-component, FormComponent\\",
  template: \`
    <form
      [attr.validate]=\\"validate\\"
      #formRef
      [attr.action]=\\"!sendWithJs && action\\"
      [attr.method]=\\"method\\"
      [attr.name]=\\"name\\"
      (submit)=\\"onSubmit($event)\\"
    >
      <ng-container *ngIf=\\"builderBlock && builderBlock.children\\">
        <ng-container
          *ngFor=\\"let block of builderBlock?.children; let index = index\\"
        >
          <BuilderBlockComponent
            [key]=\\"block.id\\"
            [block]=\\"block\\"
            [index]=\\"index\\"
          ></BuilderBlockComponent>
        </ng-container>
      </ng-container>

      <ng-container *ngIf=\\"submissionState === 'error'\\">
        <BuilderBlocks
          dataPath=\\"errorMessage\\"
          [blocks]=\\"errorMessage\\"
        ></BuilderBlocks>
      </ng-container>

      <ng-container *ngIf=\\"submissionState === 'sending'\\">
        <BuilderBlocks
          dataPath=\\"sendingMessage\\"
          [blocks]=\\"sendingMessage\\"
        ></BuilderBlocks>
      </ng-container>

      <ng-container *ngIf=\\"submissionState === 'error' && responseData\\">
        <pre class=\\"builder-form-error-text pre\\">
                 
       {{JSON.stringify(responseData, null, 2)}}

               </pre
        >
      </ng-container>

      <ng-container *ngIf=\\"submissionState === 'success'\\">
        <BuilderBlocks
          dataPath=\\"successMessage\\"
          [blocks]=\\"successMessage\\"
        ></BuilderBlocks>
      </ng-container>
    </form>
  \`,
  styles: [
    \`
      .pre {
        padding: 10px;
        color: red;
        text-align: center;
      }
    \`,
  ],
})
export class FormComponent {
  builder = builder;

  @Input() previewState: FormProps[\\"previewState\\"];
  @Input() sendWithJs: FormProps[\\"sendWithJs\\"];
  @Input() sendSubmissionsTo: FormProps[\\"sendSubmissionsTo\\"];
  @Input() action: FormProps[\\"action\\"];
  @Input() customHeaders: FormProps[\\"customHeaders\\"];
  @Input() contentType: FormProps[\\"contentType\\"];
  @Input() sendSubmissionsToEmail: FormProps[\\"sendSubmissionsToEmail\\"];
  @Input() name: FormProps[\\"name\\"];
  @Input() method: FormProps[\\"method\\"];
  @Input() errorMessagePath: FormProps[\\"errorMessagePath\\"];
  @Input() resetFormOnSubmit: FormProps[\\"resetFormOnSubmit\\"];
  @Input() successUrl: FormProps[\\"successUrl\\"];
  @Input() validate: FormProps[\\"validate\\"];
  @Input() attributes: FormProps[\\"attributes\\"];
  @Input() builderBlock: FormProps[\\"builderBlock\\"];
  @Input() errorMessage: FormProps[\\"errorMessage\\"];
  @Input() sendingMessage: FormProps[\\"sendingMessage\\"];
  @Input() successMessage: FormProps[\\"successMessage\\"];

  @ViewChild(\\"formRef\\") formRef: ElementRef;

  formState = \\"unsubmitted\\";
  responseData = null;
  formErrorMessage = \\"\\";
  get submissionState() {
    return (Builder.isEditing && this.previewState) || this.formState;
  }
  onSubmit(event) {
    const sendWithJs = this.sendWithJs || this.sendSubmissionsTo === \\"email\\";

    if (this.sendSubmissionsTo === \\"zapier\\") {
      event.preventDefault();
    } else if (sendWithJs) {
      if (!(this.action || this.sendSubmissionsTo === \\"email\\")) {
        event.preventDefault();
        return;
      }

      event.preventDefault();
      const el = event.currentTarget;
      const headers = this.customHeaders || {};
      let body;
      const formData = new FormData(el); // TODO: maybe support null

      const formPairs = Array.from(
        event.currentTarget.querySelectorAll(\\"input,select,textarea\\")
      )
        .filter((el) => !!el.name)
        .map((el) => {
          let value;
          const key = el.name;

          if (el instanceof HTMLInputElement) {
            if (el.type === \\"radio\\") {
              if (el.checked) {
                value = el.name;
                return {
                  key,
                  value,
                };
              }
            } else if (el.type === \\"checkbox\\") {
              value = el.checked;
            } else if (el.type === \\"number\\" || el.type === \\"range\\") {
              const num = el.valueAsNumber;

              if (!isNaN(num)) {
                value = num;
              }
            } else if (el.type === \\"file\\") {
              // TODO: one vs multiple files
              value = el.files;
            } else {
              value = el.value;
            }
          } else {
            value = el.value;
          }

          return {
            key,
            value,
          };
        });
      let contentType = this.contentType;

      if (this.sendSubmissionsTo === \\"email\\") {
        contentType = \\"multipart/form-data\\";
      }

      Array.from(formPairs).forEach(({ value }) => {
        if (
          value instanceof File ||
          (Array.isArray(value) && value[0] instanceof File) ||
          value instanceof FileList
        ) {
          contentType = \\"multipart/form-data\\";
        }
      }); // TODO: send as urlEncoded or multipart by default
      // because of ease of use and reliability in browser API
      // for encoding the form?

      if (contentType !== \\"application/json\\") {
        body = formData;
      } else {
        // Json
        const json = {};
        Array.from(formPairs).forEach(({ value, key }) => {
          set(json, key, value);
        });
        body = JSON.stringify(json);
      }

      if (contentType && contentType !== \\"multipart/form-data\\") {
        if (
          /* Zapier doesn't allow content-type header to be sent from browsers */
          !(sendWithJs && this.action?.includes(\\"zapier.com\\"))
        ) {
          headers[\\"content-type\\"] = contentType;
        }
      }

      const presubmitEvent = new CustomEvent(\\"presubmit\\", {
        detail: {
          body,
        },
      });

      if (this.formRef.nativeElement) {
        this.formRef.nativeElement.dispatchEvent(presubmitEvent);

        if (presubmitEvent.defaultPrevented) {
          return;
        }
      }

      this.formState = \\"sending\\";
      const formUrl = \`\${
        builder.env === \\"dev\\" ? \\"http://localhost:5000\\" : \\"https://builder.io\\"
      }/api/v1/form-submit?apiKey=\${builder.apiKey}&to=\${btoa(
        this.sendSubmissionsToEmail || \\"\\"
      )}&name=\${encodeURIComponent(this.name || \\"\\")}\`;
      fetch(
        this.sendSubmissionsTo === \\"email\\" ? formUrl : this.action,
        /* TODO: throw error if no action URL */
        {
          body,
          headers,
          method: this.method || \\"post\\",
        }
      ).then(
        async (res) => {
          let body;
          const contentType = res.headers.get(\\"content-type\\");

          if (contentType && contentType.indexOf(\\"application/json\\") !== -1) {
            body = await res.json();
          } else {
            body = await res.text();
          }

          if (!res.ok && this.errorMessagePath) {
            /* TODO: allow supplying an error formatter function */
            let message = get(body, this.errorMessagePath);

            if (message) {
              if (typeof message !== \\"string\\") {
                /* TODO: ideally convert json to yaml so it woul dbe like
            error: - email has been taken */
                message = JSON.stringify(message);
              }

              this.formErrorMessage = message;
            }
          }

          this.responseData = body;
          this.formState = res.ok ? \\"success\\" : \\"error\\";

          if (res.ok) {
            const submitSuccessEvent = new CustomEvent(\\"submit:success\\", {
              detail: {
                res,
                body,
              },
            });

            if (this.formRef.nativeElement) {
              this.formRef.nativeElement.dispatchEvent(submitSuccessEvent);

              if (submitSuccessEvent.defaultPrevented) {
                return;
              }
              /* TODO: option to turn this on/off? */

              if (this.resetFormOnSubmit !== false) {
                this.formRef.nativeElement.reset();
              }
            }
            /* TODO: client side route event first that can be preventDefaulted */

            if (this.successUrl) {
              if (this.formRef.nativeElement) {
                const event = new CustomEvent(\\"route\\", {
                  detail: {
                    url: this.successUrl,
                  },
                });
                this.formRef.nativeElement.dispatchEvent(event);

                if (!event.defaultPrevented) {
                  location.href = this.successUrl;
                }
              } else {
                location.href = this.successUrl;
              }
            }
          }
        },
        (err) => {
          const submitErrorEvent = new CustomEvent(\\"submit:error\\", {
            detail: {
              error: err,
            },
          });

          if (this.formRef.nativeElement) {
            this.formRef.nativeElement.dispatchEvent(submitErrorEvent);

            if (submitErrorEvent.defaultPrevented) {
              return;
            }
          }

          this.responseData = err;
          this.formState = \\"error\\";
        }
      );
    }
  }
}

@NgModule({
  declarations: [FormComponent],
  imports: [CommonModule, BuilderBlockComponentModule, BuilderBlocksModule],
  exports: [FormComponent],
  bootstrap: [SomeOtherComponent],
})
export class FormComponentModule {}
"
`;

exports[`Angular with Import Mapper Tests > jsx > Javascript Test > Image 1`] = `
"import { NgModule } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

import { Component, ViewChild, ElementRef, Input } from \\"@angular/core\\";

// TODO: AMP Support?
export interface ImageProps {
  _class?: string;
  image: string;
  sizes?: string;
  lazy?: boolean;
  height?: number;
  width?: number;
  altText?: string;
  backgroundSize?: string;
  backgroundPosition?: string; // TODO: Support generating Builder.io and or Shopify \`srcset\`s when needed

  srcset?: string; // TODO: Implement support for custom aspect ratios

  aspectRatio?: number; // TODO: This might not work as expected in terms of positioning

  children?: any;
}

@Component({
  selector: \\"image, Image\\",
  template: \`
    <div>
      <picture #pictureRef>
        <ng-container *ngIf=\\"!useLazyLoading() || load\\">
          <img
            [attr.alt]=\\"altText\\"
            [attr.aria-role]=\\"altText ? 'presentation' : undefined\\"
            [class]=\\"'builder-image' + (_class ? ' ' + _class : '') + ' img'\\"
            [attr.src]=\\"image\\"
            (load)=\\"setLoaded()\\"
            [attr.srcset]=\\"srcset\\"
            [attr.sizes]=\\"sizes\\"
          />
        </ng-container>

        <source [attr.srcset]=\\"srcset\\" />
      </picture>

      <ng-content></ng-content>
    </div>
  \`,
  styles: [
    \`
      .img {
        opacity: 1;
        transition: opacity 0.2s ease-in-out;
        object-fit: cover;
        object-position: center;
      }
    \`,
  ],
})
export class Image {
  @Input() lazy: ImageProps[\\"lazy\\"];
  @Input() altText: ImageProps[\\"altText\\"];
  @Input() _class: ImageProps[\\"_class\\"];
  @Input() image: ImageProps[\\"image\\"];
  @Input() srcset: ImageProps[\\"srcset\\"];
  @Input() sizes: ImageProps[\\"sizes\\"];

  @ViewChild(\\"pictureRef\\") pictureRef: ElementRef;

  scrollListener = null;
  imageLoaded = false;
  setLoaded() {
    this.imageLoaded = true;
  }
  useLazyLoading() {
    // TODO: Add more checks here, like testing for real web browsers
    return !!this.lazy && this.isBrowser();
  }
  isBrowser = function isBrowser() {
    return (
      typeof window !== \\"undefined\\" && window.navigator.product != \\"ReactNative\\"
    );
  };
  load = false;

  ngOnInit() {
    if (this.useLazyLoading()) {
      // throttled scroll capture listener
      const listener = () => {
        if (this.pictureRef.nativeElement) {
          const rect = this.pictureRef.nativeElement.getBoundingClientRect();
          const buffer = window.innerHeight / 2;

          if (rect.top < window.innerHeight + buffer) {
            setLoad(true);
            this.scrollListener = null;
            window.removeEventListener(\\"scroll\\", listener);
          }
        }
      };

      this.scrollListener = listener;
      window.addEventListener(\\"scroll\\", listener, {
        capture: true,
        passive: true,
      });
      listener();
    }
  }

  ngOnDestroy() {
    if (this.scrollListener) {
      window.removeEventListener(\\"scroll\\", this.scrollListener);
    }
  }
}

@NgModule({
  declarations: [Image],
  imports: [CommonModule],
  exports: [Image],
  bootstrap: [SomeOtherComponent],
})
export class ImageModule {}
"
`;

exports[`Angular with Import Mapper Tests > jsx > Javascript Test > Image State 1`] = `
"import { NgModule } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

import { Component } from \\"@angular/core\\";

@Component({
  selector: \\"img-state-component, ImgStateComponent\\",
  template: \`
    <div>
      <ng-container *ngFor=\\"let item of images; let itemIndex = index\\">
        <ng-container>
          <img class=\\"custom-class\\" [attr.src]=\\"item\\" [attr.key]=\\"itemIndex\\" />
        </ng-container>
      </ng-container>
    </div>
  \`,
})
export class ImgStateComponent {
  canShow = true;
  images = [\\"http://example.com/qwik.png\\"];
}

@NgModule({
  declarations: [ImgStateComponent],
  imports: [CommonModule],
  exports: [ImgStateComponent],
  bootstrap: [SomeOtherComponent],
})
export class ImgStateComponentModule {}
"
`;

exports[`Angular with Import Mapper Tests > jsx > Javascript Test > Img 1`] = `
"import { NgModule } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

import { Component, Input } from \\"@angular/core\\";

export interface ImgProps {
  attributes?: any;
  imgSrc?: string;
  altText?: string;
  backgroundSize?: \\"cover\\" | \\"contain\\";
  backgroundPosition?:
    | \\"center\\"
    | \\"top\\"
    | \\"left\\"
    | \\"right\\"
    | \\"bottom\\"
    | \\"top left\\"
    | \\"top right\\"
    | \\"bottom left\\"
    | \\"bottom right\\";
}

import { Builder } from \\"@builder.io/sdk\\";

@Component({
  selector: \\"img-component, ImgComponent\\",
  template: \`
    <img
      [ngStyle]=\\"{
        objectFit: backgroundSize || 'cover',
        objectPosition: backgroundPosition || 'center'
      }\\"
      [attr.key]=\\"Builder.isEditing && imgSrc || 'default-key'\\"
      [attr.alt]=\\"altText\\"
      [attr.src]=\\"imgSrc\\"
    />
  \`,
})
export class ImgComponent {
  @Input() backgroundSize: ImgProps[\\"backgroundSize\\"];
  @Input() backgroundPosition: ImgProps[\\"backgroundPosition\\"];
  @Input() attributes: ImgProps[\\"attributes\\"];
  @Input() imgSrc: ImgProps[\\"imgSrc\\"];
  @Input() altText: ImgProps[\\"altText\\"];
}

@NgModule({
  declarations: [ImgComponent],
  imports: [CommonModule],
  exports: [ImgComponent],
  bootstrap: [SomeOtherComponent],
})
export class ImgComponentModule {}
"
`;

exports[`Angular with Import Mapper Tests > jsx > Javascript Test > Input 1`] = `
"import { NgModule } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

import { Component, Input } from \\"@angular/core\\";

export interface FormInputProps {
  type?: string;
  attributes?: any;
  name?: string;
  value?: string;
  placeholder?: string;
  defaultValue?: string;
  required?: boolean;
}

import { Builder } from \\"@builder.io/sdk\\";

@Component({
  selector: \\"form-input-component, FormInputComponent\\",
  template: \`
    <input
      [attr.key]=\\"Builder.isEditing && defaultValue ? defaultValue : 'default-key'\\"
      [attr.placeholder]=\\"placeholder\\"
      [attr.type]=\\"type\\"
      [attr.name]=\\"name\\"
      [attr.value]=\\"value\\"
      [attr.defaultValue]=\\"defaultValue\\"
      [attr.required]=\\"required\\"
    />
  \`,
})
export class FormInputComponent {
  @Input() attributes: FormInputProps[\\"attributes\\"];
  @Input() defaultValue: FormInputProps[\\"defaultValue\\"];
  @Input() placeholder: FormInputProps[\\"placeholder\\"];
  @Input() type: FormInputProps[\\"type\\"];
  @Input() name: FormInputProps[\\"name\\"];
  @Input() value: FormInputProps[\\"value\\"];
  @Input() required: FormInputProps[\\"required\\"];
}

@NgModule({
  declarations: [FormInputComponent],
  imports: [CommonModule],
  exports: [FormInputComponent],
  bootstrap: [SomeOtherComponent],
})
export class FormInputComponentModule {}
"
`;

exports[`Angular with Import Mapper Tests > jsx > Javascript Test > RawText 1`] = `
"import { NgModule } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

import { Component, Input } from \\"@angular/core\\";

export interface RawTextProps {
  attributes?: any;
  text?: string; // builderBlock?: any;
}

@Component({
  selector: \\"raw-text, RawText\\",
  template: \`
    <span
      [class]=\\"attributes?.class || attributes?.className\\"
      [innerHTML]=\\"text || ''\\"
    ></span>
  \`,
})
export class RawText {
  @Input() attributes: RawTextProps[\\"attributes\\"];
  @Input() text: RawTextProps[\\"text\\"];
}

@NgModule({
  declarations: [RawText],
  imports: [CommonModule],
  exports: [RawText],
  bootstrap: [SomeOtherComponent],
})
export class RawTextModule {}
"
`;

exports[`Angular with Import Mapper Tests > jsx > Javascript Test > Section 1`] = `
"import { NgModule } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

import { Component, Input } from \\"@angular/core\\";

export interface SectionProps {
  maxWidth?: number;
  attributes?: any;
  children?: any;
}

@Component({
  selector: \\"section-component, SectionComponent\\",
  template: \`
    <section
      [ngStyle]=\\"maxWidth && typeof maxWidth === 'number' ? {
        maxWidth: maxWidth
      } : undefined\\"
    >
      <ng-content></ng-content>
    </section>
  \`,
})
export class SectionComponent {
  @Input() attributes: SectionProps[\\"attributes\\"];
  @Input() maxWidth: SectionProps[\\"maxWidth\\"];
}

@NgModule({
  declarations: [SectionComponent],
  imports: [CommonModule],
  exports: [SectionComponent],
  bootstrap: [SomeOtherComponent],
})
export class SectionComponentModule {}
"
`;

exports[`Angular with Import Mapper Tests > jsx > Javascript Test > Section 2`] = `
"import { NgModule } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

import { Component, Input } from \\"@angular/core\\";

export interface SectionProps {
  maxWidth?: number;
  attributes?: any;
  children?: any;
}

@Component({
  selector: \\"section-state-component, SectionStateComponent\\",
  template: \`
    <ng-container *ngIf=\\"max\\">
      <ng-container *ngFor=\\"let item of items\\">
        <section
          [ngStyle]=\\"{
         maxWidth: item + max
       }\\"
        >
          <ng-content></ng-content>
        </section>
      </ng-container>
    </ng-container>
  \`,
})
export class SectionStateComponent {
  @Input() attributes: SectionProps[\\"attributes\\"];

  max = 42;
  items = [42];
}

@NgModule({
  declarations: [SectionStateComponent],
  imports: [CommonModule],
  exports: [SectionStateComponent],
  bootstrap: [SomeOtherComponent],
})
export class SectionStateComponentModule {}
"
`;

exports[`Angular with Import Mapper Tests > jsx > Javascript Test > Select 1`] = `
"import { NgModule } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

import { Component, Input } from \\"@angular/core\\";

export interface FormSelectProps {
  options?: {
    name?: string;
    value: string;
  }[];
  attributes?: any;
  name?: string;
  value?: string;
  defaultValue?: string;
}

import { Builder } from \\"@builder.io/sdk\\";

@Component({
  selector: \\"select-component, SelectComponent\\",
  template: \`
    <select
      [attr.value]=\\"value\\"
      [attr.key]=\\"Builder.isEditing && defaultValue ? defaultValue : 'default-key'\\"
      [attr.defaultValue]=\\"defaultValue\\"
      [attr.name]=\\"name\\"
    >
      <ng-container *ngFor=\\"let option of options; let index = index\\">
        <option [attr.value]=\\"option.value\\" [attr.data-index]=\\"index\\">
          {{option.name || option.value}}
        </option>
      </ng-container>
    </select>
  \`,
})
export class SelectComponent {
  @Input() attributes: FormSelectProps[\\"attributes\\"];
  @Input() value: FormSelectProps[\\"value\\"];
  @Input() defaultValue: FormSelectProps[\\"defaultValue\\"];
  @Input() name: FormSelectProps[\\"name\\"];
  @Input() options: FormSelectProps[\\"options\\"];
}

@NgModule({
  declarations: [SelectComponent],
  imports: [CommonModule],
  exports: [SelectComponent],
  bootstrap: [SomeOtherComponent],
})
export class SelectComponentModule {}
"
`;

exports[`Angular with Import Mapper Tests > jsx > Javascript Test > SlotDefault 1`] = `
"import { NgModule } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

import { Component } from \\"@angular/core\\";

type Props = {
  [key: string]: string;
};

@Component({
  selector: \\"slot-code, SlotCode\\",
  template: \`
    <div>
      <ng-content>
        <div class=\\"default-slot\\">Default content</div>
      </ng-content>
    </div>
  \`,
})
export class SlotCode {}

@NgModule({
  declarations: [SlotCode],
  imports: [CommonModule],
  exports: [SlotCode],
  bootstrap: [SomeOtherComponent],
})
export class SlotCodeModule {}
"
`;

exports[`Angular with Import Mapper Tests > jsx > Javascript Test > SlotHtml 1`] = `
"import { NgModule } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

import { Component } from \\"@angular/core\\";

type Props = {
  [key: string]: string;
};

import ContentSlotCodeModule from \\"./content-slot-jsx.raw/angular\\";

@Component({
  selector: \\"slot-code, SlotCode\\",
  template: \`
    <div>
      <content-slot-code>
        <ng-content><div>Hello</div></ng-content>
      </content-slot-code>
    </div>
  \`,
})
export class SlotCode {}

@NgModule({
  declarations: [SlotCode],
  imports: [CommonModule, ContentSlotCodeModule],
  exports: [SlotCode],
  bootstrap: [SomeOtherComponent],
})
export class SlotCodeModule {}
"
`;

exports[`Angular with Import Mapper Tests > jsx > Javascript Test > SlotJsx 1`] = `
"import { NgModule } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

import { Component } from \\"@angular/core\\";

type Props = {
  [key: string]: string;
};

import ContentSlotCodeModule from \\"./content-slot-jsx.raw/angular\\";

@Component({
  selector: \\"slot-code, SlotCode\\",
  template: \`
    <div>
      <content-slot-code><div testing>Hello</div></content-slot-code>
    </div>
  \`,
})
export class SlotCode {}

@NgModule({
  declarations: [SlotCode],
  imports: [CommonModule, ContentSlotCodeModule],
  exports: [SlotCode],
  bootstrap: [SomeOtherComponent],
})
export class SlotCodeModule {}
"
`;

exports[`Angular with Import Mapper Tests > jsx > Javascript Test > SlotNamed 1`] = `
"import { NgModule } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

import { Component } from \\"@angular/core\\";

type Props = {
  [key: string]: string;
};

@Component({
  selector: \\"slot-code, SlotCode\\",
  template: \`
    <div>
      <ng-content select=\\"[top]\\"></ng-content>

      <ng-content select=\\"[left]\\">Default left</ng-content>

      <ng-content>Default Child</ng-content>
    </div>
  \`,
})
export class SlotCode {}

@NgModule({
  declarations: [SlotCode],
  imports: [CommonModule],
  exports: [SlotCode],
  bootstrap: [SomeOtherComponent],
})
export class SlotCodeModule {}
"
`;

exports[`Angular with Import Mapper Tests > jsx > Javascript Test > Stamped.io 1`] = `
"import { NgModule } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

import { Component, Input } from \\"@angular/core\\";

type SmileReviewsProps = {
  productId: string;
  apiKey: string;
};

import { kebabCase } from \\"lodash\\";
import { snakeCase } from \\"lodash\\";

@Component({
  selector: \\"smile-reviews, SmileReviews\\",
  template: \`
    <div [attr.data-user]=\\"name\\">
      <button (click)=\\"showReviewPrompt = true\\">Write a review</button>

      <ng-container *ngIf=\\"showReviewPrompt || 'asdf'\\">
        <input placeholder=\\"Email\\" />

        <input placeholder=\\"Title\\" class=\\"input\\" />

        <textarea
          placeholder=\\"How was your experience?\\"
          class=\\"textarea\\"
        ></textarea>

        <button
          class=\\"button\\"
          (click)=\\"
         $event.preventDefault();
         showReviewPrompt = false;
       \\"
        >
          Submit
        </button>
      </ng-container>

      <ng-container *ngFor=\\"let review of reviews; let index = index\\">
        <div class=\\"review\\" [attr.key]=\\"review.id\\">
          <img class=\\"img\\" [attr.src]=\\"review.avatar\\" />

          <div [class]=\\"showReviewPrompt ? 'bg-primary' : 'bg-secondary'\\">
            <div>N: {{index}}</div>

            <div>{{review.author}}</div>

            <div>{{review.reviewMessage}}</div>
          </div>
        </div>
      </ng-container>
    </div>
  \`,
  styles: [
    \`
      .input {
        display: block;
      }
      .textarea {
        display: block;
      }
      .button {
        display: block;
      }
      .review {
        margin: 10px;
        padding: 10px;
        background: white;
        display: flex;
        border-radius: 5px;
        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
      }
      .img {
        height: 30px;
        width: 30px;
        margin-right: 10px;
      }
    \`,
  ],
})
export class SmileReviews {
  @Input() apiKey: SmileReviewsProps[\\"apiKey\\"];
  @Input() productId: SmileReviewsProps[\\"productId\\"];

  reviews = [];
  name = \\"test\\";
  showReviewPrompt = false;
  kebabCaseValue() {
    return kebabCase(\\"testThat\\");
  }
  snakeCaseValue() {
    return snakeCase(\\"testThis\\");
  }

  ngOnInit() {
    fetch(
      \`https://stamped.io/api/widget/reviews?storeUrl=builder-io.myshopify.com&apiKey=\${
        this.apiKey || \\"pubkey-8bbDq7W6w4sB3OWeM1HUy2s47702hM\\"
      }&productId=\${this.productId || \\"2410511106127\\"}\`
    )
      .then((res) => res.json())
      .then((data) => {
        this.reviews = data.data;
      });
  }
}

@NgModule({
  declarations: [SmileReviews],
  imports: [CommonModule],
  exports: [SmileReviews],
  bootstrap: [SomeOtherComponent],
})
export class SmileReviewsModule {}
"
`;

exports[`Angular with Import Mapper Tests > jsx > Javascript Test > Submit 1`] = `
"import { NgModule } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

import { Component, Input } from \\"@angular/core\\";

export interface ButtonProps {
  attributes?: any;
  text?: string;
}

@Component({
  selector: \\"submit-button, SubmitButton\\",
  template: \`
    <button type=\\"submit\\">{{text}}</button>
  \`,
})
export class SubmitButton {
  @Input() attributes: ButtonProps[\\"attributes\\"];
  @Input() text: ButtonProps[\\"text\\"];
}

@NgModule({
  declarations: [SubmitButton],
  imports: [CommonModule],
  exports: [SubmitButton],
  bootstrap: [SomeOtherComponent],
})
export class SubmitButtonModule {}
"
`;

exports[`Angular with Import Mapper Tests > jsx > Javascript Test > Text 1`] = `
"import { NgModule } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

import { Component, Input } from \\"@angular/core\\";

export interface TextProps {
  attributes?: any;
  rtlMode: boolean;
  text?: string;
  content?: string;
  builderBlock?: any;
}

import { Builder } from \\"@builder.io/sdk\\";

@Component({
  selector: \\"text, Text\\",
  template: \`
    <div
      [attr.contentEditable]=\\"allowEditingText || undefined\\"
      [attr.data-name]=\\"{
        test: name || 'any name'
      }\\"
      [innerHTML]=\\"text || content || name || '<p class=&quot;text-lg&quot;>my name</p>'\\"
    ></div>
  \`,
})
export class Text {
  @Input() text: TextProps[\\"text\\"];
  @Input() content: TextProps[\\"content\\"];

  name = \\"Decadef20\\";
}

@NgModule({
  declarations: [Text],
  imports: [CommonModule],
  exports: [Text],
  bootstrap: [SomeOtherComponent],
})
export class TextModule {}
"
`;

exports[`Angular with Import Mapper Tests > jsx > Javascript Test > Textarea 1`] = `
"import { NgModule } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

import { Component, Input } from \\"@angular/core\\";

export interface TextareaProps {
  attributes?: any;
  name?: string;
  value?: string;
  defaultValue?: string;
  placeholder?: string;
}

@Component({
  selector: \\"textarea, Textarea\\",
  template: \`
    <textarea
      [attr.placeholder]=\\"placeholder\\"
      [attr.name]=\\"name\\"
      [attr.value]=\\"value\\"
      [attr.defaultValue]=\\"defaultValue\\"
    ></textarea>
  \`,
})
export class Textarea {
  @Input() attributes: TextareaProps[\\"attributes\\"];
  @Input() placeholder: TextareaProps[\\"placeholder\\"];
  @Input() name: TextareaProps[\\"name\\"];
  @Input() value: TextareaProps[\\"value\\"];
  @Input() defaultValue: TextareaProps[\\"defaultValue\\"];
}

@NgModule({
  declarations: [Textarea],
  imports: [CommonModule],
  exports: [Textarea],
  bootstrap: [SomeOtherComponent],
})
export class TextareaModule {}
"
`;

exports[`Angular with Import Mapper Tests > jsx > Javascript Test > Video 1`] = `
"import { NgModule } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

import { Component, Input } from \\"@angular/core\\";

export interface VideoProps {
  attributes?: any;
  video?: string;
  autoPlay?: boolean;
  controls?: boolean;
  muted?: boolean;
  loop?: boolean;
  playsInline?: boolean;
  aspectRatio?: number;
  width?: number;
  height?: number;
  fit?: \\"contain\\" | \\"cover\\" | \\"fill\\";
  position?:
    | \\"center\\"
    | \\"top\\"
    | \\"left\\"
    | \\"right\\"
    | \\"bottom\\"
    | \\"top left\\"
    | \\"top right\\"
    | \\"bottom left\\"
    | \\"bottom right\\";
  posterImage?: string;
  lazyLoad?: boolean;
}

@Component({
  selector: \\"video, Video\\",
  template: \`
    <video
      preload=\\"none\\"
      [ngStyle]=\\"{
        width: '100%',
        height: '100%',
        ...attributes?.style,
        objectFit: fit,
        objectPosition: position,
        // Hack to get object fit to work as expected and
        // not have the video overflow
        borderRadius: 1
      }\\"
      [attr.key]=\\"video || 'no-src'\\"
      [attr.poster]=\\"posterImage\\"
      [attr.autoplay]=\\"autoPlay\\"
      [attr.muted]=\\"muted\\"
      [attr.controls]=\\"controls\\"
      [attr.loop]=\\"loop\\"
    ></video>
  \`,
})
export class Video {
  @Input() attributes: VideoProps[\\"attributes\\"];
  @Input() fit: VideoProps[\\"fit\\"];
  @Input() position: VideoProps[\\"position\\"];
  @Input() video: VideoProps[\\"video\\"];
  @Input() posterImage: VideoProps[\\"posterImage\\"];
  @Input() autoPlay: VideoProps[\\"autoPlay\\"];
  @Input() muted: VideoProps[\\"muted\\"];
  @Input() controls: VideoProps[\\"controls\\"];
  @Input() loop: VideoProps[\\"loop\\"];
}

@NgModule({
  declarations: [Video],
  imports: [CommonModule],
  exports: [Video],
  bootstrap: [SomeOtherComponent],
})
export class VideoModule {}
"
`;

exports[`Angular with Import Mapper Tests > jsx > Javascript Test > arrowFunctionInUseStore 1`] = `
"import { NgModule } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

import { Component } from \\"@angular/core\\";

@Component({
  selector: \\"my-component, MyComponent\\",
  template: \`
    <div>Hello {{name}}</div>
  \`,
})
export class MyComponent {
  name = \\"steve\\";
  setName(value) {
    this.name = value;
  }
  updateNameWithArrowFn(value) {
    this.name = value;
  }
}

@NgModule({
  declarations: [MyComponent],
  imports: [CommonModule],
  exports: [MyComponent],
  bootstrap: [SomeOtherComponent],
})
export class MyComponentModule {}
"
`;

exports[`Angular with Import Mapper Tests > jsx > Javascript Test > basicForwardRef 1`] = `
"import { NgModule } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

import { Component } from \\"@angular/core\\";

export interface Props {
  showInput: boolean;
  inputRef: HTMLInputElement;
}

@Component({
  selector: \\"my-basic-forward-ref-component, MyBasicForwardRefComponent\\",
  template: \`
    <div>
      <input
        class=\\"input\\"
        [attr.value]=\\"name\\"
        (input)=\\"name = $event.target.value\\"
      />
    </div>
  \`,
  styles: [
    \`
      .input {
        color: red;
      }
    \`,
  ],
})
export class MyBasicForwardRefComponent {
  name = \\"PatrickJS\\";
}

@NgModule({
  declarations: [MyBasicForwardRefComponent],
  imports: [CommonModule],
  exports: [MyBasicForwardRefComponent],
  bootstrap: [SomeOtherComponent],
})
export class MyBasicForwardRefComponentModule {}
"
`;

exports[`Angular with Import Mapper Tests > jsx > Javascript Test > basicForwardRefMetadata 1`] = `
"import { NgModule } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

import { Component } from \\"@angular/core\\";

export interface Props {
  showInput: boolean;
  inputRef: HTMLInputElement;
}

@Component({
  selector: \\"my-basic-forward-ref-component, MyBasicForwardRefComponent\\",
  template: \`
    <div>
      <input
        class=\\"input\\"
        [attr.value]=\\"name\\"
        (input)=\\"name = $event.target.value\\"
      />
    </div>
  \`,
  styles: [
    \`
      .input {
        color: red;
      }
    \`,
  ],
})
export class MyBasicForwardRefComponent {
  name = \\"PatrickJS\\";
}

@NgModule({
  declarations: [MyBasicForwardRefComponent],
  imports: [CommonModule],
  exports: [MyBasicForwardRefComponent],
  bootstrap: [SomeOtherComponent],
})
export class MyBasicForwardRefComponentModule {}
"
`;

exports[`Angular with Import Mapper Tests > jsx > Javascript Test > basicOnUpdateReturn 1`] = `
"import { NgModule } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

import { Component } from \\"@angular/core\\";

@Component({
  selector:
    \\"my-basic-on-update-return-component, MyBasicOnUpdateReturnComponent\\",
  template: \`
    <div>Hello! {{name}}</div>
  \`,
})
export class MyBasicOnUpdateReturnComponent {
  name = \\"PatrickJS\\";

  ngAfterContentChecked() {
    const controller = new AbortController();
    const signal = controller.signal;
    fetch(\\"https://patrickjs.com/api/resource.json\\", {
      signal,
    })
      .then((response) => response.json())
      .then((data) => {
        this.name = data.name;
      });
    return () => {
      if (!signal.aborted) {
        controller.abort();
      }
    };
  }
}

@NgModule({
  declarations: [MyBasicOnUpdateReturnComponent],
  imports: [CommonModule],
  exports: [MyBasicOnUpdateReturnComponent],
  bootstrap: [SomeOtherComponent],
})
export class MyBasicOnUpdateReturnComponentModule {}
"
`;

exports[`Angular with Import Mapper Tests > jsx > Javascript Test > class + ClassName + css 1`] = `
"import { NgModule } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

import { Component } from \\"@angular/core\\";

@Component({
  selector: \\"my-basic-component, MyBasicComponent\\",
  template: \`
    <div class=\\"test2 test div\\">
      Hello! I can run in React, Vue, Solid, or Liquid!
    </div>
  \`,
  styles: [
    \`
      .div {
        padding: 10px;
      }
    \`,
  ],
})
export class MyBasicComponent {}

@NgModule({
  declarations: [MyBasicComponent],
  imports: [CommonModule],
  exports: [MyBasicComponent],
  bootstrap: [SomeOtherComponent],
})
export class MyBasicComponentModule {}
"
`;

exports[`Angular with Import Mapper Tests > jsx > Javascript Test > class + css 1`] = `
"import { NgModule } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

import { Component } from \\"@angular/core\\";

@Component({
  selector: \\"my-basic-component, MyBasicComponent\\",
  template: \`
    <div class=\\"test div\\">
      Hello! I can run in React, Vue, Solid, or Liquid!
    </div>
  \`,
  styles: [
    \`
      .div {
        padding: 10px;
      }
    \`,
  ],
})
export class MyBasicComponent {}

@NgModule({
  declarations: [MyBasicComponent],
  imports: [CommonModule],
  exports: [MyBasicComponent],
  bootstrap: [SomeOtherComponent],
})
export class MyBasicComponentModule {}
"
`;

exports[`Angular with Import Mapper Tests > jsx > Javascript Test > className + css 1`] = `
"import { NgModule } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

import { Component } from \\"@angular/core\\";

@Component({
  selector: \\"my-basic-component, MyBasicComponent\\",
  template: \`
    <div class=\\"test div\\">
      Hello! I can run in React, Vue, Solid, or Liquid!
    </div>
  \`,
  styles: [
    \`
      .div {
        padding: 10px;
      }
    \`,
  ],
})
export class MyBasicComponent {}

@NgModule({
  declarations: [MyBasicComponent],
  imports: [CommonModule],
  exports: [MyBasicComponent],
  bootstrap: [SomeOtherComponent],
})
export class MyBasicComponentModule {}
"
`;

exports[`Angular with Import Mapper Tests > jsx > Javascript Test > className 1`] = `
"import { NgModule } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

import { Component } from \\"@angular/core\\";

type Props = {
  [key: string]: string | JSX.Element;
  slotTesting: JSX.Element;
};

@Component({
  selector: \\"class-name-code, ClassNameCode\\",
  template: \`
    <div>
      <div class=\\"no binding\\">Without Binding</div>

      <div [class]=\\"bindings\\">With binding</div>
    </div>
  \`,
})
export class ClassNameCode {
  bindings = \\"a binding\\";
}

@NgModule({
  declarations: [ClassNameCode],
  imports: [CommonModule],
  exports: [ClassNameCode],
  bootstrap: [SomeOtherComponent],
})
export class ClassNameCodeModule {}
"
`;

exports[`Angular with Import Mapper Tests > jsx > Javascript Test > classState 1`] = `
"import { NgModule } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

import { Component } from \\"@angular/core\\";

@Component({
  selector: \\"my-basic-component, MyBasicComponent\\",
  template: \`
    <div [class]=\\"classState + ' div'\\" [ngStyle]=\\"styleState\\">
      Hello! I can run in React, Vue, Solid, or Liquid!
    </div>
  \`,
  styles: [
    \`
      .div {
        padding: 10px;
      }
    \`,
  ],
})
export class MyBasicComponent {
  classState = \\"testClassName\\";
  styleState = {
    color: \\"red\\",
  };
}

@NgModule({
  declarations: [MyBasicComponent],
  imports: [CommonModule],
  exports: [MyBasicComponent],
  bootstrap: [SomeOtherComponent],
})
export class MyBasicComponentModule {}
"
`;

exports[`Angular with Import Mapper Tests > jsx > Javascript Test > componentWithContext 1`] = `
"import { NgModule } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

import { Component, Input } from \\"@angular/core\\";

export interface ComponentWithContextProps {
  content: string;
}

import Context1 from \\"@dummy/1\\";
import Context2 from \\"@dummy/2\\";

@Component({
  selector: \\"component-with-context, ComponentWithContext\\",
  template: \`
    <ng-container>
      <ng-container>{{foo.value}}</ng-container>
    </ng-container>
  \`,
})
export class ComponentWithContext {
  @Input() content: ComponentWithContextProps[\\"content\\"];

  constructor(public foo: Context1) {}
}

@NgModule({
  declarations: [ComponentWithContext],
  imports: [CommonModule],
  exports: [ComponentWithContext],
  bootstrap: [SomeOtherComponent],
})
export class ComponentWithContextModule {}
"
`;

exports[`Angular with Import Mapper Tests > jsx > Javascript Test > contentState 1`] = `
"import { NgModule } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

import { Component, Input } from \\"@angular/core\\";

import BuilderContext from \\"@dummy/context.lite\\";

@Component({
  selector: \\"render-content, RenderContent\\",
  template: \`
    <div>setting context</div>
  \`,
})
export class RenderContent {
  @Input() content: any;
  @Input() customComponents: any;
}

@NgModule({
  declarations: [RenderContent],
  imports: [CommonModule],
  exports: [RenderContent],
  bootstrap: [SomeOtherComponent],
})
export class RenderContentModule {}
"
`;

exports[`Angular with Import Mapper Tests > jsx > Javascript Test > defaultProps 1`] = `
"import { NgModule } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

import { Output, EventEmitter, Component, Input } from \\"@angular/core\\";

export interface ButtonProps {
  attributes?: any;
  text?: string;
  link?: string;
  openLinkInNewTab?: boolean;
  onClick?: () => void;
}
const defaultProps = {
  text: \\"default text\\",
  link: \\"https://builder.io/\\",
  openLinkInNewTab: false,
  onClick: () => {
    console.log(\\"hi\\");
  },
};

@Component({
  selector: \\"button, Button\\",
  template: \`
    <div>
      <ng-container *ngIf=\\"link\\">
        <a
          [attr.href]=\\"link\\"
          [attr.target]=\\"openLinkInNewTab ? '_blank' : undefined\\"
        >
          {{text}}
        </a>
      </ng-container>

      <ng-container *ngIf=\\"!link\\">
        <button type=\\"button\\" (click)=\\"this.onClick.emit($event)\\">
          {{text}}
        </button>
      </ng-container>
    </div>
  \`,
})
export class Button {
  @Input() link: ButtonProps[\\"link\\"] = defaultProps[\\"link\\"];
  @Input() attributes: ButtonProps[\\"attributes\\"];
  @Input() openLinkInNewTab: ButtonProps[\\"openLinkInNewTab\\"] =
    defaultProps[\\"openLinkInNewTab\\"];
  @Input() text: ButtonProps[\\"text\\"] = defaultProps[\\"text\\"];

  @Output() onClick = new EventEmitter();
}

@NgModule({
  declarations: [Button],
  imports: [CommonModule],
  exports: [Button],
  bootstrap: [SomeOtherComponent],
})
export class ButtonModule {}
"
`;

exports[`Angular with Import Mapper Tests > jsx > Javascript Test > defaultPropsOutsideComponent 1`] = `
"import { NgModule } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

import { Output, EventEmitter, Component, Input } from \\"@angular/core\\";

export interface ButtonProps {
  attributes?: any;
  text?: string;
  link?: string;
  openLinkInNewTab?: boolean;
  onClick: () => void;
}
const defaultProps = {
  text: \\"default text\\",
  link: \\"https://builder.io/\\",
  openLinkInNewTab: false,
  onClick: () => {},
};

@Component({
  selector: \\"button, Button\\",
  template: \`
    <div>
      <ng-container *ngIf=\\"link\\">
        <a
          [attr.href]=\\"link\\"
          [attr.target]=\\"openLinkInNewTab ? '_blank' : undefined\\"
        >
          {{text}}
        </a>
      </ng-container>

      <ng-container *ngIf=\\"!link\\">
        <button type=\\"button\\" (click)=\\"this.onClick.emit($event)\\">
          {{text}}
        </button>
      </ng-container>
    </div>
  \`,
})
export class Button {
  @Input() link: ButtonProps[\\"link\\"] = defaultProps[\\"link\\"];
  @Input() attributes: ButtonProps[\\"attributes\\"];
  @Input() openLinkInNewTab: ButtonProps[\\"openLinkInNewTab\\"] =
    defaultProps[\\"openLinkInNewTab\\"];
  @Input() text: ButtonProps[\\"text\\"] = defaultProps[\\"text\\"];

  @Output() onClick = new EventEmitter();
}

@NgModule({
  declarations: [Button],
  imports: [CommonModule],
  exports: [Button],
  bootstrap: [SomeOtherComponent],
})
export class ButtonModule {}
"
`;

exports[`Angular with Import Mapper Tests > jsx > Javascript Test > defaultValsWithTypes 1`] = `
"import { NgModule } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

import { Component, Input } from \\"@angular/core\\";

type Props = {
  name: string;
};

const DEFAULT_VALUES: Props = {
  name: \\"Sami\\",
};

@Component({
  selector: \\"component-with-types, ComponentWithTypes\\",
  template: \`
    <div>Hello {{name || DEFAULT_VALUES.name}}</div>
  \`,
})
export class ComponentWithTypes {
  DEFAULT_VALUES = DEFAULT_VALUES;

  @Input() name: Props[\\"name\\"];
}

@NgModule({
  declarations: [ComponentWithTypes],
  imports: [CommonModule],
  exports: [ComponentWithTypes],
  bootstrap: [SomeOtherComponent],
})
export class ComponentWithTypesModule {}
"
`;

exports[`Angular with Import Mapper Tests > jsx > Javascript Test > expressionState 1`] = `
"import { NgModule } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

import { Component, Input } from \\"@angular/core\\";

@Component({
  selector: \\"my-component, MyComponent\\",
  template: \`
    <div>{{refToUse}}</div>
  \`,
})
export class MyComponent {
  @Input() componentRef: any;

  refToUse = !(this.componentRef instanceof Function)
    ? this.componentRef
    : null;
}

@NgModule({
  declarations: [MyComponent],
  imports: [CommonModule],
  exports: [MyComponent],
  bootstrap: [SomeOtherComponent],
})
export class MyComponentModule {}
"
`;

exports[`Angular with Import Mapper Tests > jsx > Javascript Test > import types 1`] = `
"import { NgModule } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

import { Component, Input } from \\"@angular/core\\";

type RenderContentProps = {
  options?: GetContentOptions;
  content: BuilderContent;
  renderContentProps: RenderBlockProps;
};

import RenderBlockModule from \\"./builder-render-block.raw/angular\\";

@Component({
  selector: \\"render-content, RenderContent\\",
  template: \`
    <render-block></render-block>
  \`,
})
export class RenderContent {
  @Input() renderContentProps: RenderContentProps[\\"renderContentProps\\"];

  getRenderContentProps(block, index) {
    return {
      block: block,
      index: index,
    };
  }
}

@NgModule({
  declarations: [RenderContent],
  imports: [CommonModule, RenderBlockModule],
  exports: [RenderContent],
  bootstrap: [SomeOtherComponent],
})
export class RenderContentModule {}
"
`;

exports[`Angular with Import Mapper Tests > jsx > Javascript Test > importRaw 1`] = `
"import { NgModule } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

import { Component } from \\"@angular/core\\";

@Component({
  selector: \\"my-import-component, MyImportComponent\\",
  template: \`
    <div>Testing which imports get excluded!</div>
  \`,
})
export class MyImportComponent {}

@NgModule({
  declarations: [MyImportComponent],
  imports: [CommonModule],
  exports: [MyImportComponent],
  bootstrap: [SomeOtherComponent],
})
export class MyImportComponentModule {}
"
`;

exports[`Angular with Import Mapper Tests > jsx > Javascript Test > multipleOnUpdate 1`] = `
"import { NgModule } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

import { Component } from \\"@angular/core\\";

@Component({
  selector: \\"multiple-on-update, MultipleOnUpdate\\",
  template: \`
    <div></div>
  \`,
})
export class MultipleOnUpdate {
  ngAfterContentChecked() {
    console.log(\\"Runs on every update/rerender\\");
    console.log(\\"Runs on every update/rerender as well\\");
  }
}

@NgModule({
  declarations: [MultipleOnUpdate],
  imports: [CommonModule],
  exports: [MultipleOnUpdate],
  bootstrap: [SomeOtherComponent],
})
export class MultipleOnUpdateModule {}
"
`;

exports[`Angular with Import Mapper Tests > jsx > Javascript Test > multipleOnUpdateWithDeps 1`] = `
"import { NgModule } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

import { Component } from \\"@angular/core\\";

@Component({
  selector: \\"multiple-on-update-with-deps, MultipleOnUpdateWithDeps\\",
  template: \`
    <div></div>
  \`,
})
export class MultipleOnUpdateWithDeps {
  a = \\"a\\";
  b = \\"b\\";
  c = \\"c\\";
  d = \\"d\\";

  ngAfterContentChecked() {
    console.log(\\"Runs when this.a or this.b changes\\", this.a, this.b);

    if (this.a === \\"a\\") {
      this.a = \\"b\\";
    }
    console.log(\\"Runs when this.c or this.d changes\\", this.c, this.d);

    if (this.a === \\"a\\") {
      this.a = \\"b\\";
    }
  }
}

@NgModule({
  declarations: [MultipleOnUpdateWithDeps],
  imports: [CommonModule],
  exports: [MultipleOnUpdateWithDeps],
  bootstrap: [SomeOtherComponent],
})
export class MultipleOnUpdateWithDepsModule {}
"
`;

exports[`Angular with Import Mapper Tests > jsx > Javascript Test > multipleSpreads 1`] = `
"import { NgModule } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

import { Component } from \\"@angular/core\\";

@Component({
  selector: \\"my-basic-component, MyBasicComponent\\",
  template: \`
    <input />
  \`,
})
export class MyBasicComponent {
  attrs = {
    hello: \\"world\\",
  };
}

@NgModule({
  declarations: [MyBasicComponent],
  imports: [CommonModule],
  exports: [MyBasicComponent],
  bootstrap: [SomeOtherComponent],
})
export class MyBasicComponentModule {}
"
`;

exports[`Angular with Import Mapper Tests > jsx > Javascript Test > nestedShow 1`] = `
"import { NgModule } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

import { Component, Input } from \\"@angular/core\\";

interface Props {
  conditionA: boolean;
  conditionB: boolean;
}

@Component({
  selector: \\"nested-show, NestedShow\\",
  template: \`
    <ng-container *ngIf=\\"conditionA\\">
      <ng-container *ngIf=\\"!conditionB\\">
        <div>if condition A and condition B</div>
      </ng-container>
    </ng-container>
  \`,
})
export class NestedShow {
  @Input() conditionA: Props[\\"conditionA\\"];
  @Input() conditionB: Props[\\"conditionB\\"];
}

@NgModule({
  declarations: [NestedShow],
  imports: [CommonModule],
  exports: [NestedShow],
  bootstrap: [SomeOtherComponent],
})
export class NestedShowModule {}
"
`;

exports[`Angular with Import Mapper Tests > jsx > Javascript Test > nestedStyles 1`] = `
"import { NgModule } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

import { Component } from \\"@angular/core\\";

@Component({
  selector: \\"nested-styles, NestedStyles\\",
  template: \`
    <div class=\\"div\\">Hello world</div>
  \`,
  styles: [
    \`
      .div {
        display: flex;
        foo: var(--bar);
      }
      @media (max-width: env(--mobile)) {
        .div {
          display: block;
        }
      }
      .div:hover {
        display: flex;
      }
      .div .nested-selector {
        display: grid;
      }
    \`,
  ],
})
export class NestedStyles {}

@NgModule({
  declarations: [NestedStyles],
  imports: [CommonModule],
  exports: [NestedStyles],
  bootstrap: [SomeOtherComponent],
})
export class NestedStylesModule {}
"
`;

exports[`Angular with Import Mapper Tests > jsx > Javascript Test > onInit & onMount 1`] = `
"import { NgModule } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

import { Component } from \\"@angular/core\\";

@Component({
  selector: \\"on-init, OnInit\\",
  template: \`
    <div></div>
  \`,
})
export class OnInit {
  constructor() {
    console.log(\\"onInit\\");
  }

  ngOnInit() {
    console.log(\\"onMount\\");
  }
}

@NgModule({
  declarations: [OnInit],
  imports: [CommonModule],
  exports: [OnInit],
  bootstrap: [SomeOtherComponent],
})
export class OnInitModule {}
"
`;

exports[`Angular with Import Mapper Tests > jsx > Javascript Test > onInit 1`] = `
"import { NgModule } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

import { Component, Input } from \\"@angular/core\\";

type Props = {
  name: string;
};

export const defaultValues = {
  name: \\"PatrickJS\\",
};

@Component({
  selector: \\"on-init, OnInit\\",
  template: \`
    <div>Default name defined by parent {{name}}</div>
  \`,
})
export class OnInit {
  @Input() name: Props[\\"name\\"];

  name = \\"\\";

  constructor() {
    this.name = defaultValues.name || this.name;
    console.log(\\"set defaults with props\\");
  }
}

@NgModule({
  declarations: [OnInit],
  imports: [CommonModule],
  exports: [OnInit],
  bootstrap: [SomeOtherComponent],
})
export class OnInitModule {}
"
`;

exports[`Angular with Import Mapper Tests > jsx > Javascript Test > onMount 1`] = `
"import { NgModule } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

import { Component } from \\"@angular/core\\";

@Component({
  selector: \\"comp, Comp\\",
  template: \`
    <div></div>
  \`,
})
export class Comp {
  ngOnInit() {
    console.log(\\"Runs on mount\\");
  }

  ngOnDestroy() {
    console.log(\\"Runs on unMount\\");
  }
}

@NgModule({
  declarations: [Comp],
  imports: [CommonModule],
  exports: [Comp],
  bootstrap: [SomeOtherComponent],
})
export class CompModule {}
"
`;

exports[`Angular with Import Mapper Tests > jsx > Javascript Test > onUpdate 1`] = `
"import { NgModule } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

import { Component } from \\"@angular/core\\";

@Component({
  selector: \\"on-update, OnUpdate\\",
  template: \`
    <div></div>
  \`,
})
export class OnUpdate {
  ngAfterContentChecked() {
    console.log(\\"Runs on every update/rerender\\");
  }
}

@NgModule({
  declarations: [OnUpdate],
  imports: [CommonModule],
  exports: [OnUpdate],
  bootstrap: [SomeOtherComponent],
})
export class OnUpdateModule {}
"
`;

exports[`Angular with Import Mapper Tests > jsx > Javascript Test > onUpdateWithDeps 1`] = `
"import { NgModule } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

import { Component, Input } from \\"@angular/core\\";

type Props = {
  size: string;
};

@Component({
  selector: \\"on-update-with-deps, OnUpdateWithDeps\\",
  template: \`
    <div></div>
  \`,
})
export class OnUpdateWithDeps {
  @Input() size: Props[\\"size\\"];

  a = \\"a\\";
  b = \\"b\\";

  ngAfterContentChecked() {
    console.log(
      \\"Runs when this.a, this.b or size changes\\",
      this.a,
      this.b,
      this.size
    );
  }
}

@NgModule({
  declarations: [OnUpdateWithDeps],
  imports: [CommonModule],
  exports: [OnUpdateWithDeps],
  bootstrap: [SomeOtherComponent],
})
export class OnUpdateWithDepsModule {}
"
`;

exports[`Angular with Import Mapper Tests > jsx > Javascript Test > outputEventBinding 1`] = `
"import { NgModule } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

import { Component } from \\"@angular/core\\";

@Component({
  selector: \\"my-component, MyComponent\\",
  template: \`
    <div>
      <input
        [attr.value]=\\"name\\"
        (input)=\\"name = $event.target.value\\"
        (changeOrSomething)=\\"name = $event.target.value\\"
      />

      Hello! I can run in React, Vue, Solid, or Liquid!
    </div>
  \`,
})
export class MyComponent {
  name = \\"Steve\\";
}

@NgModule({
  declarations: [MyComponent],
  imports: [CommonModule],
  exports: [MyComponent],
  bootstrap: [SomeOtherComponent],
})
export class MyComponentModule {}
"
`;

exports[`Angular with Import Mapper Tests > jsx > Javascript Test > preserveExportOrLocalStatement 1`] = `
"import { NgModule } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

import { Component } from \\"@angular/core\\";

type Types = {
  s: any[];
};
interface IPost {
  len: number;
}
export interface MyBasicComponentProps {
  id: string;
}

const b = 3;
const foo = () => {};
export const a = 3;
export const bar = () => {};
export function run<T>(value: T) {}

@Component({
  selector: \\"my-basic-component, MyBasicComponent\\",
  template: \`
    <div></div>
  \`,
})
export class MyBasicComponent {}

@NgModule({
  declarations: [MyBasicComponent],
  imports: [CommonModule],
  exports: [MyBasicComponent],
  bootstrap: [SomeOtherComponent],
})
export class MyBasicComponentModule {}
"
`;

exports[`Angular with Import Mapper Tests > jsx > Javascript Test > preserveTyping 1`] = `
"import { NgModule } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

import { Component, Input } from \\"@angular/core\\";

export type A = \\"test\\";
export interface C {
  n: \\"test\\";
}
type B = \\"test2\\";
interface D {
  n: \\"test\\";
}
export interface MyBasicComponentProps {
  name: string;
  age?: number;
}

@Component({
  selector: \\"my-basic-component, MyBasicComponent\\",
  template: \`
    <div>Hello! I can run in React, Vue, Solid, or Liquid! {{name}}</div>
  \`,
})
export class MyBasicComponent {
  @Input() name: MyBasicComponentProps[\\"name\\"];
}

@NgModule({
  declarations: [MyBasicComponent],
  imports: [CommonModule],
  exports: [MyBasicComponent],
  bootstrap: [SomeOtherComponent],
})
export class MyBasicComponentModule {}
"
`;

exports[`Angular with Import Mapper Tests > jsx > Javascript Test > propsDestructure 1`] = `
"import { NgModule } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

import { Component, Input } from \\"@angular/core\\";

type Props = {
  children: any;
  type: string;
};

@Component({
  selector: \\"my-basic-component, MyBasicComponent\\",
  template: \`
    <div>
      <ng-content></ng-content>

      {{type}} Hello! I can run in React, Vue, Solid, or Liquid!
    </div>
  \`,
})
export class MyBasicComponent {
  @Input() type: Props[\\"type\\"];

  name = \\"Decadef20\\";
}

@NgModule({
  declarations: [MyBasicComponent],
  imports: [CommonModule],
  exports: [MyBasicComponent],
  bootstrap: [SomeOtherComponent],
})
export class MyBasicComponentModule {}
"
`;

exports[`Angular with Import Mapper Tests > jsx > Javascript Test > propsInterface 1`] = `
"import { NgModule } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

import { Component, Input } from \\"@angular/core\\";

interface Person {
  name: string;
  age?: number;
}

@Component({
  selector: \\"my-basic-component, MyBasicComponent\\",
  template: \`
    <div>Hello! I can run in React, Vue, Solid, or Liquid! {{name}}</div>
  \`,
})
export class MyBasicComponent {
  @Input() name: Person | never[\\"name\\"];
}

@NgModule({
  declarations: [MyBasicComponent],
  imports: [CommonModule],
  exports: [MyBasicComponent],
  bootstrap: [SomeOtherComponent],
})
export class MyBasicComponentModule {}
"
`;

exports[`Angular with Import Mapper Tests > jsx > Javascript Test > propsType 1`] = `
"import { NgModule } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

import { Component, Input } from \\"@angular/core\\";

type Person = {
  name: string;
  age?: number;
};

@Component({
  selector: \\"my-basic-component, MyBasicComponent\\",
  template: \`
    <div>Hello! I can run in React, Vue, Solid, or Liquid! {{name}}</div>
  \`,
})
export class MyBasicComponent {
  @Input() name: Person[\\"name\\"];
}

@NgModule({
  declarations: [MyBasicComponent],
  imports: [CommonModule],
  exports: [MyBasicComponent],
  bootstrap: [SomeOtherComponent],
})
export class MyBasicComponentModule {}
"
`;

exports[`Angular with Import Mapper Tests > jsx > Javascript Test > referencingFunInsideHook 1`] = `
"import { NgModule } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

import { Component } from \\"@angular/core\\";

@Component({
  selector: \\"on-update, OnUpdate\\",
  template: \`
    <div></div>
  \`,
})
export class OnUpdate {
  foo = function foo(params) {};
  bar = function bar() {};
  zoo = function zoo() {
    const params = {
      cb: this.bar,
    };
  };

  ngAfterContentChecked() {
    this.foo({
      someOption: this.bar,
    });
  }
}

@NgModule({
  declarations: [OnUpdate],
  imports: [CommonModule],
  exports: [OnUpdate],
  bootstrap: [SomeOtherComponent],
})
export class OnUpdateModule {}
"
`;

exports[`Angular with Import Mapper Tests > jsx > Javascript Test > renderContentExample 1`] = `
"import { NgModule } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

import { Component, Input } from \\"@angular/core\\";

type Props = {
  customComponents: string[];
  content: {
    blocks: any[];
    id: string;
  };
};

import {
  sendComponentsToVisualEditor,
  dispatchNewContentToVisualEditor,
  trackClick,
} from \\"@dummy/injection-js\\";
import BuilderContext from \\"@dummy/context.lite\\";
import RenderBlocksModule from \\"@dummy/RenderBlocks.lite.tsx/angular\\";

@Component({
  selector: \\"render-content, RenderContent\\",
  template: \`
    <div class=\\"div\\" (click)=\\"trackClick(content.id)\\">
      <render-blocks [blocks]=\\"content.blocks\\"></render-blocks>
    </div>
  \`,
  styles: [
    \`
      .div {
        display: flex;
        flex-direction: columns;
      }
    \`,
  ],
})
export class RenderContent {
  trackClick = trackClick;

  @Input() content: Props[\\"content\\"];
  @Input() customComponents: Props[\\"customComponents\\"];

  ngOnInit() {
    sendComponentsToVisualEditor(this.customComponents);
  }

  ngAfterContentChecked() {
    dispatchNewContentToVisualEditor(this.content);
  }
}

@NgModule({
  declarations: [RenderContent],
  imports: [CommonModule, RenderBlocksModule],
  exports: [RenderContent],
  bootstrap: [SomeOtherComponent],
})
export class RenderContentModule {}
"
`;

exports[`Angular with Import Mapper Tests > jsx > Javascript Test > rootFragmentMultiNode 1`] = `
"import { NgModule } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

import { Component, Input } from \\"@angular/core\\";

export interface ButtonProps {
  attributes?: any;
  text?: string;
  link?: string;
  openLinkInNewTab?: boolean;
}

@Component({
  selector: \\"button, Button\\",
  template: \`
    <ng-container>
      <ng-container *ngIf=\\"link\\">
        <a
          [attr.href]=\\"link\\"
          [attr.target]=\\"openLinkInNewTab ? '_blank' : undefined\\"
        >
          {{text}}
        </a>
      </ng-container>

      <ng-container *ngIf=\\"!link\\">
        <button type=\\"button\\">{{text}}</button>
      </ng-container>
    </ng-container>
  \`,
})
export class Button {
  @Input() link: ButtonProps[\\"link\\"];
  @Input() attributes: ButtonProps[\\"attributes\\"];
  @Input() openLinkInNewTab: ButtonProps[\\"openLinkInNewTab\\"];
  @Input() text: ButtonProps[\\"text\\"];
}

@NgModule({
  declarations: [Button],
  imports: [CommonModule],
  exports: [Button],
  bootstrap: [SomeOtherComponent],
})
export class ButtonModule {}
"
`;

exports[`Angular with Import Mapper Tests > jsx > Javascript Test > rootShow 1`] = `
"import { NgModule } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

import { Component, Input } from \\"@angular/core\\";

export interface RenderStylesProps {
  foo: string;
}

@Component({
  selector: \\"render-styles, RenderStyles\\",
  template: \`
    <ng-container *ngIf=\\"foo === 'bar'\\">
      <div>Bar</div>
    </ng-container>
  \`,
})
export class RenderStyles {
  @Input() foo: RenderStylesProps[\\"foo\\"];
}

@NgModule({
  declarations: [RenderStyles],
  imports: [CommonModule],
  exports: [RenderStyles],
  bootstrap: [SomeOtherComponent],
})
export class RenderStylesModule {}
"
`;

exports[`Angular with Import Mapper Tests > jsx > Javascript Test > self-referencing component 1`] = `
"import { NgModule } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

import { Component, Input } from \\"@angular/core\\";

@Component({
  selector: \\"my-component, MyComponent\\",
  template: \`
    <div>
      {{name}}

      <ng-container *ngIf=\\"name === 'Batman'\\">
        <MyComponent name=\\"Bruce Wayne\\"></MyComponent>
      </ng-container>
    </div>
  \`,
})
export class MyComponent {
  @Input() name: any;
}

@NgModule({
  declarations: [MyComponent],
  imports: [CommonModule, MyComponentModule],
  exports: [MyComponent],
  bootstrap: [SomeOtherComponent],
})
export class MyComponentModule {}
"
`;

exports[`Angular with Import Mapper Tests > jsx > Javascript Test > self-referencing component with children 1`] = `
"import { NgModule } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

import { Component, Input } from \\"@angular/core\\";

@Component({
  selector: \\"my-component, MyComponent\\",
  template: \`
    <div>
      {{name}}

      <ng-content></ng-content>

      <ng-container *ngIf=\\"name === 'Batman'\\">
        <MyComponent name=\\"Bruce\\">
          <div>Wayne</div>
        </MyComponent>
      </ng-container>
    </div>
  \`,
})
export class MyComponent {
  @Input() name: any;
}

@NgModule({
  declarations: [MyComponent],
  imports: [CommonModule, MyComponentModule],
  exports: [MyComponent],
  bootstrap: [SomeOtherComponent],
})
export class MyComponentModule {}
"
`;

exports[`Angular with Import Mapper Tests > jsx > Javascript Test > showWithFor 1`] = `
"import { NgModule } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

import { Component, Input } from \\"@angular/core\\";

interface Props {
  conditionA: boolean;
  items: string[];
}

@Component({
  selector: \\"nested-show, NestedShow\\",
  template: \`
    <ng-container *ngIf=\\"conditionA\\">
      <ng-container *ngFor=\\"let item of items; let idx = index\\">
        <div [attr.key]=\\"idx\\">{{item}}</div>
      </ng-container>
    </ng-container>
  \`,
})
export class NestedShow {
  @Input() conditionA: Props[\\"conditionA\\"];
  @Input() items: Props[\\"items\\"];
}

@NgModule({
  declarations: [NestedShow],
  imports: [CommonModule],
  exports: [NestedShow],
  bootstrap: [SomeOtherComponent],
})
export class NestedShowModule {}
"
`;

exports[`Angular with Import Mapper Tests > jsx > Javascript Test > spreadAttrs 1`] = `
"import { NgModule } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

import { Component } from \\"@angular/core\\";

@Component({
  selector: \\"my-basic-component, MyBasicComponent\\",
  template: \`
    <input />
  \`,
})
export class MyBasicComponent {}

@NgModule({
  declarations: [MyBasicComponent],
  imports: [CommonModule],
  exports: [MyBasicComponent],
  bootstrap: [SomeOtherComponent],
})
export class MyBasicComponentModule {}
"
`;

exports[`Angular with Import Mapper Tests > jsx > Javascript Test > spreadNestedProps 1`] = `
"import { NgModule } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

import { Component, Input } from \\"@angular/core\\";

@Component({
  selector: \\"my-basic-component, MyBasicComponent\\",
  template: \`
    <input />
  \`,
})
export class MyBasicComponent {
  @Input() nested: any;
}

@NgModule({
  declarations: [MyBasicComponent],
  imports: [CommonModule],
  exports: [MyBasicComponent],
  bootstrap: [SomeOtherComponent],
})
export class MyBasicComponentModule {}
"
`;

exports[`Angular with Import Mapper Tests > jsx > Javascript Test > spreadProps 1`] = `
"import { NgModule } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

import { Component } from \\"@angular/core\\";

@Component({
  selector: \\"my-basic-component, MyBasicComponent\\",
  template: \`
    <input />
  \`,
})
export class MyBasicComponent {}

@NgModule({
  declarations: [MyBasicComponent],
  imports: [CommonModule],
  exports: [MyBasicComponent],
  bootstrap: [SomeOtherComponent],
})
export class MyBasicComponentModule {}
"
`;

exports[`Angular with Import Mapper Tests > jsx > Javascript Test > subComponent 1`] = `
"import { NgModule } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

import { Component } from \\"@angular/core\\";

import FooModule from \\"./foo-sub-component.lite/angular\\";

@Component({
  selector: \\"sub-component, SubComponent\\",
  template: \`
    <foo></foo>
  \`,
})
export class SubComponent {}

@NgModule({
  declarations: [SubComponent],
  imports: [CommonModule, FooModule],
  exports: [SubComponent],
  bootstrap: [SomeOtherComponent],
})
export class SubComponentModule {}
"
`;

exports[`Angular with Import Mapper Tests > jsx > Javascript Test > typeDependency 1`] = `
"import { NgModule } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

import { Component, Input } from \\"@angular/core\\";

import type { Foo } from \\"./foo-type\\";
import type { Foo as Foo2 } from \\"./type-export\\";
export type TypeDependencyProps = {
  foo: Foo;
  foo2: Foo2;
};

@Component({
  selector: \\"type-dependency, TypeDependency\\",
  template: \`
    <div>{{foo}}</div>
  \`,
})
export class TypeDependency {
  @Input() foo: TypeDependencyProps[\\"foo\\"];
}

@NgModule({
  declarations: [TypeDependency],
  imports: [CommonModule],
  exports: [TypeDependency],
  bootstrap: [SomeOtherComponent],
})
export class TypeDependencyModule {}
"
`;

exports[`Angular with Import Mapper Tests > jsx > Javascript Test > use-style 1`] = `
"import { NgModule } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

import { Component } from \\"@angular/core\\";

@Component({
  selector: \\"my-component, MyComponent\\",
  template: \`
    <button type=\\"button\\">Button</button>
  \`,
  styles: [
    \`
      button {
        background: blue;
        color: white;
        font-size: 12px;
        outline: 1px solid black;
      }
    \`,
  ],
})
export class MyComponent {}

@NgModule({
  declarations: [MyComponent],
  imports: [CommonModule],
  exports: [MyComponent],
  bootstrap: [SomeOtherComponent],
})
export class MyComponentModule {}
"
`;

exports[`Angular with Import Mapper Tests > jsx > Javascript Test > use-style-and-css 1`] = `
"import { NgModule } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

import { Component } from \\"@angular/core\\";

@Component({
  selector: \\"my-component, MyComponent\\",
  template: \`
    <button type=\\"button\\" class=\\"button\\">Button</button>
  \`,
  styles: [
    \`
      .button {
        background: blue;
        color: white;
      }

      button {
        font-size: 12px;
        outline: 1px solid black;
      }
    \`,
  ],
})
export class MyComponent {}

@NgModule({
  declarations: [MyComponent],
  imports: [CommonModule],
  exports: [MyComponent],
  bootstrap: [SomeOtherComponent],
})
export class MyComponentModule {}
"
`;

exports[`Angular with Import Mapper Tests > jsx > Javascript Test > use-style-outside-component 1`] = `
"import { NgModule } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

import { Component } from \\"@angular/core\\";

@Component({
  selector: \\"my-component, MyComponent\\",
  template: \`
    <button type=\\"button\\">Button</button>
  \`,
  styles: [
    \`
      button {
        background: blue;
        color: white;
        font-size: 12px;
        outline: 1px solid black;
      }
    \`,
  ],
})
export class MyComponent {}

@NgModule({
  declarations: [MyComponent],
  imports: [CommonModule],
  exports: [MyComponent],
  bootstrap: [SomeOtherComponent],
})
export class MyComponentModule {}
"
`;

exports[`Angular with Import Mapper Tests > jsx > Remove Internal mitosis package 1`] = `
"import { NgModule } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

import { Component } from \\"@angular/core\\";

@Component({
  selector: \\"my-basic-component, MyBasicComponent\\",
  template: \`
    <div>Hello {{name}} ! I can run in React, Qwik, Vue, Solid, or Liquid!</div>
  \`,
})
export class MyBasicComponent {
  name = \\"PatrickJS\\";
}

@NgModule({
  declarations: [MyBasicComponent],
  imports: [CommonModule],
  exports: [MyBasicComponent],
  bootstrap: [SomeOtherComponent],
})
export class MyBasicComponentModule {}
"
`;

exports[`Angular with Import Mapper Tests > jsx > Typescript Test > AdvancedRef 1`] = `
"import { NgModule } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

import { Component, ViewChild, ElementRef, Input } from \\"@angular/core\\";

export interface Props {
  showInput: boolean;
}

@Component({
  selector: \\"my-basic-ref-component, MyBasicRefComponent\\",
  template: \`
    <div>
      <ng-container *ngIf=\\"showInput\\">
        <ng-container>
          <input
            class=\\"input\\"
            #inputRef
            [attr.value]=\\"name\\"
            (blur)=\\"onBlur()\\"
            (input)=\\"name = $event.target.value\\"
          />

          <label for=\\"cars\\" #inputNoArgRef>Choose a car:</label>

          <select name=\\"cars\\" id=\\"cars\\">
            <option value=\\"supra\\">GR Supra</option>

            <option value=\\"86\\">GR 86</option>
          </select>
        </ng-container>
      </ng-container>

      Hello {{lowerCaseName()}} ! I can run in React, Qwik, Vue, Solid, or Web
      Component!
    </div>
  \`,
  styles: [
    \`
      .input {
        color: red;
      }
    \`,
  ],
})
export class MyBasicRefComponent {
  @Input() showInput: Props[\\"showInput\\"];

  @ViewChild(\\"inputRef\\") inputRef: ElementRef;
  @ViewChild(\\"inputNoArgRef\\") inputNoArgRef: ElementRef;

  name = \\"PatrickJS\\";
  onBlur = function onBlur() {
    // Maintain focus
    this.inputRef.nativeElement.focus();
  };
  lowerCaseName = function lowerCaseName() {
    return this.name.toLowerCase();
  };

  ngAfterContentChecked() {
    console.log(\\"Received an update\\");
  }
}

@NgModule({
  declarations: [MyBasicRefComponent],
  imports: [CommonModule],
  exports: [MyBasicRefComponent],
  bootstrap: [SomeOtherComponent],
})
export class MyBasicRefComponentModule {}
"
`;

exports[`Angular with Import Mapper Tests > jsx > Typescript Test > Basic 1`] = `
"import { NgModule } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

import { Component } from \\"@angular/core\\";

export interface MyBasicComponentProps {
  id: string;
}

export const DEFAULT_VALUES = {
  name: \\"Steve\\",
};

@Component({
  selector: \\"my-basic-component, MyBasicComponent\\",
  template: \`
    <div class=\\"test div\\">
      <input
        [attr.value]=\\"DEFAULT_VALUES.name || name\\"
        (input)=\\"name = $event.target.value\\"
      />

      Hello! I can run in React, Vue, Solid, or Liquid!
    </div>
  \`,
  styles: [
    \`
      .div {
        padding: 10px;
      }
    \`,
  ],
})
export class MyBasicComponent {
  DEFAULT_VALUES = DEFAULT_VALUES;

  name = \\"Steve\\";
  underscore_fn_name() {
    return \\"bar\\";
  }
  age = 1;
  sports = [\\"\\"];
}

@NgModule({
  declarations: [MyBasicComponent],
  imports: [CommonModule],
  exports: [MyBasicComponent],
  bootstrap: [SomeOtherComponent],
})
export class MyBasicComponentModule {}
"
`;

exports[`Angular with Import Mapper Tests > jsx > Typescript Test > Basic 2`] = `
"import { NgModule } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

import { Component } from \\"@angular/core\\";

@Component({
  selector: \\"my-basic-for-show-component, MyBasicForShowComponent\\",
  template: \`
    <div>
      <ng-container *ngFor=\\"let person of names\\">
        <ng-container *ngIf=\\"person === name\\">
          <input
            [attr.value]=\\"name\\"
            (input)=\\"
         name = $event.target.value + ' and ' + person;
       \\"
          />

          Hello {{person}} ! I can run in Qwik, Web Component, React, Vue,
          Solid, or Liquid!
        </ng-container>
      </ng-container>
    </div>
  \`,
})
export class MyBasicForShowComponent {
  name = \\"PatrickJS\\";
  names = [\\"Steve\\", \\"PatrickJS\\"];
}

@NgModule({
  declarations: [MyBasicForShowComponent],
  imports: [CommonModule],
  exports: [MyBasicForShowComponent],
  bootstrap: [SomeOtherComponent],
})
export class MyBasicForShowComponentModule {}
"
`;

exports[`Angular with Import Mapper Tests > jsx > Typescript Test > Basic Context 1`] = `
"import { NgModule } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

import { Component } from \\"@angular/core\\";

import { Injector, createInjector, MyService } from \\"@dummy/injection-js\\";

@Component({
  selector: \\"my-basic-component, MyBasicComponent\\",
  template: \`
    <div>
      {{myService.method('hello') + name}} Hello! I can run in React, Vue,
      Solid, or Liquid!

      <input (input)=\\"onChange\\" />
    </div>
  \`,
})
export class MyBasicComponent {
  name = \\"PatrickJS\\";
  onChange = function onChange() {
    const change = this.myService.method(\\"change\\");
    console.log(change);
  };

  constructor(public myService: MyService) {
    const hi = this.myService.method(\\"hi\\");
    console.log(hi);
  }

  ngOnInit() {
    const bye = this.myService.method(\\"hi\\");
    console.log(bye);
  }
}

@NgModule({
  declarations: [MyBasicComponent],
  imports: [CommonModule],
  exports: [MyBasicComponent],
  bootstrap: [SomeOtherComponent],
})
export class MyBasicComponentModule {}
"
`;

exports[`Angular with Import Mapper Tests > jsx > Typescript Test > Basic OnMount Update 1`] = `
"import { NgModule } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

import { Component, Input } from \\"@angular/core\\";

export interface Props {
  hi: string;
  bye: string;
}

@Component({
  selector: \\"my-basic-on-mount-update-component, MyBasicOnMountUpdateComponent\\",
  template: \`
    <div>Hello {{name}}</div>
  \`,
})
export class MyBasicOnMountUpdateComponent {
  @Input() hi: Props[\\"hi\\"];
  @Input() bye: Props[\\"bye\\"];

  name = \\"PatrickJS\\";
  names = [\\"Steve\\", \\"PatrickJS\\"];

  constructor() {
    this.name = \\"PatrickJS onInit\\" + this.hi;
  }

  ngOnInit() {
    this.name = \\"PatrickJS onMount\\" + this.bye;
  }
}

@NgModule({
  declarations: [MyBasicOnMountUpdateComponent],
  imports: [CommonModule],
  exports: [MyBasicOnMountUpdateComponent],
  bootstrap: [SomeOtherComponent],
})
export class MyBasicOnMountUpdateComponentModule {}
"
`;

exports[`Angular with Import Mapper Tests > jsx > Typescript Test > Basic Outputs 1`] = `
"import { NgModule } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

import { Output, EventEmitter, Component, Input } from \\"@angular/core\\";

@Component({
  selector: \\"my-basic-outputs-component, MyBasicOutputsComponent\\",
  template: \`
    <div></div>
  \`,
})
export class MyBasicOutputsComponent {
  @Input() message: any;

  @Output() onMessage = new EventEmitter();
  @Output() onEvent = new EventEmitter();

  name = \\"PatrickJS\\";

  ngOnInit() {
    this.onMessage.emit(this.name);
    this.onEvent.emit(this.message);
  }
}

@NgModule({
  declarations: [MyBasicOutputsComponent],
  imports: [CommonModule],
  exports: [MyBasicOutputsComponent],
  bootstrap: [SomeOtherComponent],
})
export class MyBasicOutputsComponentModule {}
"
`;

exports[`Angular with Import Mapper Tests > jsx > Typescript Test > Basic Outputs Meta 1`] = `
"import { NgModule } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

import { Output, EventEmitter, Component, Input } from \\"@angular/core\\";

@Component({
  selector: \\"my-basic-outputs-component, MyBasicOutputsComponent\\",
  template: \`
    <div></div>
  \`,
})
export class MyBasicOutputsComponent {
  @Input() message: any;

  @Output() onMessage = new EventEmitter();
  @Output() onEvent = new EventEmitter();

  name = \\"PatrickJS\\";

  ngOnInit() {
    this.onMessage.emit(this.name);
    this.onEvent.emit(this.message);
  }
}

@NgModule({
  declarations: [MyBasicOutputsComponent],
  imports: [CommonModule],
  exports: [MyBasicOutputsComponent],
  bootstrap: [SomeOtherComponent],
})
export class MyBasicOutputsComponentModule {}
"
`;

exports[`Angular with Import Mapper Tests > jsx > Typescript Test > BasicAttribute 1`] = `
"import { NgModule } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

import { Component } from \\"@angular/core\\";

@Component({
  selector: \\"my-component, MyComponent\\",
  template: \`
    <input autocapitalize=\\"on\\" autocomplete=\\"on\\" [attr.spellcheck]=\\"true\\" />
  \`,
})
export class MyComponent {}

@NgModule({
  declarations: [MyComponent],
  imports: [CommonModule],
  exports: [MyComponent],
  bootstrap: [SomeOtherComponent],
})
export class MyComponentModule {}
"
`;

exports[`Angular with Import Mapper Tests > jsx > Typescript Test > BasicBooleanAttribute 1`] = `
"import { NgModule } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

import { Component, Input } from \\"@angular/core\\";

type Props = {
  children: any;
  type: string;
};

import MyBooleanAttributeComponentModule from \\"./basic-boolean-attribute-component.raw/angular\\";

@Component({
  selector: \\"my-boolean-attribute, MyBooleanAttribute\\",
  template: \`
    <div>
      <ng-content></ng-content>

      {{type}}

      <my-boolean-attribute-component
        [toggle]=\\"true\\"
      ></my-boolean-attribute-component>

      <my-boolean-attribute-component
        [toggle]=\\"true\\"
      ></my-boolean-attribute-component>

      <my-boolean-attribute-component
        [list]=\\"null\\"
      ></my-boolean-attribute-component>
    </div>
  \`,
})
export class MyBooleanAttribute {
  @Input() type: Props[\\"type\\"];
}

@NgModule({
  declarations: [MyBooleanAttribute],
  imports: [CommonModule, MyBooleanAttributeComponentModule],
  exports: [MyBooleanAttribute],
  bootstrap: [SomeOtherComponent],
})
export class MyBooleanAttributeModule {}
"
`;

exports[`Angular with Import Mapper Tests > jsx > Typescript Test > BasicChildComponent 1`] = `
"import { NgModule } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

import { Component } from \\"@angular/core\\";

import MyBasicComponentModule from \\"./basic.raw/angular\\";
import MyBasicOnMountUpdateComponentModule from \\"./basic-onMount-update.raw/angular\\";

@Component({
  selector: \\"my-basic-child-component, MyBasicChildComponent\\",
  template: \`
    <div>
      <my-basic-component [id]=\\"dev\\"></my-basic-component>

      <div>
        <my-basic-on-mount-update-component
          [hi]=\\"name\\"
          [bye]=\\"dev\\"
        ></my-basic-on-mount-update-component>
      </div>
    </div>
  \`,
})
export class MyBasicChildComponent {
  name = \\"Steve\\";
  dev = \\"PatrickJS\\";
}

@NgModule({
  declarations: [MyBasicChildComponent],
  imports: [
    CommonModule,
    MyBasicComponentModule,
    MyBasicOnMountUpdateComponentModule,
  ],
  exports: [MyBasicChildComponent],
  bootstrap: [SomeOtherComponent],
})
export class MyBasicChildComponentModule {}
"
`;

exports[`Angular with Import Mapper Tests > jsx > Typescript Test > BasicFor 1`] = `
"import { NgModule } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

import { Component } from \\"@angular/core\\";

@Component({
  selector: \\"my-basic-for-component, MyBasicForComponent\\",
  template: \`
    <div>
      <ng-container *ngFor=\\"let person of names\\">
        <ng-container>
          <input
            [attr.value]=\\"name\\"
            (input)=\\"
         name = $event.target.value + ' and ' + person;
       \\"
          />

          Hello {{person}} ! I can run in Qwik, Web Component, React, Vue,
          Solid, or Liquid!
        </ng-container>
      </ng-container>
    </div>
  \`,
})
export class MyBasicForComponent {
  name = \\"PatrickJS\\";
  names = [\\"Steve\\", \\"PatrickJS\\"];

  ngOnInit() {
    console.log(\\"onMount code\\");
  }
}

@NgModule({
  declarations: [MyBasicForComponent],
  imports: [CommonModule],
  exports: [MyBasicForComponent],
  bootstrap: [SomeOtherComponent],
})
export class MyBasicForComponentModule {}
"
`;

exports[`Angular with Import Mapper Tests > jsx > Typescript Test > BasicRef 1`] = `
"import { NgModule } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

import { Component, ViewChild, ElementRef, Input } from \\"@angular/core\\";

export interface Props {
  showInput: boolean;
}

@Component({
  selector: \\"my-basic-ref-component, MyBasicRefComponent\\",
  template: \`
    <div>
      <ng-container *ngIf=\\"showInput\\">
        <ng-container>
          <input
            class=\\"input\\"
            #inputRef
            [attr.value]=\\"name\\"
            (blur)=\\"onBlur()\\"
            (input)=\\"name = $event.target.value\\"
          />

          <label for=\\"cars\\" #inputNoArgRef>Choose a car:</label>

          <select name=\\"cars\\" id=\\"cars\\">
            <option value=\\"supra\\">GR Supra</option>

            <option value=\\"86\\">GR 86</option>
          </select>
        </ng-container>
      </ng-container>

      Hello {{lowerCaseName()}} ! I can run in React, Qwik, Vue, Solid, or Web
      Component!
    </div>
  \`,
  styles: [
    \`
      .input {
        color: red;
      }
    \`,
  ],
})
export class MyBasicRefComponent {
  @Input() showInput: Props[\\"showInput\\"];

  @ViewChild(\\"inputRef\\") inputRef: ElementRef;
  @ViewChild(\\"inputNoArgRef\\") inputNoArgRef: ElementRef;

  name = \\"PatrickJS\\";
  onBlur = function onBlur() {
    // Maintain focus
    this.inputRef.nativeElement.focus();
  };
  lowerCaseName = function lowerCaseName() {
    return this.name.toLowerCase();
  };
}

@NgModule({
  declarations: [MyBasicRefComponent],
  imports: [CommonModule],
  exports: [MyBasicRefComponent],
  bootstrap: [SomeOtherComponent],
})
export class MyBasicRefComponentModule {}
"
`;

exports[`Angular with Import Mapper Tests > jsx > Typescript Test > BasicRefAssignment 1`] = `
"import { NgModule } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

import { Component } from \\"@angular/core\\";

export interface Props {
  showInput: boolean;
}

@Component({
  selector: \\"my-basic-ref-assignment-component, MyBasicRefAssignmentComponent\\",
  template: \`
    <div>
      <button (click)=\\"handlerClick($event)\\">Click</button>
    </div>
  \`,
})
export class MyBasicRefAssignmentComponent {
  handlerClick = function handlerClick(event) {
    event.preventDefault();
    console.log(\\"current value\\", this._holdValueRef);
    this._holdValueRef = this._holdValueRef + \\"JS\\";
  };

  private _holdValueRef = \\"Patrick\\";
}

@NgModule({
  declarations: [MyBasicRefAssignmentComponent],
  imports: [CommonModule],
  exports: [MyBasicRefAssignmentComponent],
  bootstrap: [SomeOtherComponent],
})
export class MyBasicRefAssignmentComponentModule {}
"
`;

exports[`Angular with Import Mapper Tests > jsx > Typescript Test > BasicRefPrevious 1`] = `
"import { NgModule } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

import { Component } from \\"@angular/core\\";

export interface Props {
  showInput: boolean;
}

export function usePrevious<T>(value: T) {
  // The ref object is a generic container whose current property is mutable ...
  // ... and can hold any value, similar to an instance property on a class
  let ref = useRef<T>(null); // Store current value in ref

  onUpdate(() => {
    ref = value;
  }, [value]); // Only re-run if value changes
  // Return previous value (happens before update in useEffect above)

  return ref;
}

@Component({
  selector: \\"my-previous-component, MyPreviousComponent\\",
  template: \`
    <div>
      <h1>Now: {{count}} , before: {{this._prevCount}}</h1>

      <button (click)=\\"count += 1\\">Increment</button>
    </div>
  \`,
})
export class MyPreviousComponent {
  count = 0;

  private _prevCount = this.count;

  ngAfterContentChecked() {
    this._prevCount = this.count;
  }
}

@NgModule({
  declarations: [MyPreviousComponent],
  imports: [CommonModule],
  exports: [MyPreviousComponent],
  bootstrap: [SomeOtherComponent],
})
export class MyPreviousComponentModule {}
"
`;

exports[`Angular with Import Mapper Tests > jsx > Typescript Test > Button 1`] = `
"import { NgModule } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

import { Component, Input } from \\"@angular/core\\";

export interface ButtonProps {
  attributes?: any;
  text?: string;
  link?: string;
  openLinkInNewTab?: boolean;
}

@Component({
  selector: \\"button, Button\\",
  template: \`
    <div>
      <ng-container *ngIf=\\"link\\">
        <a
          [attr.href]=\\"link\\"
          [attr.target]=\\"openLinkInNewTab ? '_blank' : undefined\\"
        >
          {{text}}
        </a>
      </ng-container>

      <ng-container *ngIf=\\"!link\\">
        <button type=\\"button\\">{{text}}</button>
      </ng-container>
    </div>
  \`,
})
export class Button {
  @Input() link: ButtonProps[\\"link\\"];
  @Input() attributes: ButtonProps[\\"attributes\\"];
  @Input() openLinkInNewTab: ButtonProps[\\"openLinkInNewTab\\"];
  @Input() text: ButtonProps[\\"text\\"];
}

@NgModule({
  declarations: [Button],
  imports: [CommonModule],
  exports: [Button],
  bootstrap: [SomeOtherComponent],
})
export class ButtonModule {}
"
`;

exports[`Angular with Import Mapper Tests > jsx > Typescript Test > Columns 1`] = `
"import { NgModule } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

import { Component, Input } from \\"@angular/core\\";

type Column = {
  content: any; // TODO: Implement this when support for dynamic CSS lands

  width?: number;
};
export interface ColumnProps {
  columns?: Column[]; // TODO: Implement this when support for dynamic CSS lands

  space?: number; // TODO: Implement this when support for dynamic CSS lands

  stackColumnsAt?: \\"tablet\\" | \\"mobile\\" | \\"never\\"; // TODO: Implement this when support for dynamic CSS lands

  reverseColumnsWhenStacked?: boolean;
}

@Component({
  selector: \\"column, Column\\",
  template: \`
    <div class=\\"builder-columns div\\">
      <ng-container *ngFor=\\"let column of columns; let index = index\\">
        <div class=\\"builder-column div-2\\">{{column.content}} {{index}}</div>
      </ng-container>
    </div>
  \`,
  styles: [
    \`
      .div {
        display: flex;
        flex-direction: column;
        align-items: stretch;
        line-height: normal;
      }
      @media (max-width: 999px) {
        .div {
          flex-direction: row;
        }
      }
      @media (max-width: 639px) {
        .div {
          flex-direction: row-reverse;
        }
      }
      .div-2 {
        flex-grow: 1;
      }
    \`,
  ],
})
export class Column {
  @Input() columns: ColumnProps[\\"columns\\"];
  @Input() space: ColumnProps[\\"space\\"];

  getColumns() {
    return this.columns || [];
  }
  getGutterSize() {
    return typeof this.space === \\"number\\" ? this.space || 0 : 20;
  }
  getWidth(index) {
    const columns = this.getColumns();
    return (columns[index] && columns[index].width) || 100 / columns.length;
  }
  getColumnCssWidth(index) {
    const columns = this.getColumns();
    const gutterSize = this.getGutterSize();
    const subtractWidth = (gutterSize * (columns.length - 1)) / columns.length;
    return \`calc(\${this.getWidth(index)}% - \${subtractWidth}px)\`;
  }
}

@NgModule({
  declarations: [Column],
  imports: [CommonModule],
  exports: [Column],
  bootstrap: [SomeOtherComponent],
})
export class ColumnModule {}
"
`;

exports[`Angular with Import Mapper Tests > jsx > Typescript Test > ContentSlotHtml 1`] = `
"import { NgModule } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

import { Component, Input } from \\"@angular/core\\";

type Props = {
  [key: string]: string | JSX.Element;
  slotTesting: JSX.Element;
};

@Component({
  selector: \\"content-slot-code, ContentSlotCode\\",
  template: \`
    <div>
      <ng-content select=\\"[testing]\\"></ng-content>

      <div>
        <hr />
      </div>

      <div>
        <ng-content></ng-content>
      </div>
    </div>
  \`,
})
export class ContentSlotCode {}

@NgModule({
  declarations: [ContentSlotCode],
  imports: [CommonModule],
  exports: [ContentSlotCode],
  bootstrap: [SomeOtherComponent],
})
export class ContentSlotCodeModule {}
"
`;

exports[`Angular with Import Mapper Tests > jsx > Typescript Test > ContentSlotJSX 1`] = `
"import { NgModule } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

import { Component, Input } from \\"@angular/core\\";

type Props = {
  [key: string]: string | JSX.Element;
};

@Component({
  selector: \\"content-slot-jsx-code, ContentSlotJsxCode\\",
  template: \`
    <div>
      <ng-container *ngIf=\\"slotTesting\\">
        <div><ng-content select=\\"[testing]\\"></ng-content></div>
      </ng-container>

      <div>
        <hr />
      </div>

      <div><ng-content></ng-content></div>
    </div>
  \`,
})
export class ContentSlotJsxCode {}

@NgModule({
  declarations: [ContentSlotJsxCode],
  imports: [CommonModule],
  exports: [ContentSlotJsxCode],
  bootstrap: [SomeOtherComponent],
})
export class ContentSlotJsxCodeModule {}
"
`;

exports[`Angular with Import Mapper Tests > jsx > Typescript Test > CustomCode 1`] = `
"import { NgModule } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

import { Component, ViewChild, ElementRef, Input } from \\"@angular/core\\";

export interface CustomCodeProps {
  code: string;
  replaceNodes?: boolean;
}

@Component({
  selector: \\"custom-code, CustomCode\\",
  template: \`
    <div
      #elem
      [class]=\\"'builder-custom-code' + (replaceNodes ? ' replace-nodes' : '')\\"
      [innerHTML]=\\"code\\"
    ></div>
  \`,
})
export class CustomCode {
  @Input() replaceNodes: CustomCodeProps[\\"replaceNodes\\"];
  @Input() code: CustomCodeProps[\\"code\\"];

  @ViewChild(\\"elem\\") elem: ElementRef;

  scriptsInserted = [];
  scriptsRun = [];
  findAndRunScripts() {
    // TODO: Move this function to standalone one in '@builder.io/utils'
    if (this.elem.nativeElement && typeof window !== \\"undefined\\") {
      /** @type {HTMLScriptElement[]} */
      const scripts = this.elem.nativeElement.getElementsByTagName(\\"script\\");

      for (let i = 0; i < scripts.length; i++) {
        const script = scripts[i];

        if (script.src) {
          if (this.scriptsInserted.includes(script.src)) {
            continue;
          }

          this.scriptsInserted.push(script.src);
          const newScript = document.createElement(\\"script\\");
          newScript.async = true;
          newScript.src = script.src;
          document.head.appendChild(newScript);
        } else if (
          !script.type ||
          [
            \\"text/javascript\\",
            \\"application/javascript\\",
            \\"application/ecmascript\\",
          ].includes(script.type)
        ) {
          if (this.scriptsRun.includes(script.innerText)) {
            continue;
          }

          try {
            this.scriptsRun.push(script.innerText);
            new Function(script.innerText)();
          } catch (error) {
            console.warn(\\"\`CustomCode\`: Error running script:\\", error);
          }
        }
      }
    }
  }

  ngOnInit() {
    this.findAndRunScripts();
  }
}

@NgModule({
  declarations: [CustomCode],
  imports: [CommonModule],
  exports: [CustomCode],
  bootstrap: [SomeOtherComponent],
})
export class CustomCodeModule {}
"
`;

exports[`Angular with Import Mapper Tests > jsx > Typescript Test > Embed 1`] = `
"import { NgModule } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

import { Component, ViewChild, ElementRef, Input } from \\"@angular/core\\";

export interface CustomCodeProps {
  code: string;
  replaceNodes?: boolean;
}

@Component({
  selector: \\"custom-code, CustomCode\\",
  template: \`
    <div
      #elem
      [class]=\\"'builder-custom-code' + (replaceNodes ? ' replace-nodes' : '')\\"
      [innerHTML]=\\"code\\"
    ></div>
  \`,
})
export class CustomCode {
  @Input() replaceNodes: CustomCodeProps[\\"replaceNodes\\"];
  @Input() code: CustomCodeProps[\\"code\\"];

  @ViewChild(\\"elem\\") elem: ElementRef;

  scriptsInserted = [];
  scriptsRun = [];
  findAndRunScripts() {
    // TODO: Move this function to standalone one in '@builder.io/utils'
    if (this.elem.nativeElement && typeof window !== \\"undefined\\") {
      /** @type {HTMLScriptElement[]} */
      const scripts = this.elem.nativeElement.getElementsByTagName(\\"script\\");

      for (let i = 0; i < scripts.length; i++) {
        const script = scripts[i];

        if (script.src) {
          if (this.scriptsInserted.includes(script.src)) {
            continue;
          }

          this.scriptsInserted.push(script.src);
          const newScript = document.createElement(\\"script\\");
          newScript.async = true;
          newScript.src = script.src;
          document.head.appendChild(newScript);
        } else if (
          !script.type ||
          [
            \\"text/javascript\\",
            \\"application/javascript\\",
            \\"application/ecmascript\\",
          ].includes(script.type)
        ) {
          if (this.scriptsRun.includes(script.innerText)) {
            continue;
          }

          try {
            this.scriptsRun.push(script.innerText);
            new Function(script.innerText)();
          } catch (error) {
            console.warn(\\"\`CustomCode\`: Error running script:\\", error);
          }
        }
      }
    }
  }

  ngOnInit() {
    this.findAndRunScripts();
  }
}

@NgModule({
  declarations: [CustomCode],
  imports: [CommonModule],
  exports: [CustomCode],
  bootstrap: [SomeOtherComponent],
})
export class CustomCodeModule {}
"
`;

exports[`Angular with Import Mapper Tests > jsx > Typescript Test > Form 1`] = `
"import { NgModule } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

import { Component, ViewChild, ElementRef, Input } from \\"@angular/core\\";

export interface FormProps {
  attributes?: any;
  name?: string;
  action?: string;
  validate?: boolean;
  method?: string;
  builderBlock?: BuilderElement;
  sendSubmissionsTo?: string;
  sendSubmissionsToEmail?: string;
  sendWithJs?: boolean;
  contentType?: string;
  customHeaders?: {
    [key: string]: string;
  };
  successUrl?: string;
  previewState?: FormState;
  successMessage?: BuilderElement[];
  errorMessage?: BuilderElement[];
  sendingMessage?: BuilderElement[];
  resetFormOnSubmit?: boolean;
  errorMessagePath?: string;
}
export type FormState = \\"unsubmitted\\" | \\"sending\\" | \\"success\\" | \\"error\\";

import { BuilderBlock as BuilderBlockComponentModule } from \\"@fake/angular\\";
import { Builder, builder } from \\"@builder.io/sdk\\";
import { BuilderBlocksModule } from \\"@fake/angular\\";
import { set } from \\"@fake\\";
import { get } from \\"@fake\\";

@Component({
  selector: \\"form-component, FormComponent\\",
  template: \`
    <form
      [attr.validate]=\\"validate\\"
      #formRef
      [attr.action]=\\"!sendWithJs && action\\"
      [attr.method]=\\"method\\"
      [attr.name]=\\"name\\"
      (submit)=\\"onSubmit($event)\\"
    >
      <ng-container *ngIf=\\"builderBlock && builderBlock.children\\">
        <ng-container
          *ngFor=\\"let block of builderBlock?.children; let index = index\\"
        >
          <BuilderBlockComponent
            [key]=\\"block.id\\"
            [block]=\\"block\\"
            [index]=\\"index\\"
          ></BuilderBlockComponent>
        </ng-container>
      </ng-container>

      <ng-container *ngIf=\\"submissionState === 'error'\\">
        <BuilderBlocks
          dataPath=\\"errorMessage\\"
          [blocks]=\\"errorMessage\\"
        ></BuilderBlocks>
      </ng-container>

      <ng-container *ngIf=\\"submissionState === 'sending'\\">
        <BuilderBlocks
          dataPath=\\"sendingMessage\\"
          [blocks]=\\"sendingMessage\\"
        ></BuilderBlocks>
      </ng-container>

      <ng-container *ngIf=\\"submissionState === 'error' && responseData\\">
        <pre class=\\"builder-form-error-text pre\\">
                 
       {{JSON.stringify(responseData, null, 2)}}

               </pre
        >
      </ng-container>

      <ng-container *ngIf=\\"submissionState === 'success'\\">
        <BuilderBlocks
          dataPath=\\"successMessage\\"
          [blocks]=\\"successMessage\\"
        ></BuilderBlocks>
      </ng-container>
    </form>
  \`,
  styles: [
    \`
      .pre {
        padding: 10px;
        color: red;
        text-align: center;
      }
    \`,
  ],
})
export class FormComponent {
  builder = builder;

  @Input() previewState: FormProps[\\"previewState\\"];
  @Input() sendWithJs: FormProps[\\"sendWithJs\\"];
  @Input() sendSubmissionsTo: FormProps[\\"sendSubmissionsTo\\"];
  @Input() action: FormProps[\\"action\\"];
  @Input() customHeaders: FormProps[\\"customHeaders\\"];
  @Input() contentType: FormProps[\\"contentType\\"];
  @Input() sendSubmissionsToEmail: FormProps[\\"sendSubmissionsToEmail\\"];
  @Input() name: FormProps[\\"name\\"];
  @Input() method: FormProps[\\"method\\"];
  @Input() errorMessagePath: FormProps[\\"errorMessagePath\\"];
  @Input() resetFormOnSubmit: FormProps[\\"resetFormOnSubmit\\"];
  @Input() successUrl: FormProps[\\"successUrl\\"];
  @Input() validate: FormProps[\\"validate\\"];
  @Input() attributes: FormProps[\\"attributes\\"];
  @Input() builderBlock: FormProps[\\"builderBlock\\"];
  @Input() errorMessage: FormProps[\\"errorMessage\\"];
  @Input() sendingMessage: FormProps[\\"sendingMessage\\"];
  @Input() successMessage: FormProps[\\"successMessage\\"];

  @ViewChild(\\"formRef\\") formRef: ElementRef;

  formState = \\"unsubmitted\\";
  responseData = null;
  formErrorMessage = \\"\\";
  get submissionState() {
    return (Builder.isEditing && this.previewState) || this.formState;
  }
  onSubmit(event) {
    const sendWithJs = this.sendWithJs || this.sendSubmissionsTo === \\"email\\";

    if (this.sendSubmissionsTo === \\"zapier\\") {
      event.preventDefault();
    } else if (sendWithJs) {
      if (!(this.action || this.sendSubmissionsTo === \\"email\\")) {
        event.preventDefault();
        return;
      }

      event.preventDefault();
      const el = event.currentTarget;
      const headers = this.customHeaders || {};
      let body;
      const formData = new FormData(el); // TODO: maybe support null

      const formPairs = Array.from(
        event.currentTarget.querySelectorAll(\\"input,select,textarea\\")
      )
        .filter((el) => !!el.name)
        .map((el) => {
          let value;
          const key = el.name;

          if (el instanceof HTMLInputElement) {
            if (el.type === \\"radio\\") {
              if (el.checked) {
                value = el.name;
                return {
                  key,
                  value,
                };
              }
            } else if (el.type === \\"checkbox\\") {
              value = el.checked;
            } else if (el.type === \\"number\\" || el.type === \\"range\\") {
              const num = el.valueAsNumber;

              if (!isNaN(num)) {
                value = num;
              }
            } else if (el.type === \\"file\\") {
              // TODO: one vs multiple files
              value = el.files;
            } else {
              value = el.value;
            }
          } else {
            value = el.value;
          }

          return {
            key,
            value,
          };
        });
      let contentType = this.contentType;

      if (this.sendSubmissionsTo === \\"email\\") {
        contentType = \\"multipart/form-data\\";
      }

      Array.from(formPairs).forEach(({ value }) => {
        if (
          value instanceof File ||
          (Array.isArray(value) && value[0] instanceof File) ||
          value instanceof FileList
        ) {
          contentType = \\"multipart/form-data\\";
        }
      }); // TODO: send as urlEncoded or multipart by default
      // because of ease of use and reliability in browser API
      // for encoding the form?

      if (contentType !== \\"application/json\\") {
        body = formData;
      } else {
        // Json
        const json = {};
        Array.from(formPairs).forEach(({ value, key }) => {
          set(json, key, value);
        });
        body = JSON.stringify(json);
      }

      if (contentType && contentType !== \\"multipart/form-data\\") {
        if (
          /* Zapier doesn't allow content-type header to be sent from browsers */
          !(sendWithJs && this.action?.includes(\\"zapier.com\\"))
        ) {
          headers[\\"content-type\\"] = contentType;
        }
      }

      const presubmitEvent = new CustomEvent(\\"presubmit\\", {
        detail: {
          body,
        },
      });

      if (this.formRef.nativeElement) {
        this.formRef.nativeElement.dispatchEvent(presubmitEvent);

        if (presubmitEvent.defaultPrevented) {
          return;
        }
      }

      this.formState = \\"sending\\";
      const formUrl = \`\${
        builder.env === \\"dev\\" ? \\"http://localhost:5000\\" : \\"https://builder.io\\"
      }/api/v1/form-submit?apiKey=\${builder.apiKey}&to=\${btoa(
        this.sendSubmissionsToEmail || \\"\\"
      )}&name=\${encodeURIComponent(this.name || \\"\\")}\`;
      fetch(
        this.sendSubmissionsTo === \\"email\\" ? formUrl : this.action,
        /* TODO: throw error if no action URL */
        {
          body,
          headers,
          method: this.method || \\"post\\",
        }
      ).then(
        async (res) => {
          let body;
          const contentType = res.headers.get(\\"content-type\\");

          if (contentType && contentType.indexOf(\\"application/json\\") !== -1) {
            body = await res.json();
          } else {
            body = await res.text();
          }

          if (!res.ok && this.errorMessagePath) {
            /* TODO: allow supplying an error formatter function */
            let message = get(body, this.errorMessagePath);

            if (message) {
              if (typeof message !== \\"string\\") {
                /* TODO: ideally convert json to yaml so it woul dbe like
            error: - email has been taken */
                message = JSON.stringify(message);
              }

              this.formErrorMessage = message;
            }
          }

          this.responseData = body;
          this.formState = res.ok ? \\"success\\" : \\"error\\";

          if (res.ok) {
            const submitSuccessEvent = new CustomEvent(\\"submit:success\\", {
              detail: {
                res,
                body,
              },
            });

            if (this.formRef.nativeElement) {
              this.formRef.nativeElement.dispatchEvent(submitSuccessEvent);

              if (submitSuccessEvent.defaultPrevented) {
                return;
              }
              /* TODO: option to turn this on/off? */

              if (this.resetFormOnSubmit !== false) {
                this.formRef.nativeElement.reset();
              }
            }
            /* TODO: client side route event first that can be preventDefaulted */

            if (this.successUrl) {
              if (this.formRef.nativeElement) {
                const event = new CustomEvent(\\"route\\", {
                  detail: {
                    url: this.successUrl,
                  },
                });
                this.formRef.nativeElement.dispatchEvent(event);

                if (!event.defaultPrevented) {
                  location.href = this.successUrl;
                }
              } else {
                location.href = this.successUrl;
              }
            }
          }
        },
        (err) => {
          const submitErrorEvent = new CustomEvent(\\"submit:error\\", {
            detail: {
              error: err,
            },
          });

          if (this.formRef.nativeElement) {
            this.formRef.nativeElement.dispatchEvent(submitErrorEvent);

            if (submitErrorEvent.defaultPrevented) {
              return;
            }
          }

          this.responseData = err;
          this.formState = \\"error\\";
        }
      );
    }
  }
}

@NgModule({
  declarations: [FormComponent],
  imports: [CommonModule, BuilderBlockComponentModule, BuilderBlocksModule],
  exports: [FormComponent],
  bootstrap: [SomeOtherComponent],
})
export class FormComponentModule {}
"
`;

exports[`Angular with Import Mapper Tests > jsx > Typescript Test > Image 1`] = `
"import { NgModule } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

import { Component, ViewChild, ElementRef, Input } from \\"@angular/core\\";

// TODO: AMP Support?
export interface ImageProps {
  _class?: string;
  image: string;
  sizes?: string;
  lazy?: boolean;
  height?: number;
  width?: number;
  altText?: string;
  backgroundSize?: string;
  backgroundPosition?: string; // TODO: Support generating Builder.io and or Shopify \`srcset\`s when needed

  srcset?: string; // TODO: Implement support for custom aspect ratios

  aspectRatio?: number; // TODO: This might not work as expected in terms of positioning

  children?: any;
}

@Component({
  selector: \\"image, Image\\",
  template: \`
    <div>
      <picture #pictureRef>
        <ng-container *ngIf=\\"!useLazyLoading() || load\\">
          <img
            [attr.alt]=\\"altText\\"
            [attr.aria-role]=\\"altText ? 'presentation' : undefined\\"
            [class]=\\"'builder-image' + (_class ? ' ' + _class : '') + ' img'\\"
            [attr.src]=\\"image\\"
            (load)=\\"setLoaded()\\"
            [attr.srcset]=\\"srcset\\"
            [attr.sizes]=\\"sizes\\"
          />
        </ng-container>

        <source [attr.srcset]=\\"srcset\\" />
      </picture>

      <ng-content></ng-content>
    </div>
  \`,
  styles: [
    \`
      .img {
        opacity: 1;
        transition: opacity 0.2s ease-in-out;
        object-fit: cover;
        object-position: center;
      }
    \`,
  ],
})
export class Image {
  @Input() lazy: ImageProps[\\"lazy\\"];
  @Input() altText: ImageProps[\\"altText\\"];
  @Input() _class: ImageProps[\\"_class\\"];
  @Input() image: ImageProps[\\"image\\"];
  @Input() srcset: ImageProps[\\"srcset\\"];
  @Input() sizes: ImageProps[\\"sizes\\"];

  @ViewChild(\\"pictureRef\\") pictureRef: ElementRef;

  scrollListener = null;
  imageLoaded = false;
  setLoaded() {
    this.imageLoaded = true;
  }
  useLazyLoading() {
    // TODO: Add more checks here, like testing for real web browsers
    return !!this.lazy && this.isBrowser();
  }
  isBrowser = function isBrowser() {
    return (
      typeof window !== \\"undefined\\" && window.navigator.product != \\"ReactNative\\"
    );
  };
  load = false;

  ngOnInit() {
    if (this.useLazyLoading()) {
      // throttled scroll capture listener
      const listener = () => {
        if (this.pictureRef.nativeElement) {
          const rect = this.pictureRef.nativeElement.getBoundingClientRect();
          const buffer = window.innerHeight / 2;

          if (rect.top < window.innerHeight + buffer) {
            setLoad(true);
            this.scrollListener = null;
            window.removeEventListener(\\"scroll\\", listener);
          }
        }
      };

      this.scrollListener = listener;
      window.addEventListener(\\"scroll\\", listener, {
        capture: true,
        passive: true,
      });
      listener();
    }
  }

  ngOnDestroy() {
    if (this.scrollListener) {
      window.removeEventListener(\\"scroll\\", this.scrollListener);
    }
  }
}

@NgModule({
  declarations: [Image],
  imports: [CommonModule],
  exports: [Image],
  bootstrap: [SomeOtherComponent],
})
export class ImageModule {}
"
`;

exports[`Angular with Import Mapper Tests > jsx > Typescript Test > Image State 1`] = `
"import { NgModule } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

import { Component } from \\"@angular/core\\";

@Component({
  selector: \\"img-state-component, ImgStateComponent\\",
  template: \`
    <div>
      <ng-container *ngFor=\\"let item of images; let itemIndex = index\\">
        <ng-container>
          <img class=\\"custom-class\\" [attr.src]=\\"item\\" [attr.key]=\\"itemIndex\\" />
        </ng-container>
      </ng-container>
    </div>
  \`,
})
export class ImgStateComponent {
  canShow = true;
  images = [\\"http://example.com/qwik.png\\"];
}

@NgModule({
  declarations: [ImgStateComponent],
  imports: [CommonModule],
  exports: [ImgStateComponent],
  bootstrap: [SomeOtherComponent],
})
export class ImgStateComponentModule {}
"
`;

exports[`Angular with Import Mapper Tests > jsx > Typescript Test > Img 1`] = `
"import { NgModule } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

import { Component, Input } from \\"@angular/core\\";

export interface ImgProps {
  attributes?: any;
  imgSrc?: string;
  altText?: string;
  backgroundSize?: \\"cover\\" | \\"contain\\";
  backgroundPosition?:
    | \\"center\\"
    | \\"top\\"
    | \\"left\\"
    | \\"right\\"
    | \\"bottom\\"
    | \\"top left\\"
    | \\"top right\\"
    | \\"bottom left\\"
    | \\"bottom right\\";
}

import { Builder } from \\"@builder.io/sdk\\";

@Component({
  selector: \\"img-component, ImgComponent\\",
  template: \`
    <img
      [ngStyle]=\\"{
        objectFit: backgroundSize || 'cover',
        objectPosition: backgroundPosition || 'center'
      }\\"
      [attr.key]=\\"Builder.isEditing && imgSrc || 'default-key'\\"
      [attr.alt]=\\"altText\\"
      [attr.src]=\\"imgSrc\\"
    />
  \`,
})
export class ImgComponent {
  @Input() backgroundSize: ImgProps[\\"backgroundSize\\"];
  @Input() backgroundPosition: ImgProps[\\"backgroundPosition\\"];
  @Input() attributes: ImgProps[\\"attributes\\"];
  @Input() imgSrc: ImgProps[\\"imgSrc\\"];
  @Input() altText: ImgProps[\\"altText\\"];
}

@NgModule({
  declarations: [ImgComponent],
  imports: [CommonModule],
  exports: [ImgComponent],
  bootstrap: [SomeOtherComponent],
})
export class ImgComponentModule {}
"
`;

exports[`Angular with Import Mapper Tests > jsx > Typescript Test > Input 1`] = `
"import { NgModule } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

import { Component, Input } from \\"@angular/core\\";

export interface FormInputProps {
  type?: string;
  attributes?: any;
  name?: string;
  value?: string;
  placeholder?: string;
  defaultValue?: string;
  required?: boolean;
}

import { Builder } from \\"@builder.io/sdk\\";

@Component({
  selector: \\"form-input-component, FormInputComponent\\",
  template: \`
    <input
      [attr.key]=\\"Builder.isEditing && defaultValue ? defaultValue : 'default-key'\\"
      [attr.placeholder]=\\"placeholder\\"
      [attr.type]=\\"type\\"
      [attr.name]=\\"name\\"
      [attr.value]=\\"value\\"
      [attr.defaultValue]=\\"defaultValue\\"
      [attr.required]=\\"required\\"
    />
  \`,
})
export class FormInputComponent {
  @Input() attributes: FormInputProps[\\"attributes\\"];
  @Input() defaultValue: FormInputProps[\\"defaultValue\\"];
  @Input() placeholder: FormInputProps[\\"placeholder\\"];
  @Input() type: FormInputProps[\\"type\\"];
  @Input() name: FormInputProps[\\"name\\"];
  @Input() value: FormInputProps[\\"value\\"];
  @Input() required: FormInputProps[\\"required\\"];
}

@NgModule({
  declarations: [FormInputComponent],
  imports: [CommonModule],
  exports: [FormInputComponent],
  bootstrap: [SomeOtherComponent],
})
export class FormInputComponentModule {}
"
`;

exports[`Angular with Import Mapper Tests > jsx > Typescript Test > RawText 1`] = `
"import { NgModule } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

import { Component, Input } from \\"@angular/core\\";

export interface RawTextProps {
  attributes?: any;
  text?: string; // builderBlock?: any;
}

@Component({
  selector: \\"raw-text, RawText\\",
  template: \`
    <span
      [class]=\\"attributes?.class || attributes?.className\\"
      [innerHTML]=\\"text || ''\\"
    ></span>
  \`,
})
export class RawText {
  @Input() attributes: RawTextProps[\\"attributes\\"];
  @Input() text: RawTextProps[\\"text\\"];
}

@NgModule({
  declarations: [RawText],
  imports: [CommonModule],
  exports: [RawText],
  bootstrap: [SomeOtherComponent],
})
export class RawTextModule {}
"
`;

exports[`Angular with Import Mapper Tests > jsx > Typescript Test > Section 1`] = `
"import { NgModule } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

import { Component, Input } from \\"@angular/core\\";

export interface SectionProps {
  maxWidth?: number;
  attributes?: any;
  children?: any;
}

@Component({
  selector: \\"section-component, SectionComponent\\",
  template: \`
    <section
      [ngStyle]=\\"maxWidth && typeof maxWidth === 'number' ? {
        maxWidth: maxWidth
      } : undefined\\"
    >
      <ng-content></ng-content>
    </section>
  \`,
})
export class SectionComponent {
  @Input() attributes: SectionProps[\\"attributes\\"];
  @Input() maxWidth: SectionProps[\\"maxWidth\\"];
}

@NgModule({
  declarations: [SectionComponent],
  imports: [CommonModule],
  exports: [SectionComponent],
  bootstrap: [SomeOtherComponent],
})
export class SectionComponentModule {}
"
`;

exports[`Angular with Import Mapper Tests > jsx > Typescript Test > Section 2`] = `
"import { NgModule } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

import { Component, Input } from \\"@angular/core\\";

export interface SectionProps {
  maxWidth?: number;
  attributes?: any;
  children?: any;
}

@Component({
  selector: \\"section-state-component, SectionStateComponent\\",
  template: \`
    <ng-container *ngIf=\\"max\\">
      <ng-container *ngFor=\\"let item of items\\">
        <section
          [ngStyle]=\\"{
         maxWidth: item + max
       }\\"
        >
          <ng-content></ng-content>
        </section>
      </ng-container>
    </ng-container>
  \`,
})
export class SectionStateComponent {
  @Input() attributes: SectionProps[\\"attributes\\"];

  max = 42;
  items = [42];
}

@NgModule({
  declarations: [SectionStateComponent],
  imports: [CommonModule],
  exports: [SectionStateComponent],
  bootstrap: [SomeOtherComponent],
})
export class SectionStateComponentModule {}
"
`;

exports[`Angular with Import Mapper Tests > jsx > Typescript Test > Select 1`] = `
"import { NgModule } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

import { Component, Input } from \\"@angular/core\\";

export interface FormSelectProps {
  options?: {
    name?: string;
    value: string;
  }[];
  attributes?: any;
  name?: string;
  value?: string;
  defaultValue?: string;
}

import { Builder } from \\"@builder.io/sdk\\";

@Component({
  selector: \\"select-component, SelectComponent\\",
  template: \`
    <select
      [attr.value]=\\"value\\"
      [attr.key]=\\"Builder.isEditing && defaultValue ? defaultValue : 'default-key'\\"
      [attr.defaultValue]=\\"defaultValue\\"
      [attr.name]=\\"name\\"
    >
      <ng-container *ngFor=\\"let option of options; let index = index\\">
        <option [attr.value]=\\"option.value\\" [attr.data-index]=\\"index\\">
          {{option.name || option.value}}
        </option>
      </ng-container>
    </select>
  \`,
})
export class SelectComponent {
  @Input() attributes: FormSelectProps[\\"attributes\\"];
  @Input() value: FormSelectProps[\\"value\\"];
  @Input() defaultValue: FormSelectProps[\\"defaultValue\\"];
  @Input() name: FormSelectProps[\\"name\\"];
  @Input() options: FormSelectProps[\\"options\\"];
}

@NgModule({
  declarations: [SelectComponent],
  imports: [CommonModule],
  exports: [SelectComponent],
  bootstrap: [SomeOtherComponent],
})
export class SelectComponentModule {}
"
`;

exports[`Angular with Import Mapper Tests > jsx > Typescript Test > SlotDefault 1`] = `
"import { NgModule } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

import { Component } from \\"@angular/core\\";

type Props = {
  [key: string]: string;
};

@Component({
  selector: \\"slot-code, SlotCode\\",
  template: \`
    <div>
      <ng-content>
        <div class=\\"default-slot\\">Default content</div>
      </ng-content>
    </div>
  \`,
})
export class SlotCode {}

@NgModule({
  declarations: [SlotCode],
  imports: [CommonModule],
  exports: [SlotCode],
  bootstrap: [SomeOtherComponent],
})
export class SlotCodeModule {}
"
`;

exports[`Angular with Import Mapper Tests > jsx > Typescript Test > SlotHtml 1`] = `
"import { NgModule } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

import { Component } from \\"@angular/core\\";

type Props = {
  [key: string]: string;
};

import ContentSlotCodeModule from \\"./content-slot-jsx.raw/angular\\";

@Component({
  selector: \\"slot-code, SlotCode\\",
  template: \`
    <div>
      <content-slot-code>
        <ng-content><div>Hello</div></ng-content>
      </content-slot-code>
    </div>
  \`,
})
export class SlotCode {}

@NgModule({
  declarations: [SlotCode],
  imports: [CommonModule, ContentSlotCodeModule],
  exports: [SlotCode],
  bootstrap: [SomeOtherComponent],
})
export class SlotCodeModule {}
"
`;

exports[`Angular with Import Mapper Tests > jsx > Typescript Test > SlotJsx 1`] = `
"import { NgModule } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

import { Component } from \\"@angular/core\\";

type Props = {
  [key: string]: string;
};

import ContentSlotCodeModule from \\"./content-slot-jsx.raw/angular\\";

@Component({
  selector: \\"slot-code, SlotCode\\",
  template: \`
    <div>
      <content-slot-code><div testing>Hello</div></content-slot-code>
    </div>
  \`,
})
export class SlotCode {}

@NgModule({
  declarations: [SlotCode],
  imports: [CommonModule, ContentSlotCodeModule],
  exports: [SlotCode],
  bootstrap: [SomeOtherComponent],
})
export class SlotCodeModule {}
"
`;

exports[`Angular with Import Mapper Tests > jsx > Typescript Test > SlotNamed 1`] = `
"import { NgModule } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

import { Component } from \\"@angular/core\\";

type Props = {
  [key: string]: string;
};

@Component({
  selector: \\"slot-code, SlotCode\\",
  template: \`
    <div>
      <ng-content select=\\"[top]\\"></ng-content>

      <ng-content select=\\"[left]\\">Default left</ng-content>

      <ng-content>Default Child</ng-content>
    </div>
  \`,
})
export class SlotCode {}

@NgModule({
  declarations: [SlotCode],
  imports: [CommonModule],
  exports: [SlotCode],
  bootstrap: [SomeOtherComponent],
})
export class SlotCodeModule {}
"
`;

exports[`Angular with Import Mapper Tests > jsx > Typescript Test > Stamped.io 1`] = `
"import { NgModule } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

import { Component, Input } from \\"@angular/core\\";

type SmileReviewsProps = {
  productId: string;
  apiKey: string;
};

import { kebabCase } from \\"lodash\\";
import { snakeCase } from \\"lodash\\";

@Component({
  selector: \\"smile-reviews, SmileReviews\\",
  template: \`
    <div [attr.data-user]=\\"name\\">
      <button (click)=\\"showReviewPrompt = true\\">Write a review</button>

      <ng-container *ngIf=\\"showReviewPrompt || 'asdf'\\">
        <input placeholder=\\"Email\\" />

        <input placeholder=\\"Title\\" class=\\"input\\" />

        <textarea
          placeholder=\\"How was your experience?\\"
          class=\\"textarea\\"
        ></textarea>

        <button
          class=\\"button\\"
          (click)=\\"
         $event.preventDefault();
         showReviewPrompt = false;
       \\"
        >
          Submit
        </button>
      </ng-container>

      <ng-container *ngFor=\\"let review of reviews; let index = index\\">
        <div class=\\"review\\" [attr.key]=\\"review.id\\">
          <img class=\\"img\\" [attr.src]=\\"review.avatar\\" />

          <div [class]=\\"showReviewPrompt ? 'bg-primary' : 'bg-secondary'\\">
            <div>N: {{index}}</div>

            <div>{{review.author}}</div>

            <div>{{review.reviewMessage}}</div>
          </div>
        </div>
      </ng-container>
    </div>
  \`,
  styles: [
    \`
      .input {
        display: block;
      }
      .textarea {
        display: block;
      }
      .button {
        display: block;
      }
      .review {
        margin: 10px;
        padding: 10px;
        background: white;
        display: flex;
        border-radius: 5px;
        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
      }
      .img {
        height: 30px;
        width: 30px;
        margin-right: 10px;
      }
    \`,
  ],
})
export class SmileReviews {
  @Input() apiKey: SmileReviewsProps[\\"apiKey\\"];
  @Input() productId: SmileReviewsProps[\\"productId\\"];

  reviews = [];
  name = \\"test\\";
  showReviewPrompt = false;
  kebabCaseValue() {
    return kebabCase(\\"testThat\\");
  }
  snakeCaseValue() {
    return snakeCase(\\"testThis\\");
  }

  ngOnInit() {
    fetch(
      \`https://stamped.io/api/widget/reviews?storeUrl=builder-io.myshopify.com&apiKey=\${
        this.apiKey || \\"pubkey-8bbDq7W6w4sB3OWeM1HUy2s47702hM\\"
      }&productId=\${this.productId || \\"2410511106127\\"}\`
    )
      .then((res) => res.json())
      .then((data) => {
        this.reviews = data.data;
      });
  }
}

@NgModule({
  declarations: [SmileReviews],
  imports: [CommonModule],
  exports: [SmileReviews],
  bootstrap: [SomeOtherComponent],
})
export class SmileReviewsModule {}
"
`;

exports[`Angular with Import Mapper Tests > jsx > Typescript Test > Submit 1`] = `
"import { NgModule } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

import { Component, Input } from \\"@angular/core\\";

export interface ButtonProps {
  attributes?: any;
  text?: string;
}

@Component({
  selector: \\"submit-button, SubmitButton\\",
  template: \`
    <button type=\\"submit\\">{{text}}</button>
  \`,
})
export class SubmitButton {
  @Input() attributes: ButtonProps[\\"attributes\\"];
  @Input() text: ButtonProps[\\"text\\"];
}

@NgModule({
  declarations: [SubmitButton],
  imports: [CommonModule],
  exports: [SubmitButton],
  bootstrap: [SomeOtherComponent],
})
export class SubmitButtonModule {}
"
`;

exports[`Angular with Import Mapper Tests > jsx > Typescript Test > Text 1`] = `
"import { NgModule } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

import { Component, Input } from \\"@angular/core\\";

export interface TextProps {
  attributes?: any;
  rtlMode: boolean;
  text?: string;
  content?: string;
  builderBlock?: any;
}

import { Builder } from \\"@builder.io/sdk\\";

@Component({
  selector: \\"text, Text\\",
  template: \`
    <div
      [attr.contentEditable]=\\"allowEditingText || undefined\\"
      [attr.data-name]=\\"{
        test: name || 'any name'
      }\\"
      [innerHTML]=\\"text || content || name || '<p class=&quot;text-lg&quot;>my name</p>'\\"
    ></div>
  \`,
})
export class Text {
  @Input() text: TextProps[\\"text\\"];
  @Input() content: TextProps[\\"content\\"];

  name = \\"Decadef20\\";
}

@NgModule({
  declarations: [Text],
  imports: [CommonModule],
  exports: [Text],
  bootstrap: [SomeOtherComponent],
})
export class TextModule {}
"
`;

exports[`Angular with Import Mapper Tests > jsx > Typescript Test > Textarea 1`] = `
"import { NgModule } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

import { Component, Input } from \\"@angular/core\\";

export interface TextareaProps {
  attributes?: any;
  name?: string;
  value?: string;
  defaultValue?: string;
  placeholder?: string;
}

@Component({
  selector: \\"textarea, Textarea\\",
  template: \`
    <textarea
      [attr.placeholder]=\\"placeholder\\"
      [attr.name]=\\"name\\"
      [attr.value]=\\"value\\"
      [attr.defaultValue]=\\"defaultValue\\"
    ></textarea>
  \`,
})
export class Textarea {
  @Input() attributes: TextareaProps[\\"attributes\\"];
  @Input() placeholder: TextareaProps[\\"placeholder\\"];
  @Input() name: TextareaProps[\\"name\\"];
  @Input() value: TextareaProps[\\"value\\"];
  @Input() defaultValue: TextareaProps[\\"defaultValue\\"];
}

@NgModule({
  declarations: [Textarea],
  imports: [CommonModule],
  exports: [Textarea],
  bootstrap: [SomeOtherComponent],
})
export class TextareaModule {}
"
`;

exports[`Angular with Import Mapper Tests > jsx > Typescript Test > Video 1`] = `
"import { NgModule } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

import { Component, Input } from \\"@angular/core\\";

export interface VideoProps {
  attributes?: any;
  video?: string;
  autoPlay?: boolean;
  controls?: boolean;
  muted?: boolean;
  loop?: boolean;
  playsInline?: boolean;
  aspectRatio?: number;
  width?: number;
  height?: number;
  fit?: \\"contain\\" | \\"cover\\" | \\"fill\\";
  position?:
    | \\"center\\"
    | \\"top\\"
    | \\"left\\"
    | \\"right\\"
    | \\"bottom\\"
    | \\"top left\\"
    | \\"top right\\"
    | \\"bottom left\\"
    | \\"bottom right\\";
  posterImage?: string;
  lazyLoad?: boolean;
}

@Component({
  selector: \\"video, Video\\",
  template: \`
    <video
      preload=\\"none\\"
      [ngStyle]=\\"{
        width: '100%',
        height: '100%',
        ...attributes?.style,
        objectFit: fit,
        objectPosition: position,
        // Hack to get object fit to work as expected and
        // not have the video overflow
        borderRadius: 1
      }\\"
      [attr.key]=\\"video || 'no-src'\\"
      [attr.poster]=\\"posterImage\\"
      [attr.autoplay]=\\"autoPlay\\"
      [attr.muted]=\\"muted\\"
      [attr.controls]=\\"controls\\"
      [attr.loop]=\\"loop\\"
    ></video>
  \`,
})
export class Video {
  @Input() attributes: VideoProps[\\"attributes\\"];
  @Input() fit: VideoProps[\\"fit\\"];
  @Input() position: VideoProps[\\"position\\"];
  @Input() video: VideoProps[\\"video\\"];
  @Input() posterImage: VideoProps[\\"posterImage\\"];
  @Input() autoPlay: VideoProps[\\"autoPlay\\"];
  @Input() muted: VideoProps[\\"muted\\"];
  @Input() controls: VideoProps[\\"controls\\"];
  @Input() loop: VideoProps[\\"loop\\"];
}

@NgModule({
  declarations: [Video],
  imports: [CommonModule],
  exports: [Video],
  bootstrap: [SomeOtherComponent],
})
export class VideoModule {}
"
`;

exports[`Angular with Import Mapper Tests > jsx > Typescript Test > arrowFunctionInUseStore 1`] = `
"import { NgModule } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

import { Component } from \\"@angular/core\\";

@Component({
  selector: \\"my-component, MyComponent\\",
  template: \`
    <div>Hello {{name}}</div>
  \`,
})
export class MyComponent {
  name = \\"steve\\";
  setName(value) {
    this.name = value;
  }
  updateNameWithArrowFn(value) {
    this.name = value;
  }
}

@NgModule({
  declarations: [MyComponent],
  imports: [CommonModule],
  exports: [MyComponent],
  bootstrap: [SomeOtherComponent],
})
export class MyComponentModule {}
"
`;

exports[`Angular with Import Mapper Tests > jsx > Typescript Test > basicForwardRef 1`] = `
"import { NgModule } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

import { Component } from \\"@angular/core\\";

export interface Props {
  showInput: boolean;
  inputRef: HTMLInputElement;
}

@Component({
  selector: \\"my-basic-forward-ref-component, MyBasicForwardRefComponent\\",
  template: \`
    <div>
      <input
        class=\\"input\\"
        [attr.value]=\\"name\\"
        (input)=\\"name = $event.target.value\\"
      />
    </div>
  \`,
  styles: [
    \`
      .input {
        color: red;
      }
    \`,
  ],
})
export class MyBasicForwardRefComponent {
  name = \\"PatrickJS\\";
}

@NgModule({
  declarations: [MyBasicForwardRefComponent],
  imports: [CommonModule],
  exports: [MyBasicForwardRefComponent],
  bootstrap: [SomeOtherComponent],
})
export class MyBasicForwardRefComponentModule {}
"
`;

exports[`Angular with Import Mapper Tests > jsx > Typescript Test > basicForwardRefMetadata 1`] = `
"import { NgModule } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

import { Component } from \\"@angular/core\\";

export interface Props {
  showInput: boolean;
  inputRef: HTMLInputElement;
}

@Component({
  selector: \\"my-basic-forward-ref-component, MyBasicForwardRefComponent\\",
  template: \`
    <div>
      <input
        class=\\"input\\"
        [attr.value]=\\"name\\"
        (input)=\\"name = $event.target.value\\"
      />
    </div>
  \`,
  styles: [
    \`
      .input {
        color: red;
      }
    \`,
  ],
})
export class MyBasicForwardRefComponent {
  name = \\"PatrickJS\\";
}

@NgModule({
  declarations: [MyBasicForwardRefComponent],
  imports: [CommonModule],
  exports: [MyBasicForwardRefComponent],
  bootstrap: [SomeOtherComponent],
})
export class MyBasicForwardRefComponentModule {}
"
`;

exports[`Angular with Import Mapper Tests > jsx > Typescript Test > basicOnUpdateReturn 1`] = `
"import { NgModule } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

import { Component } from \\"@angular/core\\";

@Component({
  selector:
    \\"my-basic-on-update-return-component, MyBasicOnUpdateReturnComponent\\",
  template: \`
    <div>Hello! {{name}}</div>
  \`,
})
export class MyBasicOnUpdateReturnComponent {
  name = \\"PatrickJS\\";

  ngAfterContentChecked() {
    const controller = new AbortController();
    const signal = controller.signal;
    fetch(\\"https://patrickjs.com/api/resource.json\\", {
      signal,
    })
      .then((response) => response.json())
      .then((data) => {
        this.name = data.name;
      });
    return () => {
      if (!signal.aborted) {
        controller.abort();
      }
    };
  }
}

@NgModule({
  declarations: [MyBasicOnUpdateReturnComponent],
  imports: [CommonModule],
  exports: [MyBasicOnUpdateReturnComponent],
  bootstrap: [SomeOtherComponent],
})
export class MyBasicOnUpdateReturnComponentModule {}
"
`;

exports[`Angular with Import Mapper Tests > jsx > Typescript Test > class + ClassName + css 1`] = `
"import { NgModule } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

import { Component } from \\"@angular/core\\";

@Component({
  selector: \\"my-basic-component, MyBasicComponent\\",
  template: \`
    <div class=\\"test2 test div\\">
      Hello! I can run in React, Vue, Solid, or Liquid!
    </div>
  \`,
  styles: [
    \`
      .div {
        padding: 10px;
      }
    \`,
  ],
})
export class MyBasicComponent {}

@NgModule({
  declarations: [MyBasicComponent],
  imports: [CommonModule],
  exports: [MyBasicComponent],
  bootstrap: [SomeOtherComponent],
})
export class MyBasicComponentModule {}
"
`;

exports[`Angular with Import Mapper Tests > jsx > Typescript Test > class + css 1`] = `
"import { NgModule } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

import { Component } from \\"@angular/core\\";

@Component({
  selector: \\"my-basic-component, MyBasicComponent\\",
  template: \`
    <div class=\\"test div\\">
      Hello! I can run in React, Vue, Solid, or Liquid!
    </div>
  \`,
  styles: [
    \`
      .div {
        padding: 10px;
      }
    \`,
  ],
})
export class MyBasicComponent {}

@NgModule({
  declarations: [MyBasicComponent],
  imports: [CommonModule],
  exports: [MyBasicComponent],
  bootstrap: [SomeOtherComponent],
})
export class MyBasicComponentModule {}
"
`;

exports[`Angular with Import Mapper Tests > jsx > Typescript Test > className + css 1`] = `
"import { NgModule } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

import { Component } from \\"@angular/core\\";

@Component({
  selector: \\"my-basic-component, MyBasicComponent\\",
  template: \`
    <div class=\\"test div\\">
      Hello! I can run in React, Vue, Solid, or Liquid!
    </div>
  \`,
  styles: [
    \`
      .div {
        padding: 10px;
      }
    \`,
  ],
})
export class MyBasicComponent {}

@NgModule({
  declarations: [MyBasicComponent],
  imports: [CommonModule],
  exports: [MyBasicComponent],
  bootstrap: [SomeOtherComponent],
})
export class MyBasicComponentModule {}
"
`;

exports[`Angular with Import Mapper Tests > jsx > Typescript Test > className 1`] = `
"import { NgModule } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

import { Component } from \\"@angular/core\\";

type Props = {
  [key: string]: string | JSX.Element;
  slotTesting: JSX.Element;
};

@Component({
  selector: \\"class-name-code, ClassNameCode\\",
  template: \`
    <div>
      <div class=\\"no binding\\">Without Binding</div>

      <div [class]=\\"bindings\\">With binding</div>
    </div>
  \`,
})
export class ClassNameCode {
  bindings = \\"a binding\\";
}

@NgModule({
  declarations: [ClassNameCode],
  imports: [CommonModule],
  exports: [ClassNameCode],
  bootstrap: [SomeOtherComponent],
})
export class ClassNameCodeModule {}
"
`;

exports[`Angular with Import Mapper Tests > jsx > Typescript Test > classState 1`] = `
"import { NgModule } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

import { Component } from \\"@angular/core\\";

@Component({
  selector: \\"my-basic-component, MyBasicComponent\\",
  template: \`
    <div [class]=\\"classState + ' div'\\" [ngStyle]=\\"styleState\\">
      Hello! I can run in React, Vue, Solid, or Liquid!
    </div>
  \`,
  styles: [
    \`
      .div {
        padding: 10px;
      }
    \`,
  ],
})
export class MyBasicComponent {
  classState = \\"testClassName\\";
  styleState = {
    color: \\"red\\",
  };
}

@NgModule({
  declarations: [MyBasicComponent],
  imports: [CommonModule],
  exports: [MyBasicComponent],
  bootstrap: [SomeOtherComponent],
})
export class MyBasicComponentModule {}
"
`;

exports[`Angular with Import Mapper Tests > jsx > Typescript Test > componentWithContext 1`] = `
"import { NgModule } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

import { Component, Input } from \\"@angular/core\\";

export interface ComponentWithContextProps {
  content: string;
}

import Context1 from \\"@dummy/1\\";
import Context2 from \\"@dummy/2\\";

@Component({
  selector: \\"component-with-context, ComponentWithContext\\",
  template: \`
    <ng-container>
      <ng-container>{{foo.value}}</ng-container>
    </ng-container>
  \`,
})
export class ComponentWithContext {
  @Input() content: ComponentWithContextProps[\\"content\\"];

  constructor(public foo: Context1) {}
}

@NgModule({
  declarations: [ComponentWithContext],
  imports: [CommonModule],
  exports: [ComponentWithContext],
  bootstrap: [SomeOtherComponent],
})
export class ComponentWithContextModule {}
"
`;

exports[`Angular with Import Mapper Tests > jsx > Typescript Test > contentState 1`] = `
"import { NgModule } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

import { Component, Input } from \\"@angular/core\\";

import BuilderContext from \\"@dummy/context.lite\\";

@Component({
  selector: \\"render-content, RenderContent\\",
  template: \`
    <div>setting context</div>
  \`,
})
export class RenderContent {
  @Input() content: any;
  @Input() customComponents: any;
}

@NgModule({
  declarations: [RenderContent],
  imports: [CommonModule],
  exports: [RenderContent],
  bootstrap: [SomeOtherComponent],
})
export class RenderContentModule {}
"
`;

exports[`Angular with Import Mapper Tests > jsx > Typescript Test > defaultProps 1`] = `
"import { NgModule } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

import { Output, EventEmitter, Component, Input } from \\"@angular/core\\";

export interface ButtonProps {
  attributes?: any;
  text?: string;
  link?: string;
  openLinkInNewTab?: boolean;
  onClick?: () => void;
}
const defaultProps = {
  text: \\"default text\\",
  link: \\"https://builder.io/\\",
  openLinkInNewTab: false,
  onClick: () => {
    console.log(\\"hi\\");
  },
};

@Component({
  selector: \\"button, Button\\",
  template: \`
    <div>
      <ng-container *ngIf=\\"link\\">
        <a
          [attr.href]=\\"link\\"
          [attr.target]=\\"openLinkInNewTab ? '_blank' : undefined\\"
        >
          {{text}}
        </a>
      </ng-container>

      <ng-container *ngIf=\\"!link\\">
        <button type=\\"button\\" (click)=\\"this.onClick.emit($event)\\">
          {{text}}
        </button>
      </ng-container>
    </div>
  \`,
})
export class Button {
  @Input() link: ButtonProps[\\"link\\"] = defaultProps[\\"link\\"];
  @Input() attributes: ButtonProps[\\"attributes\\"];
  @Input() openLinkInNewTab: ButtonProps[\\"openLinkInNewTab\\"] =
    defaultProps[\\"openLinkInNewTab\\"];
  @Input() text: ButtonProps[\\"text\\"] = defaultProps[\\"text\\"];

  @Output() onClick = new EventEmitter();
}

@NgModule({
  declarations: [Button],
  imports: [CommonModule],
  exports: [Button],
  bootstrap: [SomeOtherComponent],
})
export class ButtonModule {}
"
`;

exports[`Angular with Import Mapper Tests > jsx > Typescript Test > defaultPropsOutsideComponent 1`] = `
"import { NgModule } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

import { Output, EventEmitter, Component, Input } from \\"@angular/core\\";

export interface ButtonProps {
  attributes?: any;
  text?: string;
  link?: string;
  openLinkInNewTab?: boolean;
  onClick: () => void;
}
const defaultProps = {
  text: \\"default text\\",
  link: \\"https://builder.io/\\",
  openLinkInNewTab: false,
  onClick: () => {},
};

@Component({
  selector: \\"button, Button\\",
  template: \`
    <div>
      <ng-container *ngIf=\\"link\\">
        <a
          [attr.href]=\\"link\\"
          [attr.target]=\\"openLinkInNewTab ? '_blank' : undefined\\"
        >
          {{text}}
        </a>
      </ng-container>

      <ng-container *ngIf=\\"!link\\">
        <button type=\\"button\\" (click)=\\"this.onClick.emit($event)\\">
          {{text}}
        </button>
      </ng-container>
    </div>
  \`,
})
export class Button {
  @Input() link: ButtonProps[\\"link\\"] = defaultProps[\\"link\\"];
  @Input() attributes: ButtonProps[\\"attributes\\"];
  @Input() openLinkInNewTab: ButtonProps[\\"openLinkInNewTab\\"] =
    defaultProps[\\"openLinkInNewTab\\"];
  @Input() text: ButtonProps[\\"text\\"] = defaultProps[\\"text\\"];

  @Output() onClick = new EventEmitter();
}

@NgModule({
  declarations: [Button],
  imports: [CommonModule],
  exports: [Button],
  bootstrap: [SomeOtherComponent],
})
export class ButtonModule {}
"
`;

exports[`Angular with Import Mapper Tests > jsx > Typescript Test > defaultValsWithTypes 1`] = `
"import { NgModule } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

import { Component, Input } from \\"@angular/core\\";

type Props = {
  name: string;
};

const DEFAULT_VALUES: Props = {
  name: \\"Sami\\",
};

@Component({
  selector: \\"component-with-types, ComponentWithTypes\\",
  template: \`
    <div>Hello {{name || DEFAULT_VALUES.name}}</div>
  \`,
})
export class ComponentWithTypes {
  DEFAULT_VALUES = DEFAULT_VALUES;

  @Input() name: Props[\\"name\\"];
}

@NgModule({
  declarations: [ComponentWithTypes],
  imports: [CommonModule],
  exports: [ComponentWithTypes],
  bootstrap: [SomeOtherComponent],
})
export class ComponentWithTypesModule {}
"
`;

exports[`Angular with Import Mapper Tests > jsx > Typescript Test > expressionState 1`] = `
"import { NgModule } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

import { Component, Input } from \\"@angular/core\\";

@Component({
  selector: \\"my-component, MyComponent\\",
  template: \`
    <div>{{refToUse}}</div>
  \`,
})
export class MyComponent {
  @Input() componentRef: any;

  refToUse = !(this.componentRef instanceof Function)
    ? this.componentRef
    : null;
}

@NgModule({
  declarations: [MyComponent],
  imports: [CommonModule],
  exports: [MyComponent],
  bootstrap: [SomeOtherComponent],
})
export class MyComponentModule {}
"
`;

exports[`Angular with Import Mapper Tests > jsx > Typescript Test > import types 1`] = `
"import { NgModule } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

import { Component, Input } from \\"@angular/core\\";

type RenderContentProps = {
  options?: GetContentOptions;
  content: BuilderContent;
  renderContentProps: RenderBlockProps;
};

import RenderBlockModule from \\"./builder-render-block.raw/angular\\";

@Component({
  selector: \\"render-content, RenderContent\\",
  template: \`
    <render-block></render-block>
  \`,
})
export class RenderContent {
  @Input() renderContentProps: RenderContentProps[\\"renderContentProps\\"];

  getRenderContentProps(block, index) {
    return {
      block: block,
      index: index,
    };
  }
}

@NgModule({
  declarations: [RenderContent],
  imports: [CommonModule, RenderBlockModule],
  exports: [RenderContent],
  bootstrap: [SomeOtherComponent],
})
export class RenderContentModule {}
"
`;

exports[`Angular with Import Mapper Tests > jsx > Typescript Test > importRaw 1`] = `
"import { NgModule } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

import { Component } from \\"@angular/core\\";

@Component({
  selector: \\"my-import-component, MyImportComponent\\",
  template: \`
    <div>Testing which imports get excluded!</div>
  \`,
})
export class MyImportComponent {}

@NgModule({
  declarations: [MyImportComponent],
  imports: [CommonModule],
  exports: [MyImportComponent],
  bootstrap: [SomeOtherComponent],
})
export class MyImportComponentModule {}
"
`;

exports[`Angular with Import Mapper Tests > jsx > Typescript Test > multipleOnUpdate 1`] = `
"import { NgModule } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

import { Component } from \\"@angular/core\\";

@Component({
  selector: \\"multiple-on-update, MultipleOnUpdate\\",
  template: \`
    <div></div>
  \`,
})
export class MultipleOnUpdate {
  ngAfterContentChecked() {
    console.log(\\"Runs on every update/rerender\\");
    console.log(\\"Runs on every update/rerender as well\\");
  }
}

@NgModule({
  declarations: [MultipleOnUpdate],
  imports: [CommonModule],
  exports: [MultipleOnUpdate],
  bootstrap: [SomeOtherComponent],
})
export class MultipleOnUpdateModule {}
"
`;

exports[`Angular with Import Mapper Tests > jsx > Typescript Test > multipleOnUpdateWithDeps 1`] = `
"import { NgModule } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

import { Component } from \\"@angular/core\\";

@Component({
  selector: \\"multiple-on-update-with-deps, MultipleOnUpdateWithDeps\\",
  template: \`
    <div></div>
  \`,
})
export class MultipleOnUpdateWithDeps {
  a = \\"a\\";
  b = \\"b\\";
  c = \\"c\\";
  d = \\"d\\";

  ngAfterContentChecked() {
    console.log(\\"Runs when this.a or this.b changes\\", this.a, this.b);

    if (this.a === \\"a\\") {
      this.a = \\"b\\";
    }
    console.log(\\"Runs when this.c or this.d changes\\", this.c, this.d);

    if (this.a === \\"a\\") {
      this.a = \\"b\\";
    }
  }
}

@NgModule({
  declarations: [MultipleOnUpdateWithDeps],
  imports: [CommonModule],
  exports: [MultipleOnUpdateWithDeps],
  bootstrap: [SomeOtherComponent],
})
export class MultipleOnUpdateWithDepsModule {}
"
`;

exports[`Angular with Import Mapper Tests > jsx > Typescript Test > multipleSpreads 1`] = `
"import { NgModule } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

import { Component } from \\"@angular/core\\";

@Component({
  selector: \\"my-basic-component, MyBasicComponent\\",
  template: \`
    <input />
  \`,
})
export class MyBasicComponent {
  attrs = {
    hello: \\"world\\",
  };
}

@NgModule({
  declarations: [MyBasicComponent],
  imports: [CommonModule],
  exports: [MyBasicComponent],
  bootstrap: [SomeOtherComponent],
})
export class MyBasicComponentModule {}
"
`;

exports[`Angular with Import Mapper Tests > jsx > Typescript Test > nestedShow 1`] = `
"import { NgModule } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

import { Component, Input } from \\"@angular/core\\";

interface Props {
  conditionA: boolean;
  conditionB: boolean;
}

@Component({
  selector: \\"nested-show, NestedShow\\",
  template: \`
    <ng-container *ngIf=\\"conditionA\\">
      <ng-container *ngIf=\\"!conditionB\\">
        <div>if condition A and condition B</div>
      </ng-container>
    </ng-container>
  \`,
})
export class NestedShow {
  @Input() conditionA: Props[\\"conditionA\\"];
  @Input() conditionB: Props[\\"conditionB\\"];
}

@NgModule({
  declarations: [NestedShow],
  imports: [CommonModule],
  exports: [NestedShow],
  bootstrap: [SomeOtherComponent],
})
export class NestedShowModule {}
"
`;

exports[`Angular with Import Mapper Tests > jsx > Typescript Test > nestedStyles 1`] = `
"import { NgModule } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

import { Component } from \\"@angular/core\\";

@Component({
  selector: \\"nested-styles, NestedStyles\\",
  template: \`
    <div class=\\"div\\">Hello world</div>
  \`,
  styles: [
    \`
      .div {
        display: flex;
        foo: var(--bar);
      }
      @media (max-width: env(--mobile)) {
        .div {
          display: block;
        }
      }
      .div:hover {
        display: flex;
      }
      .div .nested-selector {
        display: grid;
      }
    \`,
  ],
})
export class NestedStyles {}

@NgModule({
  declarations: [NestedStyles],
  imports: [CommonModule],
  exports: [NestedStyles],
  bootstrap: [SomeOtherComponent],
})
export class NestedStylesModule {}
"
`;

exports[`Angular with Import Mapper Tests > jsx > Typescript Test > onInit & onMount 1`] = `
"import { NgModule } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

import { Component } from \\"@angular/core\\";

@Component({
  selector: \\"on-init, OnInit\\",
  template: \`
    <div></div>
  \`,
})
export class OnInit {
  constructor() {
    console.log(\\"onInit\\");
  }

  ngOnInit() {
    console.log(\\"onMount\\");
  }
}

@NgModule({
  declarations: [OnInit],
  imports: [CommonModule],
  exports: [OnInit],
  bootstrap: [SomeOtherComponent],
})
export class OnInitModule {}
"
`;

exports[`Angular with Import Mapper Tests > jsx > Typescript Test > onInit 1`] = `
"import { NgModule } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

import { Component, Input } from \\"@angular/core\\";

type Props = {
  name: string;
};

export const defaultValues = {
  name: \\"PatrickJS\\",
};

@Component({
  selector: \\"on-init, OnInit\\",
  template: \`
    <div>Default name defined by parent {{name}}</div>
  \`,
})
export class OnInit {
  @Input() name: Props[\\"name\\"];

  name = \\"\\";

  constructor() {
    this.name = defaultValues.name || this.name;
    console.log(\\"set defaults with props\\");
  }
}

@NgModule({
  declarations: [OnInit],
  imports: [CommonModule],
  exports: [OnInit],
  bootstrap: [SomeOtherComponent],
})
export class OnInitModule {}
"
`;

exports[`Angular with Import Mapper Tests > jsx > Typescript Test > onMount 1`] = `
"import { NgModule } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

import { Component } from \\"@angular/core\\";

@Component({
  selector: \\"comp, Comp\\",
  template: \`
    <div></div>
  \`,
})
export class Comp {
  ngOnInit() {
    console.log(\\"Runs on mount\\");
  }

  ngOnDestroy() {
    console.log(\\"Runs on unMount\\");
  }
}

@NgModule({
  declarations: [Comp],
  imports: [CommonModule],
  exports: [Comp],
  bootstrap: [SomeOtherComponent],
})
export class CompModule {}
"
`;

exports[`Angular with Import Mapper Tests > jsx > Typescript Test > onUpdate 1`] = `
"import { NgModule } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

import { Component } from \\"@angular/core\\";

@Component({
  selector: \\"on-update, OnUpdate\\",
  template: \`
    <div></div>
  \`,
})
export class OnUpdate {
  ngAfterContentChecked() {
    console.log(\\"Runs on every update/rerender\\");
  }
}

@NgModule({
  declarations: [OnUpdate],
  imports: [CommonModule],
  exports: [OnUpdate],
  bootstrap: [SomeOtherComponent],
})
export class OnUpdateModule {}
"
`;

exports[`Angular with Import Mapper Tests > jsx > Typescript Test > onUpdateWithDeps 1`] = `
"import { NgModule } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

import { Component, Input } from \\"@angular/core\\";

type Props = {
  size: string;
};

@Component({
  selector: \\"on-update-with-deps, OnUpdateWithDeps\\",
  template: \`
    <div></div>
  \`,
})
export class OnUpdateWithDeps {
  @Input() size: Props[\\"size\\"];

  a = \\"a\\";
  b = \\"b\\";

  ngAfterContentChecked() {
    console.log(
      \\"Runs when this.a, this.b or size changes\\",
      this.a,
      this.b,
      this.size
    );
  }
}

@NgModule({
  declarations: [OnUpdateWithDeps],
  imports: [CommonModule],
  exports: [OnUpdateWithDeps],
  bootstrap: [SomeOtherComponent],
})
export class OnUpdateWithDepsModule {}
"
`;

exports[`Angular with Import Mapper Tests > jsx > Typescript Test > outputEventBinding 1`] = `
"import { NgModule } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

import { Component } from \\"@angular/core\\";

@Component({
  selector: \\"my-component, MyComponent\\",
  template: \`
    <div>
      <input
        [attr.value]=\\"name\\"
        (input)=\\"name = $event.target.value\\"
        (changeOrSomething)=\\"name = $event.target.value\\"
      />

      Hello! I can run in React, Vue, Solid, or Liquid!
    </div>
  \`,
})
export class MyComponent {
  name = \\"Steve\\";
}

@NgModule({
  declarations: [MyComponent],
  imports: [CommonModule],
  exports: [MyComponent],
  bootstrap: [SomeOtherComponent],
})
export class MyComponentModule {}
"
`;

exports[`Angular with Import Mapper Tests > jsx > Typescript Test > preserveExportOrLocalStatement 1`] = `
"import { NgModule } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

import { Component } from \\"@angular/core\\";

type Types = {
  s: any[];
};
interface IPost {
  len: number;
}
export interface MyBasicComponentProps {
  id: string;
}

const b = 3;
const foo = () => {};
export const a = 3;
export const bar = () => {};
export function run<T>(value: T) {}

@Component({
  selector: \\"my-basic-component, MyBasicComponent\\",
  template: \`
    <div></div>
  \`,
})
export class MyBasicComponent {}

@NgModule({
  declarations: [MyBasicComponent],
  imports: [CommonModule],
  exports: [MyBasicComponent],
  bootstrap: [SomeOtherComponent],
})
export class MyBasicComponentModule {}
"
`;

exports[`Angular with Import Mapper Tests > jsx > Typescript Test > preserveTyping 1`] = `
"import { NgModule } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

import { Component, Input } from \\"@angular/core\\";

export type A = \\"test\\";
export interface C {
  n: \\"test\\";
}
type B = \\"test2\\";
interface D {
  n: \\"test\\";
}
export interface MyBasicComponentProps {
  name: string;
  age?: number;
}

@Component({
  selector: \\"my-basic-component, MyBasicComponent\\",
  template: \`
    <div>Hello! I can run in React, Vue, Solid, or Liquid! {{name}}</div>
  \`,
})
export class MyBasicComponent {
  @Input() name: MyBasicComponentProps[\\"name\\"];
}

@NgModule({
  declarations: [MyBasicComponent],
  imports: [CommonModule],
  exports: [MyBasicComponent],
  bootstrap: [SomeOtherComponent],
})
export class MyBasicComponentModule {}
"
`;

exports[`Angular with Import Mapper Tests > jsx > Typescript Test > propsDestructure 1`] = `
"import { NgModule } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

import { Component, Input } from \\"@angular/core\\";

type Props = {
  children: any;
  type: string;
};

@Component({
  selector: \\"my-basic-component, MyBasicComponent\\",
  template: \`
    <div>
      <ng-content></ng-content>

      {{type}} Hello! I can run in React, Vue, Solid, or Liquid!
    </div>
  \`,
})
export class MyBasicComponent {
  @Input() type: Props[\\"type\\"];

  name = \\"Decadef20\\";
}

@NgModule({
  declarations: [MyBasicComponent],
  imports: [CommonModule],
  exports: [MyBasicComponent],
  bootstrap: [SomeOtherComponent],
})
export class MyBasicComponentModule {}
"
`;

exports[`Angular with Import Mapper Tests > jsx > Typescript Test > propsInterface 1`] = `
"import { NgModule } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

import { Component, Input } from \\"@angular/core\\";

interface Person {
  name: string;
  age?: number;
}

@Component({
  selector: \\"my-basic-component, MyBasicComponent\\",
  template: \`
    <div>Hello! I can run in React, Vue, Solid, or Liquid! {{name}}</div>
  \`,
})
export class MyBasicComponent {
  @Input() name: Person | never[\\"name\\"];
}

@NgModule({
  declarations: [MyBasicComponent],
  imports: [CommonModule],
  exports: [MyBasicComponent],
  bootstrap: [SomeOtherComponent],
})
export class MyBasicComponentModule {}
"
`;

exports[`Angular with Import Mapper Tests > jsx > Typescript Test > propsType 1`] = `
"import { NgModule } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

import { Component, Input } from \\"@angular/core\\";

type Person = {
  name: string;
  age?: number;
};

@Component({
  selector: \\"my-basic-component, MyBasicComponent\\",
  template: \`
    <div>Hello! I can run in React, Vue, Solid, or Liquid! {{name}}</div>
  \`,
})
export class MyBasicComponent {
  @Input() name: Person[\\"name\\"];
}

@NgModule({
  declarations: [MyBasicComponent],
  imports: [CommonModule],
  exports: [MyBasicComponent],
  bootstrap: [SomeOtherComponent],
})
export class MyBasicComponentModule {}
"
`;

exports[`Angular with Import Mapper Tests > jsx > Typescript Test > referencingFunInsideHook 1`] = `
"import { NgModule } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

import { Component } from \\"@angular/core\\";

@Component({
  selector: \\"on-update, OnUpdate\\",
  template: \`
    <div></div>
  \`,
})
export class OnUpdate {
  foo = function foo(params) {};
  bar = function bar() {};
  zoo = function zoo() {
    const params = {
      cb: this.bar,
    };
  };

  ngAfterContentChecked() {
    this.foo({
      someOption: this.bar,
    });
  }
}

@NgModule({
  declarations: [OnUpdate],
  imports: [CommonModule],
  exports: [OnUpdate],
  bootstrap: [SomeOtherComponent],
})
export class OnUpdateModule {}
"
`;

exports[`Angular with Import Mapper Tests > jsx > Typescript Test > renderContentExample 1`] = `
"import { NgModule } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

import { Component, Input } from \\"@angular/core\\";

type Props = {
  customComponents: string[];
  content: {
    blocks: any[];
    id: string;
  };
};

import {
  sendComponentsToVisualEditor,
  dispatchNewContentToVisualEditor,
  trackClick,
} from \\"@dummy/injection-js\\";
import BuilderContext from \\"@dummy/context.lite\\";
import RenderBlocksModule from \\"@dummy/RenderBlocks.lite.tsx/angular\\";

@Component({
  selector: \\"render-content, RenderContent\\",
  template: \`
    <div class=\\"div\\" (click)=\\"trackClick(content.id)\\">
      <render-blocks [blocks]=\\"content.blocks\\"></render-blocks>
    </div>
  \`,
  styles: [
    \`
      .div {
        display: flex;
        flex-direction: columns;
      }
    \`,
  ],
})
export class RenderContent {
  trackClick = trackClick;

  @Input() content: Props[\\"content\\"];
  @Input() customComponents: Props[\\"customComponents\\"];

  ngOnInit() {
    sendComponentsToVisualEditor(this.customComponents);
  }

  ngAfterContentChecked() {
    dispatchNewContentToVisualEditor(this.content);
  }
}

@NgModule({
  declarations: [RenderContent],
  imports: [CommonModule, RenderBlocksModule],
  exports: [RenderContent],
  bootstrap: [SomeOtherComponent],
})
export class RenderContentModule {}
"
`;

exports[`Angular with Import Mapper Tests > jsx > Typescript Test > rootFragmentMultiNode 1`] = `
"import { NgModule } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

import { Component, Input } from \\"@angular/core\\";

export interface ButtonProps {
  attributes?: any;
  text?: string;
  link?: string;
  openLinkInNewTab?: boolean;
}

@Component({
  selector: \\"button, Button\\",
  template: \`
    <ng-container>
      <ng-container *ngIf=\\"link\\">
        <a
          [attr.href]=\\"link\\"
          [attr.target]=\\"openLinkInNewTab ? '_blank' : undefined\\"
        >
          {{text}}
        </a>
      </ng-container>

      <ng-container *ngIf=\\"!link\\">
        <button type=\\"button\\">{{text}}</button>
      </ng-container>
    </ng-container>
  \`,
})
export class Button {
  @Input() link: ButtonProps[\\"link\\"];
  @Input() attributes: ButtonProps[\\"attributes\\"];
  @Input() openLinkInNewTab: ButtonProps[\\"openLinkInNewTab\\"];
  @Input() text: ButtonProps[\\"text\\"];
}

@NgModule({
  declarations: [Button],
  imports: [CommonModule],
  exports: [Button],
  bootstrap: [SomeOtherComponent],
})
export class ButtonModule {}
"
`;

exports[`Angular with Import Mapper Tests > jsx > Typescript Test > rootShow 1`] = `
"import { NgModule } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

import { Component, Input } from \\"@angular/core\\";

export interface RenderStylesProps {
  foo: string;
}

@Component({
  selector: \\"render-styles, RenderStyles\\",
  template: \`
    <ng-container *ngIf=\\"foo === 'bar'\\">
      <div>Bar</div>
    </ng-container>
  \`,
})
export class RenderStyles {
  @Input() foo: RenderStylesProps[\\"foo\\"];
}

@NgModule({
  declarations: [RenderStyles],
  imports: [CommonModule],
  exports: [RenderStyles],
  bootstrap: [SomeOtherComponent],
})
export class RenderStylesModule {}
"
`;

exports[`Angular with Import Mapper Tests > jsx > Typescript Test > self-referencing component 1`] = `
"import { NgModule } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

import { Component, Input } from \\"@angular/core\\";

@Component({
  selector: \\"my-component, MyComponent\\",
  template: \`
    <div>
      {{name}}

      <ng-container *ngIf=\\"name === 'Batman'\\">
        <MyComponent name=\\"Bruce Wayne\\"></MyComponent>
      </ng-container>
    </div>
  \`,
})
export class MyComponent {
  @Input() name: any;
}

@NgModule({
  declarations: [MyComponent],
  imports: [CommonModule, MyComponentModule],
  exports: [MyComponent],
  bootstrap: [SomeOtherComponent],
})
export class MyComponentModule {}
"
`;

exports[`Angular with Import Mapper Tests > jsx > Typescript Test > self-referencing component with children 1`] = `
"import { NgModule } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

import { Component, Input } from \\"@angular/core\\";

@Component({
  selector: \\"my-component, MyComponent\\",
  template: \`
    <div>
      {{name}}

      <ng-content></ng-content>

      <ng-container *ngIf=\\"name === 'Batman'\\">
        <MyComponent name=\\"Bruce\\">
          <div>Wayne</div>
        </MyComponent>
      </ng-container>
    </div>
  \`,
})
export class MyComponent {
  @Input() name: any;
}

@NgModule({
  declarations: [MyComponent],
  imports: [CommonModule, MyComponentModule],
  exports: [MyComponent],
  bootstrap: [SomeOtherComponent],
})
export class MyComponentModule {}
"
`;

exports[`Angular with Import Mapper Tests > jsx > Typescript Test > showWithFor 1`] = `
"import { NgModule } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

import { Component, Input } from \\"@angular/core\\";

interface Props {
  conditionA: boolean;
  items: string[];
}

@Component({
  selector: \\"nested-show, NestedShow\\",
  template: \`
    <ng-container *ngIf=\\"conditionA\\">
      <ng-container *ngFor=\\"let item of items; let idx = index\\">
        <div [attr.key]=\\"idx\\">{{item}}</div>
      </ng-container>
    </ng-container>
  \`,
})
export class NestedShow {
  @Input() conditionA: Props[\\"conditionA\\"];
  @Input() items: Props[\\"items\\"];
}

@NgModule({
  declarations: [NestedShow],
  imports: [CommonModule],
  exports: [NestedShow],
  bootstrap: [SomeOtherComponent],
})
export class NestedShowModule {}
"
`;

exports[`Angular with Import Mapper Tests > jsx > Typescript Test > spreadAttrs 1`] = `
"import { NgModule } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

import { Component } from \\"@angular/core\\";

@Component({
  selector: \\"my-basic-component, MyBasicComponent\\",
  template: \`
    <input />
  \`,
})
export class MyBasicComponent {}

@NgModule({
  declarations: [MyBasicComponent],
  imports: [CommonModule],
  exports: [MyBasicComponent],
  bootstrap: [SomeOtherComponent],
})
export class MyBasicComponentModule {}
"
`;

exports[`Angular with Import Mapper Tests > jsx > Typescript Test > spreadNestedProps 1`] = `
"import { NgModule } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

import { Component, Input } from \\"@angular/core\\";

@Component({
  selector: \\"my-basic-component, MyBasicComponent\\",
  template: \`
    <input />
  \`,
})
export class MyBasicComponent {
  @Input() nested: any;
}

@NgModule({
  declarations: [MyBasicComponent],
  imports: [CommonModule],
  exports: [MyBasicComponent],
  bootstrap: [SomeOtherComponent],
})
export class MyBasicComponentModule {}
"
`;

exports[`Angular with Import Mapper Tests > jsx > Typescript Test > spreadProps 1`] = `
"import { NgModule } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

import { Component } from \\"@angular/core\\";

@Component({
  selector: \\"my-basic-component, MyBasicComponent\\",
  template: \`
    <input />
  \`,
})
export class MyBasicComponent {}

@NgModule({
  declarations: [MyBasicComponent],
  imports: [CommonModule],
  exports: [MyBasicComponent],
  bootstrap: [SomeOtherComponent],
})
export class MyBasicComponentModule {}
"
`;

exports[`Angular with Import Mapper Tests > jsx > Typescript Test > subComponent 1`] = `
"import { NgModule } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

import { Component } from \\"@angular/core\\";

import FooModule from \\"./foo-sub-component.lite/angular\\";

@Component({
  selector: \\"sub-component, SubComponent\\",
  template: \`
    <foo></foo>
  \`,
})
export class SubComponent {}

@NgModule({
  declarations: [SubComponent],
  imports: [CommonModule, FooModule],
  exports: [SubComponent],
  bootstrap: [SomeOtherComponent],
})
export class SubComponentModule {}
"
`;

exports[`Angular with Import Mapper Tests > jsx > Typescript Test > typeDependency 1`] = `
"import { NgModule } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

import { Component, Input } from \\"@angular/core\\";

import type { Foo } from \\"./foo-type\\";
import type { Foo as Foo2 } from \\"./type-export\\";
export type TypeDependencyProps = {
  foo: Foo;
  foo2: Foo2;
};

@Component({
  selector: \\"type-dependency, TypeDependency\\",
  template: \`
    <div>{{foo}}</div>
  \`,
})
export class TypeDependency {
  @Input() foo: TypeDependencyProps[\\"foo\\"];
}

@NgModule({
  declarations: [TypeDependency],
  imports: [CommonModule],
  exports: [TypeDependency],
  bootstrap: [SomeOtherComponent],
})
export class TypeDependencyModule {}
"
`;

exports[`Angular with Import Mapper Tests > jsx > Typescript Test > use-style 1`] = `
"import { NgModule } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

import { Component } from \\"@angular/core\\";

@Component({
  selector: \\"my-component, MyComponent\\",
  template: \`
    <button type=\\"button\\">Button</button>
  \`,
  styles: [
    \`
      button {
        background: blue;
        color: white;
        font-size: 12px;
        outline: 1px solid black;
      }
    \`,
  ],
})
export class MyComponent {}

@NgModule({
  declarations: [MyComponent],
  imports: [CommonModule],
  exports: [MyComponent],
  bootstrap: [SomeOtherComponent],
})
export class MyComponentModule {}
"
`;

exports[`Angular with Import Mapper Tests > jsx > Typescript Test > use-style-and-css 1`] = `
"import { NgModule } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

import { Component } from \\"@angular/core\\";

@Component({
  selector: \\"my-component, MyComponent\\",
  template: \`
    <button type=\\"button\\" class=\\"button\\">Button</button>
  \`,
  styles: [
    \`
      .button {
        background: blue;
        color: white;
      }

      button {
        font-size: 12px;
        outline: 1px solid black;
      }
    \`,
  ],
})
export class MyComponent {}

@NgModule({
  declarations: [MyComponent],
  imports: [CommonModule],
  exports: [MyComponent],
  bootstrap: [SomeOtherComponent],
})
export class MyComponentModule {}
"
`;

exports[`Angular with Import Mapper Tests > jsx > Typescript Test > use-style-outside-component 1`] = `
"import { NgModule } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

import { Component } from \\"@angular/core\\";

@Component({
  selector: \\"my-component, MyComponent\\",
  template: \`
    <button type=\\"button\\">Button</button>
  \`,
  styles: [
    \`
      button {
        background: blue;
        color: white;
        font-size: 12px;
        outline: 1px solid black;
      }
    \`,
  ],
})
export class MyComponent {}

@NgModule({
  declarations: [MyComponent],
  imports: [CommonModule],
  exports: [MyComponent],
  bootstrap: [SomeOtherComponent],
})
export class MyComponentModule {}
"
`;

exports[`Angular with Import Mapper Tests > svelte > Javascript Test > basic 1`] = `
"import { NgModule } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

import { Component } from \\"@angular/core\\";

@Component({
  selector: \\"my-component, MyComponent\\",
  template: \`
    <div>
      <input (input)=\\"name = $event.target.value\\" [attr.value]=\\"name\\" />

      Hello! I can run in React, Vue, Solid, or Liquid!
    </div>
  \`,
})
export class MyComponent {
  name = \\"Steve\\";
}

@NgModule({
  declarations: [MyComponent],
  imports: [CommonModule],
  exports: [MyComponent],
  bootstrap: [SomeOtherComponent],
})
export class MyComponentModule {}
"
`;

exports[`Angular with Import Mapper Tests > svelte > Javascript Test > bindGroup 1`] = `
"import { NgModule } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

import { Component } from \\"@angular/core\\";

@Component({
  selector: \\"my-component, MyComponent\\",
  template: \`
    <div>
      <input
        type=\\"radio\\"
        value=\\"Plain\\"
        [attr.checked]=\\"tortilla === 'Plain'\\"
        (input)=\\"tortilla = $event.target.value\\"
      />
      <input
        type=\\"radio\\"
        value=\\"Whole wheat\\"
        [attr.checked]=\\"tortilla === 'Whole wheat'\\"
        (input)=\\"tortilla = $event.target.value\\"
      />
      <input
        type=\\"radio\\"
        value=\\"Spinach\\"
        [attr.checked]=\\"tortilla === 'Spinach'\\"
        (input)=\\"tortilla = $event.target.value\\"
      />
      <br />
      <br />
      <input
        type=\\"checkbox\\"
        value=\\"Rice\\"
        [attr.checked]=\\"fillings === 'Rice'\\"
        (input)=\\"fillings = $event.target.value\\"
      />
      <input
        type=\\"checkbox\\"
        value=\\"Beans\\"
        [attr.checked]=\\"fillings === 'Beans'\\"
        (input)=\\"fillings = $event.target.value\\"
      />
      <input
        type=\\"checkbox\\"
        value=\\"Cheese\\"
        [attr.checked]=\\"fillings === 'Cheese'\\"
        (input)=\\"fillings = $event.target.value\\"
      />
      <input
        type=\\"checkbox\\"
        value=\\"Guac (extra)\\"
        [attr.checked]=\\"fillings === 'Guac (extra)'\\"
        (input)=\\"fillings = $event.target.value\\"
      />
      <p>Tortilla: {{tortilla}}</p>
      <p>Fillings: {{fillings}}</p>
    </div>
  \`,
})
export class MyComponent {
  tortilla = \\"Plain\\";
  fillings = [];
}

@NgModule({
  declarations: [MyComponent],
  imports: [CommonModule],
  exports: [MyComponent],
  bootstrap: [SomeOtherComponent],
})
export class MyComponentModule {}
"
`;

exports[`Angular with Import Mapper Tests > svelte > Javascript Test > bindProperty 1`] = `
"import { NgModule } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

import { Component } from \\"@angular/core\\";

@Component({
  selector: \\"my-component, MyComponent\\",
  template: \`
    <input [attr.value]=\\"value\\" />
  \`,
})
export class MyComponent {
  value = \\"hello\\";
}

@NgModule({
  declarations: [MyComponent],
  imports: [CommonModule],
  exports: [MyComponent],
  bootstrap: [SomeOtherComponent],
})
export class MyComponentModule {}
"
`;

exports[`Angular with Import Mapper Tests > svelte > Javascript Test > classDirective 1`] = `
"import { NgModule } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

import { Component, Input } from \\"@angular/core\\";

const defaultProps = {};

@Component({
  selector: \\"my-component, MyComponent\\",
  template: \`
    <input
      [class]=\\"\\\\\`form-input \\\\\${disabled ? 'disabled' : ''} \\\\\${focus ? 'focus' : ''}\\\\\`\\"
    />
  \`,
})
export class MyComponent {
  @Input() disabled: any;

  focus = true;
}

@NgModule({
  declarations: [MyComponent],
  imports: [CommonModule],
  exports: [MyComponent],
  bootstrap: [SomeOtherComponent],
})
export class MyComponentModule {}
"
`;

exports[`Angular with Import Mapper Tests > svelte > Javascript Test > context 1`] = `
"import { NgModule } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

import { Component } from \\"@angular/core\\";

@Component({
  selector: \\"my-component, MyComponent\\",
  template: \`
    <div>{{activeTab}}</div>
  \`,
})
export class MyComponent {
  activeTab = 0;

  constructor(public disabled: \\"disabled\\") {}
}

@NgModule({
  declarations: [MyComponent],
  imports: [CommonModule],
  exports: [MyComponent],
  bootstrap: [SomeOtherComponent],
})
export class MyComponentModule {}
"
`;

exports[`Angular with Import Mapper Tests > svelte > Javascript Test > each 1`] = `
"import { NgModule } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

import { Component } from \\"@angular/core\\";

@Component({
  selector: \\"my-component, MyComponent\\",
  template: \`
    <ul>
      <ng-container *ngFor=\\"let num of numbers\\">
        <li>{{num}}</li>
      </ng-container>
    </ul>
  \`,
})
export class MyComponent {
  numbers = [\\"one\\", \\"two\\", \\"three\\"];
}

@NgModule({
  declarations: [MyComponent],
  imports: [CommonModule],
  exports: [MyComponent],
  bootstrap: [SomeOtherComponent],
})
export class MyComponentModule {}
"
`;

exports[`Angular with Import Mapper Tests > svelte > Javascript Test > eventHandlers 1`] = `
"import { NgModule } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

import { Component } from \\"@angular/core\\";

@Component({
  selector: \\"my-component, MyComponent\\",
  template: \`
    <div>
      <button (click)=\\"log('hi')\\">Log</button>
      <button (click)=\\"log($event)\\">Log</button>
      <button (click)=\\"log($event)\\">Log</button>
    </div>
  \`,
})
export class MyComponent {
  log = function log(msg = \\"hello\\") {
    console.log(msg);
  };
}

@NgModule({
  declarations: [MyComponent],
  imports: [CommonModule],
  exports: [MyComponent],
  bootstrap: [SomeOtherComponent],
})
export class MyComponentModule {}
"
`;

exports[`Angular with Import Mapper Tests > svelte > Javascript Test > html 1`] = `
"import { NgModule } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

import { Component } from \\"@angular/core\\";

@Component({
  selector: \\"my-component, MyComponent\\",
  template: \`
    <div [innerHTML]=\\"html\\"></div>
  \`,
})
export class MyComponent {
  html = \\"<b>bold</b>\\";
}

@NgModule({
  declarations: [MyComponent],
  imports: [CommonModule],
  exports: [MyComponent],
  bootstrap: [SomeOtherComponent],
})
export class MyComponentModule {}
"
`;

exports[`Angular with Import Mapper Tests > svelte > Javascript Test > ifElse 1`] = `
"import { NgModule } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

import { Component } from \\"@angular/core\\";

@Component({
  selector: \\"my-component, MyComponent\\",
  template: \`
    <ng-container *ngIf=\\"show\\">
      <button (click)=\\"toggle($event)\\">Hide</button>
    </ng-container>
  \`,
})
export class MyComponent {
  show = true;
  toggle = function toggle() {
    this.show = !this.show;
  };
}

@NgModule({
  declarations: [MyComponent],
  imports: [CommonModule],
  exports: [MyComponent],
  bootstrap: [SomeOtherComponent],
})
export class MyComponentModule {}
"
`;

exports[`Angular with Import Mapper Tests > svelte > Javascript Test > imports 1`] = `
"import { NgModule } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

import { Component } from \\"@angular/core\\";

import ButtonModule from \\"./Button.lite/angular\\";

@Component({
  selector: \\"my-component, MyComponent\\",
  template: \`
    <div>
      <button type=\\"button\\" [disabled]=\\"disabled\\">
        <ng-content></ng-content>
      </button>
    </div>
  \`,
})
export class MyComponent {
  disabled = false;
}

@NgModule({
  declarations: [MyComponent],
  imports: [CommonModule, ButtonModule],
  exports: [MyComponent],
  bootstrap: [SomeOtherComponent],
})
export class MyComponentModule {}
"
`;

exports[`Angular with Import Mapper Tests > svelte > Javascript Test > lifecycleHooks 1`] = `
"import { NgModule } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

import { Component } from \\"@angular/core\\";

@Component({
  selector: \\"my-component, MyComponent\\",
  template: \`
    <div></div>
  \`,
})
export class MyComponent {
  ngOnInit() {
    console.log(\\"onMount\\");
  }

  ngAfterContentChecked() {
    console.log(\\"onAfterUpdate\\");
  }

  ngOnDestroy() {
    console.log(\\"onDestroy\\");
  }
}

@NgModule({
  declarations: [MyComponent],
  imports: [CommonModule],
  exports: [MyComponent],
  bootstrap: [SomeOtherComponent],
})
export class MyComponentModule {}
"
`;

exports[`Angular with Import Mapper Tests > svelte > Javascript Test > reactive 1`] = `
"import { NgModule } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

import { Component } from \\"@angular/core\\";

@Component({
  selector: \\"my-component, MyComponent\\",
  template: \`
    <div>
      <input [attr.value]=\\"name\\" />

      Lowercase: {{lowercaseName}}
    </div>
  \`,
})
export class MyComponent {
  name = \\"Steve\\";
  get lowercaseName() {
    return this.name.toLowerCase();
  }
}

@NgModule({
  declarations: [MyComponent],
  imports: [CommonModule],
  exports: [MyComponent],
  bootstrap: [SomeOtherComponent],
})
export class MyComponentModule {}
"
`;

exports[`Angular with Import Mapper Tests > svelte > Javascript Test > reactiveWithFn 1`] = `
"import { NgModule } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

import { Component } from \\"@angular/core\\";

@Component({
  selector: \\"my-component, MyComponent\\",
  template: \`
    <div>
      <input type=\\"number\\" (input)=\\"a = $event.target.value\\" [attr.value]=\\"a\\" />
      <input type=\\"number\\" (input)=\\"b = $event.target.value\\" [attr.value]=\\"b\\" />

      Result: {{result}}
    </div>
  \`,
})
export class MyComponent {
  a = 2;
  b = 5;
  result = null;
  calculateResult = function calculateResult(a_, b_) {
    this.result = a_ * b_;
  };

  ngAfterContentChecked() {
    this.calculateResult(this.a, this.b);
  }
}

@NgModule({
  declarations: [MyComponent],
  imports: [CommonModule],
  exports: [MyComponent],
  bootstrap: [SomeOtherComponent],
})
export class MyComponentModule {}
"
`;

exports[`Angular with Import Mapper Tests > svelte > Javascript Test > slots 1`] = `
"import { NgModule } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

import { Component } from \\"@angular/core\\";

@Component({
  selector: \\"my-component, MyComponent\\",
  template: \`
    <div>
      <ng-content>default</ng-content>
      <ng-content select=\\"[test]\\"><div>default</div></ng-content>
    </div>
  \`,
})
export class MyComponent {}

@NgModule({
  declarations: [MyComponent],
  imports: [CommonModule],
  exports: [MyComponent],
  bootstrap: [SomeOtherComponent],
})
export class MyComponentModule {}
"
`;

exports[`Angular with Import Mapper Tests > svelte > Javascript Test > style 1`] = `
"import { NgModule } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

import { Component } from \\"@angular/core\\";

@Component({
  selector: \\"my-component, MyComponent\\",
  template: \`
    <input class=\\"form-input\\" />
  \`,
  styles: [
    \`
      input {
        color: red;
        font-size: 12px;
      }

      .form-input:focus {
        outline: 1px solid blue;
      }
    \`,
  ],
})
export class MyComponent {}

@NgModule({
  declarations: [MyComponent],
  imports: [CommonModule],
  exports: [MyComponent],
  bootstrap: [SomeOtherComponent],
})
export class MyComponentModule {}
"
`;

exports[`Angular with Import Mapper Tests > svelte > Javascript Test > textExpressions 1`] = `
"import { NgModule } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

import { Component } from \\"@angular/core\\";

@Component({
  selector: \\"my-component, MyComponent\\",
  template: \`
    <div>
      normal: {{a + b}}
      <br />

      conditional {{a > 2 ? 'hello' : 'bye'}}
    </div>
  \`,
})
export class MyComponent {
  a = 5;
  b = 12;
}

@NgModule({
  declarations: [MyComponent],
  imports: [CommonModule],
  exports: [MyComponent],
  bootstrap: [SomeOtherComponent],
})
export class MyComponentModule {}
"
`;

exports[`Angular with Import Mapper Tests > svelte > Typescript Test > basic 1`] = `
"import { NgModule } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

import { Component } from \\"@angular/core\\";

@Component({
  selector: \\"my-component, MyComponent\\",
  template: \`
    <div>
      <input (input)=\\"name = $event.target.value\\" [attr.value]=\\"name\\" />

      Hello! I can run in React, Vue, Solid, or Liquid!
    </div>
  \`,
})
export class MyComponent {
  name = \\"Steve\\";
}

@NgModule({
  declarations: [MyComponent],
  imports: [CommonModule],
  exports: [MyComponent],
  bootstrap: [SomeOtherComponent],
})
export class MyComponentModule {}
"
`;

exports[`Angular with Import Mapper Tests > svelte > Typescript Test > bindGroup 1`] = `
"import { NgModule } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

import { Component } from \\"@angular/core\\";

@Component({
  selector: \\"my-component, MyComponent\\",
  template: \`
    <div>
      <input
        type=\\"radio\\"
        value=\\"Plain\\"
        [attr.checked]=\\"tortilla === 'Plain'\\"
        (input)=\\"tortilla = $event.target.value\\"
      />
      <input
        type=\\"radio\\"
        value=\\"Whole wheat\\"
        [attr.checked]=\\"tortilla === 'Whole wheat'\\"
        (input)=\\"tortilla = $event.target.value\\"
      />
      <input
        type=\\"radio\\"
        value=\\"Spinach\\"
        [attr.checked]=\\"tortilla === 'Spinach'\\"
        (input)=\\"tortilla = $event.target.value\\"
      />
      <br />
      <br />
      <input
        type=\\"checkbox\\"
        value=\\"Rice\\"
        [attr.checked]=\\"fillings === 'Rice'\\"
        (input)=\\"fillings = $event.target.value\\"
      />
      <input
        type=\\"checkbox\\"
        value=\\"Beans\\"
        [attr.checked]=\\"fillings === 'Beans'\\"
        (input)=\\"fillings = $event.target.value\\"
      />
      <input
        type=\\"checkbox\\"
        value=\\"Cheese\\"
        [attr.checked]=\\"fillings === 'Cheese'\\"
        (input)=\\"fillings = $event.target.value\\"
      />
      <input
        type=\\"checkbox\\"
        value=\\"Guac (extra)\\"
        [attr.checked]=\\"fillings === 'Guac (extra)'\\"
        (input)=\\"fillings = $event.target.value\\"
      />
      <p>Tortilla: {{tortilla}}</p>
      <p>Fillings: {{fillings}}</p>
    </div>
  \`,
})
export class MyComponent {
  tortilla = \\"Plain\\";
  fillings = [];
}

@NgModule({
  declarations: [MyComponent],
  imports: [CommonModule],
  exports: [MyComponent],
  bootstrap: [SomeOtherComponent],
})
export class MyComponentModule {}
"
`;

exports[`Angular with Import Mapper Tests > svelte > Typescript Test > bindProperty 1`] = `
"import { NgModule } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

import { Component } from \\"@angular/core\\";

@Component({
  selector: \\"my-component, MyComponent\\",
  template: \`
    <input [attr.value]=\\"value\\" />
  \`,
})
export class MyComponent {
  value = \\"hello\\";
}

@NgModule({
  declarations: [MyComponent],
  imports: [CommonModule],
  exports: [MyComponent],
  bootstrap: [SomeOtherComponent],
})
export class MyComponentModule {}
"
`;

exports[`Angular with Import Mapper Tests > svelte > Typescript Test > classDirective 1`] = `
"import { NgModule } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

import { Component, Input } from \\"@angular/core\\";

const defaultProps = {};

@Component({
  selector: \\"my-component, MyComponent\\",
  template: \`
    <input
      [class]=\\"\\\\\`form-input \\\\\${disabled ? 'disabled' : ''} \\\\\${focus ? 'focus' : ''}\\\\\`\\"
    />
  \`,
})
export class MyComponent {
  @Input() disabled: any;

  focus = true;
}

@NgModule({
  declarations: [MyComponent],
  imports: [CommonModule],
  exports: [MyComponent],
  bootstrap: [SomeOtherComponent],
})
export class MyComponentModule {}
"
`;

exports[`Angular with Import Mapper Tests > svelte > Typescript Test > context 1`] = `
"import { NgModule } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

import { Component } from \\"@angular/core\\";

@Component({
  selector: \\"my-component, MyComponent\\",
  template: \`
    <div>{{activeTab}}</div>
  \`,
})
export class MyComponent {
  activeTab = 0;

  constructor(public disabled: \\"disabled\\") {}
}

@NgModule({
  declarations: [MyComponent],
  imports: [CommonModule],
  exports: [MyComponent],
  bootstrap: [SomeOtherComponent],
})
export class MyComponentModule {}
"
`;

exports[`Angular with Import Mapper Tests > svelte > Typescript Test > each 1`] = `
"import { NgModule } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

import { Component } from \\"@angular/core\\";

@Component({
  selector: \\"my-component, MyComponent\\",
  template: \`
    <ul>
      <ng-container *ngFor=\\"let num of numbers\\">
        <li>{{num}}</li>
      </ng-container>
    </ul>
  \`,
})
export class MyComponent {
  numbers = [\\"one\\", \\"two\\", \\"three\\"];
}

@NgModule({
  declarations: [MyComponent],
  imports: [CommonModule],
  exports: [MyComponent],
  bootstrap: [SomeOtherComponent],
})
export class MyComponentModule {}
"
`;

exports[`Angular with Import Mapper Tests > svelte > Typescript Test > eventHandlers 1`] = `
"import { NgModule } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

import { Component } from \\"@angular/core\\";

@Component({
  selector: \\"my-component, MyComponent\\",
  template: \`
    <div>
      <button (click)=\\"log('hi')\\">Log</button>
      <button (click)=\\"log($event)\\">Log</button>
      <button (click)=\\"log($event)\\">Log</button>
    </div>
  \`,
})
export class MyComponent {
  log = function log(msg = \\"hello\\") {
    console.log(msg);
  };
}

@NgModule({
  declarations: [MyComponent],
  imports: [CommonModule],
  exports: [MyComponent],
  bootstrap: [SomeOtherComponent],
})
export class MyComponentModule {}
"
`;

exports[`Angular with Import Mapper Tests > svelte > Typescript Test > html 1`] = `
"import { NgModule } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

import { Component } from \\"@angular/core\\";

@Component({
  selector: \\"my-component, MyComponent\\",
  template: \`
    <div [innerHTML]=\\"html\\"></div>
  \`,
})
export class MyComponent {
  html = \\"<b>bold</b>\\";
}

@NgModule({
  declarations: [MyComponent],
  imports: [CommonModule],
  exports: [MyComponent],
  bootstrap: [SomeOtherComponent],
})
export class MyComponentModule {}
"
`;

exports[`Angular with Import Mapper Tests > svelte > Typescript Test > ifElse 1`] = `
"import { NgModule } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

import { Component } from \\"@angular/core\\";

@Component({
  selector: \\"my-component, MyComponent\\",
  template: \`
    <ng-container *ngIf=\\"show\\">
      <button (click)=\\"toggle($event)\\">Hide</button>
    </ng-container>
  \`,
})
export class MyComponent {
  show = true;
  toggle = function toggle() {
    this.show = !this.show;
  };
}

@NgModule({
  declarations: [MyComponent],
  imports: [CommonModule],
  exports: [MyComponent],
  bootstrap: [SomeOtherComponent],
})
export class MyComponentModule {}
"
`;

exports[`Angular with Import Mapper Tests > svelte > Typescript Test > imports 1`] = `
"import { NgModule } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

import { Component } from \\"@angular/core\\";

import ButtonModule from \\"./Button.lite/angular\\";

@Component({
  selector: \\"my-component, MyComponent\\",
  template: \`
    <div>
      <button type=\\"button\\" [disabled]=\\"disabled\\">
        <ng-content></ng-content>
      </button>
    </div>
  \`,
})
export class MyComponent {
  disabled = false;
}

@NgModule({
  declarations: [MyComponent],
  imports: [CommonModule, ButtonModule],
  exports: [MyComponent],
  bootstrap: [SomeOtherComponent],
})
export class MyComponentModule {}
"
`;

exports[`Angular with Import Mapper Tests > svelte > Typescript Test > lifecycleHooks 1`] = `
"import { NgModule } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

import { Component } from \\"@angular/core\\";

@Component({
  selector: \\"my-component, MyComponent\\",
  template: \`
    <div></div>
  \`,
})
export class MyComponent {
  ngOnInit() {
    console.log(\\"onMount\\");
  }

  ngAfterContentChecked() {
    console.log(\\"onAfterUpdate\\");
  }

  ngOnDestroy() {
    console.log(\\"onDestroy\\");
  }
}

@NgModule({
  declarations: [MyComponent],
  imports: [CommonModule],
  exports: [MyComponent],
  bootstrap: [SomeOtherComponent],
})
export class MyComponentModule {}
"
`;

exports[`Angular with Import Mapper Tests > svelte > Typescript Test > reactive 1`] = `
"import { NgModule } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

import { Component } from \\"@angular/core\\";

@Component({
  selector: \\"my-component, MyComponent\\",
  template: \`
    <div>
      <input [attr.value]=\\"name\\" />

      Lowercase: {{lowercaseName}}
    </div>
  \`,
})
export class MyComponent {
  name = \\"Steve\\";
  get lowercaseName() {
    return this.name.toLowerCase();
  }
}

@NgModule({
  declarations: [MyComponent],
  imports: [CommonModule],
  exports: [MyComponent],
  bootstrap: [SomeOtherComponent],
})
export class MyComponentModule {}
"
`;

exports[`Angular with Import Mapper Tests > svelte > Typescript Test > reactiveWithFn 1`] = `
"import { NgModule } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

import { Component } from \\"@angular/core\\";

@Component({
  selector: \\"my-component, MyComponent\\",
  template: \`
    <div>
      <input type=\\"number\\" (input)=\\"a = $event.target.value\\" [attr.value]=\\"a\\" />
      <input type=\\"number\\" (input)=\\"b = $event.target.value\\" [attr.value]=\\"b\\" />

      Result: {{result}}
    </div>
  \`,
})
export class MyComponent {
  a = 2;
  b = 5;
  result = null;
  calculateResult = function calculateResult(a_, b_) {
    this.result = a_ * b_;
  };

  ngAfterContentChecked() {
    this.calculateResult(this.a, this.b);
  }
}

@NgModule({
  declarations: [MyComponent],
  imports: [CommonModule],
  exports: [MyComponent],
  bootstrap: [SomeOtherComponent],
})
export class MyComponentModule {}
"
`;

exports[`Angular with Import Mapper Tests > svelte > Typescript Test > slots 1`] = `
"import { NgModule } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

import { Component } from \\"@angular/core\\";

@Component({
  selector: \\"my-component, MyComponent\\",
  template: \`
    <div>
      <ng-content>default</ng-content>
      <ng-content select=\\"[test]\\"><div>default</div></ng-content>
    </div>
  \`,
})
export class MyComponent {}

@NgModule({
  declarations: [MyComponent],
  imports: [CommonModule],
  exports: [MyComponent],
  bootstrap: [SomeOtherComponent],
})
export class MyComponentModule {}
"
`;

exports[`Angular with Import Mapper Tests > svelte > Typescript Test > style 1`] = `
"import { NgModule } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

import { Component } from \\"@angular/core\\";

@Component({
  selector: \\"my-component, MyComponent\\",
  template: \`
    <input class=\\"form-input\\" />
  \`,
  styles: [
    \`
      input {
        color: red;
        font-size: 12px;
      }

      .form-input:focus {
        outline: 1px solid blue;
      }
    \`,
  ],
})
export class MyComponent {}

@NgModule({
  declarations: [MyComponent],
  imports: [CommonModule],
  exports: [MyComponent],
  bootstrap: [SomeOtherComponent],
})
export class MyComponentModule {}
"
`;

exports[`Angular with Import Mapper Tests > svelte > Typescript Test > textExpressions 1`] = `
"import { NgModule } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

import { Component } from \\"@angular/core\\";

@Component({
  selector: \\"my-component, MyComponent\\",
  template: \`
    <div>
      normal: {{a + b}}
      <br />

      conditional {{a > 2 ? 'hello' : 'bye'}}
    </div>
  \`,
})
export class MyComponent {
  a = 5;
  b = 12;
}

@NgModule({
  declarations: [MyComponent],
  imports: [CommonModule],
  exports: [MyComponent],
  bootstrap: [SomeOtherComponent],
})
export class MyComponentModule {}
"
`;
