// Vitest Snapshot v1

exports[`Vue > jsx > Javascript Test > AdvancedRef 1`] = `
"<template>
  <div>
    <template v-if=\\"showInput\\">
      <input
        class=\\"input\\"
        ref=\\"inputRef\\"
        :value=\\"name\\"
        @blur=\\"onBlur()\\"
        @input=\\"name = $event.target.value\\"
      />
      <label for=\\"cars\\" ref=\\"inputNoArgRef\\"> Choose a car: </label>
      <select name=\\"cars\\" id=\\"cars\\">
        <option value=\\"supra\\">GR Supra</option>
        <option value=\\"86\\">GR 86</option>
      </select>
    </template>

    Hello
    {{ lowerCaseName() }}! I can run in React, Qwik, Vue, Solid, or Web
    Component!
  </div>
</template>

<script>
export default {
  name: \\"my-basic-ref-component\\",

  props: [\\"showInput\\"],

  data() {
    return { name: \\"PatrickJS\\" };
  },

  watch: {
    onUpdateHook0: {
      handler() {
        console.log(\\"Received an update\\");
      },
      immediate: true,
    },
  },

  computed: {
    onUpdateHook0() {
      return {
        0: this.$refs.inputRef,
        1: this.$refs.inputNoArgRef,
      };
    },
  },

  methods: {
    onBlur: function onBlur() {
      // Maintain focus
      this.$refs.inputRef.focus();
    },
    lowerCaseName: function lowerCaseName() {
      return this.name.toLowerCase();
    },
  },
};
</script>

<style scoped>
.input {
  color: red;
}
</style>"
`;

exports[`Vue > jsx > Javascript Test > Basic 1`] = `
"<template>
  <div class=\\"test div\\">
    <input
      :value=\\"DEFAULT_VALUES.name || name\\"
      @input=\\"name = $event.target.value\\"
    />
    Hello! I can run in React, Vue, Solid, or Liquid!
  </div>
</template>

<script>
export const DEFAULT_VALUES = {
  name: \\"Steve\\",
};

export default {
  name: \\"my-basic-component\\",

  data() {
    return { name: \\"Steve\\", age: 1, sports: [\\"\\"], DEFAULT_VALUES };
  },

  methods: {
    underscore_fn_name() {
      return \\"bar\\";
    },
  },
};
</script>

<style scoped>
.div {
  padding: 10px;
}
</style>"
`;

exports[`Vue > jsx > Javascript Test > Basic 2`] = `
"<template>
  <div>
    <template v-if=\\"person === name\\">
      <input
        :value=\\"name\\"
        @input=\\"name = $event.target.value + ' and ' + person\\"
      />

      Hello
      {{ person }}
      ! I can run in Qwik, Web Component, React, Vue, Solid, or Liquid!
    </template>
  </div>
</template>

<script>
export default {
  name: \\"my-basic-for-show-component\\",

  data() {
    return { name: \\"PatrickJS\\", names: [\\"Steve\\", \\"PatrickJS\\"] };
  },
};
</script>"
`;

exports[`Vue > jsx > Javascript Test > Basic Context 1`] = `
"<template>
  <div>
    {{ myService.method(\\"hello\\") + name }}
    Hello! I can run in React, Vue, Solid, or Liquid!
    <input @input=\\"onChange\\" />
  </div>
</template>

<script>
import { Injector, createInjector, MyService } from \\"@dummy/injection-js\\";

export default {
  name: \\"my-basic-component\\",

  data() {
    return { name: \\"PatrickJS\\" };
  },

  provide() {
    const _this = this;
    return {
      [Injector.key]: createInjector(),
    };
  },
  inject: {
    myService: MyService.key,
  },
  created() {
    const hi = this.myService.method(\\"hi\\");
    console.log(hi);
  },
  mounted() {
    const bye = this.myService.method(\\"hi\\");
    console.log(bye);
  },

  methods: {
    onChange: function onChange() {
      const change = this.myService.method(\\"change\\");
      console.log(change);
    },
  },
};
</script>"
`;

exports[`Vue > jsx > Javascript Test > Basic OnMount Update 1`] = `
"<template>
  <div>Hello {{ name }}</div>
</template>

<script>
export default {
  name: \\"my-basic-on-mount-update-component\\",

  props: [\\"hi\\", \\"bye\\"],

  data() {
    return { name: \\"PatrickJS\\", names: [\\"Steve\\", \\"PatrickJS\\"] };
  },

  created() {
    this.name = \\"PatrickJS onInit\\" + this.hi;
  },
  mounted() {
    this.name = \\"PatrickJS onMount\\" + this.bye;
  },
};
</script>"
`;

exports[`Vue > jsx > Javascript Test > Basic Outputs 1`] = `
"<template>
  <div></div>
</template>

<script>
export default {
  name: \\"my-basic-outputs-component\\",

  props: [\\"onMessage\\", \\"onEvent\\", \\"message\\"],

  data() {
    return { name: \\"PatrickJS\\" };
  },

  mounted() {
    this.onMessage(this.name);
    this.onEvent(this.message);
  },
};
</script>"
`;

exports[`Vue > jsx > Javascript Test > Basic Outputs Meta 1`] = `
"<template>
  <div></div>
</template>

<script>
export default {
  name: \\"my-basic-outputs-component\\",

  props: [\\"onMessage\\", \\"onEvent\\", \\"message\\"],

  data() {
    return { name: \\"PatrickJS\\" };
  },

  mounted() {
    this.onMessage(this.name);
    this.onEvent(this.message);
  },
};
</script>"
`;

exports[`Vue > jsx > Javascript Test > BasicAttribute 1`] = `
"<template>
  <input autocapitalize=\\"on\\" autocomplete=\\"on\\" :spellcheck=\\"true\\" />
</template>

<script>
export default {
  name: \\"my-component\\",
};
</script>"
`;

exports[`Vue > jsx > Javascript Test > BasicBooleanAttribute 1`] = `
"<template>
  <div>
    <slot /> {{ type }}
    <my-boolean-attribute-component
      :toggle=\\"true\\"
    ></my-boolean-attribute-component>
    <my-boolean-attribute-component
      :toggle=\\"true\\"
    ></my-boolean-attribute-component>
    <my-boolean-attribute-component
      :list=\\"null\\"
    ></my-boolean-attribute-component>
  </div>
</template>

<script>
import MyBooleanAttributeComponent from \\"./basic-boolean-attribute-component.raw\\";

export default {
  name: \\"my-boolean-attribute\\",
  components: { MyBooleanAttributeComponent: MyBooleanAttributeComponent },
  props: [\\"type\\"],
};
</script>"
`;

exports[`Vue > jsx > Javascript Test > BasicChildComponent 1`] = `
"<template>
  <div>
    <my-basic-component :id=\\"dev\\"></my-basic-component>
    <div>
      <my-basic-on-mount-update-component
        :hi=\\"name\\"
        :bye=\\"dev\\"
      ></my-basic-on-mount-update-component>
    </div>
  </div>
</template>

<script>
import MyBasicComponent from \\"./basic.raw\\";
import MyBasicOnMountUpdateComponent from \\"./basic-onMount-update.raw\\";

export default {
  name: \\"my-basic-child-component\\",
  components: {
    MyBasicComponent: MyBasicComponent,
    MyBasicOnMountUpdateComponent: MyBasicOnMountUpdateComponent,
  },

  data() {
    return { name: \\"Steve\\", dev: \\"PatrickJS\\" };
  },
};
</script>"
`;

exports[`Vue > jsx > Javascript Test > BasicFor 1`] = `
"<template>
  <div>
    <input
      :value=\\"name\\"
      @input=\\"name = $event.target.value + ' and ' + person\\"
    />

    Hello
    {{ person }}
    ! I can run in Qwik, Web Component, React, Vue, Solid, or Liquid!
  </div>
</template>

<script>
export default {
  name: \\"my-basic-for-component\\",

  data() {
    return { name: \\"PatrickJS\\", names: [\\"Steve\\", \\"PatrickJS\\"] };
  },

  mounted() {
    console.log(\\"onMount code\\");
  },
};
</script>"
`;

exports[`Vue > jsx > Javascript Test > BasicRef 1`] = `
"<template>
  <div>
    <template v-if=\\"showInput\\">
      <input
        class=\\"input\\"
        ref=\\"inputRef\\"
        :value=\\"name\\"
        @blur=\\"onBlur()\\"
        @input=\\"name = $event.target.value\\"
      />
      <label for=\\"cars\\" ref=\\"inputNoArgRef\\"> Choose a car: </label>
      <select name=\\"cars\\" id=\\"cars\\">
        <option value=\\"supra\\">GR Supra</option>
        <option value=\\"86\\">GR 86</option>
      </select>
    </template>

    Hello
    {{ lowerCaseName() }}! I can run in React, Qwik, Vue, Solid, or Web
    Component!
  </div>
</template>

<script>
export default {
  name: \\"my-basic-ref-component\\",

  props: [\\"showInput\\"],

  data() {
    return { name: \\"PatrickJS\\" };
  },

  methods: {
    onBlur: function onBlur() {
      // Maintain focus
      this.$refs.inputRef.focus();
    },
    lowerCaseName: function lowerCaseName() {
      return this.name.toLowerCase();
    },
  },
};
</script>

<style scoped>
.input {
  color: red;
}
</style>"
`;

exports[`Vue > jsx > Javascript Test > BasicRefAssignment 1`] = `
"<template>
  <div>
    <button @click=\\"handlerClick($event)\\">Click</button>
  </div>
</template>

<script>
export default {
  name: \\"my-basic-ref-assignment-component\\",

  methods: {
    handlerClick: function handlerClick(event) {
      event.preventDefault();
      console.log(\\"current value\\", this.$refs.holdValueRef);
      this.$refs.holdValueRef = this.$refs.holdValueRef + \\"JS\\";
    },
  },
};
</script>"
`;

exports[`Vue > jsx > Javascript Test > BasicRefPrevious 1`] = `
"<template>
  <div>
    <h1>Now: {{ count }}, before: {{ this.$refs.prevCount }}</h1>
    <button @click=\\"count += 1\\">Increment</button>
  </div>
</template>

<script>
export function usePrevious(value) {
  // The ref object is a generic container whose current property is mutable ...
  // ... and can hold any value, similar to an instance property on a class
  let ref = useRef(null); // Store current value in ref

  onUpdate(() => {
    ref = value;
  }, [value]); // Only re-run if value changes
  // Return previous value (happens before update in useEffect above)

  return ref;
}

export default {
  name: \\"my-previous-component\\",

  data() {
    return { count: 0 };
  },

  watch: {
    onUpdateHook0: {
      handler() {
        this.$refs.prevCount = this.count;
      },
      immediate: true,
    },
  },

  computed: {
    onUpdateHook0() {
      return {
        0: this.count,
      };
    },
  },
};
</script>"
`;

exports[`Vue > jsx > Javascript Test > Button 1`] = `
"<template>
  <div>
    <template v-if=\\"link\\">
      <a
        :href=\\"link\\"
        :target=\\"openLinkInNewTab ? '_blank' : undefined\\"
        v-bind=\\"attributes\\"
      >
        {{ text }}
      </a>
    </template>

    <template v-if=\\"!link\\">
      <button type=\\"button\\" v-bind=\\"attributes\\">
        {{ text }}
      </button>
    </template>
  </div>
</template>

<script>
export default {
  name: \\"button\\",

  props: [\\"link\\", \\"attributes\\", \\"openLinkInNewTab\\", \\"text\\"],
};
</script>"
`;

exports[`Vue > jsx > Javascript Test > Columns 1`] = `
"<template>
  <div class=\\"builder-columns div\\">
    <div
      class=\\"builder-column div-2\\"
      v-for=\\"(column, index) in columns\\"
      :key=\\"index\\"
    >
      {{ column.content }} {{ index }}
    </div>
  </div>
</template>

<script>
export default {
  name: \\"column\\",

  props: [\\"columns\\", \\"space\\"],

  methods: {
    getColumns() {
      return this.columns || [];
    },
    getGutterSize() {
      return typeof this.space === \\"number\\" ? this.space || 0 : 20;
    },
    getWidth(index) {
      const columns = this.getColumns();
      return (columns[index] && columns[index].width) || 100 / columns.length;
    },
    getColumnCssWidth(index) {
      const columns = this.getColumns();
      const gutterSize = this.getGutterSize();
      const subtractWidth =
        (gutterSize * (columns.length - 1)) / columns.length;
      return \`calc(\${this.getWidth(index)}% - \${subtractWidth}px)\`;
    },
  },
};
</script>

<style scoped>
.div {
  display: flex;
  flex-direction: column;
  align-items: stretch;
  line-height: normal;
}
@media (max-width: 999px) {
  .div {
    flex-direction: row;
  }
}
@media (max-width: 639px) {
  .div {
    flex-direction: row-reverse;
  }
}
.div-2 {
  flex-grow: 1;
}
</style>"
`;

exports[`Vue > jsx > Javascript Test > ContentSlotHtml 1`] = `
"<template>
  <div>
    <slot name=\\"testing\\"></slot>
    <div>
      <hr />
    </div>
    <div>
      <slot />
    </div>
  </div>
</template>

<script>
export default {
  name: \\"content-slot-code\\",
};
</script>"
`;

exports[`Vue > jsx > Javascript Test > ContentSlotJSX 1`] = `
"<template>
  <div
    v-if=\\"$slots.reference\\"
    :name=\\"$slots.content ? 'name1' : 'name2'\\"
    :title=\\"$slots.content ? 'title1' : 'title2'\\"
    @click=\\"show()\\"
    :class=\\"_classStringToObject(cls)\\"
    v-bind=\\"attributes\\"
  >
    <template v-if=\\"showContent && $slots.content\\">
      <slot name=\\"content\\">{{ content }}</slot>
    </template>

    <div>
      <hr />
    </div>
    <div><slot /></div>
  </div>
</template>

<script>
export default {
  name: \\"content-slot-jsx-code\\",

  props: { attributes: { default: undefined }, content: { default: \\"\\" } },

  data() {
    return { name: \\"king\\", showContent: false };
  },

  computed: {
    cls() {
      return this.$slots.content && this.$slots.default
        ? \`\${this.name}-content\`
        : \\"\\";
    },
  },

  methods: {
    show() {
      this.$slots.content ? 1 : \\"\\";
    },
    _classStringToObject(str) {
      const obj = {};
      if (typeof str !== \\"string\\") {
        return obj;
      }
      const classNames = str.trim().split(/\\\\s+/);
      for (const name of classNames) {
        obj[name] = true;
      }
      return obj;
    },
  },
};
</script>"
`;

exports[`Vue > jsx > Javascript Test > CustomCode 1`] = `
"<template>
  <div
    ref=\\"elem\\"
    :class=\\"
      _classStringToObject(
        'builder-custom-code' + (replaceNodes ? ' replace-nodes' : '')
      )
    \\"
    v-html=\\"code\\"
  ></div>
</template>

<script>
export default {
  name: \\"custom-code\\",

  props: [\\"replaceNodes\\", \\"code\\"],

  data() {
    return { scriptsInserted: [], scriptsRun: [] };
  },

  mounted() {
    this.findAndRunScripts();
  },

  methods: {
    findAndRunScripts() {
      // TODO: Move this function to standalone one in '@builder.io/utils'
      if (this.$refs.elem && typeof window !== \\"undefined\\") {
        /** @type {HTMLScriptElement[]} */
        const scripts = this.$refs.elem.getElementsByTagName(\\"script\\");

        for (let i = 0; i < scripts.length; i++) {
          const script = scripts[i];

          if (script.src) {
            if (this.scriptsInserted.includes(script.src)) {
              continue;
            }

            this.scriptsInserted.push(script.src);
            const newScript = document.createElement(\\"script\\");
            newScript.async = true;
            newScript.src = script.src;
            document.head.appendChild(newScript);
          } else if (
            !script.type ||
            [
              \\"text/javascript\\",
              \\"application/javascript\\",
              \\"application/ecmascript\\",
            ].includes(script.type)
          ) {
            if (this.scriptsRun.includes(script.innerText)) {
              continue;
            }

            try {
              this.scriptsRun.push(script.innerText);
              new Function(script.innerText)();
            } catch (error) {
              console.warn(\\"\`CustomCode\`: Error running script:\\", error);
            }
          }
        }
      }
    },
    _classStringToObject(str) {
      const obj = {};
      if (typeof str !== \\"string\\") {
        return obj;
      }
      const classNames = str.trim().split(/\\\\s+/);
      for (const name of classNames) {
        obj[name] = true;
      }
      return obj;
    },
  },
};
</script>"
`;

exports[`Vue > jsx > Javascript Test > Embed 1`] = `
"<template>
  <div
    ref=\\"elem\\"
    :class=\\"
      _classStringToObject(
        'builder-custom-code' + (replaceNodes ? ' replace-nodes' : '')
      )
    \\"
    v-html=\\"code\\"
  ></div>
</template>

<script>
export default {
  name: \\"custom-code\\",

  props: [\\"replaceNodes\\", \\"code\\"],

  data() {
    return { scriptsInserted: [], scriptsRun: [] };
  },

  mounted() {
    this.findAndRunScripts();
  },

  methods: {
    findAndRunScripts() {
      // TODO: Move this function to standalone one in '@builder.io/utils'
      if (this.$refs.elem && typeof window !== \\"undefined\\") {
        /** @type {HTMLScriptElement[]} */
        const scripts = this.$refs.elem.getElementsByTagName(\\"script\\");

        for (let i = 0; i < scripts.length; i++) {
          const script = scripts[i];

          if (script.src) {
            if (this.scriptsInserted.includes(script.src)) {
              continue;
            }

            this.scriptsInserted.push(script.src);
            const newScript = document.createElement(\\"script\\");
            newScript.async = true;
            newScript.src = script.src;
            document.head.appendChild(newScript);
          } else if (
            !script.type ||
            [
              \\"text/javascript\\",
              \\"application/javascript\\",
              \\"application/ecmascript\\",
            ].includes(script.type)
          ) {
            if (this.scriptsRun.includes(script.innerText)) {
              continue;
            }

            try {
              this.scriptsRun.push(script.innerText);
              new Function(script.innerText)();
            } catch (error) {
              console.warn(\\"\`CustomCode\`: Error running script:\\", error);
            }
          }
        }
      }
    },
    _classStringToObject(str) {
      const obj = {};
      if (typeof str !== \\"string\\") {
        return obj;
      }
      const classNames = str.trim().split(/\\\\s+/);
      for (const name of classNames) {
        obj[name] = true;
      }
      return obj;
    },
  },
};
</script>"
`;

exports[`Vue > jsx > Javascript Test > Form 1`] = `
"<template>
  <form
    :validate=\\"validate\\"
    ref=\\"formRef\\"
    :action=\\"!sendWithJs && action\\"
    :method=\\"method\\"
    :name=\\"name\\"
    @submit=\\"onSubmit($event)\\"
    v-bind=\\"attributes\\"
  >
    <template v-if=\\"builderBlock && builderBlock.children\\">
      <builder-block-component
        v-for=\\"(block, index) in builderBlock?.children\\"
        :block=\\"block\\"
        :index=\\"index\\"
        :key=\\"block.id\\"
      ></builder-block-component>
    </template>

    <template v-if=\\"submissionState === 'error'\\">
      <builder-blocks
        dataPath=\\"errorMessage\\"
        :blocks=\\"errorMessage\\"
      ></builder-blocks>
    </template>

    <template v-if=\\"submissionState === 'sending'\\">
      <builder-blocks
        dataPath=\\"sendingMessage\\"
        :blocks=\\"sendingMessage\\"
      ></builder-blocks>
    </template>

    <template v-if=\\"submissionState === 'error' && responseData\\">
      <pre class=\\"builder-form-error-text pre\\">
        {{ JSON.stringify(responseData, null, 2) }}
      </pre>
    </template>

    <template v-if=\\"submissionState === 'success'\\">
      <builder-blocks
        dataPath=\\"successMessage\\"
        :blocks=\\"successMessage\\"
      ></builder-blocks>
    </template>
  </form>
</template>

<script>
import { BuilderBlock as BuilderBlockComponent } from \\"@fake\\";
import { Builder, builder } from \\"@builder.io/sdk\\";
import { BuilderBlocks } from \\"@fake\\";
import { set } from \\"@fake\\";
import { get } from \\"@fake\\";

export default {
  name: \\"form-component\\",
  components: {
    BuilderBlockComponent: BuilderBlockComponent,
    BuilderBlocks: BuilderBlocks,
  },
  props: [
    \\"previewState\\",
    \\"sendWithJs\\",
    \\"sendSubmissionsTo\\",
    \\"action\\",
    \\"customHeaders\\",
    \\"contentType\\",
    \\"sendSubmissionsToEmail\\",
    \\"name\\",
    \\"method\\",
    \\"errorMessagePath\\",
    \\"resetFormOnSubmit\\",
    \\"successUrl\\",
    \\"validate\\",
    \\"attributes\\",
    \\"builderBlock\\",
    \\"errorMessage\\",
    \\"sendingMessage\\",
    \\"successMessage\\",
  ],

  data() {
    return {
      formState: \\"unsubmitted\\",
      responseData: null,
      formErrorMessage: \\"\\",
      builder,
    };
  },

  computed: {
    submissionState() {
      return (Builder.isEditing && this.previewState) || this.formState;
    },
  },

  methods: {
    onSubmit(event) {
      const sendWithJs = this.sendWithJs || this.sendSubmissionsTo === \\"email\\";

      if (this.sendSubmissionsTo === \\"zapier\\") {
        event.preventDefault();
      } else if (sendWithJs) {
        if (!(this.action || this.sendSubmissionsTo === \\"email\\")) {
          event.preventDefault();
          return;
        }

        event.preventDefault();
        const el = event.currentTarget;
        const headers = this.customHeaders || {};
        let body;
        const formData = new FormData(el); // TODO: maybe support null

        const formPairs = Array.from(
          event.currentTarget.querySelectorAll(\\"input,select,textarea\\")
        )
          .filter((el) => !!el.name)
          .map((el) => {
            let value;
            const key = el.name;

            if (el instanceof HTMLInputElement) {
              if (el.type === \\"radio\\") {
                if (el.checked) {
                  value = el.name;
                  return {
                    key,
                    value,
                  };
                }
              } else if (el.type === \\"checkbox\\") {
                value = el.checked;
              } else if (el.type === \\"number\\" || el.type === \\"range\\") {
                const num = el.valueAsNumber;

                if (!isNaN(num)) {
                  value = num;
                }
              } else if (el.type === \\"file\\") {
                // TODO: one vs multiple files
                value = el.files;
              } else {
                value = el.value;
              }
            } else {
              value = el.value;
            }

            return {
              key,
              value,
            };
          });
        let contentType = this.contentType;

        if (this.sendSubmissionsTo === \\"email\\") {
          contentType = \\"multipart/form-data\\";
        }

        Array.from(formPairs).forEach(({ value }) => {
          if (
            value instanceof File ||
            (Array.isArray(value) && value[0] instanceof File) ||
            value instanceof FileList
          ) {
            contentType = \\"multipart/form-data\\";
          }
        }); // TODO: send as urlEncoded or multipart by default
        // because of ease of use and reliability in browser API
        // for encoding the form?

        if (contentType !== \\"application/json\\") {
          body = formData;
        } else {
          // Json
          const json = {};
          Array.from(formPairs).forEach(({ value, key }) => {
            set(json, key, value);
          });
          body = JSON.stringify(json);
        }

        if (contentType && contentType !== \\"multipart/form-data\\") {
          if (
            /* Zapier doesn't allow content-type header to be sent from browsers */
            !(sendWithJs && this.action?.includes(\\"zapier.com\\"))
          ) {
            headers[\\"content-type\\"] = contentType;
          }
        }

        const presubmitEvent = new CustomEvent(\\"presubmit\\", {
          detail: {
            body,
          },
        });

        if (this.$refs.formRef) {
          this.$refs.formRef.dispatchEvent(presubmitEvent);

          if (presubmitEvent.defaultPrevented) {
            return;
          }
        }

        this.formState = \\"sending\\";
        const formUrl = \`\${
          builder.env === \\"dev\\" ? \\"http://localhost:5000\\" : \\"https://builder.io\\"
        }/api/v1/form-submit?apiKey=\${builder.apiKey}&to=\${btoa(
          this.sendSubmissionsToEmail || \\"\\"
        )}&name=\${encodeURIComponent(this.name || \\"\\")}\`;
        fetch(
          this.sendSubmissionsTo === \\"email\\" ? formUrl : this.action,
          /* TODO: throw error if no action URL */
          {
            body,
            headers,
            method: this.method || \\"post\\",
          }
        ).then(
          async (res) => {
            let body;
            const contentType = res.headers.get(\\"content-type\\");

            if (contentType && contentType.indexOf(\\"application/json\\") !== -1) {
              body = await res.json();
            } else {
              body = await res.text();
            }

            if (!res.ok && this.errorMessagePath) {
              /* TODO: allow supplying an error formatter function */
              let message = get(body, this.errorMessagePath);

              if (message) {
                if (typeof message !== \\"string\\") {
                  /* TODO: ideally convert json to yaml so it woul dbe like
           error: - email has been taken */
                  message = JSON.stringify(message);
                }

                this.formErrorMessage = message;
              }
            }

            this.responseData = body;
            this.formState = res.ok ? \\"success\\" : \\"error\\";

            if (res.ok) {
              const submitSuccessEvent = new CustomEvent(\\"submit:success\\", {
                detail: {
                  res,
                  body,
                },
              });

              if (this.$refs.formRef) {
                this.$refs.formRef.dispatchEvent(submitSuccessEvent);

                if (submitSuccessEvent.defaultPrevented) {
                  return;
                }
                /* TODO: option to turn this on/off? */

                if (this.resetFormOnSubmit !== false) {
                  this.$refs.formRef.reset();
                }
              }
              /* TODO: client side route event first that can be preventDefaulted */

              if (this.successUrl) {
                if (this.$refs.formRef) {
                  const event = new CustomEvent(\\"route\\", {
                    detail: {
                      url: this.successUrl,
                    },
                  });
                  this.$refs.formRef.dispatchEvent(event);

                  if (!event.defaultPrevented) {
                    location.href = this.successUrl;
                  }
                } else {
                  location.href = this.successUrl;
                }
              }
            }
          },
          (err) => {
            const submitErrorEvent = new CustomEvent(\\"submit:error\\", {
              detail: {
                error: err,
              },
            });

            if (this.$refs.formRef) {
              this.$refs.formRef.dispatchEvent(submitErrorEvent);

              if (submitErrorEvent.defaultPrevented) {
                return;
              }
            }

            this.responseData = err;
            this.formState = \\"error\\";
          }
        );
      }
    },
  },
};
</script>

<style scoped>
.pre {
  padding: 10px;
  color: red;
  text-align: center;
}
</style>"
`;

exports[`Vue > jsx > Javascript Test > Image 1`] = `
"<template>
  <div>
    <picture ref=\\"pictureRef\\">
      <template v-if=\\"!useLazyLoading() || load\\">
        <img
          :alt=\\"altText\\"
          :aria-role=\\"altText ? 'presentation' : undefined\\"
          :class=\\"
            _classStringToObject(
              'builder-image' + (_class ? ' ' + _class : '') + ' img'
            )
          \\"
          :src=\\"image\\"
          @load=\\"setLoaded()\\"
          :srcset=\\"srcset\\"
          :sizes=\\"sizes\\"
        />
      </template>

      <source :srcset=\\"srcset\\" />
    </picture>
    <slot />
  </div>
</template>

<script>
export default {
  name: \\"image\\",

  props: [\\"lazy\\", \\"altText\\", \\"_class\\", \\"image\\", \\"srcset\\", \\"sizes\\"],

  data() {
    return { scrollListener: null, imageLoaded: false, load: false };
  },

  mounted() {
    if (this.useLazyLoading()) {
      // throttled scroll capture listener
      const listener = () => {
        if (this.$refs.pictureRef) {
          const rect = this.$refs.pictureRef.getBoundingClientRect();
          const buffer = window.innerHeight / 2;

          if (rect.top < window.innerHeight + buffer) {
            setLoad(true);
            this.scrollListener = null;
            window.removeEventListener(\\"scroll\\", listener);
          }
        }
      };

      this.scrollListener = listener;
      window.addEventListener(\\"scroll\\", listener, {
        capture: true,
        passive: true,
      });
      listener();
    }
  },

  unmounted() {
    if (this.scrollListener) {
      window.removeEventListener(\\"scroll\\", this.scrollListener);
    }
  },

  methods: {
    setLoaded() {
      this.imageLoaded = true;
    },
    useLazyLoading() {
      // TODO: Add more checks here, like testing for real web browsers
      return !!this.lazy && this.isBrowser();
    },
    isBrowser: function isBrowser() {
      return (
        typeof window !== \\"undefined\\" &&
        window.navigator.product != \\"ReactNative\\"
      );
    },
    _classStringToObject(str) {
      const obj = {};
      if (typeof str !== \\"string\\") {
        return obj;
      }
      const classNames = str.trim().split(/\\\\s+/);
      for (const name of classNames) {
        obj[name] = true;
      }
      return obj;
    },
  },
};
</script>

<style scoped>
.img {
  opacity: 1;
  transition: opacity 0.2s ease-in-out;
  object-fit: cover;
  object-position: center;
}
</style>"
`;

exports[`Vue > jsx > Javascript Test > Image State 1`] = `
"<template>
  <div>
    <img class=\\"custom-class\\" :src=\\"item\\" :key=\\"itemIndex\\" />
  </div>
</template>

<script>
export default {
  name: \\"img-state-component\\",

  data() {
    return { canShow: true, images: [\\"http://example.com/qwik.png\\"] };
  },
};
</script>"
`;

exports[`Vue > jsx > Javascript Test > Img 1`] = `
"<template>
  <img
    :style=\\"{
      objectFit: backgroundSize || 'cover',
      objectPosition: backgroundPosition || 'center',
    }\\"
    :key=\\"(Builder.isEditing && imgSrc) || 'default-key'\\"
    :alt=\\"altText\\"
    :src=\\"imgSrc\\"
    v-bind=\\"attributes\\"
  />
</template>

<script>
import { Builder } from \\"@builder.io/sdk\\";

export default {
  name: \\"img-component\\",

  props: [
    \\"backgroundSize\\",
    \\"backgroundPosition\\",
    \\"attributes\\",
    \\"imgSrc\\",
    \\"altText\\",
  ],
};
</script>"
`;

exports[`Vue > jsx > Javascript Test > Input 1`] = `
"<template>
  <input
    :key=\\"Builder.isEditing && defaultValue ? defaultValue : 'default-key'\\"
    :placeholder=\\"placeholder\\"
    :type=\\"type\\"
    :name=\\"name\\"
    :value=\\"value\\"
    :defaultValue=\\"defaultValue\\"
    :required=\\"required\\"
    v-bind=\\"attributes\\"
  />
</template>

<script>
import { Builder } from \\"@builder.io/sdk\\";

export default {
  name: \\"form-input-component\\",

  props: [
    \\"attributes\\",
    \\"defaultValue\\",
    \\"placeholder\\",
    \\"type\\",
    \\"name\\",
    \\"value\\",
    \\"required\\",
  ],
};
</script>"
`;

exports[`Vue > jsx > Javascript Test > RawText 1`] = `
"<template>
  <span
    :class=\\"_classStringToObject(attributes?.class || attributes?.className)\\"
    v-html=\\"text || ''\\"
  ></span>
</template>

<script>
export default {
  name: \\"raw-text\\",

  props: [\\"attributes\\", \\"text\\"],

  methods: {
    _classStringToObject(str) {
      const obj = {};
      if (typeof str !== \\"string\\") {
        return obj;
      }
      const classNames = str.trim().split(/\\\\s+/);
      for (const name of classNames) {
        obj[name] = true;
      }
      return obj;
    },
  },
};
</script>"
`;

exports[`Vue > jsx > Javascript Test > Section 1`] = `
"<template>
  <section
    :style=\\"
      maxWidth && typeof maxWidth === 'number'
        ? {
            maxWidth: maxWidth,
          }
        : undefined
    \\"
    v-bind=\\"attributes\\"
  >
    <slot />
  </section>
</template>

<script>
export default {
  name: \\"section-component\\",

  props: [\\"attributes\\", \\"maxWidth\\"],
};
</script>"
`;

exports[`Vue > jsx > Javascript Test > Section 2`] = `
"<template>
  <section
    v-for=\\"(item, index) in items\\"
    v-if=\\"max\\"
    :style=\\"{
      maxWidth: item + max,
    }\\"
    :key=\\"index\\"
    v-bind=\\"attributes\\"
  >
    <slot />
  </section>
</template>

<script>
export default {
  name: \\"section-state-component\\",

  props: [\\"attributes\\"],

  data() {
    return { max: 42, items: [42] };
  },
};
</script>"
`;

exports[`Vue > jsx > Javascript Test > Select 1`] = `
"<template>
  <select
    :value=\\"value\\"
    :key=\\"Builder.isEditing && defaultValue ? defaultValue : 'default-key'\\"
    :defaultValue=\\"defaultValue\\"
    :name=\\"name\\"
    v-bind=\\"attributes\\"
  >
    <option
      v-for=\\"(option, index) in options\\"
      :value=\\"option.value\\"
      :data-index=\\"index\\"
      :key=\\"index\\"
    >
      {{ option.name || option.value }}
    </option>
  </select>
</template>

<script>
import { Builder } from \\"@builder.io/sdk\\";

export default {
  name: \\"select-component\\",

  props: [\\"attributes\\", \\"value\\", \\"defaultValue\\", \\"name\\", \\"options\\"],
};
</script>"
`;

exports[`Vue > jsx > Javascript Test > SlotDefault 1`] = `
"<template>
  <div>
    <slot>
      <div class=\\"default-slot\\">Default content</div>
    </slot>
  </div>
</template>

<script>
export default {
  name: \\"slot-code\\",
};
</script>"
`;

exports[`Vue > jsx > Javascript Test > SlotHtml 1`] = `
"<template>
  <div>
    <content-slot-code>
      <template #testing>
        <div>Hello</div>
      </template>
    </content-slot-code>
  </div>
</template>

<script>
import ContentSlotCode from \\"./content-slot-jsx.raw\\";

export default {
  name: \\"slot-code\\",
  components: { ContentSlotCode: ContentSlotCode },
};
</script>"
`;

exports[`Vue > jsx > Javascript Test > SlotJsx 1`] = `
"<template>
  <div>
    <content-slot-code :slotTesting=\\"<div>Hello</div>\\"></content-slot-code>
  </div>
</template>

<script>
import ContentSlotCode from \\"./content-slot-jsx.raw\\";

export default {
  name: \\"slot-code\\",
  components: { ContentSlotCode: ContentSlotCode },
};
</script>"
`;

exports[`Vue > jsx > Javascript Test > SlotNamed 1`] = `
"<template>
  <div>
    <slot name=\\"top\\"></slot>
    <slot name=\\"left\\">Default left</slot>
    <slot>Default Child</slot>
  </div>
</template>

<script>
export default {
  name: \\"slot-code\\",
};
</script>"
`;

exports[`Vue > jsx > Javascript Test > Stamped.io 1`] = `
"<template>
  <div :data-user=\\"name\\">
    <button @click=\\"showReviewPrompt = true\\">Write a review</button>

    <template v-if=\\"showReviewPrompt || 'asdf'\\">
      <input placeholder=\\"Email\\" />

      <input placeholder=\\"Title\\" class=\\"input\\" />

      <textarea
        placeholder=\\"How was your experience?\\"
        class=\\"textarea\\"
      ></textarea>

      <button
        class=\\"button\\"
        @click=\\"
          $event.preventDefault();
          showReviewPrompt = false;
        \\"
      >
        Submit
      </button>
    </template>

    <div class=\\"review\\" v-for=\\"(review, index) in reviews\\" :key=\\"review.id\\">
      <img class=\\"img\\" :src=\\"review.avatar\\" />
      <div
        :class=\\"
          _classStringToObject(showReviewPrompt ? 'bg-primary' : 'bg-secondary')
        \\"
      >
        <div>N: {{ index }}</div>
        <div>{{ review.author }}</div>
        <div>{{ review.reviewMessage }}</div>
      </div>
    </div>
  </div>
</template>

<script>
import { kebabCase } from \\"lodash\\";
import { snakeCase } from \\"lodash\\";

export default {
  name: \\"smile-reviews\\",

  props: [\\"apiKey\\", \\"productId\\"],

  data() {
    return { reviews: [], name: \\"test\\", showReviewPrompt: false };
  },

  mounted() {
    fetch(
      \`https://stamped.io/api/widget/reviews?storeUrl=builder-io.myshopify.com&apiKey=\${
        this.apiKey || \\"pubkey-8bbDq7W6w4sB3OWeM1HUy2s47702hM\\"
      }&productId=\${this.productId || \\"2410511106127\\"}\`
    )
      .then((res) => res.json())
      .then((data) => {
        this.reviews = data.data;
      });
  },

  methods: {
    kebabCaseValue() {
      return kebabCase(\\"testThat\\");
    },
    snakeCaseValue() {
      return snakeCase(\\"testThis\\");
    },
    _classStringToObject(str) {
      const obj = {};
      if (typeof str !== \\"string\\") {
        return obj;
      }
      const classNames = str.trim().split(/\\\\s+/);
      for (const name of classNames) {
        obj[name] = true;
      }
      return obj;
    },
  },
};
</script>

<style scoped>
.input {
  display: block;
}
.textarea {
  display: block;
}
.button {
  display: block;
}
.review {
  margin: 10px;
  padding: 10px;
  background: white;
  display: flex;
  border-radius: 5px;
  box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
}
.img {
  height: 30px;
  width: 30px;
  margin-right: 10px;
}
</style>"
`;

exports[`Vue > jsx > Javascript Test > Submit 1`] = `
"<template>
  <button type=\\"submit\\" v-bind=\\"attributes\\">
    {{ text }}
  </button>
</template>

<script>
export default {
  name: \\"submit-button\\",

  props: [\\"attributes\\", \\"text\\"],
};
</script>"
`;

exports[`Vue > jsx > Javascript Test > Text 1`] = `
"<template>
  <div
    :contentEditable=\\"allowEditingText || undefined\\"
    :data-name=\\"{
      test: name || 'any name',
    }\\"
    v-html=\\"text || content || name || '<p class=\\\\'text-lg\\\\'>my name</p>'\\"
  ></div>
</template>

<script>
import { Builder } from \\"@builder.io/sdk\\";

export default {
  name: \\"text\\",

  props: [\\"text\\", \\"content\\"],

  data() {
    return { name: \\"Decadef20\\" };
  },
};
</script>"
`;

exports[`Vue > jsx > Javascript Test > Textarea 1`] = `
"<template>
  <textarea
    :placeholder=\\"placeholder\\"
    :name=\\"name\\"
    :value=\\"value\\"
    :defaultValue=\\"defaultValue\\"
    v-bind=\\"attributes\\"
  ></textarea>
</template>

<script>
export default {
  name: \\"textarea\\",

  props: [\\"attributes\\", \\"placeholder\\", \\"name\\", \\"value\\", \\"defaultValue\\"],
};
</script>"
`;

exports[`Vue > jsx > Javascript Test > Video 1`] = `
"<template>
  <video
    preload=\\"none\\"
    :style=\\"{
      width: '100%',
      height: '100%',
      ...attributes?.style,
      objectFit: fit,
      objectPosition: position,
      // Hack to get object fit to work as expected and
      // not have the video overflow
      borderRadius: 1,
    }\\"
    :key=\\"video || 'no-src'\\"
    :poster=\\"posterImage\\"
    :autoplay=\\"autoPlay\\"
    :muted=\\"muted\\"
    :controls=\\"controls\\"
    :loop=\\"loop\\"
    v-bind=\\"attributes\\"
  ></video>
</template>

<script>
export default {
  name: \\"video\\",

  props: [
    \\"attributes\\",
    \\"fit\\",
    \\"position\\",
    \\"video\\",
    \\"posterImage\\",
    \\"autoPlay\\",
    \\"muted\\",
    \\"controls\\",
    \\"loop\\",
  ],
};
</script>"
`;

exports[`Vue > jsx > Javascript Test > arrowFunctionInUseStore 1`] = `
"<template>
  <div>Hello {{ name }}</div>
</template>

<script>
export default {
  name: \\"my-component\\",

  data() {
    return { name: \\"steve\\" };
  },

  methods: {
    setName(value) {
      this.name = value;
    },
    updateNameWithArrowFn(value) {
      this.name = value;
    },
  },
};
</script>"
`;

exports[`Vue > jsx > Javascript Test > basicForwardRef 1`] = `
"<template>
  <div>
    <input
      class=\\"input\\"
      ref=\\"inputRef\\"
      :value=\\"name\\"
      @input=\\"name = $event.target.value\\"
    />
  </div>
</template>

<script>
export default {
  name: \\"my-basic-forward-ref-component\\",

  props: [\\"inputRef\\"],

  data() {
    return { name: \\"PatrickJS\\" };
  },
};
</script>

<style scoped>
.input {
  color: red;
}
</style>"
`;

exports[`Vue > jsx > Javascript Test > basicForwardRefMetadata 1`] = `
"<template>
  <div>
    <input
      class=\\"input\\"
      ref=\\"inputRef\\"
      :value=\\"name\\"
      @input=\\"name = $event.target.value\\"
    />
  </div>
</template>

<script>
export default {
  name: \\"my-basic-forward-ref-component\\",

  props: [\\"inputRef\\"],

  data() {
    return { name: \\"PatrickJS\\" };
  },
};
</script>

<style scoped>
.input {
  color: red;
}
</style>"
`;

exports[`Vue > jsx > Javascript Test > basicOnUpdateReturn 1`] = `
"<template>
  <div>Hello! {{ name }}</div>
</template>

<script>
export default {
  name: \\"my-basic-on-update-return-component\\",

  data() {
    return { name: \\"PatrickJS\\" };
  },

  watch: {
    onUpdateHook0: {
      handler() {
        const controller = new AbortController();
        const signal = controller.signal;
        fetch(\\"https://patrickjs.com/api/resource.json\\", {
          signal,
        })
          .then((response) => response.json())
          .then((data) => {
            this.name = data.name;
          });
        return () => {
          if (!signal.aborted) {
            controller.abort();
          }
        };
      },
      immediate: true,
    },
  },

  computed: {
    onUpdateHook0() {
      return {
        0: this.name,
      };
    },
  },
};
</script>"
`;

exports[`Vue > jsx > Javascript Test > class + ClassName + css 1`] = `
"<template>
  <div class=\\"test2 test div\\">
    Hello! I can run in React, Vue, Solid, or Liquid!
  </div>
</template>

<script>
export default {
  name: \\"my-basic-component\\",
};
</script>

<style scoped>
.div {
  padding: 10px;
}
</style>"
`;

exports[`Vue > jsx > Javascript Test > class + css 1`] = `
"<template>
  <div class=\\"test div\\">Hello! I can run in React, Vue, Solid, or Liquid!</div>
</template>

<script>
export default {
  name: \\"my-basic-component\\",
};
</script>

<style scoped>
.div {
  padding: 10px;
}
</style>"
`;

exports[`Vue > jsx > Javascript Test > className + css 1`] = `
"<template>
  <div class=\\"test div\\">Hello! I can run in React, Vue, Solid, or Liquid!</div>
</template>

<script>
export default {
  name: \\"my-basic-component\\",
};
</script>

<style scoped>
.div {
  padding: 10px;
}
</style>"
`;

exports[`Vue > jsx > Javascript Test > className 1`] = `
"<template>
  <div>
    <div class=\\"no binding\\">Without Binding</div>

    <div :class=\\"_classStringToObject(bindings)\\">With binding</div>
  </div>
</template>

<script>
export default {
  name: \\"class-name-code\\",

  data() {
    return { bindings: \\"a binding\\" };
  },

  methods: {
    _classStringToObject(str) {
      const obj = {};
      if (typeof str !== \\"string\\") {
        return obj;
      }
      const classNames = str.trim().split(/\\\\s+/);
      for (const name of classNames) {
        obj[name] = true;
      }
      return obj;
    },
  },
};
</script>"
`;

exports[`Vue > jsx > Javascript Test > classState 1`] = `
"<template>
  <div :class=\\"_classStringToObject(classState + ' div')\\" :style=\\"styleState\\">
    Hello! I can run in React, Vue, Solid, or Liquid!
  </div>
</template>

<script>
export default {
  name: \\"my-basic-component\\",

  data() {
    return {
      classState: \\"testClassName\\",
      styleState: {
        color: \\"red\\",
      },
    };
  },

  methods: {
    _classStringToObject(str) {
      const obj = {};
      if (typeof str !== \\"string\\") {
        return obj;
      }
      const classNames = str.trim().split(/\\\\s+/);
      for (const name of classNames) {
        obj[name] = true;
      }
      return obj;
    },
  },
};
</script>

<style scoped>
.div {
  padding: 10px;
}
</style>"
`;

exports[`Vue > jsx > Javascript Test > componentWithContext 1`] = `
"<template>
  {{ foo.value }}
</template>

<script>
import Context1 from \\"@dummy/1\\";
import Context2 from \\"@dummy/2\\";

export default {
  name: \\"component-with-context\\",

  props: [\\"content\\"],

  provide() {
    const _this = this;
    return {
      [Context1.key]: {
        foo: \\"bar\\",
        content() {
          return _this.content;
        },
      },
      [Context2.key]: { bar: \\"baz\\" },
    };
  },
  inject: {
    foo: Context1.key,
  },
};
</script>"
`;

exports[`Vue > jsx > Javascript Test > componentWithContextMultiRoot 1`] = `"Vue 2 template should have a single root element"`;

exports[`Vue > jsx > Javascript Test > contentState 1`] = `
"<template>
  <div>setting context</div>
</template>

<script>
import BuilderContext from \\"@dummy/context.vue\\";

export default {
  name: \\"render-content\\",
  components: { BuilderContext: BuilderContext },
  props: [\\"content\\", \\"customComponents\\"],

  provide() {
    const _this = this;
    return {
      [BuilderContext.key]: {
        content: _this.content,
        registeredComponents: _this.customComponents,
      },
    };
  },
};
</script>"
`;

exports[`Vue > jsx > Javascript Test > defaultProps 1`] = `
"<template>
  <div>
    <template v-if=\\"link\\">
      <a
        :href=\\"link\\"
        :target=\\"openLinkInNewTab ? '_blank' : undefined\\"
        v-bind=\\"attributes\\"
      >
        {{ text }}
      </a>
    </template>

    <template v-if=\\"!link\\">
      <button type=\\"button\\" @click=\\"onClick($event)\\" v-bind=\\"attributes\\">
        {{ buttonText }}
      </button>
    </template>
  </div>
</template>

<script>
export default {
  name: \\"button\\",

  props: {
    link: { default: \\"https://builder.io/\\" },
    attributes: { default: undefined },
    openLinkInNewTab: { default: false },
    text: { default: \\"default text\\" },
    onClick: {
      default: () => {
        console.log(\\"hi\\");
      },
    },
    buttonText: { default: undefined },
  },
};
</script>"
`;

exports[`Vue > jsx > Javascript Test > defaultPropsOutsideComponent 1`] = `
"<template>
  <div>
    <template v-if=\\"link\\">
      <a
        :href=\\"link\\"
        :target=\\"openLinkInNewTab ? '_blank' : undefined\\"
        v-bind=\\"attributes\\"
      >
        {{ text }}
      </a>
    </template>

    <template v-if=\\"!link\\">
      <button type=\\"button\\" @click=\\"onClick($event)\\" v-bind=\\"attributes\\">
        {{ text }}
      </button>
    </template>
  </div>
</template>

<script>
export default {
  name: \\"button\\",

  props: {
    link: { default: \\"https://builder.io/\\" },
    attributes: { default: undefined },
    openLinkInNewTab: { default: false },
    text: { default: \\"default text\\" },
    onClick: { default: () => {} },
  },
};
</script>"
`;

exports[`Vue > jsx > Javascript Test > defaultValsWithTypes 1`] = `
"<template>
  <div>Hello {{ name || DEFAULT_VALUES.name }}</div>
</template>

<script>
const DEFAULT_VALUES = {
  name: \\"Sami\\",
};

export default {
  name: \\"component-with-types\\",

  props: [\\"name\\"],

  data() {
    return { DEFAULT_VALUES };
  },
};
</script>"
`;

exports[`Vue > jsx > Javascript Test > expressionState 1`] = `
"<template>
  <div>{{ refToUse }}</div>
</template>

<script>
export default {
  name: \\"my-component\\",

  props: [\\"componentRef\\"],

  data() {
    return {
      refToUse: !(this.componentRef instanceof Function)
        ? this.componentRef
        : null,
    };
  },
};
</script>"
`;

exports[`Vue > jsx > Javascript Test > import types 1`] = `
"<template>
  <render-block
    v-bind=\\"getRenderContentProps(renderContentProps.block, 0)\\"
  ></render-block>
</template>

<script>
import RenderBlock from \\"./builder-render-block.raw\\";

export default {
  name: \\"render-content\\",
  components: { RenderBlock: RenderBlock },
  props: [\\"renderContentProps\\"],

  methods: {
    getRenderContentProps(block, index) {
      return {
        block: block,
        index: index,
      };
    },
  },
};
</script>"
`;

exports[`Vue > jsx > Javascript Test > multipleOnUpdate 1`] = `
"<template>
  <div></div>
</template>

<script>
export default {
  name: \\"multiple-on-update\\",

  updated() {
    console.log(\\"Runs on every update/rerender\\");
    console.log(\\"Runs on every update/rerender as well\\");
  },
};
</script>"
`;

exports[`Vue > jsx > Javascript Test > multipleOnUpdateWithDeps 1`] = `
"<template>
  <div></div>
</template>

<script>
export default {
  name: \\"multiple-on-update-with-deps\\",

  data() {
    return { a: \\"a\\", b: \\"b\\", c: \\"c\\", d: \\"d\\" };
  },

  watch: {
    onUpdateHook0: {
      handler() {
        console.log(\\"Runs when a or b changes\\", this.a, this.b);

        if (this.a === \\"a\\") {
          this.a = \\"b\\";
        }
      },
      immediate: true,
    },
    onUpdateHook1: {
      handler() {
        console.log(\\"Runs when c or d changes\\", this.c, this.d);

        if (this.a === \\"a\\") {
          this.a = \\"b\\";
        }
      },
      immediate: true,
    },
  },

  computed: {
    onUpdateHook0() {
      return {
        0: this.a,
        1: this.b,
      };
    },
    onUpdateHook1() {
      return {
        0: this.c,
        1: this.d,
      };
    },
  },
};
</script>"
`;

exports[`Vue > jsx > Javascript Test > multipleSpreads 1`] = `
"<template>
  <input v-bind=\\"{ ...attrs, ...$props }\\" />
</template>

<script>
export default {
  name: \\"my-basic-component\\",

  data() {
    return {
      attrs: {
        hello: \\"world\\",
      },
    };
  },
};
</script>"
`;

exports[`Vue > jsx > Javascript Test > nestedShow 1`] = `
"<template>
  <div v-if=\\"!Boolean(conditionA)\\">else-condition-A</div>

  <div v-else-if=\\"!Boolean(!conditionB)\\">else-condition-B</div>

  <div v-else>if condition A and condition B</div>
</template>

<script>
export default {
  name: \\"nested-show\\",

  props: [\\"conditionA\\", \\"conditionB\\"],
};
</script>"
`;

exports[`Vue > jsx > Javascript Test > nestedStyles 1`] = `
"<template>
  <div class=\\"div\\">Hello world</div>
</template>

<script>
export default {
  name: \\"nested-styles\\",
};
</script>

<style scoped>
.div {
  display: flex;
  --bar: red;
  color: var(--bar);
}
@media (max-width: env(--mobile)) {
  .div {
    display: block;
  }
}
.div:hover {
  display: flex;
}
.div:active {
  display: inline;
}
.div .nested-selector {
  display: grid;
}
.div .nested-selector:hover {
  display: block;
}
.div.nested-selector:active {
  display: inline-block;
}
</style>"
`;

exports[`Vue > jsx > Javascript Test > onInit & onMount 1`] = `
"<template>
  <div></div>
</template>

<script>
export default {
  name: \\"on-init\\",

  created() {
    console.log(\\"onInit\\");
  },
  mounted() {
    console.log(\\"onMount\\");
  },
};
</script>"
`;

exports[`Vue > jsx > Javascript Test > onInit 1`] = `
"<template>
  <div>Default name defined by parent {{ name }}</div>
</template>

<script>
export const defaultValues = {
  name: \\"PatrickJS\\",
};

export default {
  name: \\"on-init\\",

  props: [\\"name\\"],

  data() {
    return { name: \\"\\" };
  },

  created() {
    this.name = defaultValues.name || this.name;
    console.log(\\"set defaults with props\\");
  },
};
</script>"
`;

exports[`Vue > jsx > Javascript Test > onMount 1`] = `
"<template>
  <div></div>
</template>

<script>
export default {
  name: \\"comp\\",

  mounted() {
    console.log(\\"Runs on mount\\");
  },

  unmounted() {
    console.log(\\"Runs on unMount\\");
  },
};
</script>"
`;

exports[`Vue > jsx > Javascript Test > onUpdate 1`] = `
"<template>
  <div></div>
</template>

<script>
export default {
  name: \\"on-update\\",

  updated() {
    console.log(\\"Runs on every update/rerender\\");
  },
};
</script>"
`;

exports[`Vue > jsx > Javascript Test > onUpdateWithDeps 1`] = `
"<template>
  <div></div>
</template>

<script>
export default {
  name: \\"on-update-with-deps\\",

  props: [\\"size\\"],

  data() {
    return { a: \\"a\\", b: \\"b\\" };
  },

  watch: {
    onUpdateHook0: {
      handler() {
        console.log(
          \\"Runs when a, b or size changes\\",
          this.a,
          this.b,
          this.size
        );
      },
      immediate: true,
    },
  },

  computed: {
    onUpdateHook0() {
      return {
        0: this.a,
        1: this.b,
        2: this.size,
      };
    },
  },
};
</script>"
`;

exports[`Vue > jsx > Javascript Test > preserveExportOrLocalStatement 1`] = `
"<template>
  <div></div>
</template>

<script>
const b = 3;
const foo = () => {};
export const a = 3;
export const bar = () => {};
export function run(value) {}

export default {
  name: \\"my-basic-component\\",
};
</script>"
`;

exports[`Vue > jsx > Javascript Test > preserveTyping 1`] = `
"<template>
  <div>Hello! I can run in React, Vue, Solid, or Liquid! {{ name }}</div>
</template>

<script>
export default {
  name: \\"my-basic-component\\",

  props: [\\"name\\"],
};
</script>"
`;

exports[`Vue > jsx > Javascript Test > propsDestructure 1`] = `
"<template>
  <div>
    <slot /> {{ type }}
    Hello! I can run in React, Vue, Solid, or Liquid!
  </div>
</template>

<script>
export default {
  name: \\"my-basic-component\\",

  props: [\\"type\\"],

  data() {
    return { name: \\"Decadef20\\" };
  },
};
</script>"
`;

exports[`Vue > jsx > Javascript Test > propsInterface 1`] = `
"<template>
  <div>Hello! I can run in React, Vue, Solid, or Liquid! {{ name }}</div>
</template>

<script>
export default {
  name: \\"my-basic-component\\",

  props: [\\"name\\"],
};
</script>"
`;

exports[`Vue > jsx > Javascript Test > propsType 1`] = `
"<template>
  <div>Hello! I can run in React, Vue, Solid, or Liquid! {{ name }}</div>
</template>

<script>
export default {
  name: \\"my-basic-component\\",

  props: [\\"name\\"],
};
</script>"
`;

exports[`Vue > jsx > Javascript Test > referencingFunInsideHook 1`] = `
"<template>
  <div></div>
</template>

<script>
export default {
  name: \\"on-update\\",

  updated() {
    this.foo({
      someOption: this.bar,
    });
  },

  methods: {
    foo: function foo(params) {},
    bar: function bar() {},
    zoo: function zoo() {
      const params = {
        cb: this.bar,
      };
    },
  },
};
</script>"
`;

exports[`Vue > jsx > Javascript Test > renderBlock 1`] = `
"<template>
  <component
    v-if=\\"!Boolean(shouldWrap)\\"
    :is=\\"renderComponentTag\\"
    v-bind=\\"renderComponentProps\\"
  ></component>
  <component
    v-else-if=\\"isEmptyHtmlElement(tag)\\"
    :is=\\"tag\\"
    v-bind=\\"{ ...attributes, ...actions }\\"
  ></component>
  <render-repeated-block
    v-for=\\"(data, index) in repeatItemData\\"
    :repeatContext=\\"data.context\\"
    :block=\\"data.block\\"
    :key=\\"index\\"
  ></render-repeated-block>
  <component v-else :is=\\"tag\\" v-bind=\\"{ ...attributes, ...actions }\\">
    <component
      :is=\\"renderComponentTag\\"
      v-bind=\\"renderComponentProps\\"
    ></component>

    <render-block
      v-for=\\"(child, index) in childrenWithoutParentComponent\\"
      :block=\\"child\\"
      :context=\\"childrenContext\\"
      :key=\\"'render-block-' + child.id\\"
    ></render-block>
    <block-styles
      v-for=\\"(child, index) in childrenWithoutParentComponent\\"
      :block=\\"child\\"
      :context=\\"childrenContext\\"
      :key=\\"'block-style-' + child.id\\"
    ></block-styles>
  </component>
</template>

<script>
import { getBlockActions } from \\"../../functions/get-block-actions.js\\";
import { getBlockComponentOptions } from \\"../../functions/get-block-component-options.js\\";
import { getBlockProperties } from \\"../../functions/get-block-properties.js\\";
import { getBlockTag } from \\"../../functions/get-block-tag.js\\";
import { getProcessedBlock } from \\"../../functions/get-processed-block.js\\";
import { evaluate } from \\"../../functions/evaluate.js\\";
import BlockStyles from \\"./block-styles.vue\\";
import { isEmptyHtmlElement } from \\"./render-block.helpers.js\\";
import RenderRepeatedBlock from \\"./render-repeated-block.vue\\";
import { TARGET } from \\"../../constants/target.js\\";
import { extractTextStyles } from \\"../../functions/extract-text-styles.js\\";
import RenderComponentWithContext from \\"./render-component-with-context.vue\\";
import RenderComponent from \\"./render-component.vue\\";
import { getReactNativeBlockStyles } from \\"../../functions/get-react-native-block-styles.js\\";

export default {
  name: \\"render-block\\",
  components: {
    RenderRepeatedBlock: RenderRepeatedBlock,
    BlockStyles: BlockStyles,
    RenderComponentWithContext: RenderComponentWithContext,
    RenderComponent: RenderComponent,
  },
  props: [\\"block\\", \\"context\\"],

  data() {
    return { isEmptyHtmlElement };
  },

  computed: {
    component() {
      const componentName = getProcessedBlock({
        block: this.block,
        state: this.context.state,
        context: this.context.context,
        shouldEvaluateBindings: false,
      }).component?.name;

      if (!componentName) {
        return null;
      }

      const ref = this.context.registeredComponents[componentName];

      if (!ref) {
        // TODO: Public doc page with more info about this message
        console.warn(\`
          Could not find a registered component named \\"\${componentName}\\".
          If you registered it, is the file that registered it imported by the file that needs to render it?\`);
        return undefined;
      } else {
        return ref;
      }
    },
    tag() {
      return getBlockTag(this.useBlock);
    },
    useBlock() {
      return this.repeatItemData
        ? this.block
        : getProcessedBlock({
            block: this.block,
            state: this.context.state,
            context: this.context.context,
            shouldEvaluateBindings: true,
          });
    },
    actions() {
      return getBlockActions({
        block: this.useBlock,
        state: this.context.state,
        context: this.context.context,
      });
    },
    attributes() {
      const blockProperties = getBlockProperties(this.useBlock);
      return {
        ...blockProperties,
        ...(TARGET === \\"reactNative\\"
          ? {
              style: getReactNativeBlockStyles({
                block: this.useBlock,
                context: this.context,
                blockStyles: blockProperties.style,
              }),
            }
          : {}),
      };
    },
    shouldWrap() {
      return !this.component?.noWrap;
    },
    renderComponentProps() {
      return {
        blockChildren: this.useChildren,
        componentRef: this.component?.component,
        componentOptions: {
          ...getBlockComponentOptions(this.useBlock),

          /**
           * These attributes are passed to the wrapper element when there is one. If \`noWrap\` is set to true, then
           * they are provided to the component itself directly.
           */
          ...(this.shouldWrap
            ? {}
            : {
                attributes: { ...this.attributes, ...this.actions },
              }),
          customBreakpoints: this.childrenContext?.content?.meta?.breakpoints,
        },
        context: this.childrenContext,
      };
    },
    useChildren() {
      // TO-DO: When should \`canHaveChildren\` dictate rendering?
      // This is currently commented out because some Builder components (e.g. Box) do not have \`canHaveChildren: true\`,
      // but still receive and need to render children.
      // return state.componentInfo?.canHaveChildren ? state.useBlock.children : [];
      return this.useBlock.children ?? [];
    },
    childrenWithoutParentComponent() {
      /**
       * When there is no \`componentRef\`, there might still be children that need to be rendered. In this case,
       * we render them outside of \`componentRef\`.
       * NOTE: We make sure not to render this if \`repeatItemData\` is non-null, because that means we are rendering an array of
       * blocks, and the children will be repeated within those blocks.
       */
      const shouldRenderChildrenOutsideRef =
        !this.component?.component && !this.repeatItemData;
      return shouldRenderChildrenOutsideRef ? this.useChildren : [];
    },
    repeatItemData() {
      /**
       * we don't use \`state.useBlock\` here because the processing done within its logic includes evaluating the block's bindings,
       * which will not work if there is a repeat.
       */
      const { repeat, ...blockWithoutRepeat } = this.block;

      if (!repeat?.collection) {
        return undefined;
      }

      const itemsArray = evaluate({
        code: repeat.collection,
        state: this.context.state,
        context: this.context.context,
      });

      if (!Array.isArray(itemsArray)) {
        return undefined;
      }

      const collectionName = repeat.collection.split(\\".\\").pop();
      const itemNameToUse =
        repeat.itemName || (collectionName ? collectionName + \\"Item\\" : \\"item\\");
      const repeatArray = itemsArray.map((item, index) => ({
        context: {
          ...this.context,
          state: {
            ...this.context.state,
            $index: index,
            $item: item,
            [itemNameToUse]: item,
            [\`$\${itemNameToUse}Index\`]: index,
          },
        },
        block: blockWithoutRepeat,
      }));
      return repeatArray;
    },
    inheritedTextStyles() {
      if (TARGET !== \\"reactNative\\") {
        return {};
      }

      const styles = getReactNativeBlockStyles({
        block: this.useBlock,
        context: this.context,
        blockStyles: this.attributes.style,
      });
      return extractTextStyles(styles);
    },
    childrenContext() {
      return {
        apiKey: this.context.apiKey,
        state: this.context.state,
        content: this.context.content,
        context: this.context.context,
        registeredComponents: this.context.registeredComponents,
        inheritedStyles: this.inheritedTextStyles,
      };
    },
    renderComponentTag() {
      if (TARGET === \\"reactNative\\") {
        return RenderComponentWithContext;
      } else if (TARGET === \\"vue3\\") {
        // vue3 expects a string for the component tag
        return \\"RenderComponent\\";
      } else {
        return RenderComponent;
      }
    },
  },
};
</script>"
`;

exports[`Vue > jsx > Javascript Test > renderContentExample 1`] = `
"<template>
  <div class=\\"div\\" @click=\\"trackClick(content.id)\\">
    <render-blocks :blocks=\\"content.blocks\\"></render-blocks>
  </div>
</template>

<script>
import {
  sendComponentsToVisualEditor,
  dispatchNewContentToVisualEditor,
  trackClick,
} from \\"@dummy/injection-js\\";
import BuilderContext from \\"@dummy/context.vue\\";
import RenderBlocks from \\"@dummy/RenderBlocks.lite.tsx\\";

export default {
  name: \\"render-content\\",
  components: { RenderBlocks: RenderBlocks, BuilderContext: BuilderContext },
  props: [\\"content\\", \\"customComponents\\"],

  data() {
    return { trackClick };
  },

  provide() {
    const _this = this;
    return {
      [BuilderContext.key]: {
        get content() {
          return 3;
        },
        get registeredComponents() {
          return 4;
        },
      },
    };
  },

  mounted() {
    sendComponentsToVisualEditor(this.customComponents);
  },

  watch: {
    onUpdateHook0: {
      handler() {
        dispatchNewContentToVisualEditor(this.content);
      },
      immediate: true,
    },
  },

  computed: {
    onUpdateHook0() {
      return {
        0: this.content,
      };
    },
  },
};
</script>

<style scoped>
.div {
  display: flex;
  flex-direction: columns;
}
</style>"
`;

exports[`Vue > jsx > Javascript Test > rootFragmentMultiNode 1`] = `"Vue 2 template should have a single root element"`;

exports[`Vue > jsx > Javascript Test > rootShow 1`] = `
"<template>
  <div v-if=\\"foo === 'bar'\\">Bar</div>
  <div v-else>Foo</div>
</template>

<script>
export default {
  name: \\"render-styles\\",

  props: [\\"foo\\"],
};
</script>"
`;

exports[`Vue > jsx > Javascript Test > self-referencing component 1`] = `
"<template>
  <div>
    {{ name }}

    <template v-if=\\"name === 'Batman'\\">
      <my-component name=\\"Bruce Wayne\\"></my-component>
    </template>
  </div>
</template>

<script>
export default {
  name: \\"my-component\\",

  props: [\\"name\\"],
};
</script>"
`;

exports[`Vue > jsx > Javascript Test > self-referencing component with children 1`] = `
"<template>
  <div>
    {{ name }}
    <slot />

    <template v-if=\\"name === 'Batman'\\">
      <my-component name=\\"Bruce\\">
        <div>Wayne</div>
      </my-component>
    </template>
  </div>
</template>

<script>
export default {
  name: \\"my-component\\",

  props: [\\"name\\"],
};
</script>"
`;

exports[`Vue > jsx > Javascript Test > showWithFor 1`] = `
"<template>
  <div v-for=\\"(item, index) in items\\" v-if=\\"conditionA\\" :key=\\"idx\\">
    {{ item }}
  </div>
  <div v-else>else-condition-A</div>
</template>

<script>
export default {
  name: \\"nested-show\\",

  props: [\\"conditionA\\", \\"items\\"],
};
</script>"
`;

exports[`Vue > jsx > Javascript Test > showWithRootText 1`] = `
"<template>
  ContentA

  <div v-else>else-condition-A</div>
</template>

<script>
export default {
  name: \\"show-root-text\\",

  props: [\\"conditionA\\"],
};
</script>"
`;

exports[`Vue > jsx > Javascript Test > spreadAttrs 1`] = `
"<template>
  <input v-bind=\\"attrs\\" />
</template>

<script>
export default {
  name: \\"my-basic-component\\",
};
</script>"
`;

exports[`Vue > jsx > Javascript Test > spreadNestedProps 1`] = `
"<template>
  <input v-bind=\\"nested\\" />
</template>

<script>
export default {
  name: \\"my-basic-component\\",

  props: [\\"nested\\"],
};
</script>"
`;

exports[`Vue > jsx > Javascript Test > spreadProps 1`] = `
"<template>
  <input v-bind=\\"$props\\" />
</template>

<script>
export default {
  name: \\"my-basic-component\\",
};
</script>"
`;

exports[`Vue > jsx > Javascript Test > styleClassAndCss 1`] = `
"<template>
  <div
    class=\\"builder-column div\\"
    :style=\\"{
      width: '100%',
    }\\"
  ></div>
</template>

<script>
export default {
  name: \\"my-component\\",
};
</script>

<style scoped>
.div {
  display: flex;
  flex-direction: column;
  align-items: stretch;
}
</style>"
`;

exports[`Vue > jsx > Javascript Test > subComponent 1`] = `
"<template>
  <foo></foo>
</template>

<script>
import Foo from \\"./foo-sub-component.vue\\";

export default {
  name: \\"sub-component\\",
  components: { Foo: Foo },
};
</script>"
`;

exports[`Vue > jsx > Javascript Test > svgComponent 1`] = `
"<template>
  <svg
    fill=\\"none\\"
    role=\\"img\\"
    :viewBox=\\"'0 0 ' + 42 + ' ' + 42\\"
    :width=\\"42\\"
    :height=\\"42\\"
  >
    <defs>
      <filter id=\\"prefix__filter0_f\\" filterUnits=\\"userSpaceOnUse\\">
        <feFlood result=\\"BackgroundImageFix\\"></feFlood>
        <feBlend
          in=\\"SourceGraphic\\"
          in2=\\"BackgroundImageFix\\"
          result=\\"shape\\"
        ></feBlend>
        <feGaussianBlur
          result=\\"effect1_foregroundBlur\\"
          :stdDeviation=\\"7\\"
        ></feGaussianBlur>
      </filter>
    </defs>
  </svg>
</template>

<script>
export default {
  name: \\"svg-component\\",
};
</script>"
`;

exports[`Vue > jsx > Javascript Test > typeDependency 1`] = `
"<template>
  <div>{{ foo }}</div>
</template>

<script>
export default {
  name: \\"type-dependency\\",

  props: [\\"foo\\"],
};
</script>"
`;

exports[`Vue > jsx > Javascript Test > use-style 1`] = `
"<template>
  <button type=\\"button\\">Button</button>
</template>

<script>
export default {
  name: \\"my-component\\",
};
</script>

<style scoped>
button {
  background: blue;
  color: white;
  font-size: 12px;
  outline: 1px solid black;
}
</style>"
`;

exports[`Vue > jsx > Javascript Test > use-style-and-css 1`] = `
"<template>
  <button type=\\"button\\" class=\\"button\\">Button</button>
</template>

<script>
export default {
  name: \\"my-component\\",
};
</script>

<style scoped>
.button {
  background: blue;
  color: white;
}

button {
  font-size: 12px;
  outline: 1px solid black;
}
</style>"
`;

exports[`Vue > jsx > Javascript Test > use-style-outside-component 1`] = `
"<template>
  <button type=\\"button\\">Button</button>
</template>

<script>
export default {
  name: \\"my-component\\",
};
</script>

<style scoped>
button {
  background: blue;
  color: white;
  font-size: 12px;
  outline: 1px solid black;
}
</style>"
`;

exports[`Vue > jsx > Remove Internal mitosis package 1`] = `
"<template>
  <div>Hello {{ name }}! I can run in React, Qwik, Vue, Solid, or Liquid!</div>
</template>

<script>
export default {
  name: \\"my-basic-component\\",

  data() {
    return { name: \\"PatrickJS\\" };
  },
};
</script>"
`;

exports[`Vue > jsx > Typescript Test > AdvancedRef 1`] = `
"<template>
  <div>
    <template v-if=\\"showInput\\">
      <input
        class=\\"input\\"
        ref=\\"inputRef\\"
        :value=\\"name\\"
        @blur=\\"onBlur()\\"
        @input=\\"name = $event.target.value\\"
      />
      <label for=\\"cars\\" ref=\\"inputNoArgRef\\"> Choose a car: </label>
      <select name=\\"cars\\" id=\\"cars\\">
        <option value=\\"supra\\">GR Supra</option>
        <option value=\\"86\\">GR 86</option>
      </select>
    </template>

    Hello
    {{ lowerCaseName() }}! I can run in React, Qwik, Vue, Solid, or Web
    Component!
  </div>
</template>

<script lang=\\"ts\\">
export interface Props {
  showInput: boolean;
}

export default {
  name: \\"my-basic-ref-component\\",

  props: [\\"showInput\\"],

  data() {
    return { name: \\"PatrickJS\\" };
  },

  watch: {
    onUpdateHook0: {
      handler() {
        console.log(\\"Received an update\\");
      },
      immediate: true,
    },
  },

  computed: {
    onUpdateHook0() {
      return {
        0: this.$refs.inputRef,
        1: this.$refs.inputNoArgRef,
      };
    },
  },

  methods: {
    onBlur: function onBlur() {
      // Maintain focus
      this.$refs.inputRef.focus();
    },
    lowerCaseName: function lowerCaseName() {
      return this.name.toLowerCase();
    },
  },
};
</script>

<style scoped>
.input {
  color: red;
}
</style>"
`;

exports[`Vue > jsx > Typescript Test > Basic 1`] = `
"<template>
  <div class=\\"test div\\">
    <input
      :value=\\"DEFAULT_VALUES.name || name\\"
      @input=\\"name = $event.target.value\\"
    />
    Hello! I can run in React, Vue, Solid, or Liquid!
  </div>
</template>

<script lang=\\"ts\\">
export interface MyBasicComponentProps {
  id: string;
}

export const DEFAULT_VALUES = {
  name: \\"Steve\\",
};

export default {
  name: \\"my-basic-component\\",

  data() {
    return { name: \\"Steve\\", age: 1, sports: [\\"\\"], DEFAULT_VALUES };
  },

  methods: {
    underscore_fn_name() {
      return \\"bar\\";
    },
  },
};
</script>

<style scoped>
.div {
  padding: 10px;
}
</style>"
`;

exports[`Vue > jsx > Typescript Test > Basic 2`] = `
"<template>
  <div>
    <template v-if=\\"person === name\\">
      <input
        :value=\\"name\\"
        @input=\\"name = $event.target.value + ' and ' + person\\"
      />

      Hello
      {{ person }}
      ! I can run in Qwik, Web Component, React, Vue, Solid, or Liquid!
    </template>
  </div>
</template>

<script lang=\\"ts\\">
export default {
  name: \\"my-basic-for-show-component\\",

  data() {
    return { name: \\"PatrickJS\\", names: [\\"Steve\\", \\"PatrickJS\\"] };
  },
};
</script>"
`;

exports[`Vue > jsx > Typescript Test > Basic Context 1`] = `
"<template>
  <div>
    {{ myService.method(\\"hello\\") + name }}
    Hello! I can run in React, Vue, Solid, or Liquid!
    <input @input=\\"onChange\\" />
  </div>
</template>

<script lang=\\"ts\\">
import { Injector, createInjector, MyService } from \\"@dummy/injection-js\\";

export default {
  name: \\"my-basic-component\\",

  data() {
    return { name: \\"PatrickJS\\" };
  },

  provide() {
    const _this = this;
    return {
      [Injector.key]: createInjector(),
    };
  },
  inject: {
    myService: MyService.key,
  },
  created() {
    const hi = this.myService.method(\\"hi\\");
    console.log(hi);
  },
  mounted() {
    const bye = this.myService.method(\\"hi\\");
    console.log(bye);
  },

  methods: {
    onChange: function onChange() {
      const change = this.myService.method(\\"change\\");
      console.log(change);
    },
  },
};
</script>"
`;

exports[`Vue > jsx > Typescript Test > Basic OnMount Update 1`] = `
"<template>
  <div>Hello {{ name }}</div>
</template>

<script lang=\\"ts\\">
export interface Props {
  hi: string;
  bye: string;
}

export default {
  name: \\"my-basic-on-mount-update-component\\",

  props: [\\"hi\\", \\"bye\\"],

  data() {
    return { name: \\"PatrickJS\\", names: [\\"Steve\\", \\"PatrickJS\\"] };
  },

  created() {
    this.name = \\"PatrickJS onInit\\" + this.hi;
  },
  mounted() {
    this.name = \\"PatrickJS onMount\\" + this.bye;
  },
};
</script>"
`;

exports[`Vue > jsx > Typescript Test > Basic Outputs 1`] = `
"<template>
  <div></div>
</template>

<script lang=\\"ts\\">
export default {
  name: \\"my-basic-outputs-component\\",

  props: [\\"onMessage\\", \\"onEvent\\", \\"message\\"],

  data() {
    return { name: \\"PatrickJS\\" };
  },

  mounted() {
    this.onMessage(this.name);
    this.onEvent(this.message);
  },
};
</script>"
`;

exports[`Vue > jsx > Typescript Test > Basic Outputs Meta 1`] = `
"<template>
  <div></div>
</template>

<script lang=\\"ts\\">
export default {
  name: \\"my-basic-outputs-component\\",

  props: [\\"onMessage\\", \\"onEvent\\", \\"message\\"],

  data() {
    return { name: \\"PatrickJS\\" };
  },

  mounted() {
    this.onMessage(this.name);
    this.onEvent(this.message);
  },
};
</script>"
`;

exports[`Vue > jsx > Typescript Test > BasicAttribute 1`] = `
"<template>
  <input autocapitalize=\\"on\\" autocomplete=\\"on\\" :spellcheck=\\"true\\" />
</template>

<script lang=\\"ts\\">
export default {
  name: \\"my-component\\",
};
</script>"
`;

exports[`Vue > jsx > Typescript Test > BasicBooleanAttribute 1`] = `
"<template>
  <div>
    <slot /> {{ type }}
    <my-boolean-attribute-component
      :toggle=\\"true\\"
    ></my-boolean-attribute-component>
    <my-boolean-attribute-component
      :toggle=\\"true\\"
    ></my-boolean-attribute-component>
    <my-boolean-attribute-component
      :list=\\"null\\"
    ></my-boolean-attribute-component>
  </div>
</template>

<script lang=\\"ts\\">
type Props = {
  children: any;
  type: string;
};

import MyBooleanAttributeComponent from \\"./basic-boolean-attribute-component.raw\\";

export default {
  name: \\"my-boolean-attribute\\",
  components: { MyBooleanAttributeComponent: MyBooleanAttributeComponent },
  props: [\\"type\\"],
};
</script>"
`;

exports[`Vue > jsx > Typescript Test > BasicChildComponent 1`] = `
"<template>
  <div>
    <my-basic-component :id=\\"dev\\"></my-basic-component>
    <div>
      <my-basic-on-mount-update-component
        :hi=\\"name\\"
        :bye=\\"dev\\"
      ></my-basic-on-mount-update-component>
    </div>
  </div>
</template>

<script lang=\\"ts\\">
import MyBasicComponent from \\"./basic.raw\\";
import MyBasicOnMountUpdateComponent from \\"./basic-onMount-update.raw\\";

export default {
  name: \\"my-basic-child-component\\",
  components: {
    MyBasicComponent: MyBasicComponent,
    MyBasicOnMountUpdateComponent: MyBasicOnMountUpdateComponent,
  },

  data() {
    return { name: \\"Steve\\", dev: \\"PatrickJS\\" };
  },
};
</script>"
`;

exports[`Vue > jsx > Typescript Test > BasicFor 1`] = `
"<template>
  <div>
    <input
      :value=\\"name\\"
      @input=\\"name = $event.target.value + ' and ' + person\\"
    />

    Hello
    {{ person }}
    ! I can run in Qwik, Web Component, React, Vue, Solid, or Liquid!
  </div>
</template>

<script lang=\\"ts\\">
export default {
  name: \\"my-basic-for-component\\",

  data() {
    return { name: \\"PatrickJS\\", names: [\\"Steve\\", \\"PatrickJS\\"] };
  },

  mounted() {
    console.log(\\"onMount code\\");
  },
};
</script>"
`;

exports[`Vue > jsx > Typescript Test > BasicRef 1`] = `
"<template>
  <div>
    <template v-if=\\"showInput\\">
      <input
        class=\\"input\\"
        ref=\\"inputRef\\"
        :value=\\"name\\"
        @blur=\\"onBlur()\\"
        @input=\\"name = $event.target.value\\"
      />
      <label for=\\"cars\\" ref=\\"inputNoArgRef\\"> Choose a car: </label>
      <select name=\\"cars\\" id=\\"cars\\">
        <option value=\\"supra\\">GR Supra</option>
        <option value=\\"86\\">GR 86</option>
      </select>
    </template>

    Hello
    {{ lowerCaseName() }}! I can run in React, Qwik, Vue, Solid, or Web
    Component!
  </div>
</template>

<script lang=\\"ts\\">
export interface Props {
  showInput: boolean;
}

export default {
  name: \\"my-basic-ref-component\\",

  props: [\\"showInput\\"],

  data() {
    return { name: \\"PatrickJS\\" };
  },

  methods: {
    onBlur: function onBlur() {
      // Maintain focus
      this.$refs.inputRef.focus();
    },
    lowerCaseName: function lowerCaseName() {
      return this.name.toLowerCase();
    },
  },
};
</script>

<style scoped>
.input {
  color: red;
}
</style>"
`;

exports[`Vue > jsx > Typescript Test > BasicRefAssignment 1`] = `
"<template>
  <div>
    <button @click=\\"handlerClick($event)\\">Click</button>
  </div>
</template>

<script lang=\\"ts\\">
export interface Props {
  showInput: boolean;
}

export default {
  name: \\"my-basic-ref-assignment-component\\",

  methods: {
    handlerClick: function handlerClick(event: Event) {
      event.preventDefault();
      console.log(\\"current value\\", this.$refs.holdValueRef);
      this.$refs.holdValueRef = this.$refs.holdValueRef + \\"JS\\";
    },
  },
};
</script>"
`;

exports[`Vue > jsx > Typescript Test > BasicRefPrevious 1`] = `
"<template>
  <div>
    <h1>Now: {{ count }}, before: {{ this.$refs.prevCount }}</h1>
    <button @click=\\"count += 1\\">Increment</button>
  </div>
</template>

<script lang=\\"ts\\">
export interface Props {
  showInput: boolean;
}

export function usePrevious<T>(value: T) {
  // The ref object is a generic container whose current property is mutable ...
  // ... and can hold any value, similar to an instance property on a class
  let ref = useRef<T>(null); // Store current value in ref

  onUpdate(() => {
    ref = value;
  }, [value]); // Only re-run if value changes
  // Return previous value (happens before update in useEffect above)

  return ref;
}

export default {
  name: \\"my-previous-component\\",

  data() {
    return { count: 0 };
  },

  watch: {
    onUpdateHook0: {
      handler() {
        this.$refs.prevCount = this.count;
      },
      immediate: true,
    },
  },

  computed: {
    onUpdateHook0() {
      return {
        0: this.count,
      };
    },
  },
};
</script>"
`;

exports[`Vue > jsx > Typescript Test > Button 1`] = `
"<template>
  <div>
    <template v-if=\\"link\\">
      <a
        :href=\\"link\\"
        :target=\\"openLinkInNewTab ? '_blank' : undefined\\"
        v-bind=\\"attributes\\"
      >
        {{ text }}
      </a>
    </template>

    <template v-if=\\"!link\\">
      <button type=\\"button\\" v-bind=\\"attributes\\">
        {{ text }}
      </button>
    </template>
  </div>
</template>

<script lang=\\"ts\\">
export interface ButtonProps {
  attributes?: any;
  text?: string;
  link?: string;
  openLinkInNewTab?: boolean;
}

export default {
  name: \\"button\\",

  props: [\\"link\\", \\"attributes\\", \\"openLinkInNewTab\\", \\"text\\"],
};
</script>"
`;

exports[`Vue > jsx > Typescript Test > Columns 1`] = `
"<template>
  <div class=\\"builder-columns div\\">
    <div
      class=\\"builder-column div-2\\"
      v-for=\\"(column, index) in columns\\"
      :key=\\"index\\"
    >
      {{ column.content }} {{ index }}
    </div>
  </div>
</template>

<script lang=\\"ts\\">
type Column = {
  content: any; // TODO: Implement this when support for dynamic CSS lands

  width?: number;
};
export interface ColumnProps {
  columns?: Column[]; // TODO: Implement this when support for dynamic CSS lands

  space?: number; // TODO: Implement this when support for dynamic CSS lands

  stackColumnsAt?: \\"tablet\\" | \\"mobile\\" | \\"never\\"; // TODO: Implement this when support for dynamic CSS lands

  reverseColumnsWhenStacked?: boolean;
}

export default {
  name: \\"column\\",

  props: [\\"columns\\", \\"space\\"],

  methods: {
    getColumns() {
      return this.columns || [];
    },
    getGutterSize() {
      return typeof this.space === \\"number\\" ? this.space || 0 : 20;
    },
    getWidth(index: number) {
      const columns = this.getColumns();
      return (columns[index] && columns[index].width) || 100 / columns.length;
    },
    getColumnCssWidth(index: number) {
      const columns = this.getColumns();
      const gutterSize = this.getGutterSize();
      const subtractWidth =
        (gutterSize * (columns.length - 1)) / columns.length;
      return \`calc(\${this.getWidth(index)}% - \${subtractWidth}px)\`;
    },
  },
};
</script>

<style scoped>
.div {
  display: flex;
  flex-direction: column;
  align-items: stretch;
  line-height: normal;
}
@media (max-width: 999px) {
  .div {
    flex-direction: row;
  }
}
@media (max-width: 639px) {
  .div {
    flex-direction: row-reverse;
  }
}
.div-2 {
  flex-grow: 1;
}
</style>"
`;

exports[`Vue > jsx > Typescript Test > ContentSlotHtml 1`] = `
"<template>
  <div>
    <slot name=\\"testing\\"></slot>
    <div>
      <hr />
    </div>
    <div>
      <slot />
    </div>
  </div>
</template>

<script lang=\\"ts\\">
type Props = {
  [key: string]: string | JSX.Element;
  slotTesting: JSX.Element;
};

import { JSX } from \\"../../../../jsx-runtime\\";

export default {
  name: \\"content-slot-code\\",
};
</script>"
`;

exports[`Vue > jsx > Typescript Test > ContentSlotJSX 1`] = `
"<template>
  <div
    v-if=\\"$slots.reference\\"
    :name=\\"$slots.content ? 'name1' : 'name2'\\"
    :title=\\"$slots.content ? 'title1' : 'title2'\\"
    @click=\\"show()\\"
    :class=\\"_classStringToObject(cls)\\"
    v-bind=\\"attributes\\"
  >
    <template v-if=\\"showContent && $slots.content\\">
      <slot name=\\"content\\">{{ content }}</slot>
    </template>

    <div>
      <hr />
    </div>
    <div><slot /></div>
  </div>
</template>

<script lang=\\"ts\\">
type Props = {
  [key: string]: string | JSX.Element;
};

import { JSX } from \\"../../../../jsx-runtime\\";

export default {
  name: \\"content-slot-jsx-code\\",

  props: { attributes: { default: undefined }, content: { default: \\"\\" } },

  data() {
    return { name: \\"king\\", showContent: false };
  },

  computed: {
    cls() {
      return this.$slots.content && this.$slots.default
        ? \`\${this.name}-content\`
        : \\"\\";
    },
  },

  methods: {
    show() {
      this.$slots.content ? 1 : \\"\\";
    },
    _classStringToObject(str) {
      const obj = {};
      if (typeof str !== \\"string\\") {
        return obj;
      }
      const classNames = str.trim().split(/\\\\s+/);
      for (const name of classNames) {
        obj[name] = true;
      }
      return obj;
    },
  },
};
</script>"
`;

exports[`Vue > jsx > Typescript Test > CustomCode 1`] = `
"<template>
  <div
    ref=\\"elem\\"
    :class=\\"
      _classStringToObject(
        'builder-custom-code' + (replaceNodes ? ' replace-nodes' : '')
      )
    \\"
    v-html=\\"code\\"
  ></div>
</template>

<script lang=\\"ts\\">
export interface CustomCodeProps {
  code: string;
  replaceNodes?: boolean;
}

export default {
  name: \\"custom-code\\",

  props: [\\"replaceNodes\\", \\"code\\"],

  data() {
    return { scriptsInserted: [], scriptsRun: [] };
  },

  mounted() {
    this.findAndRunScripts();
  },

  methods: {
    findAndRunScripts() {
      // TODO: Move this function to standalone one in '@builder.io/utils'
      if (this.$refs.elem && typeof window !== \\"undefined\\") {
        /** @type {HTMLScriptElement[]} */
        const scripts = this.$refs.elem.getElementsByTagName(\\"script\\");

        for (let i = 0; i < scripts.length; i++) {
          const script = scripts[i];

          if (script.src) {
            if (this.scriptsInserted.includes(script.src)) {
              continue;
            }

            this.scriptsInserted.push(script.src);
            const newScript = document.createElement(\\"script\\");
            newScript.async = true;
            newScript.src = script.src;
            document.head.appendChild(newScript);
          } else if (
            !script.type ||
            [
              \\"text/javascript\\",
              \\"application/javascript\\",
              \\"application/ecmascript\\",
            ].includes(script.type)
          ) {
            if (this.scriptsRun.includes(script.innerText)) {
              continue;
            }

            try {
              this.scriptsRun.push(script.innerText);
              new Function(script.innerText)();
            } catch (error) {
              console.warn(\\"\`CustomCode\`: Error running script:\\", error);
            }
          }
        }
      }
    },
    _classStringToObject(str) {
      const obj = {};
      if (typeof str !== \\"string\\") {
        return obj;
      }
      const classNames = str.trim().split(/\\\\s+/);
      for (const name of classNames) {
        obj[name] = true;
      }
      return obj;
    },
  },
};
</script>"
`;

exports[`Vue > jsx > Typescript Test > Embed 1`] = `
"<template>
  <div
    ref=\\"elem\\"
    :class=\\"
      _classStringToObject(
        'builder-custom-code' + (replaceNodes ? ' replace-nodes' : '')
      )
    \\"
    v-html=\\"code\\"
  ></div>
</template>

<script lang=\\"ts\\">
export interface CustomCodeProps {
  code: string;
  replaceNodes?: boolean;
}

export default {
  name: \\"custom-code\\",

  props: [\\"replaceNodes\\", \\"code\\"],

  data() {
    return { scriptsInserted: [], scriptsRun: [] };
  },

  mounted() {
    this.findAndRunScripts();
  },

  methods: {
    findAndRunScripts() {
      // TODO: Move this function to standalone one in '@builder.io/utils'
      if (this.$refs.elem && typeof window !== \\"undefined\\") {
        /** @type {HTMLScriptElement[]} */
        const scripts = this.$refs.elem.getElementsByTagName(\\"script\\");

        for (let i = 0; i < scripts.length; i++) {
          const script = scripts[i];

          if (script.src) {
            if (this.scriptsInserted.includes(script.src)) {
              continue;
            }

            this.scriptsInserted.push(script.src);
            const newScript = document.createElement(\\"script\\");
            newScript.async = true;
            newScript.src = script.src;
            document.head.appendChild(newScript);
          } else if (
            !script.type ||
            [
              \\"text/javascript\\",
              \\"application/javascript\\",
              \\"application/ecmascript\\",
            ].includes(script.type)
          ) {
            if (this.scriptsRun.includes(script.innerText)) {
              continue;
            }

            try {
              this.scriptsRun.push(script.innerText);
              new Function(script.innerText)();
            } catch (error) {
              console.warn(\\"\`CustomCode\`: Error running script:\\", error);
            }
          }
        }
      }
    },
    _classStringToObject(str) {
      const obj = {};
      if (typeof str !== \\"string\\") {
        return obj;
      }
      const classNames = str.trim().split(/\\\\s+/);
      for (const name of classNames) {
        obj[name] = true;
      }
      return obj;
    },
  },
};
</script>"
`;

exports[`Vue > jsx > Typescript Test > Form 1`] = `
"<template>
  <form
    :validate=\\"validate\\"
    ref=\\"formRef\\"
    :action=\\"!sendWithJs && action\\"
    :method=\\"method\\"
    :name=\\"name\\"
    @submit=\\"onSubmit($event)\\"
    v-bind=\\"attributes\\"
  >
    <template v-if=\\"builderBlock && builderBlock.children\\">
      <builder-block-component
        v-for=\\"(block, index) in builderBlock?.children\\"
        :block=\\"block\\"
        :index=\\"index\\"
        :key=\\"block.id\\"
      ></builder-block-component>
    </template>

    <template v-if=\\"submissionState === 'error'\\">
      <builder-blocks
        dataPath=\\"errorMessage\\"
        :blocks=\\"errorMessage\\"
      ></builder-blocks>
    </template>

    <template v-if=\\"submissionState === 'sending'\\">
      <builder-blocks
        dataPath=\\"sendingMessage\\"
        :blocks=\\"sendingMessage\\"
      ></builder-blocks>
    </template>

    <template v-if=\\"submissionState === 'error' && responseData\\">
      <pre class=\\"builder-form-error-text pre\\">
        {{ JSON.stringify(responseData, null, 2) }}
      </pre>
    </template>

    <template v-if=\\"submissionState === 'success'\\">
      <builder-blocks
        dataPath=\\"successMessage\\"
        :blocks=\\"successMessage\\"
      ></builder-blocks>
    </template>
  </form>
</template>

<script lang=\\"ts\\">
export interface FormProps {
  attributes?: any;
  name?: string;
  action?: string;
  validate?: boolean;
  method?: string;
  builderBlock?: BuilderElement;
  sendSubmissionsTo?: string;
  sendSubmissionsToEmail?: string;
  sendWithJs?: boolean;
  contentType?: string;
  customHeaders?: {
    [key: string]: string;
  };
  successUrl?: string;
  previewState?: FormState;
  successMessage?: BuilderElement[];
  errorMessage?: BuilderElement[];
  sendingMessage?: BuilderElement[];
  resetFormOnSubmit?: boolean;
  errorMessagePath?: string;
}
export type FormState = \\"unsubmitted\\" | \\"sending\\" | \\"success\\" | \\"error\\";

import { BuilderBlock as BuilderBlockComponent } from \\"@fake\\";
import { BuilderElement, Builder, builder } from \\"@builder.io/sdk\\";
import { BuilderBlocks } from \\"@fake\\";
import { set } from \\"@fake\\";
import { get } from \\"@fake\\";

export default {
  name: \\"form-component\\",
  components: {
    BuilderBlockComponent: BuilderBlockComponent,
    BuilderBlocks: BuilderBlocks,
  },
  props: [
    \\"previewState\\",
    \\"sendWithJs\\",
    \\"sendSubmissionsTo\\",
    \\"action\\",
    \\"customHeaders\\",
    \\"contentType\\",
    \\"sendSubmissionsToEmail\\",
    \\"name\\",
    \\"method\\",
    \\"errorMessagePath\\",
    \\"resetFormOnSubmit\\",
    \\"successUrl\\",
    \\"validate\\",
    \\"attributes\\",
    \\"builderBlock\\",
    \\"errorMessage\\",
    \\"sendingMessage\\",
    \\"successMessage\\",
  ],

  data() {
    return {
      formState: \\"unsubmitted\\",
      responseData: null,
      formErrorMessage: \\"\\",
      builder,
    };
  },

  computed: {
    submissionState() {
      return (Builder.isEditing && this.previewState) || this.formState;
    },
  },

  methods: {
    onSubmit(
      event: Event & {
        currentTarget: HTMLFormElement;
      }
    ) {
      const sendWithJs = this.sendWithJs || this.sendSubmissionsTo === \\"email\\";

      if (this.sendSubmissionsTo === \\"zapier\\") {
        event.preventDefault();
      } else if (sendWithJs) {
        if (!(this.action || this.sendSubmissionsTo === \\"email\\")) {
          event.preventDefault();
          return;
        }

        event.preventDefault();
        const el = event.currentTarget;
        const headers = this.customHeaders || {};
        let body: any;
        const formData = new FormData(el); // TODO: maybe support null

        const formPairs: {
          key: string;
          value: File | boolean | number | string | FileList;
        }[] = Array.from(
          event.currentTarget.querySelectorAll(\\"input,select,textarea\\")
        )
          .filter((el) => !!(el as HTMLInputElement).name)
          .map((el) => {
            let value: any;
            const key = (el as HTMLImageElement).name;

            if (el instanceof HTMLInputElement) {
              if (el.type === \\"radio\\") {
                if (el.checked) {
                  value = el.name;
                  return {
                    key,
                    value,
                  };
                }
              } else if (el.type === \\"checkbox\\") {
                value = el.checked;
              } else if (el.type === \\"number\\" || el.type === \\"range\\") {
                const num = el.valueAsNumber;

                if (!isNaN(num)) {
                  value = num;
                }
              } else if (el.type === \\"file\\") {
                // TODO: one vs multiple files
                value = el.files;
              } else {
                value = el.value;
              }
            } else {
              value = (el as HTMLInputElement).value;
            }

            return {
              key,
              value,
            };
          });
        let contentType = this.contentType;

        if (this.sendSubmissionsTo === \\"email\\") {
          contentType = \\"multipart/form-data\\";
        }

        Array.from(formPairs).forEach(({ value }) => {
          if (
            value instanceof File ||
            (Array.isArray(value) && value[0] instanceof File) ||
            value instanceof FileList
          ) {
            contentType = \\"multipart/form-data\\";
          }
        }); // TODO: send as urlEncoded or multipart by default
        // because of ease of use and reliability in browser API
        // for encoding the form?

        if (contentType !== \\"application/json\\") {
          body = formData;
        } else {
          // Json
          const json = {};
          Array.from(formPairs).forEach(({ value, key }) => {
            set(json, key, value);
          });
          body = JSON.stringify(json);
        }

        if (contentType && contentType !== \\"multipart/form-data\\") {
          if (
            /* Zapier doesn't allow content-type header to be sent from browsers */
            !(sendWithJs && this.action?.includes(\\"zapier.com\\"))
          ) {
            headers[\\"content-type\\"] = contentType;
          }
        }

        const presubmitEvent = new CustomEvent(\\"presubmit\\", {
          detail: {
            body,
          },
        });

        if (this.$refs.formRef) {
          this.$refs.formRef.dispatchEvent(presubmitEvent);

          if (presubmitEvent.defaultPrevented) {
            return;
          }
        }

        this.formState = \\"sending\\";
        const formUrl = \`\${
          builder.env === \\"dev\\" ? \\"http://localhost:5000\\" : \\"https://builder.io\\"
        }/api/v1/form-submit?apiKey=\${builder.apiKey}&to=\${btoa(
          this.sendSubmissionsToEmail || \\"\\"
        )}&name=\${encodeURIComponent(this.name || \\"\\")}\`;
        fetch(
          this.sendSubmissionsTo === \\"email\\" ? formUrl : this.action!,
          /* TODO: throw error if no action URL */
          {
            body,
            headers,
            method: this.method || \\"post\\",
          }
        ).then(
          async (res) => {
            let body;
            const contentType = res.headers.get(\\"content-type\\");

            if (contentType && contentType.indexOf(\\"application/json\\") !== -1) {
              body = await res.json();
            } else {
              body = await res.text();
            }

            if (!res.ok && this.errorMessagePath) {
              /* TODO: allow supplying an error formatter function */
              let message = get(body, this.errorMessagePath);

              if (message) {
                if (typeof message !== \\"string\\") {
                  /* TODO: ideally convert json to yaml so it woul dbe like
           error: - email has been taken */
                  message = JSON.stringify(message);
                }

                this.formErrorMessage = message;
              }
            }

            this.responseData = body;
            this.formState = res.ok ? \\"success\\" : \\"error\\";

            if (res.ok) {
              const submitSuccessEvent = new CustomEvent(\\"submit:success\\", {
                detail: {
                  res,
                  body,
                },
              });

              if (this.$refs.formRef) {
                this.$refs.formRef.dispatchEvent(submitSuccessEvent);

                if (submitSuccessEvent.defaultPrevented) {
                  return;
                }
                /* TODO: option to turn this on/off? */

                if (this.resetFormOnSubmit !== false) {
                  this.$refs.formRef.reset();
                }
              }
              /* TODO: client side route event first that can be preventDefaulted */

              if (this.successUrl) {
                if (this.$refs.formRef) {
                  const event = new CustomEvent(\\"route\\", {
                    detail: {
                      url: this.successUrl,
                    },
                  });
                  this.$refs.formRef.dispatchEvent(event);

                  if (!event.defaultPrevented) {
                    location.href = this.successUrl;
                  }
                } else {
                  location.href = this.successUrl;
                }
              }
            }
          },
          (err) => {
            const submitErrorEvent = new CustomEvent(\\"submit:error\\", {
              detail: {
                error: err,
              },
            });

            if (this.$refs.formRef) {
              this.$refs.formRef.dispatchEvent(submitErrorEvent);

              if (submitErrorEvent.defaultPrevented) {
                return;
              }
            }

            this.responseData = err;
            this.formState = \\"error\\";
          }
        );
      }
    },
  },
};
</script>

<style scoped>
.pre {
  padding: 10px;
  color: red;
  text-align: center;
}
</style>"
`;

exports[`Vue > jsx > Typescript Test > Image 1`] = `
"<template>
  <div>
    <picture ref=\\"pictureRef\\">
      <template v-if=\\"!useLazyLoading() || load\\">
        <img
          :alt=\\"altText\\"
          :aria-role=\\"altText ? 'presentation' : undefined\\"
          :class=\\"
            _classStringToObject(
              'builder-image' + (_class ? ' ' + _class : '') + ' img'
            )
          \\"
          :src=\\"image\\"
          @load=\\"setLoaded()\\"
          :srcset=\\"srcset\\"
          :sizes=\\"sizes\\"
        />
      </template>

      <source :srcset=\\"srcset\\" />
    </picture>
    <slot />
  </div>
</template>

<script lang=\\"ts\\">
// TODO: AMP Support?
export interface ImageProps {
  _class?: string;
  image: string;
  sizes?: string;
  lazy?: boolean;
  height?: number;
  width?: number;
  altText?: string;
  backgroundSize?: string;
  backgroundPosition?: string; // TODO: Support generating Builder.io and or Shopify \`srcset\`s when needed

  srcset?: string; // TODO: Implement support for custom aspect ratios

  aspectRatio?: number; // TODO: This might not work as expected in terms of positioning

  children?: any;
}

export default {
  name: \\"image\\",

  props: [\\"lazy\\", \\"altText\\", \\"_class\\", \\"image\\", \\"srcset\\", \\"sizes\\"],

  data() {
    return { scrollListener: null, imageLoaded: false, load: false };
  },

  mounted() {
    if (this.useLazyLoading()) {
      // throttled scroll capture listener
      const listener = () => {
        if (this.$refs.pictureRef) {
          const rect = this.$refs.pictureRef.getBoundingClientRect();
          const buffer = window.innerHeight / 2;

          if (rect.top < window.innerHeight + buffer) {
            setLoad(true);
            this.scrollListener = null;
            window.removeEventListener(\\"scroll\\", listener);
          }
        }
      };

      this.scrollListener = listener;
      window.addEventListener(\\"scroll\\", listener, {
        capture: true,
        passive: true,
      });
      listener();
    }
  },

  unmounted() {
    if (this.scrollListener) {
      window.removeEventListener(\\"scroll\\", this.scrollListener);
    }
  },

  methods: {
    setLoaded() {
      this.imageLoaded = true;
    },
    useLazyLoading() {
      // TODO: Add more checks here, like testing for real web browsers
      return !!this.lazy && this.isBrowser();
    },
    isBrowser: function isBrowser() {
      return (
        typeof window !== \\"undefined\\" &&
        window.navigator.product != \\"ReactNative\\"
      );
    },
    _classStringToObject(str) {
      const obj = {};
      if (typeof str !== \\"string\\") {
        return obj;
      }
      const classNames = str.trim().split(/\\\\s+/);
      for (const name of classNames) {
        obj[name] = true;
      }
      return obj;
    },
  },
};
</script>

<style scoped>
.img {
  opacity: 1;
  transition: opacity 0.2s ease-in-out;
  object-fit: cover;
  object-position: center;
}
</style>"
`;

exports[`Vue > jsx > Typescript Test > Image State 1`] = `
"<template>
  <div>
    <img class=\\"custom-class\\" :src=\\"item\\" :key=\\"itemIndex\\" />
  </div>
</template>

<script lang=\\"ts\\">
export default {
  name: \\"img-state-component\\",

  data() {
    return { canShow: true, images: [\\"http://example.com/qwik.png\\"] };
  },
};
</script>"
`;

exports[`Vue > jsx > Typescript Test > Img 1`] = `
"<template>
  <img
    :style=\\"{
      objectFit: backgroundSize || 'cover',
      objectPosition: backgroundPosition || 'center',
    }\\"
    :key=\\"(Builder.isEditing && imgSrc) || 'default-key'\\"
    :alt=\\"altText\\"
    :src=\\"imgSrc\\"
    v-bind=\\"attributes\\"
  />
</template>

<script lang=\\"ts\\">
export interface ImgProps {
  attributes?: any;
  imgSrc?: string;
  altText?: string;
  backgroundSize?: \\"cover\\" | \\"contain\\";
  backgroundPosition?:
    | \\"center\\"
    | \\"top\\"
    | \\"left\\"
    | \\"right\\"
    | \\"bottom\\"
    | \\"top left\\"
    | \\"top right\\"
    | \\"bottom left\\"
    | \\"bottom right\\";
}

import { Builder } from \\"@builder.io/sdk\\";

export default {
  name: \\"img-component\\",

  props: [
    \\"backgroundSize\\",
    \\"backgroundPosition\\",
    \\"attributes\\",
    \\"imgSrc\\",
    \\"altText\\",
  ],
};
</script>"
`;

exports[`Vue > jsx > Typescript Test > Input 1`] = `
"<template>
  <input
    :key=\\"Builder.isEditing && defaultValue ? defaultValue : 'default-key'\\"
    :placeholder=\\"placeholder\\"
    :type=\\"type\\"
    :name=\\"name\\"
    :value=\\"value\\"
    :defaultValue=\\"defaultValue\\"
    :required=\\"required\\"
    v-bind=\\"attributes\\"
  />
</template>

<script lang=\\"ts\\">
export interface FormInputProps {
  type?: string;
  attributes?: any;
  name?: string;
  value?: string;
  placeholder?: string;
  defaultValue?: string;
  required?: boolean;
}

import { Builder } from \\"@builder.io/sdk\\";

export default {
  name: \\"form-input-component\\",

  props: [
    \\"attributes\\",
    \\"defaultValue\\",
    \\"placeholder\\",
    \\"type\\",
    \\"name\\",
    \\"value\\",
    \\"required\\",
  ],
};
</script>"
`;

exports[`Vue > jsx > Typescript Test > RawText 1`] = `
"<template>
  <span
    :class=\\"_classStringToObject(attributes?.class || attributes?.className)\\"
    v-html=\\"text || ''\\"
  ></span>
</template>

<script lang=\\"ts\\">
export interface RawTextProps {
  attributes?: any;
  text?: string; // builderBlock?: any;
}

export default {
  name: \\"raw-text\\",

  props: [\\"attributes\\", \\"text\\"],

  methods: {
    _classStringToObject(str) {
      const obj = {};
      if (typeof str !== \\"string\\") {
        return obj;
      }
      const classNames = str.trim().split(/\\\\s+/);
      for (const name of classNames) {
        obj[name] = true;
      }
      return obj;
    },
  },
};
</script>"
`;

exports[`Vue > jsx > Typescript Test > Section 1`] = `
"<template>
  <section
    :style=\\"
      maxWidth && typeof maxWidth === 'number'
        ? {
            maxWidth: maxWidth,
          }
        : undefined
    \\"
    v-bind=\\"attributes\\"
  >
    <slot />
  </section>
</template>

<script lang=\\"ts\\">
export interface SectionProps {
  maxWidth?: number;
  attributes?: any;
  children?: any;
}

export default {
  name: \\"section-component\\",

  props: [\\"attributes\\", \\"maxWidth\\"],
};
</script>"
`;

exports[`Vue > jsx > Typescript Test > Section 2`] = `
"<template>
  <section
    v-for=\\"(item, index) in items\\"
    v-if=\\"max\\"
    :style=\\"{
      maxWidth: item + max,
    }\\"
    :key=\\"index\\"
    v-bind=\\"attributes\\"
  >
    <slot />
  </section>
</template>

<script lang=\\"ts\\">
export interface SectionProps {
  maxWidth?: number;
  attributes?: any;
  children?: any;
}

export default {
  name: \\"section-state-component\\",

  props: [\\"attributes\\"],

  data() {
    return { max: 42, items: [42] };
  },
};
</script>"
`;

exports[`Vue > jsx > Typescript Test > Select 1`] = `
"<template>
  <select
    :value=\\"value\\"
    :key=\\"Builder.isEditing && defaultValue ? defaultValue : 'default-key'\\"
    :defaultValue=\\"defaultValue\\"
    :name=\\"name\\"
    v-bind=\\"attributes\\"
  >
    <option
      v-for=\\"(option, index) in options\\"
      :value=\\"option.value\\"
      :data-index=\\"index\\"
      :key=\\"index\\"
    >
      {{ option.name || option.value }}
    </option>
  </select>
</template>

<script lang=\\"ts\\">
export interface FormSelectProps {
  options?: {
    name?: string;
    value: string;
  }[];
  attributes?: any;
  name?: string;
  value?: string;
  defaultValue?: string;
}

import { Builder } from \\"@builder.io/sdk\\";

export default {
  name: \\"select-component\\",

  props: [\\"attributes\\", \\"value\\", \\"defaultValue\\", \\"name\\", \\"options\\"],
};
</script>"
`;

exports[`Vue > jsx > Typescript Test > SlotDefault 1`] = `
"<template>
  <div>
    <slot>
      <div class=\\"default-slot\\">Default content</div>
    </slot>
  </div>
</template>

<script lang=\\"ts\\">
type Props = {
  [key: string]: string;
};

export default {
  name: \\"slot-code\\",
};
</script>"
`;

exports[`Vue > jsx > Typescript Test > SlotHtml 1`] = `
"<template>
  <div>
    <content-slot-code>
      <template #testing>
        <div>Hello</div>
      </template>
    </content-slot-code>
  </div>
</template>

<script lang=\\"ts\\">
type Props = {
  [key: string]: string;
};

import ContentSlotCode from \\"./content-slot-jsx.raw\\";

export default {
  name: \\"slot-code\\",
  components: { ContentSlotCode: ContentSlotCode },
};
</script>"
`;

exports[`Vue > jsx > Typescript Test > SlotJsx 1`] = `
"<template>
  <div>
    <content-slot-code :slotTesting=\\"<div>Hello</div>\\"></content-slot-code>
  </div>
</template>

<script lang=\\"ts\\">
type Props = {
  [key: string]: string;
};

import ContentSlotCode from \\"./content-slot-jsx.raw\\";

export default {
  name: \\"slot-code\\",
  components: { ContentSlotCode: ContentSlotCode },
};
</script>"
`;

exports[`Vue > jsx > Typescript Test > SlotNamed 1`] = `
"<template>
  <div>
    <slot name=\\"top\\"></slot>
    <slot name=\\"left\\">Default left</slot>
    <slot>Default Child</slot>
  </div>
</template>

<script lang=\\"ts\\">
type Props = {
  [key: string]: string;
};

export default {
  name: \\"slot-code\\",
};
</script>"
`;

exports[`Vue > jsx > Typescript Test > Stamped.io 1`] = `
"<template>
  <div :data-user=\\"name\\">
    <button @click=\\"showReviewPrompt = true\\">Write a review</button>

    <template v-if=\\"showReviewPrompt || 'asdf'\\">
      <input placeholder=\\"Email\\" />

      <input placeholder=\\"Title\\" class=\\"input\\" />

      <textarea
        placeholder=\\"How was your experience?\\"
        class=\\"textarea\\"
      ></textarea>

      <button
        class=\\"button\\"
        @click=\\"
          $event.preventDefault();
          showReviewPrompt = false;
        \\"
      >
        Submit
      </button>
    </template>

    <div class=\\"review\\" v-for=\\"(review, index) in reviews\\" :key=\\"review.id\\">
      <img class=\\"img\\" :src=\\"review.avatar\\" />
      <div
        :class=\\"
          _classStringToObject(showReviewPrompt ? 'bg-primary' : 'bg-secondary')
        \\"
      >
        <div>N: {{ index }}</div>
        <div>{{ review.author }}</div>
        <div>{{ review.reviewMessage }}</div>
      </div>
    </div>
  </div>
</template>

<script lang=\\"ts\\">
type SmileReviewsProps = {
  productId: string;
  apiKey: string;
};

import { kebabCase } from \\"lodash\\";
import { snakeCase } from \\"lodash\\";

export default {
  name: \\"smile-reviews\\",

  props: [\\"apiKey\\", \\"productId\\"],

  data() {
    return { reviews: [], name: \\"test\\", showReviewPrompt: false };
  },

  mounted() {
    fetch(
      \`https://stamped.io/api/widget/reviews?storeUrl=builder-io.myshopify.com&apiKey=\${
        this.apiKey || \\"pubkey-8bbDq7W6w4sB3OWeM1HUy2s47702hM\\"
      }&productId=\${this.productId || \\"2410511106127\\"}\`
    )
      .then((res) => res.json())
      .then((data) => {
        this.reviews = data.data;
      });
  },

  methods: {
    kebabCaseValue() {
      return kebabCase(\\"testThat\\");
    },
    snakeCaseValue() {
      return snakeCase(\\"testThis\\");
    },
    _classStringToObject(str) {
      const obj = {};
      if (typeof str !== \\"string\\") {
        return obj;
      }
      const classNames = str.trim().split(/\\\\s+/);
      for (const name of classNames) {
        obj[name] = true;
      }
      return obj;
    },
  },
};
</script>

<style scoped>
.input {
  display: block;
}
.textarea {
  display: block;
}
.button {
  display: block;
}
.review {
  margin: 10px;
  padding: 10px;
  background: white;
  display: flex;
  border-radius: 5px;
  box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
}
.img {
  height: 30px;
  width: 30px;
  margin-right: 10px;
}
</style>"
`;

exports[`Vue > jsx > Typescript Test > Submit 1`] = `
"<template>
  <button type=\\"submit\\" v-bind=\\"attributes\\">
    {{ text }}
  </button>
</template>

<script lang=\\"ts\\">
export interface ButtonProps {
  attributes?: any;
  text?: string;
}

export default {
  name: \\"submit-button\\",

  props: [\\"attributes\\", \\"text\\"],
};
</script>"
`;

exports[`Vue > jsx > Typescript Test > Text 1`] = `
"<template>
  <div
    :contentEditable=\\"allowEditingText || undefined\\"
    :data-name=\\"{
      test: name || 'any name',
    }\\"
    v-html=\\"text || content || name || '<p class=\\\\'text-lg\\\\'>my name</p>'\\"
  ></div>
</template>

<script lang=\\"ts\\">
export interface TextProps {
  attributes?: any;
  rtlMode: boolean;
  text?: string;
  content?: string;
  builderBlock?: any;
}

import { Builder } from \\"@builder.io/sdk\\";

export default {
  name: \\"text\\",

  props: [\\"text\\", \\"content\\"],

  data() {
    return { name: \\"Decadef20\\" };
  },
};
</script>"
`;

exports[`Vue > jsx > Typescript Test > Textarea 1`] = `
"<template>
  <textarea
    :placeholder=\\"placeholder\\"
    :name=\\"name\\"
    :value=\\"value\\"
    :defaultValue=\\"defaultValue\\"
    v-bind=\\"attributes\\"
  ></textarea>
</template>

<script lang=\\"ts\\">
export interface TextareaProps {
  attributes?: any;
  name?: string;
  value?: string;
  defaultValue?: string;
  placeholder?: string;
}

export default {
  name: \\"textarea\\",

  props: [\\"attributes\\", \\"placeholder\\", \\"name\\", \\"value\\", \\"defaultValue\\"],
};
</script>"
`;

exports[`Vue > jsx > Typescript Test > Video 1`] = `
"<template>
  <video
    preload=\\"none\\"
    :style=\\"{
      width: '100%',
      height: '100%',
      ...attributes?.style,
      objectFit: fit,
      objectPosition: position,
      // Hack to get object fit to work as expected and
      // not have the video overflow
      borderRadius: 1,
    }\\"
    :key=\\"video || 'no-src'\\"
    :poster=\\"posterImage\\"
    :autoplay=\\"autoPlay\\"
    :muted=\\"muted\\"
    :controls=\\"controls\\"
    :loop=\\"loop\\"
    v-bind=\\"attributes\\"
  ></video>
</template>

<script lang=\\"ts\\">
export interface VideoProps {
  attributes?: any;
  video?: string;
  autoPlay?: boolean;
  controls?: boolean;
  muted?: boolean;
  loop?: boolean;
  playsInline?: boolean;
  aspectRatio?: number;
  width?: number;
  height?: number;
  fit?: \\"contain\\" | \\"cover\\" | \\"fill\\";
  position?:
    | \\"center\\"
    | \\"top\\"
    | \\"left\\"
    | \\"right\\"
    | \\"bottom\\"
    | \\"top left\\"
    | \\"top right\\"
    | \\"bottom left\\"
    | \\"bottom right\\";
  posterImage?: string;
  lazyLoad?: boolean;
}

export default {
  name: \\"video\\",

  props: [
    \\"attributes\\",
    \\"fit\\",
    \\"position\\",
    \\"video\\",
    \\"posterImage\\",
    \\"autoPlay\\",
    \\"muted\\",
    \\"controls\\",
    \\"loop\\",
  ],
};
</script>"
`;

exports[`Vue > jsx > Typescript Test > arrowFunctionInUseStore 1`] = `
"<template>
  <div>Hello {{ name }}</div>
</template>

<script lang=\\"ts\\">
export default {
  name: \\"my-component\\",

  data() {
    return { name: \\"steve\\" };
  },

  methods: {
    setName(value) {
      this.name = value;
    },
    updateNameWithArrowFn(value) {
      this.name = value;
    },
  },
};
</script>"
`;

exports[`Vue > jsx > Typescript Test > basicForwardRef 1`] = `
"<template>
  <div>
    <input
      class=\\"input\\"
      ref=\\"inputRef\\"
      :value=\\"name\\"
      @input=\\"name = $event.target.value\\"
    />
  </div>
</template>

<script lang=\\"ts\\">
export interface Props {
  showInput: boolean;
  inputRef: HTMLInputElement;
}

export default {
  name: \\"my-basic-forward-ref-component\\",

  props: [\\"inputRef\\"],

  data() {
    return { name: \\"PatrickJS\\" };
  },
};
</script>

<style scoped>
.input {
  color: red;
}
</style>"
`;

exports[`Vue > jsx > Typescript Test > basicForwardRefMetadata 1`] = `
"<template>
  <div>
    <input
      class=\\"input\\"
      ref=\\"inputRef\\"
      :value=\\"name\\"
      @input=\\"name = $event.target.value\\"
    />
  </div>
</template>

<script lang=\\"ts\\">
export interface Props {
  showInput: boolean;
  inputRef: HTMLInputElement;
}

export default {
  name: \\"my-basic-forward-ref-component\\",

  props: [\\"inputRef\\"],

  data() {
    return { name: \\"PatrickJS\\" };
  },
};
</script>

<style scoped>
.input {
  color: red;
}
</style>"
`;

exports[`Vue > jsx > Typescript Test > basicOnUpdateReturn 1`] = `
"<template>
  <div>Hello! {{ name }}</div>
</template>

<script lang=\\"ts\\">
export default {
  name: \\"my-basic-on-update-return-component\\",

  data() {
    return { name: \\"PatrickJS\\" };
  },

  watch: {
    onUpdateHook0: {
      handler() {
        const controller = new AbortController();
        const signal = controller.signal;
        fetch(\\"https://patrickjs.com/api/resource.json\\", {
          signal,
        })
          .then((response) => response.json())
          .then((data) => {
            this.name = data.name;
          });
        return () => {
          if (!signal.aborted) {
            controller.abort();
          }
        };
      },
      immediate: true,
    },
  },

  computed: {
    onUpdateHook0() {
      return {
        0: this.name,
      };
    },
  },
};
</script>"
`;

exports[`Vue > jsx > Typescript Test > class + ClassName + css 1`] = `
"<template>
  <div class=\\"test2 test div\\">
    Hello! I can run in React, Vue, Solid, or Liquid!
  </div>
</template>

<script lang=\\"ts\\">
export default {
  name: \\"my-basic-component\\",
};
</script>

<style scoped>
.div {
  padding: 10px;
}
</style>"
`;

exports[`Vue > jsx > Typescript Test > class + css 1`] = `
"<template>
  <div class=\\"test div\\">Hello! I can run in React, Vue, Solid, or Liquid!</div>
</template>

<script lang=\\"ts\\">
export default {
  name: \\"my-basic-component\\",
};
</script>

<style scoped>
.div {
  padding: 10px;
}
</style>"
`;

exports[`Vue > jsx > Typescript Test > className + css 1`] = `
"<template>
  <div class=\\"test div\\">Hello! I can run in React, Vue, Solid, or Liquid!</div>
</template>

<script lang=\\"ts\\">
export default {
  name: \\"my-basic-component\\",
};
</script>

<style scoped>
.div {
  padding: 10px;
}
</style>"
`;

exports[`Vue > jsx > Typescript Test > className 1`] = `
"<template>
  <div>
    <div class=\\"no binding\\">Without Binding</div>

    <div :class=\\"_classStringToObject(bindings)\\">With binding</div>
  </div>
</template>

<script lang=\\"ts\\">
type Props = {
  [key: string]: string | JSX.Element;
  slotTesting: JSX.Element;
};

import { JSX } from \\"../../../../jsx-runtime\\";

export default {
  name: \\"class-name-code\\",

  data() {
    return { bindings: \\"a binding\\" };
  },

  methods: {
    _classStringToObject(str) {
      const obj = {};
      if (typeof str !== \\"string\\") {
        return obj;
      }
      const classNames = str.trim().split(/\\\\s+/);
      for (const name of classNames) {
        obj[name] = true;
      }
      return obj;
    },
  },
};
</script>"
`;

exports[`Vue > jsx > Typescript Test > classState 1`] = `
"<template>
  <div :class=\\"_classStringToObject(classState + ' div')\\" :style=\\"styleState\\">
    Hello! I can run in React, Vue, Solid, or Liquid!
  </div>
</template>

<script lang=\\"ts\\">
export default {
  name: \\"my-basic-component\\",

  data() {
    return {
      classState: \\"testClassName\\",
      styleState: {
        color: \\"red\\",
      },
    };
  },

  methods: {
    _classStringToObject(str) {
      const obj = {};
      if (typeof str !== \\"string\\") {
        return obj;
      }
      const classNames = str.trim().split(/\\\\s+/);
      for (const name of classNames) {
        obj[name] = true;
      }
      return obj;
    },
  },
};
</script>

<style scoped>
.div {
  padding: 10px;
}
</style>"
`;

exports[`Vue > jsx > Typescript Test > componentWithContext 1`] = `
"<template>
  {{ foo.value }}
</template>

<script lang=\\"ts\\">
export interface ComponentWithContextProps {
  content: string;
}

import Context1 from \\"@dummy/1\\";
import Context2 from \\"@dummy/2\\";

export default {
  name: \\"component-with-context\\",

  props: [\\"content\\"],

  provide() {
    const _this = this;
    return {
      [Context1.key]: {
        foo: \\"bar\\",
        content() {
          return _this.content;
        },
      },
      [Context2.key]: { bar: \\"baz\\" },
    };
  },
  inject: {
    foo: Context1.key,
  },
};
</script>"
`;

exports[`Vue > jsx > Typescript Test > componentWithContextMultiRoot 1`] = `"Vue 2 template should have a single root element"`;

exports[`Vue > jsx > Typescript Test > contentState 1`] = `
"<template>
  <div>setting context</div>
</template>

<script lang=\\"ts\\">
import BuilderContext from \\"@dummy/context.vue\\";

export default {
  name: \\"render-content\\",
  components: { BuilderContext: BuilderContext },
  props: [\\"content\\", \\"customComponents\\"],

  provide() {
    const _this = this;
    return {
      [BuilderContext.key]: {
        content: _this.content,
        registeredComponents: _this.customComponents,
      },
    };
  },
};
</script>"
`;

exports[`Vue > jsx > Typescript Test > defaultProps 1`] = `
"<template>
  <div>
    <template v-if=\\"link\\">
      <a
        :href=\\"link\\"
        :target=\\"openLinkInNewTab ? '_blank' : undefined\\"
        v-bind=\\"attributes\\"
      >
        {{ text }}
      </a>
    </template>

    <template v-if=\\"!link\\">
      <button type=\\"button\\" @click=\\"onClick($event)\\" v-bind=\\"attributes\\">
        {{ buttonText }}
      </button>
    </template>
  </div>
</template>

<script lang=\\"ts\\">
export interface ButtonProps {
  attributes?: any;
  text?: string;
  buttonText?: string; // no default value

  link?: string;
  openLinkInNewTab?: boolean;
  onClick?: () => void;
}

export default {
  name: \\"button\\",

  props: {
    link: { default: \\"https://builder.io/\\" },
    attributes: { default: undefined },
    openLinkInNewTab: { default: false },
    text: { default: \\"default text\\" },
    onClick: {
      default: () => {
        console.log(\\"hi\\");
      },
    },
    buttonText: { default: undefined },
  },
};
</script>"
`;

exports[`Vue > jsx > Typescript Test > defaultPropsOutsideComponent 1`] = `
"<template>
  <div>
    <template v-if=\\"link\\">
      <a
        :href=\\"link\\"
        :target=\\"openLinkInNewTab ? '_blank' : undefined\\"
        v-bind=\\"attributes\\"
      >
        {{ text }}
      </a>
    </template>

    <template v-if=\\"!link\\">
      <button type=\\"button\\" @click=\\"onClick($event)\\" v-bind=\\"attributes\\">
        {{ text }}
      </button>
    </template>
  </div>
</template>

<script lang=\\"ts\\">
export interface ButtonProps {
  attributes?: any;
  text?: string;
  link?: string;
  openLinkInNewTab?: boolean;
  onClick: () => void;
}

export default {
  name: \\"button\\",

  props: {
    link: { default: \\"https://builder.io/\\" },
    attributes: { default: undefined },
    openLinkInNewTab: { default: false },
    text: { default: \\"default text\\" },
    onClick: { default: () => {} },
  },
};
</script>"
`;

exports[`Vue > jsx > Typescript Test > defaultValsWithTypes 1`] = `
"<template>
  <div>Hello {{ name || DEFAULT_VALUES.name }}</div>
</template>

<script lang=\\"ts\\">
type Props = {
  name: string;
};

const DEFAULT_VALUES: Props = {
  name: \\"Sami\\",
};

export default {
  name: \\"component-with-types\\",

  props: [\\"name\\"],

  data() {
    return { DEFAULT_VALUES };
  },
};
</script>"
`;

exports[`Vue > jsx > Typescript Test > expressionState 1`] = `
"<template>
  <div>{{ refToUse }}</div>
</template>

<script lang=\\"ts\\">
export default {
  name: \\"my-component\\",

  props: [\\"componentRef\\"],

  data() {
    return {
      refToUse: !(this.componentRef instanceof Function)
        ? this.componentRef
        : null,
    };
  },
};
</script>"
`;

exports[`Vue > jsx > Typescript Test > import types 1`] = `
"<template>
  <render-block
    v-bind=\\"getRenderContentProps(renderContentProps.block, 0)\\"
  ></render-block>
</template>

<script lang=\\"ts\\">
type RenderContentProps = {
  options?: GetContentOptions;
  content: BuilderContent;
  renderContentProps: RenderBlockProps;
};

import { BuilderContent, GetContentOptions } from \\"@builder.io/sdk\\";
import RenderBlock, { RenderBlockProps } from \\"./builder-render-block.raw\\";

export default {
  name: \\"render-content\\",
  components: { RenderBlock: RenderBlock },
  props: [\\"renderContentProps\\"],

  methods: {
    getRenderContentProps(block, index) {
      return {
        block: block,
        index: index,
      };
    },
  },
};
</script>"
`;

exports[`Vue > jsx > Typescript Test > multipleOnUpdate 1`] = `
"<template>
  <div></div>
</template>

<script lang=\\"ts\\">
export default {
  name: \\"multiple-on-update\\",

  updated() {
    console.log(\\"Runs on every update/rerender\\");
    console.log(\\"Runs on every update/rerender as well\\");
  },
};
</script>"
`;

exports[`Vue > jsx > Typescript Test > multipleOnUpdateWithDeps 1`] = `
"<template>
  <div></div>
</template>

<script lang=\\"ts\\">
export default {
  name: \\"multiple-on-update-with-deps\\",

  data() {
    return { a: \\"a\\", b: \\"b\\", c: \\"c\\", d: \\"d\\" };
  },

  watch: {
    onUpdateHook0: {
      handler() {
        console.log(\\"Runs when a or b changes\\", this.a, this.b);

        if (this.a === \\"a\\") {
          this.a = \\"b\\";
        }
      },
      immediate: true,
    },
    onUpdateHook1: {
      handler() {
        console.log(\\"Runs when c or d changes\\", this.c, this.d);

        if (this.a === \\"a\\") {
          this.a = \\"b\\";
        }
      },
      immediate: true,
    },
  },

  computed: {
    onUpdateHook0() {
      return {
        0: this.a,
        1: this.b,
      };
    },
    onUpdateHook1() {
      return {
        0: this.c,
        1: this.d,
      };
    },
  },
};
</script>"
`;

exports[`Vue > jsx > Typescript Test > multipleSpreads 1`] = `
"<template>
  <input v-bind=\\"{ ...attrs, ...$props }\\" />
</template>

<script lang=\\"ts\\">
export default {
  name: \\"my-basic-component\\",

  data() {
    return {
      attrs: {
        hello: \\"world\\",
      },
    };
  },
};
</script>"
`;

exports[`Vue > jsx > Typescript Test > nestedShow 1`] = `
"<template>
  <div v-if=\\"!Boolean(conditionA)\\">else-condition-A</div>

  <div v-else-if=\\"!Boolean(!conditionB)\\">else-condition-B</div>

  <div v-else>if condition A and condition B</div>
</template>

<script lang=\\"ts\\">
interface Props {
  conditionA: boolean;
  conditionB: boolean;
}

export default {
  name: \\"nested-show\\",

  props: [\\"conditionA\\", \\"conditionB\\"],
};
</script>"
`;

exports[`Vue > jsx > Typescript Test > nestedStyles 1`] = `
"<template>
  <div class=\\"div\\">Hello world</div>
</template>

<script lang=\\"ts\\">
export default {
  name: \\"nested-styles\\",
};
</script>

<style scoped>
.div {
  display: flex;
  --bar: red;
  color: var(--bar);
}
@media (max-width: env(--mobile)) {
  .div {
    display: block;
  }
}
.div:hover {
  display: flex;
}
.div:active {
  display: inline;
}
.div .nested-selector {
  display: grid;
}
.div .nested-selector:hover {
  display: block;
}
.div.nested-selector:active {
  display: inline-block;
}
</style>"
`;

exports[`Vue > jsx > Typescript Test > onInit & onMount 1`] = `
"<template>
  <div></div>
</template>

<script lang=\\"ts\\">
export default {
  name: \\"on-init\\",

  created() {
    console.log(\\"onInit\\");
  },
  mounted() {
    console.log(\\"onMount\\");
  },
};
</script>"
`;

exports[`Vue > jsx > Typescript Test > onInit 1`] = `
"<template>
  <div>Default name defined by parent {{ name }}</div>
</template>

<script lang=\\"ts\\">
type Props = {
  name: string;
};

export const defaultValues = {
  name: \\"PatrickJS\\",
};

export default {
  name: \\"on-init\\",

  props: [\\"name\\"],

  data() {
    return { name: \\"\\" };
  },

  created() {
    this.name = defaultValues.name || this.name;
    console.log(\\"set defaults with props\\");
  },
};
</script>"
`;

exports[`Vue > jsx > Typescript Test > onMount 1`] = `
"<template>
  <div></div>
</template>

<script lang=\\"ts\\">
export default {
  name: \\"comp\\",

  mounted() {
    console.log(\\"Runs on mount\\");
  },

  unmounted() {
    console.log(\\"Runs on unMount\\");
  },
};
</script>"
`;

exports[`Vue > jsx > Typescript Test > onUpdate 1`] = `
"<template>
  <div></div>
</template>

<script lang=\\"ts\\">
export default {
  name: \\"on-update\\",

  updated() {
    console.log(\\"Runs on every update/rerender\\");
  },
};
</script>"
`;

exports[`Vue > jsx > Typescript Test > onUpdateWithDeps 1`] = `
"<template>
  <div></div>
</template>

<script lang=\\"ts\\">
type Props = {
  size: string;
};

export default {
  name: \\"on-update-with-deps\\",

  props: [\\"size\\"],

  data() {
    return { a: \\"a\\", b: \\"b\\" };
  },

  watch: {
    onUpdateHook0: {
      handler() {
        console.log(
          \\"Runs when a, b or size changes\\",
          this.a,
          this.b,
          this.size
        );
      },
      immediate: true,
    },
  },

  computed: {
    onUpdateHook0() {
      return {
        0: this.a,
        1: this.b,
        2: this.size,
      };
    },
  },
};
</script>"
`;

exports[`Vue > jsx > Typescript Test > preserveExportOrLocalStatement 1`] = `
"<template>
  <div></div>
</template>

<script lang=\\"ts\\">
type Types = {
  s: any[];
};
interface IPost {
  len: number;
}
export interface MyBasicComponentProps {
  id: string;
}

const b = 3;
const foo = () => {};
export const a = 3;
export const bar = () => {};
export function run<T>(value: T) {}

export default {
  name: \\"my-basic-component\\",
};
</script>"
`;

exports[`Vue > jsx > Typescript Test > preserveTyping 1`] = `
"<template>
  <div>Hello! I can run in React, Vue, Solid, or Liquid! {{ name }}</div>
</template>

<script lang=\\"ts\\">
export type A = \\"test\\";
export interface C {
  n: \\"test\\";
}
type B = \\"test2\\";
interface D {
  n: \\"test\\";
}
export interface MyBasicComponentProps {
  name: string;
  age?: number;
}

export default {
  name: \\"my-basic-component\\",

  props: [\\"name\\"],
};
</script>"
`;

exports[`Vue > jsx > Typescript Test > propsDestructure 1`] = `
"<template>
  <div>
    <slot /> {{ type }}
    Hello! I can run in React, Vue, Solid, or Liquid!
  </div>
</template>

<script lang=\\"ts\\">
type Props = {
  children: any;
  type: string;
};

export default {
  name: \\"my-basic-component\\",

  props: [\\"type\\"],

  data() {
    return { name: \\"Decadef20\\" };
  },
};
</script>"
`;

exports[`Vue > jsx > Typescript Test > propsInterface 1`] = `
"<template>
  <div>Hello! I can run in React, Vue, Solid, or Liquid! {{ name }}</div>
</template>

<script lang=\\"ts\\">
interface Person {
  name: string;
  age?: number;
}

export default {
  name: \\"my-basic-component\\",

  props: [\\"name\\"],
};
</script>"
`;

exports[`Vue > jsx > Typescript Test > propsType 1`] = `
"<template>
  <div>Hello! I can run in React, Vue, Solid, or Liquid! {{ name }}</div>
</template>

<script lang=\\"ts\\">
type Person = {
  name: string;
  age?: number;
};

export default {
  name: \\"my-basic-component\\",

  props: [\\"name\\"],
};
</script>"
`;

exports[`Vue > jsx > Typescript Test > referencingFunInsideHook 1`] = `
"<template>
  <div></div>
</template>

<script lang=\\"ts\\">
export default {
  name: \\"on-update\\",

  updated() {
    this.foo({
      someOption: this.bar,
    });
  },

  methods: {
    foo: function foo(params) {},
    bar: function bar() {},
    zoo: function zoo() {
      const params = {
        cb: this.bar,
      };
    },
  },
};
</script>"
`;

exports[`Vue > jsx > Typescript Test > renderBlock 1`] = `
"<template>
  <component
    v-if=\\"!Boolean(shouldWrap)\\"
    :is=\\"renderComponentTag\\"
    v-bind=\\"renderComponentProps\\"
  ></component>
  <component
    v-else-if=\\"isEmptyHtmlElement(tag)\\"
    :is=\\"tag\\"
    v-bind=\\"{ ...attributes, ...actions }\\"
  ></component>
  <render-repeated-block
    v-for=\\"(data, index) in repeatItemData\\"
    :repeatContext=\\"data.context\\"
    :block=\\"data.block\\"
    :key=\\"index\\"
  ></render-repeated-block>
  <component v-else :is=\\"tag\\" v-bind=\\"{ ...attributes, ...actions }\\">
    <component
      :is=\\"renderComponentTag\\"
      v-bind=\\"renderComponentProps\\"
    ></component>

    <render-block
      v-for=\\"(child, index) in childrenWithoutParentComponent\\"
      :block=\\"child\\"
      :context=\\"childrenContext\\"
      :key=\\"'render-block-' + child.id\\"
    ></render-block>
    <block-styles
      v-for=\\"(child, index) in childrenWithoutParentComponent\\"
      :block=\\"child\\"
      :context=\\"childrenContext\\"
      :key=\\"'block-style-' + child.id\\"
    ></block-styles>
  </component>
</template>

<script lang=\\"ts\\">
export type RenderBlockProps = {
  block: BuilderBlock;
  context: BuilderContextInterface;
};

import {
  BuilderContextInterface,
  RegisteredComponent,
} from \\"../../context/types.js\\";
import { getBlockActions } from \\"../../functions/get-block-actions.js\\";
import { getBlockComponentOptions } from \\"../../functions/get-block-component-options.js\\";
import { getBlockProperties } from \\"../../functions/get-block-properties.js\\";
import { getBlockTag } from \\"../../functions/get-block-tag.js\\";
import { getProcessedBlock } from \\"../../functions/get-processed-block.js\\";
import { BuilderBlock } from \\"../../types/builder-block.js\\";
import { Nullable } from \\"../../types/typescript.js\\";
import { evaluate } from \\"../../functions/evaluate.js\\";
import BlockStyles from \\"./block-styles.vue\\";
import { isEmptyHtmlElement } from \\"./render-block.helpers.js\\";
import { RenderComponentProps } from \\"./render-component.vue\\";
import { RepeatData } from \\"./types.js\\";
import RenderRepeatedBlock from \\"./render-repeated-block.vue\\";
import { TARGET } from \\"../../constants/target.js\\";
import { extractTextStyles } from \\"../../functions/extract-text-styles.js\\";
import RenderComponentWithContext from \\"./render-component-with-context.vue\\";
import RenderComponent from \\"./render-component.vue\\";
import { getReactNativeBlockStyles } from \\"../../functions/get-react-native-block-styles.js\\";

export default {
  name: \\"render-block\\",
  components: {
    RenderRepeatedBlock: RenderRepeatedBlock,
    BlockStyles: BlockStyles,
    RenderComponentWithContext: RenderComponentWithContext,
    RenderComponent: RenderComponent,
  },
  props: [\\"block\\", \\"context\\"],

  data() {
    return { isEmptyHtmlElement };
  },

  computed: {
    component() {
      const componentName = getProcessedBlock({
        block: this.block,
        state: this.context.state,
        context: this.context.context,
        shouldEvaluateBindings: false,
      }).component?.name;

      if (!componentName) {
        return null;
      }

      const ref = this.context.registeredComponents[componentName];

      if (!ref) {
        // TODO: Public doc page with more info about this message
        console.warn(\`
          Could not find a registered component named \\"\${componentName}\\".
          If you registered it, is the file that registered it imported by the file that needs to render it?\`);
        return undefined;
      } else {
        return ref;
      }
    },
    tag() {
      return getBlockTag(this.useBlock);
    },
    useBlock() {
      return this.repeatItemData
        ? this.block
        : getProcessedBlock({
            block: this.block,
            state: this.context.state,
            context: this.context.context,
            shouldEvaluateBindings: true,
          });
    },
    actions() {
      return getBlockActions({
        block: this.useBlock,
        state: this.context.state,
        context: this.context.context,
      });
    },
    attributes() {
      const blockProperties = getBlockProperties(this.useBlock);
      return {
        ...blockProperties,
        ...(TARGET === \\"reactNative\\"
          ? {
              style: getReactNativeBlockStyles({
                block: this.useBlock,
                context: this.context,
                blockStyles: blockProperties.style,
              }),
            }
          : {}),
      };
    },
    shouldWrap() {
      return !this.component?.noWrap;
    },
    renderComponentProps() {
      return {
        blockChildren: this.useChildren,
        componentRef: this.component?.component,
        componentOptions: {
          ...getBlockComponentOptions(this.useBlock),

          /**
           * These attributes are passed to the wrapper element when there is one. If \`noWrap\` is set to true, then
           * they are provided to the component itself directly.
           */
          ...(this.shouldWrap
            ? {}
            : {
                attributes: { ...this.attributes, ...this.actions },
              }),
          customBreakpoints: this.childrenContext?.content?.meta?.breakpoints,
        },
        context: this.childrenContext,
      };
    },
    useChildren() {
      // TO-DO: When should \`canHaveChildren\` dictate rendering?
      // This is currently commented out because some Builder components (e.g. Box) do not have \`canHaveChildren: true\`,
      // but still receive and need to render children.
      // return state.componentInfo?.canHaveChildren ? state.useBlock.children : [];
      return this.useBlock.children ?? [];
    },
    childrenWithoutParentComponent() {
      /**
       * When there is no \`componentRef\`, there might still be children that need to be rendered. In this case,
       * we render them outside of \`componentRef\`.
       * NOTE: We make sure not to render this if \`repeatItemData\` is non-null, because that means we are rendering an array of
       * blocks, and the children will be repeated within those blocks.
       */
      const shouldRenderChildrenOutsideRef =
        !this.component?.component && !this.repeatItemData;
      return shouldRenderChildrenOutsideRef ? this.useChildren : [];
    },
    repeatItemData() {
      /**
       * we don't use \`state.useBlock\` here because the processing done within its logic includes evaluating the block's bindings,
       * which will not work if there is a repeat.
       */
      const { repeat, ...blockWithoutRepeat } = this.block;

      if (!repeat?.collection) {
        return undefined;
      }

      const itemsArray = evaluate({
        code: repeat.collection,
        state: this.context.state,
        context: this.context.context,
      });

      if (!Array.isArray(itemsArray)) {
        return undefined;
      }

      const collectionName = repeat.collection.split(\\".\\").pop();
      const itemNameToUse =
        repeat.itemName || (collectionName ? collectionName + \\"Item\\" : \\"item\\");
      const repeatArray = itemsArray.map<RepeatData>((item, index) => ({
        context: {
          ...this.context,
          state: {
            ...this.context.state,
            $index: index,
            $item: item,
            [itemNameToUse]: item,
            [\`$\${itemNameToUse}Index\`]: index,
          },
        },
        block: blockWithoutRepeat,
      }));
      return repeatArray;
    },
    inheritedTextStyles() {
      if (TARGET !== \\"reactNative\\") {
        return {};
      }

      const styles = getReactNativeBlockStyles({
        block: this.useBlock,
        context: this.context,
        blockStyles: this.attributes.style,
      });
      return extractTextStyles(styles);
    },
    childrenContext() {
      return {
        apiKey: this.context.apiKey,
        state: this.context.state,
        content: this.context.content,
        context: this.context.context,
        registeredComponents: this.context.registeredComponents,
        inheritedStyles: this.inheritedTextStyles,
      };
    },
    renderComponentTag() {
      if (TARGET === \\"reactNative\\") {
        return RenderComponentWithContext;
      } else if (TARGET === \\"vue3\\") {
        // vue3 expects a string for the component tag
        return \\"RenderComponent\\";
      } else {
        return RenderComponent;
      }
    },
  },
};
</script>"
`;

exports[`Vue > jsx > Typescript Test > renderContentExample 1`] = `
"<template>
  <div class=\\"div\\" @click=\\"trackClick(content.id)\\">
    <render-blocks :blocks=\\"content.blocks\\"></render-blocks>
  </div>
</template>

<script lang=\\"ts\\">
type Props = {
  customComponents: string[];
  content: {
    blocks: any[];
    id: string;
  };
};

import {
  sendComponentsToVisualEditor,
  dispatchNewContentToVisualEditor,
  trackClick,
} from \\"@dummy/injection-js\\";
import BuilderContext from \\"@dummy/context.vue\\";
import RenderBlocks from \\"@dummy/RenderBlocks.lite.tsx\\";

export default {
  name: \\"render-content\\",
  components: { RenderBlocks: RenderBlocks, BuilderContext: BuilderContext },
  props: [\\"content\\", \\"customComponents\\"],

  data() {
    return { trackClick };
  },

  provide() {
    const _this = this;
    return {
      [BuilderContext.key]: {
        get content() {
          return 3;
        },
        get registeredComponents() {
          return 4;
        },
      },
    };
  },

  mounted() {
    sendComponentsToVisualEditor(this.customComponents);
  },

  watch: {
    onUpdateHook0: {
      handler() {
        dispatchNewContentToVisualEditor(this.content);
      },
      immediate: true,
    },
  },

  computed: {
    onUpdateHook0() {
      return {
        0: this.content,
      };
    },
  },
};
</script>

<style scoped>
.div {
  display: flex;
  flex-direction: columns;
}
</style>"
`;

exports[`Vue > jsx > Typescript Test > rootFragmentMultiNode 1`] = `"Vue 2 template should have a single root element"`;

exports[`Vue > jsx > Typescript Test > rootShow 1`] = `
"<template>
  <div v-if=\\"foo === 'bar'\\">Bar</div>
  <div v-else>Foo</div>
</template>

<script lang=\\"ts\\">
export interface RenderStylesProps {
  foo: string;
}

export default {
  name: \\"render-styles\\",

  props: [\\"foo\\"],
};
</script>"
`;

exports[`Vue > jsx > Typescript Test > self-referencing component 1`] = `
"<template>
  <div>
    {{ name }}

    <template v-if=\\"name === 'Batman'\\">
      <my-component name=\\"Bruce Wayne\\"></my-component>
    </template>
  </div>
</template>

<script lang=\\"ts\\">
export default {
  name: \\"my-component\\",

  props: [\\"name\\"],
};
</script>"
`;

exports[`Vue > jsx > Typescript Test > self-referencing component with children 1`] = `
"<template>
  <div>
    {{ name }}
    <slot />

    <template v-if=\\"name === 'Batman'\\">
      <my-component name=\\"Bruce\\">
        <div>Wayne</div>
      </my-component>
    </template>
  </div>
</template>

<script lang=\\"ts\\">
export default {
  name: \\"my-component\\",

  props: [\\"name\\"],
};
</script>"
`;

exports[`Vue > jsx > Typescript Test > showWithFor 1`] = `
"<template>
  <div v-for=\\"(item, index) in items\\" v-if=\\"conditionA\\" :key=\\"idx\\">
    {{ item }}
  </div>
  <div v-else>else-condition-A</div>
</template>

<script lang=\\"ts\\">
interface Props {
  conditionA: boolean;
  items: string[];
}

export default {
  name: \\"nested-show\\",

  props: [\\"conditionA\\", \\"items\\"],
};
</script>"
`;

exports[`Vue > jsx > Typescript Test > showWithRootText 1`] = `
"<template>
  ContentA

  <div v-else>else-condition-A</div>
</template>

<script lang=\\"ts\\">
interface Props {
  conditionA: boolean;
}

export default {
  name: \\"show-root-text\\",

  props: [\\"conditionA\\"],
};
</script>"
`;

exports[`Vue > jsx > Typescript Test > spreadAttrs 1`] = `
"<template>
  <input v-bind=\\"attrs\\" />
</template>

<script lang=\\"ts\\">
export default {
  name: \\"my-basic-component\\",
};
</script>"
`;

exports[`Vue > jsx > Typescript Test > spreadNestedProps 1`] = `
"<template>
  <input v-bind=\\"nested\\" />
</template>

<script lang=\\"ts\\">
export default {
  name: \\"my-basic-component\\",

  props: [\\"nested\\"],
};
</script>"
`;

exports[`Vue > jsx > Typescript Test > spreadProps 1`] = `
"<template>
  <input v-bind=\\"$props\\" />
</template>

<script lang=\\"ts\\">
export default {
  name: \\"my-basic-component\\",
};
</script>"
`;

exports[`Vue > jsx > Typescript Test > styleClassAndCss 1`] = `
"<template>
  <div
    class=\\"builder-column div\\"
    :style=\\"{
      width: '100%',
    }\\"
  ></div>
</template>

<script lang=\\"ts\\">
export default {
  name: \\"my-component\\",
};
</script>

<style scoped>
.div {
  display: flex;
  flex-direction: column;
  align-items: stretch;
}
</style>"
`;

exports[`Vue > jsx > Typescript Test > subComponent 1`] = `
"<template>
  <foo></foo>
</template>

<script lang=\\"ts\\">
import Foo from \\"./foo-sub-component.vue\\";

export default {
  name: \\"sub-component\\",
  components: { Foo: Foo },
};
</script>"
`;

exports[`Vue > jsx > Typescript Test > svgComponent 1`] = `
"<template>
  <svg
    fill=\\"none\\"
    role=\\"img\\"
    :viewBox=\\"'0 0 ' + 42 + ' ' + 42\\"
    :width=\\"42\\"
    :height=\\"42\\"
  >
    <defs>
      <filter id=\\"prefix__filter0_f\\" filterUnits=\\"userSpaceOnUse\\">
        <feFlood result=\\"BackgroundImageFix\\"></feFlood>
        <feBlend
          in=\\"SourceGraphic\\"
          in2=\\"BackgroundImageFix\\"
          result=\\"shape\\"
        ></feBlend>
        <feGaussianBlur
          result=\\"effect1_foregroundBlur\\"
          :stdDeviation=\\"7\\"
        ></feGaussianBlur>
      </filter>
    </defs>
  </svg>
</template>

<script lang=\\"ts\\">
export default {
  name: \\"svg-component\\",
};
</script>"
`;

exports[`Vue > jsx > Typescript Test > typeDependency 1`] = `
"<template>
  <div>{{ foo }}</div>
</template>

<script lang=\\"ts\\">
export type TypeDependencyProps = {
  foo: Foo;
  foo2: Foo2;
};

import { Foo } from \\"./foo-type\\";
import { Foo as Foo2 } from \\"./type-export.vue\\";

export default {
  name: \\"type-dependency\\",

  props: [\\"foo\\"],
};
</script>"
`;

exports[`Vue > jsx > Typescript Test > use-style 1`] = `
"<template>
  <button type=\\"button\\">Button</button>
</template>

<script lang=\\"ts\\">
export default {
  name: \\"my-component\\",
};
</script>

<style scoped>
button {
  background: blue;
  color: white;
  font-size: 12px;
  outline: 1px solid black;
}
</style>"
`;

exports[`Vue > jsx > Typescript Test > use-style-and-css 1`] = `
"<template>
  <button type=\\"button\\" class=\\"button\\">Button</button>
</template>

<script lang=\\"ts\\">
export default {
  name: \\"my-component\\",
};
</script>

<style scoped>
.button {
  background: blue;
  color: white;
}

button {
  font-size: 12px;
  outline: 1px solid black;
}
</style>"
`;

exports[`Vue > jsx > Typescript Test > use-style-outside-component 1`] = `
"<template>
  <button type=\\"button\\">Button</button>
</template>

<script lang=\\"ts\\">
export default {
  name: \\"my-component\\",
};
</script>

<style scoped>
button {
  background: blue;
  color: white;
  font-size: 12px;
  outline: 1px solid black;
}
</style>"
`;

exports[`Vue > svelte > Javascript Test > basic 1`] = `
"<template>
  <div>
    <input @input=\\"name = $event.target.value\\" :value=\\"name\\" />
    Hello! I can run in React, Vue, Solid, or Liquid!
  </div>
</template>

<script>
export default {
  name: \\"my-component\\",

  data() {
    return { name: \\"Steve\\" };
  },
};
</script>"
`;

exports[`Vue > svelte > Javascript Test > bindGroup 1`] = `
"<template>
  <div>
    <input
      type=\\"radio\\"
      value=\\"Plain\\"
      :checked=\\"tortilla === 'Plain'\\"
      @input=\\"tortilla = $event.target.value\\"
    /><input
      type=\\"radio\\"
      value=\\"Whole wheat\\"
      :checked=\\"tortilla === 'Whole wheat'\\"
      @input=\\"tortilla = $event.target.value\\"
    /><input
      type=\\"radio\\"
      value=\\"Spinach\\"
      :checked=\\"tortilla === 'Spinach'\\"
      @input=\\"tortilla = $event.target.value\\"
    /><br /><br /><input
      type=\\"checkbox\\"
      value=\\"Rice\\"
      :checked=\\"fillings === 'Rice'\\"
      @input=\\"fillings = $event.target.value\\"
    /><input
      type=\\"checkbox\\"
      value=\\"Beans\\"
      :checked=\\"fillings === 'Beans'\\"
      @input=\\"fillings = $event.target.value\\"
    /><input
      type=\\"checkbox\\"
      value=\\"Cheese\\"
      :checked=\\"fillings === 'Cheese'\\"
      @input=\\"fillings = $event.target.value\\"
    /><input
      type=\\"checkbox\\"
      value=\\"Guac (extra)\\"
      :checked=\\"fillings === 'Guac (extra)'\\"
      @input=\\"fillings = $event.target.value\\"
    />
    <p>Tortilla: {{ tortilla }}</p>
    <p>Fillings: {{ fillings }}</p>
  </div>
</template>

<script>
export default {
  name: \\"my-component\\",

  data() {
    return { tortilla: \\"Plain\\", fillings: [] };
  },
};
</script>"
`;

exports[`Vue > svelte > Javascript Test > bindProperty 1`] = `
"<template>
  <input :value=\\"value\\" />
</template>

<script>
export default {
  name: \\"my-component\\",

  data() {
    return { value: \\"hello\\" };
  },
};
</script>"
`;

exports[`Vue > svelte > Javascript Test > classDirective 1`] = `
"<template>
  <input
    :class=\\"
      _classStringToObject(
        \`form-input \${disabled ? 'disabled' : ''} \${focus ? 'focus' : ''}\`
      )
    \\"
  />
</template>

<script>
export default {
  name: \\"my-component\\",

  props: { disabled: { default: undefined } },

  data() {
    return { focus: true };
  },

  methods: {
    _classStringToObject(str) {
      const obj = {};
      if (typeof str !== \\"string\\") {
        return obj;
      }
      const classNames = str.trim().split(/\\\\s+/);
      for (const name of classNames) {
        obj[name] = true;
      }
      return obj;
    },
  },
};
</script>"
`;

exports[`Vue > svelte > Javascript Test > context 1`] = `
"<template>
  <div>{{ activeTab }}</div>
</template>

<script>
export default {
  name: \\"my-component\\",

  data() {
    return { activeTab: 0 };
  },

  provide() {
    const _this = this;
    return {
      [\\"activeTab\\"]: _this.activeTab,
    };
  },
  inject: {
    disabled: \\"disabled\\",
  },
};
</script>"
`;

exports[`Vue > svelte > Javascript Test > each 1`] = `
"<template>
  <ul>
    <li v-for=\\"(num, index) in numbers\\" :key=\\"index\\">{{ num }}</li>
  </ul>
</template>

<script>
export default {
  name: \\"my-component\\",

  data() {
    return { numbers: [\\"one\\", \\"two\\", \\"three\\"] };
  },
};
</script>"
`;

exports[`Vue > svelte > Javascript Test > eventHandlers 1`] = `
"<template>
  <div>
    <button @click=\\"log('hi')\\">Log</button
    ><button @click=\\"log($event)\\">Log</button
    ><button @click=\\"log($event)\\">Log</button>
  </div>
</template>

<script>
export default {
  name: \\"my-component\\",

  methods: {
    log: function log(msg = \\"hello\\") {
      console.log(msg);
    },
  },
};
</script>"
`;

exports[`Vue > svelte > Javascript Test > html 1`] = `
"<template>
  <div v-html=\\"html\\"></div>
</template>

<script>
export default {
  name: \\"my-component\\",

  data() {
    return { html: \\"<b>bold</b>\\" };
  },
};
</script>"
`;

exports[`Vue > svelte > Javascript Test > ifElse 1`] = `
"<template>
  <button v-if=\\"show\\" @click=\\"toggle($event)\\">Hide</button>
  <button v-else @click=\\"toggle($event)\\">Show</button>
</template>

<script>
export default {
  name: \\"my-component\\",

  data() {
    return { show: true };
  },

  methods: {
    toggle: function toggle() {
      this.show = !this.show;
    },
  },
};
</script>"
`;

exports[`Vue > svelte > Javascript Test > imports 1`] = `
"<template>
  <div>
    <button type=\\"button\\" :disabled=\\"disabled\\"><slot /></button>
  </div>
</template>

<script>
import Button from \\"./Button.vue\\";

export default {
  name: \\"my-component\\",
  components: { Button: Button },

  data() {
    return { disabled: false };
  },
};
</script>"
`;

exports[`Vue > svelte > Javascript Test > lifecycleHooks 1`] = `
"<template>
  <div></div>
</template>

<script>
export default {
  name: \\"my-component\\",

  mounted() {
    console.log(\\"onMount\\");
  },
  updated() {
    console.log(\\"onAfterUpdate\\");
  },

  unmounted() {
    console.log(\\"onDestroy\\");
  },
};
</script>"
`;

exports[`Vue > svelte > Javascript Test > reactive 1`] = `
"<template>
  <div><input :value=\\"name\\" /> Lowercase: {{ lowercaseName }}</div>
</template>

<script>
export default {
  name: \\"my-component\\",

  data() {
    return { name: \\"Steve\\" };
  },

  computed: {
    lowercaseName() {
      return this.name.toLowerCase();
    },
  },
};
</script>"
`;

exports[`Vue > svelte > Javascript Test > reactiveWithFn 1`] = `
"<template>
  <div>
    <input type=\\"number\\" @input=\\"a = $event.target.value\\" :value=\\"a\\" /><input
      type=\\"number\\"
      @input=\\"b = $event.target.value\\"
      :value=\\"b\\"
    />
    Result: {{ result }}
  </div>
</template>

<script>
export default {
  name: \\"my-component\\",

  data() {
    return { a: 2, b: 5, result: null };
  },

  watch: {
    onUpdateHook0: {
      handler() {
        this.calculateResult(this.a, this.b);
      },
      immediate: true,
    },
  },

  computed: {
    onUpdateHook0() {
      return {
        0: this.a,
        1: this.b,
      };
    },
  },

  methods: {
    calculateResult: function calculateResult(a_, b_) {
      this.result = a_ * b_;
    },
  },
};
</script>"
`;

exports[`Vue > svelte > Javascript Test > slots 1`] = `
"<template>
  <div>
    <slot>default</slot><slot name=\\"test\\"><div>default</div></slot>
  </div>
</template>

<script>
export default {
  name: \\"my-component\\",
};
</script>"
`;

exports[`Vue > svelte > Javascript Test > style 1`] = `
"<template>
  <input class=\\"form-input\\" />
</template>

<script>
export default {
  name: \\"my-component\\",
};
</script>

<style scoped>
input {
  color: red;
  font-size: 12px;
}

.form-input:focus {
  outline: 1px solid blue;
}
</style>"
`;

exports[`Vue > svelte > Javascript Test > textExpressions 1`] = `
"<template>
  <div>
    normal:
    {{ a + b }}<br />
    conditional
    {{ a > 2 ? \\"hello\\" : \\"bye\\" }}
  </div>
</template>

<script>
export default {
  name: \\"my-component\\",

  data() {
    return { a: 5, b: 12 };
  },
};
</script>"
`;

exports[`Vue > svelte > Typescript Test > basic 1`] = `
"<template>
  <div>
    <input @input=\\"name = $event.target.value\\" :value=\\"name\\" />
    Hello! I can run in React, Vue, Solid, or Liquid!
  </div>
</template>

<script lang=\\"ts\\">
export default {
  name: \\"my-component\\",

  data() {
    return { name: \\"Steve\\" };
  },
};
</script>"
`;

exports[`Vue > svelte > Typescript Test > bindGroup 1`] = `
"<template>
  <div>
    <input
      type=\\"radio\\"
      value=\\"Plain\\"
      :checked=\\"tortilla === 'Plain'\\"
      @input=\\"tortilla = $event.target.value\\"
    /><input
      type=\\"radio\\"
      value=\\"Whole wheat\\"
      :checked=\\"tortilla === 'Whole wheat'\\"
      @input=\\"tortilla = $event.target.value\\"
    /><input
      type=\\"radio\\"
      value=\\"Spinach\\"
      :checked=\\"tortilla === 'Spinach'\\"
      @input=\\"tortilla = $event.target.value\\"
    /><br /><br /><input
      type=\\"checkbox\\"
      value=\\"Rice\\"
      :checked=\\"fillings === 'Rice'\\"
      @input=\\"fillings = $event.target.value\\"
    /><input
      type=\\"checkbox\\"
      value=\\"Beans\\"
      :checked=\\"fillings === 'Beans'\\"
      @input=\\"fillings = $event.target.value\\"
    /><input
      type=\\"checkbox\\"
      value=\\"Cheese\\"
      :checked=\\"fillings === 'Cheese'\\"
      @input=\\"fillings = $event.target.value\\"
    /><input
      type=\\"checkbox\\"
      value=\\"Guac (extra)\\"
      :checked=\\"fillings === 'Guac (extra)'\\"
      @input=\\"fillings = $event.target.value\\"
    />
    <p>Tortilla: {{ tortilla }}</p>
    <p>Fillings: {{ fillings }}</p>
  </div>
</template>

<script lang=\\"ts\\">
export default {
  name: \\"my-component\\",

  data() {
    return { tortilla: \\"Plain\\", fillings: [] };
  },
};
</script>"
`;

exports[`Vue > svelte > Typescript Test > bindProperty 1`] = `
"<template>
  <input :value=\\"value\\" />
</template>

<script lang=\\"ts\\">
export default {
  name: \\"my-component\\",

  data() {
    return { value: \\"hello\\" };
  },
};
</script>"
`;

exports[`Vue > svelte > Typescript Test > classDirective 1`] = `
"<template>
  <input
    :class=\\"
      _classStringToObject(
        \`form-input \${disabled ? 'disabled' : ''} \${focus ? 'focus' : ''}\`
      )
    \\"
  />
</template>

<script lang=\\"ts\\">
export default {
  name: \\"my-component\\",

  props: { disabled: { default: undefined } },

  data() {
    return { focus: true };
  },

  methods: {
    _classStringToObject(str) {
      const obj = {};
      if (typeof str !== \\"string\\") {
        return obj;
      }
      const classNames = str.trim().split(/\\\\s+/);
      for (const name of classNames) {
        obj[name] = true;
      }
      return obj;
    },
  },
};
</script>"
`;

exports[`Vue > svelte > Typescript Test > context 1`] = `
"<template>
  <div>{{ activeTab }}</div>
</template>

<script lang=\\"ts\\">
export default {
  name: \\"my-component\\",

  data() {
    return { activeTab: 0 };
  },

  provide() {
    const _this = this;
    return {
      [\\"activeTab\\"]: _this.activeTab,
    };
  },
  inject: {
    disabled: \\"disabled\\",
  },
};
</script>"
`;

exports[`Vue > svelte > Typescript Test > each 1`] = `
"<template>
  <ul>
    <li v-for=\\"(num, index) in numbers\\" :key=\\"index\\">{{ num }}</li>
  </ul>
</template>

<script lang=\\"ts\\">
export default {
  name: \\"my-component\\",

  data() {
    return { numbers: [\\"one\\", \\"two\\", \\"three\\"] };
  },
};
</script>"
`;

exports[`Vue > svelte > Typescript Test > eventHandlers 1`] = `
"<template>
  <div>
    <button @click=\\"log('hi')\\">Log</button
    ><button @click=\\"log($event)\\">Log</button
    ><button @click=\\"log($event)\\">Log</button>
  </div>
</template>

<script lang=\\"ts\\">
export default {
  name: \\"my-component\\",

  methods: {
    log: function log(msg = \\"hello\\") {
      console.log(msg);
    },
  },
};
</script>"
`;

exports[`Vue > svelte > Typescript Test > html 1`] = `
"<template>
  <div v-html=\\"html\\"></div>
</template>

<script lang=\\"ts\\">
export default {
  name: \\"my-component\\",

  data() {
    return { html: \\"<b>bold</b>\\" };
  },
};
</script>"
`;

exports[`Vue > svelte > Typescript Test > ifElse 1`] = `
"<template>
  <button v-if=\\"show\\" @click=\\"toggle($event)\\">Hide</button>
  <button v-else @click=\\"toggle($event)\\">Show</button>
</template>

<script lang=\\"ts\\">
export default {
  name: \\"my-component\\",

  data() {
    return { show: true };
  },

  methods: {
    toggle: function toggle() {
      this.show = !this.show;
    },
  },
};
</script>"
`;

exports[`Vue > svelte > Typescript Test > imports 1`] = `
"<template>
  <div>
    <button type=\\"button\\" :disabled=\\"disabled\\"><slot /></button>
  </div>
</template>

<script lang=\\"ts\\">
import Button from \\"./Button.vue\\";

export default {
  name: \\"my-component\\",
  components: { Button: Button },

  data() {
    return { disabled: false };
  },
};
</script>"
`;

exports[`Vue > svelte > Typescript Test > lifecycleHooks 1`] = `
"<template>
  <div></div>
</template>

<script lang=\\"ts\\">
export default {
  name: \\"my-component\\",

  mounted() {
    console.log(\\"onMount\\");
  },
  updated() {
    console.log(\\"onAfterUpdate\\");
  },

  unmounted() {
    console.log(\\"onDestroy\\");
  },
};
</script>"
`;

exports[`Vue > svelte > Typescript Test > reactive 1`] = `
"<template>
  <div><input :value=\\"name\\" /> Lowercase: {{ lowercaseName }}</div>
</template>

<script lang=\\"ts\\">
export default {
  name: \\"my-component\\",

  data() {
    return { name: \\"Steve\\" };
  },

  computed: {
    lowercaseName() {
      return this.name.toLowerCase();
    },
  },
};
</script>"
`;

exports[`Vue > svelte > Typescript Test > reactiveWithFn 1`] = `
"<template>
  <div>
    <input type=\\"number\\" @input=\\"a = $event.target.value\\" :value=\\"a\\" /><input
      type=\\"number\\"
      @input=\\"b = $event.target.value\\"
      :value=\\"b\\"
    />
    Result: {{ result }}
  </div>
</template>

<script lang=\\"ts\\">
export default {
  name: \\"my-component\\",

  data() {
    return { a: 2, b: 5, result: null };
  },

  watch: {
    onUpdateHook0: {
      handler() {
        this.calculateResult(this.a, this.b);
      },
      immediate: true,
    },
  },

  computed: {
    onUpdateHook0() {
      return {
        0: this.a,
        1: this.b,
      };
    },
  },

  methods: {
    calculateResult: function calculateResult(a_, b_) {
      this.result = a_ * b_;
    },
  },
};
</script>"
`;

exports[`Vue > svelte > Typescript Test > slots 1`] = `
"<template>
  <div>
    <slot>default</slot><slot name=\\"test\\"><div>default</div></slot>
  </div>
</template>

<script lang=\\"ts\\">
export default {
  name: \\"my-component\\",
};
</script>"
`;

exports[`Vue > svelte > Typescript Test > style 1`] = `
"<template>
  <input class=\\"form-input\\" />
</template>

<script lang=\\"ts\\">
export default {
  name: \\"my-component\\",
};
</script>

<style scoped>
input {
  color: red;
  font-size: 12px;
}

.form-input:focus {
  outline: 1px solid blue;
}
</style>"
`;

exports[`Vue > svelte > Typescript Test > textExpressions 1`] = `
"<template>
  <div>
    normal:
    {{ a + b }}<br />
    conditional
    {{ a > 2 ? \\"hello\\" : \\"bye\\" }}
  </div>
</template>

<script lang=\\"ts\\">
export default {
  name: \\"my-component\\",

  data() {
    return { a: 5, b: 12 };
  },
};
</script>"
`;
