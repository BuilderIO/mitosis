// Vitest Snapshot v1

exports[`Vue > jsx > Javascript Test > AdvancedRef 1`] = `
"<template>
  <div>
    <template v-if=\\"showInput\\">
      <input
        class=\\"input\\"
        ref=\\"inputRef\\"
        :value=\\"name\\"
        @blur=\\"onBlur()\\"
        @input=\\"name = $event.target.value\\"
      />

      <label for=\\"cars\\" ref=\\"inputNoArgRef\\"> Choose a car: </label>

      <select name=\\"cars\\" id=\\"cars\\">
        <option value=\\"supra\\">GR Supra</option>
        <option value=\\"86\\">GR 86</option>
      </select>
    </template>

    Hello
    {{ lowerCaseName() }}! I can run in React, Qwik, Vue, Solid, or Web
    Component!
  </div>
</template>

<script>
export default {
  name: \\"my-basic-ref-component\\",

  props: [\\"showInput\\"],

  data: () => ({ name: \\"PatrickJS\\" }),

  watch: {
    onUpdateHook0() {
      console.log(\\"Received an update\\");
    },
  },

  computed: {
    onUpdateHook0() {
      return {
        0: this.$refs.inputRef,
        1: this.$refs.inputNoArgRef,
      };
    },
  },

  methods: {
    onBlur: function onBlur() {
      // Maintain focus
      this.$refs.inputRef.focus();
    },
    lowerCaseName: function lowerCaseName() {
      return this.name.toLowerCase();
    },
  },
};
</script>

<style scoped>
.input {
  color: red;
}
</style>"
`;

exports[`Vue > jsx > Javascript Test > Basic 1`] = `
"unknown: Missing semicolon. (1:29)

> 1 | let _ =  underscore_fn_name() {
    |                              ^
  2 |   return 'bar';
  3 | }"
`;

exports[`Vue > jsx > Javascript Test > Basic 2`] = `
"<template>
  <div>
    <template v-if=\\"person === name\\">
      <input
        :value=\\"name\\"
        @input=\\"name = $event.target.value + ' and ' + person\\"
      />

      Hello
      {{ person }}
      ! I can run in Qwik, Web Component, React, Vue, Solid, or Liquid!
    </template>
  </div>
</template>

<script>
export default {
  name: \\"my-basic-for-show-component\\",

  data: () => ({ name: \\"PatrickJS\\", names: [\\"Steve\\", \\"PatrickJS\\"] }),
};
</script>"
`;

exports[`Vue > jsx > Javascript Test > Basic Context 1`] = `
"<template>
  <div>
    {{ myService.method(\\"hello\\") + name }}
    Hello! I can run in React, Vue, Solid, or Liquid!
    <input @input=\\"onChange\\" />
  </div>
</template>

<script>
import { Injector, createInjector, MyService } from \\"@dummy/injection-js\\";

export default {
  name: \\"my-basic-component\\",

  data: () => ({ name: \\"PatrickJS\\" }),

  provide() {
    return {
      Injector: createInjector(),
    };
  },
  inject: {
    myService: \\"MyService\\",
  },
  created() {
    const hi = this.myService.method(\\"hi\\");
    console.log(hi);
  },
  mounted() {
    const bye = this.myService.method(\\"hi\\");
    console.log(bye);
  },

  methods: {
    onChange: function onChange() {
      const change = this.myService.method(\\"change\\");
      console.log(change);
    },
  },
};
</script>"
`;

exports[`Vue > jsx > Javascript Test > Basic OnMount Update 1`] = `
"<template>
  <div>Hello {{ name }}</div>
</template>

<script>
export default {
  name: \\"my-basic-on-mount-update-component\\",

  props: [\\"hi\\", \\"bye\\"],

  data: () => ({ name: \\"PatrickJS\\", names: [\\"Steve\\", \\"PatrickJS\\"] }),

  created() {
    this.name = \\"PatrickJS onInit\\" + this.hi;
  },
  mounted() {
    this.name = \\"PatrickJS onMount\\" + this.bye;
  },
};
</script>"
`;

exports[`Vue > jsx > Javascript Test > Basic Outputs 1`] = `
"<template>
  <div></div>
</template>

<script>
export default {
  name: \\"my-basic-outputs-component\\",

  props: [\\"onMessage\\", \\"onEvent\\", \\"message\\"],

  data: () => ({ name: \\"PatrickJS\\" }),

  mounted() {
    this.onMessage(this.name);
    this.onEvent(this.message);
  },
};
</script>"
`;

exports[`Vue > jsx > Javascript Test > Basic Outputs Meta 1`] = `
"<template>
  <div></div>
</template>

<script>
export default {
  name: \\"my-basic-outputs-component\\",

  props: [\\"onMessage\\", \\"onEvent\\", \\"message\\"],

  data: () => ({ name: \\"PatrickJS\\" }),

  mounted() {
    this.onMessage(this.name);
    this.onEvent(this.message);
  },
};
</script>"
`;

exports[`Vue > jsx > Javascript Test > BasicAttribute 1`] = `
"<template>
  <input autocapitalize=\\"on\\" autocomplete=\\"on\\" :spellcheck=\\"true\\" />
</template>

<script>
export default {
  name: \\"my-component\\",
};
</script>"
`;

exports[`Vue > jsx > Javascript Test > BasicBooleanAttribute 1`] = `
"<template>
  <div>
    <slot /> {{ type }}
    <my-boolean-attribute-component
      :toggle=\\"true\\"
    ></my-boolean-attribute-component>
    <my-boolean-attribute-component
      :toggle=\\"true\\"
    ></my-boolean-attribute-component>
    <my-boolean-attribute-component
      :list=\\"null\\"
    ></my-boolean-attribute-component>
  </div>
</template>

<script>
import MyBooleanAttributeComponent from \\"./basic-boolean-attribute-component.raw\\";

export default {
  name: \\"my-boolean-attribute\\",
  components: { MyBooleanAttributeComponent: MyBooleanAttributeComponent },
  props: [\\"type\\"],
};
</script>"
`;

exports[`Vue > jsx > Javascript Test > BasicChildComponent 1`] = `
"<template>
  <div>
    <my-basic-component :id=\\"dev\\"></my-basic-component>
    <div>
      <my-basic-on-mount-update-component
        :hi=\\"name\\"
        :bye=\\"dev\\"
      ></my-basic-on-mount-update-component>
    </div>
  </div>
</template>

<script>
import MyBasicComponent from \\"./basic.raw\\";
import MyBasicOnMountUpdateComponent from \\"./basic-onMount-update.raw\\";

export default {
  name: \\"my-basic-child-component\\",
  components: {
    MyBasicComponent: MyBasicComponent,
    MyBasicOnMountUpdateComponent: MyBasicOnMountUpdateComponent,
  },

  data: () => ({ name: \\"Steve\\", dev: \\"PatrickJS\\" }),
};
</script>"
`;

exports[`Vue > jsx > Javascript Test > BasicFor 1`] = `
"<template>
  <div>
    <input
      :value=\\"name\\"
      @input=\\"name = $event.target.value + ' and ' + person\\"
    />

    Hello
    {{ person }}
    ! I can run in Qwik, Web Component, React, Vue, Solid, or Liquid!
  </div>
</template>

<script>
export default {
  name: \\"my-basic-for-component\\",

  data: () => ({ name: \\"PatrickJS\\", names: [\\"Steve\\", \\"PatrickJS\\"] }),

  mounted() {
    console.log(\\"onMount code\\");
  },
};
</script>"
`;

exports[`Vue > jsx > Javascript Test > BasicRef 1`] = `
"<template>
  <div>
    <template v-if=\\"showInput\\">
      <input
        class=\\"input\\"
        ref=\\"inputRef\\"
        :value=\\"name\\"
        @blur=\\"onBlur()\\"
        @input=\\"name = $event.target.value\\"
      />

      <label for=\\"cars\\" ref=\\"inputNoArgRef\\"> Choose a car: </label>

      <select name=\\"cars\\" id=\\"cars\\">
        <option value=\\"supra\\">GR Supra</option>
        <option value=\\"86\\">GR 86</option>
      </select>
    </template>

    Hello
    {{ lowerCaseName() }}! I can run in React, Qwik, Vue, Solid, or Web
    Component!
  </div>
</template>

<script>
export default {
  name: \\"my-basic-ref-component\\",

  props: [\\"showInput\\"],

  data: () => ({ name: \\"PatrickJS\\" }),

  methods: {
    onBlur: function onBlur() {
      // Maintain focus
      this.$refs.inputRef.focus();
    },
    lowerCaseName: function lowerCaseName() {
      return this.name.toLowerCase();
    },
  },
};
</script>

<style scoped>
.input {
  color: red;
}
</style>"
`;

exports[`Vue > jsx > Javascript Test > BasicRefAssignment 1`] = `
"<template>
  <div>
    <button @click=\\"handlerClick($event)\\">Click</button>
  </div>
</template>

<script>
export default {
  name: \\"my-basic-ref-assignment-component\\",

  methods: {
    handlerClick: function handlerClick(event) {
      event.preventDefault();
      console.log(\\"current value\\", this.$refs.holdValueRef);
      this.$refs.holdValueRef = this.$refs.holdValueRef + \\"JS\\";
    },
  },
};
</script>"
`;

exports[`Vue > jsx > Javascript Test > BasicRefPrevious 1`] = `
"<template>
  <div>
    <h1>Now: {{ count }}, before: {{ this.$refs.prevCount }}</h1>
    <button @click=\\"count += 1\\">Increment</button>
  </div>
</template>

<script>
export function usePrevious<T>(value: T) {
  // The ref object is a generic container whose current property is mutable ...
  // ... and can hold any value, similar to an instance property on a class
  let ref = useRef < T > null; // Store current value in ref

  onUpdate(() => {
    ref = value;
  }, [value]); // Only re-run if value changes
  // Return previous value (happens before update in useEffect above)

  return ref;
}

export default {
  name: \\"my-previous-component\\",

  data: () => ({ count: 0 }),

  watch: {
    onUpdateHook0() {
      this.$refs.prevCount = this.count;
    },
  },

  computed: {
    onUpdateHook0() {
      return {
        0: this.count,
      };
    },
  },
};
</script>"
`;

exports[`Vue > jsx > Javascript Test > Button 1`] = `
"<template>
  <div>
    <template v-if=\\"link\\">
      <a
        :href=\\"link\\"
        :target=\\"openLinkInNewTab ? '_blank' : undefined\\"
        v-bind=\\"attributes\\"
      >
        {{ text }}
      </a>
    </template>

    <template v-if=\\"!link\\">
      <button type=\\"button\\" v-bind=\\"attributes\\">
        {{ text }}
      </button>
    </template>
  </div>
</template>

<script>
export default {
  name: \\"button\\",

  props: [\\"link\\", \\"attributes\\", \\"openLinkInNewTab\\", \\"text\\"],
};
</script>"
`;

exports[`Vue > jsx > Javascript Test > Columns 1`] = `
"unknown: Missing semicolon. (1:21)

> 1 | let _ =  getColumns() {
    |                      ^
  2 |   return this.columns || [];
  3 | }"
`;

exports[`Vue > jsx > Javascript Test > ContentSlotHtml 1`] = `
"<template>
  <div>
    <slot name=\\"testing\\"></slot>
    <div>
      <hr />
    </div>
    <div>
      <slot />
    </div>
  </div>
</template>

<script>
export default {
  name: \\"content-slot-code\\",
};
</script>"
`;

exports[`Vue > jsx > Javascript Test > ContentSlotJSX 1`] = `
"<template>
  <div>
    <template v-if=\\"$slots.testing\\">
      <div><slot name=\\"testing\\" /></div>
    </template>

    <div>
      <hr />
    </div>
    <div><slot /></div>
  </div>
</template>

<script>
export default {
  name: \\"content-slot-jsx-code\\",

  props: [],
};
</script>"
`;

exports[`Vue > jsx > Javascript Test > CustomCode 1`] = `
"unknown: Missing semicolon. (1:28)

> 1 | let _ =  findAndRunScripts() {
    |                             ^
  2 |   // TODO: Move this function to standalone one in '@builder.io/utils'
  3 |   if (this.$refs.elem && typeof window !== 'undefined') {
  4 |     /** @type {HTMLScriptElement[]} */"
`;

exports[`Vue > jsx > Javascript Test > Embed 1`] = `
"unknown: Missing semicolon. (1:28)

> 1 | let _ =  findAndRunScripts() {
    |                             ^
  2 |   // TODO: Move this function to standalone one in '@builder.io/utils'
  3 |   if (this.$refs.elem && typeof window !== 'undefined') {
  4 |     /** @type {HTMLScriptElement[]} */"
`;

exports[`Vue > jsx > Javascript Test > Form 1`] = `
"unknown: Missing semicolon. (1:24)

> 1 | let _ =  onSubmit(event) {
    |                         ^
  2 |   const sendWithJs = this.sendWithJs || this.sendSubmissionsTo === 'email';
  3 |
  4 |   if (this.sendSubmissionsTo === 'zapier') {"
`;

exports[`Vue > jsx > Javascript Test > Image 1`] = `
"unknown: Missing semicolon. (1:20)

> 1 | let _ =  setLoaded() {
    |                     ^
  2 |   state.imageLoaded = true;
  3 | }"
`;

exports[`Vue > jsx > Javascript Test > Image State 1`] = `
"<template>
  <div>
    <img class=\\"custom-class\\" :src=\\"item\\" :key=\\"itemIndex\\" />
  </div>
</template>

<script>
export default {
  name: \\"img-state-component\\",

  data: () => ({ canShow: true, images: [\\"http://example.com/qwik.png\\"] }),
};
</script>"
`;

exports[`Vue > jsx > Javascript Test > Img 1`] = `
"<template>
  <img
    :style=\\"{
      objectFit: backgroundSize || 'cover',
      objectPosition: backgroundPosition || 'center',
    }\\"
    :key=\\"(Builder.isEditing && imgSrc) || 'default-key'\\"
    :alt=\\"altText\\"
    :src=\\"imgSrc\\"
    v-bind=\\"attributes\\"
  />
</template>

<script>
import { Builder } from \\"@builder.io/sdk\\";

export default {
  name: \\"img-component\\",

  props: [
    \\"backgroundSize\\",
    \\"backgroundPosition\\",
    \\"attributes\\",
    \\"imgSrc\\",
    \\"altText\\",
  ],
};
</script>"
`;

exports[`Vue > jsx > Javascript Test > Input 1`] = `
"<template>
  <input
    :key=\\"Builder.isEditing && defaultValue ? defaultValue : 'default-key'\\"
    :placeholder=\\"placeholder\\"
    :type=\\"type\\"
    :name=\\"name\\"
    :value=\\"value\\"
    :defaultValue=\\"defaultValue\\"
    :required=\\"required\\"
    v-bind=\\"attributes\\"
  />
</template>

<script>
import { Builder } from \\"@builder.io/sdk\\";

export default {
  name: \\"form-input-component\\",

  props: [
    \\"attributes\\",
    \\"defaultValue\\",
    \\"placeholder\\",
    \\"type\\",
    \\"name\\",
    \\"value\\",
    \\"required\\",
  ],
};
</script>"
`;

exports[`Vue > jsx > Javascript Test > RawText 1`] = `
"<template>
  <span
    :class=\\"_classStringToObject(attributes?.class || attributes?.className)\\"
    v-html=\\"text || ''\\"
  ></span>
</template>

<script>
export default {
  name: \\"raw-text\\",

  props: [\\"attributes\\", \\"text\\"],

  methods: {
    _classStringToObject(str) {
      const obj = {};
      if (typeof str !== \\"string\\") {
        return obj;
      }
      const classNames = str.trim().split(/\\\\s+/);
      for (const name of classNames) {
        obj[name] = true;
      }
      return obj;
    },
  },
};
</script>"
`;

exports[`Vue > jsx > Javascript Test > Section 1`] = `
"<template>
  <section
    :style=\\"
      maxWidth && typeof maxWidth === 'number'
        ? {
            maxWidth: maxWidth,
          }
        : undefined
    \\"
    v-bind=\\"attributes\\"
  >
    <slot />
  </section>
</template>

<script>
export default {
  name: \\"section-component\\",

  props: [\\"attributes\\", \\"maxWidth\\"],
};
</script>"
`;

exports[`Vue > jsx > Javascript Test > Section 2`] = `
"<template>
  <section
    v-for=\\"(item, index) in items\\"
    v-if=\\"max\\"
    :style=\\"{
      maxWidth: item + max,
    }\\"
    :key=\\"index\\"
    v-bind=\\"attributes\\"
  >
    <slot />
  </section>
</template>

<script>
export default {
  name: \\"section-state-component\\",

  props: [\\"attributes\\"],

  data: () => ({ max: 42, items: [42] }),
};
</script>"
`;

exports[`Vue > jsx > Javascript Test > Select 1`] = `
"<template>
  <select
    :value=\\"value\\"
    :key=\\"Builder.isEditing && defaultValue ? defaultValue : 'default-key'\\"
    :defaultValue=\\"defaultValue\\"
    :name=\\"name\\"
    v-bind=\\"attributes\\"
  >
    <option
      v-for=\\"(option, index) in options\\"
      :value=\\"option.value\\"
      :data-index=\\"index\\"
      :key=\\"index\\"
    >
      {{ option.name || option.value }}
    </option>
  </select>
</template>

<script>
import { Builder } from \\"@builder.io/sdk\\";

export default {
  name: \\"select-component\\",

  props: [\\"attributes\\", \\"value\\", \\"defaultValue\\", \\"name\\", \\"options\\"],
};
</script>"
`;

exports[`Vue > jsx > Javascript Test > SlotHtml 1`] = `
"<template>
  <div>
    <content-slot-code>
      <template #testing>
        <div>Hello</div>
      </template>
    </content-slot-code>
  </div>
</template>

<script>
import ContentSlotCode from \\"./content-slot-jsx.raw\\";

export default {
  name: \\"slot-code\\",
  components: { ContentSlotCode: ContentSlotCode },
};
</script>"
`;

exports[`Vue > jsx > Javascript Test > SlotJsx 1`] = `
"<template>
  <div>
    <content-slot-code :slotTesting=\\"<div>Hello</div>\\"></content-slot-code>
  </div>
</template>

<script>
import ContentSlotCode from \\"./content-slot-jsx.raw\\";

export default {
  name: \\"slot-code\\",
  components: { ContentSlotCode: ContentSlotCode },
};
</script>"
`;

exports[`Vue > jsx > Javascript Test > Stamped.io 1`] = `
"unknown: Missing semicolon. (1:25)

> 1 | let _ =  kebabCaseValue() {
    |                          ^
  2 |   return kebabCase('testThat');
  3 | }"
`;

exports[`Vue > jsx > Javascript Test > Submit 1`] = `
"<template>
  <button type=\\"submit\\" v-bind=\\"attributes\\">
    {{ text }}
  </button>
</template>

<script>
export default {
  name: \\"submit-button\\",

  props: [\\"attributes\\", \\"text\\"],
};
</script>"
`;

exports[`Vue > jsx > Javascript Test > Text 1`] = `
"<template>
  <div
    :contentEditable=\\"allowEditingText || undefined\\"
    :data-name=\\"{
      test: name || 'any name',
    }\\"
    v-html=\\"text || content || name || '<p class=\\\\'text-lg\\\\'>my name</p>'\\"
  ></div>
</template>

<script>
import { Builder } from \\"@builder.io/sdk\\";

export default {
  name: \\"text\\",

  props: [\\"text\\", \\"content\\"],

  data: () => ({ name: \\"Decadef20\\" }),
};
</script>"
`;

exports[`Vue > jsx > Javascript Test > Textarea 1`] = `
"<template>
  <textarea
    :placeholder=\\"placeholder\\"
    :name=\\"name\\"
    :value=\\"value\\"
    :defaultValue=\\"defaultValue\\"
    v-bind=\\"attributes\\"
  ></textarea>
</template>

<script>
export default {
  name: \\"textarea\\",

  props: [\\"attributes\\", \\"placeholder\\", \\"name\\", \\"value\\", \\"defaultValue\\"],
};
</script>"
`;

exports[`Vue > jsx > Javascript Test > Video 1`] = `
"<template>
  <video
    preload=\\"none\\"
    :style=\\"{
      width: '100%',
      height: '100%',
      ...attributes?.style,
      objectFit: fit,
      objectPosition: position,
      // Hack to get object fit to work as expected and
      // not have the video overflow
      borderRadius: 1,
    }\\"
    :key=\\"video || 'no-src'\\"
    :poster=\\"posterImage\\"
    :autoplay=\\"autoPlay\\"
    :muted=\\"muted\\"
    :controls=\\"controls\\"
    :loop=\\"loop\\"
    v-bind=\\"attributes\\"
  ></video>
</template>

<script>
export default {
  name: \\"video\\",

  props: [
    \\"attributes\\",
    \\"fit\\",
    \\"position\\",
    \\"video\\",
    \\"posterImage\\",
    \\"autoPlay\\",
    \\"muted\\",
    \\"controls\\",
    \\"loop\\",
  ],
};
</script>"
`;

exports[`Vue > jsx > Javascript Test > arrowFunctionInUseStore 1`] = `
"unknown: Missing semicolon. (1:23)

> 1 | let _ =  setName(value) {
    |                        ^
  2 |   state.name = value;
  3 | }"
`;

exports[`Vue > jsx > Javascript Test > basicForwardRef 1`] = `
"<template>
  <div>
    <input
      class=\\"input\\"
      ref=\\"inputRef\\"
      :value=\\"name\\"
      @input=\\"name = $event.target.value\\"
    />
  </div>
</template>

<script>
export default {
  name: \\"my-basic-forward-ref-component\\",

  props: [\\"inputRef\\"],

  data: () => ({ name: \\"PatrickJS\\" }),
};
</script>

<style scoped>
.input {
  color: red;
}
</style>"
`;

exports[`Vue > jsx > Javascript Test > basicForwardRefMetadata 1`] = `
"<template>
  <div>
    <input
      class=\\"input\\"
      ref=\\"inputRef\\"
      :value=\\"name\\"
      @input=\\"name = $event.target.value\\"
    />
  </div>
</template>

<script>
export default {
  name: \\"my-basic-forward-ref-component\\",

  props: [\\"inputRef\\"],

  data: () => ({ name: \\"PatrickJS\\" }),
};
</script>

<style scoped>
.input {
  color: red;
}
</style>"
`;

exports[`Vue > jsx > Javascript Test > basicOnUpdateReturn 1`] = `
"<template>
  <div>Hello! {{ name }}</div>
</template>

<script>
export default {
  name: \\"my-basic-on-update-return-component\\",

  data: () => ({ name: \\"PatrickJS\\" }),

  watch: {
    onUpdateHook0() {
      const controller = new AbortController();
      const signal = controller.signal;
      fetch(\\"https://patrickjs.com/api/resource.json\\", {
        signal,
      })
        .then((response) => response.json())
        .then((data) => {
          this.name = data.name;
        });
      return () => {
        if (!signal.aborted) {
          controller.abort();
        }
      };
    },
  },

  computed: {
    onUpdateHook0() {
      return {
        0: this.name,
      };
    },
  },
};
</script>"
`;

exports[`Vue > jsx > Javascript Test > class + ClassName + css 1`] = `
"<template>
  <div class=\\"test2 test div\\">
    Hello! I can run in React, Vue, Solid, or Liquid!
  </div>
</template>

<script>
export default {
  name: \\"my-basic-component\\",
};
</script>

<style scoped>
.div {
  padding: 10px;
}
</style>"
`;

exports[`Vue > jsx > Javascript Test > class + css 1`] = `
"<template>
  <div class=\\"test div\\">Hello! I can run in React, Vue, Solid, or Liquid!</div>
</template>

<script>
export default {
  name: \\"my-basic-component\\",
};
</script>

<style scoped>
.div {
  padding: 10px;
}
</style>"
`;

exports[`Vue > jsx > Javascript Test > className + css 1`] = `
"<template>
  <div class=\\"test div\\">Hello! I can run in React, Vue, Solid, or Liquid!</div>
</template>

<script>
export default {
  name: \\"my-basic-component\\",
};
</script>

<style scoped>
.div {
  padding: 10px;
}
</style>"
`;

exports[`Vue > jsx > Javascript Test > className 1`] = `
"<template>
  <div>
    <div class=\\"no binding\\">Without Binding</div>

    <div :class=\\"_classStringToObject(bindings)\\">With binding</div>
  </div>
</template>

<script>
export default {
  name: \\"class-name-code\\",

  data: () => ({ bindings: \\"a binding\\" }),

  methods: {
    _classStringToObject(str) {
      const obj = {};
      if (typeof str !== \\"string\\") {
        return obj;
      }
      const classNames = str.trim().split(/\\\\s+/);
      for (const name of classNames) {
        obj[name] = true;
      }
      return obj;
    },
  },
};
</script>"
`;

exports[`Vue > jsx > Javascript Test > classState 1`] = `
"<template>
  <div :class=\\"_classStringToObject(classState + ' div')\\" :style=\\"styleState\\">
    Hello! I can run in React, Vue, Solid, or Liquid!
  </div>
</template>

<script>
export default {
  name: \\"my-basic-component\\",

  data: () => ({
    classState: \\"testClassName\\",
    styleState: {
      color: \\"red\\",
    },
  }),

  methods: {
    _classStringToObject(str) {
      const obj = {};
      if (typeof str !== \\"string\\") {
        return obj;
      }
      const classNames = str.trim().split(/\\\\s+/);
      for (const name of classNames) {
        obj[name] = true;
      }
      return obj;
    },
  },
};
</script>

<style scoped>
.div {
  padding: 10px;
}
</style>"
`;

exports[`Vue > jsx > Javascript Test > componentWithContext 1`] = `"Vue 2 template should have a single root element"`;

exports[`Vue > jsx > Javascript Test > contentState 1`] = `
"<template>
  <div>setting context</div>
</template>

<script>
import BuilderContext from \\"@dummy/context.vue\\";

export default {
  name: \\"render-content\\",
  components: { BuilderContext: BuilderContext },
  props: [\\"content\\", \\"customComponents\\"],

  provide() {
    return {
      BuilderContext: {
        content: this.content,
        registeredComponents: this.customComponents,
      },
    };
  },
};
</script>"
`;

exports[`Vue > jsx > Javascript Test > defaultProps 1`] = `
"<template>
  <div>
    <template v-if=\\"link\\">
      <a
        :href=\\"link\\"
        :target=\\"openLinkInNewTab ? '_blank' : undefined\\"
        v-bind=\\"attributes\\"
      >
        {{ text }}
      </a>
    </template>

    <template v-if=\\"!link\\">
      <button type=\\"button\\" v-bind=\\"attributes\\">
        {{ text }}
      </button>
    </template>
  </div>
</template>

<script>
export default {
  name: \\"button\\",

  props: {
    link: { default: \\"https://builder.io/\\" },
    attributes: {},
    openLinkInNewTab: { default: false },
    text: { default: \\"default text\\" },
  },
};
</script>"
`;

exports[`Vue > jsx > Javascript Test > defaultPropsOutsideComponent 1`] = `
"<template>
  <div>
    <template v-if=\\"link\\">
      <a
        :href=\\"link\\"
        :target=\\"openLinkInNewTab ? '_blank' : undefined\\"
        v-bind=\\"attributes\\"
      >
        {{ text }}
      </a>
    </template>

    <template v-if=\\"!link\\">
      <button type=\\"button\\" v-bind=\\"attributes\\">
        {{ text }}
      </button>
    </template>
  </div>
</template>

<script>
export default {
  name: \\"button\\",

  props: {
    link: { default: \\"https://builder.io/\\" },
    attributes: {},
    openLinkInNewTab: { default: false },
    text: { default: \\"default text\\" },
  },
};
</script>"
`;

exports[`Vue > jsx > Javascript Test > defaultValsWithTypes 1`] = `
"<template>
  <div>Hello {{ name || DEFAULT_VALUES.name }}</div>
</template>

<script>
const DEFAULT_VALUES: Props = {
  name: \\"Sami\\",
};

export default {
  name: \\"component-with-types\\",

  props: [\\"name\\"],

  data: () => ({ DEFAULT_VALUES }),
};
</script>"
`;

exports[`Vue > jsx > Javascript Test > expressionState 1`] = `
"<template>
  <div>{{ refToUse }}</div>
</template>

<script>
export default {
  name: \\"my-component\\",

  props: [\\"componentRef\\"],

  data: () => ({
    refToUse: !(this.componentRef instanceof Function)
      ? this.componentRef
      : null,
  }),
};
</script>"
`;

exports[`Vue > jsx > Javascript Test > import types 1`] = `
"unknown: Missing semicolon. (1:44)

> 1 | let _ =  getRenderContentProps(block, index) {
    |                                             ^
  2 |   return {
  3 |     block: block,
  4 |     index: index"
`;

exports[`Vue > jsx > Javascript Test > multipleOnUpdate 1`] = `
"<template>
  <div></div>
</template>

<script>
export default {
  name: \\"multiple-on-update\\",

  updated() {
    console.log(\\"Runs on every update/rerender\\");
    console.log(\\"Runs on every update/rerender as well\\");
  },
};
</script>"
`;

exports[`Vue > jsx > Javascript Test > multipleOnUpdateWithDeps 1`] = `
"<template>
  <div></div>
</template>

<script>
export default {
  name: \\"multiple-on-update-with-deps\\",

  data: () => ({ a: \\"a\\", b: \\"b\\", c: \\"c\\", d: \\"d\\" }),

  watch: {
    onUpdateHook0() {
      console.log(\\"Runs when a or b changes\\", this.a, this.b);

      if (this.a === \\"a\\") {
        this.a = \\"b\\";
      }
    },
    onUpdateHook1() {
      console.log(\\"Runs when c or d changes\\", this.c, this.d);

      if (this.a === \\"a\\") {
        this.a = \\"b\\";
      }
    },
  },

  computed: {
    onUpdateHook0() {
      return {
        0: this.a,
        1: this.b,
      };
    },
    onUpdateHook1() {
      return {
        0: this.c,
        1: this.d,
      };
    },
  },
};
</script>"
`;

exports[`Vue > jsx > Javascript Test > multipleSpreads 1`] = `
"<template>
  <input v-bind=\\"{ ...attrs, ...$props }\\" />
</template>

<script>
export default {
  name: \\"my-basic-component\\",

  data: () => ({
    attrs: {
      hello: \\"world\\",
    },
  }),
};
</script>"
`;

exports[`Vue > jsx > Javascript Test > nestedShow 1`] = `
"<template>
  <div v-if=\\"!Boolean(conditionA)\\">else-condition-A</div>

  <div v-else-if=\\"!Boolean(!conditionB)\\">else-condition-B</div>

  <div v-else>if condition A and condition B</div>
</template>

<script>
export default {
  name: \\"nested-show\\",

  props: [\\"conditionA\\", \\"conditionB\\"],
};
</script>"
`;

exports[`Vue > jsx > Javascript Test > nestedStyles 1`] = `
"<template>
  <div class=\\"div\\">Hello world</div>
</template>

<script>
export default {
  name: \\"nested-styles\\",
};
</script>

<style scoped>
.div {
  display: flex;
  foo: var(--bar);
}
@media (max-width: env(--mobile)) {
  .div {
    display: block;
  }
}
.div:hover {
  display: flex;
}
.div .nested-selector {
  display: grid;
}
</style>"
`;

exports[`Vue > jsx > Javascript Test > onInit & onMount 1`] = `
"<template>
  <div></div>
</template>

<script>
export default {
  name: \\"on-init\\",

  created() {
    console.log(\\"onInit\\");
  },
  mounted() {
    console.log(\\"onMount\\");
  },
};
</script>"
`;

exports[`Vue > jsx > Javascript Test > onInit 1`] = `
"<template>
  <div>Default name defined by parent {{ name }}</div>
</template>

<script>
export const defaultValues = {
  name: \\"PatrickJS\\",
};

export default {
  name: \\"on-init\\",

  props: [\\"name\\"],

  data: () => ({ name: \\"\\" }),

  created() {
    this.name = defaultValues.name || this.name;
    console.log(\\"set defaults with props\\");
  },
};
</script>"
`;

exports[`Vue > jsx > Javascript Test > onMount 1`] = `
"<template>
  <div></div>
</template>

<script>
export default {
  name: \\"comp\\",

  mounted() {
    console.log(\\"Runs on mount\\");
  },

  unmounted() {
    console.log(\\"Runs on unMount\\");
  },
};
</script>"
`;

exports[`Vue > jsx > Javascript Test > onUpdate 1`] = `
"<template>
  <div></div>
</template>

<script>
export default {
  name: \\"on-update\\",

  updated() {
    console.log(\\"Runs on every update/rerender\\");
  },
};
</script>"
`;

exports[`Vue > jsx > Javascript Test > onUpdateWithDeps 1`] = `
"<template>
  <div></div>
</template>

<script>
export default {
  name: \\"on-update-with-deps\\",

  props: [\\"size\\"],

  data: () => ({ a: \\"a\\", b: \\"b\\" }),

  watch: {
    onUpdateHook0() {
      console.log(\\"Runs when a, b or size changes\\", this.a, this.b, this.size);
    },
  },

  computed: {
    onUpdateHook0() {
      return {
        0: this.a,
        1: this.b,
        2: this.size,
      };
    },
  },
};
</script>"
`;

exports[`Vue > jsx > Javascript Test > preserveExportOrLocalStatement 1`] = `
"<template>
  <div></div>
</template>

<script>
const b = 3;
const foo = () => {};
export const a = 3;
export const bar = () => {};
export function run<T>(value: T) {}

export default {
  name: \\"my-basic-component\\",
};
</script>"
`;

exports[`Vue > jsx > Javascript Test > preserveTyping 1`] = `
"<template>
  <div>Hello! I can run in React, Vue, Solid, or Liquid! {{ name }}</div>
</template>

<script>
export default {
  name: \\"my-basic-component\\",

  props: [\\"name\\"],
};
</script>"
`;

exports[`Vue > jsx > Javascript Test > propsDestructure 1`] = `
"<template>
  <div>
    <slot /> {{ type }}
    Hello! I can run in React, Vue, Solid, or Liquid!
  </div>
</template>

<script>
export default {
  name: \\"my-basic-component\\",

  props: [\\"type\\"],

  data: () => ({ name: \\"Decadef20\\" }),
};
</script>"
`;

exports[`Vue > jsx > Javascript Test > propsInterface 1`] = `
"<template>
  <div>Hello! I can run in React, Vue, Solid, or Liquid! {{ name }}</div>
</template>

<script>
export default {
  name: \\"my-basic-component\\",

  props: [\\"name\\"],
};
</script>"
`;

exports[`Vue > jsx > Javascript Test > propsType 1`] = `
"<template>
  <div>Hello! I can run in React, Vue, Solid, or Liquid! {{ name }}</div>
</template>

<script>
export default {
  name: \\"my-basic-component\\",

  props: [\\"name\\"],
};
</script>"
`;

exports[`Vue > jsx > Javascript Test > renderContentExample 1`] = `
"<template>
  <div class=\\"div\\" @click=\\"trackClick(content.id)\\">
    <render-blocks :blocks=\\"content.blocks\\"></render-blocks>
  </div>
</template>

<script>
import {
  sendComponentsToVisualEditor,
  dispatchNewContentToVisualEditor,
  trackClick,
} from \\"@dummy/injection-js\\";
import BuilderContext from \\"@dummy/context.vue\\";
import RenderBlocks from \\"@dummy/RenderBlocks.lite.tsx\\";

export default {
  name: \\"render-content\\",
  components: { RenderBlocks: RenderBlocks, BuilderContext: BuilderContext },
  props: [\\"content\\", \\"customComponents\\"],

  data: () => ({ trackClick }),

  provide() {
    return {
      BuilderContext: {
        get content() {
          return 3;
        },
        get registeredComponents() {
          return 4;
        },
      },
    };
  },

  mounted() {
    sendComponentsToVisualEditor(this.customComponents);
  },

  watch: {
    onUpdateHook0() {
      dispatchNewContentToVisualEditor(this.content);
    },
  },

  computed: {
    onUpdateHook0() {
      return {
        0: this.content,
      };
    },
  },
};
</script>

<style scoped>
.div {
  display: flex;
  flex-direction: columns;
}
</style>"
`;

exports[`Vue > jsx > Javascript Test > rootFragmentMultiNode 1`] = `"Vue 2 template should have a single root element"`;

exports[`Vue > jsx > Javascript Test > rootShow 1`] = `
"<template>
  <div v-if=\\"foo === 'bar'\\">Bar</div>
  <div v-else>Foo</div>
</template>

<script>
export default {
  name: \\"render-styles\\",

  props: [\\"foo\\"],
};
</script>"
`;

exports[`Vue > jsx > Javascript Test > self-referencing component 1`] = `
"<template>
  <div>
    {{ name }}

    <template v-if=\\"name === 'Batman'\\">
      <my-component name=\\"Bruce Wayne\\"></my-component>
    </template>
  </div>
</template>

<script>
export default {
  name: \\"my-component\\",

  props: [\\"name\\"],
};
</script>"
`;

exports[`Vue > jsx > Javascript Test > self-referencing component with children 1`] = `
"<template>
  <div>
    {{ name }}
    <slot />

    <template v-if=\\"name === 'Batman'\\">
      <my-component name=\\"Bruce\\">
        <div>Wayne</div>
      </my-component>
    </template>
  </div>
</template>

<script>
export default {
  name: \\"my-component\\",

  props: [\\"name\\"],
};
</script>"
`;

exports[`Vue > jsx > Javascript Test > showWithFor 1`] = `
"<template>
  <div v-for=\\"(item, index) in items\\" v-if=\\"conditionA\\" :key=\\"idx\\">
    {{ item }}
  </div>
  <div v-else>else-condition-A</div>
</template>

<script>
export default {
  name: \\"nested-show\\",

  props: [\\"conditionA\\", \\"items\\"],
};
</script>"
`;

exports[`Vue > jsx > Javascript Test > spreadAttrs 1`] = `
"<template>
  <input v-bind=\\"attrs\\" />
</template>

<script>
export default {
  name: \\"my-basic-component\\",
};
</script>"
`;

exports[`Vue > jsx > Javascript Test > spreadNestedProps 1`] = `
"<template>
  <input v-bind=\\"nested\\" />
</template>

<script>
export default {
  name: \\"my-basic-component\\",

  props: [\\"nested\\"],
};
</script>"
`;

exports[`Vue > jsx > Javascript Test > spreadProps 1`] = `
"<template>
  <input v-bind=\\"$props\\" />
</template>

<script>
export default {
  name: \\"my-basic-component\\",
};
</script>"
`;

exports[`Vue > jsx > Javascript Test > subComponent 1`] = `
"<template>
  <foo></foo>
</template>

<script>
import Foo from \\"./foo-sub-component.vue\\";

export default {
  name: \\"sub-component\\",
  components: { Foo: Foo },
};
</script>"
`;

exports[`Vue > jsx > Javascript Test > typeDependency 1`] = `
"<template>
  <div>{{ foo }}</div>
</template>

<script>
export default {
  name: \\"type-dependency\\",

  props: [\\"foo\\"],
};
</script>"
`;

exports[`Vue > jsx > Javascript Test > use-style 1`] = `
"<template>
  <button type=\\"button\\">Button</button>
</template>

<script>
export default {
  name: \\"my-component\\",
};
</script>

<style scoped>
button {
  background: blue;
  color: white;
  font-size: 12px;
  outline: 1px solid black;
}
</style>"
`;

exports[`Vue > jsx > Javascript Test > use-style-and-css 1`] = `
"<template>
  <button type=\\"button\\" class=\\"button\\">Button</button>
</template>

<script>
export default {
  name: \\"my-component\\",
};
</script>

<style scoped>
.button {
  background: blue;
  color: white;
}

button {
  font-size: 12px;
  outline: 1px solid black;
}
</style>"
`;

exports[`Vue > jsx > Javascript Test > use-style-outside-component 1`] = `
"<template>
  <button type=\\"button\\">Button</button>
</template>

<script>
export default {
  name: \\"my-component\\",
};
</script>

<style scoped>
button {
  background: blue;
  color: white;
  font-size: 12px;
  outline: 1px solid black;
}
</style>"
`;

exports[`Vue > jsx > Remove Internal mitosis package 1`] = `
"<template>
  <div>Hello {{ name }}! I can run in React, Qwik, Vue, Solid, or Liquid!</div>
</template>

<script>
export default {
  name: \\"my-basic-component\\",

  data: () => ({ name: \\"PatrickJS\\" }),
};
</script>"
`;

exports[`Vue > jsx > Typescript Test > AdvancedRef 1`] = `
"<template>
  <div>
    <template v-if=\\"showInput\\">
      <input
        class=\\"input\\"
        ref=\\"inputRef\\"
        :value=\\"name\\"
        @blur=\\"onBlur()\\"
        @input=\\"name = $event.target.value\\"
      />

      <label for=\\"cars\\" ref=\\"inputNoArgRef\\"> Choose a car: </label>

      <select name=\\"cars\\" id=\\"cars\\">
        <option value=\\"supra\\">GR Supra</option>
        <option value=\\"86\\">GR 86</option>
      </select>
    </template>

    Hello
    {{ lowerCaseName() }}! I can run in React, Qwik, Vue, Solid, or Web
    Component!
  </div>
</template>

<script lang=\\"ts\\">
export interface Props {
  showInput: boolean;
}

export default {
  name: \\"my-basic-ref-component\\",

  props: [\\"showInput\\"],

  data: () => ({ name: \\"PatrickJS\\" }),

  watch: {
    onUpdateHook0() {
      console.log(\\"Received an update\\");
    },
  },

  computed: {
    onUpdateHook0() {
      return {
        0: this.$refs.inputRef,
        1: this.$refs.inputNoArgRef,
      };
    },
  },

  methods: {
    onBlur: function onBlur() {
      // Maintain focus
      this.$refs.inputRef.focus();
    },
    lowerCaseName: function lowerCaseName() {
      return this.name.toLowerCase();
    },
  },
};
</script>

<style scoped>
.input {
  color: red;
}
</style>"
`;

exports[`Vue > jsx > Typescript Test > Basic 1`] = `
"unknown: Missing semicolon. (1:29)

> 1 | let _ =  underscore_fn_name() {
    |                              ^
  2 |   return 'bar';
  3 | }"
`;

exports[`Vue > jsx > Typescript Test > Basic 2`] = `
"<template>
  <div>
    <template v-if=\\"person === name\\">
      <input
        :value=\\"name\\"
        @input=\\"name = $event.target.value + ' and ' + person\\"
      />

      Hello
      {{ person }}
      ! I can run in Qwik, Web Component, React, Vue, Solid, or Liquid!
    </template>
  </div>
</template>

<script lang=\\"ts\\">
export default {
  name: \\"my-basic-for-show-component\\",

  data: () => ({ name: \\"PatrickJS\\", names: [\\"Steve\\", \\"PatrickJS\\"] }),
};
</script>"
`;

exports[`Vue > jsx > Typescript Test > Basic Context 1`] = `
"<template>
  <div>
    {{ myService.method(\\"hello\\") + name }}
    Hello! I can run in React, Vue, Solid, or Liquid!
    <input @input=\\"onChange\\" />
  </div>
</template>

<script lang=\\"ts\\">
import { Injector, createInjector, MyService } from \\"@dummy/injection-js\\";

export default {
  name: \\"my-basic-component\\",

  data: () => ({ name: \\"PatrickJS\\" }),

  provide() {
    return {
      Injector: createInjector(),
    };
  },
  inject: {
    myService: \\"MyService\\",
  },
  created() {
    const hi = this.myService.method(\\"hi\\");
    console.log(hi);
  },
  mounted() {
    const bye = this.myService.method(\\"hi\\");
    console.log(bye);
  },

  methods: {
    onChange: function onChange() {
      const change = this.myService.method(\\"change\\");
      console.log(change);
    },
  },
};
</script>"
`;

exports[`Vue > jsx > Typescript Test > Basic OnMount Update 1`] = `
"<template>
  <div>Hello {{ name }}</div>
</template>

<script lang=\\"ts\\">
export interface Props {
  hi: string;
  bye: string;
}

export default {
  name: \\"my-basic-on-mount-update-component\\",

  props: [\\"hi\\", \\"bye\\"],

  data: () => ({ name: \\"PatrickJS\\", names: [\\"Steve\\", \\"PatrickJS\\"] }),

  created() {
    this.name = \\"PatrickJS onInit\\" + this.hi;
  },
  mounted() {
    this.name = \\"PatrickJS onMount\\" + this.bye;
  },
};
</script>"
`;

exports[`Vue > jsx > Typescript Test > Basic Outputs 1`] = `
"<template>
  <div></div>
</template>

<script lang=\\"ts\\">
export default {
  name: \\"my-basic-outputs-component\\",

  props: [\\"onMessage\\", \\"onEvent\\", \\"message\\"],

  data: () => ({ name: \\"PatrickJS\\" }),

  mounted() {
    this.onMessage(this.name);
    this.onEvent(this.message);
  },
};
</script>"
`;

exports[`Vue > jsx > Typescript Test > Basic Outputs Meta 1`] = `
"<template>
  <div></div>
</template>

<script lang=\\"ts\\">
export default {
  name: \\"my-basic-outputs-component\\",

  props: [\\"onMessage\\", \\"onEvent\\", \\"message\\"],

  data: () => ({ name: \\"PatrickJS\\" }),

  mounted() {
    this.onMessage(this.name);
    this.onEvent(this.message);
  },
};
</script>"
`;

exports[`Vue > jsx > Typescript Test > BasicAttribute 1`] = `
"<template>
  <input autocapitalize=\\"on\\" autocomplete=\\"on\\" :spellcheck=\\"true\\" />
</template>

<script lang=\\"ts\\">
export default {
  name: \\"my-component\\",
};
</script>"
`;

exports[`Vue > jsx > Typescript Test > BasicBooleanAttribute 1`] = `
"<template>
  <div>
    <slot /> {{ type }}
    <my-boolean-attribute-component
      :toggle=\\"true\\"
    ></my-boolean-attribute-component>
    <my-boolean-attribute-component
      :toggle=\\"true\\"
    ></my-boolean-attribute-component>
    <my-boolean-attribute-component
      :list=\\"null\\"
    ></my-boolean-attribute-component>
  </div>
</template>

<script lang=\\"ts\\">
type Props = {
  children: any;
  type: string;
};

import MyBooleanAttributeComponent from \\"./basic-boolean-attribute-component.raw\\";

export default {
  name: \\"my-boolean-attribute\\",
  components: { MyBooleanAttributeComponent: MyBooleanAttributeComponent },
  props: [\\"type\\"],
};
</script>"
`;

exports[`Vue > jsx > Typescript Test > BasicChildComponent 1`] = `
"<template>
  <div>
    <my-basic-component :id=\\"dev\\"></my-basic-component>
    <div>
      <my-basic-on-mount-update-component
        :hi=\\"name\\"
        :bye=\\"dev\\"
      ></my-basic-on-mount-update-component>
    </div>
  </div>
</template>

<script lang=\\"ts\\">
import MyBasicComponent from \\"./basic.raw\\";
import MyBasicOnMountUpdateComponent from \\"./basic-onMount-update.raw\\";

export default {
  name: \\"my-basic-child-component\\",
  components: {
    MyBasicComponent: MyBasicComponent,
    MyBasicOnMountUpdateComponent: MyBasicOnMountUpdateComponent,
  },

  data: () => ({ name: \\"Steve\\", dev: \\"PatrickJS\\" }),
};
</script>"
`;

exports[`Vue > jsx > Typescript Test > BasicFor 1`] = `
"<template>
  <div>
    <input
      :value=\\"name\\"
      @input=\\"name = $event.target.value + ' and ' + person\\"
    />

    Hello
    {{ person }}
    ! I can run in Qwik, Web Component, React, Vue, Solid, or Liquid!
  </div>
</template>

<script lang=\\"ts\\">
export default {
  name: \\"my-basic-for-component\\",

  data: () => ({ name: \\"PatrickJS\\", names: [\\"Steve\\", \\"PatrickJS\\"] }),

  mounted() {
    console.log(\\"onMount code\\");
  },
};
</script>"
`;

exports[`Vue > jsx > Typescript Test > BasicRef 1`] = `
"<template>
  <div>
    <template v-if=\\"showInput\\">
      <input
        class=\\"input\\"
        ref=\\"inputRef\\"
        :value=\\"name\\"
        @blur=\\"onBlur()\\"
        @input=\\"name = $event.target.value\\"
      />

      <label for=\\"cars\\" ref=\\"inputNoArgRef\\"> Choose a car: </label>

      <select name=\\"cars\\" id=\\"cars\\">
        <option value=\\"supra\\">GR Supra</option>
        <option value=\\"86\\">GR 86</option>
      </select>
    </template>

    Hello
    {{ lowerCaseName() }}! I can run in React, Qwik, Vue, Solid, or Web
    Component!
  </div>
</template>

<script lang=\\"ts\\">
export interface Props {
  showInput: boolean;
}

export default {
  name: \\"my-basic-ref-component\\",

  props: [\\"showInput\\"],

  data: () => ({ name: \\"PatrickJS\\" }),

  methods: {
    onBlur: function onBlur() {
      // Maintain focus
      this.$refs.inputRef.focus();
    },
    lowerCaseName: function lowerCaseName() {
      return this.name.toLowerCase();
    },
  },
};
</script>

<style scoped>
.input {
  color: red;
}
</style>"
`;

exports[`Vue > jsx > Typescript Test > BasicRefAssignment 1`] = `
"<template>
  <div>
    <button @click=\\"handlerClick($event)\\">Click</button>
  </div>
</template>

<script lang=\\"ts\\">
export interface Props {
  showInput: boolean;
}

export default {
  name: \\"my-basic-ref-assignment-component\\",

  methods: {
    handlerClick: function handlerClick(event) {
      event.preventDefault();
      console.log(\\"current value\\", this.$refs.holdValueRef);
      this.$refs.holdValueRef = this.$refs.holdValueRef + \\"JS\\";
    },
  },
};
</script>"
`;

exports[`Vue > jsx > Typescript Test > BasicRefPrevious 1`] = `
"<template>
  <div>
    <h1>Now: {{ count }}, before: {{ this.$refs.prevCount }}</h1>
    <button @click=\\"count += 1\\">Increment</button>
  </div>
</template>

<script lang=\\"ts\\">
export interface Props {
  showInput: boolean;
}

export function usePrevious<T>(value: T) {
  // The ref object is a generic container whose current property is mutable ...
  // ... and can hold any value, similar to an instance property on a class
  let ref = useRef<T>(null); // Store current value in ref

  onUpdate(() => {
    ref = value;
  }, [value]); // Only re-run if value changes
  // Return previous value (happens before update in useEffect above)

  return ref;
}

export default {
  name: \\"my-previous-component\\",

  data: () => ({ count: 0 }),

  watch: {
    onUpdateHook0() {
      this.$refs.prevCount = this.count;
    },
  },

  computed: {
    onUpdateHook0() {
      return {
        0: this.count,
      };
    },
  },
};
</script>"
`;

exports[`Vue > jsx > Typescript Test > Button 1`] = `
"<template>
  <div>
    <template v-if=\\"link\\">
      <a
        :href=\\"link\\"
        :target=\\"openLinkInNewTab ? '_blank' : undefined\\"
        v-bind=\\"attributes\\"
      >
        {{ text }}
      </a>
    </template>

    <template v-if=\\"!link\\">
      <button type=\\"button\\" v-bind=\\"attributes\\">
        {{ text }}
      </button>
    </template>
  </div>
</template>

<script lang=\\"ts\\">
export interface ButtonProps {
  attributes?: any;
  text?: string;
  link?: string;
  openLinkInNewTab?: boolean;
}

export default {
  name: \\"button\\",

  props: [\\"link\\", \\"attributes\\", \\"openLinkInNewTab\\", \\"text\\"],
};
</script>"
`;

exports[`Vue > jsx > Typescript Test > Columns 1`] = `
"unknown: Missing semicolon. (1:21)

> 1 | let _ =  getColumns() {
    |                      ^
  2 |   return this.columns || [];
  3 | }"
`;

exports[`Vue > jsx > Typescript Test > ContentSlotHtml 1`] = `
"<template>
  <div>
    <slot name=\\"testing\\"></slot>
    <div>
      <hr />
    </div>
    <div>
      <slot />
    </div>
  </div>
</template>

<script lang=\\"ts\\">
type Props = {
  [key: string]: string | JSX.Element;
  slotTesting: JSX.Element;
};

export default {
  name: \\"content-slot-code\\",
};
</script>"
`;

exports[`Vue > jsx > Typescript Test > ContentSlotJSX 1`] = `
"<template>
  <div>
    <template v-if=\\"$slots.testing\\">
      <div><slot name=\\"testing\\" /></div>
    </template>

    <div>
      <hr />
    </div>
    <div><slot /></div>
  </div>
</template>

<script lang=\\"ts\\">
type Props = {
  [key: string]: string | JSX.Element;
};

export default {
  name: \\"content-slot-jsx-code\\",

  props: [],
};
</script>"
`;

exports[`Vue > jsx > Typescript Test > CustomCode 1`] = `
"unknown: Missing semicolon. (1:28)

> 1 | let _ =  findAndRunScripts() {
    |                             ^
  2 |   // TODO: Move this function to standalone one in '@builder.io/utils'
  3 |   if (this.$refs.elem && typeof window !== 'undefined') {
  4 |     /** @type {HTMLScriptElement[]} */"
`;

exports[`Vue > jsx > Typescript Test > Embed 1`] = `
"unknown: Missing semicolon. (1:28)

> 1 | let _ =  findAndRunScripts() {
    |                             ^
  2 |   // TODO: Move this function to standalone one in '@builder.io/utils'
  3 |   if (this.$refs.elem && typeof window !== 'undefined') {
  4 |     /** @type {HTMLScriptElement[]} */"
`;

exports[`Vue > jsx > Typescript Test > Form 1`] = `
"unknown: Missing semicolon. (1:24)

> 1 | let _ =  onSubmit(event) {
    |                         ^
  2 |   const sendWithJs = this.sendWithJs || this.sendSubmissionsTo === 'email';
  3 |
  4 |   if (this.sendSubmissionsTo === 'zapier') {"
`;

exports[`Vue > jsx > Typescript Test > Image 1`] = `
"unknown: Missing semicolon. (1:20)

> 1 | let _ =  setLoaded() {
    |                     ^
  2 |   state.imageLoaded = true;
  3 | }"
`;

exports[`Vue > jsx > Typescript Test > Image State 1`] = `
"<template>
  <div>
    <img class=\\"custom-class\\" :src=\\"item\\" :key=\\"itemIndex\\" />
  </div>
</template>

<script lang=\\"ts\\">
export default {
  name: \\"img-state-component\\",

  data: () => ({ canShow: true, images: [\\"http://example.com/qwik.png\\"] }),
};
</script>"
`;

exports[`Vue > jsx > Typescript Test > Img 1`] = `
"<template>
  <img
    :style=\\"{
      objectFit: backgroundSize || 'cover',
      objectPosition: backgroundPosition || 'center',
    }\\"
    :key=\\"(Builder.isEditing && imgSrc) || 'default-key'\\"
    :alt=\\"altText\\"
    :src=\\"imgSrc\\"
    v-bind=\\"attributes\\"
  />
</template>

<script lang=\\"ts\\">
export interface ImgProps {
  attributes?: any;
  imgSrc?: string;
  altText?: string;
  backgroundSize?: \\"cover\\" | \\"contain\\";
  backgroundPosition?:
    | \\"center\\"
    | \\"top\\"
    | \\"left\\"
    | \\"right\\"
    | \\"bottom\\"
    | \\"top left\\"
    | \\"top right\\"
    | \\"bottom left\\"
    | \\"bottom right\\";
}

import { Builder } from \\"@builder.io/sdk\\";

export default {
  name: \\"img-component\\",

  props: [
    \\"backgroundSize\\",
    \\"backgroundPosition\\",
    \\"attributes\\",
    \\"imgSrc\\",
    \\"altText\\",
  ],
};
</script>"
`;

exports[`Vue > jsx > Typescript Test > Input 1`] = `
"<template>
  <input
    :key=\\"Builder.isEditing && defaultValue ? defaultValue : 'default-key'\\"
    :placeholder=\\"placeholder\\"
    :type=\\"type\\"
    :name=\\"name\\"
    :value=\\"value\\"
    :defaultValue=\\"defaultValue\\"
    :required=\\"required\\"
    v-bind=\\"attributes\\"
  />
</template>

<script lang=\\"ts\\">
export interface FormInputProps {
  type?: string;
  attributes?: any;
  name?: string;
  value?: string;
  placeholder?: string;
  defaultValue?: string;
  required?: boolean;
}

import { Builder } from \\"@builder.io/sdk\\";

export default {
  name: \\"form-input-component\\",

  props: [
    \\"attributes\\",
    \\"defaultValue\\",
    \\"placeholder\\",
    \\"type\\",
    \\"name\\",
    \\"value\\",
    \\"required\\",
  ],
};
</script>"
`;

exports[`Vue > jsx > Typescript Test > RawText 1`] = `
"<template>
  <span
    :class=\\"_classStringToObject(attributes?.class || attributes?.className)\\"
    v-html=\\"text || ''\\"
  ></span>
</template>

<script lang=\\"ts\\">
export interface RawTextProps {
  attributes?: any;
  text?: string; // builderBlock?: any;
}

export default {
  name: \\"raw-text\\",

  props: [\\"attributes\\", \\"text\\"],

  methods: {
    _classStringToObject(str) {
      const obj = {};
      if (typeof str !== \\"string\\") {
        return obj;
      }
      const classNames = str.trim().split(/\\\\s+/);
      for (const name of classNames) {
        obj[name] = true;
      }
      return obj;
    },
  },
};
</script>"
`;

exports[`Vue > jsx > Typescript Test > Section 1`] = `
"<template>
  <section
    :style=\\"
      maxWidth && typeof maxWidth === 'number'
        ? {
            maxWidth: maxWidth,
          }
        : undefined
    \\"
    v-bind=\\"attributes\\"
  >
    <slot />
  </section>
</template>

<script lang=\\"ts\\">
export interface SectionProps {
  maxWidth?: number;
  attributes?: any;
  children?: any;
}

export default {
  name: \\"section-component\\",

  props: [\\"attributes\\", \\"maxWidth\\"],
};
</script>"
`;

exports[`Vue > jsx > Typescript Test > Section 2`] = `
"<template>
  <section
    v-for=\\"(item, index) in items\\"
    v-if=\\"max\\"
    :style=\\"{
      maxWidth: item + max,
    }\\"
    :key=\\"index\\"
    v-bind=\\"attributes\\"
  >
    <slot />
  </section>
</template>

<script lang=\\"ts\\">
export interface SectionProps {
  maxWidth?: number;
  attributes?: any;
  children?: any;
}

export default {
  name: \\"section-state-component\\",

  props: [\\"attributes\\"],

  data: () => ({ max: 42, items: [42] }),
};
</script>"
`;

exports[`Vue > jsx > Typescript Test > Select 1`] = `
"<template>
  <select
    :value=\\"value\\"
    :key=\\"Builder.isEditing && defaultValue ? defaultValue : 'default-key'\\"
    :defaultValue=\\"defaultValue\\"
    :name=\\"name\\"
    v-bind=\\"attributes\\"
  >
    <option
      v-for=\\"(option, index) in options\\"
      :value=\\"option.value\\"
      :data-index=\\"index\\"
      :key=\\"index\\"
    >
      {{ option.name || option.value }}
    </option>
  </select>
</template>

<script lang=\\"ts\\">
export interface FormSelectProps {
  options?: {
    name?: string;
    value: string;
  }[];
  attributes?: any;
  name?: string;
  value?: string;
  defaultValue?: string;
}

import { Builder } from \\"@builder.io/sdk\\";

export default {
  name: \\"select-component\\",

  props: [\\"attributes\\", \\"value\\", \\"defaultValue\\", \\"name\\", \\"options\\"],
};
</script>"
`;

exports[`Vue > jsx > Typescript Test > SlotHtml 1`] = `
"<template>
  <div>
    <content-slot-code>
      <template #testing>
        <div>Hello</div>
      </template>
    </content-slot-code>
  </div>
</template>

<script lang=\\"ts\\">
type Props = {
  [key: string]: string;
};

import ContentSlotCode from \\"./content-slot-jsx.raw\\";

export default {
  name: \\"slot-code\\",
  components: { ContentSlotCode: ContentSlotCode },
};
</script>"
`;

exports[`Vue > jsx > Typescript Test > SlotJsx 1`] = `
"<template>
  <div>
    <content-slot-code :slotTesting=\\"<div>Hello</div>\\"></content-slot-code>
  </div>
</template>

<script lang=\\"ts\\">
type Props = {
  [key: string]: string;
};

import ContentSlotCode from \\"./content-slot-jsx.raw\\";

export default {
  name: \\"slot-code\\",
  components: { ContentSlotCode: ContentSlotCode },
};
</script>"
`;

exports[`Vue > jsx > Typescript Test > Stamped.io 1`] = `
"unknown: Missing semicolon. (1:25)

> 1 | let _ =  kebabCaseValue() {
    |                          ^
  2 |   return kebabCase('testThat');
  3 | }"
`;

exports[`Vue > jsx > Typescript Test > Submit 1`] = `
"<template>
  <button type=\\"submit\\" v-bind=\\"attributes\\">
    {{ text }}
  </button>
</template>

<script lang=\\"ts\\">
export interface ButtonProps {
  attributes?: any;
  text?: string;
}

export default {
  name: \\"submit-button\\",

  props: [\\"attributes\\", \\"text\\"],
};
</script>"
`;

exports[`Vue > jsx > Typescript Test > Text 1`] = `
"<template>
  <div
    :contentEditable=\\"allowEditingText || undefined\\"
    :data-name=\\"{
      test: name || 'any name',
    }\\"
    v-html=\\"text || content || name || '<p class=\\\\'text-lg\\\\'>my name</p>'\\"
  ></div>
</template>

<script lang=\\"ts\\">
export interface TextProps {
  attributes?: any;
  rtlMode: boolean;
  text?: string;
  content?: string;
  builderBlock?: any;
}

import { Builder } from \\"@builder.io/sdk\\";

export default {
  name: \\"text\\",

  props: [\\"text\\", \\"content\\"],

  data: () => ({ name: \\"Decadef20\\" }),
};
</script>"
`;

exports[`Vue > jsx > Typescript Test > Textarea 1`] = `
"<template>
  <textarea
    :placeholder=\\"placeholder\\"
    :name=\\"name\\"
    :value=\\"value\\"
    :defaultValue=\\"defaultValue\\"
    v-bind=\\"attributes\\"
  ></textarea>
</template>

<script lang=\\"ts\\">
export interface TextareaProps {
  attributes?: any;
  name?: string;
  value?: string;
  defaultValue?: string;
  placeholder?: string;
}

export default {
  name: \\"textarea\\",

  props: [\\"attributes\\", \\"placeholder\\", \\"name\\", \\"value\\", \\"defaultValue\\"],
};
</script>"
`;

exports[`Vue > jsx > Typescript Test > Video 1`] = `
"<template>
  <video
    preload=\\"none\\"
    :style=\\"{
      width: '100%',
      height: '100%',
      ...attributes?.style,
      objectFit: fit,
      objectPosition: position,
      // Hack to get object fit to work as expected and
      // not have the video overflow
      borderRadius: 1,
    }\\"
    :key=\\"video || 'no-src'\\"
    :poster=\\"posterImage\\"
    :autoplay=\\"autoPlay\\"
    :muted=\\"muted\\"
    :controls=\\"controls\\"
    :loop=\\"loop\\"
    v-bind=\\"attributes\\"
  ></video>
</template>

<script lang=\\"ts\\">
export interface VideoProps {
  attributes?: any;
  video?: string;
  autoPlay?: boolean;
  controls?: boolean;
  muted?: boolean;
  loop?: boolean;
  playsInline?: boolean;
  aspectRatio?: number;
  width?: number;
  height?: number;
  fit?: \\"contain\\" | \\"cover\\" | \\"fill\\";
  position?:
    | \\"center\\"
    | \\"top\\"
    | \\"left\\"
    | \\"right\\"
    | \\"bottom\\"
    | \\"top left\\"
    | \\"top right\\"
    | \\"bottom left\\"
    | \\"bottom right\\";
  posterImage?: string;
  lazyLoad?: boolean;
}

export default {
  name: \\"video\\",

  props: [
    \\"attributes\\",
    \\"fit\\",
    \\"position\\",
    \\"video\\",
    \\"posterImage\\",
    \\"autoPlay\\",
    \\"muted\\",
    \\"controls\\",
    \\"loop\\",
  ],
};
</script>"
`;

exports[`Vue > jsx > Typescript Test > arrowFunctionInUseStore 1`] = `
"unknown: Missing semicolon. (1:23)

> 1 | let _ =  setName(value) {
    |                        ^
  2 |   state.name = value;
  3 | }"
`;

exports[`Vue > jsx > Typescript Test > basicForwardRef 1`] = `
"<template>
  <div>
    <input
      class=\\"input\\"
      ref=\\"inputRef\\"
      :value=\\"name\\"
      @input=\\"name = $event.target.value\\"
    />
  </div>
</template>

<script lang=\\"ts\\">
export interface Props {
  showInput: boolean;
  inputRef: HTMLInputElement;
}

export default {
  name: \\"my-basic-forward-ref-component\\",

  props: [\\"inputRef\\"],

  data: () => ({ name: \\"PatrickJS\\" }),
};
</script>

<style scoped>
.input {
  color: red;
}
</style>"
`;

exports[`Vue > jsx > Typescript Test > basicForwardRefMetadata 1`] = `
"<template>
  <div>
    <input
      class=\\"input\\"
      ref=\\"inputRef\\"
      :value=\\"name\\"
      @input=\\"name = $event.target.value\\"
    />
  </div>
</template>

<script lang=\\"ts\\">
export interface Props {
  showInput: boolean;
  inputRef: HTMLInputElement;
}

export default {
  name: \\"my-basic-forward-ref-component\\",

  props: [\\"inputRef\\"],

  data: () => ({ name: \\"PatrickJS\\" }),
};
</script>

<style scoped>
.input {
  color: red;
}
</style>"
`;

exports[`Vue > jsx > Typescript Test > basicOnUpdateReturn 1`] = `
"<template>
  <div>Hello! {{ name }}</div>
</template>

<script lang=\\"ts\\">
export default {
  name: \\"my-basic-on-update-return-component\\",

  data: () => ({ name: \\"PatrickJS\\" }),

  watch: {
    onUpdateHook0() {
      const controller = new AbortController();
      const signal = controller.signal;
      fetch(\\"https://patrickjs.com/api/resource.json\\", {
        signal,
      })
        .then((response) => response.json())
        .then((data) => {
          this.name = data.name;
        });
      return () => {
        if (!signal.aborted) {
          controller.abort();
        }
      };
    },
  },

  computed: {
    onUpdateHook0() {
      return {
        0: this.name,
      };
    },
  },
};
</script>"
`;

exports[`Vue > jsx > Typescript Test > class + ClassName + css 1`] = `
"<template>
  <div class=\\"test2 test div\\">
    Hello! I can run in React, Vue, Solid, or Liquid!
  </div>
</template>

<script lang=\\"ts\\">
export default {
  name: \\"my-basic-component\\",
};
</script>

<style scoped>
.div {
  padding: 10px;
}
</style>"
`;

exports[`Vue > jsx > Typescript Test > class + css 1`] = `
"<template>
  <div class=\\"test div\\">Hello! I can run in React, Vue, Solid, or Liquid!</div>
</template>

<script lang=\\"ts\\">
export default {
  name: \\"my-basic-component\\",
};
</script>

<style scoped>
.div {
  padding: 10px;
}
</style>"
`;

exports[`Vue > jsx > Typescript Test > className + css 1`] = `
"<template>
  <div class=\\"test div\\">Hello! I can run in React, Vue, Solid, or Liquid!</div>
</template>

<script lang=\\"ts\\">
export default {
  name: \\"my-basic-component\\",
};
</script>

<style scoped>
.div {
  padding: 10px;
}
</style>"
`;

exports[`Vue > jsx > Typescript Test > className 1`] = `
"<template>
  <div>
    <div class=\\"no binding\\">Without Binding</div>

    <div :class=\\"_classStringToObject(bindings)\\">With binding</div>
  </div>
</template>

<script lang=\\"ts\\">
type Props = {
  [key: string]: string | JSX.Element;
  slotTesting: JSX.Element;
};

export default {
  name: \\"class-name-code\\",

  data: () => ({ bindings: \\"a binding\\" }),

  methods: {
    _classStringToObject(str) {
      const obj = {};
      if (typeof str !== \\"string\\") {
        return obj;
      }
      const classNames = str.trim().split(/\\\\s+/);
      for (const name of classNames) {
        obj[name] = true;
      }
      return obj;
    },
  },
};
</script>"
`;

exports[`Vue > jsx > Typescript Test > classState 1`] = `
"<template>
  <div :class=\\"_classStringToObject(classState + ' div')\\" :style=\\"styleState\\">
    Hello! I can run in React, Vue, Solid, or Liquid!
  </div>
</template>

<script lang=\\"ts\\">
export default {
  name: \\"my-basic-component\\",

  data: () => ({
    classState: \\"testClassName\\",
    styleState: {
      color: \\"red\\",
    },
  }),

  methods: {
    _classStringToObject(str) {
      const obj = {};
      if (typeof str !== \\"string\\") {
        return obj;
      }
      const classNames = str.trim().split(/\\\\s+/);
      for (const name of classNames) {
        obj[name] = true;
      }
      return obj;
    },
  },
};
</script>

<style scoped>
.div {
  padding: 10px;
}
</style>"
`;

exports[`Vue > jsx > Typescript Test > componentWithContext 1`] = `"Vue 2 template should have a single root element"`;

exports[`Vue > jsx > Typescript Test > contentState 1`] = `
"<template>
  <div>setting context</div>
</template>

<script lang=\\"ts\\">
import BuilderContext from \\"@dummy/context.vue\\";

export default {
  name: \\"render-content\\",
  components: { BuilderContext: BuilderContext },
  props: [\\"content\\", \\"customComponents\\"],

  provide() {
    return {
      BuilderContext: {
        content: this.content,
        registeredComponents: this.customComponents,
      },
    };
  },
};
</script>"
`;

exports[`Vue > jsx > Typescript Test > defaultProps 1`] = `
"<template>
  <div>
    <template v-if=\\"link\\">
      <a
        :href=\\"link\\"
        :target=\\"openLinkInNewTab ? '_blank' : undefined\\"
        v-bind=\\"attributes\\"
      >
        {{ text }}
      </a>
    </template>

    <template v-if=\\"!link\\">
      <button type=\\"button\\" v-bind=\\"attributes\\">
        {{ text }}
      </button>
    </template>
  </div>
</template>

<script lang=\\"ts\\">
export interface ButtonProps {
  attributes?: any;
  text?: string;
  link?: string;
  openLinkInNewTab?: boolean;
}

export default {
  name: \\"button\\",

  props: {
    link: { default: \\"https://builder.io/\\" },
    attributes: {},
    openLinkInNewTab: { default: false },
    text: { default: \\"default text\\" },
  },
};
</script>"
`;

exports[`Vue > jsx > Typescript Test > defaultPropsOutsideComponent 1`] = `
"<template>
  <div>
    <template v-if=\\"link\\">
      <a
        :href=\\"link\\"
        :target=\\"openLinkInNewTab ? '_blank' : undefined\\"
        v-bind=\\"attributes\\"
      >
        {{ text }}
      </a>
    </template>

    <template v-if=\\"!link\\">
      <button type=\\"button\\" v-bind=\\"attributes\\">
        {{ text }}
      </button>
    </template>
  </div>
</template>

<script lang=\\"ts\\">
export interface ButtonProps {
  attributes?: any;
  text?: string;
  link?: string;
  openLinkInNewTab?: boolean;
}

export default {
  name: \\"button\\",

  props: {
    link: { default: \\"https://builder.io/\\" },
    attributes: {},
    openLinkInNewTab: { default: false },
    text: { default: \\"default text\\" },
  },
};
</script>"
`;

exports[`Vue > jsx > Typescript Test > defaultValsWithTypes 1`] = `
"<template>
  <div>Hello {{ name || DEFAULT_VALUES.name }}</div>
</template>

<script lang=\\"ts\\">
type Props = {
  name: string;
};

const DEFAULT_VALUES: Props = {
  name: \\"Sami\\",
};

export default {
  name: \\"component-with-types\\",

  props: [\\"name\\"],

  data: () => ({ DEFAULT_VALUES }),
};
</script>"
`;

exports[`Vue > jsx > Typescript Test > expressionState 1`] = `
"<template>
  <div>{{ refToUse }}</div>
</template>

<script lang=\\"ts\\">
export default {
  name: \\"my-component\\",

  props: [\\"componentRef\\"],

  data: () => ({
    refToUse: !(this.componentRef instanceof Function)
      ? this.componentRef
      : null,
  }),
};
</script>"
`;

exports[`Vue > jsx > Typescript Test > import types 1`] = `
"unknown: Missing semicolon. (1:44)

> 1 | let _ =  getRenderContentProps(block, index) {
    |                                             ^
  2 |   return {
  3 |     block: block,
  4 |     index: index"
`;

exports[`Vue > jsx > Typescript Test > multipleOnUpdate 1`] = `
"<template>
  <div></div>
</template>

<script lang=\\"ts\\">
export default {
  name: \\"multiple-on-update\\",

  updated() {
    console.log(\\"Runs on every update/rerender\\");
    console.log(\\"Runs on every update/rerender as well\\");
  },
};
</script>"
`;

exports[`Vue > jsx > Typescript Test > multipleOnUpdateWithDeps 1`] = `
"<template>
  <div></div>
</template>

<script lang=\\"ts\\">
export default {
  name: \\"multiple-on-update-with-deps\\",

  data: () => ({ a: \\"a\\", b: \\"b\\", c: \\"c\\", d: \\"d\\" }),

  watch: {
    onUpdateHook0() {
      console.log(\\"Runs when a or b changes\\", this.a, this.b);

      if (this.a === \\"a\\") {
        this.a = \\"b\\";
      }
    },
    onUpdateHook1() {
      console.log(\\"Runs when c or d changes\\", this.c, this.d);

      if (this.a === \\"a\\") {
        this.a = \\"b\\";
      }
    },
  },

  computed: {
    onUpdateHook0() {
      return {
        0: this.a,
        1: this.b,
      };
    },
    onUpdateHook1() {
      return {
        0: this.c,
        1: this.d,
      };
    },
  },
};
</script>"
`;

exports[`Vue > jsx > Typescript Test > multipleSpreads 1`] = `
"<template>
  <input v-bind=\\"{ ...attrs, ...$props }\\" />
</template>

<script lang=\\"ts\\">
export default {
  name: \\"my-basic-component\\",

  data: () => ({
    attrs: {
      hello: \\"world\\",
    },
  }),
};
</script>"
`;

exports[`Vue > jsx > Typescript Test > nestedShow 1`] = `
"<template>
  <div v-if=\\"!Boolean(conditionA)\\">else-condition-A</div>

  <div v-else-if=\\"!Boolean(!conditionB)\\">else-condition-B</div>

  <div v-else>if condition A and condition B</div>
</template>

<script lang=\\"ts\\">
interface Props {
  conditionA: boolean;
  conditionB: boolean;
}

export default {
  name: \\"nested-show\\",

  props: [\\"conditionA\\", \\"conditionB\\"],
};
</script>"
`;

exports[`Vue > jsx > Typescript Test > nestedStyles 1`] = `
"<template>
  <div class=\\"div\\">Hello world</div>
</template>

<script lang=\\"ts\\">
export default {
  name: \\"nested-styles\\",
};
</script>

<style scoped>
.div {
  display: flex;
  foo: var(--bar);
}
@media (max-width: env(--mobile)) {
  .div {
    display: block;
  }
}
.div:hover {
  display: flex;
}
.div .nested-selector {
  display: grid;
}
</style>"
`;

exports[`Vue > jsx > Typescript Test > onInit & onMount 1`] = `
"<template>
  <div></div>
</template>

<script lang=\\"ts\\">
export default {
  name: \\"on-init\\",

  created() {
    console.log(\\"onInit\\");
  },
  mounted() {
    console.log(\\"onMount\\");
  },
};
</script>"
`;

exports[`Vue > jsx > Typescript Test > onInit 1`] = `
"<template>
  <div>Default name defined by parent {{ name }}</div>
</template>

<script lang=\\"ts\\">
type Props = {
  name: string;
};

export const defaultValues = {
  name: \\"PatrickJS\\",
};

export default {
  name: \\"on-init\\",

  props: [\\"name\\"],

  data: () => ({ name: \\"\\" }),

  created() {
    this.name = defaultValues.name || this.name;
    console.log(\\"set defaults with props\\");
  },
};
</script>"
`;

exports[`Vue > jsx > Typescript Test > onMount 1`] = `
"<template>
  <div></div>
</template>

<script lang=\\"ts\\">
export default {
  name: \\"comp\\",

  mounted() {
    console.log(\\"Runs on mount\\");
  },

  unmounted() {
    console.log(\\"Runs on unMount\\");
  },
};
</script>"
`;

exports[`Vue > jsx > Typescript Test > onUpdate 1`] = `
"<template>
  <div></div>
</template>

<script lang=\\"ts\\">
export default {
  name: \\"on-update\\",

  updated() {
    console.log(\\"Runs on every update/rerender\\");
  },
};
</script>"
`;

exports[`Vue > jsx > Typescript Test > onUpdateWithDeps 1`] = `
"<template>
  <div></div>
</template>

<script lang=\\"ts\\">
type Props = {
  size: string;
};

export default {
  name: \\"on-update-with-deps\\",

  props: [\\"size\\"],

  data: () => ({ a: \\"a\\", b: \\"b\\" }),

  watch: {
    onUpdateHook0() {
      console.log(\\"Runs when a, b or size changes\\", this.a, this.b, this.size);
    },
  },

  computed: {
    onUpdateHook0() {
      return {
        0: this.a,
        1: this.b,
        2: this.size,
      };
    },
  },
};
</script>"
`;

exports[`Vue > jsx > Typescript Test > preserveExportOrLocalStatement 1`] = `
"<template>
  <div></div>
</template>

<script lang=\\"ts\\">
type Types = {
  s: any[];
};
interface IPost {
  len: number;
}
export interface MyBasicComponentProps {
  id: string;
}

const b = 3;
const foo = () => {};
export const a = 3;
export const bar = () => {};
export function run<T>(value: T) {}

export default {
  name: \\"my-basic-component\\",
};
</script>"
`;

exports[`Vue > jsx > Typescript Test > preserveTyping 1`] = `
"<template>
  <div>Hello! I can run in React, Vue, Solid, or Liquid! {{ name }}</div>
</template>

<script lang=\\"ts\\">
export type A = \\"test\\";
export interface C {
  n: \\"test\\";
}
type B = \\"test2\\";
interface D {
  n: \\"test\\";
}
export interface MyBasicComponentProps {
  name: string;
  age?: number;
}

export default {
  name: \\"my-basic-component\\",

  props: [\\"name\\"],
};
</script>"
`;

exports[`Vue > jsx > Typescript Test > propsDestructure 1`] = `
"<template>
  <div>
    <slot /> {{ type }}
    Hello! I can run in React, Vue, Solid, or Liquid!
  </div>
</template>

<script lang=\\"ts\\">
type Props = {
  children: any;
  type: string;
};

export default {
  name: \\"my-basic-component\\",

  props: [\\"type\\"],

  data: () => ({ name: \\"Decadef20\\" }),
};
</script>"
`;

exports[`Vue > jsx > Typescript Test > propsInterface 1`] = `
"<template>
  <div>Hello! I can run in React, Vue, Solid, or Liquid! {{ name }}</div>
</template>

<script lang=\\"ts\\">
interface Person {
  name: string;
  age?: number;
}

export default {
  name: \\"my-basic-component\\",

  props: [\\"name\\"],
};
</script>"
`;

exports[`Vue > jsx > Typescript Test > propsType 1`] = `
"<template>
  <div>Hello! I can run in React, Vue, Solid, or Liquid! {{ name }}</div>
</template>

<script lang=\\"ts\\">
type Person = {
  name: string;
  age?: number;
};

export default {
  name: \\"my-basic-component\\",

  props: [\\"name\\"],
};
</script>"
`;

exports[`Vue > jsx > Typescript Test > renderContentExample 1`] = `
"<template>
  <div class=\\"div\\" @click=\\"trackClick(content.id)\\">
    <render-blocks :blocks=\\"content.blocks\\"></render-blocks>
  </div>
</template>

<script lang=\\"ts\\">
type Props = {
  customComponents: string[];
  content: {
    blocks: any[];
    id: string;
  };
};

import {
  sendComponentsToVisualEditor,
  dispatchNewContentToVisualEditor,
  trackClick,
} from \\"@dummy/injection-js\\";
import BuilderContext from \\"@dummy/context.vue\\";
import RenderBlocks from \\"@dummy/RenderBlocks.lite.tsx\\";

export default {
  name: \\"render-content\\",
  components: { RenderBlocks: RenderBlocks, BuilderContext: BuilderContext },
  props: [\\"content\\", \\"customComponents\\"],

  data: () => ({ trackClick }),

  provide() {
    return {
      BuilderContext: {
        get content() {
          return 3;
        },
        get registeredComponents() {
          return 4;
        },
      },
    };
  },

  mounted() {
    sendComponentsToVisualEditor(this.customComponents);
  },

  watch: {
    onUpdateHook0() {
      dispatchNewContentToVisualEditor(this.content);
    },
  },

  computed: {
    onUpdateHook0() {
      return {
        0: this.content,
      };
    },
  },
};
</script>

<style scoped>
.div {
  display: flex;
  flex-direction: columns;
}
</style>"
`;

exports[`Vue > jsx > Typescript Test > rootFragmentMultiNode 1`] = `"Vue 2 template should have a single root element"`;

exports[`Vue > jsx > Typescript Test > rootShow 1`] = `
"<template>
  <div v-if=\\"foo === 'bar'\\">Bar</div>
  <div v-else>Foo</div>
</template>

<script lang=\\"ts\\">
export interface RenderStylesProps {
  foo: string;
}

export default {
  name: \\"render-styles\\",

  props: [\\"foo\\"],
};
</script>"
`;

exports[`Vue > jsx > Typescript Test > self-referencing component 1`] = `
"<template>
  <div>
    {{ name }}

    <template v-if=\\"name === 'Batman'\\">
      <my-component name=\\"Bruce Wayne\\"></my-component>
    </template>
  </div>
</template>

<script lang=\\"ts\\">
export default {
  name: \\"my-component\\",

  props: [\\"name\\"],
};
</script>"
`;

exports[`Vue > jsx > Typescript Test > self-referencing component with children 1`] = `
"<template>
  <div>
    {{ name }}
    <slot />

    <template v-if=\\"name === 'Batman'\\">
      <my-component name=\\"Bruce\\">
        <div>Wayne</div>
      </my-component>
    </template>
  </div>
</template>

<script lang=\\"ts\\">
export default {
  name: \\"my-component\\",

  props: [\\"name\\"],
};
</script>"
`;

exports[`Vue > jsx > Typescript Test > showWithFor 1`] = `
"<template>
  <div v-for=\\"(item, index) in items\\" v-if=\\"conditionA\\" :key=\\"idx\\">
    {{ item }}
  </div>
  <div v-else>else-condition-A</div>
</template>

<script lang=\\"ts\\">
interface Props {
  conditionA: boolean;
  items: string[];
}

export default {
  name: \\"nested-show\\",

  props: [\\"conditionA\\", \\"items\\"],
};
</script>"
`;

exports[`Vue > jsx > Typescript Test > spreadAttrs 1`] = `
"<template>
  <input v-bind=\\"attrs\\" />
</template>

<script lang=\\"ts\\">
export default {
  name: \\"my-basic-component\\",
};
</script>"
`;

exports[`Vue > jsx > Typescript Test > spreadNestedProps 1`] = `
"<template>
  <input v-bind=\\"nested\\" />
</template>

<script lang=\\"ts\\">
export default {
  name: \\"my-basic-component\\",

  props: [\\"nested\\"],
};
</script>"
`;

exports[`Vue > jsx > Typescript Test > spreadProps 1`] = `
"<template>
  <input v-bind=\\"$props\\" />
</template>

<script lang=\\"ts\\">
export default {
  name: \\"my-basic-component\\",
};
</script>"
`;

exports[`Vue > jsx > Typescript Test > subComponent 1`] = `
"<template>
  <foo></foo>
</template>

<script lang=\\"ts\\">
import Foo from \\"./foo-sub-component.vue\\";

export default {
  name: \\"sub-component\\",
  components: { Foo: Foo },
};
</script>"
`;

exports[`Vue > jsx > Typescript Test > typeDependency 1`] = `
"<template>
  <div>{{ foo }}</div>
</template>

<script lang=\\"ts\\">
import type { Foo } from \\"./foo-type\\";
import type { Foo as Foo2 } from \\"./type-export\\";
export type TypeDependencyProps = {
  foo: Foo;
  foo2: Foo2;
};

export default {
  name: \\"type-dependency\\",

  props: [\\"foo\\"],
};
</script>"
`;

exports[`Vue > jsx > Typescript Test > use-style 1`] = `
"<template>
  <button type=\\"button\\">Button</button>
</template>

<script lang=\\"ts\\">
export default {
  name: \\"my-component\\",
};
</script>

<style scoped>
button {
  background: blue;
  color: white;
  font-size: 12px;
  outline: 1px solid black;
}
</style>"
`;

exports[`Vue > jsx > Typescript Test > use-style-and-css 1`] = `
"<template>
  <button type=\\"button\\" class=\\"button\\">Button</button>
</template>

<script lang=\\"ts\\">
export default {
  name: \\"my-component\\",
};
</script>

<style scoped>
.button {
  background: blue;
  color: white;
}

button {
  font-size: 12px;
  outline: 1px solid black;
}
</style>"
`;

exports[`Vue > jsx > Typescript Test > use-style-outside-component 1`] = `
"<template>
  <button type=\\"button\\">Button</button>
</template>

<script lang=\\"ts\\">
export default {
  name: \\"my-component\\",
};
</script>

<style scoped>
button {
  background: blue;
  color: white;
  font-size: 12px;
  outline: 1px solid black;
}
</style>"
`;

exports[`Vue > svelte > Javascript Test > basic 1`] = `
"<template>
  <div>
    <input @input=\\"name = $event.target.value\\" :value=\\"name\\" />
    Hello! I can run in React, Vue, Solid, or Liquid!
  </div>
</template>

<script>
export default {
  name: \\"my-component\\",

  data: () => ({ name: \\"Steve\\" }),
};
</script>"
`;

exports[`Vue > svelte > Javascript Test > bindGroup 1`] = `
"<template>
  <div>
    <input
      type=\\"radio\\"
      value=\\"Plain\\"
      :checked=\\"tortilla === 'Plain'\\"
      @input=\\"tortilla = $event.target.value\\"
    /><input
      type=\\"radio\\"
      value=\\"Whole wheat\\"
      :checked=\\"tortilla === 'Whole wheat'\\"
      @input=\\"tortilla = $event.target.value\\"
    /><input
      type=\\"radio\\"
      value=\\"Spinach\\"
      :checked=\\"tortilla === 'Spinach'\\"
      @input=\\"tortilla = $event.target.value\\"
    /><br /><br /><input
      type=\\"checkbox\\"
      value=\\"Rice\\"
      :checked=\\"fillings === 'Rice'\\"
      @input=\\"fillings = $event.target.value\\"
    /><input
      type=\\"checkbox\\"
      value=\\"Beans\\"
      :checked=\\"fillings === 'Beans'\\"
      @input=\\"fillings = $event.target.value\\"
    /><input
      type=\\"checkbox\\"
      value=\\"Cheese\\"
      :checked=\\"fillings === 'Cheese'\\"
      @input=\\"fillings = $event.target.value\\"
    /><input
      type=\\"checkbox\\"
      value=\\"Guac (extra)\\"
      :checked=\\"fillings === 'Guac (extra)'\\"
      @input=\\"fillings = $event.target.value\\"
    />
    <p>Tortilla: {{ tortilla }}</p>
    <p>Fillings: {{ fillings }}</p>
  </div>
</template>

<script>
export default {
  name: \\"my-component\\",

  data: () => ({ tortilla: \\"Plain\\", fillings: [] }),
};
</script>"
`;

exports[`Vue > svelte > Javascript Test > bindProperty 1`] = `
"<template>
  <input :value=\\"value\\" />
</template>

<script>
export default {
  name: \\"my-component\\",

  data: () => ({ value: \\"hello\\" }),
};
</script>"
`;

exports[`Vue > svelte > Javascript Test > classDirective 1`] = `
"<template>
  <input
    :class=\\"
      _classStringToObject(
        \`form-input \${disabled ? 'disabled' : ''} \${focus ? 'focus' : ''}\`
      )
    \\"
  />
</template>

<script>
export default {
  name: \\"my-component\\",

  props: { disabled: {} },

  data: () => ({ focus: true }),

  methods: {
    _classStringToObject(str) {
      const obj = {};
      if (typeof str !== \\"string\\") {
        return obj;
      }
      const classNames = str.trim().split(/\\\\s+/);
      for (const name of classNames) {
        obj[name] = true;
      }
      return obj;
    },
  },
};
</script>"
`;

exports[`Vue > svelte > Javascript Test > context 1`] = `
"<template>
  <div>{{ activeTab }}</div>
</template>

<script>
export default {
  name: \\"my-component\\",

  data: () => ({ activeTab: 0 }),

  provide() {
    return {
      activeTab: this.activeTab,
    };
  },
  inject: {
    disabled: \\"'disabled'\\",
  },
};
</script>"
`;

exports[`Vue > svelte > Javascript Test > each 1`] = `
"<template>
  <ul>
    <li v-for=\\"(num, index) in numbers\\" :key=\\"index\\">{{ num }}</li>
  </ul>
</template>

<script>
export default {
  name: \\"my-component\\",

  data: () => ({ numbers: [\\"one\\", \\"two\\", \\"three\\"] }),
};
</script>"
`;

exports[`Vue > svelte > Javascript Test > html 1`] = `
"<template>
  <div v-html=\\"html\\"></div>
</template>

<script>
export default {
  name: \\"my-component\\",

  data: () => ({ html: \\"<b>bold</b>\\" }),
};
</script>"
`;

exports[`Vue > svelte > Javascript Test > ifElse 1`] = `
"<template>
  <button v-if=\\"show\\" @click=\\"toggle\\">Hide</button>
  <button v-else @click=\\"toggle\\">Show</button>
</template>

<script>
export default {
  name: \\"my-component\\",

  data: () => ({ show: true }),

  methods: {
    toggle: function toggle() {
      this.show = !this.show;
    },
  },
};
</script>"
`;

exports[`Vue > svelte > Javascript Test > imports 1`] = `
"<template>
  <div>
    <button type=\\"button\\" :disabled=\\"disabled\\"><slot /></button>
  </div>
</template>

<script>
import Button from \\"./Button.vue\\";

export default {
  name: \\"my-component\\",
  components: { Button: Button },

  data: () => ({ disabled: false }),
};
</script>"
`;

exports[`Vue > svelte > Javascript Test > lifecycleHooks 1`] = `
"<template>
  <div></div>
</template>

<script>
export default {
  name: \\"my-component\\",

  mounted() {
    console.log(\\"onMount\\");
  },
  updated() {
    console.log(\\"onAfterUpdate\\");
  },

  unmounted() {
    console.log(\\"onDestroy\\");
  },
};
</script>"
`;

exports[`Vue > svelte > Javascript Test > reactive 1`] = `
"<template>
  <div><input :value=\\"name\\" /> Lowercase: {{ lowercaseName }}</div>
</template>

<script>
export default {
  name: \\"my-component\\",

  data: () => ({ name: \\"Steve\\" }),

  computed: {
    lowercaseName() {
      return this.name.toLowerCase();
    },
  },
};
</script>"
`;

exports[`Vue > svelte > Javascript Test > style 1`] = `
"<template>
  <input class=\\"form-input\\" />
</template>

<script>
export default {
  name: \\"my-component\\",
};
</script>

<style scoped>
input {
  color: red;
  font-size: 12px;
}

.form-input:focus {
  outline: 1px solid blue;
}
</style>"
`;

exports[`Vue > svelte > Javascript Test > textExpressions 1`] = `
"<template>
  <div>
    normal:
    {{ a + b }}<br />
    conditional
    {{ a > 2 ? \\"hello\\" : \\"bye\\" }}
  </div>
</template>

<script>
export default {
  name: \\"my-component\\",

  data: () => ({ a: 5, b: 12 }),
};
</script>"
`;

exports[`Vue > svelte > Typescript Test > basic 1`] = `
"<template>
  <div>
    <input @input=\\"name = $event.target.value\\" :value=\\"name\\" />
    Hello! I can run in React, Vue, Solid, or Liquid!
  </div>
</template>

<script lang=\\"ts\\">
export default {
  name: \\"my-component\\",

  data: () => ({ name: \\"Steve\\" }),
};
</script>"
`;

exports[`Vue > svelte > Typescript Test > bindGroup 1`] = `
"<template>
  <div>
    <input
      type=\\"radio\\"
      value=\\"Plain\\"
      :checked=\\"tortilla === 'Plain'\\"
      @input=\\"tortilla = $event.target.value\\"
    /><input
      type=\\"radio\\"
      value=\\"Whole wheat\\"
      :checked=\\"tortilla === 'Whole wheat'\\"
      @input=\\"tortilla = $event.target.value\\"
    /><input
      type=\\"radio\\"
      value=\\"Spinach\\"
      :checked=\\"tortilla === 'Spinach'\\"
      @input=\\"tortilla = $event.target.value\\"
    /><br /><br /><input
      type=\\"checkbox\\"
      value=\\"Rice\\"
      :checked=\\"fillings === 'Rice'\\"
      @input=\\"fillings = $event.target.value\\"
    /><input
      type=\\"checkbox\\"
      value=\\"Beans\\"
      :checked=\\"fillings === 'Beans'\\"
      @input=\\"fillings = $event.target.value\\"
    /><input
      type=\\"checkbox\\"
      value=\\"Cheese\\"
      :checked=\\"fillings === 'Cheese'\\"
      @input=\\"fillings = $event.target.value\\"
    /><input
      type=\\"checkbox\\"
      value=\\"Guac (extra)\\"
      :checked=\\"fillings === 'Guac (extra)'\\"
      @input=\\"fillings = $event.target.value\\"
    />
    <p>Tortilla: {{ tortilla }}</p>
    <p>Fillings: {{ fillings }}</p>
  </div>
</template>

<script lang=\\"ts\\">
export default {
  name: \\"my-component\\",

  data: () => ({ tortilla: \\"Plain\\", fillings: [] }),
};
</script>"
`;

exports[`Vue > svelte > Typescript Test > bindProperty 1`] = `
"<template>
  <input :value=\\"value\\" />
</template>

<script lang=\\"ts\\">
export default {
  name: \\"my-component\\",

  data: () => ({ value: \\"hello\\" }),
};
</script>"
`;

exports[`Vue > svelte > Typescript Test > classDirective 1`] = `
"<template>
  <input
    :class=\\"
      _classStringToObject(
        \`form-input \${disabled ? 'disabled' : ''} \${focus ? 'focus' : ''}\`
      )
    \\"
  />
</template>

<script lang=\\"ts\\">
export default {
  name: \\"my-component\\",

  props: { disabled: {} },

  data: () => ({ focus: true }),

  methods: {
    _classStringToObject(str) {
      const obj = {};
      if (typeof str !== \\"string\\") {
        return obj;
      }
      const classNames = str.trim().split(/\\\\s+/);
      for (const name of classNames) {
        obj[name] = true;
      }
      return obj;
    },
  },
};
</script>"
`;

exports[`Vue > svelte > Typescript Test > context 1`] = `
"<template>
  <div>{{ activeTab }}</div>
</template>

<script lang=\\"ts\\">
export default {
  name: \\"my-component\\",

  data: () => ({ activeTab: 0 }),

  provide() {
    return {
      activeTab: this.activeTab,
    };
  },
  inject: {
    disabled: \\"'disabled'\\",
  },
};
</script>"
`;

exports[`Vue > svelte > Typescript Test > each 1`] = `
"<template>
  <ul>
    <li v-for=\\"(num, index) in numbers\\" :key=\\"index\\">{{ num }}</li>
  </ul>
</template>

<script lang=\\"ts\\">
export default {
  name: \\"my-component\\",

  data: () => ({ numbers: [\\"one\\", \\"two\\", \\"three\\"] }),
};
</script>"
`;

exports[`Vue > svelte > Typescript Test > html 1`] = `
"<template>
  <div v-html=\\"html\\"></div>
</template>

<script lang=\\"ts\\">
export default {
  name: \\"my-component\\",

  data: () => ({ html: \\"<b>bold</b>\\" }),
};
</script>"
`;

exports[`Vue > svelte > Typescript Test > ifElse 1`] = `
"<template>
  <button v-if=\\"show\\" @click=\\"toggle\\">Hide</button>
  <button v-else @click=\\"toggle\\">Show</button>
</template>

<script lang=\\"ts\\">
export default {
  name: \\"my-component\\",

  data: () => ({ show: true }),

  methods: {
    toggle: function toggle() {
      this.show = !this.show;
    },
  },
};
</script>"
`;

exports[`Vue > svelte > Typescript Test > imports 1`] = `
"<template>
  <div>
    <button type=\\"button\\" :disabled=\\"disabled\\"><slot /></button>
  </div>
</template>

<script lang=\\"ts\\">
import Button from \\"./Button.vue\\";

export default {
  name: \\"my-component\\",
  components: { Button: Button },

  data: () => ({ disabled: false }),
};
</script>"
`;

exports[`Vue > svelte > Typescript Test > lifecycleHooks 1`] = `
"<template>
  <div></div>
</template>

<script lang=\\"ts\\">
export default {
  name: \\"my-component\\",

  mounted() {
    console.log(\\"onMount\\");
  },
  updated() {
    console.log(\\"onAfterUpdate\\");
  },

  unmounted() {
    console.log(\\"onDestroy\\");
  },
};
</script>"
`;

exports[`Vue > svelte > Typescript Test > reactive 1`] = `
"<template>
  <div><input :value=\\"name\\" /> Lowercase: {{ lowercaseName }}</div>
</template>

<script lang=\\"ts\\">
export default {
  name: \\"my-component\\",

  data: () => ({ name: \\"Steve\\" }),

  computed: {
    lowercaseName() {
      return this.name.toLowerCase();
    },
  },
};
</script>"
`;

exports[`Vue > svelte > Typescript Test > style 1`] = `
"<template>
  <input class=\\"form-input\\" />
</template>

<script lang=\\"ts\\">
export default {
  name: \\"my-component\\",
};
</script>

<style scoped>
input {
  color: red;
  font-size: 12px;
}

.form-input:focus {
  outline: 1px solid blue;
}
</style>"
`;

exports[`Vue > svelte > Typescript Test > textExpressions 1`] = `
"<template>
  <div>
    normal:
    {{ a + b }}<br />
    conditional
    {{ a > 2 ? \\"hello\\" : \\"bye\\" }}
  </div>
</template>

<script lang=\\"ts\\">
export default {
  name: \\"my-component\\",

  data: () => ({ a: 5, b: 12 }),
};
</script>"
`;
