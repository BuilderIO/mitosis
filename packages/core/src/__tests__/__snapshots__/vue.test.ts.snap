// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Vue Basic 1`] = `
"<template>
  <div>
    <input :value=\\"name\\" @input=\\"name = $event.target.value\\" />
    Hello! I can run in React, Vue, Solid, or Liquid!
  </div>
</template>
<script>
export default {
  name: \\"my-basic-component\\",

  data: () => ({ name: \\"Steve\\" }),
};
</script>
"
`;

exports[`Vue Button 1`] = `
"<template>
  <a
    v-bind=\\"attributes\\"
    v-if=\\"link\\"
    :href=\\"link\\"
    :target=\\"openLinkInNewTab ? '_blank' : undefined\\"
  >
    {{ text }}
  </a>

  <button v-bind=\\"attributes\\" type=\\"button\\" v-if=\\"!link\\">
    {{ text }}
  </button>
</template>
<script>
export default {
  name: \\"button\\",

  props: [\\"link\\", \\"attributes\\", \\"openLinkInNewTab\\", \\"text\\"],
};
</script>
"
`;

exports[`Vue Columns 1`] = `
"<template>
  <div class=\\"builder-columns div\\">
    <div
      class=\\"builder-column div-2\\"
      v-for=\\"(column, index) in columns\\"
      :key=\\"index\\"
    >
      {{ column.content }} {{ index }}
    </div>
  </div>
</template>
<script>
export default {
  name: \\"column\\",

  props: [\\"columns\\", \\"space\\"],

  methods: {
    getColumns() {
      return this.columns || [];
    },
    getGutterSize() {
      return typeof this.space === \\"number\\" ? this.space || 0 : 20;
    },
    getWidth(index) {
      const columns = this.getColumns();
      return (columns[index] && columns[index].width) || 100 / columns.length;
    },
    getColumnCssWidth(index) {
      const columns = this.getColumns();
      const gutterSize = this.getGutterSize();
      const subtractWidth =
        (gutterSize * (columns.length - 1)) / columns.length;
      return \`calc(\${this.getWidth(index)}% - \${subtractWidth}px)\`;
    },
  },
};
</script>
<style scoped>
.div {
  display: flex;
  flex-direction: column;
  align-items: stretch;
  line-height: normal;
}
@media (max-width: 999px) {
  .div {
    flex-direction: row;
  }
}
@media (max-width: 639px) {
  .div {
    flex-direction: row-reverse;
  }
}
.div-2 {
  flex-grow: 1;
}
</style>
"
`;

exports[`Vue CustomCode 1`] = `
"<template>
  <div
    ref=\\"elem\\"
    :class=\\"
      _classStringToObject(
        'builder-custom-code' + (this.replaceNodes ? ' replace-nodes' : '')
      )
    \\"
    v-html=\\"code\\"
  ></div>
</template>
<script>
export default {
  name: \\"custom-code\\",

  props: [\\"replaceNodes\\", \\"code\\"],

  data: () => ({ scriptsInserted: [], scriptsRun: [] }),

  mounted() {
    this.findAndRunScripts();
  },

  methods: {
    findAndRunScripts() {
      // TODO: Move this function to standalone one in '@builder.io/utils'
      if (this.$refs.elem && typeof window !== \\"undefined\\") {
        /** @type {HTMLScriptElement[]} */
        const scripts = this.$refs.elem.getElementsByTagName(\\"script\\");

        for (let i = 0; i < scripts.length; i++) {
          const script = scripts[i];

          if (script.src) {
            if (this.scriptsInserted.includes(script.src)) {
              continue;
            }

            this.scriptsInserted.push(script.src);
            const newScript = document.createElement(\\"script\\");
            newScript.async = true;
            newScript.src = script.src;
            document.head.appendChild(newScript);
          } else if (
            !script.type ||
            [
              \\"text/javascript\\",
              \\"application/javascript\\",
              \\"application/ecmascript\\",
            ].includes(script.type)
          ) {
            if (this.scriptsRun.includes(script.innerText)) {
              continue;
            }

            try {
              this.scriptsRun.push(script.innerText);
              new Function(script.innerText)();
            } catch (error) {
              console.warn(\\"\`CustomCode\`: Error running script:\\", error);
            }
          }
        }
      }
    },
    _classStringToObject(str) {
      const obj = {};
      if (typeof str !== \\"string\\") {
        return obj;
      }
      const classNames = str.trim().split(/\\\\s+/);
      for (const name of classNames) {
        obj[name] = true;
      }
      return obj;
    },
  },
};
</script>
"
`;

exports[`Vue Embed 1`] = `
"<template>
  <div
    ref=\\"elem\\"
    :class=\\"
      _classStringToObject(
        'builder-custom-code' + (this.replaceNodes ? ' replace-nodes' : '')
      )
    \\"
    v-html=\\"code\\"
  ></div>
</template>
<script>
export default {
  name: \\"custom-code\\",

  props: [\\"replaceNodes\\", \\"code\\"],

  data: () => ({ scriptsInserted: [], scriptsRun: [] }),

  mounted() {
    this.findAndRunScripts();
  },

  methods: {
    findAndRunScripts() {
      // TODO: Move this function to standalone one in '@builder.io/utils'
      if (this.$refs.elem && typeof window !== \\"undefined\\") {
        /** @type {HTMLScriptElement[]} */
        const scripts = this.$refs.elem.getElementsByTagName(\\"script\\");

        for (let i = 0; i < scripts.length; i++) {
          const script = scripts[i];

          if (script.src) {
            if (this.scriptsInserted.includes(script.src)) {
              continue;
            }

            this.scriptsInserted.push(script.src);
            const newScript = document.createElement(\\"script\\");
            newScript.async = true;
            newScript.src = script.src;
            document.head.appendChild(newScript);
          } else if (
            !script.type ||
            [
              \\"text/javascript\\",
              \\"application/javascript\\",
              \\"application/ecmascript\\",
            ].includes(script.type)
          ) {
            if (this.scriptsRun.includes(script.innerText)) {
              continue;
            }

            try {
              this.scriptsRun.push(script.innerText);
              new Function(script.innerText)();
            } catch (error) {
              console.warn(\\"\`CustomCode\`: Error running script:\\", error);
            }
          }
        }
      }
    },
    _classStringToObject(str) {
      const obj = {};
      if (typeof str !== \\"string\\") {
        return obj;
      }
      const classNames = str.trim().split(/\\\\s+/);
      for (const name of classNames) {
        obj[name] = true;
      }
      return obj;
    },
  },
};
</script>
"
`;

exports[`Vue Form block 1`] = `
"<template>
  <form
    v-bind=\\"attributes\\"
    :validate=\\"validate\\"
    ref=\\"formRef\\"
    :action=\\"!sendWithJs && action\\"
    :method=\\"method\\"
    :name=\\"name\\"
    @submit=\\"onSubmit(event)\\"
  >
    <builder-block-component
      v-for=\\"(block, index) in builderBlock?.children\\"
      :block=\\"block\\"
      :index=\\"index\\"
      :key=\\"block.id\\"
    ></builder-block-component>

    <builder-blocks
      dataPath=\\"errorMessage\\"
      v-if=\\"submissionState === 'error'\\"
      :blocks=\\"errorMessage\\"
    ></builder-blocks>

    <builder-blocks
      dataPath=\\"sendingMessage\\"
      v-if=\\"submissionState === 'sending'\\"
      :blocks=\\"sendingMessage\\"
    ></builder-blocks>

    <pre
      class=\\"builder-form-error-text pre\\"
      v-if=\\"submissionState === 'error' && responseData\\"
    >
        {{ JSON.stringify(responseData, null, 2) }}
      </pre
    >

    <builder-blocks
      dataPath=\\"successMessage\\"
      v-if=\\"submissionState === 'success'\\"
      :blocks=\\"successMessage\\"
    ></builder-blocks>
  </form>
</template>
<script>
import { BuilderBlockComponent as BuilderBlock } from \\"@fake\\";
import { Builder, builder } from \\"@builder.io/sdk\\";
import { BuilderBlocks } from \\"@fake\\";
import { set } from \\"@fake\\";
import { get } from \\"@fake\\";

export default {
  name: \\"form-component\\",
  components: {
    \\"builder-block-component\\": async () => BuilderBlockComponent,
    \\"builder-blocks\\": async () => BuilderBlocks,
  },
  props: [
    \\"previewState\\",
    \\"sendWithJs\\",
    \\"sendSubmissionsTo\\",
    \\"action\\",
    \\"customHeaders\\",
    \\"contentType\\",
    \\"sendSubmissionsToEmail\\",
    \\"name\\",
    \\"method\\",
    \\"errorMessagePath\\",
    \\"resetFormOnSubmit\\",
    \\"successUrl\\",
    \\"validate\\",
    \\"attributes\\",
    \\"builderBlock\\",
    \\"errorMessage\\",
    \\"sendingMessage\\",
    \\"successMessage\\",
  ],

  data: () => ({
    state: \\"unsubmitted\\",
    responseData: null,
    formErrorMessage: \\"\\",
    BuilderBlock,
  }),

  computed: {
    submissionState() {
      return (Builder.isEditing && this.previewState) || this.state;
    },
  },

  methods: {
    onSubmit(event) {
      const sendWithJs = this.sendWithJs || this.sendSubmissionsTo === \\"email\\";

      if (this.sendSubmissionsTo === \\"zapier\\") {
        event.preventDefault();
      } else if (sendWithJs) {
        if (!(this.action || this.sendSubmissionsTo === \\"email\\")) {
          event.preventDefault();
          return;
        }

        event.preventDefault();
        const el = event.currentTarget;
        const headers = this.customHeaders || {};
        let body;
        const formData = new FormData(el); // TODO: maybe support null

        const formPairs = Array.from(
          event.currentTarget.querySelectorAll(\\"input,select,textarea\\")
        )
          .filter((el) => !!el.name)
          .map((el) => {
            let value;
            const key = el.name;

            if (el instanceof HTMLInputElement) {
              if (el.type === \\"radio\\") {
                if (el.checked) {
                  value = el.name;
                  return {
                    key,
                    value,
                  };
                }
              } else if (el.type === \\"checkbox\\") {
                value = el.checked;
              } else if (el.type === \\"number\\" || el.type === \\"range\\") {
                const num = el.valueAsNumber;

                if (!isNaN(num)) {
                  value = num;
                }
              } else if (el.type === \\"file\\") {
                // TODO: one vs multiple files
                value = el.files;
              } else {
                value = el.value;
              }
            } else {
              value = el.value;
            }

            return {
              key,
              value,
            };
          });
        let contentType = this.contentType;

        if (this.sendSubmissionsTo === \\"email\\") {
          contentType = \\"multipart/form-data\\";
        }

        Array.from(formPairs).forEach(({ value }) => {
          if (
            value instanceof File ||
            (Array.isArray(value) && value[0] instanceof File) ||
            value instanceof FileList
          ) {
            contentType = \\"multipart/form-data\\";
          }
        }); // TODO: send as urlEncoded or multipart by default
        // because of ease of use and reliability in browser API
        // for encoding the form?

        if (contentType !== \\"application/json\\") {
          body = formData;
        } else {
          // Json
          const json = {};
          Array.from(formPairs).forEach(({ value, key }) => {
            set(json, key, value);
          });
          body = JSON.stringify(json);
        }

        if (contentType && contentType !== \\"multipart/form-data\\") {
          if (
            /* Zapier doesn't allow content-type header to be sent from browsers */
            !(sendWithJs && this.action?.includes(\\"zapier.com\\"))
          ) {
            headers[\\"content-type\\"] = contentType;
          }
        }

        const presubmitEvent = new CustomEvent(\\"presubmit\\", {
          detail: {
            body,
          },
        });

        if (this.$refs.formRef) {
          this.$refs.formRef.dispatchEvent(presubmitEvent);

          if (presubmitEvent.defaultPrevented) {
            return;
          }
        }

        this.state = \\"sending\\";
        const formUrl = \`\${
          builder.env === \\"dev\\" ? \\"http://localhost:5000\\" : \\"https://builder.io\\"
        }/api/v1/form-submit?apiKey=\${builder.apiKey}&to=\${btoa(
          this.sendSubmissionsToEmail || \\"\\"
        )}&name=\${encodeURIComponent(this.name || \\"\\")}\`;
        fetch(
          this.sendSubmissionsTo === \\"email\\" ? formUrl : this.action,
          /* TODO: throw error if no action URL */
          {
            body,
            headers,
            method: this.method || \\"post\\",
          }
        ).then(
          async (res) => {
            let body;
            const contentType = res.headers.get(\\"content-type\\");

            if (contentType && contentType.indexOf(\\"application/json\\") !== -1) {
              body = await res.json();
            } else {
              body = await res.text();
            }

            if (!res.ok && this.errorMessagePath) {
              /* TODO: allow supplying an error formatter function */
              let message = get(body, this.errorMessagePath);

              if (message) {
                if (typeof message !== \\"string\\") {
                  /* TODO: ideally convert json to yaml so it woul dbe like
           error: - email has been taken */
                  message = JSON.stringify(message);
                }

                this.formErrorMessage = message;
              }
            }

            this.responseData = body;
            this.state = res.ok ? \\"success\\" : \\"error\\";

            if (res.ok) {
              const submitSuccessEvent = new CustomEvent(\\"submit:success\\", {
                detail: {
                  res,
                  body,
                },
              });

              if (this.$refs.formRef) {
                this.$refs.formRef.dispatchEvent(submitSuccessEvent);

                if (submitSuccessEvent.defaultPrevented) {
                  return;
                }
                /* TODO: option to turn this on/off? */

                if (this.resetFormOnSubmit !== false) {
                  this.$refs.formRef.reset();
                }
              }
              /* TODO: client side route event first that can be preventDefaulted */

              if (this.successUrl) {
                if (this.$refs.formRef) {
                  const event = new CustomEvent(\\"route\\", {
                    detail: {
                      url: this.successUrl,
                    },
                  });
                  this.$refs.formRef.dispatchEvent(event);

                  if (!event.defaultPrevented) {
                    location.href = this.successUrl;
                  }
                } else {
                  location.href = this.successUrl;
                }
              }
            }
          },
          (err) => {
            const submitErrorEvent = new CustomEvent(\\"submit:error\\", {
              detail: {
                error: err,
              },
            });

            if (this.$refs.formRef) {
              this.$refs.formRef.dispatchEvent(submitErrorEvent);

              if (submitErrorEvent.defaultPrevented) {
                return;
              }
            }

            this.responseData = err;
            this.state = \\"error\\";
          }
        );
      }
    },
  },
};
</script>
<style scoped>
.pre {
  padding: 10px;
  color: red;
  text-align: center;
}
</style>
"
`;

exports[`Vue Image 1`] = `
"<template>
  <picture ref=\\"pictureRef\\">
    <img
      class=\\"img\\"
      v-if=\\"!useLazyLoading() || load\\"
      :alt=\\"altText\\"
      :aria-role=\\"altText ? 'presentation' : undefined\\"
      :class=\\"
        _classStringToObject(
          'builder-image' + (this.class ? ' ' + this.class : '')
        )
      \\"
      :src=\\"image\\"
      @load=\\"setLoaded()\\"
      :srcset=\\"srcset\\"
      :sizes=\\"sizes\\"
    />

    <source :srcset=\\"srcset\\" />
  </picture>

  <slot></slot>
</template>
<script>
export default {
  name: \\"image\\",

  props: [\\"lazy\\", \\"altText\\", \\"image\\", \\"srcset\\", \\"sizes\\"],

  data: () => ({ scrollListener: null, imageLoaded: false, load: false }),

  mounted() {
    if (this.useLazyLoading()) {
      // throttled scroll capture listener
      const listener = () => {
        if (this.$refs.pictureRef) {
          const rect = this.$refs.pictureRef.getBoundingClientRect();
          const buffer = window.innerHeight / 2;

          if (rect.top < window.innerHeight + buffer) {
            this.load = true;
            this.scrollListener = null;
            window.removeEventListener(\\"scroll\\", listener);
          }
        }
      };

      this.scrollListener = listener;
      window.addEventListener(\\"scroll\\", listener, {
        capture: true,
        passive: true,
      });
      listener();
    }
  },

  unmounted() {
    if (this.scrollListener) {
      window.removeEventListener(\\"scroll\\", this.scrollListener);
    }
  },

  methods: {
    setLoaded() {
      this.imageLoaded = true;
    },
    isBrowser() {
      return (
        typeof window !== \\"undefined\\" &&
        window.navigator.product != \\"ReactNative\\"
      );
    },
    useLazyLoading() {
      // TODO: Add more checks here, like testing for real web browsers
      return !!this.lazy && this.isBrowser();
    },
    _classStringToObject(str) {
      const obj = {};
      if (typeof str !== \\"string\\") {
        return obj;
      }
      const classNames = str.trim().split(/\\\\s+/);
      for (const name of classNames) {
        obj[name] = true;
      }
      return obj;
    },
  },
};
</script>
<style scoped>
.img {
  opacity: 1;
  transition: opacity 0.2s ease-in-out;
  object-fit: cover;
  object-position: center;
}
</style>
"
`;

exports[`Vue Img 1`] = `
"<template>
  <img
    v-bind=\\"attributes\\"
    :style=\\"{
      objectFit: backgroundSize || 'cover',
      objectPosition: backgroundPosition || 'center',
    }\\"
    :key=\\"(Builder.isEditing && imgSrc) || 'default-key'\\"
    :alt=\\"altText\\"
    :src=\\"imgSrc\\"
  />
</template>
<script>
import { Builder } from \\"@builder.io/sdk\\";

export default {
  name: \\"img-component\\",

  props: [
    \\"backgroundSize\\",
    \\"backgroundPosition\\",
    \\"attributes\\",
    \\"imgSrc\\",
    \\"altText\\",
  ],

  data: () => ({ Builder }),
};
</script>
"
`;

exports[`Vue Input block 1`] = `
"<template>
  <input
    v-bind=\\"attributes\\"
    :key=\\"Builder.isEditing && defaultValue ? defaultValue : 'default-key'\\"
    :placeholder=\\"placeholder\\"
    :type=\\"type\\"
    :name=\\"name\\"
    :value=\\"value\\"
    :defaultValue=\\"defaultValue\\"
    :required=\\"required\\"
  />
</template>
<script>
import { Builder } from \\"@builder.io/sdk\\";

export default {
  name: \\"form-input-component\\",

  props: [
    \\"attributes\\",
    \\"defaultValue\\",
    \\"placeholder\\",
    \\"type\\",
    \\"name\\",
    \\"value\\",
    \\"required\\",
  ],

  data: () => ({ Builder }),
};
</script>
"
`;

exports[`Vue RawText 1`] = `
"<template>
  <span
    :class=\\"
      _classStringToObject(this.attributes?.class || this.attributes?.className)
    \\"
    v-html=\\"text || ''\\"
  ></span>
</template>
<script>
export default {
  name: \\"raw-text\\",

  props: [\\"attributes\\", \\"text\\"],

  methods: {
    _classStringToObject(str) {
      const obj = {};
      if (typeof str !== \\"string\\") {
        return obj;
      }
      const classNames = str.trim().split(/\\\\s+/);
      for (const name of classNames) {
        obj[name] = true;
      }
      return obj;
    },
  },
};
</script>
"
`;

exports[`Vue Section 1`] = `
"<template>
  <section
    v-bind=\\"attributes\\"
    :style=\\"
      maxWidth && typeof maxWidth === 'number'
        ? {
            maxWidth: maxWidth,
          }
        : undefined
    \\"
  >
    <slot></slot>
  </section>
</template>
<script>
export default {
  name: \\"section-component\\",

  props: [\\"attributes\\", \\"maxWidth\\"],
};
</script>
"
`;

exports[`Vue Select block 1`] = `
"<template>
  <select
    v-bind=\\"attributes\\"
    :value=\\"value\\"
    :key=\\"Builder.isEditing && defaultValue ? defaultValue : 'default-key'\\"
    :defaultValue=\\"defaultValue\\"
    :name=\\"name\\"
  >
    <option
      v-for=\\"(option, index) in options\\"
      :value=\\"option.value\\"
      :data-index=\\"index\\"
      :key=\\"index\\"
    >
      {{ option.name || option.value }}
    </option>
  </select>
</template>
<script>
import { Builder } from \\"@builder.io/sdk\\";

export default {
  name: \\"select-component\\",

  props: [\\"attributes\\", \\"value\\", \\"defaultValue\\", \\"name\\", \\"options\\"],

  data: () => ({ Builder }),
};
</script>
"
`;

exports[`Vue Stamped.io 1`] = `
"<template>
  <div :data-user=\\"name\\">
    <button @click=\\"showReviewPrompt = true\\">Write a review</button>

    <input placeholder=\\"Email\\" v-if=\\"showReviewPrompt\\" />

    <div class=\\"review\\" v-for=\\"(review, index) in reviews\\" :key=\\"review.id\\">
      <img class=\\"img\\" :src=\\"review.avatar\\" />
      <div
        :class=\\"
          _classStringToObject(
            this.showReviewPrompt ? 'bg-primary' : 'bg-secondary'
          )
        \\"
      >
        <div>N: {{ index }}</div>
        <div>{{ review.author }}</div>
        <div>{{ review.reviewMessage }}</div>
      </div>
    </div>
  </div>
</template>
<script>
export default {
  name: \\"smile-reviews\\",

  props: [\\"apiKey\\", \\"productId\\"],

  data: () => ({ reviews: [], name: \\"test\\", showReviewPrompt: false }),

  mounted() {
    fetch(
      \`https://stamped.io/api/widget/reviews?storeUrl=builder-io.myshopify.com&apiKey=\${
        this.apiKey || \\"pubkey-8bbDq7W6w4sB3OWeM1HUy2s47702hM\\"
      }&productId=\${this.productId || \\"2410511106127\\"}\`
    )
      .then((res) => res.json())
      .then((data) => {
        this.reviews = data.data;
      });
  },

  methods: {
    _classStringToObject(str) {
      const obj = {};
      if (typeof str !== \\"string\\") {
        return obj;
      }
      const classNames = str.trim().split(/\\\\s+/);
      for (const name of classNames) {
        obj[name] = true;
      }
      return obj;
    },
  },
};
</script>
<style scoped>
.input {
  display: block;
}
.textarea {
  display: block;
}
.button {
  display: block;
}
.review {
  margin: 10px;
  padding: 10px;
  background: white;
  display: flex;
  border-radius: 5px;
  box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
}
.img {
  height: 30px;
  width: 30px;
  margin-right: 10px;
}
</style>
"
`;

exports[`Vue Submit button block 1`] = `
"<template>
  <button v-bind=\\"attributes\\" type=\\"submit\\">
    {{ text }}
  </button>
</template>
<script>
export default {
  name: \\"submit-button\\",

  props: [\\"attributes\\", \\"text\\"],
};
</script>
"
`;

exports[`Vue Text 1`] = `
"<template>
  <div
    :contentEditable=\\"allowEditingText || undefined\\"
    v-html=\\"text || content || ''\\"
  ></div>
</template>
<script>
import { Builder } from \\"@builder.io/sdk\\";

export default {
  name: \\"text\\",

  props: [\\"text\\", \\"content\\"],
};
</script>
"
`;

exports[`Vue Textarea 1`] = `
"<template>
  <textarea
    v-bind=\\"attributes\\"
    :placeholder=\\"placeholder\\"
    :name=\\"name\\"
    :value=\\"value\\"
    :defaultValue=\\"defaultValue\\"
  ></textarea>
</template>
<script>
export default {
  name: \\"textarea\\",

  props: [\\"attributes\\", \\"placeholder\\", \\"name\\", \\"value\\", \\"defaultValue\\"],
};
</script>
"
`;

exports[`Vue Video 1`] = `
"<template>
  <video
    v-bind=\\"attributes\\"
    preload=\\"none\\"
    :style=\\"{
      width: '100%',
      height: '100%',
      ...attributes?.style,
      objectFit: fit,
      objectPosition: position,
      // Hack to get object fit to work as expected and
      // not have the video overflow
      borderRadius: 1,
    }\\"
    :key=\\"video || 'no-src'\\"
    :poster=\\"posterImage\\"
    :autoPlay=\\"autoPlay\\"
    :muted=\\"muted\\"
    :controls=\\"controls\\"
    :loop=\\"loop\\"
  ></video>
</template>
<script>
export default {
  name: \\"video\\",

  props: [
    \\"attributes\\",
    \\"fit\\",
    \\"position\\",
    \\"video\\",
    \\"posterImage\\",
    \\"autoPlay\\",
    \\"muted\\",
    \\"controls\\",
    \\"loop\\",
  ],
};
</script>
"
`;

exports[`Vue onMount & onUnMount 1`] = `
"<template>
  <div></div>
</template>
<script>
export default {
  name: \\"comp\\",

  mounted() {
    console.log(\\"Runs on mount\\");
  },

  unmounted() {
    console.log(\\"Runs on unMount\\");
  },
};
</script>
"
`;

exports[`Vue onUpdate 1`] = `
"<template>
  <div></div>
</template>
<script>
export default {
  name: \\"on-update\\",

  updated() {
    console.log(\\"Runs on every update/rerender\\");
  },
};
</script>
"
`;

exports[`Vue onUpdateWithDeps 1`] = `
"<template>
  <div></div>
</template>
<script>
export default {
  name: \\"on-update-with-deps\\",

  updated() {
    console.log(\\"Runs when a or b changes\\");
  },
};
</script>
"
`;
