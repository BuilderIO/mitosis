// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`Angular signals > jsx > Javascript Test > Advanced 1`] = `
"import { Component, effect, signal } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

@Component({
  selector: \\"my-basic-for-show-component\\",
  standalone: true,
  imports: [CommonModule],
  template: \`
    <main>
      @for (person of names();track i;let i = $index) {
      <div>{{i}} : {{person}}</div>
      } @for (person of names();track i;let i = $index) {
      <span>{{person}}</span>
      } @for (_ of names();track i;let i = $index) {
      <br />
      } @for (_ of Array.from({ length: 10 });track ee;let ee = $index) {
      <pre>{{ee}}</pre>
      } @for (_ of Array.from({ length: 10 });track i;let i = $index) {
      <p>{{index}}</p>
      } @for (person of names();track index;let index = $index) {
      <span>{{person}} {{index}}</span>
      } @for (person of Array.from({ length: 10 });track count;let count =
      $index) {
      <span>{{person}} {{count}}</span>
      } @for (person of names();track i;let i = $index) {
      <span>{{person}} {{i}}</span>
      } @for (person of Array.from({ length: 10 });track index;let index =
      $index) {
      <span>{{person}} {{index}}</span>
      }
    </main>
  \`,
  styles: \`:host { display: contents; }\`,
})
export class MyBasicForShowComponent {
  name = signal(\\"PatrickJS\\");
  names = signal([\\"Steve\\", \\"PatrickJS\\"]);

  constructor() {}
}
"
`;

exports[`Angular signals > jsx > Javascript Test > AdvancedRef 1`] = `
"import {
  Component,
  viewChild,
  ElementRef,
  input,
  effect,
  signal,
} from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

@Component({
  selector: \\"my-basic-ref-component\\",
  standalone: true,
  imports: [CommonModule],
  template: \`
    <div>
      @if(showInput()){
      <ng-container>
        <input
          class=\\"input\\"
          #inputRef
          [attr.value]=\\"name()\\"
          (blur)=\\"onBlur()\\"
          (change)=\\"name.set($event.target.value)\\"
        />
        <label for=\\"cars\\" #inputNoArgRef>Choose a car:</label>
        <select name=\\"cars\\" id=\\"cars\\">
          <option value=\\"supra\\">GR Supra</option>
          <option value=\\"86\\">GR 86</option>
        </select>
      </ng-container>
      } Hello {{lowerCaseName()}} ! I can run in React, Qwik, Vue, Solid, or Web
      Component!
    </div>
  \`,
  styles: \`:host { display: contents; }
        .input {
          color: red;
        }
\`,
})
export class MyBasicRefComponent {
  showInput = input<any>();

  inputRef = viewChild<ElementRef>(\\"inputRef\\");
  inputNoArgRef = viewChild<ElementRef>(\\"inputNoArgRef\\");

  name = signal(\\"PatrickJS\\");

  onBlur() {
    // Maintain focus
    this.inputRef()?.nativeElement.focus();
  }
  lowerCaseName() {
    return this.name().toLowerCase();
  }

  constructor() {
    effect(
      () => {
        // --- Mitosis: Workaround to make sure the effect() is triggered ---
        this.inputRef();
        this.inputNoArgRef();
        // ---

        console.log(\\"Received an update\\");
      },
      {
        allowSignalWrites: true, // Enable writing to signals inside effects
      }
    );
  }
}
"
`;

exports[`Angular signals > jsx > Javascript Test > Basic 1`] = `
"import { Component, effect, signal } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

export const DEFAULT_VALUES = {
  name: \\"Steve\\",
};

@Component({
  selector: \\"my-basic-component\\",
  standalone: true,
  imports: [CommonModule],
  template: \`
    <div class=\\"test div\\">
      <input
        [attr.value]=\\"DEFAULT_VALUES.name || name()\\"
        (change)=\\"name.set(myEvent.target.value)\\"
      />

      Hello! I can run in React, Vue, Solid, or Liquid! &gt;
    </div>
  \`,
  styles: \`:host { display: contents; }
        .div {
          padding: 10px;
        }
\`,
})
export class MyBasicComponent {
  protected readonly DEFAULT_VALUES = DEFAULT_VALUES;

  name = signal(\\"Steve\\");
  age = signal(1);
  sports = signal([\\"\\"]);

  underscore_fn_name() {
    return \\"bar\\";
  }

  constructor() {}
}
"
`;

exports[`Angular signals > jsx > Javascript Test > Basic 2`] = `
"import { Component, effect, signal } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

@Component({
  selector: \\"my-basic-for-show-component\\",
  standalone: true,
  imports: [CommonModule],
  template: \`
    <div>
      @for (person of names();track i;let i = $index) { @if(person === name()){
      <input
        [attr.value]=\\"name()\\"
        (change)=\\"{
          name.set($event.target.value + ' and ' + person);
        }\\"
      />

      Hello {{person}} ! I can run in Qwik, Web Component, React, Vue, Solid, or
      Liquid! } }
    </div>
  \`,
  styles: \`:host { display: contents; }\`,
})
export class MyBasicForShowComponent {
  name = signal(\\"PatrickJS\\");
  names = signal([\\"Steve\\", \\"PatrickJS\\"]);

  constructor() {}
}
"
`;

exports[`Angular signals > jsx > Javascript Test > Basic Context 1`] = `
"import { Component, effect, signal } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

import { Injector, MyService, createInjector } from \\"@dummy/injection-js\\";

@Component({
  selector: \\"my-basic-component\\",
  standalone: true,
  imports: [CommonModule],
  template: \`
    <div>
      {{myService.method('hello') + name()}} Hello! I can run in React, Vue,
      Solid, or Liquid!

      <input (change)=\\"onChange\\" />
    </div>
  \`,
  styles: \`:host { display: contents; }\`,
})
export class MyBasicComponent {
  name = signal(\\"PatrickJS\\");

  onChange() {
    const change = this.myService.method(\\"change\\");
    console.log(change);
  }

  constructor(public myService: MyService) {}

  ngOnInit() {
    const hi = this.myService.method(\\"hi\\");
    console.log(hi);
    const bye = this.myService.method(\\"hi\\");
    console.log(bye);
  }
}
"
`;

exports[`Angular signals > jsx > Javascript Test > Basic OnMount Update 1`] = `
"import { Component, input, effect, signal } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

@Component({
  selector: \\"my-basic-on-mount-update-component\\",
  standalone: true,
  imports: [CommonModule],
  template: \`
    <div>Hello {{name()}}</div>
  \`,
  styles: \`:host { display: contents; }\`,
})
export class MyBasicOnMountUpdateComponent {
  bye = input<any>();
  hi = input<any>();

  name = signal(\\"PatrickJS\\");
  names = signal([\\"Steve\\", \\"PatrickJS\\"]);

  constructor() {}

  ngOnInit() {
    this.name.set(\\"PatrickJS onInit\\" + this.hi());
    this.name.set(\\"PatrickJS onMount\\" + this.bye());
  }
}
"
`;

exports[`Angular signals > jsx > Javascript Test > Basic Outputs 1`] = `
"import { Component, output, input, effect, signal } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

@Component({
  selector: \\"my-basic-outputs-component\\",
  standalone: true,
  imports: [CommonModule],
  template: \`
    <div></div>
  \`,
  styles: \`:host { display: contents; }\`,
})
export class MyBasicOutputsComponent {
  message = input<any>();
  messageChange = output();
  event = output();

  name = signal(\\"PatrickJS\\");

  constructor() {}

  ngOnInit() {
    this.messageChange.emit(this.name());
    this.event.emit(this.message());
  }
}
"
`;

exports[`Angular signals > jsx > Javascript Test > Basic Outputs Meta 1`] = `
"/**
          useMetadata:
          {\\"outputs\\":[\\"onMessage\\",\\"onEvent\\"],\\"baz\\":\\"metadata inside component\\"}
          */

import { Component, output, input, effect, signal } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

@Component({
  selector: \\"my-basic-outputs-component\\",
  standalone: true,
  imports: [CommonModule],
  template: \`
    <div></div>
  \`,
  styles: \`:host { display: contents; }\`,
})
export class MyBasicOutputsComponent {
  message = input<any>();
  messageChange = output();
  event = output();

  name = signal(\\"PatrickJS\\");

  constructor() {}

  ngOnInit() {
    this.messageChange.emit(this.name());
    this.event.emit(this.message());
  }
}
"
`;

exports[`Angular signals > jsx > Javascript Test > BasicAttribute 1`] = `
"import { Component, effect } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

@Component({
  selector: \\"my-component\\",
  standalone: true,
  imports: [CommonModule],
  template: \`
    <input autocapitalize=\\"on\\" autocomplete=\\"on\\" [attr.spellcheck]=\\"true\\" />
  \`,
  styles: \`:host { display: contents; }\`,
})
export class MyComponent {
  constructor() {}
}
"
`;

exports[`Angular signals > jsx > Javascript Test > BasicBooleanAttribute 1`] = `
"import { Component, input, effect } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

import { MyBooleanAttributeComponent } from \\"./basic-boolean-attribute-component.raw\\";

@Component({
  selector: \\"my-boolean-attribute\\",
  standalone: true,
  imports: [CommonModule, MyBooleanAttributeComponent],
  template: \`
    <div>
      @if(children()){
      <ng-content></ng-content>
      {{type()}} }
      <my-boolean-attribute-component
        [toggle]=\\"true\\"
      ></my-boolean-attribute-component>
      <my-boolean-attribute-component
        [toggle]=\\"true\\"
      ></my-boolean-attribute-component>
      <my-boolean-attribute-component
        [list]=\\"null\\"
      ></my-boolean-attribute-component>
    </div>
  \`,
  styles: \`:host { display: contents; }\`,
})
export class MyBooleanAttribute {
  type = input<any>();

  constructor() {}
}
"
`;

exports[`Angular signals > jsx > Javascript Test > BasicChildComponent 1`] = `
"import { Component, effect, signal } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

import { MyBasicOnMountUpdateComponent } from \\"./basic-onMount-update.raw\\";
import { MyBasicOutputsComponent } from \\"./basic-outputs.raw\\";
import { MyBasicComponent } from \\"./basic.raw\\";

@Component({
  selector: \\"my-basic-child-component\\",
  standalone: true,
  imports: [
    CommonModule,
    MyBasicComponent,
    MyBasicOnMountUpdateComponent,
    MyBasicOutputsComponent,
  ],
  template: \`
    <div>
      <my-basic-component [id]=\\"dev()\\"></my-basic-component>
      <div>
        <my-basic-on-mount-update-component
          [hi]=\\"name()\\"
          [bye]=\\"dev()\\"
        ></my-basic-on-mount-update-component>
        <my-basic-outputs-component
          message=\\"Test\\"
          (messageChange)=\\"name.set($event)\\"
          (event)=\\"log('Test')\\"
        ></my-basic-outputs-component>
      </div>
    </div>
  \`,
  styles: \`:host { display: contents; }\`,
})
export class MyBasicChildComponent {
  name = signal(\\"Steve\\");
  dev = signal(\\"PatrickJS\\");

  log(message) {
    console.log(message);
  }

  constructor() {}
}
"
`;

exports[`Angular signals > jsx > Javascript Test > BasicFor 1`] = `
"import { Component, effect, signal } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

@Component({
  selector: \\"my-basic-for-component\\",
  standalone: true,
  imports: [CommonModule],
  template: \`
    <div>
      @for (person of names();track i;let i = $index) {
      <ng-container>
        <input
          [attr.value]=\\"name()\\"
          (change)=\\"{
          name.set($event.target.value + ' and ' + person);
        }\\"
        />

        Hello {{person}} ! I can run in Qwik, Web Component, React, Vue, Solid,
        or Liquid!
      </ng-container>
      }
    </div>
  \`,
  styles: \`:host { display: contents; }\`,
})
export class MyBasicForComponent {
  name = signal(\\"PatrickJS\\");
  names = signal([\\"Steve\\", \\"PatrickJS\\"]);

  constructor() {}

  ngOnInit() {
    console.log(\\"onMount code\\");
  }
}
"
`;

exports[`Angular signals > jsx > Javascript Test > BasicRef 1`] = `
"import {
  Component,
  viewChild,
  ElementRef,
  input,
  effect,
  signal,
} from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

@Component({
  selector: \\"my-basic-ref-component\\",
  standalone: true,
  imports: [CommonModule],
  template: \`
    <div>
      @if(showInput()){
      <ng-container>
        <input
          class=\\"input\\"
          #inputRef
          [attr.value]=\\"name()\\"
          (blur)=\\"onBlur()\\"
          (change)=\\"name.set($event.target.value)\\"
        />
        <label for=\\"cars\\" #inputNoArgRef>Choose a car:</label>
        <select name=\\"cars\\" id=\\"cars\\">
          <option value=\\"supra\\">GR Supra</option>
          <option value=\\"86\\">GR 86</option>
        </select>
      </ng-container>
      } Hello {{lowerCaseName()}} ! I can run in React, Qwik, Vue, Solid, or Web
      Component!
    </div>
  \`,
  styles: \`:host { display: contents; }
        .input {
          color: red;
        }
\`,
})
export class MyBasicRefComponent {
  showInput = input<any>();

  inputRef = viewChild<ElementRef>(\\"inputRef\\");
  inputNoArgRef = viewChild<ElementRef>(\\"inputNoArgRef\\");

  name = signal(\\"PatrickJS\\");

  onBlur() {
    // Maintain focus
    this.inputRef()?.nativeElement?.focus();
  }
  lowerCaseName() {
    return this.name().toLowerCase();
  }

  constructor() {}
}
"
`;

exports[`Angular signals > jsx > Javascript Test > BasicRefAssignment 1`] = `
"import { Component, effect } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

@Component({
  selector: \\"my-basic-ref-assignment-component\\",
  standalone: true,
  imports: [CommonModule],
  template: \`
    <div><button (click)=\\"await handlerClick($event)\\">Click</button></div>
  \`,
  styles: \`:host { display: contents; }\`,
})
export class MyBasicRefAssignmentComponent {
  handlerClick(event) {
    event.preventDefault();
    console.log(\\"current value\\", this._holdValueRef);
    this._holdValueRef = this._holdValueRef + \\"JS\\";
  }

  constructor() {}
}
"
`;

exports[`Angular signals > jsx > Javascript Test > BasicRefPrevious 1`] = `
"import { Component, effect, signal } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

export function usePrevious(value) {
  // The ref object is a generic container whose current property is mutable ...
  // ... and can hold any value, similar to an instance property on a class
  let ref = useRef(null); // Store current value in ref

  onUpdate(() => {
    ref = value;
  }, [value]); // Only re-run if value changes
  // Return previous value (happens before update in useEffect above)

  return ref;
}

@Component({
  selector: \\"my-previous-component\\",
  standalone: true,
  imports: [CommonModule],
  template: \`
    <div>
      <h1>Now: {{count()}} , before: {{prevCount}}</h1>
      <button (click)=\\"count.set(1)\\">Increment</button>
    </div>
  \`,
  styles: \`:host { display: contents; }\`,
})
export class MyPreviousComponent {
  count = signal(0);

  constructor() {
    effect(
      () => {
        // --- Mitosis: Workaround to make sure the effect() is triggered ---
        this.count();
        // ---

        this._prevCount = this.count();
      },
      {
        allowSignalWrites: true, // Enable writing to signals inside effects
      }
    );
  }
}
"
`;

exports[`Angular signals > jsx > Javascript Test > Button 1`] = `
"import { Component, input, effect } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

@Component({
  selector: \\"button\\",
  standalone: true,
  imports: [CommonModule],
  template: \`
    <div>
      @if(link()){
      <a
        [attr.href]=\\"link()\\"
        [attr.target]=\\"openLinkInNewTab() ? '_blank' : undefined\\"
      >
        {{text()}}
      </a>
      } @if(!link()){
      <button type=\\"button\\">{{text()}}</button>
      }
    </div>
  \`,
  styles: \`:host { display: contents; }\`,
})
export class Button {
  link = input<any>();
  attributes = input<any>();
  openLinkInNewTab = input<any>();
  text = input<any>();

  constructor() {}
}
"
`;

exports[`Angular signals > jsx > Javascript Test > Columns 1`] = `
"import { Component, input, effect } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

@Component({
  selector: \\"column\\",
  standalone: true,
  imports: [CommonModule],
  template: \`
    <div class=\\"builder-columns div\\">
      @for (column of columns();track index;let index = $index) {
      <div class=\\"builder-column div-2\\">{{column.content}} {{index}}</div>
      }
    </div>
  \`,
  styles: \`:host { display: contents; }
        .div {
          display: flex;
          flex-direction: column;
          align-items: stretch;
          line-height: normal;
        }
        @media (max-width: 999px) {
          .div {
            flex-direction: row;
          }
        }
        @media (max-width: 639px) {
          .div {
            flex-direction: row-reverse;
          }
        }
        .div-2 {
          flex-grow: 1;
        }
\`,
})
export class Column {
  columns = input<any>();
  space = input<any>();

  getColumns() {
    return this.columns() || [];
  }
  getGutterSize() {
    return typeof this.space() === \\"number\\" ? this.space() || 0 : 20;
  }
  getWidth(index) {
    const columns = this.getColumns();
    return (columns[index] && columns[index].width) || 100 / columns.length;
  }
  getColumnCssWidth(index) {
    const columns = this.getColumns();
    const gutterSize = this.getGutterSize();
    const subtractWidth = (gutterSize * (columns.length - 1)) / columns.length;
    return \`calc(\${this.getWidth(index)}% - \${subtractWidth}px)\`;
  }

  constructor() {}
}
"
`;

exports[`Angular signals > jsx > Javascript Test > ContentSlotHtml 1`] = `
"import { Component, input, effect } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

@Component({
  selector: \\"content-slot-code\\",
  standalone: true,
  imports: [CommonModule],
  template: \`
    <div>
      <ng-content select=\\"[testing]\\"></ng-content>
      <div><hr /></div>
      <div><ng-content></ng-content></div>
    </div>
  \`,
  styles: \`:host { display: contents; }\`,
})
export class ContentSlotCode {
  slotTesting = input<any>();

  constructor() {}
}
"
`;

exports[`Angular signals > jsx > Javascript Test > ContentSlotJSX 1`] = `
"import { Component, input, effect, signal, computed } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

const defaultProps: any = {
  content: \\"\\",
  slotReference: undefined,
  slotContent: undefined,
};

@Component({
  selector: \\"content-slot-jsx-code\\",
  standalone: true,
  imports: [CommonModule],
  template: \`
    @if(slotReference()){
    <div
      [attr.name]=\\"slotContent() ? 'name1' : 'name2'\\"
      [attr.title]=\\"slotContent() ? 'title1' : 'title2'\\"
      (click)=\\"show()\\"
      [class]=\\"cls()\\"
    >
      @if(showContent() && slotContent()){
      <ng-content select=\\"[content]\\">{{content()}}</ng-content>
      }
      <div><hr /></div>
      <div><ng-content></ng-content></div>
    </div>
    }
  \`,
  styles: \`:host { display: contents; }\`,
})
export class ContentSlotJsxCode {
  slotContent = input<any>(defaultProps[\\"slotContent\\"]);
  slotReference = input<any>(defaultProps[\\"slotReference\\"]);
  attributes = input<any>();
  content = input<any>(defaultProps[\\"content\\"]);

  name = signal(\\"king\\");
  showContent = signal(false);

  cls = computed(() => {
    return this.slotContent() && this.children()
      ? \`\${this.name()}-content\`
      : \\"\\";
  });
  show() {
    this.slotContent() ? 1 : \\"\\";
  }

  constructor() {}
}
"
`;

exports[`Angular signals > jsx > Javascript Test > CustomCode 1`] = `
"import {
  Component,
  viewChild,
  ElementRef,
  input,
  effect,
  signal,
} from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";
import { DomSanitizer } from \\"@angular/platform-browser\\";

@Component({
  selector: \\"custom-code\\",
  standalone: true,
  imports: [CommonModule],
  template: \`
    <div
      #elem
      [class]=\\"'builder-custom-code' + (replaceNodes() ? ' replace-nodes' : '')\\"
      [innerHTML]=\\"sanitizer.bypassSecurityTrustHtml(code())\\"
    ></div>
  \`,
  styles: \`:host { display: contents; }\`,
})
export class CustomCode {
  replaceNodes = input<any>();
  code = input<any>();

  elem = viewChild<ElementRef>(\\"elem\\");

  scriptsInserted = signal([]);
  scriptsRun = signal([]);

  findAndRunScripts() {
    // TODO: Move this function to standalone one in '@builder.io/utils'
    if (this.elem()?.nativeElement && typeof window !== \\"undefined\\") {
      /** @type {HTMLScriptElement[]} */
      const scripts = this.elem()?.nativeElement.getElementsByTagName(\\"script\\");

      for (let i = 0; i < scripts.length; i++) {
        const script = scripts[i];

        if (script.src) {
          if (this.scriptsInserted().includes(script.src)) {
            continue;
          }

          this.scriptsInserted().push(script.src);
          const newScript = document.createElement(\\"script\\");
          newScript.async = true;
          newScript.src = script.src;
          document.head.appendChild(newScript);
        } else if (
          !script.type ||
          [
            \\"text/javascript\\",
            \\"application/javascript\\",
            \\"application/ecmascript\\",
          ].includes(script.type)
        ) {
          if (this.scriptsRun().includes(script.innerText)) {
            continue;
          }

          try {
            this.scriptsRun().push(script.innerText);
            new Function(script.innerText)();
          } catch (error) {
            console.warn(\\"\`CustomCode\`: Error running script:\\", error);
          }
        }
      }
    }
  }

  constructor(protected sanitizer: DomSanitizer) {}

  ngOnInit() {
    this.findAndRunScripts();
  }
}
"
`;

exports[`Angular signals > jsx > Javascript Test > Embed 1`] = `
"import {
  Component,
  viewChild,
  ElementRef,
  input,
  effect,
  signal,
} from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";
import { DomSanitizer } from \\"@angular/platform-browser\\";

@Component({
  selector: \\"custom-code\\",
  standalone: true,
  imports: [CommonModule],
  template: \`
    <div
      #elem
      [class]=\\"'builder-custom-code' + (replaceNodes() ? ' replace-nodes' : '')\\"
      [innerHTML]=\\"sanitizer.bypassSecurityTrustHtml(code())\\"
    ></div>
  \`,
  styles: \`:host { display: contents; }\`,
})
export class CustomCode {
  replaceNodes = input<any>();
  code = input<any>();

  elem = viewChild<ElementRef>(\\"elem\\");

  scriptsInserted = signal([]);
  scriptsRun = signal([]);

  findAndRunScripts() {
    // TODO: Move this function to standalone one in '@builder.io/utils'
    if (this.elem()?.nativeElement && typeof window !== \\"undefined\\") {
      /** @type {HTMLScriptElement[]} */
      const scripts = this.elem()?.nativeElement.getElementsByTagName(\\"script\\");

      for (let i = 0; i < scripts.length; i++) {
        const script = scripts[i];

        if (script.src) {
          if (this.scriptsInserted().includes(script.src)) {
            continue;
          }

          this.scriptsInserted().push(script.src);
          const newScript = document.createElement(\\"script\\");
          newScript.async = true;
          newScript.src = script.src;
          document.head.appendChild(newScript);
        } else if (
          !script.type ||
          [
            \\"text/javascript\\",
            \\"application/javascript\\",
            \\"application/ecmascript\\",
          ].includes(script.type)
        ) {
          if (this.scriptsRun().includes(script.innerText)) {
            continue;
          }

          try {
            this.scriptsRun().push(script.innerText);
            new Function(script.innerText)();
          } catch (error) {
            console.warn(\\"\`CustomCode\`: Error running script:\\", error);
          }
        }
      }
    }
  }

  constructor(protected sanitizer: DomSanitizer) {}

  ngOnInit() {
    this.findAndRunScripts();
  }
}
"
`;

exports[`Angular signals > jsx > Javascript Test > Form 1`] = `
"import {
  Component,
  viewChild,
  ElementRef,
  input,
  effect,
  signal,
  computed,
} from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

import { Builder, builder } from \\"@builder.io/sdk\\";
import {
  BuilderBlock as BuilderBlockComponent,
  BuilderBlocks,
  get,
  set,
} from \\"@fake\\";

@Component({
  selector: \\"form-component\\",
  standalone: true,
  imports: [CommonModule, BuilderBlockComponent, BuilderBlocks],
  template: \`
    <form
      [attr.validate]=\\"validate()\\"
      #formRef
      [attr.action]=\\"!sendWithJs() && action()\\"
      [attr.method]=\\"method()\\"
      [attr.name]=\\"name()\\"
      (submit)=\\"onSubmit($event)\\"
    >
      @if(builderBlock() && builderBlock().children){ @for (block of
      builderBlock()?.children;track trackByBlock0;let index = $index) {
      <builder-block-component
        [block]=\\"block\\"
        [index]=\\"index\\"
      ></builder-block-component>
      } } @if(submissionState() === 'error'){
      <builder-blocks
        dataPath=\\"errorMessage\\"
        [blocks]=\\"errorMessage()\\"
      ></builder-blocks>
      } @if(submissionState() === 'sending'){
      <builder-blocks
        dataPath=\\"sendingMessage\\"
        [blocks]=\\"sendingMessage()\\"
      ></builder-blocks>
      } @if(submissionState() === 'error' && responseData()){
      <pre class=\\"builder-form-error-text pre\\">
        {{JSON.stringify(responseData(), null, 2)}}</pre
      >
      } @if(submissionState() === 'success'){
      <builder-blocks
        dataPath=\\"successMessage\\"
        [blocks]=\\"successMessage()\\"
      ></builder-blocks>
      }
    </form>
  \`,
  styles: \`:host { display: contents; }
        .pre {
          padding: 10px;
          color: red;
          text-align: center;
        }
\`,
})
export class FormComponent {
  previewState = input<any>();
  sendWithJs = input<any>();
  sendSubmissionsTo = input<any>();
  action = input<any>();
  customHeaders = input<any>();
  contentType = input<any>();
  sendSubmissionsToEmail = input<any>();
  name = input<any>();
  method = input<any>();
  errorMessagePath = input<any>();
  resetFormOnSubmit = input<any>();
  successUrl = input<any>();
  validate = input<any>();
  attributes = input<any>();
  builderBlock = input<any>();
  errorMessage = input<any>();
  sendingMessage = input<any>();
  successMessage = input<any>();

  formRef = viewChild<ElementRef>(\\"formRef\\");

  formState = signal(\\"unsubmitted\\");
  responseData = signal(null);
  formErrorMessage = signal(\\"\\");

  submissionState = computed(() => {
    return (Builder.isEditing && this.previewState()) || this.formState();
  });
  onSubmit(event) {
    const sendWithJs =
      this.sendWithJs() || this.sendSubmissionsTo() === \\"email\\";

    if (this.sendSubmissionsTo() === \\"zapier\\") {
      event.preventDefault();
    } else if (sendWithJs) {
      if (!(this.action() || this.sendSubmissionsTo() === \\"email\\")) {
        event.preventDefault();
        return;
      }

      event.preventDefault();
      const el = event.currentTarget;
      const headers = this.customHeaders() || {};
      let body;
      const formData = new FormData(el); // TODO: maybe support null

      const formPairs = Array.from(
        event.currentTarget.querySelectorAll(\\"input,select,textarea\\")
      )
        .filter((el) => !!el.name)
        .map((el) => {
          let value;
          const key = el.name;

          if (el instanceof HTMLInputElement) {
            if (el.type === \\"radio\\") {
              if (el.checked) {
                value = el.name;
                return {
                  key,
                  value,
                };
              }
            } else if (el.type === \\"checkbox\\") {
              value = el.checked;
            } else if (el.type === \\"number\\" || el.type === \\"range\\") {
              const num = el.valueAsNumber;

              if (!isNaN(num)) {
                value = num;
              }
            } else if (el.type === \\"file\\") {
              // TODO: one vs multiple files
              value = el.files;
            } else {
              value = el.value;
            }
          } else {
            value = el.value;
          }

          return {
            key,
            value,
          };
        });
      let contentType = this.contentType();

      if (this.sendSubmissionsTo() === \\"email\\") {
        contentType = \\"multipart/form-data\\";
      }

      Array.from(formPairs).forEach(({ value }) => {
        if (
          value instanceof File ||
          (Array.isArray(value) && value[0] instanceof File) ||
          value instanceof FileList
        ) {
          contentType = \\"multipart/form-data\\";
        }
      }); // TODO: send as urlEncoded or multipart by default
      // because of ease of use and reliability in browser API
      // for encoding the form?

      if (contentType !== \\"application/json\\") {
        body = formData;
      } else {
        // Json
        const json = {};
        Array.from(formPairs).forEach(({ value, key }) => {
          set(json, key, value);
        });
        body = JSON.stringify(json);
      }

      if (contentType && contentType !== \\"multipart/form-data\\") {
        if (
          /* Zapier doesn't allow content-type header to be sent from browsers */
          !(sendWithJs && this.action()?.includes(\\"zapier.com\\"))
        ) {
          headers[\\"content-type\\"] = contentType;
        }
      }

      const presubmitEvent = new CustomEvent(\\"presubmit\\", {
        detail: {
          body,
        },
      });

      if (this.formRef()?.nativeElement) {
        this.formRef()?.nativeElement.dispatchEvent(presubmitEvent);

        if (presubmitEvent.defaultPrevented) {
          return;
        }
      }

      this.formState.set(\\"sending\\");
      const formUrl = \`\${
        builder.env === \\"dev\\" ? \\"http://localhost:5000\\" : \\"https://builder.io\\"
      }/api/v1/form-submit?apiKey=\${builder.apiKey}&to=\${btoa(
        this.sendSubmissionsToEmail() || \\"\\"
      )}&name=\${encodeURIComponent(this.name() || \\"\\")}\`;
      fetch(
        this.sendSubmissionsTo() === \\"email\\" ? formUrl : this.action(),
        /* TODO: throw error if no action URL */
        {
          body,
          headers,
          method: this.method() || \\"post\\",
        }
      ).then(
        async (res) => {
          let body;
          const contentType = res.headers.get(\\"content-type\\");

          if (contentType && contentType.indexOf(\\"application/json\\") !== -1) {
            body = await res.json();
          } else {
            body = await res.text();
          }

          if (!res.ok && this.errorMessagePath()) {
            /* TODO: allow supplying an error formatter function */
            let message = get(body, this.errorMessagePath());

            if (message) {
              if (typeof message !== \\"string\\") {
                /* TODO: ideally convert json to yaml so it woul dbe like
            error: - email has been taken */
                message = JSON.stringify(message);
              }

              this.formErrorMessage.set(message);
            }
          }

          this.responseData.set(body);
          this.formState.set(res.ok ? \\"success\\" : \\"error\\");

          if (res.ok) {
            const submitSuccessEvent = new CustomEvent(\\"submit:success\\", {
              detail: {
                res,
                body,
              },
            });

            if (this.formRef()?.nativeElement) {
              this.formRef()?.nativeElement.dispatchEvent(submitSuccessEvent);

              if (submitSuccessEvent.defaultPrevented) {
                return;
              }
              /* TODO: option to turn this on/off? */

              if (this.resetFormOnSubmit() !== false) {
                this.formRef()?.nativeElement.reset();
              }
            }
            /* TODO: client side route event first that can be preventDefaulted */

            if (this.successUrl()) {
              if (this.formRef()?.nativeElement) {
                const event = new CustomEvent(\\"route\\", {
                  detail: {
                    url: this.successUrl(),
                  },
                });
                this.formRef()?.nativeElement.dispatchEvent(event);

                if (!event.defaultPrevented) {
                  location.href = this.successUrl();
                }
              } else {
                location.href = this.successUrl();
              }
            }
          }
        },
        (err) => {
          const submitErrorEvent = new CustomEvent(\\"submit:error\\", {
            detail: {
              error: err,
            },
          });

          if (this.formRef()?.nativeElement) {
            this.formRef()?.nativeElement.dispatchEvent(submitErrorEvent);

            if (submitErrorEvent.defaultPrevented) {
              return;
            }
          }

          this.responseData.set(err);
          this.formState.set(\\"error\\");
        }
      );
    }
  }
  trackByBlock0(index: number, block: any) {
    return block.id;
  }

  constructor() {}
}
"
`;

exports[`Angular signals > jsx > Javascript Test > Image 1`] = `
"import {
  Component,
  viewChild,
  ElementRef,
  input,
  effect,
  signal,
} from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

@Component({
  selector: \\"image\\",
  standalone: true,
  imports: [CommonModule],
  template: \`
    <div>
      <picture #pictureRef>
        @if(!useLazyLoading() || load()){
        <img
          [attr.alt]=\\"altText()\\"
          [attr.aria-role]=\\"altText() ? 'presentation' : undefined\\"
          [class]=\\"'builder-image' + (_class() ? ' ' + _class() : '') + ' img'\\"
          [attr.src]=\\"image()\\"
          (load)=\\"setLoaded()\\"
          [attr.srcset]=\\"srcset()\\"
          [attr.sizes]=\\"sizes()\\"
        />
        }
        <source [attr.srcset]=\\"srcset()\\" />
      </picture>
      <ng-content></ng-content>
    </div>
  \`,
  styles: \`:host { display: contents; }
        .img {
          opacity: 1;
          transition: opacity 0.2s ease-in-out;
          object-fit: cover;
          object-position: center;
        }
\`,
})
export class Image {
  lazy = input<any>();
  altText = input<any>();
  _class = input<any>();
  image = input<any>();
  srcset = input<any>();
  sizes = input<any>();

  pictureRef = viewChild<ElementRef>(\\"pictureRef\\");

  scrollListener = signal(null);
  imageLoaded = signal(false);
  load = signal(false);

  setLoaded() {
    this.imageLoaded.set(true);
  }
  useLazyLoading() {
    // TODO: Add more checks here, like testing for real web browsers
    return !!this.lazy() && this.isBrowser();
  }
  isBrowser() {
    return (
      typeof window !== \\"undefined\\" && window.navigator.product != \\"ReactNative\\"
    );
  }

  constructor() {}

  ngOnInit() {
    if (this.useLazyLoading()) {
      // throttled scroll capture listener
      const listener = () => {
        if (this.pictureRef()?.nativeElement) {
          const rect = this.pictureRef()?.nativeElement.getBoundingClientRect();
          const buffer = window.innerHeight / 2;

          if (rect.top < window.innerHeight + buffer) {
            this.load.set(true);
            this.scrollListener.set(null);
            window.removeEventListener(\\"scroll\\", listener);
          }
        }
      };

      this.scrollListener.set(listener);
      window.addEventListener(\\"scroll\\", listener, {
        capture: true,
        passive: true,
      });
      listener();
    }
  }

  ngOnDestroy() {
    if (this.scrollListener()) {
      window.removeEventListener(\\"scroll\\", this.scrollListener());
    }
  }
}
"
`;

exports[`Angular signals > jsx > Javascript Test > Image State 1`] = `
"import { Component, effect, signal } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

@Component({
  selector: \\"img-state-component\\",
  standalone: true,
  imports: [CommonModule],
  template: \`
    <div>
      @for (item of images();track itemIndex;let itemIndex = $index) {
      <ng-container>
        <img class=\\"custom-class\\" [attr.src]=\\"item\\" />
      </ng-container>
      }
    </div>
  \`,
  styles: \`:host { display: contents; }\`,
})
export class ImgStateComponent {
  canShow = signal(true);
  images = signal([\\"http://example.com/qwik.png\\"]);

  constructor() {}
}
"
`;

exports[`Angular signals > jsx > Javascript Test > Img 1`] = `
"import { Component, input, effect } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

import { Builder } from \\"@builder.io/sdk\\";

@Component({
  selector: \\"img-component\\",
  standalone: true,
  imports: [CommonModule],
  template: \`
    <img
      [ngStyle]=\\"{
          objectFit: backgroundSize() || 'cover',
          objectPosition: backgroundPosition() || 'center'
        }\\"
      [attr.alt]=\\"altText()\\"
      [attr.src]=\\"imgSrc()\\"
    />
  \`,
  styles: \`:host { display: contents; }\`,
})
export class ImgComponent {
  protected readonly Builder = Builder;

  backgroundSize = input<any>();
  backgroundPosition = input<any>();
  attributes = input<any>();
  imgSrc = input<any>();
  altText = input<any>();

  constructor() {}
}
"
`;

exports[`Angular signals > jsx > Javascript Test > Input 1`] = `
"import { Component, output, input, effect } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

import { Builder } from \\"@builder.io/sdk\\";

@Component({
  selector: \\"form-input-component\\",
  standalone: true,
  imports: [CommonModule],
  template: \`
    <input
      [attr.placeholder]=\\"placeholder()\\"
      [attr.type]=\\"type()\\"
      [attr.name]=\\"name()\\"
      [attr.value]=\\"value()\\"
      [attr.defaultValue]=\\"defaultValue()\\"
      [attr.required]=\\"required()\\"
      (change)=\\"change()?.($event.target.value)\\"
    />
  \`,
  styles: \`:host { display: contents; }\`,
})
export class FormInputComponent {
  protected readonly Builder = Builder;

  attributes = input<any>();
  defaultValue = input<any>();
  placeholder = input<any>();
  type = input<any>();
  name = input<any>();
  value = input<any>();
  required = input<any>();
  change = output();

  constructor() {}
}
"
`;

exports[`Angular signals > jsx > Javascript Test > InputParent 1`] = `
"import { Component, effect } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

import { FormInputComponent } from \\"./input.raw\\";

@Component({
  selector: \\"stepper\\",
  standalone: true,
  imports: [CommonModule, FormInputComponent],
  template: \`
    <form-input-component
      name=\\"kingzez\\"
      type=\\"text\\"
      (change)=\\"handleChange($event)\\"
    ></form-input-component>
  \`,
  styles: \`:host { display: contents; }\`,
})
export class Stepper {
  handleChange(value) {
    console.log(value);
  }

  constructor() {}
}
"
`;

exports[`Angular signals > jsx > Javascript Test > NestedStore 1`] = `
"import { Component, effect, signal } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

@Component({
  selector: \\"nested-store\\",
  standalone: true,
  imports: [CommonModule],
  template: \`
    <div [attr.id]=\\"_id()\\">
      Test

      <p [attr.id]=\\"_messageId()\\">Message</p>
    </div>
  \`,
  styles: \`:host { display: contents; }\`,
})
export class NestedStore {
  _id = signal(\\"abc\\");
  _messageId = signal(this._id() + \\"-message\\");

  constructor() {}
}
"
`;

exports[`Angular signals > jsx > Javascript Test > RawText 1`] = `
"import { Component, input, effect } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";
import { DomSanitizer } from \\"@angular/platform-browser\\";

@Component({
  selector: \\"raw-text\\",
  standalone: true,
  imports: [CommonModule],
  template: \`
    <span
      [class]=\\"attributes()?.class || attributes()?.className\\"
      [innerHTML]=\\"sanitizer.bypassSecurityTrustHtml(text() || '')\\"
    ></span>
  \`,
  styles: \`:host { display: contents; }\`,
})
export class RawText {
  attributes = input<any>();
  text = input<any>();

  constructor(protected sanitizer: DomSanitizer) {}
}
"
`;

exports[`Angular signals > jsx > Javascript Test > Section 1`] = `
"import { Component, input, effect } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

@Component({
  selector: \\"section-component\\",
  standalone: true,
  imports: [CommonModule],
  template: \`
    <section
      [ngStyle]=\\"maxWidth() && typeof maxWidth() === 'number' ? {
          maxWidth: maxWidth()
        } : undefined\\"
    >
      <ng-content></ng-content>
    </section>
  \`,
  styles: \`:host { display: contents; }\`,
})
export class SectionComponent {
  attributes = input<any>();
  maxWidth = input<any>();

  constructor() {}
}
"
`;

exports[`Angular signals > jsx > Javascript Test > Section 2`] = `
"import { Component, input, effect, signal } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

@Component({
  selector: \\"section-state-component\\",
  standalone: true,
  imports: [CommonModule],
  template: \`
    @if(max()){ @for (item of items();track i;let i = $index) {
    <section
      [ngStyle]=\\"{
          maxWidth: item + max()
        }\\"
    >
      <ng-content></ng-content>
    </section>
    } }
  \`,
  styles: \`:host { display: contents; }\`,
})
export class SectionStateComponent {
  attributes = input<any>();

  max = signal(42);
  items = signal([42]);

  constructor() {}
}
"
`;

exports[`Angular signals > jsx > Javascript Test > Select 1`] = `
"import { Component, input, effect } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

import { Builder } from \\"@builder.io/sdk\\";

@Component({
  selector: \\"select-component\\",
  standalone: true,
  imports: [CommonModule],
  template: \`
    <select
      [attr.value]=\\"value()\\"
      [attr.defaultValue]=\\"defaultValue()\\"
      [attr.name]=\\"name()\\"
    >
      @for (option of options();track index;let index = $index) {
      <option [attr.value]=\\"option.value\\" [attr.data-index]=\\"index\\">
        {{option.name || option.value}}
      </option>
      }
    </select>
  \`,
  styles: \`:host { display: contents; }\`,
})
export class SelectComponent {
  protected readonly Builder = Builder;

  attributes = input<any>();
  value = input<any>();
  defaultValue = input<any>();
  name = input<any>();
  options = input<any>();

  constructor() {}
}
"
`;

exports[`Angular signals > jsx > Javascript Test > SlotDefault 1`] = `
"import { Component, effect } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

@Component({
  selector: \\"slot-code\\",
  standalone: true,
  imports: [CommonModule],
  template: \`
    <div>
      <ng-content>
        <div class=\\"default-slot\\">Default content</div>
      </ng-content>
    </div>
  \`,
  styles: \`:host { display: contents; }\`,
})
export class SlotCode {
  constructor() {}
}
"
`;

exports[`Angular signals > jsx > Javascript Test > SlotHtml 1`] = `
"import { Component, effect } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

import { ContentSlotCode } from \\"./content-slot-jsx.raw\\";

@Component({
  selector: \\"slot-code\\",
  standalone: true,
  imports: [CommonModule, ContentSlotCode],
  template: \`
    <div>
      <content-slot-code><ng-content></ng-content></content-slot-code>
    </div>
  \`,
  styles: \`:host { display: contents; }\`,
})
export class SlotCode {
  constructor() {}
}
"
`;

exports[`Angular signals > jsx > Javascript Test > SlotJsx 1`] = `
"import { Component, effect } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

import { ContentSlotCode } from \\"./content-slot-jsx.raw\\";

@Component({
  selector: \\"slot-code\\",
  standalone: true,
  imports: [CommonModule, ContentSlotCode],
  template: \`
    <div>
      <content-slot-code [slotTesting]=\\"<div>Hello</div>\\"></content-slot-code>
    </div>
  \`,
  styles: \`:host { display: contents; }\`,
})
export class SlotCode {
  constructor() {}
}
"
`;

exports[`Angular signals > jsx > Javascript Test > SlotNamed 1`] = `
"import { Component, effect } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

@Component({
  selector: \\"slot-code\\",
  standalone: true,
  imports: [CommonModule],
  template: \`
    <div>
      <ng-content select=\\"[my-awesome-slot]\\"></ng-content>
      <ng-content select=\\"[top]\\"></ng-content>
      <ng-content select=\\"[left]\\">Default left</ng-content>
      <ng-content>Default Child</ng-content>
    </div>
  \`,
  styles: \`:host { display: contents; }\`,
})
export class SlotCode {
  constructor() {}
}
"
`;

exports[`Angular signals > jsx > Javascript Test > Stamped.io 1`] = `
"import { Component, input, effect, signal } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

import { kebabCase, snakeCase } from \\"lodash\\";

@Component({
  selector: \\"smile-reviews\\",
  standalone: true,
  imports: [CommonModule],
  template: \`
    <div [attr.data-user]=\\"name()\\">
      <button (click)=\\"showReviewPrompt.set(true)\\">Write a review</button>
      @if(showReviewPrompt() || 'asdf'){
      <input placeholder=\\"Email\\" />
      <input placeholder=\\"Title\\" class=\\"input\\" />
      <textarea
        placeholder=\\"How was your experience?\\"
        class=\\"textarea\\"
      ></textarea>
      <button
        class=\\"button\\"
        (click)=\\"{
          ev.preventDefault();
          showReviewPrompt.set(false);
        }\\"
      >
        Submit
      </button>
      } @for (review of reviews();track trackByReview0;let index = $index) {
      <div $name=\\"Review\\" class=\\"review\\">
        <img class=\\"img\\" [attr.src]=\\"review.avatar\\" />
        <div [class]=\\"showReviewPrompt() ? 'bg-primary' : 'bg-secondary'\\">
          <div>N: {{index}}</div>
          <div>{{review.author}}</div>
          <div>{{review.reviewMessage}}</div>
        </div>
      </div>
      }
    </div>
  \`,
  styles: \`:host { display: contents; }
        .input {
          display: block;
        }
        .textarea {
          display: block;
        }
        .button {
          display: block;
        }
        .review {
          margin: 10px;
          padding: 10px;
          background: white;
          display: flex;
          border-radius: 5px;
          box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
          -webkit-font-smoothing: antialiased;
        }
        .img {
          height: 30px;
          width: 30px;
          margin-right: 10px;
        }
\`,
})
export class SmileReviews {
  apiKey = input<any>();
  productId = input<any>();

  reviews = signal([]);
  name = signal(\\"test\\");
  showReviewPrompt = signal(false);

  kebabCaseValue() {
    return kebabCase(\\"testThat\\");
  }
  snakeCaseValue() {
    return snakeCase(\\"testThis\\");
  }
  trackByReview0(index: number, review: any) {
    return review.id;
  }

  constructor() {}

  ngOnInit() {
    fetch(
      \`https://stamped.io/api/widget/reviews?storeUrl=builder-io.myshopify.com&apiKey=\${
        this.apiKey() || \\"pubkey-8bbDq7W6w4sB3OWeM1HUy2s47702hM\\"
      }&productId=\${this.productId() || \\"2410511106127\\"}\`
    )
      .then((res) => res.json())
      .then((data) => {
        this.reviews.set(data.data);
      });
  }
}
"
`;

exports[`Angular signals > jsx > Javascript Test > StoreComment 1`] = `
"import { Component, effect, signal } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

@Component({
  selector: \\"string-literal-store\\",
  standalone: true,
  imports: [CommonModule],
  template: \`
    <ng-container>{{foo()}}</ng-container>
  \`,
  styles: \`:host { display: contents; }\`,
})
export class StringLiteralStore {
  foo = signal(true);

  bar() {}

  constructor() {}
}
"
`;

exports[`Angular signals > jsx > Javascript Test > StoreShadowVars 1`] = `
"import { Component, effect, signal } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

@Component({
  selector: \\"my-component\\",
  standalone: true,
  imports: [CommonModule],
  template: \`
    <ng-container>{{foo(errors())}}</ng-container>
  \`,
  styles: \`:host { display: contents; }\`,
})
export class MyComponent {
  errors = signal({});

  foo(errors) {
    return errors;
  }

  constructor() {}
}
"
`;

exports[`Angular signals > jsx > Javascript Test > StoreWithState 1`] = `
"import { Component, effect, signal } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

@Component({
  selector: \\"my-component\\",
  standalone: true,
  imports: [CommonModule],
  template: \`
    <ng-container>{{bar()}}</ng-container>
  \`,
  styles: \`:host { display: contents; }\`,
})
export class MyComponent {
  foo = signal(false);

  bar() {
    return this.foo();
  }

  constructor() {}
}
"
`;

exports[`Angular signals > jsx > Javascript Test > Submit 1`] = `
"import { Component, input, effect } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

@Component({
  selector: \\"submit-button\\",
  standalone: true,
  imports: [CommonModule],
  template: \`
    <button type=\\"submit\\">{{text()}}</button>
  \`,
  styles: \`:host { display: contents; }\`,
})
export class SubmitButton {
  attributes = input<any>();
  text = input<any>();

  constructor() {}
}
"
`;

exports[`Angular signals > jsx > Javascript Test > Text 1`] = `
"import { Component, input, effect, signal } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";
import { DomSanitizer } from \\"@angular/platform-browser\\";

import { Builder } from \\"@builder.io/sdk\\";

@Component({
  selector: \\"text\\",
  standalone: true,
  imports: [CommonModule],
  template: \`
    <div
      [attr.contentEditable]=\\"allowEditingText || undefined\\"
      [attr.data-name]=\\"{
          test: name() || 'any name'
        }\\"
      [innerHTML]=\\"sanitizer.bypassSecurityTrustHtml(text() || content() || name() || '<p class=&quot;text-lg&quot;>my name</p>')\\"
    ></div>
  \`,
  styles: \`:host { display: contents; }\`,
})
export class Text {
  text = input<any>();
  content = input<any>();

  name = signal(\\"Decadef20\\");

  constructor(protected sanitizer: DomSanitizer) {}
}
"
`;

exports[`Angular signals > jsx > Javascript Test > Textarea 1`] = `
"import { Component, input, effect } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

@Component({
  selector: \\"textarea\\",
  standalone: true,
  imports: [CommonModule],
  template: \`
    <textarea
      [attr.placeholder]=\\"placeholder()\\"
      [attr.name]=\\"name()\\"
      [attr.value]=\\"value()\\"
      [attr.defaultValue]=\\"defaultValue()\\"
    ></textarea>
  \`,
  styles: \`:host { display: contents; }\`,
})
export class Textarea {
  attributes = input<any>();
  placeholder = input<any>();
  name = input<any>();
  value = input<any>();
  defaultValue = input<any>();

  constructor() {}
}
"
`;

exports[`Angular signals > jsx > Javascript Test > UseValueAndFnFromStore 1`] = `
"import { Component, output, effect, signal } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

@Component({
  selector: \\"use-value-and-fn-from-store\\",
  standalone: true,
  imports: [CommonModule],
  template: \`
    <div>Test</div>
  \`,
  styles: \`:host { display: contents; }\`,
})
export class UseValueAndFnFromStore {
  change = output();

  _id = signal(\\"abc\\");
  _active = signal(false);

  _do(id) {
    this._active.set(!!id);

    if (this.change) {
      this.change.emit(this._active());
    }
  }

  constructor() {
    effect(
      () => {
        if (this._do) {
          this._do(this._id());
        }
      },
      {
        allowSignalWrites: true, // Enable writing to signals inside effects
      }
    );
  }
}
"
`;

exports[`Angular signals > jsx > Javascript Test > Video 1`] = `
"import { Component, input, effect, computed } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

@Component({
  selector: \\"video\\",
  standalone: true,
  imports: [CommonModule],
  template: \`
    <video
      preload=\\"none\\"
      [ngStyle]=\\"objSpread_style_yxyiqh()\\"
      [attr.poster]=\\"posterImage()\\"
      [attr.autoplay]=\\"autoPlay()\\"
      [attr.muted]=\\"muted()\\"
      [attr.controls]=\\"controls()\\"
      [attr.loop]=\\"loop()\\"
    ></video>
  \`,
  styles: \`:host { display: contents; }\`,
})
export class Video {
  attributes = input<any>();
  fit = input<any>();
  position = input<any>();
  video = input<any>();
  posterImage = input<any>();
  autoPlay = input<any>();
  muted = input<any>();
  controls = input<any>();
  loop = input<any>();

  objSpread_style_yxyiqh = computed(() => {
    return {
      width: \\"100%\\",
      height: \\"100%\\",
      ...this.attributes()?.style,
      objectFit: this.fit(),
      objectPosition: this.position(),
      // Hack to get object fit to work as expected and
      // not have the video overflow
      borderRadius: 1,
    };
  });

  constructor() {}
}
"
`;

exports[`Angular signals > jsx > Javascript Test > allSpread 1`] = `
"import { Component, input, effect, signal } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

@Component({
  selector: \\"my-component\\",
  standalone: true,
  imports: [CommonModule],
  template: \`
    <div>
      Hello! I can run natively in React, Vue, Svelte, Qwik, and many more
      frameworks!
    </div>
  \`,
  styles: \`:host { display: contents; }\`,
})
export class MyComponent {
  attributes = input<any>();
  accessHere = input<any>();

  attrsUsingUseState = signal({
    hello: \\"world\\",
  });
  properties = signal({
    style: \\"color: blue\\",
    onClick: () => console.log(\\"pressed\\"),
  });
  specifics = signal({
    someSpecificState: \\"specific\\",
  });

  constructor() {}
}
"
`;

exports[`Angular signals > jsx > Javascript Test > arrowFunctionInUseStore 1`] = `
"import { Component, effect, signal } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

@Component({
  selector: \\"my-component\\",
  standalone: true,
  imports: [CommonModule],
  template: \`
    <div>Hello {{name()}}</div>
  \`,
  styles: \`:host { display: contents; }\`,
})
export class MyComponent {
  name = signal(\\"steve\\");

  setName(value) {
    this.name.set(value);
  }
  updateNameWithArrowFn(value) {
    this.name.set(value);
  }

  constructor() {}
}
"
`;

exports[`Angular signals > jsx > Javascript Test > basicForFragment 1`] = `
"import { Component, effect, signal } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

@Component({
  selector: \\"basic-for-fragment\\",
  standalone: true,
  imports: [CommonModule],
  template: \`
    <div>
      @for (option of ['a', 'b', 'c'];track trackByOption0;let i = $index) {
      <ng-container>
        <div>{{option}}</div>
      </ng-container>
      } @for (option of ['a', 'b', 'c'];track trackByOption1;let i = $index) {
      <ng-container>
        <div>{{option}}</div>
      </ng-container>
      }

      <select>
        @for (option of ['d', 'e', 'f'];track trackByOption2;let i = $index) {
        <option [attr.value]=\\"option\\">{{option}}</option>
        }
      </select>
    </div>
  \`,
  styles: \`:host { display: contents; }\`,
})
export class BasicForFragment {
  id = signal(\\"xyz\\");

  trackByOption0(_: number, option: any) {
    return \`key-\${option}\`;
  }
  trackByOption1(_: number, option: any) {
    return \`\${this.id()}-\${option}\`;
  }
  trackByOption2(_: number, option: any) {
    return \`\${this.id()}-\${option}\`;
  }

  constructor() {}
}
"
`;

exports[`Angular signals > jsx > Javascript Test > basicForNoTagReference 1`] = `
"import {
  Component,
  viewChild,
  ViewContainerRef,
  TemplateRef,
  input,
  effect,
  signal,
  computed,
} from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

@Component({
  selector: \\"my-basic-for-no-tag-ref-component\\",
  standalone: true,
  imports: [CommonModule],
  template: \`
    <ng-template #iconTemplate></ng-template>
    <ng-container
      *ngComponentOutlet=\\"
              TagNameGetter();
              content: myContent();
              \\"
    ></ng-container>
  \`,
  styles: \`:host { display: contents; }\`,
})
export class MyBasicForNoTagRefComponent {
  // Signal to store embedded views for dynamic components
  myContent = signal<any[]>([]);
  tagnamegetterTemplateRef = viewChild<TemplateRef<any>>(
    \\"tagnamegetterTemplate\\"
  );
  tagTemplateRef = viewChild<TemplateRef<any>>(\\"tagTemplate\\");
  tagnameTemplateRef = viewChild<TemplateRef<any>>(\\"tagnameTemplate\\");
  iconTemplateRef = viewChild<TemplateRef<any>>(\\"iconTemplate\\");

  actions = input<any>();

  name = signal(\\"VincentW\\");
  TagName = signal(\\"div\\");
  tag = signal(\\"span\\");

  TagNameGetter = computed(() => {
    return \\"span\\";
  });

  constructor(private viewContainer: ViewContainerRef) {}

  ngOnInit() {
    this.myContent.set([
      this.viewContainer.createEmbeddedView(this.tagnamegetterTemplateRef())
        .rootNodes,
      this.viewContainer.createEmbeddedView(this.tagTemplateRef()).rootNodes,
      this.viewContainer.createEmbeddedView(this.tagnameTemplateRef())
        .rootNodes,
      this.viewContainer.createEmbeddedView(this.iconTemplateRef()).rootNodes,
    ]);
  }
}
"
`;

exports[`Angular signals > jsx > Javascript Test > basicForwardRef 1`] = `
"import { Component, viewChild, ElementRef, input, effect, signal } from '@angular/core';
import { CommonModule } from '@angular/common';












@Component({
  selector: 'my-basic-forward-ref-component',standalone: true,imports: [CommonModule],template: \`<div>
          <input
            class=\\"input\\"
            #inputRef()
            [attr.value]=\\"name()\\"
            (change)=\\"name.set($event.target.value)\\"
          />
        </div>
\`,styles: \`:host { display: contents; }
        .input {
          color: red;
        }
\`
})
export class MyBasicForwardRefComponent {



  inputRef = input<any>()


  props.inputRef = viewChild<ElementRef>(\\"props.inputRef\\")

   name= signal('PatrickJS')




  constructor() {

  }









}"
`;

exports[`Angular signals > jsx > Javascript Test > basicForwardRefMetadata 1`] = `
"
          /**
          useMetadata:
          {\\"forwardRef\\":\\"inputRef\\"}
          */

          import { Component, viewChild, ElementRef, input, effect, signal } from '@angular/core';
import { CommonModule } from '@angular/common';












@Component({
  selector: 'my-basic-forward-ref-component',standalone: true,imports: [CommonModule],template: \`<div>
          <input
            class=\\"input\\"
            #inputRef()
            [attr.value]=\\"name()\\"
            (change)=\\"name.set($event.target.value)\\"
          />
        </div>
\`,styles: \`:host { display: contents; }
        .input {
          color: red;
        }
\`
})
export class MyBasicForwardRefComponent {



  inputRef = input<any>()


  props.inputRef = viewChild<ElementRef>(\\"props.inputRef\\")

   name= signal('PatrickJS')




  constructor() {

  }









}"
`;

exports[`Angular signals > jsx > Javascript Test > basicOnUpdateReturn 1`] = `
"import { Component, effect, signal } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

@Component({
  selector: \\"my-basic-on-update-return-component\\",
  standalone: true,
  imports: [CommonModule],
  template: \`
    <div>Hello! {{name()}}</div>
  \`,
  styles: \`:host { display: contents; }\`,
})
export class MyBasicOnUpdateReturnComponent {
  name = signal(\\"PatrickJS\\");

  constructor() {
    effect(
      () => {
        // --- Mitosis: Workaround to make sure the effect() is triggered ---
        this.name();
        // ---

        const controller = new AbortController();
        const signal = controller.signal;
        fetch(\\"https://patrickjs.com/api/resource.json\\", {
          signal,
        })
          .then((response) => response.json())
          .then((data) => {
            this.name.set(data.name);
          });
        return () => {
          if (!signal.aborted) {
            controller.abort();
          }
        };
      },
      {
        allowSignalWrites: true, // Enable writing to signals inside effects
      }
    );
  }
}
"
`;

exports[`Angular signals > jsx > Javascript Test > basicRefAttributePassing 1`] = `
"/**
          useMetadata:
          {\\"attributePassing\\":{\\"enabled\\":true}}
          */

import { Component, viewChild, ElementRef, effect } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

@Component({
  selector: \\"basic-ref-attribute-passing-component\\",
  standalone: true,
  imports: [CommonModule],
  template: \`
    <button #buttonRef #_root>Attribute Passing</button>
  \`,
  styles: \`:host { display: contents; }\`,
})
export class BasicRefAttributePassingComponent {
  buttonRef = viewChild<ElementRef>(\\"buttonRef\\");
  _root = viewChild<ElementRef>(\\"_root\\");

  constructor() {}

  /**
   * Passes \`aria-*\`, \`data-*\` & \`class\` attributes to correct child. Used in angular and stencil.
   * @param element  the ref for the component
   * @param customElementSelector  the custom element like \`my-component\`
   */
  private enableAttributePassing(
    element: HTMLElement | null,
    customElementSelector: string
  ) {
    const parent = element?.closest(customElementSelector);
    if (element && parent) {
      const attributes = parent.attributes;
      for (let i = 0; i < attributes.length; i++) {
        const attr = attributes.item(i);
        if (
          attr &&
          (attr.name.startsWith(\\"data-\\") || attr.name.startsWith(\\"aria-\\"))
        ) {
          element.setAttribute(attr.name, attr.value);
          parent.removeAttribute(attr.name);
        }
        if (attr && attr.name === \\"class\\") {
          const isWebComponent = attr.value.includes(\\"hydrated\\");
          const value = attr.value.replace(\\"hydrated\\", \\"\\").trim();
          const currentClass = element.getAttribute(\\"class\\");
          element.setAttribute(
            attr.name,
            \`\${currentClass ? \`\${currentClass} \` : \\"\\"}\${value}\`
          );
          if (isWebComponent) {
            // Stencil is using this class for lazy loading component
            parent.setAttribute(\\"class\\", \\"hydrated\\");
          } else {
            parent.removeAttribute(attr.name);
          }
        }
      }
    }
  }

  ngAfterViewInit() {
    const element: HTMLElement | null = this._root()?.nativeElement;
    this.enableAttributePassing(
      element,
      \\"basic-ref-attribute-passing-component\\"
    );
  }
}
"
`;

exports[`Angular signals > jsx > Javascript Test > basicRefAttributePassingCustomRef 1`] = `
"/**
          useMetadata:
          {\\"attributePassing\\":{\\"enabled\\":true,\\"customRef\\":\\"buttonRef\\"}}
          */

import { Component, viewChild, ElementRef, effect } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

@Component({
  selector: \\"basic-ref-attribute-passing-custom-ref-component\\",
  standalone: true,
  imports: [CommonModule],
  template: \`
    <div><button #buttonRef>Attribute Passing</button></div>
  \`,
  styles: \`:host { display: contents; }\`,
})
export class BasicRefAttributePassingCustomRefComponent {
  buttonRef = viewChild<ElementRef>(\\"buttonRef\\");

  constructor() {}

  /**
   * Passes \`aria-*\`, \`data-*\` & \`class\` attributes to correct child. Used in angular and stencil.
   * @param element  the ref for the component
   * @param customElementSelector  the custom element like \`my-component\`
   */
  private enableAttributePassing(
    element: HTMLElement | null,
    customElementSelector: string
  ) {
    const parent = element?.closest(customElementSelector);
    if (element && parent) {
      const attributes = parent.attributes;
      for (let i = 0; i < attributes.length; i++) {
        const attr = attributes.item(i);
        if (
          attr &&
          (attr.name.startsWith(\\"data-\\") || attr.name.startsWith(\\"aria-\\"))
        ) {
          element.setAttribute(attr.name, attr.value);
          parent.removeAttribute(attr.name);
        }
        if (attr && attr.name === \\"class\\") {
          const isWebComponent = attr.value.includes(\\"hydrated\\");
          const value = attr.value.replace(\\"hydrated\\", \\"\\").trim();
          const currentClass = element.getAttribute(\\"class\\");
          element.setAttribute(
            attr.name,
            \`\${currentClass ? \`\${currentClass} \` : \\"\\"}\${value}\`
          );
          if (isWebComponent) {
            // Stencil is using this class for lazy loading component
            parent.setAttribute(\\"class\\", \\"hydrated\\");
          } else {
            parent.removeAttribute(attr.name);
          }
        }
      }
    }
  }

  ngAfterViewInit() {
    const element: HTMLElement | null = this.buttonRef()?.nativeElement;
    this.enableAttributePassing(
      element,
      \\"basic-ref-attribute-passing-custom-ref-component\\"
    );
  }
}
"
`;

exports[`Angular signals > jsx > Javascript Test > changeDetection 1`] = `
"/**
          useMetadata:
          {\\"angular\\":{\\"changeDetection\\":\\"OnPush\\"}}
          */

import {
  Component,
  input,
  effect,
  ChangeDetectionStrategy,
} from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

@Component({
  selector: \\"my-component\\",
  standalone: true,
  imports: [CommonModule],
  template: \`
    <div>{{count()}}</div>
  \`,
  changeDetection: ChangeDetectionStrategy.OnPush,
  styles: \`:host { display: contents; }\`,
})
export class MyComponent {
  count = input<any>();

  constructor() {}
}
"
`;

exports[`Angular signals > jsx > Javascript Test > class + ClassName + css 1`] = `
"import { Component, effect } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

import { MyComp } from \\"./my-component.lite\\";

@Component({
  selector: \\"my-basic-component\\",
  standalone: true,
  imports: [CommonModule, MyComp],
  template: \`
    <div>
      <my-comp class=\\"test\\" className=\\"test2\\">
        Hello! I can run in React, Vue, Solid, or Liquid!
      </my-comp>
      <div class=\\"test2 test div\\">
        Hello! I can run in React, Vue, Solid, or Liquid!
      </div>
    </div>
  \`,
  styles: \`:host { display: contents; }
        .div {
          padding: 10px;
        }
\`,
})
export class MyBasicComponent {
  constructor() {}
}
"
`;

exports[`Angular signals > jsx > Javascript Test > class + css 1`] = `
"import { Component, effect } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

@Component({
  selector: \\"my-basic-component\\",
  standalone: true,
  imports: [CommonModule],
  template: \`
    <div class=\\"test div\\">
      Hello! I can run in React, Vue, Solid, or Liquid!
    </div>
  \`,
  styles: \`:host { display: contents; }
        .div {
          padding: 10px;
        }
\`,
})
export class MyBasicComponent {
  constructor() {}
}
"
`;

exports[`Angular signals > jsx > Javascript Test > className + css 1`] = `
"import { Component, effect } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

@Component({
  selector: \\"my-basic-component\\",
  standalone: true,
  imports: [CommonModule],
  template: \`
    <div class=\\"test div\\">
      Hello! I can run in React, Vue, Solid, or Liquid!
    </div>
  \`,
  styles: \`:host { display: contents; }
        .div {
          padding: 10px;
        }
\`,
})
export class MyBasicComponent {
  constructor() {}
}
"
`;

exports[`Angular signals > jsx > Javascript Test > className 1`] = `
"import { Component, effect, signal } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

@Component({
  selector: \\"class-name-code\\",
  standalone: true,
  imports: [CommonModule],
  template: \`
    <div>
      <div class=\\"no binding\\">Without Binding</div>
      <div [class]=\\"bindings()\\">With binding</div>
    </div>
  \`,
  styles: \`:host { display: contents; }\`,
})
export class ClassNameCode {
  bindings = signal(\\"a binding\\");

  constructor() {}
}
"
`;

exports[`Angular signals > jsx > Javascript Test > classState 1`] = `
"import { Component, effect, signal } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

@Component({
  selector: \\"my-basic-component\\",
  standalone: true,
  imports: [CommonModule],
  template: \`
    <div [class]=\\"classState() + ' div'\\" [ngStyle]=\\"styleState()\\">
      Hello! I can run in React, Vue, Solid, or Liquid!
    </div>
  \`,
  styles: \`:host { display: contents; }
        .div {
          padding: 10px;
        }
\`,
})
export class MyBasicComponent {
  classState = signal(\\"testClassName\\");
  styleState = signal({
    color: \\"red\\",
  });

  constructor() {}
}
"
`;

exports[`Angular signals > jsx > Javascript Test > classnameProps 1`] = `
"/**
          useMetadata:
          {\\"stencil\\":{\\"propOptions\\":{\\"className\\":{\\"attribute\\":\\"classname\\",\\"mutable\\":false,\\"reflect\\":false}}}}
          */

import { Component, input, effect } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

@Component({
  selector: \\"my-basic-component\\",
  standalone: true,
  imports: [CommonModule],
  template: \`
    <div [class]=\\"className()\\">
      <ng-content></ng-content>
      {{type()}} Hello! I can run in React, Vue, Solid, or Liquid!
    </div>
  \`,
  styles: \`:host { display: contents; }\`,
})
export class MyBasicComponent {
  className = input<any>();
  type = input<any>();

  constructor() {}
}
"
`;

exports[`Angular signals > jsx > Javascript Test > complexMeta 1`] = `
"/**
          useMetadata:
          {\\"x\\":\\"y\\",\\"asdf\\":{\\"stringValue\\":\\"d\\",\\"booleanValue\\":true,\\"numberValue\\":1,\\"innerObject\\":{\\"stringValue\\":\\"inner\\",\\"numberValue\\":2,\\"booleanValue\\":false},\\"spreadStringValue\\":\\"f\\"}}
          */

import { Component, effect } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

@Component({
  selector: \\"complex-meta-raw\\",
  standalone: true,
  imports: [CommonModule],
  template: \`
    <div></div>
  \`,
  styles: \`:host { display: contents; }\`,
})
export class ComplexMetaRaw {
  constructor() {}
}
"
`;

exports[`Angular signals > jsx > Javascript Test > componentWithContext 1`] = `
"import { Component, input, effect } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

import Context1 from \\"@dummy/1\\";
import Context2 from \\"@dummy/2\\";

@Component({
  selector: \\"component-with-context\\",
  standalone: true,
  imports: [CommonModule],
  template: \`
    <ng-container>
      <ng-container>{{foo.value}}</ng-container>
    </ng-container>
  \`,
  styles: \`:host { display: contents; }\`,
})
export class ComponentWithContext {
  content = input<any>();

  constructor(public foo: Context1) {}
}
"
`;

exports[`Angular signals > jsx > Javascript Test > componentWithContextMultiRoot 1`] = `
"import { Component, input, effect } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

import Context1 from \\"@dummy/1\\";
import Context2 from \\"@dummy/2\\";

@Component({
  selector: \\"component-with-context\\",
  standalone: true,
  imports: [CommonModule],
  template: \`
    <ng-container>
      <ng-container>{{foo.value}}</ng-container>
      <div>other</div>
    </ng-container>
  \`,
  styles: \`:host { display: contents; }\`,
})
export class ComponentWithContext {
  content = input<any>();

  constructor(public foo: Context1) {}
}
"
`;

exports[`Angular signals > jsx > Javascript Test > contentState 1`] = `
"import { Component, input, effect } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

import BuilderContext from \\"@dummy/context.js\\";

@Component({
  selector: \\"render-content\\",
  standalone: true,
  imports: [CommonModule],
  template: \`
    <div>setting context</div>
  \`,
  styles: \`:host { display: contents; }\`,
})
export class RenderContent {
  content = input<any>();
  customComponents = input<any>();

  constructor() {}
}
"
`;

exports[`Angular signals > jsx > Javascript Test > customSelector 1`] = `
"/**
          useMetadata:
          {\\"angular\\":{\\"selector\\":\\"not-my-component\\"}}
          */

import { Component, effect } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

@Component({
  selector: \\"my-component\\",
  standalone: true,
  imports: [CommonModule],
  template: \`
    <span>My selector shouldn't be my-component!</span>
  \`,
  styles: \`:host { display: contents; }\`,
})
export class MyComponent {
  constructor() {}
}
"
`;

exports[`Angular signals > jsx > Javascript Test > defaultProps 1`] = `
"import { Component, output, input, effect } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

const defaultProps: any = {
  text: \\"default text\\",
  link: \\"https://builder.io/\\",
  openLinkInNewTab: false,
  onClick: () => {
    console.log(\\"hi\\");
  },
};

@Component({
  selector: \\"button\\",
  standalone: true,
  imports: [CommonModule],
  template: \`
    <div>
      @if(link()){
      <a
        [attr.href]=\\"link()\\"
        [attr.target]=\\"openLinkInNewTab() ? '_blank' : undefined\\"
      >
        {{text()}}
      </a>
      } @if(!link()){
      <button type=\\"button\\" (click)=\\"click()\\">{{buttonText()}}</button>
      }
    </div>
  \`,
  styles: \`:host { display: contents; }\`,
})
export class Button {
  link = input<any>(defaultProps[\\"link\\"]);
  attributes = input<any>();
  openLinkInNewTab = input<any>(defaultProps[\\"openLinkInNewTab\\"]);
  text = input<any>(defaultProps[\\"text\\"]);
  buttonText = input<any>();
  click = output();

  constructor() {}
}
"
`;

exports[`Angular signals > jsx > Javascript Test > defaultPropsOutsideComponent 1`] = `
"import { Component, output, input, effect } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

const defaultProps: any = {
  text: \\"default text\\",
  link: \\"https://builder.io/\\",
  openLinkInNewTab: false,
  onClick: () => {},
};

@Component({
  selector: \\"button\\",
  standalone: true,
  imports: [CommonModule],
  template: \`
    <div>
      @if(link()){
      <a
        [attr.href]=\\"link()\\"
        [attr.target]=\\"openLinkInNewTab() ? '_blank' : undefined\\"
      >
        {{text()}}
      </a>
      } @if(!link()){
      <button type=\\"button\\" (click)=\\"click($event)\\">{{text()}}</button>
      }
    </div>
  \`,
  styles: \`:host { display: contents; }\`,
})
export class Button {
  link = input<any>(defaultProps[\\"link\\"]);
  attributes = input<any>();
  openLinkInNewTab = input<any>(defaultProps[\\"openLinkInNewTab\\"]);
  text = input<any>(defaultProps[\\"text\\"]);
  click = output();

  constructor() {}
}
"
`;

exports[`Angular signals > jsx > Javascript Test > defaultValsWithTypes 1`] = `
"import { Component, input, effect } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

const DEFAULT_VALUES = {
  name: \\"Sami\\",
};

@Component({
  selector: \\"component-with-types\\",
  standalone: true,
  imports: [CommonModule],
  template: \`
    <div>Hello {{name() || DEFAULT_VALUES.name}}</div>
  \`,
  styles: \`:host { display: contents; }\`,
})
export class ComponentWithTypes {
  protected readonly DEFAULT_VALUES = DEFAULT_VALUES;

  name = input<any>();

  constructor() {}
}
"
`;

exports[`Angular signals > jsx > Javascript Test > dynamicComponent 1`] = `
"import { Component, input, effect, signal, computed } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

@Component({
  selector: \\"my-component\\",
  standalone: true,
  imports: [CommonModule],
  template: \`
    <ng-container
      *ngComponentOutlet=\\"
              obj().Component;
        inputs: dynamicProps_37i2pk();
              content: myContent();
              \\"
    ></ng-container>
  \`,
  styles: \`:host { display: contents; }\`,
})
export class MyComponent {
  attributes = input<any>();
  something = input<any>();

  obj = signal({
    name: \\"foo\\",
    Component: FooComponent,
  });

  dynamicProps_37i2pk = computed(() => {
    return {
      hello: \\"world\\",
      onClick: this.onClick.bind(this),
      ...this.attributes(),
      ...this.something(),
    };
  });
  onClick() {
    console.log(\\"hello\\");
  }

  constructor() {}
}
"
`;

exports[`Angular signals > jsx > Javascript Test > dynamicComponentWithEventArg 1`] = `
"import {
  Component,
  viewChild,
  ViewContainerRef,
  TemplateRef,
  input,
  effect,
  signal,
  computed,
} from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

@Component({
  selector: \\"my-component\\",
  standalone: true,
  imports: [CommonModule],
  template: \`
    <ng-template #componentTemplate>hello</ng-template>
    <ng-container
      *ngComponentOutlet=\\"
              Component();
        inputs: dynamicProps_37i2pk();
              content: myContent();
              \\"
    ></ng-container>
  \`,
  styles: \`:host { display: contents; }\`,
})
export class MyComponent {
  // Signal to store embedded views for dynamic components
  myContent = signal<any[]>([]);
  componentTemplateRef = viewChild<TemplateRef<any>>(\\"componentTemplate\\");

  attributes = input<any>();
  something = input<any>();

  Component = signal(HelloComponent);

  dynamicProps_37i2pk = computed(() => {
    return {
      hello: \\"world\\",
      onClick: this.onClick.bind(this),
      ...this.attributes(),
      ...this.something(),
    };
  });
  onClick(event) {
    console.log(\\"hello\\", event);
  }

  constructor(private viewContainer: ViewContainerRef) {}

  ngOnInit() {
    this.myContent.set([
      this.viewContainer.createEmbeddedView(this.componentTemplateRef())
        .rootNodes,
    ]);
  }
}
"
`;

exports[`Angular signals > jsx > Javascript Test > eventInputAndChange 1`] = `
"import { Component, effect, signal } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

@Component({
  selector: \\"event-input-and-change\\",
  standalone: true,
  imports: [CommonModule],
  template: \`
    <div>
      <input
        class=\\"input\\"
        [attr.value]=\\"name()\\"
        (input)=\\"name.set($event.target.value)\\"
        (change)=\\"name.set($event.target.value)\\"
      />

      Hello! I can run in React, Vue, Solid, or Liquid!
    </div>
  \`,
  styles: \`:host { display: contents; }
        .input {
          color: red;
        }
\`,
})
export class EventInputAndChange {
  name = signal(\\"Steve\\");

  constructor() {}
}
"
`;

exports[`Angular signals > jsx > Javascript Test > eventProps 1`] = `
"import { Component, output, effect } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

@Component({
  selector: \\"event-props-component\\",
  standalone: true,
  imports: [CommonModule],
  template: \`
    <button (click)=\\"handleClick()\\">Test</button>
  \`,
  styles: \`:host { display: contents; }\`,
})
export class EventPropsComponent {
  getVoid = output();
  enter = output();
  pass = output();

  handleClick() {
    if (this.getVoid) {
      this.getVoid.emit();
    }

    if (this.enter) {
      console.log(this.enter.emit());
    }

    if (this.pass) {
      this.pass.emit(\\"test\\");
    }
  }

  constructor() {}
}
"
`;

exports[`Angular signals > jsx > Javascript Test > expressionState 1`] = `
"import { Component, input, effect, signal } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

@Component({
  selector: \\"my-component\\",
  standalone: true,
  imports: [CommonModule],
  template: \`
    <div>{{refToUse()}}</div>
  \`,
  styles: \`:host { display: contents; }\`,
})
export class MyComponent {
  componentRef = input<any>();

  refToUse = signal(
    !(this.componentRef() instanceof Function) ? this.componentRef() : null
  );

  constructor() {}
}
"
`;

exports[`Angular signals > jsx > Javascript Test > figmaMeta 1`] = `
"/**
          useMetadata:
          {\\"figma\\":{\\"name\\":\\"def-button-beta-outlined\\",\\"url\\":\\"https://www.figma.com/xxx\\",\\"props\\":{\\"iconSmall\\":{\\"type\\":\\"instance\\",\\"key\\":\\"📍 Icon Small\\"},\\"iconMedium\\":{\\"type\\":\\"instance\\",\\"key\\":\\"📍 Icon Medium\\"},\\"label\\":{\\"type\\":\\"string\\",\\"key\\":\\"✏️ Label\\"},\\"icon\\":{\\"type\\":\\"boolean\\",\\"key\\":\\"👁️ Icon\\",\\"value\\":{\\"false\\":false,\\"true\\":\\"placeholder\\"}},\\"interactiveState\\":{\\"type\\":\\"enum\\",\\"key\\":\\"Interactive State\\",\\"value\\":{\\"(Def) Enabled\\":false,\\"Hovered\\":false,\\"Pressed\\":false,\\"Focused\\":false,\\"Disabled\\":\\"true\\"}},\\"size\\":{\\"type\\":\\"enum\\",\\"key\\":\\"Size\\",\\"value\\":{\\"(Def) Medium\\":false,\\"Small\\":\\"small\\"}},\\"width\\":{\\"type\\":\\"enum\\",\\"key\\":\\"Width\\",\\"value\\":{\\"(Def) Auto Width\\":false,\\"Full Width\\":\\"full\\"}}}}}
          */

import { Component, input, effect } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

@Component({
  selector: \\"figma-button\\",
  standalone: true,
  imports: [CommonModule],
  template: \`
    <button
      [attr.data-icon]=\\"icon()\\"
      [attr.data-disabled]=\\"interactiveState()\\"
      [attr.data-width]=\\"width()\\"
      [attr.data-size]=\\"size()\\"
    >
      {{label()}}
    </button>
  \`,
  styles: \`:host { display: contents; }\`,
})
export class FigmaButton {
  icon = input<any>();
  interactiveState = input<any>();
  width = input<any>();
  size = input<any>();
  label = input<any>();

  constructor() {}
}
"
`;

exports[`Angular signals > jsx > Javascript Test > functionProps 1`] = `
"import { Component, effect } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

@Component({
  selector: \\"my-basic-component\\",
  standalone: true,
  imports: [CommonModule],
  template: \`
    <p
      [attr.f]=\\"() => x\\"
      [attr.f1]=\\"x => x\\"
      [attr.f2]=\\"x => {}\\"
      [attr.f3]=\\"function () {
          return x;
        }\\"
      [attr.f4]=\\"function (x) {
          return x;
        }\\"
      [attr.f5]=\\"function (x) {
          return;
        }\\"
      [attr.f6]=\\"function () {
          return;
        }\\"
      [attr.f7]=\\"(a, b, c) => a + b + c\\"
    ></p>
  \`,
  styles: \`:host { display: contents; }\`,
})
export class MyBasicComponent {
  constructor() {}
}
"
`;

exports[`Angular signals > jsx > Javascript Test > getterState 1`] = `
"import { Component, input, effect, computed } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

@Component({
  selector: \\"button\\",
  standalone: true,
  imports: [CommonModule],
  template: \`
    <div>
      <p>{{foo2()}}</p>
      <p>{{bar()}}</p>
      <p>{{baz(1)}}</p>
    </div>
  \`,
  styles: \`:host { display: contents; }\`,
})
export class Button {
  foo = input<any>();

  foo2 = computed(() => {
    return this.foo() + \\"foo\\";
  });
  bar = computed(() => {
    return \\"bar\\";
  });
  baz(i) {
    return i + this.foo2().length;
  }

  constructor() {}
}
"
`;

exports[`Angular signals > jsx > Javascript Test > import types 1`] = `
"import { Component, input, effect } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

import { RenderBlock } from \\"./builder-render-block.raw\\";

@Component({
  selector: \\"render-content\\",
  standalone: true,
  imports: [CommonModule, RenderBlock],
  template: \`
    <render-block></render-block>
  \`,
  styles: \`:host { display: contents; }\`,
})
export class RenderContent {
  renderContentProps = input<any>();

  getRenderContentProps(block, index) {
    return {
      block: block,
      index: index,
    };
  }

  constructor() {}
}
"
`;

exports[`Angular signals > jsx > Javascript Test > importRaw 1`] = `
"import { Component, effect } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

@Component({
  selector: \\"my-import-component\\",
  standalone: true,
  imports: [CommonModule],
  template: \`
    <div>Testing which imports get excluded!</div>
  \`,
  styles: \`:host { display: contents; }\`,
})
export class MyImportComponent {
  constructor() {}
}
"
`;

exports[`Angular signals > jsx > Javascript Test > layerName 1`] = `
"import { Component, effect } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

@Component({
  selector: \\"my-layer-name-component\\",
  standalone: true,
  imports: [CommonModule],
  template: \`
    <section>
      <div $name=\\"🌟layer-name\\" class=\\"layer-name\\">
        Hello! I can run in React, Vue, Solid, or Liquid!
      </div>
    </section>
  \`,
  styles: \`:host { display: contents; }
        .layer-name {
          padding: 10px;
        }
\`,
})
export class MyLayerNameComponent {
  constructor() {}
}
"
`;

exports[`Angular signals > jsx > Javascript Test > multipleOnUpdate 1`] = `
"import { Component, effect } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

@Component({
  selector: \\"multiple-on-update\\",
  standalone: true,
  imports: [CommonModule],
  template: \`
    <div></div>
  \`,
  styles: \`:host { display: contents; }\`,
})
export class MultipleOnUpdate {
  constructor() {
    effect(
      () => {
        console.log(\\"Runs on every update/rerender\\");
      },
      {
        allowSignalWrites: true, // Enable writing to signals inside effects
      }
    );
    effect(
      () => {
        console.log(\\"Runs on every update/rerender as well\\");
      },
      {
        allowSignalWrites: true, // Enable writing to signals inside effects
      }
    );
  }
}
"
`;

exports[`Angular signals > jsx > Javascript Test > multipleOnUpdateWithDeps 1`] = `
"import { Component, effect, signal } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

@Component({
  selector: \\"multiple-on-update-with-deps\\",
  standalone: true,
  imports: [CommonModule],
  template: \`
    <div></div>
  \`,
  styles: \`:host { display: contents; }\`,
})
export class MultipleOnUpdateWithDeps {
  a = signal(\\"a\\");
  b = signal(\\"b\\");
  c = signal(\\"c\\");
  d = signal(\\"d\\");

  constructor() {
    effect(
      () => {
        // --- Mitosis: Workaround to make sure the effect() is triggered ---
        this.a();
        this.b();
        // ---

        console.log(\\"Runs when a or b changes\\", this.a(), this.b());

        if (this.a() === \\"a\\") {
          this.a.set(\\"b\\");
        }
      },
      {
        allowSignalWrites: true, // Enable writing to signals inside effects
      }
    );
    effect(
      () => {
        // --- Mitosis: Workaround to make sure the effect() is triggered ---
        this.c();
        this.d();
        // ---

        console.log(\\"Runs when c or d changes\\", this.c(), this.d());

        if (this.a() === \\"a\\") {
          this.a.set(\\"b\\");
        }
      },
      {
        allowSignalWrites: true, // Enable writing to signals inside effects
      }
    );
  }
}
"
`;

exports[`Angular signals > jsx > Javascript Test > multipleSpreads 1`] = `
"import { Component, effect, signal } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

@Component({
  selector: \\"my-basic-component\\",
  standalone: true,
  imports: [CommonModule],
  template: \`
    <input />
  \`,
  styles: \`:host { display: contents; }\`,
})
export class MyBasicComponent {
  attrs = signal({
    hello: \\"world\\",
  });

  constructor() {}
}
"
`;

exports[`Angular signals > jsx > Javascript Test > nativeAttributes 1`] = `
"/**
          useMetadata:
          {\\"angular\\":{\\"nativeAttributes\\":[\\"disabled\\"]}}
          */

import { Component, input, effect } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

@Component({
  selector: \\"my-component\\",
  standalone: true,
  imports: [CommonModule],
  template: \`
    <div>
      <input [disabled]=\\"disabled()\\" />

      Hello! If someone passes \\\\\`[disabled]=\\"false\\"\\\\\` to me, disabled shouldn't
      be visible in the DOM.
    </div>
  \`,
  styles: \`:host { display: contents; }\`,
})
export class MyComponent {
  disabled = input<any>();

  constructor() {}
}
"
`;

exports[`Angular signals > jsx > Javascript Test > nestedShow 1`] = `
"import { Component, input, effect } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

@Component({
  selector: \\"nested-show\\",
  standalone: true,
  imports: [CommonModule],
  template: \`
    @if(conditionA()){ @if(!conditionB()){
    <div>if condition A and condition B</div>
    }@else{
    <div>else-condition-B</div>
    } }@else{
    <div>else-condition-A</div>
    }
  \`,
  styles: \`:host { display: contents; }\`,
})
export class NestedShow {
  conditionA = input<any>();
  conditionB = input<any>();

  constructor() {}
}
"
`;

exports[`Angular signals > jsx > Javascript Test > nestedStyles 1`] = `
"import { Component, effect } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

@Component({
  selector: \\"nested-styles\\",
  standalone: true,
  imports: [CommonModule],
  template: \`
    <div class=\\"div\\">Hello world</div>
  \`,
  styles: \`:host { display: contents; }
        .div {
          display: flex;
          --bar: red;
          color: var(--bar);
        }
        @media (max-width: env(--mobile)) {
          .div {
            display: block;
          }
        }
        .div:hover {
          display: flex;
        }
        .div:active {
          display: inline;
        }
        .div .nested-selector {
          display: grid;
        }
        .div .nested-selector:hover {
          display: block;
        }
        .div.nested-selector:active {
          display: inline-block;
        }
\`,
})
export class NestedStyles {
  constructor() {}
}
"
`;

exports[`Angular signals > jsx > Javascript Test > normalizeLayerNames 1`] = `
"import { Component, effect } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

@Component({
  selector: \\"my-normalized-layer-names-component\\",
  standalone: true,
  imports: [CommonModule],
  template: \`
    <section>
      <div $name=\\"🌟layer-name\\">Emoji</div>
      <div $name=\\"---\\">Dashes</div>
      <div $name=\\"CamelCase\\">CamelCase</div>
      <div $name=\\"123my@Class-Name!\\">Special chars</div>
      <div $name=\\"--my--@custom--name--\\">Special chars with dashes</div>
      <div $name=\\"0\\" class=\\"css-0\\">Single Number</div>
      <div $name=\\"123\\" class=\\"css-123\\">Multiple Numbers</div>
      <div $name=\\"name123\\" class=\\"name-123\\">Chars with numbers at end</div>
      <div $name=\\"456name\\" class=\\"name\\">Chars with numbers at start</div>
      <div $name=\\"name-789\\" class=\\"name-789\\">Numnbers separated by dash</div>
      <div $name=\\"🚀\\">Emoji</div>
      <div data-name=\\"1\\" class=\\"div\\">Number</div>
    </section>
  \`,
  styles: \`:host { display: contents; }
        .css-0 {
          margin: 10px;
        }
        .css-123 {
          padding: 10px;
        }
        .name-123 {
          border: 1px solid;
        }
        .name {
          color: red;
        }
        .name-789 {
          background: blue;
        }
        .div {
          background: blue;
        }
\`,
})
export class MyNormalizedLayerNamesComponent {
  constructor() {}
}
"
`;

exports[`Angular signals > jsx > Javascript Test > onEvent 1`] = `
"import { Component, viewChild, ElementRef, effect } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

@Component({
  selector: \\"embed\\",
  standalone: true,
  imports: [CommonModule],
  template: \`
    <div class=\\"builder-embed\\" #elem><div>Test</div></div>
  \`,
  styles: \`:host { display: contents; }\`,
})
export class Embed {
  elem = viewChild<ElementRef>(\\"elem\\");

  foo(event) {
    console.log(\\"test2\\");
  }

  constructor() {}

  ngOnInit() {
    this.elem()?.nativeElement.dispatchEvent(
      new CustomEvent(\\"initEditingBldr\\")
    );
  }
}
"
`;

exports[`Angular signals > jsx > Javascript Test > onInit & onMount 1`] = `
"import { Component, effect } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

@Component({
  selector: \\"on-init\\",
  standalone: true,
  imports: [CommonModule],
  template: \`
    <div></div>
  \`,
  styles: \`:host { display: contents; }\`,
})
export class OnInit {
  constructor() {}

  ngOnInit() {
    console.log(\\"onInit\\");
    console.log(\\"onMount\\");
  }
}
"
`;

exports[`Angular signals > jsx > Javascript Test > onInit 1`] = `
"import { Component, input, effect, signal } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

export const defaultValues = {
  name: \\"PatrickJS\\",
};

@Component({
  selector: \\"on-init\\",
  standalone: true,
  imports: [CommonModule],
  template: \`
    <div>Default name defined by parent {{name()}}</div>
  \`,
  styles: \`:host { display: contents; }\`,
})
export class OnInit {
  name = input<any>();

  name = signal(\\"\\");

  constructor() {}

  ngOnInit() {
    this.name.set(defaultValues.name || this.name());
    console.log(\\"set defaults with props\\");
  }
}
"
`;

exports[`Angular signals > jsx > Javascript Test > onInitPlain 1`] = `
"import { Component, effect } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

@Component({
  selector: \\"on-init-plain\\",
  standalone: true,
  imports: [CommonModule],
  template: \`
    <div></div>
  \`,
  styles: \`:host { display: contents; }\`,
})
export class OnInitPlain {
  constructor() {}

  ngOnInit() {
    console.log(\\"onInit\\");
  }
}
"
`;

exports[`Angular signals > jsx > Javascript Test > onMount 1`] = `
"import { Component, effect } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

@Component({
  selector: \\"comp\\",
  standalone: true,
  imports: [CommonModule],
  template: \`
    <div></div>
  \`,
  styles: \`:host { display: contents; }\`,
})
export class Comp {
  constructor() {}

  ngOnInit() {
    console.log(\\"Runs on mount\\");
  }

  ngOnDestroy() {
    console.log(\\"Runs on unMount\\");
  }
}
"
`;

exports[`Angular signals > jsx > Javascript Test > onMountMultiple 1`] = `
"import { Component, effect } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

@Component({
  selector: \\"comp\\",
  standalone: true,
  imports: [CommonModule],
  template: \`
    <div></div>
  \`,
  styles: \`:host { display: contents; }\`,
})
export class Comp {
  constructor() {}

  ngOnInit() {
    const onMountHook_0 = () => {
      console.log(\\"Runs on mount\\");
    };
    onMountHook_0();
    const onMountHook_1 = () => {
      console.log(\\"Another one runs on Mount\\");
    };
    onMountHook_1();
    const onMountHook_2 = () => {
      console.log(\\"SSR runs on Mount\\");
    };
    onMountHook_2();
  }
}
"
`;

exports[`Angular signals > jsx > Javascript Test > onUpdate 1`] = `
"import { Component, effect } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

@Component({
  selector: \\"on-update\\",
  standalone: true,
  imports: [CommonModule],
  template: \`
    <div></div>
  \`,
  styles: \`:host { display: contents; }\`,
})
export class OnUpdate {
  constructor() {
    effect(
      () => {
        console.log(\\"Runs on every update/rerender\\");
      },
      {
        allowSignalWrites: true, // Enable writing to signals inside effects
      }
    );
  }
}
"
`;

exports[`Angular signals > jsx > Javascript Test > onUpdateWithDeps 1`] = `
"import { Component, input, effect, signal } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

@Component({
  selector: \\"on-update-with-deps\\",
  standalone: true,
  imports: [CommonModule],
  template: \`
    <div></div>
  \`,
  styles: \`:host { display: contents; }\`,
})
export class OnUpdateWithDeps {
  size = input<any>();

  a = signal(\\"a\\");
  b = signal(\\"b\\");

  constructor() {
    effect(
      () => {
        // --- Mitosis: Workaround to make sure the effect() is triggered ---
        this.a();
        this.b();
        this.size();
        // ---

        console.log(
          \\"Runs when a, b or size changes\\",
          this.a(),
          this.b(),
          this.size()
        );
      },
      {
        allowSignalWrites: true, // Enable writing to signals inside effects
      }
    );
  }
}
"
`;

exports[`Angular signals > jsx > Javascript Test > outputEventBinding 1`] = `
"/**
          useMetadata:
          {\\"angular\\":{\\"nativeEvents\\":[\\"onFakeNative\\"]}}
          */

import { Component, effect, signal } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

@Component({
  selector: \\"my-component\\",
  standalone: true,
  imports: [CommonModule],
  template: \`
    <div>
      <input
        [attr.value]=\\"name()\\"
        (change)=\\"name.set($event.target.value)\\"
        (changeOrSomething)=\\"name.set($event.target.value)\\"
        (fakenative)=\\"name.set($event.target.value)\\"
        (animationend)=\\"name.set($event.target.value)\\"
      />

      Hello! I can run in React, Vue, Solid, or Liquid!
    </div>
  \`,
  styles: \`:host { display: contents; }\`,
})
export class MyComponent {
  name = signal(\\"Steve\\");

  constructor() {}
}
"
`;

exports[`Angular signals > jsx > Javascript Test > preserveExportOrLocalStatement 1`] = `
"import { Component, effect } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

const b = 3;
const foo = () => {};
export const a = 3;
export const bar = () => {};
export function run(value) {}

@Component({
  selector: \\"my-basic-component\\",
  standalone: true,
  imports: [CommonModule],
  template: \`
    <div></div>
  \`,
  styles: \`:host { display: contents; }\`,
})
export class MyBasicComponent {
  constructor() {}
}
"
`;

exports[`Angular signals > jsx > Javascript Test > preserveTyping 1`] = `
"import { Component, input, effect } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

@Component({
  selector: \\"my-basic-component\\",
  standalone: true,
  imports: [CommonModule],
  template: \`
    <div>Hello! I can run in React, Vue, Solid, or Liquid! {{name()}}</div>
  \`,
  styles: \`:host { display: contents; }\`,
})
export class MyBasicComponent {
  name = input<any>();

  constructor() {}
}
"
`;

exports[`Angular signals > jsx > Javascript Test > propsDestructure 1`] = `
"import { Component, input, effect, signal } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

@Component({
  selector: \\"my-basic-component\\",
  standalone: true,
  imports: [CommonModule],
  template: \`
    <div>
      <ng-content></ng-content>
      {{type()}} Hello! I can run in React, Vue, Solid, or Liquid!
    </div>
  \`,
  styles: \`:host { display: contents; }\`,
})
export class MyBasicComponent {
  type = input<any>();

  name = signal(\\"Decadef20\\");

  constructor() {}
}
"
`;

exports[`Angular signals > jsx > Javascript Test > propsInterface 1`] = `
"import { Component, input, effect } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

@Component({
  selector: \\"my-basic-component\\",
  standalone: true,
  imports: [CommonModule],
  template: \`
    <div>Hello! I can run in React, Vue, Solid, or Liquid! {{name()}}</div>
  \`,
  styles: \`:host { display: contents; }\`,
})
export class MyBasicComponent {
  name = input<any>();

  constructor() {}
}
"
`;

exports[`Angular signals > jsx > Javascript Test > propsType 1`] = `
"import { Component, input, effect } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

@Component({
  selector: \\"my-basic-component\\",
  standalone: true,
  imports: [CommonModule],
  template: \`
    <div>Hello! I can run in React, Vue, Solid, or Liquid! {{name()}}</div>
  \`,
  styles: \`:host { display: contents; }\`,
})
export class MyBasicComponent {
  name = input<any>();

  constructor() {}
}
"
`;

exports[`Angular signals > jsx > Javascript Test > referencingFunInsideHook 1`] = `
"import { Component, effect } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

@Component({
  selector: \\"on-update\\",
  standalone: true,
  imports: [CommonModule],
  template: \`
    <div></div>
  \`,
  styles: \`:host { display: contents; }\`,
})
export class OnUpdate {
  foo(params) {}
  bar() {}
  zoo() {
    const params = {
      cb: this.bar,
    };
  }

  constructor() {
    effect(
      () => {
        this.foo({
          someOption: this.bar,
        });
      },
      {
        allowSignalWrites: true, // Enable writing to signals inside effects
      }
    );
  }
}
"
`;

exports[`Angular signals > jsx > Javascript Test > renderBlock 1`] = `
"import {
  Component,
  viewChild,
  ViewContainerRef,
  TemplateRef,
  input,
  effect,
  signal,
  computed,
} from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

import { TARGET } from \\"../../constants/target.js\\";
import { evaluate } from \\"../../functions/evaluate.js\\";
import { extractTextStyles } from \\"../../functions/extract-text-styles.js\\";
import { getBlockActions } from \\"../../functions/get-block-actions.js\\";
import { getBlockComponentOptions } from \\"../../functions/get-block-component-options.js\\";
import { getBlockProperties } from \\"../../functions/get-block-properties.js\\";
import { getBlockTag } from \\"../../functions/get-block-tag.js\\";
import { getProcessedBlock } from \\"../../functions/get-processed-block.js\\";
import { getReactNativeBlockStyles } from \\"../../functions/get-react-native-block-styles.js\\";
import { BlockStyles } from \\"./block-styles.lite\\";
import { isEmptyHtmlElement } from \\"./render-block.helpers.js\\";
import RenderComponentWithContext from \\"./render-component-with-context.js\\";
import RenderComponent from \\"./render-component.js\\";
import { RenderRepeatedBlock } from \\"./render-repeated-block.lite\\";

@Component({
  selector: \\"render-block\\",
  standalone: true,
  imports: [CommonModule, RenderRepeatedBlock, RenderBlock, BlockStyles],
  template: \`
    <ng-template #rendercomponenttagTemplate></ng-template>
    @if(shouldWrap()){ @if(isEmptyHtmlElement(tag())){
    <ng-container
      *ngComponentOutlet=\\"
              tag();
        inputs: dynamicProps_ya7n4j();
              content: myContent();
              \\"
    ></ng-container>
    } @if(!isEmptyHtmlElement(tag()) && repeatItemData()){ @for (data of
    repeatItemData();track trackByData0;let index = $index) {
    <render-repeated-block
      [repeatContext]=\\"data.context\\"
      [block]=\\"data.block\\"
    ></render-repeated-block>
    } } @if(!isEmptyHtmlElement(tag()) && !repeatItemData()){
    <ng-container
      *ngComponentOutlet=\\"
              tag();
        inputs: dynamicProps_ya7n4j();
              content: myContent();
              \\"
    ></ng-container>
    } }@else{
    <ng-container
      *ngComponentOutlet=\\"
              renderComponentTag();
        inputs: dynamicProps_emn6k5();
              content: myContent();
              \\"
    ></ng-container>
    }
  \`,
  styles: \`:host { display: contents; }\`,
})
export class RenderBlock {
  protected readonly isEmptyHtmlElement = isEmptyHtmlElement;

  // Signal to store embedded views for dynamic components
  myContent = signal<any[]>([]);
  rendercomponenttagTemplateRef = viewChild<TemplateRef<any>>(
    \\"rendercomponenttagTemplate\\"
  );
  tagTemplateRef = viewChild<TemplateRef<any>>(\\"tagTemplate\\");

  block = input<any>();
  context = input<any>();

  component = computed(() => {
    const componentName = getProcessedBlock({
      block: this.block(),
      state: this.context().state,
      context: this.context().context,
      shouldEvaluateBindings: false,
    }).component?.name;

    if (!componentName) {
      return null;
    }

    const ref = this.context().registeredComponents[componentName];

    if (!ref) {
      // TODO: Public doc page with more info about this message
      console.warn(\`
          Could not find a registered component named \\"\${componentName}\\".
          If you registered it, is the file that registered it imported by the file that needs to render it?\`);
      return undefined;
    } else {
      return ref;
    }
  });
  tag = computed(() => {
    return getBlockTag(this.useBlock());
  });
  useBlock = computed(() => {
    return this.repeatItemData()
      ? this.block()
      : getProcessedBlock({
          block: this.block(),
          state: this.context().state,
          context: this.context().context,
          shouldEvaluateBindings: true,
        });
  });
  actions = computed(() => {
    return getBlockActions({
      block: this.useBlock(),
      state: this.context().state,
      context: this.context().context,
    });
  });
  attributes = computed(() => {
    const blockProperties = getBlockProperties(this.useBlock());
    return {
      ...blockProperties,
      ...(TARGET === \\"reactNative\\"
        ? {
            style: getReactNativeBlockStyles({
              block: this.useBlock(),
              context: this.context(),
              blockStyles: blockProperties.style,
            }),
          }
        : {}),
    };
  });
  shouldWrap = computed(() => {
    return !this.component()?.noWrap;
  });
  renderComponentProps = computed(() => {
    return {
      blockChildren: this.useChildren(),
      componentRef: this.component()?.component,
      componentOptions: {
        ...getBlockComponentOptions(this.useBlock()),

        /**
         * These attributes are passed to the wrapper element when there is one. If \`noWrap\` is set to true, then
         * they are provided to the component itself directly.
         */
        ...(this.shouldWrap()
          ? {}
          : {
              attributes: { ...this.attributes(), ...this.actions() },
            }),
        customBreakpoints: this.childrenContext()?.content?.meta?.breakpoints,
      },
      context: this.childrenContext(),
    };
  });
  useChildren = computed(() => {
    // TO-DO: When should \`canHaveChildren\` dictate rendering?
    // This is currently commented out because some Builder components (e.g. Box) do not have \`canHaveChildren: true\`,
    // but still receive and need to render children.
    // return state.componentInfo?.canHaveChildren ? state.useBlock.children : [];
    return this.useBlock().children ?? [];
  });
  childrenWithoutParentComponent = computed(() => {
    /**
     * When there is no \`componentRef\`, there might still be children that need to be rendered. In this case,
     * we render them outside of \`componentRef\`.
     * NOTE: We make sure not to render this if \`repeatItemData\` is non-null, because that means we are rendering an array of
     * blocks, and the children will be repeated within those blocks.
     */
    const shouldRenderChildrenOutsideRef =
      !this.component()?.component && !this.repeatItemData();
    return shouldRenderChildrenOutsideRef ? this.useChildren() : [];
  });
  repeatItemData = computed(() => {
    /**
     * we don't use \`state.useBlock\` here because the processing done within its logic includes evaluating the block's bindings,
     * which will not work if there is a repeat.
     */
    const { repeat, ...blockWithoutRepeat } = this.block();

    if (!repeat?.collection) {
      return undefined;
    }

    const itemsArray = evaluate({
      code: repeat.collection,
      state: this.context().state,
      context: this.context().context,
    });

    if (!Array.isArray(itemsArray)) {
      return undefined;
    }

    const collectionName = repeat.collection.split(\\".\\").pop();
    const itemNameToUse =
      repeat.itemName || (collectionName ? collectionName + \\"Item\\" : \\"item\\");
    const repeatArray = itemsArray.map((item, index) => ({
      context: {
        ...this.context(),
        state: {
          ...this.context().state,
          $index: index,
          $item: item,
          [itemNameToUse]: item,
          [\`$\${itemNameToUse}Index\`]: index,
        },
      },
      block: blockWithoutRepeat,
    }));
    return repeatArray;
  });
  inheritedTextStyles = computed(() => {
    if (TARGET !== \\"reactNative\\") {
      return {};
    }

    const styles = getReactNativeBlockStyles({
      block: this.useBlock(),
      context: this.context(),
      blockStyles: this.attributes().style,
    });
    return extractTextStyles(styles);
  });
  childrenContext = computed(() => {
    return {
      apiKey: this.context().apiKey,
      state: this.context().state,
      content: this.context().content,
      context: this.context().context,
      registeredComponents: this.context().registeredComponents,
      inheritedStyles: this.inheritedTextStyles(),
    };
  });
  renderComponentTag = computed(() => {
    if (TARGET === \\"reactNative\\") {
      return RenderComponentWithContext;
    } else if (TARGET === \\"vue3\\") {
      // vue3 expects a string for the component tag
      return \\"RenderComponent\\";
    } else {
      return RenderComponent;
    }
  });
  dynamicProps_ya7n4j = computed(() => {
    return { ...this.attributes(), ...this.actions() };
  });
  dynamicProps_emn6k5 = computed(() => {
    return { ...this.renderComponentProps() };
  });
  trackByData0(index: number, data: any) {
    return index;
  }
  trackByChild1(_: number, child: any) {
    return \\"render-block-\\" + child.id;
  }
  trackByChild2(_: number, child: any) {
    return \\"block-style-\\" + child.id;
  }

  constructor(private viewContainer: ViewContainerRef) {}

  ngOnInit() {
    this.myContent.set([
      this.viewContainer.createEmbeddedView(
        this.rendercomponenttagTemplateRef()
      ).rootNodes,
      this.viewContainer.createEmbeddedView(this.tagTemplateRef()).rootNodes,
    ]);
  }
}
"
`;

exports[`Angular signals > jsx > Javascript Test > renderContentExample 1`] = `
"import { Component, input, effect } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

import BuilderContext from \\"@dummy/context.js\\";
import {
  dispatchNewContentToVisualEditor,
  sendComponentsToVisualEditor,
  trackClick,
} from \\"@dummy/injection-js\\";
import { RenderBlocks } from \\"@dummy/RenderBlocks.lite.tsx\\";

@Component({
  selector: \\"render-content\\",
  standalone: true,
  imports: [CommonModule, RenderBlocks],
  template: \`
    <div class=\\"div\\" (click)=\\"trackClick(content().id)\\">
      <render-blocks [blocks]=\\"content().blocks\\"></render-blocks>
    </div>
  \`,
  styles: \`:host { display: contents; }
        .div {
          display: flex;
          flex-direction: columns;
        }
\`,
})
export class RenderContent {
  protected readonly trackClick = trackClick;

  customComponents = input<any>();
  content = input<any>();

  constructor() {
    effect(
      () => {
        // --- Mitosis: Workaround to make sure the effect() is triggered ---
        this.content();
        // ---

        dispatchNewContentToVisualEditor(this.content());
      },
      {
        allowSignalWrites: true, // Enable writing to signals inside effects
      }
    );
  }

  ngOnInit() {
    sendComponentsToVisualEditor(this.customComponents());
  }
}
"
`;

exports[`Angular signals > jsx > Javascript Test > rootFragmentMultiNode 1`] = `
"import { Component, input, effect } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

@Component({
  selector: \\"button\\",
  standalone: true,
  imports: [CommonModule],
  template: \`
    <ng-container>
      @if(link()){
      <a
        [attr.href]=\\"link()\\"
        [attr.target]=\\"openLinkInNewTab() ? '_blank' : undefined\\"
      >
        {{text()}}
      </a>
      } @if(!link()){
      <button type=\\"button\\">{{text()}}</button>
      }
    </ng-container>
  \`,
  styles: \`:host { display: contents; }\`,
})
export class Button {
  link = input<any>();
  attributes = input<any>();
  openLinkInNewTab = input<any>();
  text = input<any>();

  constructor() {}
}
"
`;

exports[`Angular signals > jsx > Javascript Test > rootShow 1`] = `
"import { Component, input, effect } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

@Component({
  selector: \\"render-styles\\",
  standalone: true,
  imports: [CommonModule],
  template: \`
    @if(foo() === 'bar'){
    <div>Bar</div>
    }@else{
    <div>Foo</div>
    }
  \`,
  styles: \`:host { display: contents; }\`,
})
export class RenderStyles {
  foo = input<any>();

  constructor() {}
}
"
`;

exports[`Angular signals > jsx > Javascript Test > sanitizeInnerHTML 1`] = `
"/**
          useMetadata:
          {\\"angular\\":{\\"sanitizeInnerHTML\\":true}}
          */

import { Component, input, effect } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

@Component({
  selector: \\"my-component\\",
  standalone: true,
  imports: [CommonModule],
  template: \`
    <div [innerHTML]=\\"html()\\"></div>
  \`,
  styles: \`:host { display: contents; }\`,
})
export class MyComponent {
  html = input<any>();

  constructor() {}
}
"
`;

exports[`Angular signals > jsx > Javascript Test > self-referencing component 1`] = `
"import { Component, input, effect } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

@Component({
  selector: \\"my-component\\",
  standalone: true,
  imports: [CommonModule, MyComponent],
  template: \`
    <div>
      {{name()}} @if(name() === 'Batman'){
      <my-component name=\\"Bruce Wayne\\"></my-component>
      }
    </div>
  \`,
  styles: \`:host { display: contents; }\`,
})
export class MyComponent {
  name = input<any>();

  constructor() {}
}
"
`;

exports[`Angular signals > jsx > Javascript Test > self-referencing component with children 1`] = `
"import { Component, input, effect } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

@Component({
  selector: \\"my-component\\",
  standalone: true,
  imports: [CommonModule, MyComponent],
  template: \`
    <div>
      {{name()}}
      <ng-content></ng-content>
      @if(name() === 'Batman'){
      <my-component name=\\"Bruce\\"><div>Wayne</div></my-component>
      }
    </div>
  \`,
  styles: \`:host { display: contents; }\`,
})
export class MyComponent {
  name = input<any>();

  constructor() {}
}
"
`;

exports[`Angular signals > jsx > Javascript Test > setState 1`] = `
"import { Component, effect, signal } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

@Component({
  selector: \\"set-state\\",
  standalone: true,
  imports: [CommonModule],
  template: \`
    <div><button (click)=\\"someFn()\\">Click me</button></div>
  \`,
  styles: \`:host { display: contents; }\`,
})
export class SetState {
  n = signal([\\"123\\"]);

  someFn() {
    this.n()[0] = \\"123\\";
  }

  constructor() {}
}
"
`;

exports[`Angular signals > jsx > Javascript Test > showExpressions 1`] = `
"import { Component, input, effect } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

@Component({
  selector: \\"show-with-other-values\\",
  standalone: true,
  imports: [CommonModule],
  template: \`
    <div>
      @if(conditionA()){ Content0 }@else{ ContentA } @if(conditionA()){ ContentA
      } @if(conditionA()){ }@else{ ContentA } @if(conditionA()){ ContentB
      }@else{
      {{undefined}} } @if(conditionA()){ {{undefined}} }@else{ ContentB }
      @if(conditionA()){ ContentC } @if(conditionA()){ }@else{ ContentC }
      @if(conditionA()){ ContentD } @if(conditionA()){ }@else{ ContentD }
      @if(conditionA()){ ContentE }@else{ hello } @if(conditionA()){ hello
      }@else{ ContentE } @if(conditionA()){ ContentF }@else{ 123 }
      @if(conditionA()){ 123 }@else{ ContentF } @if(conditionA() === 'Default'){
      4mb }@else{ @if(conditionB() === 'Complete'){ 20mb }@else{ 9mb } }
      @if(conditionA() === 'Default'){ @if(conditionB() === 'Complete'){ 20mb
      }@else{ 9mb } }@else{ 4mb } @if(conditionA() === 'Default'){
      @if(conditionB() === 'Complete'){
      <div>complete</div>
      }@else{ 9mb } }@else{ @if(conditionC() === 'Complete'){ dff }@else{
      <div>complete else</div>
      } }
    </div>
  \`,
  styles: \`:host { display: contents; }\`,
})
export class ShowWithOtherValues {
  conditionA = input<any>();
  conditionB = input<any>();
  conditionC = input<any>();

  constructor() {}
}
"
`;

exports[`Angular signals > jsx > Javascript Test > showWithFor 1`] = `
"import { Component, input, effect } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

@Component({
  selector: \\"nested-show\\",
  standalone: true,
  imports: [CommonModule],
  template: \`
    @if(conditionA()){ @for (item of items();track trackByItem0;let idx =
    $index) {
    <div>{{item}}</div>
    } }@else{
    <div>else-condition-A</div>
    }
  \`,
  styles: \`:host { display: contents; }\`,
})
export class NestedShow {
  conditionA = input<any>();
  items = input<any>();

  trackByItem0(idx: number, item: any) {
    return idx;
  }

  constructor() {}
}
"
`;

exports[`Angular signals > jsx > Javascript Test > showWithOtherValues 1`] = `
"import { Component, input, effect } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

@Component({
  selector: \\"show-with-other-values\\",
  standalone: true,
  imports: [CommonModule],
  template: \`
    <div>
      @if(conditionA()){ ContentA } @if(conditionA()){ ContentB }@else{
      {{undefined}} } @if(conditionA()){ ContentC } @if(conditionA()){ ContentD
      } @if(conditionA()){ ContentE }@else{ hello } @if(conditionA()){ ContentF
      }@else{ 123 }
    </div>
  \`,
  styles: \`:host { display: contents; }\`,
})
export class ShowWithOtherValues {
  conditionA = input<any>();

  constructor() {}
}
"
`;

exports[`Angular signals > jsx > Javascript Test > showWithRootText 1`] = `
"import { Component, input, effect } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

@Component({
  selector: \\"show-root-text\\",
  standalone: true,
  imports: [CommonModule],
  template: \`
    @if(conditionA()){ ContentA }@else{
    <div>else-condition-A</div>
    }
  \`,
  styles: \`:host { display: contents; }\`,
})
export class ShowRootText {
  conditionA = input<any>();

  constructor() {}
}
"
`;

exports[`Angular signals > jsx > Javascript Test > signals 1`] = `
"/**
          useMetadata:
          {\\"angular\\":{\\"signals\\":{\\"writeable\\":[\\"disabled\\"],\\"required\\":[\\"label\\"]}}}
          */

import {
  Component,
  viewChild,
  ElementRef,
  model,
  output,
  input,
  effect,
  signal,
} from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

const defaultProps: any = { testInput: \\"Test\\", label: \\"Bla\\" };

@Component({
  selector: \\"signals-test-component\\",
  standalone: true,
  imports: [CommonModule],
  template: \`
    <button
      [attr.aria-label]=\\"label()\\"
      #buttonRef
      [attr.disabled]=\\"disabled()\\"
      (click)=\\"handleOutput()\\"
    >
      {{testInput()}}
    </button>
  \`,
  styles: \`:host { display: contents; }\`,
})
export class SignalsTestComponent {
  testInput = input<any>(defaultProps[\\"testInput\\"]);
  label = input.required<any>(defaultProps[\\"label\\"]);
  disabled = model<any>();
  testOutput = output();

  buttonRef = viewChild<ElementRef>(\\"buttonRef\\");

  _counter = signal(0);
  _innerText = signal(\\"a\\");

  handleOutput() {
    this._counter.update((_counter) => {
      _counter++;
      return _counter;
    });

    this._innerText.set(\\"b\\");

    console.log(this.testInput(), this._counter());

    if (this.testOutput) {
      this.testOutput.emit();
    }
  }

  constructor() {
    effect(
      () => {
        // --- Mitosis: Workaround to make sure the effect() is triggered ---
        this._counter();
        this.buttonRef();
        // ---

        console.log(this._counter(), this.buttonRef()?.nativeElement);
        this.buttonRef()?.nativeElement?.setAttribute(
          \\"data-counter\\",
          this._counter().toString()
        );
      },
      {
        allowSignalWrites: true, // Enable writing to signals inside effects
      }
    );
  }
}
"
`;

exports[`Angular signals > jsx > Javascript Test > signalsOnUpdate 1`] = `
"import { Component, input, effect } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

@Component({
  selector: \\"my-basic-component\\",
  standalone: true,
  imports: [CommonModule],
  template: \`
    <div class=\\"test div\\">{{id()}} {{foo().value.bar.baz}}</div>
  \`,
  styles: \`:host { display: contents; }
        .div {
          padding: 10px;
        }
\`,
})
export class MyBasicComponent {
  id = input<any>();
  foo = input<any>();

  constructor() {
    effect(
      () => {
        // --- Mitosis: Workaround to make sure the effect() is triggered ---
        this.id();
        // ---

        console.log(\\"props.id changed\\", this.id());
        console.log(
          \\"props.foo.value.bar.baz changed\\",
          this.foo().value.bar.baz
        );
      },
      {
        allowSignalWrites: true, // Enable writing to signals inside effects
      }
    );
  }
}
"
`;

exports[`Angular signals > jsx > Javascript Test > spreadAttrs 1`] = `
"import { Component, effect } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

@Component({
  selector: \\"my-basic-component\\",
  standalone: true,
  imports: [CommonModule],
  template: \`
    <input />
  \`,
  styles: \`:host { display: contents; }\`,
})
export class MyBasicComponent {
  constructor() {}
}
"
`;

exports[`Angular signals > jsx > Javascript Test > spreadNestedProps 1`] = `
"import { Component, input, effect } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

@Component({
  selector: \\"my-basic-component\\",
  standalone: true,
  imports: [CommonModule],
  template: \`
    <input />
  \`,
  styles: \`:host { display: contents; }\`,
})
export class MyBasicComponent {
  nested = input<any>();

  constructor() {}
}
"
`;

exports[`Angular signals > jsx > Javascript Test > spreadProps 1`] = `
"import { Component, effect } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

@Component({
  selector: \\"my-basic-component\\",
  standalone: true,
  imports: [CommonModule],
  template: \`
    <input />
  \`,
  styles: \`:host { display: contents; }\`,
})
export class MyBasicComponent {
  constructor() {}
}
"
`;

exports[`Angular signals > jsx > Javascript Test > stateInit 1`] = `
"import { Component, input, effect, signal } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

@Component({
  selector: \\"my-component\\",
  standalone: true,
  imports: [CommonModule],
  template: \`
    <div>
      <div>{{asfas()}}</div>
      <div>{{someCompute()}}</div>
      <div>{{someOtherVal()}}</div>
      <div>{{sf()}}</div>
    </div>
  \`,
  styles: \`:host { display: contents; }\`,
})
export class MyComponent {
  val = input<any>();

  asfas = signal(\\"asga\\");
  someCompute = signal(this.add(1, 2));
  someOtherVal = signal(this.val());
  sf = signal(this.add(this.val(), 34));

  add(a, b) {
    return a + b;
  }
  subtract() {
    return this.someCompute() - this.someOtherVal();
  }

  constructor() {}
}
"
`;

exports[`Angular signals > jsx > Javascript Test > stateInitSequence 1`] = `
"import { Component, input, effect, signal, computed } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

@Component({
  selector: \\"my-component\\",
  standalone: true,
  imports: [CommonModule, Comp],
  template: \`
    <Comp [val]=\\"objSpread_val_6y525v()\\">{{val()}}</Comp>
  \`,
  styles: \`:host { display: contents; }\`,
})
export class MyComponent {
  value = input<any>();

  val = signal(this.value());

  objSpread_val_6y525v = computed(() => {
    return { ...this.val() };
  });

  constructor() {}
}
"
`;

exports[`Angular signals > jsx > Javascript Test > store-async-function 1`] = `
"import { Component, effect } from '@angular/core';
      import { CommonModule } from '@angular/common';












      @Component({
        selector: 'string-literal-store',standalone: true,imports: [CommonModule],template: \`<div></div>
\`,styles: \`:host { display: contents; }\`
      })
      export class StringLiteralStore {










        async function arrowFunction() {
return Promise.resolve();
}
async function namedFunction() {
return Promise.resolve();
}
async function fetchUsers() {
return Promise.resolve();
}


        constructor() {

        }









      }"
`;

exports[`Angular signals > jsx > Javascript Test > string-literal-store 1`] = `
"import { Component, effect, signal } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

@Component({
  selector: \\"string-literal-store\\",
  standalone: true,
  imports: [CommonModule],
  template: \`
    <div>{{foo()}}</div>
  \`,
  styles: \`:host { display: contents; }\`,
})
export class StringLiteralStore {
  foo = signal(123);

  constructor() {}
}
"
`;

exports[`Angular signals > jsx > Javascript Test > string-literal-store-kebab 1`] = `
"import { Component, effect, signal } from '@angular/core';
import { CommonModule } from '@angular/common';












@Component({
  selector: 'string-literal-store',standalone: true,imports: [CommonModule],template: \`<div>{{'foo-bar'}}</div>
\`,styles: \`:host { display: contents; }\`
})
export class StringLiteralStore {








   foo-bar= signal(123)




  constructor() {

  }









}"
`;

exports[`Angular signals > jsx > Javascript Test > styleClassAndCss 1`] = `
"import { Component, effect } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

@Component({
  selector: \\"my-component\\",
  standalone: true,
  imports: [CommonModule],
  template: \`
    <div
      class=\\"builder-column div\\"
      [ngStyle]=\\"{
          width: '100%'
        }\\"
    ></div>
  \`,
  styles: \`:host { display: contents; }
        .div {
          display: flex;
          flex-direction: column;
          align-items: stretch;
        }
\`,
})
export class MyComponent {
  constructor() {}
}
"
`;

exports[`Angular signals > jsx > Javascript Test > stylePropClassAndCss 1`] = `
"import { Component, input, effect } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

@Component({
  selector: \\"style-prop-class-and-css\\",
  standalone: true,
  imports: [CommonModule],
  template: \`
    <div
      [ngStyle]=\\"attributes().style\\"
      [class]=\\"attributes().class + ' div'\\"
    ></div>
  \`,
  styles: \`:host { display: contents; }
        .div {
          display: flex;
          flex-direction: column;
          align-items: stretch;
        }
\`,
})
export class StylePropClassAndCss {
  attributes = input<any>();

  constructor() {}
}
"
`;

exports[`Angular signals > jsx > Javascript Test > subComponent 1`] = `
"import { Component, effect } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

import { Foo } from \\"./foo-sub-component.lite\\";

@Component({
  selector: \\"sub-component\\",
  standalone: true,
  imports: [CommonModule, Foo],
  template: \`
    <foo></foo>
  \`,
  styles: \`:host { display: contents; }\`,
})
export class SubComponent {
  constructor() {}
}
"
`;

exports[`Angular signals > jsx > Javascript Test > svgComponent 1`] = `
"import { Component, effect } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

@Component({
  selector: \\"svg-component\\",
  standalone: true,
  imports: [CommonModule],
  template: \`
    <svg
      fill=\\"none\\"
      role=\\"img\\"
      [attr.viewBox]=\\"'0 0 ' + 42 + ' ' + 42\\"
      [attr.width]=\\"42\\"
      [attr.height]=\\"42\\"
    >
      <defs>
        <filter id=\\"prefix__filter0_f\\" filterUnits=\\"userSpaceOnUse\\">
          <feFlood result=\\"BackgroundImageFix\\"></feFlood>
          <feBlend
            in=\\"SourceGraphic\\"
            in2=\\"BackgroundImageFix\\"
            result=\\"shape\\"
          ></feBlend>
          <feGaussianBlur
            result=\\"effect1_foregroundBlur\\"
            [attr.stdDeviation]=\\"7\\"
          ></feGaussianBlur>
        </filter>
      </defs>
    </svg>
  \`,
  styles: \`:host { display: contents; }\`,
})
export class SvgComponent {
  constructor() {}
}
"
`;

exports[`Angular signals > jsx > Javascript Test > twoForsTrackBy 1`] = `
"import { Component, effect, signal } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

@Component({
  selector: \\"my-component\\",
  standalone: true,
  imports: [CommonModule],
  template: \`
    <div>
      @for (item of items();track trackByItem0;let i = $index) {
      <div>{{item}}</div>
      } @for (item of items();track trackByItem1;let i = $index) {
      <div>{{item}}</div>
      }
    </div>
  \`,
  styles: \`:host { display: contents; }\`,
})
export class MyComponent {
  items = signal([1, 2, 3]);

  trackByItem0(_: number, item: any) {
    return item;
  }
  trackByItem1(_: number, item: any) {
    return item;
  }

  constructor() {}
}
"
`;

exports[`Angular signals > jsx > Javascript Test > typeDependency 1`] = `
"import { Component, input, effect } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

@Component({
  selector: \\"type-dependency\\",
  standalone: true,
  imports: [CommonModule],
  template: \`
    <div>{{foo()}}</div>
  \`,
  styles: \`:host { display: contents; }\`,
})
export class TypeDependency {
  foo = input<any>();

  constructor() {}
}
"
`;

exports[`Angular signals > jsx > Javascript Test > typeExternalProps 1`] = `
"import { Component, input, effect } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

@Component({
  selector: \\"type-external-props\\",
  standalone: true,
  imports: [CommonModule],
  template: \`
    <div>Hello {{name()}} !</div>
  \`,
  styles: \`:host { display: contents; }\`,
})
export class TypeExternalProps {
  name = input<any>();

  constructor() {}
}
"
`;

exports[`Angular signals > jsx > Javascript Test > typeExternalStore 1`] = `
"import { Component, effect, signal } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

@Component({
  selector: \\"type-external-store\\",
  standalone: true,
  imports: [CommonModule],
  template: \`
    <div>Hello {{_name()}} !</div>
  \`,
  styles: \`:host { display: contents; }\`,
})
export class TypeExternalStore {
  _name = signal(\\"test\\");

  constructor() {}
}
"
`;

exports[`Angular signals > jsx > Javascript Test > typeGetterStore 1`] = `
"import { Component, effect, signal, computed } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

@Component({
  selector: \\"type-getter-store\\",
  standalone: true,
  imports: [CommonModule],
  template: \`
    <div>Hello {{name()}} !</div>
  \`,
  styles: \`:host { display: contents; }\`,
})
export class TypeGetterStore {
  name = signal(\\"test\\");

  test = computed(() => {
    return \\"test\\";
  });
  getName() {
    if (this.name() === \\"a\\") {
      return \\"b\\";
    }

    return this.name();
  }

  constructor() {}
}
"
`;

exports[`Angular signals > jsx > Javascript Test > use-style 1`] = `
"import { Component, effect } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

@Component({
  selector: \\"my-component\\",
  standalone: true,
  imports: [CommonModule],
  template: \`
    <button type=\\"button\\">Button</button>
  \`,
  styles: \`:host { display: contents; }
        button {
          background: blue;
          color: white;
          font-size: 12px;
          outline: 1px solid black;
        }
\`,
})
export class MyComponent {
  constructor() {}
}
"
`;

exports[`Angular signals > jsx > Javascript Test > use-style-and-css 1`] = `
"import { Component, effect } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

@Component({
  selector: \\"my-component\\",
  standalone: true,
  imports: [CommonModule],
  template: \`
    <button type=\\"button\\" class=\\"button\\">Button</button>
  \`,
  styles: \`:host { display: contents; }
        button {
          font-size: 12px;
          outline: 1px solid black;
        }

        .button {
          background: blue;
          color: white;
        }
\`,
})
export class MyComponent {
  constructor() {}
}
"
`;

exports[`Angular signals > jsx > Javascript Test > use-style-outside-component 1`] = `
"import { Component, effect } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

@Component({
  selector: \\"my-component\\",
  standalone: true,
  imports: [CommonModule],
  template: \`
    <button type=\\"button\\">Button</button>
  \`,
  styles: \`:host { display: contents; }
        button {
          background: blue;
          color: white;
          font-size: 12px;
          outline: 1px solid black;
        }
\`,
})
export class MyComponent {
  constructor() {}
}
"
`;

exports[`Angular signals > jsx > Javascript Test > useObjectWrapper 1`] = `
"import { Component, input, effect, signal, computed } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

@Component({
  selector: \\"my-component\\",
  standalone: true,
  imports: [CommonModule, Comp],
  template: \`
    <div>
      <Comp
        [val1]=\\"objSpread_val1_1ndsmf()\\"
        [val2]=\\"objSpread_val2_yxuigh()\\"
        [val3]=\\"objSpread_val3_x5ar0q()\\"
        [val4]=\\"objSpread_val4_4xuou0()\\"
        [val5]=\\"objSpread_val5_qgyhyp()\\"
        [val6]=\\"{
          anything: [1, 2, 3]
        }\\"
      ></Comp>
    </div>
  \`,
  styles: \`:host { display: contents; }\`,
})
export class MyComponent {
  spreadAttrs = input<any>();

  attributes = signal({
    id: 1,
  });
  attributes2 = signal({
    id2: 1,
  });
  something = signal({
    id3: 1,
  });

  objSpread_val1_1ndsmf = computed(() => {
    return { ...this.attributes2() };
  });
  objSpread_val2_yxuigh = computed(() => {
    return { ...this.attributes(), ...this.attributes2() };
  });
  objSpread_val3_x5ar0q = computed(() => {
    return { ...this.something(), anything: \\"hello\\", hello: \\"world\\" };
  });
  objSpread_val4_4xuou0 = computed(() => {
    return {
      ...this.attributes(),
      ...this.something(),
      anything: [1, 2, 3],
      hello: \\"hello\\",
      ...this.attributes2(),
    };
  });
  objSpread_val5_qgyhyp = computed(() => {
    return {
      ...this.attributes(),
      ...this.something(),
      anything: [1, 2, 3],
      anythingString: [\\"a\\", \\"b\\", \\"c\\"],
      hello: \\"hello\\",
      ...this.spreadAttrs(),
    };
  });

  constructor() {}
}
"
`;

exports[`Angular signals > jsx > Javascript Test > useTarget 1`] = `
"import { Component, effect, signal, computed } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

@Component({
  selector: \\"use-target-component\\",
  standalone: true,
  imports: [CommonModule],
  template: \`
    <div>{{name()}}</div>
  \`,
  styles: \`:host { display: contents; }\`,
})
export class UseTargetComponent {
  lastName = signal(\\"bar\\");
  foo = signal(\\"bar\\");

  name = computed(() => {
    const prefix = true;
    return prefix + \\"foo\\";
  });

  constructor() {}

  ngOnInit() {
    console.log(this.foo());
    this.foo.set(\\"bar\\");
  }
}
"
`;

exports[`Angular signals > jsx > Javascript Test > webComponent 1`] = `
"import { Component, effect } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

import { register } from \\"swiper/element/bundle\\";

@Component({
  selector: \\"my-basic-web-component\\",
  standalone: true,
  imports: [CommonModule],
  template: \`
    <swiper-container slides-per-view=\\"3\\" navigation=\\"true\\" pagination=\\"true\\">
      <swiper-slide>Slide 1</swiper-slide>
      <swiper-slide>Slide 2</swiper-slide>
      <swiper-slide>Slide 3</swiper-slide>
    </swiper-container>
  \`,
  styles: \`:host { display: contents; }\`,
})
export class MyBasicWebComponent {
  constructor() {}

  ngOnInit() {
    register();
  }
}
"
`;

exports[`Angular signals > jsx > Remove Internal mitosis package 1`] = `
"import { Component, effect, signal } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

@Component({
  selector: \\"my-basic-component\\",
  standalone: true,
  imports: [CommonModule],
  template: \`
    <div>
      Hello {{name()}} ! I can run in React, Qwik, Vue, Solid, or Liquid!
    </div>
  \`,
  styles: \`:host { display: contents; }\`,
})
export class MyBasicComponent {
  name = signal(\\"PatrickJS\\");

  constructor() {}
}
"
`;

exports[`Angular signals > jsx > Typescript Test > Advanced 1`] = `
"import { Component, effect, signal } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

@Component({
  selector: \\"my-basic-for-show-component\\",
  standalone: true,
  imports: [CommonModule],
  template: \`
    <main>
      @for (person of names();track i;let i = $index) {
      <div>{{i}} : {{person}}</div>
      } @for (person of names();track i;let i = $index) {
      <span>{{person}}</span>
      } @for (_ of names();track i;let i = $index) {
      <br />
      } @for (_ of Array.from({ length: 10 });track ee;let ee = $index) {
      <pre>{{ee}}</pre>
      } @for (_ of Array.from({ length: 10 });track i;let i = $index) {
      <p>{{index}}</p>
      } @for (person of names();track index;let index = $index) {
      <span>{{person}} {{index}}</span>
      } @for (person of Array.from({ length: 10 });track count;let count =
      $index) {
      <span>{{person}} {{count}}</span>
      } @for (person of names();track i;let i = $index) {
      <span>{{person}} {{i}}</span>
      } @for (person of Array.from({ length: 10 });track index;let index =
      $index) {
      <span>{{person}} {{index}}</span>
      }
    </main>
  \`,
  styles: \`:host { display: contents; }\`,
})
export class MyBasicForShowComponent {
  name = signal(\\"PatrickJS\\");
  names = signal([\\"Steve\\", \\"PatrickJS\\"]);

  constructor() {}
}
"
`;

exports[`Angular signals > jsx > Typescript Test > AdvancedRef 1`] = `
"import {
  Component,
  viewChild,
  ElementRef,
  input,
  effect,
  signal,
} from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

export interface Props {
  showInput: boolean;
}

@Component({
  selector: \\"my-basic-ref-component\\",
  standalone: true,
  imports: [CommonModule],
  template: \`
    <div>
      @if(showInput()){
      <ng-container>
        <input
          class=\\"input\\"
          #inputRef
          [attr.value]=\\"name()\\"
          (blur)=\\"onBlur()\\"
          (change)=\\"name.set($event.target.value)\\"
        />
        <label for=\\"cars\\" #inputNoArgRef>Choose a car:</label>
        <select name=\\"cars\\" id=\\"cars\\">
          <option value=\\"supra\\">GR Supra</option>
          <option value=\\"86\\">GR 86</option>
        </select>
      </ng-container>
      } Hello {{lowerCaseName()}} ! I can run in React, Qwik, Vue, Solid, or Web
      Component!
    </div>
  \`,
  styles: \`:host { display: contents; }
        .input {
          color: red;
        }
\`,
})
export class MyBasicRefComponent {
  showInput = input<Props[\\"showInput\\"]>();

  inputRef = viewChild<ElementRef>(\\"inputRef\\");
  inputNoArgRef = viewChild<ElementRef>(\\"inputNoArgRef\\");

  name = signal(\\"PatrickJS\\");

  onBlur() {
    // Maintain focus
    this.inputRef()?.nativeElement.focus();
  }
  lowerCaseName() {
    return this.name().toLowerCase();
  }

  constructor() {
    effect(
      () => {
        // --- Mitosis: Workaround to make sure the effect() is triggered ---
        this.inputRef();
        this.inputNoArgRef();
        // ---

        console.log(\\"Received an update\\");
      },
      {
        allowSignalWrites: true, // Enable writing to signals inside effects
      }
    );
  }
}
"
`;

exports[`Angular signals > jsx > Typescript Test > Basic 1`] = `
"import { Component, effect, signal } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

export interface MyBasicComponentProps {
  id: string;
}

export const DEFAULT_VALUES = {
  name: \\"Steve\\",
};

@Component({
  selector: \\"my-basic-component\\",
  standalone: true,
  imports: [CommonModule],
  template: \`
    <div class=\\"test div\\">
      <input
        [attr.value]=\\"DEFAULT_VALUES.name || name()\\"
        (change)=\\"name.set(myEvent.target.value)\\"
      />

      Hello! I can run in React, Vue, Solid, or Liquid! &gt;
    </div>
  \`,
  styles: \`:host { display: contents; }
        .div {
          padding: 10px;
        }
\`,
})
export class MyBasicComponent {
  protected readonly DEFAULT_VALUES = DEFAULT_VALUES;

  name = signal(\\"Steve\\");
  age = signal<number>(1);
  sports = signal<Array<string>>([\\"\\"]);

  underscore_fn_name() {
    return \\"bar\\";
  }

  constructor() {}
}
"
`;

exports[`Angular signals > jsx > Typescript Test > Basic 2`] = `
"import { Component, effect, signal } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

@Component({
  selector: \\"my-basic-for-show-component\\",
  standalone: true,
  imports: [CommonModule],
  template: \`
    <div>
      @for (person of names();track i;let i = $index) { @if(person === name()){
      <input
        [attr.value]=\\"name()\\"
        (change)=\\"{
          name.set($event.target.value + ' and ' + person);
        }\\"
      />

      Hello {{person}} ! I can run in Qwik, Web Component, React, Vue, Solid, or
      Liquid! } }
    </div>
  \`,
  styles: \`:host { display: contents; }\`,
})
export class MyBasicForShowComponent {
  name = signal(\\"PatrickJS\\");
  names = signal([\\"Steve\\", \\"PatrickJS\\"]);

  constructor() {}
}
"
`;

exports[`Angular signals > jsx > Typescript Test > Basic Context 1`] = `
"import { Component, effect, signal } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

import { Injector, MyService, createInjector } from \\"@dummy/injection-js\\";

@Component({
  selector: \\"my-basic-component\\",
  standalone: true,
  imports: [CommonModule],
  template: \`
    <div>
      {{myService.method('hello') + name()}} Hello! I can run in React, Vue,
      Solid, or Liquid!

      <input (change)=\\"onChange\\" />
    </div>
  \`,
  styles: \`:host { display: contents; }\`,
})
export class MyBasicComponent {
  name = signal(\\"PatrickJS\\");

  onChange() {
    const change = this.myService.method(\\"change\\");
    console.log(change);
  }

  constructor(public myService: MyService) {}

  ngOnInit() {
    const hi = this.myService.method(\\"hi\\");
    console.log(hi);
    const bye = this.myService.method(\\"hi\\");
    console.log(bye);
  }
}
"
`;

exports[`Angular signals > jsx > Typescript Test > Basic OnMount Update 1`] = `
"import { Component, input, effect, signal } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

export interface Props {
  hi: string;
  bye: string;
}

@Component({
  selector: \\"my-basic-on-mount-update-component\\",
  standalone: true,
  imports: [CommonModule],
  template: \`
    <div>Hello {{name()}}</div>
  \`,
  styles: \`:host { display: contents; }\`,
})
export class MyBasicOnMountUpdateComponent {
  bye = input<Props[\\"bye\\"]>();
  hi = input<Props[\\"hi\\"]>();

  name = signal(\\"PatrickJS\\");
  names = signal([\\"Steve\\", \\"PatrickJS\\"]);

  constructor() {}

  ngOnInit() {
    this.name.set(\\"PatrickJS onInit\\" + this.hi());
    this.name.set(\\"PatrickJS onMount\\" + this.bye());
  }
}
"
`;

exports[`Angular signals > jsx > Typescript Test > Basic Outputs 1`] = `
"import { Component, output, input, effect, signal } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

@Component({
  selector: \\"my-basic-outputs-component\\",
  standalone: true,
  imports: [CommonModule],
  template: \`
    <div></div>
  \`,
  styles: \`:host { display: contents; }\`,
})
export class MyBasicOutputsComponent {
  message = input<any>();
  messageChange = output();
  event = output();

  name = signal(\\"PatrickJS\\");

  constructor() {}

  ngOnInit() {
    this.messageChange.emit(this.name());
    this.event.emit(this.message());
  }
}
"
`;

exports[`Angular signals > jsx > Typescript Test > Basic Outputs Meta 1`] = `
"/**
          useMetadata:
          {\\"outputs\\":[\\"onMessage\\",\\"onEvent\\"],\\"baz\\":\\"metadata inside component\\"}
          */

import { Component, output, input, effect, signal } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

@Component({
  selector: \\"my-basic-outputs-component\\",
  standalone: true,
  imports: [CommonModule],
  template: \`
    <div></div>
  \`,
  styles: \`:host { display: contents; }\`,
})
export class MyBasicOutputsComponent {
  message = input<any>();
  messageChange = output();
  event = output();

  name = signal(\\"PatrickJS\\");

  constructor() {}

  ngOnInit() {
    this.messageChange.emit(this.name());
    this.event.emit(this.message());
  }
}
"
`;

exports[`Angular signals > jsx > Typescript Test > BasicAttribute 1`] = `
"import { Component, effect } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

@Component({
  selector: \\"my-component\\",
  standalone: true,
  imports: [CommonModule],
  template: \`
    <input autocapitalize=\\"on\\" autocomplete=\\"on\\" [attr.spellcheck]=\\"true\\" />
  \`,
  styles: \`:host { display: contents; }\`,
})
export class MyComponent {
  constructor() {}
}
"
`;

exports[`Angular signals > jsx > Typescript Test > BasicBooleanAttribute 1`] = `
"import { Component, input, effect } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

type Props = {
  children: any;
  type: string;
};

import { MyBooleanAttributeComponent } from \\"./basic-boolean-attribute-component.raw\\";

@Component({
  selector: \\"my-boolean-attribute\\",
  standalone: true,
  imports: [CommonModule, MyBooleanAttributeComponent],
  template: \`
    <div>
      @if(children()){
      <ng-content></ng-content>
      {{type()}} }
      <my-boolean-attribute-component
        [toggle]=\\"true\\"
      ></my-boolean-attribute-component>
      <my-boolean-attribute-component
        [toggle]=\\"true\\"
      ></my-boolean-attribute-component>
      <my-boolean-attribute-component
        [list]=\\"null\\"
      ></my-boolean-attribute-component>
    </div>
  \`,
  styles: \`:host { display: contents; }\`,
})
export class MyBooleanAttribute {
  type = input<Props[\\"type\\"]>();

  constructor() {}
}
"
`;

exports[`Angular signals > jsx > Typescript Test > BasicChildComponent 1`] = `
"import { Component, effect, signal } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

import { MyBasicOnMountUpdateComponent } from \\"./basic-onMount-update.raw\\";
import { MyBasicOutputsComponent } from \\"./basic-outputs.raw\\";
import { MyBasicComponent } from \\"./basic.raw\\";

@Component({
  selector: \\"my-basic-child-component\\",
  standalone: true,
  imports: [
    CommonModule,
    MyBasicComponent,
    MyBasicOnMountUpdateComponent,
    MyBasicOutputsComponent,
  ],
  template: \`
    <div>
      <my-basic-component [id]=\\"dev()\\"></my-basic-component>
      <div>
        <my-basic-on-mount-update-component
          [hi]=\\"name()\\"
          [bye]=\\"dev()\\"
        ></my-basic-on-mount-update-component>
        <my-basic-outputs-component
          message=\\"Test\\"
          (messageChange)=\\"name.set($event)\\"
          (event)=\\"log('Test')\\"
        ></my-basic-outputs-component>
      </div>
    </div>
  \`,
  styles: \`:host { display: contents; }\`,
})
export class MyBasicChildComponent {
  name = signal(\\"Steve\\");
  dev = signal(\\"PatrickJS\\");

  log(message: string) {
    console.log(message);
  }

  constructor() {}
}
"
`;

exports[`Angular signals > jsx > Typescript Test > BasicFor 1`] = `
"import { Component, effect, signal } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

@Component({
  selector: \\"my-basic-for-component\\",
  standalone: true,
  imports: [CommonModule],
  template: \`
    <div>
      @for (person of names();track i;let i = $index) {
      <ng-container>
        <input
          [attr.value]=\\"name()\\"
          (change)=\\"{
          name.set($event.target.value + ' and ' + person);
        }\\"
        />

        Hello {{person}} ! I can run in Qwik, Web Component, React, Vue, Solid,
        or Liquid!
      </ng-container>
      }
    </div>
  \`,
  styles: \`:host { display: contents; }\`,
})
export class MyBasicForComponent {
  name = signal(\\"PatrickJS\\");
  names = signal([\\"Steve\\", \\"PatrickJS\\"]);

  constructor() {}

  ngOnInit() {
    console.log(\\"onMount code\\");
  }
}
"
`;

exports[`Angular signals > jsx > Typescript Test > BasicRef 1`] = `
"import {
  Component,
  viewChild,
  ElementRef,
  input,
  effect,
  signal,
} from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

export interface Props {
  showInput: boolean;
}

@Component({
  selector: \\"my-basic-ref-component\\",
  standalone: true,
  imports: [CommonModule],
  template: \`
    <div>
      @if(showInput()){
      <ng-container>
        <input
          class=\\"input\\"
          #inputRef
          [attr.value]=\\"name()\\"
          (blur)=\\"onBlur()\\"
          (change)=\\"name.set($event.target.value)\\"
        />
        <label for=\\"cars\\" #inputNoArgRef>Choose a car:</label>
        <select name=\\"cars\\" id=\\"cars\\">
          <option value=\\"supra\\">GR Supra</option>
          <option value=\\"86\\">GR 86</option>
        </select>
      </ng-container>
      } Hello {{lowerCaseName()}} ! I can run in React, Qwik, Vue, Solid, or Web
      Component!
    </div>
  \`,
  styles: \`:host { display: contents; }
        .input {
          color: red;
        }
\`,
})
export class MyBasicRefComponent {
  showInput = input<Props[\\"showInput\\"]>();

  inputRef = viewChild<ElementRef>(\\"inputRef\\");
  inputNoArgRef = viewChild<ElementRef>(\\"inputNoArgRef\\");

  name = signal(\\"PatrickJS\\");

  onBlur() {
    // Maintain focus
    this.inputRef()?.nativeElement?.focus();
  }
  lowerCaseName() {
    return this.name().toLowerCase();
  }

  constructor() {}
}
"
`;

exports[`Angular signals > jsx > Typescript Test > BasicRefAssignment 1`] = `
"import { Component, effect } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

export interface Props {
  showInput: boolean;
}

@Component({
  selector: \\"my-basic-ref-assignment-component\\",
  standalone: true,
  imports: [CommonModule],
  template: \`
    <div><button (click)=\\"await handlerClick($event)\\">Click</button></div>
  \`,
  styles: \`:host { display: contents; }\`,
})
export class MyBasicRefAssignmentComponent {
  handlerClick(event: Event) {
    event.preventDefault();
    console.log(\\"current value\\", this._holdValueRef);
    this._holdValueRef = this._holdValueRef + \\"JS\\";
  }

  constructor() {}
}
"
`;

exports[`Angular signals > jsx > Typescript Test > BasicRefPrevious 1`] = `
"import { Component, effect, signal } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

export interface Props {
  showInput: boolean;
}

export function usePrevious<T>(value: T) {
  // The ref object is a generic container whose current property is mutable ...
  // ... and can hold any value, similar to an instance property on a class
  let ref = useRef<T>(null); // Store current value in ref

  onUpdate(() => {
    ref = value;
  }, [value]); // Only re-run if value changes
  // Return previous value (happens before update in useEffect above)

  return ref;
}

@Component({
  selector: \\"my-previous-component\\",
  standalone: true,
  imports: [CommonModule],
  template: \`
    <div>
      <h1>Now: {{count()}} , before: {{prevCount}}</h1>
      <button (click)=\\"count.set(1)\\">Increment</button>
    </div>
  \`,
  styles: \`:host { display: contents; }\`,
})
export class MyPreviousComponent {
  count = signal(0);

  constructor() {
    effect(
      () => {
        // --- Mitosis: Workaround to make sure the effect() is triggered ---
        this.count();
        // ---

        this._prevCount = this.count();
      },
      {
        allowSignalWrites: true, // Enable writing to signals inside effects
      }
    );
  }
}
"
`;

exports[`Angular signals > jsx > Typescript Test > Button 1`] = `
"import { Component, input, effect } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

export interface ButtonProps {
  attributes?: any;
  text?: string;
  link?: string;
  openLinkInNewTab?: boolean;
}

@Component({
  selector: \\"button\\",
  standalone: true,
  imports: [CommonModule],
  template: \`
    <div>
      @if(link()){
      <a
        [attr.href]=\\"link()\\"
        [attr.target]=\\"openLinkInNewTab() ? '_blank' : undefined\\"
      >
        {{text()}}
      </a>
      } @if(!link()){
      <button type=\\"button\\">{{text()}}</button>
      }
    </div>
  \`,
  styles: \`:host { display: contents; }\`,
})
export class Button {
  link = input<ButtonProps[\\"link\\"]>();
  attributes = input<ButtonProps[\\"attributes\\"]>();
  openLinkInNewTab = input<ButtonProps[\\"openLinkInNewTab\\"]>();
  text = input<ButtonProps[\\"text\\"]>();

  constructor() {}
}
"
`;

exports[`Angular signals > jsx > Typescript Test > Columns 1`] = `
"import { Component, input, effect } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

type Column = {
  content: any; // TODO: Implement this when support for dynamic CSS lands

  width?: number;
};
export interface ColumnProps {
  columns?: Column[]; // TODO: Implement this when support for dynamic CSS lands

  space?: number; // TODO: Implement this when support for dynamic CSS lands

  stackColumnsAt?: \\"tablet\\" | \\"mobile\\" | \\"never\\"; // TODO: Implement this when support for dynamic CSS lands

  reverseColumnsWhenStacked?: boolean;
}

@Component({
  selector: \\"column\\",
  standalone: true,
  imports: [CommonModule],
  template: \`
    <div class=\\"builder-columns div\\">
      @for (column of columns();track index;let index = $index) {
      <div class=\\"builder-column div-2\\">{{column.content}} {{index}}</div>
      }
    </div>
  \`,
  styles: \`:host { display: contents; }
        .div {
          display: flex;
          flex-direction: column;
          align-items: stretch;
          line-height: normal;
        }
        @media (max-width: 999px) {
          .div {
            flex-direction: row;
          }
        }
        @media (max-width: 639px) {
          .div {
            flex-direction: row-reverse;
          }
        }
        .div-2 {
          flex-grow: 1;
        }
\`,
})
export class Column {
  columns = input<ColumnProps[\\"columns\\"]>();
  space = input<ColumnProps[\\"space\\"]>();

  getColumns() {
    return this.columns() || [];
  }
  getGutterSize() {
    return typeof this.space() === \\"number\\" ? this.space() || 0 : 20;
  }
  getWidth(index: number) {
    const columns = this.getColumns();
    return (columns[index] && columns[index].width) || 100 / columns.length;
  }
  getColumnCssWidth(index: number) {
    const columns = this.getColumns();
    const gutterSize = this.getGutterSize();
    const subtractWidth = (gutterSize * (columns.length - 1)) / columns.length;
    return \`calc(\${this.getWidth(index)}% - \${subtractWidth}px)\`;
  }

  constructor() {}
}
"
`;

exports[`Angular signals > jsx > Typescript Test > ContentSlotHtml 1`] = `
"import { Component, input, effect } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

type Props = {
  [key: string]: string | JSX.Element;
  slotTesting: JSX.Element;
};

import type { JSX } from \\"../../../../jsx-runtime\\";

@Component({
  selector: \\"content-slot-code\\",
  standalone: true,
  imports: [CommonModule],
  template: \`
    <div>
      <ng-content select=\\"[testing]\\"></ng-content>
      <div><hr /></div>
      <div><ng-content></ng-content></div>
    </div>
  \`,
  styles: \`:host { display: contents; }\`,
})
export class ContentSlotCode {
  slotTesting = input<Props[\\"slotTesting\\"]>();

  constructor() {}
}
"
`;

exports[`Angular signals > jsx > Typescript Test > ContentSlotJSX 1`] = `
"import { Component, input, effect, signal, computed } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

type Props = {
  [key: string]: string | JSX.Element;
};
const defaultProps: any = {
  content: \\"\\",
  slotReference: undefined,
  slotContent: undefined,
};

import type { JSX } from \\"../../../../jsx-runtime\\";

@Component({
  selector: \\"content-slot-jsx-code\\",
  standalone: true,
  imports: [CommonModule],
  template: \`
    @if(slotReference()){
    <div
      [attr.name]=\\"slotContent() ? 'name1' : 'name2'\\"
      [attr.title]=\\"slotContent() ? 'title1' : 'title2'\\"
      (click)=\\"show()\\"
      [class]=\\"cls()\\"
    >
      @if(showContent() && slotContent()){
      <ng-content select=\\"[content]\\">{{content()}}</ng-content>
      }
      <div><hr /></div>
      <div><ng-content></ng-content></div>
    </div>
    }
  \`,
  styles: \`:host { display: contents; }\`,
})
export class ContentSlotJsxCode {
  slotContent = input<Props[\\"slotContent\\"]>(defaultProps[\\"slotContent\\"]);
  slotReference = input<Props[\\"slotReference\\"]>(defaultProps[\\"slotReference\\"]);
  attributes = input<Props[\\"attributes\\"]>();
  content = input<Props[\\"content\\"]>(defaultProps[\\"content\\"]);

  name = signal(\\"king\\");
  showContent = signal(false);

  cls = computed(() => {
    return this.slotContent() && this.children()
      ? \`\${this.name()}-content\`
      : \\"\\";
  });
  show() {
    this.slotContent() ? 1 : \\"\\";
  }

  constructor() {}
}
"
`;

exports[`Angular signals > jsx > Typescript Test > CustomCode 1`] = `
"import {
  Component,
  viewChild,
  ElementRef,
  input,
  effect,
  signal,
} from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";
import { DomSanitizer } from \\"@angular/platform-browser\\";

export interface CustomCodeProps {
  code: string;
  replaceNodes?: boolean;
}

@Component({
  selector: \\"custom-code\\",
  standalone: true,
  imports: [CommonModule],
  template: \`
    <div
      #elem
      [class]=\\"'builder-custom-code' + (replaceNodes() ? ' replace-nodes' : '')\\"
      [innerHTML]=\\"sanitizer.bypassSecurityTrustHtml(code())\\"
    ></div>
  \`,
  styles: \`:host { display: contents; }\`,
})
export class CustomCode {
  replaceNodes = input<CustomCodeProps[\\"replaceNodes\\"]>();
  code = input<CustomCodeProps[\\"code\\"]>();

  elem = viewChild<ElementRef>(\\"elem\\");

  scriptsInserted = signal([]);
  scriptsRun = signal([]);

  findAndRunScripts() {
    // TODO: Move this function to standalone one in '@builder.io/utils'
    if (this.elem()?.nativeElement && typeof window !== \\"undefined\\") {
      /** @type {HTMLScriptElement[]} */
      const scripts = this.elem()?.nativeElement.getElementsByTagName(\\"script\\");

      for (let i = 0; i < scripts.length; i++) {
        const script = scripts[i];

        if (script.src) {
          if (this.scriptsInserted().includes(script.src)) {
            continue;
          }

          this.scriptsInserted().push(script.src);
          const newScript = document.createElement(\\"script\\");
          newScript.async = true;
          newScript.src = script.src;
          document.head.appendChild(newScript);
        } else if (
          !script.type ||
          [
            \\"text/javascript\\",
            \\"application/javascript\\",
            \\"application/ecmascript\\",
          ].includes(script.type)
        ) {
          if (this.scriptsRun().includes(script.innerText)) {
            continue;
          }

          try {
            this.scriptsRun().push(script.innerText);
            new Function(script.innerText)();
          } catch (error) {
            console.warn(\\"\`CustomCode\`: Error running script:\\", error);
          }
        }
      }
    }
  }

  constructor(protected sanitizer: DomSanitizer) {}

  ngOnInit() {
    this.findAndRunScripts();
  }
}
"
`;

exports[`Angular signals > jsx > Typescript Test > Embed 1`] = `
"import {
  Component,
  viewChild,
  ElementRef,
  input,
  effect,
  signal,
} from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";
import { DomSanitizer } from \\"@angular/platform-browser\\";

export interface CustomCodeProps {
  code: string;
  replaceNodes?: boolean;
}

@Component({
  selector: \\"custom-code\\",
  standalone: true,
  imports: [CommonModule],
  template: \`
    <div
      #elem
      [class]=\\"'builder-custom-code' + (replaceNodes() ? ' replace-nodes' : '')\\"
      [innerHTML]=\\"sanitizer.bypassSecurityTrustHtml(code())\\"
    ></div>
  \`,
  styles: \`:host { display: contents; }\`,
})
export class CustomCode {
  replaceNodes = input<CustomCodeProps[\\"replaceNodes\\"]>();
  code = input<CustomCodeProps[\\"code\\"]>();

  elem = viewChild<ElementRef>(\\"elem\\");

  scriptsInserted = signal([]);
  scriptsRun = signal([]);

  findAndRunScripts() {
    // TODO: Move this function to standalone one in '@builder.io/utils'
    if (this.elem()?.nativeElement && typeof window !== \\"undefined\\") {
      /** @type {HTMLScriptElement[]} */
      const scripts = this.elem()?.nativeElement.getElementsByTagName(\\"script\\");

      for (let i = 0; i < scripts.length; i++) {
        const script = scripts[i];

        if (script.src) {
          if (this.scriptsInserted().includes(script.src)) {
            continue;
          }

          this.scriptsInserted().push(script.src);
          const newScript = document.createElement(\\"script\\");
          newScript.async = true;
          newScript.src = script.src;
          document.head.appendChild(newScript);
        } else if (
          !script.type ||
          [
            \\"text/javascript\\",
            \\"application/javascript\\",
            \\"application/ecmascript\\",
          ].includes(script.type)
        ) {
          if (this.scriptsRun().includes(script.innerText)) {
            continue;
          }

          try {
            this.scriptsRun().push(script.innerText);
            new Function(script.innerText)();
          } catch (error) {
            console.warn(\\"\`CustomCode\`: Error running script:\\", error);
          }
        }
      }
    }
  }

  constructor(protected sanitizer: DomSanitizer) {}

  ngOnInit() {
    this.findAndRunScripts();
  }
}
"
`;

exports[`Angular signals > jsx > Typescript Test > Form 1`] = `
"import {
  Component,
  viewChild,
  ElementRef,
  input,
  effect,
  signal,
  computed,
} from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

export interface FormProps {
  attributes?: any;
  name?: string;
  action?: string;
  validate?: boolean;
  method?: string;
  builderBlock?: BuilderElement;
  sendSubmissionsTo?: string;
  sendSubmissionsToEmail?: string;
  sendWithJs?: boolean;
  contentType?: string;
  customHeaders?: {
    [key: string]: string;
  };
  successUrl?: string;
  previewState?: FormState;
  successMessage?: BuilderElement[];
  errorMessage?: BuilderElement[];
  sendingMessage?: BuilderElement[];
  resetFormOnSubmit?: boolean;
  errorMessagePath?: string;
}
export type FormState = \\"unsubmitted\\" | \\"sending\\" | \\"success\\" | \\"error\\";

import { Builder, BuilderElement, builder } from \\"@builder.io/sdk\\";
import {
  BuilderBlock as BuilderBlockComponent,
  BuilderBlocks,
  get,
  set,
} from \\"@fake\\";

@Component({
  selector: \\"form-component\\",
  standalone: true,
  imports: [CommonModule, BuilderBlockComponent, BuilderBlocks],
  template: \`
    <form
      [attr.validate]=\\"validate()\\"
      #formRef
      [attr.action]=\\"!sendWithJs() && action()\\"
      [attr.method]=\\"method()\\"
      [attr.name]=\\"name()\\"
      (submit)=\\"onSubmit($event)\\"
    >
      @if(builderBlock() && builderBlock().children){ @for (block of
      builderBlock()?.children;track trackByBlock0;let index = $index) {
      <builder-block-component
        [block]=\\"block\\"
        [index]=\\"index\\"
      ></builder-block-component>
      } } @if(submissionState() === 'error'){
      <builder-blocks
        dataPath=\\"errorMessage\\"
        [blocks]=\\"errorMessage()!\\"
      ></builder-blocks>
      } @if(submissionState() === 'sending'){
      <builder-blocks
        dataPath=\\"sendingMessage\\"
        [blocks]=\\"sendingMessage()!\\"
      ></builder-blocks>
      } @if(submissionState() === 'error' && responseData()){
      <pre class=\\"builder-form-error-text pre\\">
        {{JSON.stringify(responseData(), null, 2)}}</pre
      >
      } @if(submissionState() === 'success'){
      <builder-blocks
        dataPath=\\"successMessage\\"
        [blocks]=\\"successMessage()!\\"
      ></builder-blocks>
      }
    </form>
  \`,
  styles: \`:host { display: contents; }
        .pre {
          padding: 10px;
          color: red;
          text-align: center;
        }
\`,
})
export class FormComponent {
  previewState = input<FormProps[\\"previewState\\"]>();
  sendWithJs = input<FormProps[\\"sendWithJs\\"]>();
  sendSubmissionsTo = input<FormProps[\\"sendSubmissionsTo\\"]>();
  action = input<FormProps[\\"action\\"]>();
  customHeaders = input<FormProps[\\"customHeaders\\"]>();
  contentType = input<FormProps[\\"contentType\\"]>();
  sendSubmissionsToEmail = input<FormProps[\\"sendSubmissionsToEmail\\"]>();
  name = input<FormProps[\\"name\\"]>();
  method = input<FormProps[\\"method\\"]>();
  errorMessagePath = input<FormProps[\\"errorMessagePath\\"]>();
  resetFormOnSubmit = input<FormProps[\\"resetFormOnSubmit\\"]>();
  successUrl = input<FormProps[\\"successUrl\\"]>();
  validate = input<FormProps[\\"validate\\"]>();
  attributes = input<FormProps[\\"attributes\\"]>();
  builderBlock = input<FormProps[\\"builderBlock\\"]>();
  errorMessage = input<FormProps[\\"errorMessage\\"]>();
  sendingMessage = input<FormProps[\\"sendingMessage\\"]>();
  successMessage = input<FormProps[\\"successMessage\\"]>();

  formRef = viewChild<ElementRef>(\\"formRef\\");

  formState = signal(\\"unsubmitted\\");
  responseData = signal(null);
  formErrorMessage = signal(\\"\\");

  submissionState = computed(() => {
    return (Builder.isEditing && this.previewState()) || this.formState();
  });
  onSubmit(
    event: Event & {
      currentTarget: HTMLFormElement;
    }
  ) {
    const sendWithJs =
      this.sendWithJs() || this.sendSubmissionsTo() === \\"email\\";

    if (this.sendSubmissionsTo() === \\"zapier\\") {
      event.preventDefault();
    } else if (sendWithJs) {
      if (!(this.action() || this.sendSubmissionsTo() === \\"email\\")) {
        event.preventDefault();
        return;
      }

      event.preventDefault();
      const el = event.currentTarget;
      const headers = this.customHeaders() || {};
      let body: any;
      const formData = new FormData(el); // TODO: maybe support null

      const formPairs: {
        key: string;
        value: File | boolean | number | string | FileList;
      }[] = Array.from(
        event.currentTarget.querySelectorAll(\\"input,select,textarea\\")
      )
        .filter((el) => !!(el as HTMLInputElement).name)
        .map((el) => {
          let value: any;
          const key = (el as HTMLImageElement).name;

          if (el instanceof HTMLInputElement) {
            if (el.type === \\"radio\\") {
              if (el.checked) {
                value = el.name;
                return {
                  key,
                  value,
                };
              }
            } else if (el.type === \\"checkbox\\") {
              value = el.checked;
            } else if (el.type === \\"number\\" || el.type === \\"range\\") {
              const num = el.valueAsNumber;

              if (!isNaN(num)) {
                value = num;
              }
            } else if (el.type === \\"file\\") {
              // TODO: one vs multiple files
              value = el.files;
            } else {
              value = el.value;
            }
          } else {
            value = (el as HTMLInputElement).value;
          }

          return {
            key,
            value,
          };
        });
      let contentType = this.contentType();

      if (this.sendSubmissionsTo() === \\"email\\") {
        contentType = \\"multipart/form-data\\";
      }

      Array.from(formPairs).forEach(({ value }) => {
        if (
          value instanceof File ||
          (Array.isArray(value) && value[0] instanceof File) ||
          value instanceof FileList
        ) {
          contentType = \\"multipart/form-data\\";
        }
      }); // TODO: send as urlEncoded or multipart by default
      // because of ease of use and reliability in browser API
      // for encoding the form?

      if (contentType !== \\"application/json\\") {
        body = formData;
      } else {
        // Json
        const json = {};
        Array.from(formPairs).forEach(({ value, key }) => {
          set(json, key, value);
        });
        body = JSON.stringify(json);
      }

      if (contentType && contentType !== \\"multipart/form-data\\") {
        if (
          /* Zapier doesn't allow content-type header to be sent from browsers */
          !(sendWithJs && this.action()?.includes(\\"zapier.com\\"))
        ) {
          headers[\\"content-type\\"] = contentType;
        }
      }

      const presubmitEvent = new CustomEvent(\\"presubmit\\", {
        detail: {
          body,
        },
      });

      if (this.formRef()?.nativeElement) {
        this.formRef()?.nativeElement.dispatchEvent(presubmitEvent);

        if (presubmitEvent.defaultPrevented) {
          return;
        }
      }

      this.formState.set(\\"sending\\");
      const formUrl = \`\${
        builder.env === \\"dev\\" ? \\"http://localhost:5000\\" : \\"https://builder.io\\"
      }/api/v1/form-submit?apiKey=\${builder.apiKey}&to=\${btoa(
        this.sendSubmissionsToEmail() || \\"\\"
      )}&name=\${encodeURIComponent(this.name() || \\"\\")}\`;
      fetch(
        this.sendSubmissionsTo() === \\"email\\" ? formUrl : this.action()!,
        /* TODO: throw error if no action URL */
        {
          body,
          headers,
          method: this.method() || \\"post\\",
        }
      ).then(
        async (res) => {
          let body;
          const contentType = res.headers.get(\\"content-type\\");

          if (contentType && contentType.indexOf(\\"application/json\\") !== -1) {
            body = await res.json();
          } else {
            body = await res.text();
          }

          if (!res.ok && this.errorMessagePath()) {
            /* TODO: allow supplying an error formatter function */
            let message = get(body, this.errorMessagePath());

            if (message) {
              if (typeof message !== \\"string\\") {
                /* TODO: ideally convert json to yaml so it woul dbe like
            error: - email has been taken */
                message = JSON.stringify(message);
              }

              this.formErrorMessage.set(message);
            }
          }

          this.responseData.set(body);
          this.formState.set(res.ok ? \\"success\\" : \\"error\\");

          if (res.ok) {
            const submitSuccessEvent = new CustomEvent(\\"submit:success\\", {
              detail: {
                res,
                body,
              },
            });

            if (this.formRef()?.nativeElement) {
              this.formRef()?.nativeElement.dispatchEvent(submitSuccessEvent);

              if (submitSuccessEvent.defaultPrevented) {
                return;
              }
              /* TODO: option to turn this on/off? */

              if (this.resetFormOnSubmit() !== false) {
                this.formRef()?.nativeElement.reset();
              }
            }
            /* TODO: client side route event first that can be preventDefaulted */

            if (this.successUrl()) {
              if (this.formRef()?.nativeElement) {
                const event = new CustomEvent(\\"route\\", {
                  detail: {
                    url: this.successUrl(),
                  },
                });
                this.formRef()?.nativeElement.dispatchEvent(event);

                if (!event.defaultPrevented) {
                  location.href = this.successUrl();
                }
              } else {
                location.href = this.successUrl();
              }
            }
          }
        },
        (err) => {
          const submitErrorEvent = new CustomEvent(\\"submit:error\\", {
            detail: {
              error: err,
            },
          });

          if (this.formRef()?.nativeElement) {
            this.formRef()?.nativeElement.dispatchEvent(submitErrorEvent);

            if (submitErrorEvent.defaultPrevented) {
              return;
            }
          }

          this.responseData.set(err);
          this.formState.set(\\"error\\");
        }
      );
    }
  }
  trackByBlock0(index: number, block: any) {
    return block.id;
  }

  constructor() {}
}
"
`;

exports[`Angular signals > jsx > Typescript Test > Image 1`] = `
"import {
  Component,
  viewChild,
  ElementRef,
  input,
  effect,
  signal,
} from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

// TODO: AMP Support?
export interface ImageProps {
  _class?: string;
  image: string;
  sizes?: string;
  lazy?: boolean;
  height?: number;
  width?: number;
  altText?: string;
  backgroundSize?: string;
  backgroundPosition?: string; // TODO: Support generating Builder.io and or Shopify \`srcset\`s when needed

  srcset?: string; // TODO: Implement support for custom aspect ratios

  aspectRatio?: number; // TODO: This might not work as expected in terms of positioning

  children?: any;
}

@Component({
  selector: \\"image\\",
  standalone: true,
  imports: [CommonModule],
  template: \`
    <div>
      <picture #pictureRef>
        @if(!useLazyLoading() || load()){
        <img
          [attr.alt]=\\"altText()\\"
          [attr.aria-role]=\\"altText() ? 'presentation' : undefined\\"
          [class]=\\"'builder-image' + (_class() ? ' ' + _class() : '') + ' img'\\"
          [attr.src]=\\"image()\\"
          (load)=\\"setLoaded()\\"
          [attr.srcset]=\\"srcset()\\"
          [attr.sizes]=\\"sizes()\\"
        />
        }
        <source [attr.srcset]=\\"srcset()\\" />
      </picture>
      <ng-content></ng-content>
    </div>
  \`,
  styles: \`:host { display: contents; }
        .img {
          opacity: 1;
          transition: opacity 0.2s ease-in-out;
          object-fit: cover;
          object-position: center;
        }
\`,
})
export class Image {
  lazy = input<ImageProps[\\"lazy\\"]>();
  altText = input<ImageProps[\\"altText\\"]>();
  _class = input<ImageProps[\\"_class\\"]>();
  image = input<ImageProps[\\"image\\"]>();
  srcset = input<ImageProps[\\"srcset\\"]>();
  sizes = input<ImageProps[\\"sizes\\"]>();

  pictureRef = viewChild<ElementRef>(\\"pictureRef\\");

  scrollListener = signal(null);
  imageLoaded = signal(false);
  load = signal(false);

  setLoaded() {
    this.imageLoaded.set(true);
  }
  useLazyLoading() {
    // TODO: Add more checks here, like testing for real web browsers
    return !!this.lazy() && this.isBrowser();
  }
  isBrowser() {
    return (
      typeof window !== \\"undefined\\" && window.navigator.product != \\"ReactNative\\"
    );
  }

  constructor() {}

  ngOnInit() {
    if (this.useLazyLoading()) {
      // throttled scroll capture listener
      const listener = () => {
        if (this.pictureRef()?.nativeElement) {
          const rect = this.pictureRef()?.nativeElement.getBoundingClientRect();
          const buffer = window.innerHeight / 2;

          if (rect.top < window.innerHeight + buffer) {
            this.load.set(true);
            this.scrollListener.set(null);
            window.removeEventListener(\\"scroll\\", listener);
          }
        }
      };

      this.scrollListener.set(listener);
      window.addEventListener(\\"scroll\\", listener, {
        capture: true,
        passive: true,
      });
      listener();
    }
  }

  ngOnDestroy() {
    if (this.scrollListener()) {
      window.removeEventListener(\\"scroll\\", this.scrollListener());
    }
  }
}
"
`;

exports[`Angular signals > jsx > Typescript Test > Image State 1`] = `
"import { Component, effect, signal } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

@Component({
  selector: \\"img-state-component\\",
  standalone: true,
  imports: [CommonModule],
  template: \`
    <div>
      @for (item of images();track itemIndex;let itemIndex = $index) {
      <ng-container>
        <img class=\\"custom-class\\" [attr.src]=\\"item\\" />
      </ng-container>
      }
    </div>
  \`,
  styles: \`:host { display: contents; }\`,
})
export class ImgStateComponent {
  canShow = signal(true);
  images = signal([\\"http://example.com/qwik.png\\"]);

  constructor() {}
}
"
`;

exports[`Angular signals > jsx > Typescript Test > Img 1`] = `
"import { Component, input, effect } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

export interface ImgProps {
  attributes?: any;
  imgSrc?: string;
  altText?: string;
  backgroundSize?: \\"cover\\" | \\"contain\\";
  backgroundPosition?:
    | \\"center\\"
    | \\"top\\"
    | \\"left\\"
    | \\"right\\"
    | \\"bottom\\"
    | \\"top left\\"
    | \\"top right\\"
    | \\"bottom left\\"
    | \\"bottom right\\";
}

import { Builder } from \\"@builder.io/sdk\\";

@Component({
  selector: \\"img-component\\",
  standalone: true,
  imports: [CommonModule],
  template: \`
    <img
      [ngStyle]=\\"{
          objectFit: backgroundSize() || 'cover',
          objectPosition: backgroundPosition() || 'center'
        }\\"
      [attr.alt]=\\"altText()\\"
      [attr.src]=\\"imgSrc()\\"
    />
  \`,
  styles: \`:host { display: contents; }\`,
})
export class ImgComponent {
  protected readonly Builder = Builder;

  backgroundSize = input<ImgProps[\\"backgroundSize\\"]>();
  backgroundPosition = input<ImgProps[\\"backgroundPosition\\"]>();
  attributes = input<ImgProps[\\"attributes\\"]>();
  imgSrc = input<ImgProps[\\"imgSrc\\"]>();
  altText = input<ImgProps[\\"altText\\"]>();

  constructor() {}
}
"
`;

exports[`Angular signals > jsx > Typescript Test > Input 1`] = `
"import { Component, output, input, effect } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

export interface FormInputProps {
  type?: string;
  attributes?: any;
  name?: string;
  value?: string;
  placeholder?: string;
  defaultValue?: string;
  required?: boolean;
  onChange?: (value: string) => void;
}

import { Builder } from \\"@builder.io/sdk\\";

@Component({
  selector: \\"form-input-component\\",
  standalone: true,
  imports: [CommonModule],
  template: \`
    <input
      [attr.placeholder]=\\"placeholder()\\"
      [attr.type]=\\"type()\\"
      [attr.name]=\\"name()\\"
      [attr.value]=\\"value()\\"
      [attr.defaultValue]=\\"defaultValue()\\"
      [attr.required]=\\"required()\\"
      (change)=\\"change()?.($event.target.value)\\"
    />
  \`,
  styles: \`:host { display: contents; }\`,
})
export class FormInputComponent {
  protected readonly Builder = Builder;

  attributes = input<FormInputProps[\\"attributes\\"]>();
  defaultValue = input<FormInputProps[\\"defaultValue\\"]>();
  placeholder = input<FormInputProps[\\"placeholder\\"]>();
  type = input<FormInputProps[\\"type\\"]>();
  name = input<FormInputProps[\\"name\\"]>();
  value = input<FormInputProps[\\"value\\"]>();
  required = input<FormInputProps[\\"required\\"]>();
  change = output<
    Parameters<Required<FormInputProps>[\\"onChange\\"]>[number] | void
  >();

  constructor() {}
}
"
`;

exports[`Angular signals > jsx > Typescript Test > InputParent 1`] = `
"import { Component, effect } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

import { FormInputComponent } from \\"./input.raw\\";

@Component({
  selector: \\"stepper\\",
  standalone: true,
  imports: [CommonModule, FormInputComponent],
  template: \`
    <form-input-component
      name=\\"kingzez\\"
      type=\\"text\\"
      (change)=\\"handleChange($event)\\"
    ></form-input-component>
  \`,
  styles: \`:host { display: contents; }\`,
})
export class Stepper {
  handleChange(value: string) {
    console.log(value);
  }

  constructor() {}
}
"
`;

exports[`Angular signals > jsx > Typescript Test > NestedStore 1`] = `
"import { Component, effect, signal } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

type MyStore = {
  _id?: string;
  _messageId?: string;
};

@Component({
  selector: \\"nested-store\\",
  standalone: true,
  imports: [CommonModule],
  template: \`
    <div [attr.id]=\\"_id()\\">
      Test

      <p [attr.id]=\\"_messageId()\\">Message</p>
    </div>
  \`,
  styles: \`:host { display: contents; }\`,
})
export class NestedStore {
  _id = signal<MyStore[\\"_id\\"]>(\\"abc\\");
  _messageId = signal<MyStore[\\"_messageId\\"]>(this._id() + \\"-message\\");

  constructor() {}
}
"
`;

exports[`Angular signals > jsx > Typescript Test > RawText 1`] = `
"import { Component, input, effect } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";
import { DomSanitizer } from \\"@angular/platform-browser\\";

export interface RawTextProps {
  attributes?: any;
  text?: string; // builderBlock?: any;
}

@Component({
  selector: \\"raw-text\\",
  standalone: true,
  imports: [CommonModule],
  template: \`
    <span
      [class]=\\"attributes()?.class || attributes()?.className\\"
      [innerHTML]=\\"sanitizer.bypassSecurityTrustHtml(text() || '')\\"
    ></span>
  \`,
  styles: \`:host { display: contents; }\`,
})
export class RawText {
  attributes = input<RawTextProps[\\"attributes\\"]>();
  text = input<RawTextProps[\\"text\\"]>();

  constructor(protected sanitizer: DomSanitizer) {}
}
"
`;

exports[`Angular signals > jsx > Typescript Test > Section 1`] = `
"import { Component, input, effect } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

export interface SectionProps {
  maxWidth?: number;
  attributes?: any;
  children?: any;
}

@Component({
  selector: \\"section-component\\",
  standalone: true,
  imports: [CommonModule],
  template: \`
    <section
      [ngStyle]=\\"maxWidth() && typeof maxWidth() === 'number' ? {
          maxWidth: maxWidth()
        } : undefined\\"
    >
      <ng-content></ng-content>
    </section>
  \`,
  styles: \`:host { display: contents; }\`,
})
export class SectionComponent {
  attributes = input<SectionProps[\\"attributes\\"]>();
  maxWidth = input<SectionProps[\\"maxWidth\\"]>();

  constructor() {}
}
"
`;

exports[`Angular signals > jsx > Typescript Test > Section 2`] = `
"import { Component, input, effect, signal } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

export interface SectionProps {
  maxWidth?: number;
  attributes?: any;
  children?: any;
}

@Component({
  selector: \\"section-state-component\\",
  standalone: true,
  imports: [CommonModule],
  template: \`
    @if(max()){ @for (item of items();track i;let i = $index) {
    <section
      [ngStyle]=\\"{
          maxWidth: item + max()
        }\\"
    >
      <ng-content></ng-content>
    </section>
    } }
  \`,
  styles: \`:host { display: contents; }\`,
})
export class SectionStateComponent {
  attributes = input<SectionProps[\\"attributes\\"]>();

  max = signal(42);
  items = signal([42]);

  constructor() {}
}
"
`;

exports[`Angular signals > jsx > Typescript Test > Select 1`] = `
"import { Component, input, effect } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

export interface FormSelectProps {
  options?: {
    name?: string;
    value: string;
  }[];
  attributes?: any;
  name?: string;
  value?: string;
  defaultValue?: string;
}

import { Builder } from \\"@builder.io/sdk\\";

@Component({
  selector: \\"select-component\\",
  standalone: true,
  imports: [CommonModule],
  template: \`
    <select
      [attr.value]=\\"value()\\"
      [attr.defaultValue]=\\"defaultValue()\\"
      [attr.name]=\\"name()\\"
    >
      @for (option of options();track index;let index = $index) {
      <option [attr.value]=\\"option.value\\" [attr.data-index]=\\"index\\">
        {{option.name || option.value}}
      </option>
      }
    </select>
  \`,
  styles: \`:host { display: contents; }\`,
})
export class SelectComponent {
  protected readonly Builder = Builder;

  attributes = input<FormSelectProps[\\"attributes\\"]>();
  value = input<FormSelectProps[\\"value\\"]>();
  defaultValue = input<FormSelectProps[\\"defaultValue\\"]>();
  name = input<FormSelectProps[\\"name\\"]>();
  options = input<FormSelectProps[\\"options\\"]>();

  constructor() {}
}
"
`;

exports[`Angular signals > jsx > Typescript Test > SlotDefault 1`] = `
"import { Component, effect } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

type Props = {
  [key: string]: string;
};

@Component({
  selector: \\"slot-code\\",
  standalone: true,
  imports: [CommonModule],
  template: \`
    <div>
      <ng-content>
        <div class=\\"default-slot\\">Default content</div>
      </ng-content>
    </div>
  \`,
  styles: \`:host { display: contents; }\`,
})
export class SlotCode {
  constructor() {}
}
"
`;

exports[`Angular signals > jsx > Typescript Test > SlotHtml 1`] = `
"import { Component, effect } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

type Props = {
  [key: string]: string;
};

import { ContentSlotCode } from \\"./content-slot-jsx.raw\\";

@Component({
  selector: \\"slot-code\\",
  standalone: true,
  imports: [CommonModule, ContentSlotCode],
  template: \`
    <div>
      <content-slot-code><ng-content></ng-content></content-slot-code>
    </div>
  \`,
  styles: \`:host { display: contents; }\`,
})
export class SlotCode {
  constructor() {}
}
"
`;

exports[`Angular signals > jsx > Typescript Test > SlotJsx 1`] = `
"import { Component, effect } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

type Props = {
  [key: string]: string;
};

import { ContentSlotCode } from \\"./content-slot-jsx.raw\\";

@Component({
  selector: \\"slot-code\\",
  standalone: true,
  imports: [CommonModule, ContentSlotCode],
  template: \`
    <div>
      <content-slot-code [slotTesting]=\\"<div>Hello</div>\\"></content-slot-code>
    </div>
  \`,
  styles: \`:host { display: contents; }\`,
})
export class SlotCode {
  constructor() {}
}
"
`;

exports[`Angular signals > jsx > Typescript Test > SlotNamed 1`] = `
"import { Component, effect } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

type Props = {
  [key: string]: string;
};

@Component({
  selector: \\"slot-code\\",
  standalone: true,
  imports: [CommonModule],
  template: \`
    <div>
      <ng-content select=\\"[my-awesome-slot]\\"></ng-content>
      <ng-content select=\\"[top]\\"></ng-content>
      <ng-content select=\\"[left]\\">Default left</ng-content>
      <ng-content>Default Child</ng-content>
    </div>
  \`,
  styles: \`:host { display: contents; }\`,
})
export class SlotCode {
  constructor() {}
}
"
`;

exports[`Angular signals > jsx > Typescript Test > Stamped.io 1`] = `
"import { Component, input, effect, signal } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

type SmileReviewsProps = {
  productId: string;
  apiKey: string;
};

import { kebabCase, snakeCase } from \\"lodash\\";

@Component({
  selector: \\"smile-reviews\\",
  standalone: true,
  imports: [CommonModule],
  template: \`
    <div [attr.data-user]=\\"name()\\">
      <button (click)=\\"showReviewPrompt.set(true)\\">Write a review</button>
      @if(showReviewPrompt() || 'asdf'){
      <input placeholder=\\"Email\\" />
      <input placeholder=\\"Title\\" class=\\"input\\" />
      <textarea
        placeholder=\\"How was your experience?\\"
        class=\\"textarea\\"
      ></textarea>
      <button
        class=\\"button\\"
        (click)=\\"{
          ev.preventDefault();
          showReviewPrompt.set(false);
        }\\"
      >
        Submit
      </button>
      } @for (review of reviews();track trackByReview0;let index = $index) {
      <div $name=\\"Review\\" class=\\"review\\">
        <img class=\\"img\\" [attr.src]=\\"review.avatar\\" />
        <div [class]=\\"showReviewPrompt() ? 'bg-primary' : 'bg-secondary'\\">
          <div>N: {{index}}</div>
          <div>{{review.author}}</div>
          <div>{{review.reviewMessage}}</div>
        </div>
      </div>
      }
    </div>
  \`,
  styles: \`:host { display: contents; }
        .input {
          display: block;
        }
        .textarea {
          display: block;
        }
        .button {
          display: block;
        }
        .review {
          margin: 10px;
          padding: 10px;
          background: white;
          display: flex;
          border-radius: 5px;
          box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
          -webkit-font-smoothing: antialiased;
        }
        .img {
          height: 30px;
          width: 30px;
          margin-right: 10px;
        }
\`,
})
export class SmileReviews {
  apiKey = input<SmileReviewsProps[\\"apiKey\\"]>();
  productId = input<SmileReviewsProps[\\"productId\\"]>();

  reviews = signal([]);
  name = signal(\\"test\\");
  showReviewPrompt = signal(false);

  kebabCaseValue() {
    return kebabCase(\\"testThat\\");
  }
  snakeCaseValue() {
    return snakeCase(\\"testThis\\");
  }
  trackByReview0(index: number, review: any) {
    return review.id;
  }

  constructor() {}

  ngOnInit() {
    fetch(
      \`https://stamped.io/api/widget/reviews?storeUrl=builder-io.myshopify.com&apiKey=\${
        this.apiKey() || \\"pubkey-8bbDq7W6w4sB3OWeM1HUy2s47702hM\\"
      }&productId=\${this.productId() || \\"2410511106127\\"}\`
    )
      .then((res) => res.json())
      .then((data) => {
        this.reviews.set(data.data);
      });
  }
}
"
`;

exports[`Angular signals > jsx > Typescript Test > StoreComment 1`] = `
"import { Component, effect, signal } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

@Component({
  selector: \\"string-literal-store\\",
  standalone: true,
  imports: [CommonModule],
  template: \`
    <ng-container>{{foo()}}</ng-container>
  \`,
  styles: \`:host { display: contents; }\`,
})
export class StringLiteralStore {
  foo = signal(true);

  bar() {}

  constructor() {}
}
"
`;

exports[`Angular signals > jsx > Typescript Test > StoreShadowVars 1`] = `
"import { Component, effect, signal } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

@Component({
  selector: \\"my-component\\",
  standalone: true,
  imports: [CommonModule],
  template: \`
    <ng-container>{{foo(errors())}}</ng-container>
  \`,
  styles: \`:host { display: contents; }\`,
})
export class MyComponent {
  errors = signal({});

  foo(errors) {
    return errors;
  }

  constructor() {}
}
"
`;

exports[`Angular signals > jsx > Typescript Test > StoreWithState 1`] = `
"import { Component, effect, signal } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

@Component({
  selector: \\"my-component\\",
  standalone: true,
  imports: [CommonModule],
  template: \`
    <ng-container>{{bar()}}</ng-container>
  \`,
  styles: \`:host { display: contents; }\`,
})
export class MyComponent {
  foo = signal(false);

  bar() {
    return this.foo();
  }

  constructor() {}
}
"
`;

exports[`Angular signals > jsx > Typescript Test > Submit 1`] = `
"import { Component, input, effect } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

export interface ButtonProps {
  attributes?: any;
  text?: string;
}

@Component({
  selector: \\"submit-button\\",
  standalone: true,
  imports: [CommonModule],
  template: \`
    <button type=\\"submit\\">{{text()}}</button>
  \`,
  styles: \`:host { display: contents; }\`,
})
export class SubmitButton {
  attributes = input<ButtonProps[\\"attributes\\"]>();
  text = input<ButtonProps[\\"text\\"]>();

  constructor() {}
}
"
`;

exports[`Angular signals > jsx > Typescript Test > Text 1`] = `
"import { Component, input, effect, signal } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";
import { DomSanitizer } from \\"@angular/platform-browser\\";

export interface TextProps {
  attributes?: any;
  rtlMode: boolean;
  text?: string;
  content?: string;
  builderBlock?: any;
}

import { Builder } from \\"@builder.io/sdk\\";

@Component({
  selector: \\"text\\",
  standalone: true,
  imports: [CommonModule],
  template: \`
    <div
      [attr.contentEditable]=\\"allowEditingText || undefined\\"
      [attr.data-name]=\\"{
          test: name() || 'any name'
        }\\"
      [innerHTML]=\\"sanitizer.bypassSecurityTrustHtml(text() || content() || name() || '<p class=&quot;text-lg&quot;>my name</p>')\\"
    ></div>
  \`,
  styles: \`:host { display: contents; }\`,
})
export class Text {
  text = input<TextProps[\\"text\\"]>();
  content = input<TextProps[\\"content\\"]>();

  name = signal(\\"Decadef20\\");

  constructor(protected sanitizer: DomSanitizer) {}
}
"
`;

exports[`Angular signals > jsx > Typescript Test > Textarea 1`] = `
"import { Component, input, effect } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

export interface TextareaProps {
  attributes?: any;
  name?: string;
  value?: string;
  defaultValue?: string;
  placeholder?: string;
}

@Component({
  selector: \\"textarea\\",
  standalone: true,
  imports: [CommonModule],
  template: \`
    <textarea
      [attr.placeholder]=\\"placeholder()\\"
      [attr.name]=\\"name()\\"
      [attr.value]=\\"value()\\"
      [attr.defaultValue]=\\"defaultValue()\\"
    ></textarea>
  \`,
  styles: \`:host { display: contents; }\`,
})
export class Textarea {
  attributes = input<TextareaProps[\\"attributes\\"]>();
  placeholder = input<TextareaProps[\\"placeholder\\"]>();
  name = input<TextareaProps[\\"name\\"]>();
  value = input<TextareaProps[\\"value\\"]>();
  defaultValue = input<TextareaProps[\\"defaultValue\\"]>();

  constructor() {}
}
"
`;

exports[`Angular signals > jsx > Typescript Test > UseValueAndFnFromStore 1`] = `
"import { Component, output, effect, signal } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

type MyProps = {
  onChange?: (active: boolean) => void;
};
type MyStore = {
  _id?: string;
  _active?: boolean;
  _do?: (id?: string) => void;
};

@Component({
  selector: \\"use-value-and-fn-from-store\\",
  standalone: true,
  imports: [CommonModule],
  template: \`
    <div>Test</div>
  \`,
  styles: \`:host { display: contents; }\`,
})
export class UseValueAndFnFromStore {
  change = output<Parameters<Required<MyProps>[\\"onChange\\"]>[number] | void>();

  _id = signal<MyStore[\\"_id\\"]>(\\"abc\\");
  _active = signal<MyStore[\\"_active\\"]>(false);

  _do(id?: string) {
    this._active.set(!!id);

    if (this.change) {
      this.change.emit(this._active());
    }
  }

  constructor() {
    effect(
      () => {
        if (this._do) {
          this._do(this._id());
        }
      },
      {
        allowSignalWrites: true, // Enable writing to signals inside effects
      }
    );
  }
}
"
`;

exports[`Angular signals > jsx > Typescript Test > Video 1`] = `
"import { Component, input, effect, computed } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

export interface VideoProps {
  attributes?: any;
  video?: string;
  autoPlay?: boolean;
  controls?: boolean;
  muted?: boolean;
  loop?: boolean;
  playsInline?: boolean;
  aspectRatio?: number;
  width?: number;
  height?: number;
  fit?: \\"contain\\" | \\"cover\\" | \\"fill\\";
  position?:
    | \\"center\\"
    | \\"top\\"
    | \\"left\\"
    | \\"right\\"
    | \\"bottom\\"
    | \\"top left\\"
    | \\"top right\\"
    | \\"bottom left\\"
    | \\"bottom right\\";
  posterImage?: string;
  lazyLoad?: boolean;
}

@Component({
  selector: \\"video\\",
  standalone: true,
  imports: [CommonModule],
  template: \`
    <video
      preload=\\"none\\"
      [ngStyle]=\\"objSpread_style_yxyiqh()\\"
      [attr.poster]=\\"posterImage()\\"
      [attr.autoplay]=\\"autoPlay()\\"
      [attr.muted]=\\"muted()\\"
      [attr.controls]=\\"controls()\\"
      [attr.loop]=\\"loop()\\"
    ></video>
  \`,
  styles: \`:host { display: contents; }\`,
})
export class Video {
  attributes = input<VideoProps[\\"attributes\\"]>();
  fit = input<VideoProps[\\"fit\\"]>();
  position = input<VideoProps[\\"position\\"]>();
  video = input<VideoProps[\\"video\\"]>();
  posterImage = input<VideoProps[\\"posterImage\\"]>();
  autoPlay = input<VideoProps[\\"autoPlay\\"]>();
  muted = input<VideoProps[\\"muted\\"]>();
  controls = input<VideoProps[\\"controls\\"]>();
  loop = input<VideoProps[\\"loop\\"]>();

  objSpread_style_yxyiqh = computed(() => {
    return {
      width: \\"100%\\",
      height: \\"100%\\",
      ...this.attributes()?.style,
      objectFit: this.fit(),
      objectPosition: this.position(),
      // Hack to get object fit to work as expected and
      // not have the video overflow
      borderRadius: 1,
    };
  });

  constructor() {}
}
"
`;

exports[`Angular signals > jsx > Typescript Test > allSpread 1`] = `
"import { Component, input, effect, signal } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

@Component({
  selector: \\"my-component\\",
  standalone: true,
  imports: [CommonModule],
  template: \`
    <div>
      Hello! I can run natively in React, Vue, Svelte, Qwik, and many more
      frameworks!
    </div>
  \`,
  styles: \`:host { display: contents; }\`,
})
export class MyComponent {
  attributes = input<any>();
  accessHere = input<any>();

  attrsUsingUseState = signal({
    hello: \\"world\\",
  });
  properties = signal({
    style: \\"color: blue\\",
    onClick: () => console.log(\\"pressed\\"),
  });
  specifics = signal({
    someSpecificState: \\"specific\\",
  });

  constructor() {}
}
"
`;

exports[`Angular signals > jsx > Typescript Test > arrowFunctionInUseStore 1`] = `
"import { Component, effect, signal } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

@Component({
  selector: \\"my-component\\",
  standalone: true,
  imports: [CommonModule],
  template: \`
    <div>Hello {{name()}}</div>
  \`,
  styles: \`:host { display: contents; }\`,
})
export class MyComponent {
  name = signal(\\"steve\\");

  setName(value) {
    this.name.set(value);
  }
  updateNameWithArrowFn(value) {
    this.name.set(value);
  }

  constructor() {}
}
"
`;

exports[`Angular signals > jsx > Typescript Test > basicForFragment 1`] = `
"import { Component, effect, signal } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

@Component({
  selector: \\"basic-for-fragment\\",
  standalone: true,
  imports: [CommonModule],
  template: \`
    <div>
      @for (option of ['a', 'b', 'c'];track trackByOption0;let i = $index) {
      <ng-container>
        <div>{{option}}</div>
      </ng-container>
      } @for (option of ['a', 'b', 'c'];track trackByOption1;let i = $index) {
      <ng-container>
        <div>{{option}}</div>
      </ng-container>
      }

      <select>
        @for (option of ['d', 'e', 'f'];track trackByOption2;let i = $index) {
        <option [attr.value]=\\"option\\">{{option}}</option>
        }
      </select>
    </div>
  \`,
  styles: \`:host { display: contents; }\`,
})
export class BasicForFragment {
  id = signal(\\"xyz\\");

  trackByOption0(_: number, option: any) {
    return \`key-\${option}\`;
  }
  trackByOption1(_: number, option: any) {
    return \`\${this.id()}-\${option}\`;
  }
  trackByOption2(_: number, option: any) {
    return \`\${this.id()}-\${option}\`;
  }

  constructor() {}
}
"
`;

exports[`Angular signals > jsx > Typescript Test > basicForNoTagReference 1`] = `
"import {
  Component,
  viewChild,
  ViewContainerRef,
  TemplateRef,
  input,
  effect,
  signal,
  computed,
} from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

@Component({
  selector: \\"my-basic-for-no-tag-ref-component\\",
  standalone: true,
  imports: [CommonModule],
  template: \`
    <ng-template #iconTemplate></ng-template>
    <ng-container
      *ngComponentOutlet=\\"
              TagNameGetter();
              content: myContent();
              \\"
    ></ng-container>
  \`,
  styles: \`:host { display: contents; }\`,
})
export class MyBasicForNoTagRefComponent {
  // Signal to store embedded views for dynamic components
  myContent = signal<any[]>([]);
  tagnamegetterTemplateRef = viewChild<TemplateRef<any>>(
    \\"tagnamegetterTemplate\\"
  );
  tagTemplateRef = viewChild<TemplateRef<any>>(\\"tagTemplate\\");
  tagnameTemplateRef = viewChild<TemplateRef<any>>(\\"tagnameTemplate\\");
  iconTemplateRef = viewChild<TemplateRef<any>>(\\"iconTemplate\\");

  actions = input<any>();

  name = signal(\\"VincentW\\");
  TagName = signal(\\"div\\");
  tag = signal(\\"span\\");

  TagNameGetter = computed(() => {
    return \\"span\\";
  });

  constructor(private viewContainer: ViewContainerRef) {}

  ngOnInit() {
    this.myContent.set([
      this.viewContainer.createEmbeddedView(this.tagnamegetterTemplateRef())
        .rootNodes,
      this.viewContainer.createEmbeddedView(this.tagTemplateRef()).rootNodes,
      this.viewContainer.createEmbeddedView(this.tagnameTemplateRef())
        .rootNodes,
      this.viewContainer.createEmbeddedView(this.iconTemplateRef()).rootNodes,
    ]);
  }
}
"
`;

exports[`Angular signals > jsx > Typescript Test > basicForwardRef 1`] = `
"import { Component, viewChild, ElementRef, input, effect, signal } from '@angular/core';
      import { CommonModule } from '@angular/common';



      export interface Props {
showInput: boolean;
inputRef: HTMLInputElement;
}








      @Component({
        selector: 'my-basic-forward-ref-component',standalone: true,imports: [CommonModule],template: \`<div>
          <input
            class=\\"input\\"
            #inputRef()
            [attr.value]=\\"name()\\"
            (change)=\\"name.set($event.target.value)\\"
          />
        </div>
\`,styles: \`:host { display: contents; }
        .input {
          color: red;
        }
\`
      })
      export class MyBasicForwardRefComponent {



        inputRef = input<Props[\\"inputRef\\"]>()


        props.inputRef = viewChild<ElementRef>(\\"props.inputRef\\")

         name= signal('PatrickJS')




        constructor() {

        }









      }"
`;

exports[`Angular signals > jsx > Typescript Test > basicForwardRefMetadata 1`] = `
"
          /**
          useMetadata:
          {\\"forwardRef\\":\\"inputRef\\"}
          */

          import { Component, viewChild, ElementRef, input, effect, signal } from '@angular/core';
      import { CommonModule } from '@angular/common';



      export interface Props {
showInput: boolean;
inputRef: HTMLInputElement;
}








      @Component({
        selector: 'my-basic-forward-ref-component',standalone: true,imports: [CommonModule],template: \`<div>
          <input
            class=\\"input\\"
            #inputRef()
            [attr.value]=\\"name()\\"
            (change)=\\"name.set($event.target.value)\\"
          />
        </div>
\`,styles: \`:host { display: contents; }
        .input {
          color: red;
        }
\`
      })
      export class MyBasicForwardRefComponent {



        inputRef = input<Props[\\"inputRef\\"]>()


        props.inputRef = viewChild<ElementRef>(\\"props.inputRef\\")

         name= signal('PatrickJS')




        constructor() {

        }









      }"
`;

exports[`Angular signals > jsx > Typescript Test > basicOnUpdateReturn 1`] = `
"import { Component, effect, signal } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

@Component({
  selector: \\"my-basic-on-update-return-component\\",
  standalone: true,
  imports: [CommonModule],
  template: \`
    <div>Hello! {{name()}}</div>
  \`,
  styles: \`:host { display: contents; }\`,
})
export class MyBasicOnUpdateReturnComponent {
  name = signal(\\"PatrickJS\\");

  constructor() {
    effect(
      () => {
        // --- Mitosis: Workaround to make sure the effect() is triggered ---
        this.name();
        // ---

        const controller = new AbortController();
        const signal = controller.signal;
        fetch(\\"https://patrickjs.com/api/resource.json\\", {
          signal,
        })
          .then((response) => response.json())
          .then((data) => {
            this.name.set(data.name);
          });
        return () => {
          if (!signal.aborted) {
            controller.abort();
          }
        };
      },
      {
        allowSignalWrites: true, // Enable writing to signals inside effects
      }
    );
  }
}
"
`;

exports[`Angular signals > jsx > Typescript Test > basicRefAttributePassing 1`] = `
"/**
          useMetadata:
          {\\"attributePassing\\":{\\"enabled\\":true}}
          */

import { Component, viewChild, ElementRef, effect } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

@Component({
  selector: \\"basic-ref-attribute-passing-component\\",
  standalone: true,
  imports: [CommonModule],
  template: \`
    <button #buttonRef #_root>Attribute Passing</button>
  \`,
  styles: \`:host { display: contents; }\`,
})
export class BasicRefAttributePassingComponent {
  buttonRef = viewChild<ElementRef>(\\"buttonRef\\");
  _root = viewChild<ElementRef>(\\"_root\\");

  constructor() {}

  /**
   * Passes \`aria-*\`, \`data-*\` & \`class\` attributes to correct child. Used in angular and stencil.
   * @param element  the ref for the component
   * @param customElementSelector  the custom element like \`my-component\`
   */
  private enableAttributePassing(
    element: HTMLElement | null,
    customElementSelector: string
  ) {
    const parent = element?.closest(customElementSelector);
    if (element && parent) {
      const attributes = parent.attributes;
      for (let i = 0; i < attributes.length; i++) {
        const attr = attributes.item(i);
        if (
          attr &&
          (attr.name.startsWith(\\"data-\\") || attr.name.startsWith(\\"aria-\\"))
        ) {
          element.setAttribute(attr.name, attr.value);
          parent.removeAttribute(attr.name);
        }
        if (attr && attr.name === \\"class\\") {
          const isWebComponent = attr.value.includes(\\"hydrated\\");
          const value = attr.value.replace(\\"hydrated\\", \\"\\").trim();
          const currentClass = element.getAttribute(\\"class\\");
          element.setAttribute(
            attr.name,
            \`\${currentClass ? \`\${currentClass} \` : \\"\\"}\${value}\`
          );
          if (isWebComponent) {
            // Stencil is using this class for lazy loading component
            parent.setAttribute(\\"class\\", \\"hydrated\\");
          } else {
            parent.removeAttribute(attr.name);
          }
        }
      }
    }
  }

  ngAfterViewInit() {
    const element: HTMLElement | null = this._root()?.nativeElement;
    this.enableAttributePassing(
      element,
      \\"basic-ref-attribute-passing-component\\"
    );
  }
}
"
`;

exports[`Angular signals > jsx > Typescript Test > basicRefAttributePassingCustomRef 1`] = `
"/**
          useMetadata:
          {\\"attributePassing\\":{\\"enabled\\":true,\\"customRef\\":\\"buttonRef\\"}}
          */

import { Component, viewChild, ElementRef, effect } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

@Component({
  selector: \\"basic-ref-attribute-passing-custom-ref-component\\",
  standalone: true,
  imports: [CommonModule],
  template: \`
    <div><button #buttonRef>Attribute Passing</button></div>
  \`,
  styles: \`:host { display: contents; }\`,
})
export class BasicRefAttributePassingCustomRefComponent {
  buttonRef = viewChild<ElementRef>(\\"buttonRef\\");

  constructor() {}

  /**
   * Passes \`aria-*\`, \`data-*\` & \`class\` attributes to correct child. Used in angular and stencil.
   * @param element  the ref for the component
   * @param customElementSelector  the custom element like \`my-component\`
   */
  private enableAttributePassing(
    element: HTMLElement | null,
    customElementSelector: string
  ) {
    const parent = element?.closest(customElementSelector);
    if (element && parent) {
      const attributes = parent.attributes;
      for (let i = 0; i < attributes.length; i++) {
        const attr = attributes.item(i);
        if (
          attr &&
          (attr.name.startsWith(\\"data-\\") || attr.name.startsWith(\\"aria-\\"))
        ) {
          element.setAttribute(attr.name, attr.value);
          parent.removeAttribute(attr.name);
        }
        if (attr && attr.name === \\"class\\") {
          const isWebComponent = attr.value.includes(\\"hydrated\\");
          const value = attr.value.replace(\\"hydrated\\", \\"\\").trim();
          const currentClass = element.getAttribute(\\"class\\");
          element.setAttribute(
            attr.name,
            \`\${currentClass ? \`\${currentClass} \` : \\"\\"}\${value}\`
          );
          if (isWebComponent) {
            // Stencil is using this class for lazy loading component
            parent.setAttribute(\\"class\\", \\"hydrated\\");
          } else {
            parent.removeAttribute(attr.name);
          }
        }
      }
    }
  }

  ngAfterViewInit() {
    const element: HTMLElement | null = this.buttonRef()?.nativeElement;
    this.enableAttributePassing(
      element,
      \\"basic-ref-attribute-passing-custom-ref-component\\"
    );
  }
}
"
`;

exports[`Angular signals > jsx > Typescript Test > changeDetection 1`] = `
"/**
          useMetadata:
          {\\"angular\\":{\\"changeDetection\\":\\"OnPush\\"}}
          */

import {
  Component,
  input,
  effect,
  ChangeDetectionStrategy,
} from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

@Component({
  selector: \\"my-component\\",
  standalone: true,
  imports: [CommonModule],
  template: \`
    <div>{{count()}}</div>
  \`,
  changeDetection: ChangeDetectionStrategy.OnPush,
  styles: \`:host { display: contents; }\`,
})
export class MyComponent {
  count = input<any>();

  constructor() {}
}
"
`;

exports[`Angular signals > jsx > Typescript Test > class + ClassName + css 1`] = `
"import { Component, effect } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

import { MyComp } from \\"./my-component.lite\\";

@Component({
  selector: \\"my-basic-component\\",
  standalone: true,
  imports: [CommonModule, MyComp],
  template: \`
    <div>
      <my-comp class=\\"test\\" className=\\"test2\\">
        Hello! I can run in React, Vue, Solid, or Liquid!
      </my-comp>
      <div class=\\"test2 test div\\">
        Hello! I can run in React, Vue, Solid, or Liquid!
      </div>
    </div>
  \`,
  styles: \`:host { display: contents; }
        .div {
          padding: 10px;
        }
\`,
})
export class MyBasicComponent {
  constructor() {}
}
"
`;

exports[`Angular signals > jsx > Typescript Test > class + css 1`] = `
"import { Component, effect } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

@Component({
  selector: \\"my-basic-component\\",
  standalone: true,
  imports: [CommonModule],
  template: \`
    <div class=\\"test div\\">
      Hello! I can run in React, Vue, Solid, or Liquid!
    </div>
  \`,
  styles: \`:host { display: contents; }
        .div {
          padding: 10px;
        }
\`,
})
export class MyBasicComponent {
  constructor() {}
}
"
`;

exports[`Angular signals > jsx > Typescript Test > className + css 1`] = `
"import { Component, effect } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

@Component({
  selector: \\"my-basic-component\\",
  standalone: true,
  imports: [CommonModule],
  template: \`
    <div class=\\"test div\\">
      Hello! I can run in React, Vue, Solid, or Liquid!
    </div>
  \`,
  styles: \`:host { display: contents; }
        .div {
          padding: 10px;
        }
\`,
})
export class MyBasicComponent {
  constructor() {}
}
"
`;

exports[`Angular signals > jsx > Typescript Test > className 1`] = `
"import { Component, effect, signal } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

type Props = {
  [key: string]: string | JSX.Element;
  slotTesting: JSX.Element;
};

import type { JSX } from \\"../../../../jsx-runtime\\";

@Component({
  selector: \\"class-name-code\\",
  standalone: true,
  imports: [CommonModule],
  template: \`
    <div>
      <div class=\\"no binding\\">Without Binding</div>
      <div [class]=\\"bindings()\\">With binding</div>
    </div>
  \`,
  styles: \`:host { display: contents; }\`,
})
export class ClassNameCode {
  bindings = signal(\\"a binding\\");

  constructor() {}
}
"
`;

exports[`Angular signals > jsx > Typescript Test > classState 1`] = `
"import { Component, effect, signal } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

@Component({
  selector: \\"my-basic-component\\",
  standalone: true,
  imports: [CommonModule],
  template: \`
    <div [class]=\\"classState() + ' div'\\" [ngStyle]=\\"styleState()\\">
      Hello! I can run in React, Vue, Solid, or Liquid!
    </div>
  \`,
  styles: \`:host { display: contents; }
        .div {
          padding: 10px;
        }
\`,
})
export class MyBasicComponent {
  classState = signal(\\"testClassName\\");
  styleState = signal({
    color: \\"red\\",
  });

  constructor() {}
}
"
`;

exports[`Angular signals > jsx > Typescript Test > classnameProps 1`] = `
"/**
          useMetadata:
          {\\"stencil\\":{\\"propOptions\\":{\\"className\\":{\\"attribute\\":\\"classname\\",\\"mutable\\":false,\\"reflect\\":false}}}}
          */

import { Component, input, effect } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

type Props = {
  children: any;
  className: string;
  type: string;
};

@Component({
  selector: \\"my-basic-component\\",
  standalone: true,
  imports: [CommonModule],
  template: \`
    <div [class]=\\"className()\\">
      <ng-content></ng-content>
      {{type()}} Hello! I can run in React, Vue, Solid, or Liquid!
    </div>
  \`,
  styles: \`:host { display: contents; }\`,
})
export class MyBasicComponent {
  className = input<Props[\\"className\\"]>();
  type = input<Props[\\"type\\"]>();

  constructor() {}
}
"
`;

exports[`Angular signals > jsx > Typescript Test > complexMeta 1`] = `
"/**
          useMetadata:
          {\\"x\\":\\"y\\",\\"asdf\\":{\\"stringValue\\":\\"d\\",\\"booleanValue\\":true,\\"numberValue\\":1,\\"innerObject\\":{\\"stringValue\\":\\"inner\\",\\"numberValue\\":2,\\"booleanValue\\":false},\\"spreadStringValue\\":\\"f\\"}}
          */

import { Component, effect } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

@Component({
  selector: \\"complex-meta-raw\\",
  standalone: true,
  imports: [CommonModule],
  template: \`
    <div></div>
  \`,
  styles: \`:host { display: contents; }\`,
})
export class ComplexMetaRaw {
  constructor() {}
}
"
`;

exports[`Angular signals > jsx > Typescript Test > componentWithContext 1`] = `
"import { Component, input, effect } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

export interface ComponentWithContextProps {
  content: string;
}

import Context1 from \\"@dummy/1\\";
import Context2 from \\"@dummy/2\\";

@Component({
  selector: \\"component-with-context\\",
  standalone: true,
  imports: [CommonModule],
  template: \`
    <ng-container>
      <ng-container>{{foo.value}}</ng-container>
    </ng-container>
  \`,
  styles: \`:host { display: contents; }\`,
})
export class ComponentWithContext {
  content = input<ComponentWithContextProps[\\"content\\"]>();

  constructor(public foo: Context1) {}
}
"
`;

exports[`Angular signals > jsx > Typescript Test > componentWithContextMultiRoot 1`] = `
"import { Component, input, effect } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

export interface ComponentWithContextProps {
  content: string;
}

import Context1 from \\"@dummy/1\\";
import Context2 from \\"@dummy/2\\";

@Component({
  selector: \\"component-with-context\\",
  standalone: true,
  imports: [CommonModule],
  template: \`
    <ng-container>
      <ng-container>{{foo.value}}</ng-container>
      <div>other</div>
    </ng-container>
  \`,
  styles: \`:host { display: contents; }\`,
})
export class ComponentWithContext {
  content = input<ComponentWithContextProps[\\"content\\"]>();

  constructor(public foo: Context1) {}
}
"
`;

exports[`Angular signals > jsx > Typescript Test > contentState 1`] = `
"import { Component, input, effect } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

import BuilderContext from \\"@dummy/context.js\\";

@Component({
  selector: \\"render-content\\",
  standalone: true,
  imports: [CommonModule],
  template: \`
    <div>setting context</div>
  \`,
  styles: \`:host { display: contents; }\`,
})
export class RenderContent {
  content = input<any>();
  customComponents = input<any>();

  constructor() {}
}
"
`;

exports[`Angular signals > jsx > Typescript Test > customSelector 1`] = `
"/**
          useMetadata:
          {\\"angular\\":{\\"selector\\":\\"not-my-component\\"}}
          */

import { Component, effect } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

@Component({
  selector: \\"my-component\\",
  standalone: true,
  imports: [CommonModule],
  template: \`
    <span>My selector shouldn't be my-component!</span>
  \`,
  styles: \`:host { display: contents; }\`,
})
export class MyComponent {
  constructor() {}
}
"
`;

exports[`Angular signals > jsx > Typescript Test > defaultProps 1`] = `
"import { Component, output, input, effect } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

export interface ButtonProps {
  attributes?: any;
  text?: string;
  buttonText?: string; // no default value

  link?: string;
  openLinkInNewTab?: boolean;
  onClick?: () => void;
}
const defaultProps: any = {
  text: \\"default text\\",
  link: \\"https://builder.io/\\",
  openLinkInNewTab: false,
  onClick: () => {
    console.log(\\"hi\\");
  },
};

@Component({
  selector: \\"button\\",
  standalone: true,
  imports: [CommonModule],
  template: \`
    <div>
      @if(link()){
      <a
        [attr.href]=\\"link()\\"
        [attr.target]=\\"openLinkInNewTab() ? '_blank' : undefined\\"
      >
        {{text()}}
      </a>
      } @if(!link()){
      <button type=\\"button\\" (click)=\\"click()\\">{{buttonText()}}</button>
      }
    </div>
  \`,
  styles: \`:host { display: contents; }\`,
})
export class Button {
  link = input<ButtonProps[\\"link\\"]>(defaultProps[\\"link\\"]);
  attributes = input<ButtonProps[\\"attributes\\"]>();
  openLinkInNewTab = input<ButtonProps[\\"openLinkInNewTab\\"]>(
    defaultProps[\\"openLinkInNewTab\\"]
  );
  text = input<ButtonProps[\\"text\\"]>(defaultProps[\\"text\\"]);
  buttonText = input<ButtonProps[\\"buttonText\\"]>();
  click = output<Parameters<Required<ButtonProps>[\\"onClick\\"]>[number] | void>();

  constructor() {}
}
"
`;

exports[`Angular signals > jsx > Typescript Test > defaultPropsOutsideComponent 1`] = `
"import { Component, output, input, effect } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

export interface ButtonProps {
  attributes?: any;
  text?: string;
  link?: string;
  openLinkInNewTab?: boolean;
  onClick: () => void;
}
const defaultProps: any = {
  text: \\"default text\\",
  link: \\"https://builder.io/\\",
  openLinkInNewTab: false,
  onClick: () => {},
};

@Component({
  selector: \\"button\\",
  standalone: true,
  imports: [CommonModule],
  template: \`
    <div>
      @if(link()){
      <a
        [attr.href]=\\"link()\\"
        [attr.target]=\\"openLinkInNewTab() ? '_blank' : undefined\\"
      >
        {{text()}}
      </a>
      } @if(!link()){
      <button type=\\"button\\" (click)=\\"click($event)\\">{{text()}}</button>
      }
    </div>
  \`,
  styles: \`:host { display: contents; }\`,
})
export class Button {
  link = input<ButtonProps[\\"link\\"]>(defaultProps[\\"link\\"]);
  attributes = input<ButtonProps[\\"attributes\\"]>();
  openLinkInNewTab = input<ButtonProps[\\"openLinkInNewTab\\"]>(
    defaultProps[\\"openLinkInNewTab\\"]
  );
  text = input<ButtonProps[\\"text\\"]>(defaultProps[\\"text\\"]);
  click = output<Parameters<Required<ButtonProps>[\\"onClick\\"]>[number] | void>();

  constructor() {}
}
"
`;

exports[`Angular signals > jsx > Typescript Test > defaultValsWithTypes 1`] = `
"import { Component, input, effect } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

type Props = {
  name: string;
};

const DEFAULT_VALUES: Props = {
  name: \\"Sami\\",
};

@Component({
  selector: \\"component-with-types\\",
  standalone: true,
  imports: [CommonModule],
  template: \`
    <div>Hello {{name() || DEFAULT_VALUES.name}}</div>
  \`,
  styles: \`:host { display: contents; }\`,
})
export class ComponentWithTypes {
  protected readonly DEFAULT_VALUES = DEFAULT_VALUES;

  name = input<Props[\\"name\\"]>();

  constructor() {}
}
"
`;

exports[`Angular signals > jsx > Typescript Test > dynamicComponent 1`] = `
"import { Component, input, effect, signal, computed } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

@Component({
  selector: \\"my-component\\",
  standalone: true,
  imports: [CommonModule],
  template: \`
    <ng-container
      *ngComponentOutlet=\\"
              obj().Component;
        inputs: dynamicProps_37i2pk();
              content: myContent();
              \\"
    ></ng-container>
  \`,
  styles: \`:host { display: contents; }\`,
})
export class MyComponent {
  attributes = input<any>();
  something = input<any>();

  obj = signal({
    name: \\"foo\\",
    Component: FooComponent,
  });

  dynamicProps_37i2pk = computed(() => {
    return {
      hello: \\"world\\",
      onClick: this.onClick.bind(this),
      ...this.attributes(),
      ...this.something(),
    };
  });
  onClick() {
    console.log(\\"hello\\");
  }

  constructor() {}
}
"
`;

exports[`Angular signals > jsx > Typescript Test > dynamicComponentWithEventArg 1`] = `
"import {
  Component,
  viewChild,
  ViewContainerRef,
  TemplateRef,
  input,
  effect,
  signal,
  computed,
} from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

@Component({
  selector: \\"my-component\\",
  standalone: true,
  imports: [CommonModule],
  template: \`
    <ng-template #componentTemplate>hello</ng-template>
    <ng-container
      *ngComponentOutlet=\\"
              Component();
        inputs: dynamicProps_37i2pk();
              content: myContent();
              \\"
    ></ng-container>
  \`,
  styles: \`:host { display: contents; }\`,
})
export class MyComponent {
  // Signal to store embedded views for dynamic components
  myContent = signal<any[]>([]);
  componentTemplateRef = viewChild<TemplateRef<any>>(\\"componentTemplate\\");

  attributes = input<any>();
  something = input<any>();

  Component = signal(HelloComponent);

  dynamicProps_37i2pk = computed(() => {
    return {
      hello: \\"world\\",
      onClick: this.onClick.bind(this),
      ...this.attributes(),
      ...this.something(),
    };
  });
  onClick(event: any) {
    console.log(\\"hello\\", event);
  }

  constructor(private viewContainer: ViewContainerRef) {}

  ngOnInit() {
    this.myContent.set([
      this.viewContainer.createEmbeddedView(this.componentTemplateRef())
        .rootNodes,
    ]);
  }
}
"
`;

exports[`Angular signals > jsx > Typescript Test > eventInputAndChange 1`] = `
"import { Component, effect, signal } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

@Component({
  selector: \\"event-input-and-change\\",
  standalone: true,
  imports: [CommonModule],
  template: \`
    <div>
      <input
        class=\\"input\\"
        [attr.value]=\\"name()\\"
        (input)=\\"name.set($event.target.value)\\"
        (change)=\\"name.set($event.target.value)\\"
      />

      Hello! I can run in React, Vue, Solid, or Liquid!
    </div>
  \`,
  styles: \`:host { display: contents; }
        .input {
          color: red;
        }
\`,
})
export class EventInputAndChange {
  name = signal(\\"Steve\\");

  constructor() {}
}
"
`;

exports[`Angular signals > jsx > Typescript Test > eventProps 1`] = `
"import { Component, output, effect } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

import { EventProps, EventState } from \\"./event-props.type\\";

@Component({
  selector: \\"event-props-component\\",
  standalone: true,
  imports: [CommonModule],
  template: \`
    <button (click)=\\"handleClick()\\">Test</button>
  \`,
  styles: \`:host { display: contents; }\`,
})
export class EventPropsComponent {
  getVoid = output<
    Parameters<Required<EventProps>[\\"onGetVoid\\"]>[number] | void
  >();
  enter = output<Parameters<Required<EventProps>[\\"onEnter\\"]>[number] | void>();
  pass = output<Parameters<Required<EventProps>[\\"onPass\\"]>[number] | void>();

  handleClick() {
    if (this.getVoid) {
      this.getVoid.emit();
    }

    if (this.enter) {
      console.log(this.enter.emit());
    }

    if (this.pass) {
      this.pass.emit(\\"test\\");
    }
  }

  constructor() {}
}
"
`;

exports[`Angular signals > jsx > Typescript Test > expressionState 1`] = `
"import { Component, input, effect, signal } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

@Component({
  selector: \\"my-component\\",
  standalone: true,
  imports: [CommonModule],
  template: \`
    <div>{{refToUse()}}</div>
  \`,
  styles: \`:host { display: contents; }\`,
})
export class MyComponent {
  componentRef = input<any>();

  refToUse = signal(
    !(this.componentRef() instanceof Function) ? this.componentRef() : null
  );

  constructor() {}
}
"
`;

exports[`Angular signals > jsx > Typescript Test > figmaMeta 1`] = `
"/**
          useMetadata:
          {\\"figma\\":{\\"name\\":\\"def-button-beta-outlined\\",\\"url\\":\\"https://www.figma.com/xxx\\",\\"props\\":{\\"iconSmall\\":{\\"type\\":\\"instance\\",\\"key\\":\\"📍 Icon Small\\"},\\"iconMedium\\":{\\"type\\":\\"instance\\",\\"key\\":\\"📍 Icon Medium\\"},\\"label\\":{\\"type\\":\\"string\\",\\"key\\":\\"✏️ Label\\"},\\"icon\\":{\\"type\\":\\"boolean\\",\\"key\\":\\"👁️ Icon\\",\\"value\\":{\\"false\\":false,\\"true\\":\\"placeholder\\"}},\\"interactiveState\\":{\\"type\\":\\"enum\\",\\"key\\":\\"Interactive State\\",\\"value\\":{\\"(Def) Enabled\\":false,\\"Hovered\\":false,\\"Pressed\\":false,\\"Focused\\":false,\\"Disabled\\":\\"true\\"}},\\"size\\":{\\"type\\":\\"enum\\",\\"key\\":\\"Size\\",\\"value\\":{\\"(Def) Medium\\":false,\\"Small\\":\\"small\\"}},\\"width\\":{\\"type\\":\\"enum\\",\\"key\\":\\"Width\\",\\"value\\":{\\"(Def) Auto Width\\":false,\\"Full Width\\":\\"full\\"}}}}}
          */

import { Component, input, effect } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

@Component({
  selector: \\"figma-button\\",
  standalone: true,
  imports: [CommonModule],
  template: \`
    <button
      [attr.data-icon]=\\"icon()\\"
      [attr.data-disabled]=\\"interactiveState()\\"
      [attr.data-width]=\\"width()\\"
      [attr.data-size]=\\"size()\\"
    >
      {{label()}}
    </button>
  \`,
  styles: \`:host { display: contents; }\`,
})
export class FigmaButton {
  icon = input<any>();
  interactiveState = input<any>();
  width = input<any>();
  size = input<any>();
  label = input<any>();

  constructor() {}
}
"
`;

exports[`Angular signals > jsx > Typescript Test > functionProps 1`] = `
"import { Component, effect } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

export interface MyBasicComponentProps {
  id: string;
}

@Component({
  selector: \\"my-basic-component\\",
  standalone: true,
  imports: [CommonModule],
  template: \`
    <p
      [attr.f]=\\"() => x\\"
      [attr.f1]=\\"x => x\\"
      [attr.f2]=\\"x => {}\\"
      [attr.f3]=\\"function () {
          return x;
        }\\"
      [attr.f4]=\\"function (x) {
          return x;
        }\\"
      [attr.f5]=\\"function (x) {
          return;
        }\\"
      [attr.f6]=\\"function () {
          return;
        }\\"
      [attr.f7]=\\"(a, b, c) => a + b + c\\"
    ></p>
  \`,
  styles: \`:host { display: contents; }\`,
})
export class MyBasicComponent {
  constructor() {}
}
"
`;

exports[`Angular signals > jsx > Typescript Test > getterState 1`] = `
"import { Component, input, effect, computed } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

export interface ButtonProps {
  foo: string;
}

@Component({
  selector: \\"button\\",
  standalone: true,
  imports: [CommonModule],
  template: \`
    <div>
      <p>{{foo2()}}</p>
      <p>{{bar()}}</p>
      <p>{{baz(1)}}</p>
    </div>
  \`,
  styles: \`:host { display: contents; }\`,
})
export class Button {
  foo = input<ButtonProps[\\"foo\\"]>();

  foo2 = computed(() => {
    return this.foo() + \\"foo\\";
  });
  bar = computed(() => {
    return \\"bar\\";
  });
  baz(i: number) {
    return i + this.foo2().length;
  }

  constructor() {}
}
"
`;

exports[`Angular signals > jsx > Typescript Test > import types 1`] = `
"import { Component, input, effect } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

type RenderContentProps = {
  options?: GetContentOptions;
  content: BuilderContent;
  renderContentProps: RenderBlockProps;
};

import { BuilderContent, GetContentOptions } from \\"@builder.io/sdk\\";
import { RenderBlock } from \\"./builder-render-block.raw\\";

@Component({
  selector: \\"render-content\\",
  standalone: true,
  imports: [CommonModule, RenderBlock],
  template: \`
    <render-block></render-block>
  \`,
  styles: \`:host { display: contents; }\`,
})
export class RenderContent {
  renderContentProps = input<RenderContentProps[\\"renderContentProps\\"]>();

  getRenderContentProps(block, index) {
    return {
      block: block,
      index: index,
    };
  }

  constructor() {}
}
"
`;

exports[`Angular signals > jsx > Typescript Test > importRaw 1`] = `
"import { Component, effect } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

@Component({
  selector: \\"my-import-component\\",
  standalone: true,
  imports: [CommonModule],
  template: \`
    <div>Testing which imports get excluded!</div>
  \`,
  styles: \`:host { display: contents; }\`,
})
export class MyImportComponent {
  constructor() {}
}
"
`;

exports[`Angular signals > jsx > Typescript Test > layerName 1`] = `
"import { Component, effect } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

@Component({
  selector: \\"my-layer-name-component\\",
  standalone: true,
  imports: [CommonModule],
  template: \`
    <section>
      <div $name=\\"🌟layer-name\\" class=\\"layer-name\\">
        Hello! I can run in React, Vue, Solid, or Liquid!
      </div>
    </section>
  \`,
  styles: \`:host { display: contents; }
        .layer-name {
          padding: 10px;
        }
\`,
})
export class MyLayerNameComponent {
  constructor() {}
}
"
`;

exports[`Angular signals > jsx > Typescript Test > multipleOnUpdate 1`] = `
"import { Component, effect } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

@Component({
  selector: \\"multiple-on-update\\",
  standalone: true,
  imports: [CommonModule],
  template: \`
    <div></div>
  \`,
  styles: \`:host { display: contents; }\`,
})
export class MultipleOnUpdate {
  constructor() {
    effect(
      () => {
        console.log(\\"Runs on every update/rerender\\");
      },
      {
        allowSignalWrites: true, // Enable writing to signals inside effects
      }
    );
    effect(
      () => {
        console.log(\\"Runs on every update/rerender as well\\");
      },
      {
        allowSignalWrites: true, // Enable writing to signals inside effects
      }
    );
  }
}
"
`;

exports[`Angular signals > jsx > Typescript Test > multipleOnUpdateWithDeps 1`] = `
"import { Component, effect, signal } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

@Component({
  selector: \\"multiple-on-update-with-deps\\",
  standalone: true,
  imports: [CommonModule],
  template: \`
    <div></div>
  \`,
  styles: \`:host { display: contents; }\`,
})
export class MultipleOnUpdateWithDeps {
  a = signal(\\"a\\");
  b = signal(\\"b\\");
  c = signal(\\"c\\");
  d = signal(\\"d\\");

  constructor() {
    effect(
      () => {
        // --- Mitosis: Workaround to make sure the effect() is triggered ---
        this.a();
        this.b();
        // ---

        console.log(\\"Runs when a or b changes\\", this.a(), this.b());

        if (this.a() === \\"a\\") {
          this.a.set(\\"b\\");
        }
      },
      {
        allowSignalWrites: true, // Enable writing to signals inside effects
      }
    );
    effect(
      () => {
        // --- Mitosis: Workaround to make sure the effect() is triggered ---
        this.c();
        this.d();
        // ---

        console.log(\\"Runs when c or d changes\\", this.c(), this.d());

        if (this.a() === \\"a\\") {
          this.a.set(\\"b\\");
        }
      },
      {
        allowSignalWrites: true, // Enable writing to signals inside effects
      }
    );
  }
}
"
`;

exports[`Angular signals > jsx > Typescript Test > multipleSpreads 1`] = `
"import { Component, effect, signal } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

@Component({
  selector: \\"my-basic-component\\",
  standalone: true,
  imports: [CommonModule],
  template: \`
    <input />
  \`,
  styles: \`:host { display: contents; }\`,
})
export class MyBasicComponent {
  attrs = signal({
    hello: \\"world\\",
  });

  constructor() {}
}
"
`;

exports[`Angular signals > jsx > Typescript Test > nativeAttributes 1`] = `
"/**
          useMetadata:
          {\\"angular\\":{\\"nativeAttributes\\":[\\"disabled\\"]}}
          */

import { Component, input, effect } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

@Component({
  selector: \\"my-component\\",
  standalone: true,
  imports: [CommonModule],
  template: \`
    <div>
      <input [disabled]=\\"disabled()\\" />

      Hello! If someone passes \\\\\`[disabled]=\\"false\\"\\\\\` to me, disabled shouldn't
      be visible in the DOM.
    </div>
  \`,
  styles: \`:host { display: contents; }\`,
})
export class MyComponent {
  disabled = input<any>();

  constructor() {}
}
"
`;

exports[`Angular signals > jsx > Typescript Test > nestedShow 1`] = `
"import { Component, input, effect } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

interface Props {
  conditionA: boolean;
  conditionB: boolean;
}

@Component({
  selector: \\"nested-show\\",
  standalone: true,
  imports: [CommonModule],
  template: \`
    @if(conditionA()){ @if(!conditionB()){
    <div>if condition A and condition B</div>
    }@else{
    <div>else-condition-B</div>
    } }@else{
    <div>else-condition-A</div>
    }
  \`,
  styles: \`:host { display: contents; }\`,
})
export class NestedShow {
  conditionA = input<Props[\\"conditionA\\"]>();
  conditionB = input<Props[\\"conditionB\\"]>();

  constructor() {}
}
"
`;

exports[`Angular signals > jsx > Typescript Test > nestedStyles 1`] = `
"import { Component, effect } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

@Component({
  selector: \\"nested-styles\\",
  standalone: true,
  imports: [CommonModule],
  template: \`
    <div class=\\"div\\">Hello world</div>
  \`,
  styles: \`:host { display: contents; }
        .div {
          display: flex;
          --bar: red;
          color: var(--bar);
        }
        @media (max-width: env(--mobile)) {
          .div {
            display: block;
          }
        }
        .div:hover {
          display: flex;
        }
        .div:active {
          display: inline;
        }
        .div .nested-selector {
          display: grid;
        }
        .div .nested-selector:hover {
          display: block;
        }
        .div.nested-selector:active {
          display: inline-block;
        }
\`,
})
export class NestedStyles {
  constructor() {}
}
"
`;

exports[`Angular signals > jsx > Typescript Test > normalizeLayerNames 1`] = `
"import { Component, effect } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

export interface MyNormalizedLayerNamesComponentProps {
  id: string;
}

@Component({
  selector: \\"my-normalized-layer-names-component\\",
  standalone: true,
  imports: [CommonModule],
  template: \`
    <section>
      <div $name=\\"🌟layer-name\\">Emoji</div>
      <div $name=\\"---\\">Dashes</div>
      <div $name=\\"CamelCase\\">CamelCase</div>
      <div $name=\\"123my@Class-Name!\\">Special chars</div>
      <div $name=\\"--my--@custom--name--\\">Special chars with dashes</div>
      <div $name=\\"0\\" class=\\"css-0\\">Single Number</div>
      <div $name=\\"123\\" class=\\"css-123\\">Multiple Numbers</div>
      <div $name=\\"name123\\" class=\\"name-123\\">Chars with numbers at end</div>
      <div $name=\\"456name\\" class=\\"name\\">Chars with numbers at start</div>
      <div $name=\\"name-789\\" class=\\"name-789\\">Numnbers separated by dash</div>
      <div $name=\\"🚀\\">Emoji</div>
      <div data-name=\\"1\\" class=\\"div\\">Number</div>
    </section>
  \`,
  styles: \`:host { display: contents; }
        .css-0 {
          margin: 10px;
        }
        .css-123 {
          padding: 10px;
        }
        .name-123 {
          border: 1px solid;
        }
        .name {
          color: red;
        }
        .name-789 {
          background: blue;
        }
        .div {
          background: blue;
        }
\`,
})
export class MyNormalizedLayerNamesComponent {
  constructor() {}
}
"
`;

exports[`Angular signals > jsx > Typescript Test > onEvent 1`] = `
"import { Component, viewChild, ElementRef, effect } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

@Component({
  selector: \\"embed\\",
  standalone: true,
  imports: [CommonModule],
  template: \`
    <div class=\\"builder-embed\\" #elem><div>Test</div></div>
  \`,
  styles: \`:host { display: contents; }\`,
})
export class Embed {
  elem = viewChild<ElementRef>(\\"elem\\");

  foo(event) {
    console.log(\\"test2\\");
  }

  constructor() {}

  ngOnInit() {
    this.elem()?.nativeElement.dispatchEvent(
      new CustomEvent(\\"initEditingBldr\\")
    );
  }
}
"
`;

exports[`Angular signals > jsx > Typescript Test > onInit & onMount 1`] = `
"import { Component, effect } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

@Component({
  selector: \\"on-init\\",
  standalone: true,
  imports: [CommonModule],
  template: \`
    <div></div>
  \`,
  styles: \`:host { display: contents; }\`,
})
export class OnInit {
  constructor() {}

  ngOnInit() {
    console.log(\\"onInit\\");
    console.log(\\"onMount\\");
  }
}
"
`;

exports[`Angular signals > jsx > Typescript Test > onInit 1`] = `
"import { Component, input, effect, signal } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

type Props = {
  name: string;
};

export const defaultValues = {
  name: \\"PatrickJS\\",
};

@Component({
  selector: \\"on-init\\",
  standalone: true,
  imports: [CommonModule],
  template: \`
    <div>Default name defined by parent {{name()}}</div>
  \`,
  styles: \`:host { display: contents; }\`,
})
export class OnInit {
  name = input<Props[\\"name\\"]>();

  name = signal(\\"\\");

  constructor() {}

  ngOnInit() {
    this.name.set(defaultValues.name || this.name());
    console.log(\\"set defaults with props\\");
  }
}
"
`;

exports[`Angular signals > jsx > Typescript Test > onInitPlain 1`] = `
"import { Component, effect } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

@Component({
  selector: \\"on-init-plain\\",
  standalone: true,
  imports: [CommonModule],
  template: \`
    <div></div>
  \`,
  styles: \`:host { display: contents; }\`,
})
export class OnInitPlain {
  constructor() {}

  ngOnInit() {
    console.log(\\"onInit\\");
  }
}
"
`;

exports[`Angular signals > jsx > Typescript Test > onMount 1`] = `
"import { Component, effect } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

@Component({
  selector: \\"comp\\",
  standalone: true,
  imports: [CommonModule],
  template: \`
    <div></div>
  \`,
  styles: \`:host { display: contents; }\`,
})
export class Comp {
  constructor() {}

  ngOnInit() {
    console.log(\\"Runs on mount\\");
  }

  ngOnDestroy() {
    console.log(\\"Runs on unMount\\");
  }
}
"
`;

exports[`Angular signals > jsx > Typescript Test > onMountMultiple 1`] = `
"import { Component, effect } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

@Component({
  selector: \\"comp\\",
  standalone: true,
  imports: [CommonModule],
  template: \`
    <div></div>
  \`,
  styles: \`:host { display: contents; }\`,
})
export class Comp {
  constructor() {}

  ngOnInit() {
    const onMountHook_0 = () => {
      console.log(\\"Runs on mount\\");
    };
    onMountHook_0();
    const onMountHook_1 = () => {
      console.log(\\"Another one runs on Mount\\");
    };
    onMountHook_1();
    const onMountHook_2 = () => {
      console.log(\\"SSR runs on Mount\\");
    };
    onMountHook_2();
  }
}
"
`;

exports[`Angular signals > jsx > Typescript Test > onUpdate 1`] = `
"import { Component, effect } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

@Component({
  selector: \\"on-update\\",
  standalone: true,
  imports: [CommonModule],
  template: \`
    <div></div>
  \`,
  styles: \`:host { display: contents; }\`,
})
export class OnUpdate {
  constructor() {
    effect(
      () => {
        console.log(\\"Runs on every update/rerender\\");
      },
      {
        allowSignalWrites: true, // Enable writing to signals inside effects
      }
    );
  }
}
"
`;

exports[`Angular signals > jsx > Typescript Test > onUpdateWithDeps 1`] = `
"import { Component, input, effect, signal } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

type Props = {
  size: string;
};

@Component({
  selector: \\"on-update-with-deps\\",
  standalone: true,
  imports: [CommonModule],
  template: \`
    <div></div>
  \`,
  styles: \`:host { display: contents; }\`,
})
export class OnUpdateWithDeps {
  size = input<Props[\\"size\\"]>();

  a = signal(\\"a\\");
  b = signal(\\"b\\");

  constructor() {
    effect(
      () => {
        // --- Mitosis: Workaround to make sure the effect() is triggered ---
        this.a();
        this.b();
        this.size();
        // ---

        console.log(
          \\"Runs when a, b or size changes\\",
          this.a(),
          this.b(),
          this.size()
        );
      },
      {
        allowSignalWrites: true, // Enable writing to signals inside effects
      }
    );
  }
}
"
`;

exports[`Angular signals > jsx > Typescript Test > outputEventBinding 1`] = `
"/**
          useMetadata:
          {\\"angular\\":{\\"nativeEvents\\":[\\"onFakeNative\\"]}}
          */

import { Component, effect, signal } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

@Component({
  selector: \\"my-component\\",
  standalone: true,
  imports: [CommonModule],
  template: \`
    <div>
      <input
        [attr.value]=\\"name()\\"
        (change)=\\"name.set($event.target.value)\\"
        (changeOrSomething)=\\"name.set($event.target.value)\\"
        (fakenative)=\\"name.set($event.target.value)\\"
        (animationend)=\\"name.set($event.target.value)\\"
      />

      Hello! I can run in React, Vue, Solid, or Liquid!
    </div>
  \`,
  styles: \`:host { display: contents; }\`,
})
export class MyComponent {
  name = signal(\\"Steve\\");

  constructor() {}
}
"
`;

exports[`Angular signals > jsx > Typescript Test > preserveExportOrLocalStatement 1`] = `
"import { Component, effect } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

type Types = {
  s: any[];
};
interface IPost {
  len: number;
}
export interface MyBasicComponentProps {
  id: string;
}

const b = 3;
const foo = () => {};
export const a = 3;
export const bar = () => {};
export function run<T>(value: T) {}

@Component({
  selector: \\"my-basic-component\\",
  standalone: true,
  imports: [CommonModule],
  template: \`
    <div></div>
  \`,
  styles: \`:host { display: contents; }\`,
})
export class MyBasicComponent {
  constructor() {}
}
"
`;

exports[`Angular signals > jsx > Typescript Test > preserveTyping 1`] = `
"import { Component, input, effect } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

export type A = \\"test\\";
export interface C {
  n: \\"test\\";
}
type B = \\"test2\\";
interface D {
  n: \\"test\\";
}
export interface MyBasicComponentProps {
  name: string;
  age?: number;
}

@Component({
  selector: \\"my-basic-component\\",
  standalone: true,
  imports: [CommonModule],
  template: \`
    <div>Hello! I can run in React, Vue, Solid, or Liquid! {{name()}}</div>
  \`,
  styles: \`:host { display: contents; }\`,
})
export class MyBasicComponent {
  name = input<MyBasicComponentProps[\\"name\\"]>();

  constructor() {}
}
"
`;

exports[`Angular signals > jsx > Typescript Test > propsDestructure 1`] = `
"import { Component, input, effect, signal } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

type Props = {
  children: any;
  type: string;
};

@Component({
  selector: \\"my-basic-component\\",
  standalone: true,
  imports: [CommonModule],
  template: \`
    <div>
      <ng-content></ng-content>
      {{type()}} Hello! I can run in React, Vue, Solid, or Liquid!
    </div>
  \`,
  styles: \`:host { display: contents; }\`,
})
export class MyBasicComponent {
  type = input<Props[\\"type\\"]>();

  name = signal(\\"Decadef20\\");

  constructor() {}
}
"
`;

exports[`Angular signals > jsx > Typescript Test > propsInterface 1`] = `
"import { Component, input, effect } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

interface Person {
  name: string;
  age?: number;
}

@Component({
  selector: \\"my-basic-component\\",
  standalone: true,
  imports: [CommonModule],
  template: \`
    <div>Hello! I can run in React, Vue, Solid, or Liquid! {{name()}}</div>
  \`,
  styles: \`:host { display: contents; }\`,
})
export class MyBasicComponent {
  name = input<Person | never[\\"name\\"]>();

  constructor() {}
}
"
`;

exports[`Angular signals > jsx > Typescript Test > propsType 1`] = `
"import { Component, input, effect } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

type Person = {
  name: string;
  age?: number;
};

@Component({
  selector: \\"my-basic-component\\",
  standalone: true,
  imports: [CommonModule],
  template: \`
    <div>Hello! I can run in React, Vue, Solid, or Liquid! {{name()}}</div>
  \`,
  styles: \`:host { display: contents; }\`,
})
export class MyBasicComponent {
  name = input<Person[\\"name\\"]>();

  constructor() {}
}
"
`;

exports[`Angular signals > jsx > Typescript Test > referencingFunInsideHook 1`] = `
"import { Component, effect } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

@Component({
  selector: \\"on-update\\",
  standalone: true,
  imports: [CommonModule],
  template: \`
    <div></div>
  \`,
  styles: \`:host { display: contents; }\`,
})
export class OnUpdate {
  foo(params) {}
  bar() {}
  zoo() {
    const params = {
      cb: this.bar,
    };
  }

  constructor() {
    effect(
      () => {
        this.foo({
          someOption: this.bar,
        });
      },
      {
        allowSignalWrites: true, // Enable writing to signals inside effects
      }
    );
  }
}
"
`;

exports[`Angular signals > jsx > Typescript Test > renderBlock 1`] = `
"import {
  Component,
  viewChild,
  ViewContainerRef,
  TemplateRef,
  input,
  effect,
  signal,
  computed,
} from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

export type RenderBlockProps = {
  block: BuilderBlock;
  context: BuilderContextInterface;
};

import { TARGET } from \\"../../constants/target.js\\";
import type {
  BuilderContextInterface,
  RegisteredComponent,
} from \\"../../context/types.js\\";
import { evaluate } from \\"../../functions/evaluate.js\\";
import { extractTextStyles } from \\"../../functions/extract-text-styles.js\\";
import { getBlockActions } from \\"../../functions/get-block-actions.js\\";
import { getBlockComponentOptions } from \\"../../functions/get-block-component-options.js\\";
import { getBlockProperties } from \\"../../functions/get-block-properties.js\\";
import { getBlockTag } from \\"../../functions/get-block-tag.js\\";
import { getProcessedBlock } from \\"../../functions/get-processed-block.js\\";
import { getReactNativeBlockStyles } from \\"../../functions/get-react-native-block-styles.js\\";
import type { BuilderBlock } from \\"../../types/builder-block.js\\";
import type { Nullable } from \\"../../types/typescript.js\\";
import { BlockStyles } from \\"./block-styles.lite\\";
import { isEmptyHtmlElement } from \\"./render-block.helpers.js\\";
import RenderComponentWithContext from \\"./render-component-with-context.js\\";
import type { RenderComponentProps } from \\"./render-component.js\\";
import RenderComponent from \\"./render-component.js\\";
import { RenderRepeatedBlock } from \\"./render-repeated-block.lite\\";
import type { RepeatData } from \\"./types.js\\";

@Component({
  selector: \\"render-block\\",
  standalone: true,
  imports: [CommonModule, RenderRepeatedBlock, RenderBlock, BlockStyles],
  template: \`
    <ng-template #rendercomponenttagTemplate></ng-template>
    @if(shouldWrap()){ @if(isEmptyHtmlElement(tag())){
    <ng-container
      *ngComponentOutlet=\\"
              tag();
        inputs: dynamicProps_ya7n4j();
              content: myContent();
              \\"
    ></ng-container>
    } @if(!isEmptyHtmlElement(tag()) && repeatItemData()){ @for (data of
    repeatItemData();track trackByData0;let index = $index) {
    <render-repeated-block
      [repeatContext]=\\"data.context\\"
      [block]=\\"data.block\\"
    ></render-repeated-block>
    } } @if(!isEmptyHtmlElement(tag()) && !repeatItemData()){
    <ng-container
      *ngComponentOutlet=\\"
              tag();
        inputs: dynamicProps_ya7n4j();
              content: myContent();
              \\"
    ></ng-container>
    } }@else{
    <ng-container
      *ngComponentOutlet=\\"
              renderComponentTag();
        inputs: dynamicProps_emn6k5();
              content: myContent();
              \\"
    ></ng-container>
    }
  \`,
  styles: \`:host { display: contents; }\`,
})
export class RenderBlock {
  protected readonly isEmptyHtmlElement = isEmptyHtmlElement;

  // Signal to store embedded views for dynamic components
  myContent = signal<any[]>([]);
  rendercomponenttagTemplateRef = viewChild<TemplateRef<any>>(
    \\"rendercomponenttagTemplate\\"
  );
  tagTemplateRef = viewChild<TemplateRef<any>>(\\"tagTemplate\\");

  block = input<RenderBlockProps[\\"block\\"]>();
  context = input<RenderBlockProps[\\"context\\"]>();

  component = computed(() => {
    const componentName = getProcessedBlock({
      block: this.block(),
      state: this.context().state,
      context: this.context().context,
      shouldEvaluateBindings: false,
    }).component?.name;

    if (!componentName) {
      return null;
    }

    const ref = this.context().registeredComponents[componentName];

    if (!ref) {
      // TODO: Public doc page with more info about this message
      console.warn(\`
          Could not find a registered component named \\"\${componentName}\\".
          If you registered it, is the file that registered it imported by the file that needs to render it?\`);
      return undefined;
    } else {
      return ref;
    }
  });
  tag = computed(() => {
    return getBlockTag(this.useBlock());
  });
  useBlock = computed(() => {
    return this.repeatItemData()
      ? this.block()
      : getProcessedBlock({
          block: this.block(),
          state: this.context().state,
          context: this.context().context,
          shouldEvaluateBindings: true,
        });
  });
  actions = computed(() => {
    return getBlockActions({
      block: this.useBlock(),
      state: this.context().state,
      context: this.context().context,
    });
  });
  attributes = computed(() => {
    const blockProperties = getBlockProperties(this.useBlock());
    return {
      ...blockProperties,
      ...(TARGET === \\"reactNative\\"
        ? {
            style: getReactNativeBlockStyles({
              block: this.useBlock(),
              context: this.context(),
              blockStyles: blockProperties.style,
            }),
          }
        : {}),
    };
  });
  shouldWrap = computed(() => {
    return !this.component()?.noWrap;
  });
  renderComponentProps = computed(() => {
    return {
      blockChildren: this.useChildren(),
      componentRef: this.component()?.component,
      componentOptions: {
        ...getBlockComponentOptions(this.useBlock()),

        /**
         * These attributes are passed to the wrapper element when there is one. If \`noWrap\` is set to true, then
         * they are provided to the component itself directly.
         */
        ...(this.shouldWrap()
          ? {}
          : {
              attributes: { ...this.attributes(), ...this.actions() },
            }),
        customBreakpoints: this.childrenContext()?.content?.meta?.breakpoints,
      },
      context: this.childrenContext(),
    };
  });
  useChildren = computed(() => {
    // TO-DO: When should \`canHaveChildren\` dictate rendering?
    // This is currently commented out because some Builder components (e.g. Box) do not have \`canHaveChildren: true\`,
    // but still receive and need to render children.
    // return state.componentInfo?.canHaveChildren ? state.useBlock.children : [];
    return this.useBlock().children ?? [];
  });
  childrenWithoutParentComponent = computed(() => {
    /**
     * When there is no \`componentRef\`, there might still be children that need to be rendered. In this case,
     * we render them outside of \`componentRef\`.
     * NOTE: We make sure not to render this if \`repeatItemData\` is non-null, because that means we are rendering an array of
     * blocks, and the children will be repeated within those blocks.
     */
    const shouldRenderChildrenOutsideRef =
      !this.component()?.component && !this.repeatItemData();
    return shouldRenderChildrenOutsideRef ? this.useChildren() : [];
  });
  repeatItemData = computed(() => {
    /**
     * we don't use \`state.useBlock\` here because the processing done within its logic includes evaluating the block's bindings,
     * which will not work if there is a repeat.
     */
    const { repeat, ...blockWithoutRepeat } = this.block();

    if (!repeat?.collection) {
      return undefined;
    }

    const itemsArray = evaluate({
      code: repeat.collection,
      state: this.context().state,
      context: this.context().context,
    });

    if (!Array.isArray(itemsArray)) {
      return undefined;
    }

    const collectionName = repeat.collection.split(\\".\\").pop();
    const itemNameToUse =
      repeat.itemName || (collectionName ? collectionName + \\"Item\\" : \\"item\\");
    const repeatArray = itemsArray.map<RepeatData>((item, index) => ({
      context: {
        ...this.context(),
        state: {
          ...this.context().state,
          $index: index,
          $item: item,
          [itemNameToUse]: item,
          [\`$\${itemNameToUse}Index\`]: index,
        },
      },
      block: blockWithoutRepeat,
    }));
    return repeatArray;
  });
  inheritedTextStyles = computed(() => {
    if (TARGET !== \\"reactNative\\") {
      return {};
    }

    const styles = getReactNativeBlockStyles({
      block: this.useBlock(),
      context: this.context(),
      blockStyles: this.attributes().style,
    });
    return extractTextStyles(styles);
  });
  childrenContext = computed(() => {
    return {
      apiKey: this.context().apiKey,
      state: this.context().state,
      content: this.context().content,
      context: this.context().context,
      registeredComponents: this.context().registeredComponents,
      inheritedStyles: this.inheritedTextStyles(),
    };
  });
  renderComponentTag = computed(() => {
    if (TARGET === \\"reactNative\\") {
      return RenderComponentWithContext;
    } else if (TARGET === \\"vue3\\") {
      // vue3 expects a string for the component tag
      return \\"RenderComponent\\";
    } else {
      return RenderComponent;
    }
  });
  dynamicProps_ya7n4j = computed(() => {
    return { ...this.attributes(), ...this.actions() };
  });
  dynamicProps_emn6k5 = computed(() => {
    return { ...this.renderComponentProps() };
  });
  trackByData0(index: number, data: any) {
    return index;
  }
  trackByChild1(_: number, child: any) {
    return \\"render-block-\\" + child.id;
  }
  trackByChild2(_: number, child: any) {
    return \\"block-style-\\" + child.id;
  }

  constructor(private viewContainer: ViewContainerRef) {}

  ngOnInit() {
    this.myContent.set([
      this.viewContainer.createEmbeddedView(
        this.rendercomponenttagTemplateRef()
      ).rootNodes,
      this.viewContainer.createEmbeddedView(this.tagTemplateRef()).rootNodes,
    ]);
  }
}
"
`;

exports[`Angular signals > jsx > Typescript Test > renderContentExample 1`] = `
"import { Component, input, effect } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

type Props = {
  customComponents: string[];
  content: {
    blocks: any[];
    id: string;
  };
};

import BuilderContext from \\"@dummy/context.js\\";
import {
  dispatchNewContentToVisualEditor,
  sendComponentsToVisualEditor,
  trackClick,
} from \\"@dummy/injection-js\\";
import { RenderBlocks } from \\"@dummy/RenderBlocks.lite.tsx\\";

@Component({
  selector: \\"render-content\\",
  standalone: true,
  imports: [CommonModule, RenderBlocks],
  template: \`
    <div class=\\"div\\" (click)=\\"trackClick(content().id)\\">
      <render-blocks [blocks]=\\"content().blocks\\"></render-blocks>
    </div>
  \`,
  styles: \`:host { display: contents; }
        .div {
          display: flex;
          flex-direction: columns;
        }
\`,
})
export class RenderContent {
  protected readonly trackClick = trackClick;

  customComponents = input<Props[\\"customComponents\\"]>();
  content = input<Props[\\"content\\"]>();

  constructor() {
    effect(
      () => {
        // --- Mitosis: Workaround to make sure the effect() is triggered ---
        this.content();
        // ---

        dispatchNewContentToVisualEditor(this.content());
      },
      {
        allowSignalWrites: true, // Enable writing to signals inside effects
      }
    );
  }

  ngOnInit() {
    sendComponentsToVisualEditor(this.customComponents());
  }
}
"
`;

exports[`Angular signals > jsx > Typescript Test > rootFragmentMultiNode 1`] = `
"import { Component, input, effect } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

export interface ButtonProps {
  attributes?: any;
  text?: string;
  link?: string;
  openLinkInNewTab?: boolean;
}

@Component({
  selector: \\"button\\",
  standalone: true,
  imports: [CommonModule],
  template: \`
    <ng-container>
      @if(link()){
      <a
        [attr.href]=\\"link()\\"
        [attr.target]=\\"openLinkInNewTab() ? '_blank' : undefined\\"
      >
        {{text()}}
      </a>
      } @if(!link()){
      <button type=\\"button\\">{{text()}}</button>
      }
    </ng-container>
  \`,
  styles: \`:host { display: contents; }\`,
})
export class Button {
  link = input<ButtonProps[\\"link\\"]>();
  attributes = input<ButtonProps[\\"attributes\\"]>();
  openLinkInNewTab = input<ButtonProps[\\"openLinkInNewTab\\"]>();
  text = input<ButtonProps[\\"text\\"]>();

  constructor() {}
}
"
`;

exports[`Angular signals > jsx > Typescript Test > rootShow 1`] = `
"import { Component, input, effect } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

export interface RenderStylesProps {
  foo: string;
}

@Component({
  selector: \\"render-styles\\",
  standalone: true,
  imports: [CommonModule],
  template: \`
    @if(foo() === 'bar'){
    <div>Bar</div>
    }@else{
    <div>Foo</div>
    }
  \`,
  styles: \`:host { display: contents; }\`,
})
export class RenderStyles {
  foo = input<RenderStylesProps[\\"foo\\"]>();

  constructor() {}
}
"
`;

exports[`Angular signals > jsx > Typescript Test > sanitizeInnerHTML 1`] = `
"/**
          useMetadata:
          {\\"angular\\":{\\"sanitizeInnerHTML\\":true}}
          */

import { Component, input, effect } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

@Component({
  selector: \\"my-component\\",
  standalone: true,
  imports: [CommonModule],
  template: \`
    <div [innerHTML]=\\"html()\\"></div>
  \`,
  styles: \`:host { display: contents; }\`,
})
export class MyComponent {
  html = input<any>();

  constructor() {}
}
"
`;

exports[`Angular signals > jsx > Typescript Test > self-referencing component 1`] = `
"import { Component, input, effect } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

@Component({
  selector: \\"my-component\\",
  standalone: true,
  imports: [CommonModule, MyComponent],
  template: \`
    <div>
      {{name()}} @if(name() === 'Batman'){
      <my-component name=\\"Bruce Wayne\\"></my-component>
      }
    </div>
  \`,
  styles: \`:host { display: contents; }\`,
})
export class MyComponent {
  name = input<any>();

  constructor() {}
}
"
`;

exports[`Angular signals > jsx > Typescript Test > self-referencing component with children 1`] = `
"import { Component, input, effect } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

@Component({
  selector: \\"my-component\\",
  standalone: true,
  imports: [CommonModule, MyComponent],
  template: \`
    <div>
      {{name()}}
      <ng-content></ng-content>
      @if(name() === 'Batman'){
      <my-component name=\\"Bruce\\"><div>Wayne</div></my-component>
      }
    </div>
  \`,
  styles: \`:host { display: contents; }\`,
})
export class MyComponent {
  name = input<any>();

  constructor() {}
}
"
`;

exports[`Angular signals > jsx > Typescript Test > setState 1`] = `
"import { Component, effect, signal } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

@Component({
  selector: \\"set-state\\",
  standalone: true,
  imports: [CommonModule],
  template: \`
    <div><button (click)=\\"someFn()\\">Click me</button></div>
  \`,
  styles: \`:host { display: contents; }\`,
})
export class SetState {
  n = signal([\\"123\\"]);

  someFn() {
    this.n()[0] = \\"123\\";
  }

  constructor() {}
}
"
`;

exports[`Angular signals > jsx > Typescript Test > showExpressions 1`] = `
"import { Component, input, effect } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

interface Props {
  conditionA: boolean;
  conditionB: boolean;
}

@Component({
  selector: \\"show-with-other-values\\",
  standalone: true,
  imports: [CommonModule],
  template: \`
    <div>
      @if(conditionA()){ Content0 }@else{ ContentA } @if(conditionA()){ ContentA
      } @if(conditionA()){ }@else{ ContentA } @if(conditionA()){ ContentB
      }@else{
      {{undefined}} } @if(conditionA()){ {{undefined}} }@else{ ContentB }
      @if(conditionA()){ ContentC } @if(conditionA()){ }@else{ ContentC }
      @if(conditionA()){ ContentD } @if(conditionA()){ }@else{ ContentD }
      @if(conditionA()){ ContentE }@else{ hello } @if(conditionA()){ hello
      }@else{ ContentE } @if(conditionA()){ ContentF }@else{ 123 }
      @if(conditionA()){ 123 }@else{ ContentF } @if(conditionA() === 'Default'){
      4mb }@else{ @if(conditionB() === 'Complete'){ 20mb }@else{ 9mb } }
      @if(conditionA() === 'Default'){ @if(conditionB() === 'Complete'){ 20mb
      }@else{ 9mb } }@else{ 4mb } @if(conditionA() === 'Default'){
      @if(conditionB() === 'Complete'){
      <div>complete</div>
      }@else{ 9mb } }@else{ @if(conditionC() === 'Complete'){ dff }@else{
      <div>complete else</div>
      } }
    </div>
  \`,
  styles: \`:host { display: contents; }\`,
})
export class ShowWithOtherValues {
  conditionA = input<Props[\\"conditionA\\"]>();
  conditionB = input<Props[\\"conditionB\\"]>();
  conditionC = input<Props[\\"conditionC\\"]>();

  constructor() {}
}
"
`;

exports[`Angular signals > jsx > Typescript Test > showWithFor 1`] = `
"import { Component, input, effect } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

interface Props {
  conditionA: boolean;
  items: string[];
}

@Component({
  selector: \\"nested-show\\",
  standalone: true,
  imports: [CommonModule],
  template: \`
    @if(conditionA()){ @for (item of items();track trackByItem0;let idx =
    $index) {
    <div>{{item}}</div>
    } }@else{
    <div>else-condition-A</div>
    }
  \`,
  styles: \`:host { display: contents; }\`,
})
export class NestedShow {
  conditionA = input<Props[\\"conditionA\\"]>();
  items = input<Props[\\"items\\"]>();

  trackByItem0(idx: number, item: any) {
    return idx;
  }

  constructor() {}
}
"
`;

exports[`Angular signals > jsx > Typescript Test > showWithOtherValues 1`] = `
"import { Component, input, effect } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

interface Props {
  conditionA: boolean;
}

@Component({
  selector: \\"show-with-other-values\\",
  standalone: true,
  imports: [CommonModule],
  template: \`
    <div>
      @if(conditionA()){ ContentA } @if(conditionA()){ ContentB }@else{
      {{undefined}} } @if(conditionA()){ ContentC } @if(conditionA()){ ContentD
      } @if(conditionA()){ ContentE }@else{ hello } @if(conditionA()){ ContentF
      }@else{ 123 }
    </div>
  \`,
  styles: \`:host { display: contents; }\`,
})
export class ShowWithOtherValues {
  conditionA = input<Props[\\"conditionA\\"]>();

  constructor() {}
}
"
`;

exports[`Angular signals > jsx > Typescript Test > showWithRootText 1`] = `
"import { Component, input, effect } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

interface Props {
  conditionA: boolean;
}

@Component({
  selector: \\"show-root-text\\",
  standalone: true,
  imports: [CommonModule],
  template: \`
    @if(conditionA()){ ContentA }@else{
    <div>else-condition-A</div>
    }
  \`,
  styles: \`:host { display: contents; }\`,
})
export class ShowRootText {
  conditionA = input<Props[\\"conditionA\\"]>();

  constructor() {}
}
"
`;

exports[`Angular signals > jsx > Typescript Test > signals 1`] = `
"/**
          useMetadata:
          {\\"angular\\":{\\"signals\\":{\\"writeable\\":[\\"disabled\\"],\\"required\\":[\\"label\\"]}}}
          */

import {
  Component,
  viewChild,
  ElementRef,
  model,
  output,
  input,
  effect,
  signal,
} from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

type Props = {
  label: string;
  testInput: string;
  onTestOutput?: () => void;
  disabled?: boolean;
};
type Store = {
  _counter: number;
  _innerText: string;
  handleOutput: () => void;
};
const defaultProps: any = { testInput: \\"Test\\", label: \\"Bla\\" };

@Component({
  selector: \\"signals-test-component\\",
  standalone: true,
  imports: [CommonModule],
  template: \`
    <button
      [attr.aria-label]=\\"label()\\"
      #buttonRef
      [attr.disabled]=\\"disabled()\\"
      (click)=\\"handleOutput()\\"
    >
      {{testInput()}}
    </button>
  \`,
  styles: \`:host { display: contents; }\`,
})
export class SignalsTestComponent {
  testInput = input<Props[\\"testInput\\"]>(defaultProps[\\"testInput\\"]);
  label = input.required<Props[\\"label\\"]>(defaultProps[\\"label\\"]);
  disabled = model<Props[\\"disabled\\"]>();
  testOutput = output<
    Parameters<Required<Props>[\\"onTestOutput\\"]>[number] | void
  >();

  buttonRef = viewChild<ElementRef>(\\"buttonRef\\");

  _counter = signal<Store[\\"_counter\\"]>(0);
  _innerText = signal<Store[\\"_innerText\\"]>(\\"a\\");

  handleOutput() {
    this._counter.update((_counter) => {
      _counter++;
      return _counter;
    });

    this._innerText.set(\\"b\\");

    console.log(this.testInput(), this._counter());

    if (this.testOutput) {
      this.testOutput.emit();
    }
  }

  constructor() {
    effect(
      () => {
        // --- Mitosis: Workaround to make sure the effect() is triggered ---
        this._counter();
        this.buttonRef();
        // ---

        console.log(this._counter(), this.buttonRef()?.nativeElement);
        this.buttonRef()?.nativeElement?.setAttribute(
          \\"data-counter\\",
          this._counter().toString()
        );
      },
      {
        allowSignalWrites: true, // Enable writing to signals inside effects
      }
    );
  }
}
"
`;

exports[`Angular signals > jsx > Typescript Test > signalsOnUpdate 1`] = `
"import { Component, input, effect } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

type Props = {
  id: string;
  foo: {
    bar: {
      baz: number;
    };
  };
};

@Component({
  selector: \\"my-basic-component\\",
  standalone: true,
  imports: [CommonModule],
  template: \`
    <div class=\\"test div\\">{{id()}} {{foo().bar.baz}}</div>
  \`,
  styles: \`:host { display: contents; }
        .div {
          padding: 10px;
        }
\`,
})
export class MyBasicComponent {
  id = input<Props[\\"id\\"]>();
  foo = input<Props[\\"foo\\"]>();

  constructor() {
    effect(
      () => {
        // --- Mitosis: Workaround to make sure the effect() is triggered ---
        this.id();
        // ---

        console.log(\\"props.id changed\\", this.id());
        console.log(\\"props.foo.value.bar.baz changed\\", this.foo().bar.baz);
      },
      {
        allowSignalWrites: true, // Enable writing to signals inside effects
      }
    );
  }
}
"
`;

exports[`Angular signals > jsx > Typescript Test > spreadAttrs 1`] = `
"import { Component, effect } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

@Component({
  selector: \\"my-basic-component\\",
  standalone: true,
  imports: [CommonModule],
  template: \`
    <input />
  \`,
  styles: \`:host { display: contents; }\`,
})
export class MyBasicComponent {
  constructor() {}
}
"
`;

exports[`Angular signals > jsx > Typescript Test > spreadNestedProps 1`] = `
"import { Component, input, effect } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

@Component({
  selector: \\"my-basic-component\\",
  standalone: true,
  imports: [CommonModule],
  template: \`
    <input />
  \`,
  styles: \`:host { display: contents; }\`,
})
export class MyBasicComponent {
  nested = input<any>();

  constructor() {}
}
"
`;

exports[`Angular signals > jsx > Typescript Test > spreadProps 1`] = `
"import { Component, effect } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

@Component({
  selector: \\"my-basic-component\\",
  standalone: true,
  imports: [CommonModule],
  template: \`
    <input />
  \`,
  styles: \`:host { display: contents; }\`,
})
export class MyBasicComponent {
  constructor() {}
}
"
`;

exports[`Angular signals > jsx > Typescript Test > stateInit 1`] = `
"import { Component, input, effect, signal } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

@Component({
  selector: \\"my-component\\",
  standalone: true,
  imports: [CommonModule],
  template: \`
    <div>
      <div>{{asfas()}}</div>
      <div>{{someCompute()}}</div>
      <div>{{someOtherVal()}}</div>
      <div>{{sf()}}</div>
    </div>
  \`,
  styles: \`:host { display: contents; }\`,
})
export class MyComponent {
  val = input<any>();

  asfas = signal(\\"asga\\");
  someCompute = signal(this.add(1, 2));
  someOtherVal = signal(this.val());
  sf = signal(this.add(this.val(), 34));

  add(a, b) {
    return a + b;
  }
  subtract() {
    return this.someCompute() - this.someOtherVal();
  }

  constructor() {}
}
"
`;

exports[`Angular signals > jsx > Typescript Test > stateInitSequence 1`] = `
"import { Component, input, effect, signal, computed } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

@Component({
  selector: \\"my-component\\",
  standalone: true,
  imports: [CommonModule, Comp],
  template: \`
    <Comp [val]=\\"objSpread_val_6y525v()\\">{{val()}}</Comp>
  \`,
  styles: \`:host { display: contents; }\`,
})
export class MyComponent {
  value = input<any>();

  val = signal(this.value());

  objSpread_val_6y525v = computed(() => {
    return { ...this.val() };
  });

  constructor() {}
}
"
`;

exports[`Angular signals > jsx > Typescript Test > store-async-function 1`] = `
"import { Component, effect } from '@angular/core';
      import { CommonModule } from '@angular/common';












      @Component({
        selector: 'string-literal-store',standalone: true,imports: [CommonModule],template: \`<div></div>
\`,styles: \`:host { display: contents; }\`
      })
      export class StringLiteralStore {










        async function arrowFunction() {
return Promise.resolve();
}
async function namedFunction() {
return Promise.resolve();
}
async function fetchUsers() {
return Promise.resolve();
}


        constructor() {

        }









      }"
`;

exports[`Angular signals > jsx > Typescript Test > string-literal-store 1`] = `
"import { Component, effect, signal } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

@Component({
  selector: \\"string-literal-store\\",
  standalone: true,
  imports: [CommonModule],
  template: \`
    <div>{{foo()}}</div>
  \`,
  styles: \`:host { display: contents; }\`,
})
export class StringLiteralStore {
  foo = signal(123);

  constructor() {}
}
"
`;

exports[`Angular signals > jsx > Typescript Test > string-literal-store-kebab 1`] = `
"import { Component, effect, signal } from '@angular/core';
import { CommonModule } from '@angular/common';












@Component({
  selector: 'string-literal-store',standalone: true,imports: [CommonModule],template: \`<div>{{'foo-bar'}}</div>
\`,styles: \`:host { display: contents; }\`
})
export class StringLiteralStore {








   foo-bar= signal(123)




  constructor() {

  }









}"
`;

exports[`Angular signals > jsx > Typescript Test > styleClassAndCss 1`] = `
"import { Component, effect } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

@Component({
  selector: \\"my-component\\",
  standalone: true,
  imports: [CommonModule],
  template: \`
    <div
      class=\\"builder-column div\\"
      [ngStyle]=\\"{
          width: '100%'
        }\\"
    ></div>
  \`,
  styles: \`:host { display: contents; }
        .div {
          display: flex;
          flex-direction: column;
          align-items: stretch;
        }
\`,
})
export class MyComponent {
  constructor() {}
}
"
`;

exports[`Angular signals > jsx > Typescript Test > stylePropClassAndCss 1`] = `
"import { Component, input, effect } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

@Component({
  selector: \\"style-prop-class-and-css\\",
  standalone: true,
  imports: [CommonModule],
  template: \`
    <div
      [ngStyle]=\\"attributes().style\\"
      [class]=\\"attributes().class + ' div'\\"
    ></div>
  \`,
  styles: \`:host { display: contents; }
        .div {
          display: flex;
          flex-direction: column;
          align-items: stretch;
        }
\`,
})
export class StylePropClassAndCss {
  attributes = input<any>();

  constructor() {}
}
"
`;

exports[`Angular signals > jsx > Typescript Test > subComponent 1`] = `
"import { Component, effect } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

import { Foo } from \\"./foo-sub-component.lite\\";

@Component({
  selector: \\"sub-component\\",
  standalone: true,
  imports: [CommonModule, Foo],
  template: \`
    <foo></foo>
  \`,
  styles: \`:host { display: contents; }\`,
})
export class SubComponent {
  constructor() {}
}
"
`;

exports[`Angular signals > jsx > Typescript Test > svgComponent 1`] = `
"import { Component, effect } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

@Component({
  selector: \\"svg-component\\",
  standalone: true,
  imports: [CommonModule],
  template: \`
    <svg
      fill=\\"none\\"
      role=\\"img\\"
      [attr.viewBox]=\\"'0 0 ' + 42 + ' ' + 42\\"
      [attr.width]=\\"42\\"
      [attr.height]=\\"42\\"
    >
      <defs>
        <filter id=\\"prefix__filter0_f\\" filterUnits=\\"userSpaceOnUse\\">
          <feFlood result=\\"BackgroundImageFix\\"></feFlood>
          <feBlend
            in=\\"SourceGraphic\\"
            in2=\\"BackgroundImageFix\\"
            result=\\"shape\\"
          ></feBlend>
          <feGaussianBlur
            result=\\"effect1_foregroundBlur\\"
            [attr.stdDeviation]=\\"7\\"
          ></feGaussianBlur>
        </filter>
      </defs>
    </svg>
  \`,
  styles: \`:host { display: contents; }\`,
})
export class SvgComponent {
  constructor() {}
}
"
`;

exports[`Angular signals > jsx > Typescript Test > twoForsTrackBy 1`] = `
"import { Component, effect, signal } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

@Component({
  selector: \\"my-component\\",
  standalone: true,
  imports: [CommonModule],
  template: \`
    <div>
      @for (item of items();track trackByItem0;let i = $index) {
      <div>{{item}}</div>
      } @for (item of items();track trackByItem1;let i = $index) {
      <div>{{item}}</div>
      }
    </div>
  \`,
  styles: \`:host { display: contents; }\`,
})
export class MyComponent {
  items = signal([1, 2, 3]);

  trackByItem0(_: number, item: any) {
    return item;
  }
  trackByItem1(_: number, item: any) {
    return item;
  }

  constructor() {}
}
"
`;

exports[`Angular signals > jsx > Typescript Test > typeDependency 1`] = `
"import { Component, input, effect } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

export type TypeDependencyProps = {
  foo: Foo;
  foo2: Foo2;
};

import type { Foo } from \\"./foo-type\\";
import type { Foo as Foo2 } from \\"./type-export.js\\";

@Component({
  selector: \\"type-dependency\\",
  standalone: true,
  imports: [CommonModule],
  template: \`
    <div>{{foo()}}</div>
  \`,
  styles: \`:host { display: contents; }\`,
})
export class TypeDependency {
  foo = input<TypeDependencyProps[\\"foo\\"]>();

  constructor() {}
}
"
`;

exports[`Angular signals > jsx > Typescript Test > typeExternalProps 1`] = `
"import { Component, input, effect } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

import { FooProps } from \\"./foo-props\\";

@Component({
  selector: \\"type-external-props\\",
  standalone: true,
  imports: [CommonModule],
  template: \`
    <div>Hello {{name()}} !</div>
  \`,
  styles: \`:host { display: contents; }\`,
})
export class TypeExternalProps {
  name = input<FooProps[\\"name\\"]>();

  constructor() {}
}
"
`;

exports[`Angular signals > jsx > Typescript Test > typeExternalStore 1`] = `
"import { Component, effect, signal } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

import { FooStore } from \\"./foo-store\\";

@Component({
  selector: \\"type-external-store\\",
  standalone: true,
  imports: [CommonModule],
  template: \`
    <div>Hello {{_name()}} !</div>
  \`,
  styles: \`:host { display: contents; }\`,
})
export class TypeExternalStore {
  _name = signal<FooStore[\\"_name\\"]>(\\"test\\");

  constructor() {}
}
"
`;

exports[`Angular signals > jsx > Typescript Test > typeGetterStore 1`] = `
"import { Component, effect, signal, computed } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

type GetterStore = {
  getName: () => string;
  name: string;
  get test(): string;
};

@Component({
  selector: \\"type-getter-store\\",
  standalone: true,
  imports: [CommonModule],
  template: \`
    <div>Hello {{name()}} !</div>
  \`,
  styles: \`:host { display: contents; }\`,
})
export class TypeGetterStore {
  name = signal<GetterStore[\\"name\\"]>(\\"test\\");

  test = computed(() => {
    return \\"test\\";
  });
  getName() {
    if (this.name() === \\"a\\") {
      return \\"b\\";
    }

    return this.name();
  }

  constructor() {}
}
"
`;

exports[`Angular signals > jsx > Typescript Test > use-style 1`] = `
"import { Component, effect } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

@Component({
  selector: \\"my-component\\",
  standalone: true,
  imports: [CommonModule],
  template: \`
    <button type=\\"button\\">Button</button>
  \`,
  styles: \`:host { display: contents; }
        button {
          background: blue;
          color: white;
          font-size: 12px;
          outline: 1px solid black;
        }
\`,
})
export class MyComponent {
  constructor() {}
}
"
`;

exports[`Angular signals > jsx > Typescript Test > use-style-and-css 1`] = `
"import { Component, effect } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

@Component({
  selector: \\"my-component\\",
  standalone: true,
  imports: [CommonModule],
  template: \`
    <button type=\\"button\\" class=\\"button\\">Button</button>
  \`,
  styles: \`:host { display: contents; }
        button {
          font-size: 12px;
          outline: 1px solid black;
        }

        .button {
          background: blue;
          color: white;
        }
\`,
})
export class MyComponent {
  constructor() {}
}
"
`;

exports[`Angular signals > jsx > Typescript Test > use-style-outside-component 1`] = `
"import { Component, effect } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

@Component({
  selector: \\"my-component\\",
  standalone: true,
  imports: [CommonModule],
  template: \`
    <button type=\\"button\\">Button</button>
  \`,
  styles: \`:host { display: contents; }
        button {
          background: blue;
          color: white;
          font-size: 12px;
          outline: 1px solid black;
        }
\`,
})
export class MyComponent {
  constructor() {}
}
"
`;

exports[`Angular signals > jsx > Typescript Test > useObjectWrapper 1`] = `
"import { Component, input, effect, signal, computed } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

@Component({
  selector: \\"my-component\\",
  standalone: true,
  imports: [CommonModule, Comp],
  template: \`
    <div>
      <Comp
        [val1]=\\"objSpread_val1_1ndsmf()\\"
        [val2]=\\"objSpread_val2_yxuigh()\\"
        [val3]=\\"objSpread_val3_x5ar0q()\\"
        [val4]=\\"objSpread_val4_4xuou0()\\"
        [val5]=\\"objSpread_val5_qgyhyp()\\"
        [val6]=\\"{
          anything: [1, 2, 3]
        }\\"
      ></Comp>
    </div>
  \`,
  styles: \`:host { display: contents; }\`,
})
export class MyComponent {
  spreadAttrs = input<any>();

  attributes = signal({
    id: 1,
  });
  attributes2 = signal({
    id2: 1,
  });
  something = signal({
    id3: 1,
  });

  objSpread_val1_1ndsmf = computed(() => {
    return { ...this.attributes2() };
  });
  objSpread_val2_yxuigh = computed(() => {
    return { ...this.attributes(), ...this.attributes2() };
  });
  objSpread_val3_x5ar0q = computed(() => {
    return { ...this.something(), anything: \\"hello\\", hello: \\"world\\" };
  });
  objSpread_val4_4xuou0 = computed(() => {
    return {
      ...this.attributes(),
      ...this.something(),
      anything: [1, 2, 3],
      hello: \\"hello\\",
      ...this.attributes2(),
    };
  });
  objSpread_val5_qgyhyp = computed(() => {
    return {
      ...this.attributes(),
      ...this.something(),
      anything: [1, 2, 3],
      anythingString: [\\"a\\", \\"b\\", \\"c\\"],
      hello: \\"hello\\",
      ...this.spreadAttrs(),
    };
  });

  constructor() {}
}
"
`;

exports[`Angular signals > jsx > Typescript Test > useTarget 1`] = `
"import { Component, effect, signal, computed } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

@Component({
  selector: \\"use-target-component\\",
  standalone: true,
  imports: [CommonModule],
  template: \`
    <div>{{name()}}</div>
  \`,
  styles: \`:host { display: contents; }\`,
})
export class UseTargetComponent {
  lastName = signal(\\"bar\\");
  foo = signal(\\"bar\\");

  name = computed(() => {
    const prefix = true;
    return prefix + \\"foo\\";
  });

  constructor() {}

  ngOnInit() {
    console.log(this.foo());
    this.foo.set(\\"bar\\");
  }
}
"
`;

exports[`Angular signals > jsx > Typescript Test > webComponent 1`] = `
"import { Component, effect } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

import { register } from \\"swiper/element/bundle\\";

@Component({
  selector: \\"my-basic-web-component\\",
  standalone: true,
  imports: [CommonModule],
  template: \`
    <swiper-container slides-per-view=\\"3\\" navigation=\\"true\\" pagination=\\"true\\">
      <swiper-slide>Slide 1</swiper-slide>
      <swiper-slide>Slide 2</swiper-slide>
      <swiper-slide>Slide 3</swiper-slide>
    </swiper-container>
  \`,
  styles: \`:host { display: contents; }\`,
})
export class MyBasicWebComponent {
  constructor() {}

  ngOnInit() {
    register();
  }
}
"
`;

exports[`Angular signals > svelte > Javascript Test > basic 1`] = `
"import { Component, effect, signal } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

@Component({
  selector: \\"my-component\\",
  standalone: true,
  imports: [CommonModule],
  template: \`
    <div>
      <input (change)=\\"name.set($event.target.value)\\" [attr.value]=\\"name()\\" />

      Hello! I can run in React, Vue, Solid, or Liquid!
    </div>
  \`,
  styles: \`:host { display: contents; }\`,
})
export class MyComponent {
  name = signal(\\"Steve\\");

  constructor() {}
}
"
`;

exports[`Angular signals > svelte > Javascript Test > bindGroup 1`] = `
"import { Component, effect, signal } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

@Component({
  selector: \\"my-component\\",
  standalone: true,
  imports: [CommonModule],
  template: \`
    <div>
      <input
        type=\\"radio\\"
        value=\\"Plain\\"
        [attr.checked]=\\"tortilla() === 'Plain'\\"
        (change)=\\"tortilla.set($event.target.value)\\"
      />
      <input
        type=\\"radio\\"
        value=\\"Whole wheat\\"
        [attr.checked]=\\"tortilla() === 'Whole wheat'\\"
        (change)=\\"tortilla.set($event.target.value)\\"
      />
      <input
        type=\\"radio\\"
        value=\\"Spinach\\"
        [attr.checked]=\\"tortilla() === 'Spinach'\\"
        (change)=\\"tortilla.set($event.target.value)\\"
      />
      <br />
      <br />
      <input
        type=\\"checkbox\\"
        value=\\"Rice\\"
        [attr.checked]=\\"fillings() === 'Rice'\\"
        (change)=\\"fillings.set($event.target.value)\\"
      />
      <input
        type=\\"checkbox\\"
        value=\\"Beans\\"
        [attr.checked]=\\"fillings() === 'Beans'\\"
        (change)=\\"fillings.set($event.target.value)\\"
      />
      <input
        type=\\"checkbox\\"
        value=\\"Cheese\\"
        [attr.checked]=\\"fillings() === 'Cheese'\\"
        (change)=\\"fillings.set($event.target.value)\\"
      />
      <input
        type=\\"checkbox\\"
        value=\\"Guac (extra)\\"
        [attr.checked]=\\"fillings() === 'Guac (extra)'\\"
        (change)=\\"fillings.set($event.target.value)\\"
      />
      <p>Tortilla: {{tortilla()}}</p>
      <p>Fillings: {{fillings()}}</p>
    </div>
  \`,
  styles: \`:host { display: contents; }\`,
})
export class MyComponent {
  tortilla = signal(\\"Plain\\");
  fillings = signal([]);

  constructor() {}
}
"
`;

exports[`Angular signals > svelte > Javascript Test > bindProperty 1`] = `
"import { Component, effect, signal } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

@Component({
  selector: \\"my-component\\",
  standalone: true,
  imports: [CommonModule],
  template: \`
    <input [attr.value]=\\"value()\\" />
  \`,
  styles: \`:host { display: contents; }\`,
})
export class MyComponent {
  value = signal(\\"hello\\");

  constructor() {}
}
"
`;

exports[`Angular signals > svelte > Javascript Test > classDirective 1`] = `
"import { Component, input, effect, signal } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

const defaultProps: any = {};

@Component({
  selector: \\"my-component\\",
  standalone: true,
  imports: [CommonModule],
  template: \`
    <input [class]=\\"templateStr_slfe7x()\\" />
  \`,
  styles: \`:host { display: contents; }\`,
})
export class MyComponent {
  disabled = input<any>();

  focus = signal(true);

  templateStr_slfe7x() {
    return \`form-input \${this.disabled() ? \\"disabled\\" : \\"\\"} \${
      this.focus() ? \\"focus\\" : \\"\\"
    }\`;
  }

  constructor() {}
}
"
`;

exports[`Angular signals > svelte > Javascript Test > context 1`] = `
"import { Component, effect, signal } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

@Component({
  selector: \\"my-component\\",
  standalone: true,
  imports: [CommonModule],
  template: \`
    <div>{{activeTab()}}</div>
  \`,
  styles: \`:host { display: contents; }\`,
})
export class MyComponent {
  activeTab = signal(0);

  constructor(public disabled: \\"disabled\\") {}
}
"
`;

exports[`Angular signals > svelte > Javascript Test > each 1`] = `
"import { Component, effect, signal } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

@Component({
  selector: \\"my-component\\",
  standalone: true,
  imports: [CommonModule],
  template: \`
    <ul>
      @for (num of numbers();track i;let i = $index) {
      <li>{{num}}</li>
      }
    </ul>
  \`,
  styles: \`:host { display: contents; }\`,
})
export class MyComponent {
  numbers = signal([\\"one\\", \\"two\\", \\"three\\"]);

  constructor() {}
}
"
`;

exports[`Angular signals > svelte > Javascript Test > eventHandlers 1`] = `
"import { Component, effect } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

@Component({
  selector: \\"my-component\\",
  standalone: true,
  imports: [CommonModule],
  template: \`
    <div>
      <button (click)=\\"log('hi')\\">Log</button>
      <button (click)=\\"log($event)\\">Log</button>
      <button (click)=\\"log($event)\\">Log</button>
    </div>
  \`,
  styles: \`:host { display: contents; }\`,
})
export class MyComponent {
  log(msg = \\"hello\\") {
    console.log(msg);
  }

  constructor() {}
}
"
`;

exports[`Angular signals > svelte > Javascript Test > html 1`] = `
"import { Component, effect, signal } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";
import { DomSanitizer } from \\"@angular/platform-browser\\";

@Component({
  selector: \\"my-component\\",
  standalone: true,
  imports: [CommonModule],
  template: \`
    <div [innerHTML]=\\"sanitizer.bypassSecurityTrustHtml(html())\\"></div>
  \`,
  styles: \`:host { display: contents; }\`,
})
export class MyComponent {
  html = signal(\\"<b>bold</b>\\");

  constructor(protected sanitizer: DomSanitizer) {}
}
"
`;

exports[`Angular signals > svelte > Javascript Test > ifElse 1`] = `
"import { Component, effect, signal } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

@Component({
  selector: \\"my-component\\",
  standalone: true,
  imports: [CommonModule],
  template: \`
    @if(show()){
    <button (click)=\\"toggle($event)\\">Hide</button>
    }@else{
    <button (click)=\\"toggle($event)\\">Show</button>
    }
  \`,
  styles: \`:host { display: contents; }\`,
})
export class MyComponent {
  show = signal(true);

  toggle() {
    this.show.set(!this.show());
  }

  constructor() {}
}
"
`;

exports[`Angular signals > svelte > Javascript Test > imports 1`] = `
"import { Component, effect, signal } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

import { Button } from \\"./Button.lite\\";

@Component({
  selector: \\"my-component\\",
  standalone: true,
  imports: [CommonModule, Button],
  template: \`
    <div>
      <button type=\\"button\\" [disabled]=\\"disabled()\\">
        <ng-content></ng-content>
      </button>
    </div>
  \`,
  styles: \`:host { display: contents; }\`,
})
export class MyComponent {
  disabled = signal(false);

  constructor() {}
}
"
`;

exports[`Angular signals > svelte > Javascript Test > lifecycleHooks 1`] = `
"import { Component, effect } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

@Component({
  selector: \\"my-component\\",
  standalone: true,
  imports: [CommonModule],
  template: \`
    <div></div>
  \`,
  styles: \`:host { display: contents; }\`,
})
export class MyComponent {
  constructor() {
    effect(
      () => {
        console.log(\\"onAfterUpdate\\");
      },
      {
        allowSignalWrites: true, // Enable writing to signals inside effects
      }
    );
  }

  ngOnInit() {
    console.log(\\"onMount\\");
  }

  ngOnDestroy() {
    console.log(\\"onDestroy\\");
  }
}
"
`;

exports[`Angular signals > svelte > Javascript Test > reactive 1`] = `
"import { Component, effect, signal, computed } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

@Component({
  selector: \\"my-component\\",
  standalone: true,
  imports: [CommonModule],
  template: \`
    <div>
      <input [attr.value]=\\"name()\\" />

      Lowercase: {{lowercaseName()}}
    </div>
  \`,
  styles: \`:host { display: contents; }\`,
})
export class MyComponent {
  name = signal(\\"Steve\\");

  lowercaseName = computed(() => {
    return this.name().toLowerCase();
  });

  constructor() {}
}
"
`;

exports[`Angular signals > svelte > Javascript Test > reactiveWithFn 1`] = `
"import { Component, effect, signal } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

@Component({
  selector: \\"my-component\\",
  standalone: true,
  imports: [CommonModule],
  template: \`
    <div>
      <input
        type=\\"number\\"
        (change)=\\"a.set($event.target.value)\\"
        [attr.value]=\\"a()\\"
      />
      <input
        type=\\"number\\"
        (change)=\\"b.set($event.target.value)\\"
        [attr.value]=\\"b()\\"
      />

      Result: {{result()}}
    </div>
  \`,
  styles: \`:host { display: contents; }\`,
})
export class MyComponent {
  a = signal(2);
  b = signal(5);
  result = signal(null);

  calculateResult(a_, b_) {
    this.result.set(a_ * b_);
  }

  constructor() {
    effect(
      () => {
        this.calculateResult(this.a(), this.b());
      },
      {
        allowSignalWrites: true, // Enable writing to signals inside effects
      }
    );
  }
}
"
`;

exports[`Angular signals > svelte > Javascript Test > slots 1`] = `
"import { Component, effect } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

@Component({
  selector: \\"my-component\\",
  standalone: true,
  imports: [CommonModule],
  template: \`
    <div>
      <ng-content>default</ng-content>
      <ng-content select=\\"[test]\\">
        <div>default</div>
      </ng-content>
    </div>
  \`,
  styles: \`:host { display: contents; }\`,
})
export class MyComponent {
  constructor() {}
}
"
`;

exports[`Angular signals > svelte > Javascript Test > style 1`] = `
"import { Component, effect } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

@Component({
  selector: \\"my-component\\",
  standalone: true,
  imports: [CommonModule],
  template: \`
    <input class=\\"form-input\\" />
  \`,
  styles: \`:host { display: contents; }
        input {
          color: red;
          font-size: 12px;
        }

        .form-input:focus {
          outline: 1px solid blue;
        }
\`,
})
export class MyComponent {
  constructor() {}
}
"
`;

exports[`Angular signals > svelte > Javascript Test > textExpressions 1`] = `
"import { Component, effect, signal } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

@Component({
  selector: \\"my-component\\",
  standalone: true,
  imports: [CommonModule],
  template: \`
    <div>
      normal: {{a() + b()}}
      <br />

      conditional {{a() > 2 ? 'hello' : 'bye'}}
    </div>
  \`,
  styles: \`:host { display: contents; }\`,
})
export class MyComponent {
  a = signal(5);
  b = signal(12);

  constructor() {}
}
"
`;

exports[`Angular signals > svelte > Typescript Test > basic 1`] = `
"import { Component, effect, signal } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

@Component({
  selector: \\"my-component\\",
  standalone: true,
  imports: [CommonModule],
  template: \`
    <div>
      <input (change)=\\"name.set($event.target.value)\\" [attr.value]=\\"name()\\" />

      Hello! I can run in React, Vue, Solid, or Liquid!
    </div>
  \`,
  styles: \`:host { display: contents; }\`,
})
export class MyComponent {
  name = signal(\\"Steve\\");

  constructor() {}
}
"
`;

exports[`Angular signals > svelte > Typescript Test > bindGroup 1`] = `
"import { Component, effect, signal } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

@Component({
  selector: \\"my-component\\",
  standalone: true,
  imports: [CommonModule],
  template: \`
    <div>
      <input
        type=\\"radio\\"
        value=\\"Plain\\"
        [attr.checked]=\\"tortilla() === 'Plain'\\"
        (change)=\\"tortilla.set($event.target.value)\\"
      />
      <input
        type=\\"radio\\"
        value=\\"Whole wheat\\"
        [attr.checked]=\\"tortilla() === 'Whole wheat'\\"
        (change)=\\"tortilla.set($event.target.value)\\"
      />
      <input
        type=\\"radio\\"
        value=\\"Spinach\\"
        [attr.checked]=\\"tortilla() === 'Spinach'\\"
        (change)=\\"tortilla.set($event.target.value)\\"
      />
      <br />
      <br />
      <input
        type=\\"checkbox\\"
        value=\\"Rice\\"
        [attr.checked]=\\"fillings() === 'Rice'\\"
        (change)=\\"fillings.set($event.target.value)\\"
      />
      <input
        type=\\"checkbox\\"
        value=\\"Beans\\"
        [attr.checked]=\\"fillings() === 'Beans'\\"
        (change)=\\"fillings.set($event.target.value)\\"
      />
      <input
        type=\\"checkbox\\"
        value=\\"Cheese\\"
        [attr.checked]=\\"fillings() === 'Cheese'\\"
        (change)=\\"fillings.set($event.target.value)\\"
      />
      <input
        type=\\"checkbox\\"
        value=\\"Guac (extra)\\"
        [attr.checked]=\\"fillings() === 'Guac (extra)'\\"
        (change)=\\"fillings.set($event.target.value)\\"
      />
      <p>Tortilla: {{tortilla()}}</p>
      <p>Fillings: {{fillings()}}</p>
    </div>
  \`,
  styles: \`:host { display: contents; }\`,
})
export class MyComponent {
  tortilla = signal(\\"Plain\\");
  fillings = signal([]);

  constructor() {}
}
"
`;

exports[`Angular signals > svelte > Typescript Test > bindProperty 1`] = `
"import { Component, effect, signal } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

@Component({
  selector: \\"my-component\\",
  standalone: true,
  imports: [CommonModule],
  template: \`
    <input [attr.value]=\\"value()\\" />
  \`,
  styles: \`:host { display: contents; }\`,
})
export class MyComponent {
  value = signal(\\"hello\\");

  constructor() {}
}
"
`;

exports[`Angular signals > svelte > Typescript Test > classDirective 1`] = `
"import { Component, input, effect, signal } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

const defaultProps: any = {};

@Component({
  selector: \\"my-component\\",
  standalone: true,
  imports: [CommonModule],
  template: \`
    <input [class]=\\"templateStr_slfe7x()\\" />
  \`,
  styles: \`:host { display: contents; }\`,
})
export class MyComponent {
  disabled = input<any>();

  focus = signal(true);

  templateStr_slfe7x() {
    return \`form-input \${this.disabled() ? \\"disabled\\" : \\"\\"} \${
      this.focus() ? \\"focus\\" : \\"\\"
    }\`;
  }

  constructor() {}
}
"
`;

exports[`Angular signals > svelte > Typescript Test > context 1`] = `
"import { Component, effect, signal } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

@Component({
  selector: \\"my-component\\",
  standalone: true,
  imports: [CommonModule],
  template: \`
    <div>{{activeTab()}}</div>
  \`,
  styles: \`:host { display: contents; }\`,
})
export class MyComponent {
  activeTab = signal(0);

  constructor(public disabled: \\"disabled\\") {}
}
"
`;

exports[`Angular signals > svelte > Typescript Test > each 1`] = `
"import { Component, effect, signal } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

@Component({
  selector: \\"my-component\\",
  standalone: true,
  imports: [CommonModule],
  template: \`
    <ul>
      @for (num of numbers();track i;let i = $index) {
      <li>{{num}}</li>
      }
    </ul>
  \`,
  styles: \`:host { display: contents; }\`,
})
export class MyComponent {
  numbers = signal([\\"one\\", \\"two\\", \\"three\\"]);

  constructor() {}
}
"
`;

exports[`Angular signals > svelte > Typescript Test > eventHandlers 1`] = `
"import { Component, effect } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

@Component({
  selector: \\"my-component\\",
  standalone: true,
  imports: [CommonModule],
  template: \`
    <div>
      <button (click)=\\"log('hi')\\">Log</button>
      <button (click)=\\"log($event)\\">Log</button>
      <button (click)=\\"log($event)\\">Log</button>
    </div>
  \`,
  styles: \`:host { display: contents; }\`,
})
export class MyComponent {
  log(msg = \\"hello\\") {
    console.log(msg);
  }

  constructor() {}
}
"
`;

exports[`Angular signals > svelte > Typescript Test > html 1`] = `
"import { Component, effect, signal } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";
import { DomSanitizer } from \\"@angular/platform-browser\\";

@Component({
  selector: \\"my-component\\",
  standalone: true,
  imports: [CommonModule],
  template: \`
    <div [innerHTML]=\\"sanitizer.bypassSecurityTrustHtml(html())\\"></div>
  \`,
  styles: \`:host { display: contents; }\`,
})
export class MyComponent {
  html = signal(\\"<b>bold</b>\\");

  constructor(protected sanitizer: DomSanitizer) {}
}
"
`;

exports[`Angular signals > svelte > Typescript Test > ifElse 1`] = `
"import { Component, effect, signal } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

@Component({
  selector: \\"my-component\\",
  standalone: true,
  imports: [CommonModule],
  template: \`
    @if(show()){
    <button (click)=\\"toggle($event)\\">Hide</button>
    }@else{
    <button (click)=\\"toggle($event)\\">Show</button>
    }
  \`,
  styles: \`:host { display: contents; }\`,
})
export class MyComponent {
  show = signal(true);

  toggle() {
    this.show.set(!this.show());
  }

  constructor() {}
}
"
`;

exports[`Angular signals > svelte > Typescript Test > imports 1`] = `
"import { Component, effect, signal } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

import { Button } from \\"./Button.lite\\";

@Component({
  selector: \\"my-component\\",
  standalone: true,
  imports: [CommonModule, Button],
  template: \`
    <div>
      <button type=\\"button\\" [disabled]=\\"disabled()\\">
        <ng-content></ng-content>
      </button>
    </div>
  \`,
  styles: \`:host { display: contents; }\`,
})
export class MyComponent {
  disabled = signal(false);

  constructor() {}
}
"
`;

exports[`Angular signals > svelte > Typescript Test > lifecycleHooks 1`] = `
"import { Component, effect } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

@Component({
  selector: \\"my-component\\",
  standalone: true,
  imports: [CommonModule],
  template: \`
    <div></div>
  \`,
  styles: \`:host { display: contents; }\`,
})
export class MyComponent {
  constructor() {
    effect(
      () => {
        console.log(\\"onAfterUpdate\\");
      },
      {
        allowSignalWrites: true, // Enable writing to signals inside effects
      }
    );
  }

  ngOnInit() {
    console.log(\\"onMount\\");
  }

  ngOnDestroy() {
    console.log(\\"onDestroy\\");
  }
}
"
`;

exports[`Angular signals > svelte > Typescript Test > reactive 1`] = `
"import { Component, effect, signal, computed } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

@Component({
  selector: \\"my-component\\",
  standalone: true,
  imports: [CommonModule],
  template: \`
    <div>
      <input [attr.value]=\\"name()\\" />

      Lowercase: {{lowercaseName()}}
    </div>
  \`,
  styles: \`:host { display: contents; }\`,
})
export class MyComponent {
  name = signal(\\"Steve\\");

  lowercaseName = computed(() => {
    return this.name().toLowerCase();
  });

  constructor() {}
}
"
`;

exports[`Angular signals > svelte > Typescript Test > reactiveWithFn 1`] = `
"import { Component, effect, signal } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

@Component({
  selector: \\"my-component\\",
  standalone: true,
  imports: [CommonModule],
  template: \`
    <div>
      <input
        type=\\"number\\"
        (change)=\\"a.set($event.target.value)\\"
        [attr.value]=\\"a()\\"
      />
      <input
        type=\\"number\\"
        (change)=\\"b.set($event.target.value)\\"
        [attr.value]=\\"b()\\"
      />

      Result: {{result()}}
    </div>
  \`,
  styles: \`:host { display: contents; }\`,
})
export class MyComponent {
  a = signal(2);
  b = signal(5);
  result = signal(null);

  calculateResult(a_, b_) {
    this.result.set(a_ * b_);
  }

  constructor() {
    effect(
      () => {
        this.calculateResult(this.a(), this.b());
      },
      {
        allowSignalWrites: true, // Enable writing to signals inside effects
      }
    );
  }
}
"
`;

exports[`Angular signals > svelte > Typescript Test > slots 1`] = `
"import { Component, effect } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

@Component({
  selector: \\"my-component\\",
  standalone: true,
  imports: [CommonModule],
  template: \`
    <div>
      <ng-content>default</ng-content>
      <ng-content select=\\"[test]\\">
        <div>default</div>
      </ng-content>
    </div>
  \`,
  styles: \`:host { display: contents; }\`,
})
export class MyComponent {
  constructor() {}
}
"
`;

exports[`Angular signals > svelte > Typescript Test > style 1`] = `
"import { Component, effect } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

@Component({
  selector: \\"my-component\\",
  standalone: true,
  imports: [CommonModule],
  template: \`
    <input class=\\"form-input\\" />
  \`,
  styles: \`:host { display: contents; }
        input {
          color: red;
          font-size: 12px;
        }

        .form-input:focus {
          outline: 1px solid blue;
        }
\`,
})
export class MyComponent {
  constructor() {}
}
"
`;

exports[`Angular signals > svelte > Typescript Test > textExpressions 1`] = `
"import { Component, effect, signal } from \\"@angular/core\\";
import { CommonModule } from \\"@angular/common\\";

@Component({
  selector: \\"my-component\\",
  standalone: true,
  imports: [CommonModule],
  template: \`
    <div>
      normal: {{a() + b()}}
      <br />

      conditional {{a() > 2 ? 'hello' : 'bye'}}
    </div>
  \`,
  styles: \`:host { display: contents; }\`,
})
export class MyComponent {
  a = signal(5);
  b = signal(12);

  constructor() {}
}
"
`;
