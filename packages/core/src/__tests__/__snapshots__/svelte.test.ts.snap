// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Svelte BuilderRenderBlock 1`] = `
"<script>
  import { getBlockComponentOptions } from \\"../functions/get-block-component-options\\";
  import { getBlockProperties } from \\"../functions/get-block-properties\\";
  import { getBlockStyles } from \\"../functions/get-block-styles\\";
  import { getBlockTag } from \\"../functions/get-block-tag\\";
  import { components } from \\"../functions/register-component\\";
  import BuilderContext from \\"../context/builder.context\\";
  import { getBlockActions } from \\"../functions/get-block-actions\\";
  import { getProcessedBlock } from \\"../functions/get-processed-block\\";
  import BlockStyles from \\"./block-styles.svelte\\";

  import { getContext, setContext } from \\"svelte\\";

  export let block;

  $: component = () => {
    const componentName = useBlock().component?.name;

    if (!componentName) {
      return null;
    }

    const ref = components[useBlock().component?.name];

    if (componentName && !ref) {
      // TODO: Public doc page with more info about this message
      console.warn(\`
        Could not find a registered component named \\"\${componentName}\\".
        If you registered it, is the file that registered it imported by the file that needs to render it?\`);
    }

    return ref;
  };

  $: componentInfo = () => {
    return component?.()?.info;
  };

  $: componentRef = () => {
    return component?.()?.component;
  };

  $: tagName = () => {
    return getBlockTag(useBlock());
  };

  $: properties = () => {
    return getBlockProperties(useBlock());
  };

  $: useBlock = () => {
    return getProcessedBlock({
      block: block,
      state: builderContext.state,
      context: builderContext.context,
    });
  };

  $: actions = () => {
    return getBlockActions({
      block: useBlock(),
      state: builderContext.state,
      context: builderContext.context,
    });
  };

  $: css = () => {
    return getBlockStyles(useBlock());
  };

  $: componentOptions = () => {
    return getBlockComponentOptions(useBlock());
  };

  let builderContext = getContext(BuilderContext.key);

</script>

<svelte:component this={tagName()} {...properties()} style={css()}>
  <BlockStyles block={useBlock()} />

  {#if componentRef()}
    <svelte:component
      this={componentRef()}
      {...componentOptions()}
      children={useBlock().children} />
  {/if}

  {#if !componentRef() && useBlock().children && useBlock().children.length}
    {#each useBlock().children as child, index}
      <svelte:self {index} block={child} />
    {/each}
  {/if}
</svelte:component>
"
`;

exports[`Svelte multipleOnUpdate 1`] = `
"<script>
  import { afterUpdate } from \\"svelte\\";

  afterUpdate(() => {
    console.log(\\"Runs on every update/rerender\\");
  });
  afterUpdate(() => {
    console.log(\\"Runs on every update/rerender as well\\");
  });

</script>

<div />
"
`;

exports[`Svelte onUpdate 1`] = `
"<script>
  import { afterUpdate } from \\"svelte\\";

  afterUpdate(() => {
    console.log(\\"Runs on every update/rerender\\");
  });

</script>

<div />
"
`;

exports[`Svelte selfReferencingComponent 1`] = `
"<script>
  export let name;

</script>

<div>
  {name}

  {#if name === 'Batman'}
    <svelte:self name={'Bruce Wayne'} />
  {/if}
</div>
"
`;

exports[`Svelte selfReferencingComponentWithChildren 1`] = `
"<script>
  export let name;

</script>

<div>
  {name}

  <slot />

  {#if name === 'Batman'}
    <svelte:self name={'Bruce'}>
      <div>Wayne</div>
    </svelte:self>
  {/if}
</div>
"
`;
