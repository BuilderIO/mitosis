// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`webcomponent Stamped 1`] = `
"import { kebabCase } from \\"lodash\\";
import { snakeCase } from \\"lodash\\";

/**
 * Usage:
 *
 *  <smile-reviews></smile-reviews>
 *
 */
class SmileReviews extends HTMLElement {
  constructor() {
    super();

    const self = this;
    this.state = {
      reviews: [],
      name: \\"test\\",
      showReviewPrompt: false,
      kebabCaseValue() {
        return kebabCase(\\"testThat\\");
      },
      snakeCaseValue() {
        return snakeCase(\\"testThis\\");
      },
    };
    this.props = {};

    // Helper to pass context down for loops
    this.contextMap = new WeakMap();

    // used to keep track of all nodes created by show/for
    this.nodesToDestroy = [];

    // Event handler for 'click' event on button-1
    this.onButton1Click = (event) => {
      this.state.showReviewPrompt = true;
      this.update();
    };

    // Event handler for 'click' event on button-2
    this.onButton2Click = (event) => {
      this.state.showReviewPrompt = false;
      this.update();
    };

    if (undefined) {
      this.attachShadow({ mode: \\"open\\" });
    }
  }

  destroyAnyNodes() {
    // destroy current view template refs before rendering again
    this.nodesToDestroy.forEach((el) => el.remove());
    this.nodesToDestroy = [];
  }

  get _root() {
    return this.shadowRoot || this;
  }

  connectedCallback() {
    this._root.innerHTML = \`
      <div data-name=\\"div-1\\">
        <button data-name=\\"button-1\\">Write a review</button>
      
        <template data-name=\\"show\\">
          <input placeholder=\\"Email\\" />
      
          <input placeholder=\\"Title\\" class=\\"input\\" />
      
          <textarea
            placeholder=\\"How was your experience?\\"
            class=\\"textarea\\"
          ></textarea>
      
          <button class=\\"button\\" data-name=\\"button-2\\">Submit</button>
        </template>
      
        <span data-name=\\"for\\"></span>
        <template data-template-for=\\"for\\">
          <div class=\\"review\\" data-name=\\"div-2\\">
            <img class=\\"img\\" data-name=\\"img-1\\" />
      
            <div data-name=\\"div-3\\">
              <div>
                N:
                <span data-name=\\"div-4\\"><!-- index --></span>
              </div>
      
              <div>
                <span data-name=\\"div-5\\"><!-- this.review.author --></span>
              </div>
      
              <div>
                <span data-name=\\"div-6\\"><!-- this.review.reviewMessage --></span>
              </div>
            </div>
          </div>
        </template>
      </div>
      <style>
        .input {
          display: block;
        }
        .textarea {
          display: block;
        }
        .button {
          display: block;
        }
        .review {
          margin: 10px;
          padding: 10px;
          background: white;
          display: flex;
          border-radius: 5px;
          box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
        }
        .img {
          height: 30px;
          width: 30px;
          margin-right: 10px;
        }
      </style>\`;
    this.onMount();
    this.update();
  }

  showContent(el) {
    // https://developer.mozilla.org/en-US/docs/Web/API/HTMLTemplateElement/content
    // grabs the content of a node that is between <template> tags
    // iterates through child nodes to register all content including text elements
    // attaches the content after the template

    const elementFragment = el.content.cloneNode(true);
    const children = Array.from(elementFragment.childNodes);
    children.forEach((child) => {
      this.nodesToDestroy.push(child);
    });
    el.after(elementFragment);
  }

  onMount() {
    // onMount
    fetch(
      \`https://stamped.io/api/widget/reviews?storeUrl=builder-io.myshopify.com&apiKey=\${
        this.props.apiKey || \\"pubkey-8bbDq7W6w4sB3OWeM1HUy2s47702hM\\"
      }&productId=\${this.props.productId || \\"2410511106127\\"}\`
    )
      .then((res) => res.json())
      .then((data) => {
        this.state.reviews = data.data;
        this.update();
      });
  }

  onUpdate() {}

  update() {
    this.onUpdate();
    // re-rendering needs to ensure that all nodes generated by for/show are refreshed
    this.destroyAnyNodes();
    this.updateBindings();
  }

  updateBindings() {
    this._root.querySelectorAll(\\"[data-name='div-1']\\").forEach((el, index) => {
      el.setAttribute(\\"data-user\\", this.state.name);
    });

    this._root
      .querySelectorAll(\\"[data-name='button-1']\\")
      .forEach((el, index) => {
        el.removeEventListener(\\"click\\", this.onButton1Click);
        el.addEventListener(\\"click\\", this.onButton1Click);
      });

    this._root.querySelectorAll(\\"[data-name='show']\\").forEach((el, index) => {
      const whenCondition = this.state.showReviewPrompt;
      if (whenCondition) {
        this.showContent(el);
      }
    });

    this._root
      .querySelectorAll(\\"[data-name='button-2']\\")
      .forEach((el, index) => {
        el.removeEventListener(\\"click\\", this.onButton2Click);
        el.addEventListener(\\"click\\", this.onButton2Click);
      });

    this._root.querySelectorAll(\\"[data-name='for']\\").forEach((el, index) => {
      let array = this.state.reviews;
      let template = this._root.querySelector('[data-template-for=\\"for\\"]');
      this.renderLoop(el, array, template, \\"review\\");
    });

    this._root.querySelectorAll(\\"[data-name='div-2']\\").forEach((el, index) => {
      el.key = this.getContext(el, \\"review\\").id;
    });

    this._root.querySelectorAll(\\"[data-name='img-1']\\").forEach((el, index) => {
      el.src = this.getContext(el, \\"review\\").avatar;
    });

    this._root.querySelectorAll(\\"[data-name='div-3']\\").forEach((el, index) => {
      el.className = this.state.showReviewPrompt
        ? \\"bg-primary\\"
        : \\"bg-secondary\\";
    });

    this._root.querySelectorAll(\\"[data-name='div-4']\\").forEach((el, index) => {
      el.innerText = index;
    });

    this._root.querySelectorAll(\\"[data-name='div-5']\\").forEach((el, index) => {
      el.innerText = this.getContext(el, \\"review\\").author;
    });

    this._root.querySelectorAll(\\"[data-name='div-6']\\").forEach((el, index) => {
      el.innerText = this.getContext(el, \\"review\\").reviewMessage;
    });
  }

  // Helper to render loops
  renderLoop(el, array, template, itemName) {
    el.innerHTML = \\"\\";
    for (let value of array) {
      let tmp = document.createElement(\\"span\\");
      tmp.innerHTML = template.innerHTML;
      Array.from(tmp.children).forEach((child) => {
        this.contextMap.set(child, {
          ...this.contextMap.get(child),
          [itemName]: value,
        });
        el.appendChild(child);
      });
    }
  }

  getContext(el, name) {
    let parent = el;
    do {
      let context = this.contextMap.get(parent);
      if (context && name in context) {
        return context[name];
      }
    } while ((parent = parent.parentNode || parent.host));
  }
}

customElements.define(\\"smile-reviews\\", SmileReviews);
"
`;
