// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`React - stateType: solid > jsx > Javascript Test > AdvancedRef 1`] = `
"\\"use client\\";
import * as React from \\"react\\";
import { useRef, useEffect } from \\"react\\";
import { useMutable } from \\"react-solid-state\\";

function MyBasicRefComponent(props) {
  const inputRef = useRef(null);
  const inputNoArgRef = useRef(null);
  const state = useMutable({
    name: \\"PatrickJS\\",
    onBlur: function onBlur() {
      // Maintain focus
      inputRef.current.focus();
    },
    lowerCaseName: function lowerCaseName() {
      return state.name.toLowerCase();
    },
  });

  useEffect(() => {
    console.log(\\"Received an update\\");
  }, [inputRef.current, inputNoArgRef.current]);

  return (
    <>
      <div>
        {props.showInput ? (
          <>
            <input
              className=\\"input\\"
              ref={inputRef}
              value={state.name}
              onBlur={(event) => state.onBlur()}
              onChange={(event) => (state.name = event.target.value)}
            />
            <label htmlFor=\\"cars\\" ref={inputNoArgRef}>
              Choose a car:
            </label>
            <select name=\\"cars\\" id=\\"cars\\">
              <option value=\\"supra\\">GR Supra</option>
              <option value=\\"86\\">GR 86</option>
            </select>
          </>
        ) : null}
        Hello
        {state.lowerCaseName()}! I can run in React, Qwik, Vue, Solid, or Web
        Component!
      </div>
      <style jsx>{\`
        .input {
          color: red;
        }
      \`}</style>
    </>
  );
}

export default MyBasicRefComponent;
"
`;

exports[`React - stateType: solid > jsx > Javascript Test > Basic 1`] = `
"\\"use client\\";
import * as React from \\"react\\";
import { useMutable } from \\"react-solid-state\\";

export const DEFAULT_VALUES = {
  name: \\"Steve\\",
};

function MyBasicComponent(props) {
  const state = useMutable({
    name: \\"Steve\\",
    underscore_fn_name() {
      return \\"bar\\";
    },
    age: 1,
    sports: [\\"\\"],
  });

  return (
    <>
      <div className=\\"test div\\">
        <input
          value={DEFAULT_VALUES.name || state.name}
          onChange={(myEvent) => (state.name = myEvent.target.value)}
        />
        Hello! I can run in React, Vue, Solid, or Liquid! &gt;
      </div>
      <style jsx>{\`
        .div {
          padding: 10px;
        }
      \`}</style>
    </>
  );
}

export default MyBasicComponent;
"
`;

exports[`React - stateType: solid > jsx > Javascript Test > Basic Context 1`] = `
"\\"use client\\";
import * as React from \\"react\\";
import { useContext, useRef, useEffect } from \\"react\\";
import { useMutable } from \\"react-solid-state\\";
import { Injector, MyService, createInjector } from \\"@dummy/injection-js\\";

function MyBasicComponent(props) {
  const state = useMutable({
    name: \\"PatrickJS\\",
    onChange: function onChange() {
      const change = myService.method(\\"change\\");
      console.log(change);
    },
  });

  const myService = useContext(MyService);

  const hasInitialized = useRef(false);
  if (!hasInitialized.current) {
    const hi = myService.method(\\"hi\\");
    console.log(hi);
    hasInitialized.current = true;
  }

  useEffect(() => {
    const bye = myService.method(\\"hi\\");
    console.log(bye);
  }, []);

  return (
    <Injector.Provider value={createInjector()}>
      <div>
        {myService.method(\\"hello\\") + state.name}
        Hello! I can run in React, Vue, Solid, or Liquid!
        <input onChange={(event) => state.onChange} />
      </div>
    </Injector.Provider>
  );
}

export default MyBasicComponent;
"
`;

exports[`React - stateType: solid > jsx > Javascript Test > Basic OnMount Update 1`] = `
"\\"use client\\";
import * as React from \\"react\\";
import { useRef, useEffect } from \\"react\\";
import { useMutable } from \\"react-solid-state\\";

function MyBasicOnMountUpdateComponent(props) {
  const state = useMutable({
    name: \\"PatrickJS\\",
    names: [\\"Steve\\", \\"PatrickJS\\"],
  });

  const hasInitialized = useRef(false);
  if (!hasInitialized.current) {
    state.name = \\"PatrickJS onInit\\" + props.hi;
    hasInitialized.current = true;
  }

  useEffect(() => {
    state.name = \\"PatrickJS onMount\\" + props.bye;
  }, []);

  return <div>Hello {state.name}</div>;
}

export default MyBasicOnMountUpdateComponent;
"
`;

exports[`React - stateType: solid > jsx > Javascript Test > Basic Outputs 1`] = `
"\\"use client\\";
import * as React from \\"react\\";
import { useEffect } from \\"react\\";
import { useMutable } from \\"react-solid-state\\";

function MyBasicOutputsComponent(props) {
  const state = useMutable({ name: \\"PatrickJS\\" });

  useEffect(() => {
    props.onMessage(state.name);
    props.onEvent(props.message);
  }, []);

  return <div />;
}

export default MyBasicOutputsComponent;
"
`;

exports[`React - stateType: solid > jsx > Javascript Test > Basic Outputs Meta 1`] = `
"\\"use client\\";
import * as React from \\"react\\";
import { useEffect } from \\"react\\";
import { useMutable } from \\"react-solid-state\\";

function MyBasicOutputsComponent(props) {
  const state = useMutable({ name: \\"PatrickJS\\" });

  useEffect(() => {
    props.onMessage(state.name);
    props.onEvent(props.message);
  }, []);

  return <div />;
}

export default MyBasicOutputsComponent;
"
`;

exports[`React - stateType: solid > jsx > Javascript Test > BasicAttribute 1`] = `
"import * as React from \\"react\\";

function MyComponent(props) {
  return <input autoCapitalize=\\"on\\" autoComplete=\\"on\\" spellCheck />;
}

export default MyComponent;
"
`;

exports[`React - stateType: solid > jsx > Javascript Test > BasicBooleanAttribute 1`] = `
"import * as React from \\"react\\";
import MyBooleanAttributeComponent from \\"./basic-boolean-attribute-component.raw\\";

function MyBooleanAttribute(props) {
  return (
    <div>
      {props.children ? (
        <>
          {props.children}
          {props.type}
        </>
      ) : null}
      <MyBooleanAttributeComponent toggle />
      <MyBooleanAttributeComponent toggle />
      <MyBooleanAttributeComponent list={null} />
    </div>
  );
}

export default MyBooleanAttribute;
"
`;

exports[`React - stateType: solid > jsx > Javascript Test > BasicChildComponent 1`] = `
"\\"use client\\";
import * as React from \\"react\\";
import { useMutable } from \\"react-solid-state\\";
import MyBasicOnMountUpdateComponent from \\"./basic-onMount-update.raw\\";
import MyBasicComponent from \\"./basic.raw\\";

function MyBasicChildComponent(props) {
  const state = useMutable({ name: \\"Steve\\", dev: \\"PatrickJS\\" });

  return (
    <div>
      <MyBasicComponent id={state.dev} />
      <div>
        <MyBasicOnMountUpdateComponent hi={state.name} bye={state.dev} />
      </div>
    </div>
  );
}

export default MyBasicChildComponent;
"
`;

exports[`React - stateType: solid > jsx > Javascript Test > BasicFor 1`] = `
"\\"use client\\";
import * as React from \\"react\\";
import { useEffect } from \\"react\\";
import { useMutable } from \\"react-solid-state\\";

function MyBasicForComponent(props) {
  const state = useMutable({
    name: \\"PatrickJS\\",
    names: [\\"Steve\\", \\"PatrickJS\\"],
  });

  useEffect(() => {
    console.log(\\"onMount code\\");
  }, []);

  return (
    <div>
      {state.names?.map((person) => (
        <>
          <input
            value={state.name}
            onChange={(event) => {
              state.name = event.target.value + \\" and \\" + person;
            }}
          />
          Hello
          {person}! I can run in Qwik, Web Component, React, Vue, Solid, or
          Liquid!
        </>
      ))}
    </div>
  );
}

export default MyBasicForComponent;
"
`;

exports[`React - stateType: solid > jsx > Javascript Test > BasicRef 1`] = `
"\\"use client\\";
import * as React from \\"react\\";
import { useRef } from \\"react\\";
import { useMutable } from \\"react-solid-state\\";

function MyBasicRefComponent(props) {
  const inputRef = useRef(null);
  const inputNoArgRef = useRef(null);
  const state = useMutable({
    name: \\"PatrickJS\\",
    onBlur: function onBlur() {
      // Maintain focus
      inputRef.current?.focus();
    },
    lowerCaseName: function lowerCaseName() {
      return state.name.toLowerCase();
    },
  });

  return (
    <>
      <div>
        {props.showInput ? (
          <>
            <input
              className=\\"input\\"
              ref={inputRef}
              value={state.name}
              onBlur={(event) => state.onBlur()}
              onChange={(event) => (state.name = event.target.value)}
            />
            <label htmlFor=\\"cars\\" ref={inputNoArgRef}>
              Choose a car:
            </label>
            <select name=\\"cars\\" id=\\"cars\\">
              <option value=\\"supra\\">GR Supra</option>
              <option value=\\"86\\">GR 86</option>
            </select>
          </>
        ) : null}
        Hello
        {state.lowerCaseName()}! I can run in React, Qwik, Vue, Solid, or Web
        Component!
      </div>
      <style jsx>{\`
        .input {
          color: red;
        }
      \`}</style>
    </>
  );
}

export default MyBasicRefComponent;
"
`;

exports[`React - stateType: solid > jsx > Javascript Test > BasicRefAssignment 1`] = `
"\\"use client\\";
import * as React from \\"react\\";
import { useRef } from \\"react\\";
import { useMutable } from \\"react-solid-state\\";

function MyBasicRefAssignmentComponent(props) {
  const holdValueRef = useRef(\\"Patrick\\");
  const state = useMutable({
    handlerClick: function handlerClick(event) {
      event.preventDefault();
      console.log(\\"current value\\", holdValueRef.current);
      holdValueRef.current = holdValueRef.current + \\"JS\\";
    },
  });

  return (
    <div>
      <button onClick={async (evt) => await state.handlerClick(evt)}>
        Click
      </button>
    </div>
  );
}

export default MyBasicRefAssignmentComponent;
"
`;

exports[`React - stateType: solid > jsx > Javascript Test > BasicRefPrevious 1`] = `
"\\"use client\\";
import * as React from \\"react\\";
import { useRef, useEffect } from \\"react\\";
import { useMutable } from \\"react-solid-state\\";

export function usePrevious(value) {
  // The ref object is a generic container whose current property is mutable ...
  // ... and can hold any value, similar to an instance property on a class
  let ref = useRef(null); // Store current value in ref

  onUpdate(() => {
    ref = value;
  }, [value]); // Only re-run if value changes
  // Return previous value (happens before update in useEffect above)

  return ref;
}

function MyPreviousComponent(props) {
  const state = useMutable({ count: 0 });

  const prevCount = useRef(state.count);

  useEffect(() => {
    prevCount.current = state.count;
  }, [state.count]);

  return (
    <div>
      <h1>
        Now: {state.count}, before: {prevCount.current}
      </h1>
      <button onClick={(event) => (state.count += 1)}>Increment</button>
    </div>
  );
}

export default MyPreviousComponent;
"
`;

exports[`React - stateType: solid > jsx > Javascript Test > Button 1`] = `
"import * as React from \\"react\\";

function Button(props) {
  return (
    <div>
      {props.link ? (
        <a
          {...props.attributes}
          href={props.link}
          target={props.openLinkInNewTab ? \\"_blank\\" : undefined}
        >
          {props.text}
        </a>
      ) : null}
      {!props.link ? (
        <button type=\\"button\\" {...props.attributes}>
          {props.text}
        </button>
      ) : null}
    </div>
  );
}

export default Button;
"
`;

exports[`React - stateType: solid > jsx > Javascript Test > Columns 1`] = `
"import * as React from \\"react\\";
import { useMutable } from \\"react-solid-state\\";

function Column(props) {
  const state = useMutable({
    getColumns() {
      return props.columns || [];
    },
    getGutterSize() {
      return typeof props.space === \\"number\\" ? props.space || 0 : 20;
    },
    getWidth(index) {
      const columns = state.getColumns();
      return (columns[index] && columns[index].width) || 100 / columns.length;
    },
    getColumnCssWidth(index) {
      const columns = state.getColumns();
      const gutterSize = state.getGutterSize();
      const subtractWidth =
        (gutterSize * (columns.length - 1)) / columns.length;
      return \`calc(\${state.getWidth(index)}% - \${subtractWidth}px)\`;
    },
  });

  return (
    <>
      <div className=\\"builder-columns div\\">
        {props.columns?.map((column, index) => (
          <div className=\\"builder-column div-2\\">
            {column.content}
            {index}
          </div>
        ))}
      </div>
      <style jsx>{\`
        .div {
          display: flex;
          flex-direction: column;
          align-items: stretch;
          line-height: normal;
        }
        @media (max-width: 999px) {
          .div {
            flex-direction: row;
          }
        }
        @media (max-width: 639px) {
          .div {
            flex-direction: row-reverse;
          }
        }
        .div-2 {
          flex-grow: 1;
        }
      \`}</style>
    </>
  );
}

export default Column;
"
`;

exports[`React - stateType: solid > jsx > Javascript Test > ContentSlotHtml 1`] = `
"import * as React from \\"react\\";

function ContentSlotCode(props) {
  return (
    <div>
      <>{props.slotTesting}</>
      <div>
        <hr />
      </div>
      <div>
        <>{props.children}</>
      </div>
    </div>
  );
}

export default ContentSlotCode;
"
`;

exports[`React - stateType: solid > jsx > Javascript Test > ContentSlotJSX 1`] = `
"\\"use client\\";
import * as React from \\"react\\";
import { useMutable } from \\"react-solid-state\\";

function ContentSlotJsxCode(props) {
  const state = useMutable({
    name: \\"king\\",
    showContent: false,
    get cls() {
      return props.slotContent && props.children ? \`\${state.name}-content\` : \\"\\";
    },
    show() {
      props.slotContent ? 1 : \\"\\";
    },
  });

  return (
    <>
      {props.slotReference ? (
        <>
          <div
            name={props.slotContent ? \\"name1\\" : \\"name2\\"}
            title={props.slotContent ? \\"title1\\" : \\"title2\\"}
            {...props.attributes}
            onClick={(event) => state.show()}
            className={state.cls}
          >
            {state.showContent && props.slotContent ? (
              <>{props.content || \\"{props.content}\\"}</>
            ) : null}
            <div>
              <hr />
            </div>
            <div>{props.children}</div>
          </div>
        </>
      ) : null}
    </>
  );
}

ContentSlotJsxCode.defaultProps = {
  content: \\"\\",
  slotReference: undefined,
  slotContent: undefined,
};

export default ContentSlotJsxCode;
"
`;

exports[`React - stateType: solid > jsx > Javascript Test > CustomCode 1`] = `
"\\"use client\\";
import * as React from \\"react\\";
import { useRef, useEffect } from \\"react\\";
import { useMutable } from \\"react-solid-state\\";

function CustomCode(props) {
  const elem = useRef(null);
  const state = useMutable({
    scriptsInserted: [],
    scriptsRun: [],
    findAndRunScripts() {
      // TODO: Move this function to standalone one in '@builder.io/utils'
      if (elem.current && typeof window !== \\"undefined\\") {
        /** @type {HTMLScriptElement[]} */
        const scripts = elem.current.getElementsByTagName(\\"script\\");

        for (let i = 0; i < scripts.length; i++) {
          const script = scripts[i];

          if (script.src) {
            if (state.scriptsInserted.includes(script.src)) {
              continue;
            }

            state.scriptsInserted.push(script.src);
            const newScript = document.createElement(\\"script\\");
            newScript.async = true;
            newScript.src = script.src;
            document.head.appendChild(newScript);
          } else if (
            !script.type ||
            [
              \\"text/javascript\\",
              \\"application/javascript\\",
              \\"application/ecmascript\\",
            ].includes(script.type)
          ) {
            if (state.scriptsRun.includes(script.innerText)) {
              continue;
            }

            try {
              state.scriptsRun.push(script.innerText);
              new Function(script.innerText)();
            } catch (error) {
              console.warn(\\"\`CustomCode\`: Error running script:\\", error);
            }
          }
        }
      }
    },
  });

  useEffect(() => {
    state.findAndRunScripts();
  }, []);

  return (
    <div
      ref={elem}
      className={
        \\"builder-custom-code\\" + (props.replaceNodes ? \\" replace-nodes\\" : \\"\\")
      }
      dangerouslySetInnerHTML={{ __html: props.code }}
    />
  );
}

export default CustomCode;
"
`;

exports[`React - stateType: solid > jsx > Javascript Test > Embed 1`] = `
"\\"use client\\";
import * as React from \\"react\\";
import { useRef, useEffect } from \\"react\\";
import { useMutable } from \\"react-solid-state\\";

function CustomCode(props) {
  const elem = useRef(null);
  const state = useMutable({
    scriptsInserted: [],
    scriptsRun: [],
    findAndRunScripts() {
      // TODO: Move this function to standalone one in '@builder.io/utils'
      if (elem.current && typeof window !== \\"undefined\\") {
        /** @type {HTMLScriptElement[]} */
        const scripts = elem.current.getElementsByTagName(\\"script\\");

        for (let i = 0; i < scripts.length; i++) {
          const script = scripts[i];

          if (script.src) {
            if (state.scriptsInserted.includes(script.src)) {
              continue;
            }

            state.scriptsInserted.push(script.src);
            const newScript = document.createElement(\\"script\\");
            newScript.async = true;
            newScript.src = script.src;
            document.head.appendChild(newScript);
          } else if (
            !script.type ||
            [
              \\"text/javascript\\",
              \\"application/javascript\\",
              \\"application/ecmascript\\",
            ].includes(script.type)
          ) {
            if (state.scriptsRun.includes(script.innerText)) {
              continue;
            }

            try {
              state.scriptsRun.push(script.innerText);
              new Function(script.innerText)();
            } catch (error) {
              console.warn(\\"\`CustomCode\`: Error running script:\\", error);
            }
          }
        }
      }
    },
  });

  useEffect(() => {
    state.findAndRunScripts();
  }, []);

  return (
    <div
      ref={elem}
      className={
        \\"builder-custom-code\\" + (props.replaceNodes ? \\" replace-nodes\\" : \\"\\")
      }
      dangerouslySetInnerHTML={{ __html: props.code }}
    />
  );
}

export default CustomCode;
"
`;

exports[`React - stateType: solid > jsx > Javascript Test > Form 1`] = `
"\\"use client\\";
import * as React from \\"react\\";
import { useRef } from \\"react\\";
import { useMutable } from \\"react-solid-state\\";
import { Builder, builder } from \\"@builder.io/sdk\\";
import {
  BuilderBlock as BuilderBlockComponent,
  BuilderBlocks,
  get,
  set,
} from \\"@fake\\";

function FormComponent(props) {
  const formRef = useRef(null);
  const state = useMutable({
    formState: \\"unsubmitted\\",
    responseData: null,
    formErrorMessage: \\"\\",
    get submissionState() {
      return (Builder.isEditing && props.previewState) || state.formState;
    },
    onSubmit(event) {
      const sendWithJs =
        props.sendWithJs || props.sendSubmissionsTo === \\"email\\";

      if (props.sendSubmissionsTo === \\"zapier\\") {
        event.preventDefault();
      } else if (sendWithJs) {
        if (!(props.action || props.sendSubmissionsTo === \\"email\\")) {
          event.preventDefault();
          return;
        }

        event.preventDefault();
        const el = event.currentTarget;
        const headers = props.customHeaders || {};
        let body;
        const formData = new FormData(el); // TODO: maybe support null

        const formPairs = Array.from(
          event.currentTarget.querySelectorAll(\\"input,select,textarea\\")
        )
          .filter((el) => !!el.name)
          .map((el) => {
            let value;
            const key = el.name;

            if (el instanceof HTMLInputElement) {
              if (el.type === \\"radio\\") {
                if (el.checked) {
                  value = el.name;
                  return {
                    key,
                    value,
                  };
                }
              } else if (el.type === \\"checkbox\\") {
                value = el.checked;
              } else if (el.type === \\"number\\" || el.type === \\"range\\") {
                const num = el.valueAsNumber;

                if (!isNaN(num)) {
                  value = num;
                }
              } else if (el.type === \\"file\\") {
                // TODO: one vs multiple files
                value = el.files;
              } else {
                value = el.value;
              }
            } else {
              value = el.value;
            }

            return {
              key,
              value,
            };
          });
        let contentType = props.contentType;

        if (props.sendSubmissionsTo === \\"email\\") {
          contentType = \\"multipart/form-data\\";
        }

        Array.from(formPairs).forEach(({ value }) => {
          if (
            value instanceof File ||
            (Array.isArray(value) && value[0] instanceof File) ||
            value instanceof FileList
          ) {
            contentType = \\"multipart/form-data\\";
          }
        }); // TODO: send as urlEncoded or multipart by default
        // because of ease of use and reliability in browser API
        // for encoding the form?

        if (contentType !== \\"application/json\\") {
          body = formData;
        } else {
          // Json
          const json = {};
          Array.from(formPairs).forEach(({ value, key }) => {
            set(json, key, value);
          });
          body = JSON.stringify(json);
        }

        if (contentType && contentType !== \\"multipart/form-data\\") {
          if (
            /* Zapier doesn't allow content-type header to be sent from browsers */ !(
              sendWithJs && props.action?.includes(\\"zapier.com\\")
            )
          ) {
            headers[\\"content-type\\"] = contentType;
          }
        }
        const presubmitEvent = new CustomEvent(\\"presubmit\\", {
          detail: { body },
        });
        if (formRef.current) {
          formRef.current.dispatchEvent(presubmitEvent);
          if (presubmitEvent.defaultPrevented) {
            return;
          }
        }
        state.formState = \\"sending\\";
        const formUrl = \`\${
          builder.env === \\"dev\\" ? \\"http://localhost:5000\\" : \\"https://builder.io\\"
        }/api/v1/form-submit?apiKey=\${builder.apiKey}&to=\${btoa(
          props.sendSubmissionsToEmail || \\"\\"
        )}&name=\${encodeURIComponent(props.name || \\"\\")}\`;
        fetch(
          props.sendSubmissionsTo === \\"email\\"
            ? formUrl
            : props.action /* TODO: throw error if no action URL */,
          { body, headers, method: props.method || \\"post\\" }
        ).then(
          async (res) => {
            let body;
            const contentType = res.headers.get(\\"content-type\\");
            if (contentType && contentType.indexOf(\\"application/json\\") !== -1) {
              body = await res.json();
            } else {
              body = await res.text();
            }
            if (!res.ok && props.errorMessagePath) {
              /* TODO: allow supplying an error formatter function */ let message =
                get(body, props.errorMessagePath);
              if (message) {
                if (typeof message !== \\"string\\") {
                  /* TODO: ideally convert json to yaml so it woul dbe like          error: - email has been taken */ message =
                    JSON.stringify(message);
                }
                state.formErrorMessage = message;
              }
            }
            state.responseData = body;
            state.formState = res.ok ? \\"success\\" : \\"error\\";
            if (res.ok) {
              const submitSuccessEvent = new CustomEvent(\\"submit:success\\", {
                detail: { res, body },
              });
              if (formRef.current) {
                formRef.current.dispatchEvent(submitSuccessEvent);
                if (submitSuccessEvent.defaultPrevented) {
                  return;
                }
                /* TODO: option to turn this on/off? */ if (
                  props.resetFormOnSubmit !== false
                ) {
                  formRef.current.reset();
                }
              }
              /* TODO: client side route event first that can be preventDefaulted */ if (
                props.successUrl
              ) {
                if (formRef.current) {
                  const event = new CustomEvent(\\"route\\", {
                    detail: { url: props.successUrl },
                  });
                  formRef.current.dispatchEvent(event);
                  if (!event.defaultPrevented) {
                    location.href = props.successUrl;
                  }
                } else {
                  location.href = props.successUrl;
                }
              }
            }
          },
          (err) => {
            const submitErrorEvent = new CustomEvent(\\"submit:error\\", {
              detail: { error: err },
            });
            if (formRef.current) {
              formRef.current.dispatchEvent(submitErrorEvent);
              if (submitErrorEvent.defaultPrevented) {
                return;
              }
            }
            state.responseData = err;
            state.formState = \\"error\\";
          }
        );
      }
    },
  });
  return (
    <>
      {\\" \\"}
      <form
        validate={props.validate}
        ref={formRef}
        action={!props.sendWithJs && props.action}
        method={props.method}
        name={props.name}
        onSubmit={(event) => state.onSubmit(event)}
        {...props.attributes}
      >
        {props.builderBlock && props.builderBlock.children ? (
          <>
            {props.builderBlock?.children?.map((block, index) => (
              <BuilderBlockComponent
                key={block.id}
                block={block}
                index={index}
              />
            ))}
          </>
        ) : null}
        {state.submissionState === \\"error\\" ? (
          <BuilderBlocks dataPath=\\"errorMessage\\" blocks={props.errorMessage} />
        ) : null}
        {state.submissionState === \\"sending\\" ? (
          <BuilderBlocks
            dataPath=\\"sendingMessage\\"
            blocks={props.sendingMessage}
          />
        ) : null}
        {state.submissionState === \\"error\\" && state.responseData ? (
          <pre className=\\"builder-form-error-text pre\\">
            {JSON.stringify(state.responseData, null, 2)}
          </pre>
        ) : null}
        {state.submissionState === \\"success\\" ? (
          <BuilderBlocks
            dataPath=\\"successMessage\\"
            blocks={props.successMessage}
          />
        ) : null}
      </form>{\\" \\"}
      <style jsx>{\`
        .pre {
          padding: 10px;
          color: red;
          text-align: center;
        }
      \`}</style>{\\" \\"}
    </>
  );
}
export default FormComponent;
"
`;

exports[`React - stateType: solid > jsx > Javascript Test > Image 1`] = `
"\\"use client\\";
import * as React from \\"react\\";
import { useRef, useEffect } from \\"react\\";
import { useMutable } from \\"react-solid-state\\";

function Image(props) {
  const pictureRef = useRef(null);
  const state = useMutable({
    scrollListener: null,
    imageLoaded: false,
    setLoaded() {
      state.imageLoaded = true;
    },
    useLazyLoading() {
      // TODO: Add more checks here, like testing for real web browsers
      return !!props.lazy && state.isBrowser();
    },
    isBrowser: function isBrowser() {
      return (
        typeof window !== \\"undefined\\" &&
        window.navigator.product != \\"ReactNative\\"
      );
    },
    load: false,
  });

  useEffect(() => {
    if (state.useLazyLoading()) {
      // throttled scroll capture listener
      const listener = () => {
        if (pictureRef.current) {
          const rect = pictureRef.current.getBoundingClientRect();
          const buffer = window.innerHeight / 2;

          if (rect.top < window.innerHeight + buffer) {
            state.load = true;
            state.scrollListener = null;
            window.removeEventListener(\\"scroll\\", listener);
          }
        }
      };

      state.scrollListener = listener;
      window.addEventListener(\\"scroll\\", listener, {
        capture: true,
        passive: true,
      });
      listener();
    }
  }, []);

  useEffect(() => {
    return () => {
      if (state.scrollListener) {
        window.removeEventListener(\\"scroll\\", state.scrollListener);
      }
    };
  }, []);

  return (
    <>
      <div>
        <picture ref={pictureRef}>
          {!state.useLazyLoading() || state.load ? (
            <img
              alt={props.altText}
              aria-role={props.altText ? \\"presentation\\" : undefined}
              className={
                \\"builder-image\\" +
                (props._class ? \\" \\" + props._class : \\"\\") +
                \\" img\\"
              }
              src={props.image}
              onLoad={(event) => state.setLoaded()}
              srcset={props.srcset}
              sizes={props.sizes}
            />
          ) : null}
          <source srcset={props.srcset} />
        </picture>
        {props.children}
      </div>
      <style jsx>{\`
        .img {
          opacity: 1;
          transition: opacity 0.2s ease-in-out;
          object-fit: cover;
          object-position: center;
        }
      \`}</style>
    </>
  );
}

export default Image;
"
`;

exports[`React - stateType: solid > jsx > Javascript Test > Image State 1`] = `
"\\"use client\\";
import * as React from \\"react\\";
import { useMutable } from \\"react-solid-state\\";

function ImgStateComponent(props) {
  const state = useMutable({
    canShow: true,
    images: [\\"http://example.com/qwik.png\\"],
  });

  return (
    <div>
      {state.images?.map((item, itemIndex) => (
        <img className=\\"custom-class\\" src={item} key={itemIndex} />
      ))}
    </div>
  );
}

export default ImgStateComponent;
"
`;

exports[`React - stateType: solid > jsx > Javascript Test > Img 1`] = `
"import * as React from \\"react\\";
import { Builder } from \\"@builder.io/sdk\\";

function ImgComponent(props) {
  return (
    <img
      style={{
        objectFit: props.backgroundSize || \\"cover\\",
        objectPosition: props.backgroundPosition || \\"center\\",
      }}
      {...props.attributes}
      key={(Builder.isEditing && props.imgSrc) || \\"default-key\\"}
      alt={props.altText}
      src={props.imgSrc}
    />
  );
}

export default ImgComponent;
"
`;

exports[`React - stateType: solid > jsx > Javascript Test > Input 1`] = `
"\\"use client\\";
import * as React from \\"react\\";
import { Builder } from \\"@builder.io/sdk\\";

function FormInputComponent(props) {
  return (
    <input
      {...props.attributes}
      key={
        Builder.isEditing && props.defaultValue
          ? props.defaultValue
          : \\"default-key\\"
      }
      placeholder={props.placeholder}
      type={props.type}
      name={props.name}
      value={props.value}
      defaultValue={props.defaultValue}
      required={props.required}
      onChange={(event) => props.onChange?.(event.target.value)}
    />
  );
}

export default FormInputComponent;
"
`;

exports[`React - stateType: solid > jsx > Javascript Test > InputParent 1`] = `
"import * as React from \\"react\\";
import { useMutable } from \\"react-solid-state\\";
import FormInputComponent from \\"./input.raw\\";

function Stepper(props) {
  const state = useMutable({
    handleChange(value) {
      console.log(value);
    },
  });

  return (
    <FormInputComponent
      name=\\"kingzez\\"
      type=\\"text\\"
      onChange={(value) => state.handleChange(value)}
    />
  );
}

export default Stepper;
"
`;

exports[`React - stateType: solid > jsx > Javascript Test > NestedStore 1`] = `
"\\"use client\\";
import * as React from \\"react\\";
import { useMutable } from \\"react-solid-state\\";

function NestedStore(props) {
  const state = useMutable({ _id: \\"abc\\", _messageId: state._id + \\"-message\\" });

  return (
    <div id={state._id}>
      Test
      <p id={state._messageId}>Message</p>
    </div>
  );
}

export default NestedStore;
"
`;

exports[`React - stateType: solid > jsx > Javascript Test > RawText 1`] = `
"import * as React from \\"react\\";

function RawText(props) {
  return (
    <span
      className={props.attributes?.class || props.attributes?.className}
      dangerouslySetInnerHTML={{ __html: props.text || \\"\\" }}
    />
  );
}

export default RawText;
"
`;

exports[`React - stateType: solid > jsx > Javascript Test > Section 1`] = `
"import * as React from \\"react\\";

function SectionComponent(props) {
  return (
    <section
      {...props.attributes}
      style={
        props.maxWidth && typeof props.maxWidth === \\"number\\"
          ? {
              maxWidth: props.maxWidth,
            }
          : undefined
      }
    >
      {props.children}
    </section>
  );
}

export default SectionComponent;
"
`;

exports[`React - stateType: solid > jsx > Javascript Test > Select 1`] = `
"import * as React from \\"react\\";
import { Builder } from \\"@builder.io/sdk\\";

function SelectComponent(props) {
  return (
    <select
      {...props.attributes}
      value={props.value}
      key={
        Builder.isEditing && props.defaultValue
          ? props.defaultValue
          : \\"default-key\\"
      }
      defaultValue={props.defaultValue}
      name={props.name}
    >
      {props.options?.map((option, index) => (
        <option value={option.value} data-index={index}>
          {option.name || option.value}
        </option>
      ))}
    </select>
  );
}

export default SelectComponent;
"
`;

exports[`React - stateType: solid > jsx > Javascript Test > SlotDefault 1`] = `
"import * as React from \\"react\\";

function SlotCode(props) {
  return (
    <div>
      <>
        {props.children || <div className=\\"default-slot\\">Default content</div>}
      </>
    </div>
  );
}

export default SlotCode;
"
`;

exports[`React - stateType: solid > jsx > Javascript Test > SlotHtml 1`] = `
"import * as React from \\"react\\";
import ContentSlotCode from \\"./content-slot-jsx.raw\\";

function SlotCode(props) {
  return (
    <div>
      <ContentSlotCode testing={<div>Hello</div>}></ContentSlotCode>
    </div>
  );
}

export default SlotCode;
"
`;

exports[`React - stateType: solid > jsx > Javascript Test > SlotJsx 1`] = `
"import * as React from \\"react\\";
import ContentSlotCode from \\"./content-slot-jsx.raw\\";

function SlotCode(props) {
  return (
    <div>
      <ContentSlotCode slotTesting={<div>Hello</div>} />
    </div>
  );
}

export default SlotCode;
"
`;

exports[`React - stateType: solid > jsx > Javascript Test > SlotNamed 1`] = `
"import * as React from \\"react\\";

function SlotCode(props) {
  return (
    <div>
      <>{props.myAwesomeSlot}</>
      <>{props.top}</>
      <>{props.left || \\"Default left\\"}</>
      <>{props.children || \\"Default Child\\"}</>
    </div>
  );
}

export default SlotCode;
"
`;

exports[`React - stateType: solid > jsx > Javascript Test > Stamped.io 1`] = `
"\\"use client\\";
import * as React from \\"react\\";
import { useEffect } from \\"react\\";
import { useMutable } from \\"react-solid-state\\";
import { kebabCase, snakeCase } from \\"lodash\\";

function SmileReviews(props) {
  const state = useMutable({
    reviews: [],
    name: \\"test\\",
    showReviewPrompt: false,
    kebabCaseValue() {
      return kebabCase(\\"testThat\\");
    },
    snakeCaseValue() {
      return snakeCase(\\"testThis\\");
    },
  });

  useEffect(() => {
    fetch(
      \`https://stamped.io/api/widget/reviews?storeUrl=builder-io.myshopify.com&apiKey=\${
        props.apiKey || \\"pubkey-8bbDq7W6w4sB3OWeM1HUy2s47702hM\\"
      }&productId=\${props.productId || \\"2410511106127\\"}\`
    )
      .then((res) => res.json())
      .then((data) => {
        state.reviews = data.data;
      });
  }, []);

  return (
    <>
      <div data-user={state.name}>
        <button onClick={(event) => (state.showReviewPrompt = true)}>
          Write a review
        </button>
        {state.showReviewPrompt || \\"asdf\\" ? (
          <>
            <input placeholder=\\"Email\\" />
            <input placeholder=\\"Title\\" className=\\"input\\" />
            <textarea
              placeholder=\\"How was your experience?\\"
              className=\\"textarea\\"
            />
            <button
              className=\\"button\\"
              onClick={(ev) => {
                ev.preventDefault();
                state.showReviewPrompt = false;
              }}
            >
              Submit
            </button>
          </>
        ) : null}
        {state.reviews?.map((review, index) => (
          <div className=\\"review\\" key={review.id}>
            <img className=\\"img\\" src={review.avatar} />
            <div
              className={state.showReviewPrompt ? \\"bg-primary\\" : \\"bg-secondary\\"}
            >
              <div>N: {index}</div>
              <div>{review.author}</div>
              <div>{review.reviewMessage}</div>
            </div>
          </div>
        ))}
      </div>
      <style jsx>{\`
        .input {
          display: block;
        }
        .textarea {
          display: block;
        }
        .button {
          display: block;
        }
        .review {
          margin: 10px;
          padding: 10px;
          background: white;
          display: flex;
          border-radius: 5px;
          box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
          -webkit-font-smoothing: antialiased;
        }
        .img {
          height: 30px;
          width: 30px;
          margin-right: 10px;
        }
      \`}</style>
    </>
  );
}

export default SmileReviews;
"
`;

exports[`React - stateType: solid > jsx > Javascript Test > StoreComment 1`] = `
"\\"use client\\";
import * as React from \\"react\\";
import { useMutable } from \\"react-solid-state\\";

function StringLiteralStore(props) {
  const state = useMutable({ foo: true, bar() {} });

  return <>{state.foo}</>;
}

export default StringLiteralStore;
"
`;

exports[`React - stateType: solid > jsx > Javascript Test > StoreShadowVars 1`] = `
"\\"use client\\";
import * as React from \\"react\\";
import { useMutable } from \\"react-solid-state\\";

function MyComponent(props) {
  const state = useMutable({
    errors: {},
    foo(errors) {
      return errors;
    },
  });

  return <>{state.foo(state.errors)}</>;
}

export default MyComponent;
"
`;

exports[`React - stateType: solid > jsx > Javascript Test > StoreWithState 1`] = `
"\\"use client\\";
import * as React from \\"react\\";
import { useMutable } from \\"react-solid-state\\";

function MyComponent(props) {
  const state = useMutable({
    foo: false,
    bar() {
      return state.foo;
    },
  });

  return <>{state.bar()}</>;
}

export default MyComponent;
"
`;

exports[`React - stateType: solid > jsx > Javascript Test > Submit 1`] = `
"import * as React from \\"react\\";

function SubmitButton(props) {
  return (
    <button type=\\"submit\\" {...props.attributes}>
      {props.text}
    </button>
  );
}

export default SubmitButton;
"
`;

exports[`React - stateType: solid > jsx > Javascript Test > Text 1`] = `
"\\"use client\\";
import * as React from \\"react\\";
import { useMutable } from \\"react-solid-state\\";
import { Builder } from \\"@builder.io/sdk\\";

function Text(props) {
  const state = useMutable({ name: \\"Decadef20\\" });

  return (
    <div
      contentEditable={allowEditingText || undefined}
      data-name={{
        test: state.name || \\"any name\\",
      }}
      dangerouslySetInnerHTML={{
        __html:
          props.text ||
          props.content ||
          state.name ||
          '<p class=\\"text-lg\\">my name</p>',
      }}
    />
  );
}

export default Text;
"
`;

exports[`React - stateType: solid > jsx > Javascript Test > Textarea 1`] = `
"import * as React from \\"react\\";

function Textarea(props) {
  return (
    <textarea
      {...props.attributes}
      placeholder={props.placeholder}
      name={props.name}
      value={props.value}
      defaultValue={props.defaultValue}
    />
  );
}

export default Textarea;
"
`;

exports[`React - stateType: solid > jsx > Javascript Test > UseValueAndFnFromStore 1`] = `
"\\"use client\\";
import * as React from \\"react\\";
import { useEffect } from \\"react\\";
import { useMutable } from \\"react-solid-state\\";

function UseValueAndFnFromStore(props) {
  const state = useMutable({
    _id: \\"abc\\",
    _active: false,
    _do(id) {
      state._active = !!id;

      if (props.onChange) {
        props.onChange(state._active);
      }
    },
  });

  useEffect(() => {
    if (state._do) {
      state._do(state._id);
    }
  });

  return <div>Test</div>;
}

export default UseValueAndFnFromStore;
"
`;

exports[`React - stateType: solid > jsx > Javascript Test > Video 1`] = `
"import * as React from \\"react\\";

function Video(props) {
  return (
    <video
      preload=\\"none\\"
      {...props.attributes}
      style={{
        width: \\"100%\\",
        height: \\"100%\\",
        ...props.attributes?.style,
        objectFit: props.fit,
        objectPosition: props.position,
        // Hack to get object fit to work as expected and
        // not have the video overflow
        borderRadius: 1,
      }}
      key={props.video || \\"no-src\\"}
      poster={props.posterImage}
      autoplay={props.autoPlay}
      muted={props.muted}
      controls={props.controls}
      loop={props.loop}
    />
  );
}

export default Video;
"
`;

exports[`React - stateType: solid > jsx > Javascript Test > arrowFunctionInUseStore 1`] = `
"\\"use client\\";
import * as React from \\"react\\";
import { useMutable } from \\"react-solid-state\\";

function MyComponent(props) {
  const state = useMutable({
    name: \\"steve\\",
    setName(value) {
      state.name = value;
    },
    updateNameWithArrowFn(value) {
      state.name = value;
    },
  });

  return <div>Hello {state.name}</div>;
}

export default MyComponent;
"
`;

exports[`React - stateType: solid > jsx > Javascript Test > basicForFragment 1`] = `
"\\"use client\\";
import * as React from \\"react\\";
import { useMutable } from \\"react-solid-state\\";

function BasicForFragment(props) {
  const state = useMutable({ id: \\"xyz\\" });

  return (
    <div>
      {[\\"a\\", \\"b\\", \\"c\\"]?.map((option) => (
        <React.Fragment key={\`key-\${option}\`}>
          <div>{option}</div>
        </React.Fragment>
      ))}
      {[\\"a\\", \\"b\\", \\"c\\"]?.map((option) => (
        <React.Fragment key={\`\${state.id}-\${option}\`}>
          <div>{option}</div>
        </React.Fragment>
      ))}
      <select>
        {[\\"d\\", \\"e\\", \\"f\\"]?.map((option) => (
          <option key={\`\${state.id}-\${option}\`} value={option}>
            {option}
          </option>
        ))}
      </select>
    </div>
  );
}

export default BasicForFragment;
"
`;

exports[`React - stateType: solid > jsx > Javascript Test > basicForNoTagReference 1`] = `
"\\"use client\\";
import * as React from \\"react\\";
import { useMutable } from \\"react-solid-state\\";

function MyBasicForNoTagRefComponent(props) {
  const state = useMutable({
    name: \\"VincentW\\",
    TagName: \\"div\\",
    tag: \\"span\\",
    get TagNameGetter() {
      return \\"span\\";
    },
  });

  return (
    <state.TagNameGetter>
      Hello <state.tag>{state.name}</state.tag>
      {props.actions?.map((action) => (
        <state.TagName>
          <action.icon />
          <span>{action.text}</span>
        </state.TagName>
      ))}
    </state.TagNameGetter>
  );
}

export default MyBasicForNoTagRefComponent;
"
`;

exports[`React - stateType: solid > jsx > Javascript Test > basicForwardRef 1`] = `
"\\"use client\\";
import * as React from \\"react\\";
import { forwardRef } from \\"react\\";
import { useMutable } from \\"react-solid-state\\";

const MyBasicForwardRefComponent = forwardRef(
  function MyBasicForwardRefComponent(props, inputRef) {
    const state = useMutable({ name: \\"PatrickJS\\" });

    return (
      <>
        <div>
          <input
            className=\\"input\\"
            ref={inputRef}
            value={state.name}
            onChange={(event) => (state.name = event.target.value)}
          />
        </div>
        <style jsx>{\`
          .input {
            color: red;
          }
        \`}</style>
      </>
    );
  }
);

export default MyBasicForwardRefComponent;
"
`;

exports[`React - stateType: solid > jsx > Javascript Test > basicForwardRefMetadata 1`] = `
"\\"use client\\";
import * as React from \\"react\\";
import { forwardRef } from \\"react\\";
import { useMutable } from \\"react-solid-state\\";

const MyBasicForwardRefComponent = forwardRef(
  function MyBasicForwardRefComponent(props, inputRef) {
    const state = useMutable({ name: \\"PatrickJS\\" });

    return (
      <>
        <div>
          <input
            className=\\"input\\"
            ref={inputRef}
            value={state.name}
            onChange={(event) => (state.name = event.target.value)}
          />
        </div>
        <style jsx>{\`
          .input {
            color: red;
          }
        \`}</style>
      </>
    );
  }
);

export default MyBasicForwardRefComponent;
"
`;

exports[`React - stateType: solid > jsx > Javascript Test > basicOnUpdateReturn 1`] = `
"\\"use client\\";
import * as React from \\"react\\";
import { useEffect } from \\"react\\";
import { useMutable } from \\"react-solid-state\\";

function MyBasicOnUpdateReturnComponent(props) {
  const state = useMutable({ name: \\"PatrickJS\\" });

  useEffect(() => {
    const controller = new AbortController();
    const signal = controller.signal;
    fetch(\\"https://patrickjs.com/api/resource.json\\", {
      signal,
    })
      .then((response) => response.json())
      .then((data) => {
        state.name = data.name;
      });
    return () => {
      if (!signal.aborted) {
        controller.abort();
      }
    };
  }, [state.name]);

  return <div>Hello! {state.name}</div>;
}

export default MyBasicOnUpdateReturnComponent;
"
`;

exports[`React - stateType: solid > jsx > Javascript Test > class + ClassName + css 1`] = `
"import * as React from \\"react\\";
import MyComp from \\"./my-component\\";

function MyBasicComponent(props) {
  return (
    <>
      <div>
        <MyComp className=\\"test\\" className=\\"test2\\">
          Hello! I can run in React, Vue, Solid, or Liquid!
        </MyComp>
        <div className=\\"test2 test div\\">
          Hello! I can run in React, Vue, Solid, or Liquid!
        </div>
      </div>
      <style jsx>{\`
        .div {
          padding: 10px;
        }
      \`}</style>
    </>
  );
}

export default MyBasicComponent;
"
`;

exports[`React - stateType: solid > jsx > Javascript Test > class + css 1`] = `
"import * as React from \\"react\\";

function MyBasicComponent(props) {
  return (
    <>
      <div className=\\"test div\\">
        Hello! I can run in React, Vue, Solid, or Liquid!
      </div>
      <style jsx>{\`
        .div {
          padding: 10px;
        }
      \`}</style>
    </>
  );
}

export default MyBasicComponent;
"
`;

exports[`React - stateType: solid > jsx > Javascript Test > className + css 1`] = `
"import * as React from \\"react\\";

function MyBasicComponent(props) {
  return (
    <>
      <div className=\\"test div\\">
        Hello! I can run in React, Vue, Solid, or Liquid!
      </div>
      <style jsx>{\`
        .div {
          padding: 10px;
        }
      \`}</style>
    </>
  );
}

export default MyBasicComponent;
"
`;

exports[`React - stateType: solid > jsx > Javascript Test > className 1`] = `
"\\"use client\\";
import * as React from \\"react\\";
import { useMutable } from \\"react-solid-state\\";

function ClassNameCode(props) {
  const state = useMutable({ bindings: \\"a binding\\" });

  return (
    <div>
      <div className=\\"no binding\\">Without Binding</div>
      <div className={state.bindings}>With binding</div>
    </div>
  );
}

export default ClassNameCode;
"
`;

exports[`React - stateType: solid > jsx > Javascript Test > classState 1`] = `
"\\"use client\\";
import * as React from \\"react\\";
import { useMutable } from \\"react-solid-state\\";

function MyBasicComponent(props) {
  const state = useMutable({
    classState: \\"testClassName\\",
    styleState: {
      color: \\"red\\",
    },
  });

  return (
    <>
      <div className={state.classState + \\" div\\"} style={state.styleState}>
        Hello! I can run in React, Vue, Solid, or Liquid!
      </div>
      <style jsx>{\`
        .div {
          padding: 10px;
        }
      \`}</style>
    </>
  );
}

export default MyBasicComponent;
"
`;

exports[`React - stateType: solid > jsx > Javascript Test > componentWithContext 1`] = `
"\\"use client\\";
import * as React from \\"react\\";
import { useContext } from \\"react\\";
import Context1 from \\"@dummy/1\\";
import Context2 from \\"@dummy/2\\";

function ComponentWithContext(props) {
  const foo = useContext(Context1);

  return (
    <Context2.Provider
      value={{
        bar: \\"baz\\",
      }}
    >
      <Context1.Provider
        value={{
          foo: \\"bar\\",

          content() {
            return props.content;
          },
        }}
      >
        <>{foo.value}</>
      </Context1.Provider>
    </Context2.Provider>
  );
}

export default ComponentWithContext;
"
`;

exports[`React - stateType: solid > jsx > Javascript Test > componentWithContextMultiRoot 1`] = `
"\\"use client\\";
import * as React from \\"react\\";
import { useContext } from \\"react\\";
import Context1 from \\"@dummy/1\\";
import Context2 from \\"@dummy/2\\";

function ComponentWithContext(props) {
  const foo = useContext(Context1);

  return (
    <Context2.Provider
      value={{
        bar: \\"baz\\",
      }}
    >
      <Context1.Provider
        value={{
          foo: \\"bar\\",

          content() {
            return props.content;
          },
        }}
      >
        <>
          <>{foo.value}</>
          <div>other</div>
        </>
      </Context1.Provider>
    </Context2.Provider>
  );
}

export default ComponentWithContext;
"
`;

exports[`React - stateType: solid > jsx > Javascript Test > contentState 1`] = `
"\\"use client\\";
import * as React from \\"react\\";
import { useContext } from \\"react\\";
import BuilderContext from \\"@dummy/context.js\\";

function RenderContent(props) {
  return (
    <BuilderContext.Provider
      value={{
        content: props.content,
        registeredComponents: props.customComponents,
      }}
    >
      <div>setting context</div>
    </BuilderContext.Provider>
  );
}

export default RenderContent;
"
`;

exports[`React - stateType: solid > jsx > Javascript Test > defaultProps 1`] = `
"\\"use client\\";
import * as React from \\"react\\";

function Button(props) {
  return (
    <div>
      {props.link ? (
        <a
          {...props.attributes}
          href={props.link}
          target={props.openLinkInNewTab ? \\"_blank\\" : undefined}
        >
          {props.text}
        </a>
      ) : null}
      {!props.link ? (
        <button
          type=\\"button\\"
          {...props.attributes}
          onClick={(event) => props.onClick()}
        >
          {props.buttonText}
        </button>
      ) : null}
    </div>
  );
}

Button.defaultProps = {
  text: \\"default text\\",
  link: \\"https://builder.io/\\",
  openLinkInNewTab: false,
  onClick: () => {
    console.log(\\"hi\\");
  },
};

export default Button;
"
`;

exports[`React - stateType: solid > jsx > Javascript Test > defaultPropsOutsideComponent 1`] = `
"\\"use client\\";
import * as React from \\"react\\";

function Button(props) {
  return (
    <div>
      {props.link ? (
        <a
          {...props.attributes}
          href={props.link}
          target={props.openLinkInNewTab ? \\"_blank\\" : undefined}
        >
          {props.text}
        </a>
      ) : null}
      {!props.link ? (
        <button
          type=\\"button\\"
          {...props.attributes}
          onClick={(event) => props.onClick(event)}
        >
          {props.text}
        </button>
      ) : null}
    </div>
  );
}

Button.defaultProps = {
  text: \\"default text\\",
  link: \\"https://builder.io/\\",
  openLinkInNewTab: false,
  onClick: () => {},
};

export default Button;
"
`;

exports[`React - stateType: solid > jsx > Javascript Test > defaultValsWithTypes 1`] = `
"import * as React from \\"react\\";

const DEFAULT_VALUES = {
  name: \\"Sami\\",
};

function ComponentWithTypes(props) {
  return <div> Hello {props.name || DEFAULT_VALUES.name}</div>;
}

export default ComponentWithTypes;
"
`;

exports[`React - stateType: solid > jsx > Javascript Test > eventInputAndChange 1`] = `
"\\"use client\\";
import * as React from \\"react\\";
import { useMutable } from \\"react-solid-state\\";

function EventInputAndChange(props) {
  const state = useMutable({ name: \\"Steve\\" });

  return (
    <>
      <div>
        <input
          className=\\"input\\"
          value={state.name}
          onInput={(event) => (state.name = event.target.value)}
          onChange={(event) => (state.name = event.target.value)}
        />
        Hello! I can run in React, Vue, Solid, or Liquid!
      </div>
      <style jsx>{\`
        .input {
          color: red;
        }
      \`}</style>
    </>
  );
}

export default EventInputAndChange;
"
`;

exports[`React - stateType: solid > jsx > Javascript Test > expressionState 1`] = `
"\\"use client\\";
import * as React from \\"react\\";
import { useMutable } from \\"react-solid-state\\";

function MyComponent(props) {
  const state = useMutable({
    refToUse: !(props.componentRef instanceof Function)
      ? props.componentRef
      : null,
  });

  return <div>{state.refToUse}</div>;
}

export default MyComponent;
"
`;

exports[`React - stateType: solid > jsx > Javascript Test > getterState 1`] = `
"import * as React from \\"react\\";
import { useMutable } from \\"react-solid-state\\";

function Button(props) {
  const state = useMutable({
    get foo2() {
      return props.foo + \\"foo\\";
    },
    get bar() {
      return \\"bar\\";
    },
    baz(i) {
      return i + state.foo2.length;
    },
  });

  return (
    <div>
      <p>{state.foo2}</p>
      <p>{state.bar}</p>
      <p>{state.baz(1)}</p>
    </div>
  );
}

export default Button;
"
`;

exports[`React - stateType: solid > jsx > Javascript Test > import types 1`] = `
"import * as React from \\"react\\";
import { useMutable } from \\"react-solid-state\\";
import RenderBlock from \\"./builder-render-block.raw\\";

function RenderContent(props) {
  const state = useMutable({
    getRenderContentProps(block, index) {
      return {
        block: block,
        index: index,
      };
    },
  });

  return (
    <RenderBlock
      {...state.getRenderContentProps(props.renderContentProps.block, 0)}
    />
  );
}

export default RenderContent;
"
`;

exports[`React - stateType: solid > jsx > Javascript Test > multipleOnUpdate 1`] = `
"\\"use client\\";
import * as React from \\"react\\";
import { useEffect } from \\"react\\";

function MultipleOnUpdate(props) {
  useEffect(() => {
    console.log(\\"Runs on every update/rerender\\");
  });
  useEffect(() => {
    console.log(\\"Runs on every update/rerender as well\\");
  });

  return <div />;
}

export default MultipleOnUpdate;
"
`;

exports[`React - stateType: solid > jsx > Javascript Test > multipleOnUpdateWithDeps 1`] = `
"\\"use client\\";
import * as React from \\"react\\";
import { useEffect } from \\"react\\";
import { useMutable } from \\"react-solid-state\\";

function MultipleOnUpdateWithDeps(props) {
  const state = useMutable({ a: \\"a\\", b: \\"b\\", c: \\"c\\", d: \\"d\\" });

  useEffect(() => {
    console.log(\\"Runs when a or b changes\\", state.a, state.b);

    if (state.a === \\"a\\") {
      state.a = \\"b\\";
    }
  }, [state.a, state.b]);
  useEffect(() => {
    console.log(\\"Runs when c or d changes\\", state.c, state.d);

    if (state.a === \\"a\\") {
      state.a = \\"b\\";
    }
  }, [state.c, state.d]);

  return <div />;
}

export default MultipleOnUpdateWithDeps;
"
`;

exports[`React - stateType: solid > jsx > Javascript Test > multipleSpreads 1`] = `
"\\"use client\\";
import * as React from \\"react\\";
import { useMutable } from \\"react-solid-state\\";

function MyBasicComponent(props) {
  const state = useMutable({
    attrs: {
      hello: \\"world\\",
    },
  });

  return <input {...state.attrs} {...props} />;
}

export default MyBasicComponent;
"
`;

exports[`React - stateType: solid > jsx > Javascript Test > nestedShow 1`] = `
"import * as React from \\"react\\";

function NestedShow(props) {
  return (
    <>
      {props.conditionA ? (
        <>
          {!props.conditionB ? (
            <div>if condition A and condition B</div>
          ) : (
            <div>else-condition-B</div>
          )}
        </>
      ) : (
        <div>else-condition-A</div>
      )}
    </>
  );
}

export default NestedShow;
"
`;

exports[`React - stateType: solid > jsx > Javascript Test > nestedStyles 1`] = `
"import * as React from \\"react\\";

function NestedStyles(props) {
  return (
    <>
      <div className=\\"div\\">Hello world</div>
      <style jsx>{\`
        .div {
          display: flex;
          --bar: red;
          color: var(--bar);
        }
        @media (max-width: env(--mobile)) {
          .div {
            display: block;
          }
        }
        .div:hover {
          display: flex;
        }
        .div:active {
          display: inline;
        }
        .div .nested-selector {
          display: grid;
        }
        .div .nested-selector:hover {
          display: block;
        }
        .div.nested-selector:active {
          display: inline-block;
        }
      \`}</style>
    </>
  );
}

export default NestedStyles;
"
`;

exports[`React - stateType: solid > jsx > Javascript Test > onEvent 1`] = `
"\\"use client\\";
import * as React from \\"react\\";
import { useRef, useEffect } from \\"react\\";
import { useMutable } from \\"react-solid-state\\";

function Embed(props) {
  const elem = useRef(null);
  const state = useMutable({
    foo(event) {
      console.log(\\"test2\\");
    },
    elem_onInitEditingBldr(event) {
      console.log(\\"test\\");
      state.foo(event);
    },
  });

  useEffect(() => {
    elem.current?.addEventListener(\\"initEditingBldr\\", elem_onInitEditingBldr);
    return () =>
      elem.current?.removeEventListener(
        \\"initEditingBldr\\",
        elem_onInitEditingBldr
      );
  }, []);

  useEffect(() => {
    elem.current.dispatchEvent(new CustomEvent(\\"initEditingBldr\\"));
  }, []);

  return (
    <div className=\\"builder-embed\\" ref={elem}>
      <div>Test</div>
    </div>
  );
}

export default Embed;
"
`;

exports[`React - stateType: solid > jsx > Javascript Test > onInit & onMount 1`] = `
"\\"use client\\";
import * as React from \\"react\\";
import { useRef, useEffect } from \\"react\\";

function OnInit(props) {
  const hasInitialized = useRef(false);
  if (!hasInitialized.current) {
    console.log(\\"onInit\\");
    hasInitialized.current = true;
  }

  useEffect(() => {
    console.log(\\"onMount\\");
  }, []);

  return <div />;
}

export default OnInit;
"
`;

exports[`React - stateType: solid > jsx > Javascript Test > onInit 1`] = `
"\\"use client\\";
import * as React from \\"react\\";
import { useRef } from \\"react\\";
import { useMutable } from \\"react-solid-state\\";

export const defaultValues = {
  name: \\"PatrickJS\\",
};

function OnInit(props) {
  const state = useMutable({ name: \\"\\" });

  const hasInitialized = useRef(false);
  if (!hasInitialized.current) {
    state.name = defaultValues.name || props.name;
    console.log(\\"set defaults with props\\");
    hasInitialized.current = true;
  }

  return <div>Default name defined by parent {state.name}</div>;
}

export default OnInit;
"
`;

exports[`React - stateType: solid > jsx > Javascript Test > onInitPlain 1`] = `
"import * as React from \\"react\\";
import { useRef } from \\"react\\";

function OnInitPlain(props) {
  const hasInitialized = useRef(false);
  if (!hasInitialized.current) {
    console.log(\\"onInit\\");
    hasInitialized.current = true;
  }

  return <div />;
}

export default OnInitPlain;
"
`;

exports[`React - stateType: solid > jsx > Javascript Test > onMount 1`] = `
"\\"use client\\";
import * as React from \\"react\\";
import { useEffect } from \\"react\\";

function Comp(props) {
  useEffect(() => {
    console.log(\\"Runs on mount\\");
  }, []);

  useEffect(() => {
    return () => {
      console.log(\\"Runs on unMount\\");
    };
  }, []);

  return <div />;
}

export default Comp;
"
`;

exports[`React - stateType: solid > jsx > Javascript Test > onMountMultiple 1`] = `
"\\"use client\\";
import * as React from \\"react\\";
import { useEffect } from \\"react\\";

function Comp(props) {
  useEffect(() => {
    console.log(\\"Runs on mount\\");
  }, []);
  useEffect(() => {
    console.log(\\"Another one runs on Mount\\");
  }, []);
  useEffect(() => {
    console.log(\\"SSR runs on Mount\\");
  }, []);

  return <div />;
}

export default Comp;
"
`;

exports[`React - stateType: solid > jsx > Javascript Test > onUpdate 1`] = `
"\\"use client\\";
import * as React from \\"react\\";
import { useEffect } from \\"react\\";

function OnUpdate(props) {
  useEffect(() => {
    console.log(\\"Runs on every update/rerender\\");
  });

  return <div />;
}

export default OnUpdate;
"
`;

exports[`React - stateType: solid > jsx > Javascript Test > onUpdateWithDeps 1`] = `
"\\"use client\\";
import * as React from \\"react\\";
import { useEffect } from \\"react\\";
import { useMutable } from \\"react-solid-state\\";

function OnUpdateWithDeps(props) {
  const state = useMutable({ a: \\"a\\", b: \\"b\\" });

  useEffect(() => {
    console.log(\\"Runs when a, b or size changes\\", state.a, state.b, props.size);
  }, [state.a, state.b, props.size]);

  return <div />;
}

export default OnUpdateWithDeps;
"
`;

exports[`React - stateType: solid > jsx > Javascript Test > preserveExportOrLocalStatement 1`] = `
"import * as React from \\"react\\";

const b = 3;
const foo = () => {};
export const a = 3;
export const bar = () => {};
export function run(value) {}

function MyBasicComponent(props) {
  return <div />;
}

export default MyBasicComponent;
"
`;

exports[`React - stateType: solid > jsx > Javascript Test > preserveTyping 1`] = `
"import * as React from \\"react\\";

function MyBasicComponent(props) {
  return (
    <div>Hello! I can run in React, Vue, Solid, or Liquid! {props.name}</div>
  );
}

export default MyBasicComponent;
"
`;

exports[`React - stateType: solid > jsx > Javascript Test > propsDestructure 1`] = `
"\\"use client\\";
import * as React from \\"react\\";
import { useMutable } from \\"react-solid-state\\";

function MyBasicComponent(props) {
  const state = useMutable({ name: \\"Decadef20\\" });

  return (
    <div>
      {props.children}
      {props.type}
      Hello! I can run in React, Vue, Solid, or Liquid!
    </div>
  );
}

export default MyBasicComponent;
"
`;

exports[`React - stateType: solid > jsx > Javascript Test > propsInterface 1`] = `
"import * as React from \\"react\\";

function MyBasicComponent(props) {
  return (
    <div>Hello! I can run in React, Vue, Solid, or Liquid! {props.name}</div>
  );
}

export default MyBasicComponent;
"
`;

exports[`React - stateType: solid > jsx > Javascript Test > propsType 1`] = `
"import * as React from \\"react\\";

function MyBasicComponent(props) {
  return (
    <div>Hello! I can run in React, Vue, Solid, or Liquid! {props.name}</div>
  );
}

export default MyBasicComponent;
"
`;

exports[`React - stateType: solid > jsx > Javascript Test > referencingFunInsideHook 1`] = `
"\\"use client\\";
import * as React from \\"react\\";
import { useEffect } from \\"react\\";
import { useMutable } from \\"react-solid-state\\";

function OnUpdate(props) {
  const state = useMutable({
    foo: function foo(params) {},
    bar: function bar() {},
    zoo: function zoo() {
      const params = {
        cb: state.bar,
      };
    },
  });

  useEffect(() => {
    state.foo({
      someOption: state.bar,
    });
  });

  return <div />;
}

export default OnUpdate;
"
`;

exports[`React - stateType: solid > jsx > Javascript Test > renderBlock 1`] = `
"\\"use client\\";
import * as React from \\"react\\";
import { useMutable } from \\"react-solid-state\\";
import { TARGET } from \\"../../constants/target.js\\";
import { evaluate } from \\"../../functions/evaluate.js\\";
import { extractTextStyles } from \\"../../functions/extract-text-styles.js\\";
import { getBlockActions } from \\"../../functions/get-block-actions.js\\";
import { getBlockComponentOptions } from \\"../../functions/get-block-component-options.js\\";
import { getBlockProperties } from \\"../../functions/get-block-properties.js\\";
import { getBlockTag } from \\"../../functions/get-block-tag.js\\";
import { getProcessedBlock } from \\"../../functions/get-processed-block.js\\";
import { getReactNativeBlockStyles } from \\"../../functions/get-react-native-block-styles.js\\";
import BlockStyles from \\"./block-styles\\";
import { isEmptyHtmlElement } from \\"./render-block.helpers.js\\";
import RenderComponentWithContext from \\"./render-component-with-context.js\\";
import RenderComponent from \\"./render-component\\";
import RenderRepeatedBlock from \\"./render-repeated-block\\";

function RenderBlock(props) {
  const state = useMutable({
    get component() {
      const componentName = getProcessedBlock({
        block: props.block,
        state: props.context.state,
        context: props.context.context,
        shouldEvaluateBindings: false,
      }).component?.name;

      if (!componentName) {
        return null;
      }

      const ref = props.context.registeredComponents[componentName];

      if (!ref) {
        // TODO: Public doc page with more info about this message
        console.warn(\`
          Could not find a registered component named \\"\${componentName}\\".
          If you registered it, is the file that registered it imported by the file that needs to render it?\`);
        return undefined;
      } else {
        return ref;
      }
    },
    get tag() {
      return getBlockTag(state.useBlock);
    },
    get useBlock() {
      return state.repeatItemData
        ? props.block
        : getProcessedBlock({
            block: props.block,
            state: props.context.state,
            context: props.context.context,
            shouldEvaluateBindings: true,
          });
    },
    get actions() {
      return getBlockActions({
        block: state.useBlock,
        state: props.context.state,
        context: props.context.context,
      });
    },
    get attributes() {
      const blockProperties = getBlockProperties(state.useBlock);
      return {
        ...blockProperties,
        ...(TARGET === \\"reactNative\\"
          ? {
              style: getReactNativeBlockStyles({
                block: state.useBlock,
                context: props.context,
                blockStyles: blockProperties.style,
              }),
            }
          : {}),
      };
    },
    get shouldWrap() {
      return !state.component?.noWrap;
    },
    get renderComponentProps() {
      return {
        blockChildren: state.useChildren,
        componentRef: state.component?.component,
        componentOptions: {
          ...getBlockComponentOptions(state.useBlock),

          /**
           * These attributes are passed to the wrapper element when there is one. If \`noWrap\` is set to true, then
           * they are provided to the component itself directly.
           */
          ...(state.shouldWrap
            ? {}
            : {
                attributes: { ...state.attributes, ...state.actions },
              }),
          customBreakpoints: state.childrenContext?.content?.meta?.breakpoints,
        },
        context: state.childrenContext,
      };
    },
    get useChildren() {
      // TO-DO: When should \`canHaveChildren\` dictate rendering?
      // This is currently commented out because some Builder components (e.g. Box) do not have \`canHaveChildren: true\`,
      // but still receive and need to render children.
      // return state.componentInfo?.canHaveChildren ? state.useBlock.children : [];
      return state.useBlock.children ?? [];
    },
    get childrenWithoutParentComponent() {
      /**
       * When there is no \`componentRef\`, there might still be children that need to be rendered. In this case,
       * we render them outside of \`componentRef\`.
       * NOTE: We make sure not to render this if \`repeatItemData\` is non-null, because that means we are rendering an array of
       * blocks, and the children will be repeated within those blocks.
       */
      const shouldRenderChildrenOutsideRef =
        !state.component?.component && !state.repeatItemData;
      return shouldRenderChildrenOutsideRef ? state.useChildren : [];
    },
    get repeatItemData() {
      /**
       * we don't use \`state.useBlock\` here because the processing done within its logic includes evaluating the block's bindings,
       * which will not work if there is a repeat.
       */
      const { repeat, ...blockWithoutRepeat } = props.block;

      if (!repeat?.collection) {
        return undefined;
      }

      const itemsArray = evaluate({
        code: repeat.collection,
        state: props.context.state,
        context: props.context.context,
      });

      if (!Array.isArray(itemsArray)) {
        return undefined;
      }

      const collectionName = repeat.collection.split(\\".\\").pop();
      const itemNameToUse =
        repeat.itemName || (collectionName ? collectionName + \\"Item\\" : \\"item\\");
      const repeatArray = itemsArray.map((item, index) => ({
        context: {
          ...props.context,
          state: {
            ...props.context.state,
            $index: index,
            $item: item,
            [itemNameToUse]: item,
            [\`$\${itemNameToUse}Index\`]: index,
          },
        },
        block: blockWithoutRepeat,
      }));
      return repeatArray;
    },
    get inheritedTextStyles() {
      if (TARGET !== \\"reactNative\\") {
        return {};
      }

      const styles = getReactNativeBlockStyles({
        block: state.useBlock,
        context: props.context,
        blockStyles: state.attributes.style,
      });
      return extractTextStyles(styles);
    },
    get childrenContext() {
      return {
        apiKey: props.context.apiKey,
        state: props.context.state,
        content: props.context.content,
        context: props.context.context,
        registeredComponents: props.context.registeredComponents,
        inheritedStyles: state.inheritedTextStyles,
      };
    },
    get renderComponentTag() {
      if (TARGET === \\"reactNative\\") {
        return RenderComponentWithContext;
      } else if (TARGET === \\"vue3\\") {
        // vue3 expects a string for the component tag
        return \\"RenderComponent\\";
      } else {
        return RenderComponent;
      }
    },
    componentInfo: null,
  });

  return (
    <>
      {state.shouldWrap ? (
        <>
          {isEmptyHtmlElement(state.tag) ? (
            <state.tag {...state.attributes} {...state.actions} />
          ) : null}
          {!isEmptyHtmlElement(state.tag) && state.repeatItemData ? (
            <>
              {state.repeatItemData?.map((data, index) => (
                <RenderRepeatedBlock
                  key={index}
                  repeatContext={data.context}
                  block={data.block}
                />
              ))}
            </>
          ) : null}
          {!isEmptyHtmlElement(state.tag) && !state.repeatItemData ? (
            <state.tag {...state.attributes} {...state.actions}>
              <state.renderComponentTag {...state.renderComponentProps} />
              {state.childrenWithoutParentComponent?.map((child) => (
                <RenderBlock
                  key={\\"render-block-\\" + child.id}
                  block={child}
                  context={state.childrenContext}
                />
              ))}
              {state.childrenWithoutParentComponent?.map((child) => (
                <BlockStyles
                  key={\\"block-style-\\" + child.id}
                  block={child}
                  context={state.childrenContext}
                />
              ))}
            </state.tag>
          ) : null}
        </>
      ) : (
        <>
          <state.renderComponentTag {...state.renderComponentProps} />
        </>
      )}
    </>
  );
}

export default RenderBlock;
"
`;

exports[`React - stateType: solid > jsx > Javascript Test > renderContentExample 1`] = `
"\\"use client\\";
import * as React from \\"react\\";
import { useContext, useEffect } from \\"react\\";
import BuilderContext from \\"@dummy/context.js\\";
import {
  dispatchNewContentToVisualEditor,
  sendComponentsToVisualEditor,
  trackClick,
} from \\"@dummy/injection-js\\";
import RenderBlocks from \\"@dummy/RenderBlocks\\";

function RenderContent(props) {
  useEffect(() => {
    sendComponentsToVisualEditor(props.customComponents);
  }, []);

  useEffect(() => {
    dispatchNewContentToVisualEditor(props.content);
  }, [props.content]);

  return (
    <>
      <BuilderContext.Provider
        value={{
          get content() {
            return 3;
          },

          get registeredComponents() {
            return 4;
          },
        }}
      >
        <div className=\\"div\\" onClick={(event) => trackClick(props.content.id)}>
          <RenderBlocks blocks={props.content.blocks} />
        </div>
      </BuilderContext.Provider>
      <style jsx>{\`
        .div {
          display: flex;
          flex-direction: columns;
        }
      \`}</style>
    </>
  );
}

export default RenderContent;
"
`;

exports[`React - stateType: solid > jsx > Javascript Test > rootFragmentMultiNode 1`] = `
"import * as React from \\"react\\";

function Button(props) {
  return (
    <>
      {props.link ? (
        <a
          {...props.attributes}
          href={props.link}
          target={props.openLinkInNewTab ? \\"_blank\\" : undefined}
        >
          {props.text}
        </a>
      ) : null}
      {!props.link ? (
        <button type=\\"button\\" {...props.attributes}>
          {props.text}
        </button>
      ) : null}
    </>
  );
}

export default Button;
"
`;

exports[`React - stateType: solid > jsx > Javascript Test > rootShow 1`] = `
"import * as React from \\"react\\";

function RenderStyles(props) {
  return (
    <>
      {props.foo === \\"bar\\" ? (
        <>
          <div>Bar</div>
        </>
      ) : (
        <div>Foo</div>
      )}
    </>
  );
}

export default RenderStyles;
"
`;

exports[`React - stateType: solid > jsx > Javascript Test > self-referencing component 1`] = `
"import * as React from \\"react\\";

function MyComponent(props) {
  return (
    <div>
      {props.name}
      {props.name === \\"Batman\\" ? <MyComponent name=\\"Bruce Wayne\\" /> : null}
    </div>
  );
}

export default MyComponent;
"
`;

exports[`React - stateType: solid > jsx > Javascript Test > self-referencing component with children 1`] = `
"import * as React from \\"react\\";

function MyComponent(props) {
  return (
    <div>
      {props.name}
      {props.children}
      {props.name === \\"Batman\\" ? (
        <MyComponent name=\\"Bruce\\">
          <div>Wayne</div>
        </MyComponent>
      ) : null}
    </div>
  );
}

export default MyComponent;
"
`;

exports[`React - stateType: solid > jsx > Javascript Test > setState 1`] = `
"\\"use client\\";
import * as React from \\"react\\";
import { useMutable } from \\"react-solid-state\\";

function SetState(props) {
  const state = useMutable({
    n: [\\"123\\"],
    someFn() {
      state.n[0] = \\"123\\";
    },
  });

  return (
    <div>
      <button onClick={(event) => state.someFn()}>Click me</button>
    </div>
  );
}

export default SetState;
"
`;

exports[`React - stateType: solid > jsx > Javascript Test > showExpressions 1`] = `
"import * as React from \\"react\\";

function ShowWithOtherValues(props) {
  return (
    <div>
      {props.conditionA ? <>Content0</> : <>ContentA</>}
      {props.conditionA ? <>ContentA</> : null}
      {props.conditionA ? <></> : <>ContentA</>}
      {props.conditionA ? <>ContentB</> : <>{undefined}</>}
      {props.conditionA ? <>{undefined}</> : <>ContentB</>}
      {props.conditionA ? <>ContentC</> : null}
      {props.conditionA ? <></> : <>ContentC</>}
      {props.conditionA ? <>ContentD</> : null}
      {props.conditionA ? <></> : <>ContentD</>}
      {props.conditionA ? <>ContentE</> : <>hello</>}
      {props.conditionA ? <>hello</> : <>ContentE</>}
      {props.conditionA ? <>ContentF</> : <>123</>}
      {props.conditionA ? <>123</> : <>ContentF</>}
      {props.conditionA === \\"Default\\" ? (
        <>4mb</>
      ) : props.conditionB === \\"Complete\\" ? (
        <>20mb</>
      ) : (
        <>9mb</>
      )}
      {props.conditionA === \\"Default\\" ? (
        <>{props.conditionB === \\"Complete\\" ? <>20mb</> : <>9mb</>}</>
      ) : (
        <>4mb</>
      )}
      {props.conditionA === \\"Default\\" ? (
        <>{props.conditionB === \\"Complete\\" ? <div>complete</div> : <>9mb</>}</>
      ) : props.conditionC === \\"Complete\\" ? (
        <>dff</>
      ) : (
        <div>complete else</div>
      )}
    </div>
  );
}

export default ShowWithOtherValues;
"
`;

exports[`React - stateType: solid > jsx > Javascript Test > showWithFor 1`] = `
"import * as React from \\"react\\";

function NestedShow(props) {
  return (
    <>
      {props.conditionA ? (
        <>
          {props.items?.map((item, idx) => (
            <div key={idx}>{item}</div>
          ))}
        </>
      ) : (
        <div>else-condition-A</div>
      )}
    </>
  );
}

export default NestedShow;
"
`;

exports[`React - stateType: solid > jsx > Javascript Test > showWithOtherValues 1`] = `
"import * as React from \\"react\\";

function ShowWithOtherValues(props) {
  return (
    <div>
      {props.conditionA ? <>ContentA</> : null}
      {props.conditionA ? <>ContentB</> : <>{undefined}</>}
      {props.conditionA ? <>ContentC</> : null}
      {props.conditionA ? <>ContentD</> : null}
      {props.conditionA ? <>ContentE</> : <>hello</>}
      {props.conditionA ? <>ContentF</> : <>123</>}
    </div>
  );
}

export default ShowWithOtherValues;
"
`;

exports[`React - stateType: solid > jsx > Javascript Test > showWithRootText 1`] = `
"import * as React from \\"react\\";

function ShowRootText(props) {
  return <>{props.conditionA ? <>ContentA</> : <div>else-condition-A</div>}</>;
}

export default ShowRootText;
"
`;

exports[`React - stateType: solid > jsx > Javascript Test > signalsOnUpdate 1`] = `
"\\"use client\\";
import * as React from \\"react\\";
import { useEffect } from \\"react\\";

function MyBasicComponent(props) {
  useEffect(() => {
    console.log(\\"props.id changed\\", props.id);
    console.log(\\"props.foo.value.bar.baz changed\\", props.foo.value.bar.baz);
  }, [props.id, props.foo.value.bar.baz]);

  return (
    <>
      <div className=\\"test div\\">
        {props.id}
        {props.foo.value.bar.baz}
      </div>
      <style jsx>{\`
        .div {
          padding: 10px;
        }
      \`}</style>
    </>
  );
}

export default MyBasicComponent;
"
`;

exports[`React - stateType: solid > jsx > Javascript Test > spreadAttrs 1`] = `
"import * as React from \\"react\\";

function MyBasicComponent(props) {
  return <input {...attrs} />;
}

export default MyBasicComponent;
"
`;

exports[`React - stateType: solid > jsx > Javascript Test > spreadNestedProps 1`] = `
"import * as React from \\"react\\";

function MyBasicComponent(props) {
  return <input {...props.nested} />;
}

export default MyBasicComponent;
"
`;

exports[`React - stateType: solid > jsx > Javascript Test > spreadProps 1`] = `
"import * as React from \\"react\\";

function MyBasicComponent(props) {
  return <input {...props} />;
}

export default MyBasicComponent;
"
`;

exports[`React - stateType: solid > jsx > Javascript Test > store-async-function 1`] = `
"import * as React from \\"react\\";
import { useMutable } from \\"react-solid-state\\";

function StringLiteralStore(props) {
  const state = useMutable({
    arrowFunction: async function arrowFunction() {
      return Promise.resolve();
    },
    namedFunction: async function namedFunction() {
      return Promise.resolve();
    },
    fetchUsers: async function fetchUsers() {
      return Promise.resolve();
    },
  });

  return <div />;
}

export default StringLiteralStore;
"
`;

exports[`React - stateType: solid > jsx > Javascript Test > string-literal-store 1`] = `
"\\"use client\\";
import * as React from \\"react\\";
import { useMutable } from \\"react-solid-state\\";

function StringLiteralStore(props) {
  const state = useMutable({ foo: 123 });

  return <div>{state.foo}</div>;
}

export default StringLiteralStore;
"
`;

exports[`React - stateType: solid > jsx > Javascript Test > styleClassAndCss 1`] = `
"import * as React from \\"react\\";

function MyComponent(props) {
  return (
    <>
      <div
        className=\\"builder-column div\\"
        style={{
          width: \\"100%\\",
        }}
      />
      <style jsx>{\`
        .div {
          display: flex;
          flex-direction: column;
          align-items: stretch;
        }
      \`}</style>
    </>
  );
}

export default MyComponent;
"
`;

exports[`React - stateType: solid > jsx > Javascript Test > stylePropClassAndCss 1`] = `
"import * as React from \\"react\\";

function StylePropClassAndCss(props) {
  return (
    <>
      <div
        style={props.attributes.style}
        className={props.attributes.class + \\" div\\"}
      />
      <style jsx>{\`
        .div {
          display: flex;
          flex-direction: column;
          align-items: stretch;
        }
      \`}</style>
    </>
  );
}

export default StylePropClassAndCss;
"
`;

exports[`React - stateType: solid > jsx > Javascript Test > subComponent 1`] = `
"import * as React from \\"react\\";
import Foo from \\"./foo-sub-component\\";

function SubComponent(props) {
  return <Foo />;
}

export default SubComponent;
"
`;

exports[`React - stateType: solid > jsx > Javascript Test > svgComponent 1`] = `
"import * as React from \\"react\\";

function SvgComponent(props) {
  return (
    <svg
      fill=\\"none\\"
      role=\\"img\\"
      viewBox={\\"0 0 \\" + 42 + \\" \\" + 42}
      width={42}
      height={42}
    >
      <defs>
        <filter id=\\"prefix__filter0_f\\" filterUnits=\\"userSpaceOnUse\\">
          <feFlood result=\\"BackgroundImageFix\\" />
          <feBlend in=\\"SourceGraphic\\" in2=\\"BackgroundImageFix\\" result=\\"shape\\" />
          <feGaussianBlur result=\\"effect1_foregroundBlur\\" stdDeviation={7} />
        </filter>
      </defs>
    </svg>
  );
}

export default SvgComponent;
"
`;

exports[`React - stateType: solid > jsx > Javascript Test > typeDependency 1`] = `
"import * as React from \\"react\\";

function TypeDependency(props) {
  return <div>{props.foo}</div>;
}

export default TypeDependency;
"
`;

exports[`React - stateType: solid > jsx > Javascript Test > typeExternalStore 1`] = `
"\\"use client\\";
import * as React from \\"react\\";
import { useMutable } from \\"react-solid-state\\";

function TypeExternalStore(props) {
  const state = useMutable({ _name: \\"test\\" });

  return <div>Hello {state._name}! </div>;
}

export default TypeExternalStore;
"
`;

exports[`React - stateType: solid > jsx > Javascript Test > typeGetterStore 1`] = `
"\\"use client\\";
import * as React from \\"react\\";
import { useMutable } from \\"react-solid-state\\";

function TypeGetterStore(props) {
  const state = useMutable({
    name: \\"test\\",
    getName() {
      if (state.name === \\"a\\") {
        return \\"b\\";
      }

      return state.name;
    },
    get test() {
      return \\"test\\";
    },
  });

  return <div>Hello {state.name}! </div>;
}

export default TypeGetterStore;
"
`;

exports[`React - stateType: solid > jsx > Javascript Test > use-style 1`] = `
"import * as React from \\"react\\";

function MyComponent(props) {
  return (
    <>
      <button type=\\"button\\">Button</button>
      <style jsx>{\`
        button {
          background: blue;
          color: white;
          font-size: 12px;
          outline: 1px solid black;
        }
      \`}</style>
    </>
  );
}

export default MyComponent;
"
`;

exports[`React - stateType: solid > jsx > Javascript Test > use-style-and-css 1`] = `
"import * as React from \\"react\\";

function MyComponent(props) {
  return (
    <>
      <button type=\\"button\\" className=\\"button\\">
        Button
      </button>
      <style jsx>{\`
        button {
          font-size: 12px;
          outline: 1px solid black;
        }

        .button {
          background: blue;
          color: white;
        }
      \`}</style>
    </>
  );
}

export default MyComponent;
"
`;

exports[`React - stateType: solid > jsx > Javascript Test > use-style-outside-component 1`] = `
"import * as React from \\"react\\";

function MyComponent(props) {
  return (
    <>
      <button type=\\"button\\">Button</button>
      <style jsx>{\`
        button {
          background: blue;
          color: white;
          font-size: 12px;
          outline: 1px solid black;
        }
      \`}</style>
    </>
  );
}

export default MyComponent;
"
`;

exports[`React - stateType: solid > jsx > Javascript Test > useTarget 1`] = `
"\\"use client\\";
import * as React from \\"react\\";
import { useEffect } from \\"react\\";
import { useMutable } from \\"react-solid-state\\";

function UseTargetComponent(props) {
  const state = useMutable({
    get name() {
      const prefix = 123;
      return prefix + \\"foo\\";
    },
    lastName: \\"bar\\",
    foo: \\"bar\\",
  });

  useEffect(() => {
    console.log(state.foo);
    state.foo = \\"bar\\";
    console.log(\\"react\\");
    state.lastName = \\"baz\\";
    console.log(state.foo);
    state.foo = \\"baz\\";
  }, []);

  return <div>{state.name}</div>;
}

export default UseTargetComponent;
"
`;

exports[`React - stateType: solid > jsx > Javascript Test > webComponent 1`] = `
"import * as React from \\"react\\";
import { useRef } from \\"react\\";
import { register } from \\"swiper/element/bundle\\";

function MyBasicWebComponent(props) {
  const hasInitialized = useRef(false);
  if (!hasInitialized.current) {
    register();
    hasInitialized.current = true;
  }

  return (
    <swiper-container slides-per-view=\\"3\\" navigation=\\"true\\" pagination=\\"true\\">
      <swiper-slide>Slide 1</swiper-slide>
      <swiper-slide>Slide 2</swiper-slide>
      <swiper-slide>Slide 3</swiper-slide>
    </swiper-container>
  );
}

export default MyBasicWebComponent;
"
`;

exports[`React - stateType: solid > jsx > Remove Internal mitosis package 1`] = `
"\\"use client\\";
import * as React from \\"react\\";
import { useMutable } from \\"react-solid-state\\";

function MyBasicComponent(props) {
  const state = useMutable({ name: \\"PatrickJS\\" });

  return (
    <div>
      Hello {state.name}! I can run in React, Qwik, Vue, Solid, or Liquid!
    </div>
  );
}

export default MyBasicComponent;
"
`;

exports[`React - stateType: solid > jsx > Typescript Test > AdvancedRef 1`] = `
"\\"use client\\";
import * as React from \\"react\\";
import { useRef, useEffect } from \\"react\\";
import { useMutable } from \\"react-solid-state\\";
export interface Props {
  showInput: boolean;
}

function MyBasicRefComponent(props: Props) {
  const inputRef = useRef<HTMLInputElement>(null);
  const inputNoArgRef = useRef<HTMLLabelElement>(null);
  const state = useMutable({
    name: \\"PatrickJS\\",
    onBlur: function onBlur() {
      // Maintain focus
      inputRef.current.focus();
    },
    lowerCaseName: function lowerCaseName() {
      return state.name.toLowerCase();
    },
  });

  useEffect(() => {
    console.log(\\"Received an update\\");
  }, [inputRef.current, inputNoArgRef.current]);

  return (
    <>
      <div>
        {props.showInput ? (
          <>
            <input
              className=\\"input\\"
              ref={inputRef}
              value={state.name}
              onBlur={(event) => state.onBlur()}
              onChange={(event) => (state.name = event.target.value)}
            />
            <label htmlFor=\\"cars\\" ref={inputNoArgRef}>
              Choose a car:
            </label>
            <select name=\\"cars\\" id=\\"cars\\">
              <option value=\\"supra\\">GR Supra</option>
              <option value=\\"86\\">GR 86</option>
            </select>
          </>
        ) : null}
        Hello
        {state.lowerCaseName()}! I can run in React, Qwik, Vue, Solid, or Web
        Component!
      </div>
      <style jsx>{\`
        .input {
          color: red;
        }
      \`}</style>
    </>
  );
}

export default MyBasicRefComponent;
"
`;

exports[`React - stateType: solid > jsx > Typescript Test > Basic 1`] = `
"\\"use client\\";
import * as React from \\"react\\";
import { useMutable } from \\"react-solid-state\\";
export interface MyBasicComponentProps {
  id: string;
}

export const DEFAULT_VALUES = {
  name: \\"Steve\\",
};

function MyBasicComponent(props: MyBasicComponentProps) {
  const state = useMutable({
    name: \\"Steve\\",
    underscore_fn_name() {
      return \\"bar\\";
    },
    age: 1,
    sports: [\\"\\"],
  });

  return (
    <>
      <div className=\\"test div\\">
        <input
          value={DEFAULT_VALUES.name || state.name}
          onChange={(myEvent) => (state.name = myEvent.target.value)}
        />
        Hello! I can run in React, Vue, Solid, or Liquid! &gt;
      </div>
      <style jsx>{\`
        .div {
          padding: 10px;
        }
      \`}</style>
    </>
  );
}

export default MyBasicComponent;
"
`;

exports[`React - stateType: solid > jsx > Typescript Test > Basic Context 1`] = `
"\\"use client\\";
import * as React from \\"react\\";
import { useContext, useRef, useEffect } from \\"react\\";
import { useMutable } from \\"react-solid-state\\";
import { Injector, MyService, createInjector } from \\"@dummy/injection-js\\";

function MyBasicComponent(props: any) {
  const state = useMutable({
    name: \\"PatrickJS\\",
    onChange: function onChange() {
      const change = myService.method(\\"change\\");
      console.log(change);
    },
  });

  const myService = useContext(MyService);

  const hasInitialized = useRef(false);
  if (!hasInitialized.current) {
    const hi = myService.method(\\"hi\\");
    console.log(hi);
    hasInitialized.current = true;
  }

  useEffect(() => {
    const bye = myService.method(\\"hi\\");
    console.log(bye);
  }, []);

  return (
    <Injector.Provider value={createInjector()}>
      <div>
        {myService.method(\\"hello\\") + state.name}
        Hello! I can run in React, Vue, Solid, or Liquid!
        <input onChange={(event) => state.onChange} />
      </div>
    </Injector.Provider>
  );
}

export default MyBasicComponent;
"
`;

exports[`React - stateType: solid > jsx > Typescript Test > Basic OnMount Update 1`] = `
"\\"use client\\";
import * as React from \\"react\\";
import { useRef, useEffect } from \\"react\\";
import { useMutable } from \\"react-solid-state\\";
export interface Props {
  hi: string;
  bye: string;
}

function MyBasicOnMountUpdateComponent(props: Props) {
  const state = useMutable({
    name: \\"PatrickJS\\",
    names: [\\"Steve\\", \\"PatrickJS\\"],
  });

  const hasInitialized = useRef(false);
  if (!hasInitialized.current) {
    state.name = \\"PatrickJS onInit\\" + props.hi;
    hasInitialized.current = true;
  }

  useEffect(() => {
    state.name = \\"PatrickJS onMount\\" + props.bye;
  }, []);

  return <div>Hello {state.name}</div>;
}

export default MyBasicOnMountUpdateComponent;
"
`;

exports[`React - stateType: solid > jsx > Typescript Test > Basic Outputs 1`] = `
"\\"use client\\";
import * as React from \\"react\\";
import { useEffect } from \\"react\\";
import { useMutable } from \\"react-solid-state\\";

function MyBasicOutputsComponent(props: any) {
  const state = useMutable({ name: \\"PatrickJS\\" });

  useEffect(() => {
    props.onMessage(state.name);
    props.onEvent(props.message);
  }, []);

  return <div />;
}

export default MyBasicOutputsComponent;
"
`;

exports[`React - stateType: solid > jsx > Typescript Test > Basic Outputs Meta 1`] = `
"\\"use client\\";
import * as React from \\"react\\";
import { useEffect } from \\"react\\";
import { useMutable } from \\"react-solid-state\\";

function MyBasicOutputsComponent(props: any) {
  const state = useMutable({ name: \\"PatrickJS\\" });

  useEffect(() => {
    props.onMessage(state.name);
    props.onEvent(props.message);
  }, []);

  return <div />;
}

export default MyBasicOutputsComponent;
"
`;

exports[`React - stateType: solid > jsx > Typescript Test > BasicAttribute 1`] = `
"import * as React from \\"react\\";

function MyComponent(props: any) {
  return <input autoCapitalize=\\"on\\" autoComplete=\\"on\\" spellCheck />;
}

export default MyComponent;
"
`;

exports[`React - stateType: solid > jsx > Typescript Test > BasicBooleanAttribute 1`] = `
"import * as React from \\"react\\";

type Props = {
  children: any;
  type: string;
};
import MyBooleanAttributeComponent from \\"./basic-boolean-attribute-component.raw\\";

function MyBooleanAttribute(props: Props) {
  return (
    <div>
      {props.children ? (
        <>
          {props.children}
          {props.type}
        </>
      ) : null}
      <MyBooleanAttributeComponent toggle />
      <MyBooleanAttributeComponent toggle />
      <MyBooleanAttributeComponent list={null} />
    </div>
  );
}

export default MyBooleanAttribute;
"
`;

exports[`React - stateType: solid > jsx > Typescript Test > BasicChildComponent 1`] = `
"\\"use client\\";
import * as React from \\"react\\";
import { useMutable } from \\"react-solid-state\\";
import MyBasicOnMountUpdateComponent from \\"./basic-onMount-update.raw\\";
import MyBasicComponent from \\"./basic.raw\\";

function MyBasicChildComponent(props: any) {
  const state = useMutable({ name: \\"Steve\\", dev: \\"PatrickJS\\" });

  return (
    <div>
      <MyBasicComponent id={state.dev} />
      <div>
        <MyBasicOnMountUpdateComponent hi={state.name} bye={state.dev} />
      </div>
    </div>
  );
}

export default MyBasicChildComponent;
"
`;

exports[`React - stateType: solid > jsx > Typescript Test > BasicFor 1`] = `
"\\"use client\\";
import * as React from \\"react\\";
import { useEffect } from \\"react\\";
import { useMutable } from \\"react-solid-state\\";

function MyBasicForComponent(props: any) {
  const state = useMutable({
    name: \\"PatrickJS\\",
    names: [\\"Steve\\", \\"PatrickJS\\"],
  });

  useEffect(() => {
    console.log(\\"onMount code\\");
  }, []);

  return (
    <div>
      {state.names?.map((person) => (
        <>
          <input
            value={state.name}
            onChange={(event) => {
              state.name = event.target.value + \\" and \\" + person;
            }}
          />
          Hello
          {person}! I can run in Qwik, Web Component, React, Vue, Solid, or
          Liquid!
        </>
      ))}
    </div>
  );
}

export default MyBasicForComponent;
"
`;

exports[`React - stateType: solid > jsx > Typescript Test > BasicRef 1`] = `
"\\"use client\\";
import * as React from \\"react\\";
import { useRef } from \\"react\\";
import { useMutable } from \\"react-solid-state\\";
export interface Props {
  showInput: boolean;
}

function MyBasicRefComponent(props: Props) {
  const inputRef = useRef<HTMLInputElement | null>(null);
  const inputNoArgRef = useRef<HTMLLabelElement | null>(null);
  const state = useMutable({
    name: \\"PatrickJS\\",
    onBlur: function onBlur() {
      // Maintain focus
      inputRef.current?.focus();
    },
    lowerCaseName: function lowerCaseName() {
      return state.name.toLowerCase();
    },
  });

  return (
    <>
      <div>
        {props.showInput ? (
          <>
            <input
              className=\\"input\\"
              ref={inputRef}
              value={state.name}
              onBlur={(event) => state.onBlur()}
              onChange={(event) => (state.name = event.target.value)}
            />
            <label htmlFor=\\"cars\\" ref={inputNoArgRef}>
              Choose a car:
            </label>
            <select name=\\"cars\\" id=\\"cars\\">
              <option value=\\"supra\\">GR Supra</option>
              <option value=\\"86\\">GR 86</option>
            </select>
          </>
        ) : null}
        Hello
        {state.lowerCaseName()}! I can run in React, Qwik, Vue, Solid, or Web
        Component!
      </div>
      <style jsx>{\`
        .input {
          color: red;
        }
      \`}</style>
    </>
  );
}

export default MyBasicRefComponent;
"
`;

exports[`React - stateType: solid > jsx > Typescript Test > BasicRefAssignment 1`] = `
"\\"use client\\";
import * as React from \\"react\\";
import { useRef } from \\"react\\";
import { useMutable } from \\"react-solid-state\\";
export interface Props {
  showInput: boolean;
}

function MyBasicRefAssignmentComponent(props: Props) {
  const holdValueRef = useRef(\\"Patrick\\");
  const state = useMutable({
    handlerClick: function handlerClick(event: Event) {
      event.preventDefault();
      console.log(\\"current value\\", holdValueRef.current);
      holdValueRef.current = holdValueRef.current + \\"JS\\";
    },
  });

  return (
    <div>
      <button onClick={async (evt) => await state.handlerClick(evt)}>
        Click
      </button>
    </div>
  );
}

export default MyBasicRefAssignmentComponent;
"
`;

exports[`React - stateType: solid > jsx > Typescript Test > BasicRefPrevious 1`] = `
"\\"use client\\";
import * as React from \\"react\\";
import { useRef, useEffect } from \\"react\\";
import { useMutable } from \\"react-solid-state\\";
export interface Props {
  showInput: boolean;
}

export function usePrevious<T>(value: T) {
  // The ref object is a generic container whose current property is mutable ...
  // ... and can hold any value, similar to an instance property on a class
  let ref = useRef<T>(null); // Store current value in ref

  onUpdate(() => {
    ref = value;
  }, [value]); // Only re-run if value changes
  // Return previous value (happens before update in useEffect above)

  return ref;
}

function MyPreviousComponent(props: Props) {
  const state = useMutable({ count: 0 });

  const prevCount = useRef(state.count);

  useEffect(() => {
    prevCount.current = state.count;
  }, [state.count]);

  return (
    <div>
      <h1>
        Now: {state.count}, before: {prevCount.current}
      </h1>
      <button onClick={(event) => (state.count += 1)}>Increment</button>
    </div>
  );
}

export default MyPreviousComponent;
"
`;

exports[`React - stateType: solid > jsx > Typescript Test > Button 1`] = `
"import * as React from \\"react\\";

export interface ButtonProps {
  attributes?: any;
  text?: string;
  link?: string;
  openLinkInNewTab?: boolean;
}

function Button(props: ButtonProps) {
  return (
    <div>
      {props.link ? (
        <a
          {...props.attributes}
          href={props.link}
          target={props.openLinkInNewTab ? \\"_blank\\" : undefined}
        >
          {props.text}
        </a>
      ) : null}
      {!props.link ? (
        <button type=\\"button\\" {...props.attributes}>
          {props.text}
        </button>
      ) : null}
    </div>
  );
}

export default Button;
"
`;

exports[`React - stateType: solid > jsx > Typescript Test > Columns 1`] = `
"import * as React from \\"react\\";
import { useMutable } from \\"react-solid-state\\";
type Column = {
  content: any; // TODO: Implement this when support for dynamic CSS lands

  width?: number;
};
export interface ColumnProps {
  columns?: Column[]; // TODO: Implement this when support for dynamic CSS lands

  space?: number; // TODO: Implement this when support for dynamic CSS lands

  stackColumnsAt?: \\"tablet\\" | \\"mobile\\" | \\"never\\"; // TODO: Implement this when support for dynamic CSS lands

  reverseColumnsWhenStacked?: boolean;
}

function Column(props: ColumnProps) {
  const state = useMutable({
    getColumns() {
      return props.columns || [];
    },
    getGutterSize() {
      return typeof props.space === \\"number\\" ? props.space || 0 : 20;
    },
    getWidth(index: number) {
      const columns = state.getColumns();
      return (columns[index] && columns[index].width) || 100 / columns.length;
    },
    getColumnCssWidth(index: number) {
      const columns = state.getColumns();
      const gutterSize = state.getGutterSize();
      const subtractWidth =
        (gutterSize * (columns.length - 1)) / columns.length;
      return \`calc(\${state.getWidth(index)}% - \${subtractWidth}px)\`;
    },
  });

  return (
    <>
      <div className=\\"builder-columns div\\">
        {props.columns?.map((column, index) => (
          <div className=\\"builder-column div-2\\">
            {column.content}
            {index}
          </div>
        ))}
      </div>
      <style jsx>{\`
        .div {
          display: flex;
          flex-direction: column;
          align-items: stretch;
          line-height: normal;
        }
        @media (max-width: 999px) {
          .div {
            flex-direction: row;
          }
        }
        @media (max-width: 639px) {
          .div {
            flex-direction: row-reverse;
          }
        }
        .div-2 {
          flex-grow: 1;
        }
      \`}</style>
    </>
  );
}

export default Column;
"
`;

exports[`React - stateType: solid > jsx > Typescript Test > ContentSlotHtml 1`] = `
"import * as React from \\"react\\";

type Props = {
  [key: string]: string | JSX.Element;
  slotTesting: JSX.Element;
};
import type { JSX } from \\"../../../../jsx-runtime\\";

function ContentSlotCode(props: Props) {
  return (
    <div>
      <>{props.slotTesting}</>
      <div>
        <hr />
      </div>
      <div>
        <>{props.children}</>
      </div>
    </div>
  );
}

export default ContentSlotCode;
"
`;

exports[`React - stateType: solid > jsx > Typescript Test > ContentSlotJSX 1`] = `
"\\"use client\\";
import * as React from \\"react\\";
import { useMutable } from \\"react-solid-state\\";
type Props = {
  [key: string]: string | JSX.Element;
};
import type { JSX } from \\"../../../../jsx-runtime\\";

function ContentSlotJsxCode(props: Props) {
  const state = useMutable({
    name: \\"king\\",
    showContent: false,
    get cls() {
      return props.slotContent && props.children ? \`\${state.name}-content\` : \\"\\";
    },
    show() {
      props.slotContent ? 1 : \\"\\";
    },
  });

  return (
    <>
      {props.slotReference ? (
        <>
          <div
            name={props.slotContent ? \\"name1\\" : \\"name2\\"}
            title={props.slotContent ? \\"title1\\" : \\"title2\\"}
            {...props.attributes}
            onClick={(event) => state.show()}
            className={state.cls}
          >
            {state.showContent && props.slotContent ? (
              <>{props.content || \\"{props.content}\\"}</>
            ) : null}
            <div>
              <hr />
            </div>
            <div>{props.children}</div>
          </div>
        </>
      ) : null}
    </>
  );
}

ContentSlotJsxCode.defaultProps = {
  content: \\"\\",
  slotReference: undefined,
  slotContent: undefined,
};

export default ContentSlotJsxCode;
"
`;

exports[`React - stateType: solid > jsx > Typescript Test > CustomCode 1`] = `
"\\"use client\\";
import * as React from \\"react\\";
import { useRef, useEffect } from \\"react\\";
import { useMutable } from \\"react-solid-state\\";
export interface CustomCodeProps {
  code: string;
  replaceNodes?: boolean;
}

function CustomCode(props: CustomCodeProps) {
  const elem = useRef<HTMLDivElement>(null);
  const state = useMutable({
    scriptsInserted: [],
    scriptsRun: [],
    findAndRunScripts() {
      // TODO: Move this function to standalone one in '@builder.io/utils'
      if (elem.current && typeof window !== \\"undefined\\") {
        /** @type {HTMLScriptElement[]} */
        const scripts = elem.current.getElementsByTagName(\\"script\\");

        for (let i = 0; i < scripts.length; i++) {
          const script = scripts[i];

          if (script.src) {
            if (state.scriptsInserted.includes(script.src)) {
              continue;
            }

            state.scriptsInserted.push(script.src);
            const newScript = document.createElement(\\"script\\");
            newScript.async = true;
            newScript.src = script.src;
            document.head.appendChild(newScript);
          } else if (
            !script.type ||
            [
              \\"text/javascript\\",
              \\"application/javascript\\",
              \\"application/ecmascript\\",
            ].includes(script.type)
          ) {
            if (state.scriptsRun.includes(script.innerText)) {
              continue;
            }

            try {
              state.scriptsRun.push(script.innerText);
              new Function(script.innerText)();
            } catch (error) {
              console.warn(\\"\`CustomCode\`: Error running script:\\", error);
            }
          }
        }
      }
    },
  });

  useEffect(() => {
    state.findAndRunScripts();
  }, []);

  return (
    <div
      ref={elem}
      className={
        \\"builder-custom-code\\" + (props.replaceNodes ? \\" replace-nodes\\" : \\"\\")
      }
      dangerouslySetInnerHTML={{ __html: props.code }}
    />
  );
}

export default CustomCode;
"
`;

exports[`React - stateType: solid > jsx > Typescript Test > Embed 1`] = `
"\\"use client\\";
import * as React from \\"react\\";
import { useRef, useEffect } from \\"react\\";
import { useMutable } from \\"react-solid-state\\";
export interface CustomCodeProps {
  code: string;
  replaceNodes?: boolean;
}

function CustomCode(props: CustomCodeProps) {
  const elem = useRef<HTMLDivElement>(null);
  const state = useMutable({
    scriptsInserted: [],
    scriptsRun: [],
    findAndRunScripts() {
      // TODO: Move this function to standalone one in '@builder.io/utils'
      if (elem.current && typeof window !== \\"undefined\\") {
        /** @type {HTMLScriptElement[]} */
        const scripts = elem.current.getElementsByTagName(\\"script\\");

        for (let i = 0; i < scripts.length; i++) {
          const script = scripts[i];

          if (script.src) {
            if (state.scriptsInserted.includes(script.src)) {
              continue;
            }

            state.scriptsInserted.push(script.src);
            const newScript = document.createElement(\\"script\\");
            newScript.async = true;
            newScript.src = script.src;
            document.head.appendChild(newScript);
          } else if (
            !script.type ||
            [
              \\"text/javascript\\",
              \\"application/javascript\\",
              \\"application/ecmascript\\",
            ].includes(script.type)
          ) {
            if (state.scriptsRun.includes(script.innerText)) {
              continue;
            }

            try {
              state.scriptsRun.push(script.innerText);
              new Function(script.innerText)();
            } catch (error) {
              console.warn(\\"\`CustomCode\`: Error running script:\\", error);
            }
          }
        }
      }
    },
  });

  useEffect(() => {
    state.findAndRunScripts();
  }, []);

  return (
    <div
      ref={elem}
      className={
        \\"builder-custom-code\\" + (props.replaceNodes ? \\" replace-nodes\\" : \\"\\")
      }
      dangerouslySetInnerHTML={{ __html: props.code }}
    />
  );
}

export default CustomCode;
"
`;

exports[`React - stateType: solid > jsx > Typescript Test > Form 1`] = `
"\\"use client\\";
import * as React from \\"react\\";
import { useRef } from \\"react\\";
import { useMutable } from \\"react-solid-state\\";
export interface FormProps {
  attributes?: any;
  name?: string;
  action?: string;
  validate?: boolean;
  method?: string;
  builderBlock?: BuilderElement;
  sendSubmissionsTo?: string;
  sendSubmissionsToEmail?: string;
  sendWithJs?: boolean;
  contentType?: string;
  customHeaders?: {
    [key: string]: string;
  };
  successUrl?: string;
  previewState?: FormState;
  successMessage?: BuilderElement[];
  errorMessage?: BuilderElement[];
  sendingMessage?: BuilderElement[];
  resetFormOnSubmit?: boolean;
  errorMessagePath?: string;
}
export type FormState = \\"unsubmitted\\" | \\"sending\\" | \\"success\\" | \\"error\\";
import { Builder, BuilderElement, builder } from \\"@builder.io/sdk\\";
import {
  BuilderBlock as BuilderBlockComponent,
  BuilderBlocks,
  get,
  set,
} from \\"@fake\\";

function FormComponent(props: FormProps) {
  const formRef = useRef<HTMLFormElement>(null);
  const state = useMutable({
    formState: \\"unsubmitted\\",
    responseData: null,
    formErrorMessage: \\"\\",
    get submissionState() {
      return (Builder.isEditing && props.previewState) || state.formState;
    },
    onSubmit(
      event: Event & {
        currentTarget: HTMLFormElement;
      }
    ) {
      const sendWithJs =
        props.sendWithJs || props.sendSubmissionsTo === \\"email\\";

      if (props.sendSubmissionsTo === \\"zapier\\") {
        event.preventDefault();
      } else if (sendWithJs) {
        if (!(props.action || props.sendSubmissionsTo === \\"email\\")) {
          event.preventDefault();
          return;
        }

        event.preventDefault();
        const el = event.currentTarget;
        const headers = props.customHeaders || {};
        let body: any;
        const formData = new FormData(el); // TODO: maybe support null

        const formPairs: {
          key: string;
          value: File | boolean | number | string | FileList;
        }[] = Array.from(
          event.currentTarget.querySelectorAll(\\"input,select,textarea\\")
        )
          .filter((el) => !!(el as HTMLInputElement).name)
          .map((el) => {
            let value: any;
            const key = (el as HTMLImageElement).name;

            if (el instanceof HTMLInputElement) {
              if (el.type === \\"radio\\") {
                if (el.checked) {
                  value = el.name;
                  return {
                    key,
                    value,
                  };
                }
              } else if (el.type === \\"checkbox\\") {
                value = el.checked;
              } else if (el.type === \\"number\\" || el.type === \\"range\\") {
                const num = el.valueAsNumber;

                if (!isNaN(num)) {
                  value = num;
                }
              } else if (el.type === \\"file\\") {
                // TODO: one vs multiple files
                value = el.files;
              } else {
                value = el.value;
              }
            } else {
              value = (el as HTMLInputElement).value;
            }

            return {
              key,
              value,
            };
          });
        let contentType = props.contentType;

        if (props.sendSubmissionsTo === \\"email\\") {
          contentType = \\"multipart/form-data\\";
        }

        Array.from(formPairs).forEach(({ value }) => {
          if (
            value instanceof File ||
            (Array.isArray(value) && value[0] instanceof File) ||
            value instanceof FileList
          ) {
            contentType = \\"multipart/form-data\\";
          }
        }); // TODO: send as urlEncoded or multipart by default
        // because of ease of use and reliability in browser API
        // for encoding the form?

        if (contentType !== \\"application/json\\") {
          body = formData;
        } else {
          // Json
          const json = {};
          Array.from(formPairs).forEach(({ value, key }) => {
            set(json, key, value);
          });
          body = JSON.stringify(json);
        }

        if (contentType && contentType !== \\"multipart/form-data\\") {
          if (
            /* Zapier doesn't allow content-type header to be sent from browsers */ !(
              sendWithJs && props.action?.includes(\\"zapier.com\\")
            )
          ) {
            headers[\\"content-type\\"] = contentType;
          }
        }
        const presubmitEvent = new CustomEvent(\\"presubmit\\", {
          detail: { body },
        });
        if (formRef.current) {
          formRef.current.dispatchEvent(presubmitEvent);
          if (presubmitEvent.defaultPrevented) {
            return;
          }
        }
        state.formState = \\"sending\\";
        const formUrl = \`\${
          builder.env === \\"dev\\" ? \\"http://localhost:5000\\" : \\"https://builder.io\\"
        }/api/v1/form-submit?apiKey=\${builder.apiKey}&to=\${btoa(
          props.sendSubmissionsToEmail || \\"\\"
        )}&name=\${encodeURIComponent(props.name || \\"\\")}\`;
        fetch(
          props.sendSubmissionsTo === \\"email\\"
            ? formUrl
            : props.action! /* TODO: throw error if no action URL */,
          { body, headers, method: props.method || \\"post\\" }
        ).then(
          async (res) => {
            let body;
            const contentType = res.headers.get(\\"content-type\\");
            if (contentType && contentType.indexOf(\\"application/json\\") !== -1) {
              body = await res.json();
            } else {
              body = await res.text();
            }
            if (!res.ok && props.errorMessagePath) {
              /* TODO: allow supplying an error formatter function */ let message =
                get(body, props.errorMessagePath);
              if (message) {
                if (typeof message !== \\"string\\") {
                  /* TODO: ideally convert json to yaml so it woul dbe like          error: - email has been taken */ message =
                    JSON.stringify(message);
                }
                state.formErrorMessage = message;
              }
            }
            state.responseData = body;
            state.formState = res.ok ? \\"success\\" : \\"error\\";
            if (res.ok) {
              const submitSuccessEvent = new CustomEvent(\\"submit:success\\", {
                detail: { res, body },
              });
              if (formRef.current) {
                formRef.current.dispatchEvent(submitSuccessEvent);
                if (submitSuccessEvent.defaultPrevented) {
                  return;
                }
                /* TODO: option to turn this on/off? */ if (
                  props.resetFormOnSubmit !== false
                ) {
                  formRef.current.reset();
                }
              }
              /* TODO: client side route event first that can be preventDefaulted */ if (
                props.successUrl
              ) {
                if (formRef.current) {
                  const event = new CustomEvent(\\"route\\", {
                    detail: { url: props.successUrl },
                  });
                  formRef.current.dispatchEvent(event);
                  if (!event.defaultPrevented) {
                    location.href = props.successUrl;
                  }
                } else {
                  location.href = props.successUrl;
                }
              }
            }
          },
          (err) => {
            const submitErrorEvent = new CustomEvent(\\"submit:error\\", {
              detail: { error: err },
            });
            if (formRef.current) {
              formRef.current.dispatchEvent(submitErrorEvent);
              if (submitErrorEvent.defaultPrevented) {
                return;
              }
            }
            state.responseData = err;
            state.formState = \\"error\\";
          }
        );
      }
    },
  });
  return (
    <>
      {\\" \\"}
      <form
        validate={props.validate}
        ref={formRef}
        action={!props.sendWithJs && props.action}
        method={props.method}
        name={props.name}
        onSubmit={(event) => state.onSubmit(event)}
        {...props.attributes}
      >
        {props.builderBlock && props.builderBlock.children ? (
          <>
            {props.builderBlock?.children?.map((block, index) => (
              <BuilderBlockComponent
                key={block.id}
                block={block}
                index={index}
              />
            ))}
          </>
        ) : null}
        {state.submissionState === \\"error\\" ? (
          <BuilderBlocks dataPath=\\"errorMessage\\" blocks={props.errorMessage!} />
        ) : null}
        {state.submissionState === \\"sending\\" ? (
          <BuilderBlocks
            dataPath=\\"sendingMessage\\"
            blocks={props.sendingMessage!}
          />
        ) : null}
        {state.submissionState === \\"error\\" && state.responseData ? (
          <pre className=\\"builder-form-error-text pre\\">
            {JSON.stringify(state.responseData, null, 2)}
          </pre>
        ) : null}
        {state.submissionState === \\"success\\" ? (
          <BuilderBlocks
            dataPath=\\"successMessage\\"
            blocks={props.successMessage!}
          />
        ) : null}
      </form>{\\" \\"}
      <style jsx>{\`
        .pre {
          padding: 10px;
          color: red;
          text-align: center;
        }
      \`}</style>{\\" \\"}
    </>
  );
}
export default FormComponent;
"
`;

exports[`React - stateType: solid > jsx > Typescript Test > Image 1`] = `
"\\"use client\\";
import * as React from \\"react\\";
import { useRef, useEffect } from \\"react\\";
import { useMutable } from \\"react-solid-state\\";
// TODO: AMP Support?
export interface ImageProps {
  _class?: string;
  image: string;
  sizes?: string;
  lazy?: boolean;
  height?: number;
  width?: number;
  altText?: string;
  backgroundSize?: string;
  backgroundPosition?: string; // TODO: Support generating Builder.io and or Shopify \`srcset\`s when needed

  srcset?: string; // TODO: Implement support for custom aspect ratios

  aspectRatio?: number; // TODO: This might not work as expected in terms of positioning

  children?: any;
}

function Image(props: ImageProps) {
  const pictureRef = useRef<HTMLElement>(null);
  const state = useMutable({
    scrollListener: null,
    imageLoaded: false,
    setLoaded() {
      state.imageLoaded = true;
    },
    useLazyLoading() {
      // TODO: Add more checks here, like testing for real web browsers
      return !!props.lazy && state.isBrowser();
    },
    isBrowser: function isBrowser() {
      return (
        typeof window !== \\"undefined\\" &&
        window.navigator.product != \\"ReactNative\\"
      );
    },
    load: false,
  });

  useEffect(() => {
    if (state.useLazyLoading()) {
      // throttled scroll capture listener
      const listener = () => {
        if (pictureRef.current) {
          const rect = pictureRef.current.getBoundingClientRect();
          const buffer = window.innerHeight / 2;

          if (rect.top < window.innerHeight + buffer) {
            state.load = true;
            state.scrollListener = null;
            window.removeEventListener(\\"scroll\\", listener);
          }
        }
      };

      state.scrollListener = listener;
      window.addEventListener(\\"scroll\\", listener, {
        capture: true,
        passive: true,
      });
      listener();
    }
  }, []);

  useEffect(() => {
    return () => {
      if (state.scrollListener) {
        window.removeEventListener(\\"scroll\\", state.scrollListener);
      }
    };
  }, []);

  return (
    <>
      <div>
        <picture ref={pictureRef}>
          {!state.useLazyLoading() || state.load ? (
            <img
              alt={props.altText}
              aria-role={props.altText ? \\"presentation\\" : undefined}
              className={
                \\"builder-image\\" +
                (props._class ? \\" \\" + props._class : \\"\\") +
                \\" img\\"
              }
              src={props.image}
              onLoad={(event) => state.setLoaded()}
              srcset={props.srcset}
              sizes={props.sizes}
            />
          ) : null}
          <source srcset={props.srcset} />
        </picture>
        {props.children}
      </div>
      <style jsx>{\`
        .img {
          opacity: 1;
          transition: opacity 0.2s ease-in-out;
          object-fit: cover;
          object-position: center;
        }
      \`}</style>
    </>
  );
}

export default Image;
"
`;

exports[`React - stateType: solid > jsx > Typescript Test > Image State 1`] = `
"\\"use client\\";
import * as React from \\"react\\";
import { useMutable } from \\"react-solid-state\\";

function ImgStateComponent(props: any) {
  const state = useMutable({
    canShow: true,
    images: [\\"http://example.com/qwik.png\\"],
  });

  return (
    <div>
      {state.images?.map((item, itemIndex) => (
        <img className=\\"custom-class\\" src={item} key={itemIndex} />
      ))}
    </div>
  );
}

export default ImgStateComponent;
"
`;

exports[`React - stateType: solid > jsx > Typescript Test > Img 1`] = `
"import * as React from \\"react\\";

export interface ImgProps {
  attributes?: any;
  imgSrc?: string;
  altText?: string;
  backgroundSize?: \\"cover\\" | \\"contain\\";
  backgroundPosition?:
    | \\"center\\"
    | \\"top\\"
    | \\"left\\"
    | \\"right\\"
    | \\"bottom\\"
    | \\"top left\\"
    | \\"top right\\"
    | \\"bottom left\\"
    | \\"bottom right\\";
}

import { Builder } from \\"@builder.io/sdk\\";

function ImgComponent(props: ImgProps) {
  return (
    <img
      style={{
        objectFit: props.backgroundSize || \\"cover\\",
        objectPosition: props.backgroundPosition || \\"center\\",
      }}
      {...props.attributes}
      key={(Builder.isEditing && props.imgSrc) || \\"default-key\\"}
      alt={props.altText}
      src={props.imgSrc}
    />
  );
}

export default ImgComponent;
"
`;

exports[`React - stateType: solid > jsx > Typescript Test > Input 1`] = `
"\\"use client\\";
import * as React from \\"react\\";

export interface FormInputProps {
  type?: string;
  attributes?: any;
  name?: string;
  value?: string;
  placeholder?: string;
  defaultValue?: string;
  required?: boolean;
  onChange?: (value: string) => void;
}

import { Builder } from \\"@builder.io/sdk\\";

function FormInputComponent(props: FormInputProps) {
  return (
    <input
      {...props.attributes}
      key={
        Builder.isEditing && props.defaultValue
          ? props.defaultValue
          : \\"default-key\\"
      }
      placeholder={props.placeholder}
      type={props.type}
      name={props.name}
      value={props.value}
      defaultValue={props.defaultValue}
      required={props.required}
      onChange={(event) => props.onChange?.(event.target.value)}
    />
  );
}

export default FormInputComponent;
"
`;

exports[`React - stateType: solid > jsx > Typescript Test > InputParent 1`] = `
"import * as React from \\"react\\";
import { useMutable } from \\"react-solid-state\\";
import FormInputComponent from \\"./input.raw\\";

function Stepper(props: any) {
  const state = useMutable({
    handleChange(value: string) {
      console.log(value);
    },
  });

  return (
    <FormInputComponent
      name=\\"kingzez\\"
      type=\\"text\\"
      onChange={(value) => state.handleChange(value)}
    />
  );
}

export default Stepper;
"
`;

exports[`React - stateType: solid > jsx > Typescript Test > NestedStore 1`] = `
"\\"use client\\";
import * as React from \\"react\\";
import { useMutable } from \\"react-solid-state\\";
type MyStore = {
  _id?: string;
  _messageId?: string;
};

function NestedStore(props: any) {
  const state = useMutable({ _id: \\"abc\\", _messageId: state._id + \\"-message\\" });

  return (
    <div id={state._id}>
      Test
      <p id={state._messageId}>Message</p>
    </div>
  );
}

export default NestedStore;
"
`;

exports[`React - stateType: solid > jsx > Typescript Test > RawText 1`] = `
"import * as React from \\"react\\";

export interface RawTextProps {
  attributes?: any;
  text?: string; // builderBlock?: any;
}

function RawText(props: RawTextProps) {
  return (
    <span
      className={props.attributes?.class || props.attributes?.className}
      dangerouslySetInnerHTML={{ __html: props.text || \\"\\" }}
    />
  );
}

export default RawText;
"
`;

exports[`React - stateType: solid > jsx > Typescript Test > Section 1`] = `
"import * as React from \\"react\\";

export interface SectionProps {
  maxWidth?: number;
  attributes?: any;
  children?: any;
}

function SectionComponent(props: SectionProps) {
  return (
    <section
      {...props.attributes}
      style={
        props.maxWidth && typeof props.maxWidth === \\"number\\"
          ? {
              maxWidth: props.maxWidth,
            }
          : undefined
      }
    >
      {props.children}
    </section>
  );
}

export default SectionComponent;
"
`;

exports[`React - stateType: solid > jsx > Typescript Test > Select 1`] = `
"import * as React from \\"react\\";

export interface FormSelectProps {
  options?: {
    name?: string;
    value: string;
  }[];
  attributes?: any;
  name?: string;
  value?: string;
  defaultValue?: string;
}

import { Builder } from \\"@builder.io/sdk\\";

function SelectComponent(props: FormSelectProps) {
  return (
    <select
      {...props.attributes}
      value={props.value}
      key={
        Builder.isEditing && props.defaultValue
          ? props.defaultValue
          : \\"default-key\\"
      }
      defaultValue={props.defaultValue}
      name={props.name}
    >
      {props.options?.map((option, index) => (
        <option value={option.value} data-index={index}>
          {option.name || option.value}
        </option>
      ))}
    </select>
  );
}

export default SelectComponent;
"
`;

exports[`React - stateType: solid > jsx > Typescript Test > SlotDefault 1`] = `
"import * as React from \\"react\\";

type Props = {
  [key: string]: string;
};

function SlotCode(props: Props) {
  return (
    <div>
      <>
        {props.children || <div className=\\"default-slot\\">Default content</div>}
      </>
    </div>
  );
}

export default SlotCode;
"
`;

exports[`React - stateType: solid > jsx > Typescript Test > SlotHtml 1`] = `
"import * as React from \\"react\\";

type Props = {
  [key: string]: string;
};
import ContentSlotCode from \\"./content-slot-jsx.raw\\";

function SlotCode(props: Props) {
  return (
    <div>
      <ContentSlotCode testing={<div>Hello</div>}></ContentSlotCode>
    </div>
  );
}

export default SlotCode;
"
`;

exports[`React - stateType: solid > jsx > Typescript Test > SlotJsx 1`] = `
"import * as React from \\"react\\";

type Props = {
  [key: string]: string;
};
import ContentSlotCode from \\"./content-slot-jsx.raw\\";

function SlotCode(props: Props) {
  return (
    <div>
      <ContentSlotCode slotTesting={<div>Hello</div>} />
    </div>
  );
}

export default SlotCode;
"
`;

exports[`React - stateType: solid > jsx > Typescript Test > SlotNamed 1`] = `
"import * as React from \\"react\\";

type Props = {
  [key: string]: string;
};

function SlotCode(props: Props) {
  return (
    <div>
      <>{props.myAwesomeSlot}</>
      <>{props.top}</>
      <>{props.left || \\"Default left\\"}</>
      <>{props.children || \\"Default Child\\"}</>
    </div>
  );
}

export default SlotCode;
"
`;

exports[`React - stateType: solid > jsx > Typescript Test > Stamped.io 1`] = `
"\\"use client\\";
import * as React from \\"react\\";
import { useEffect } from \\"react\\";
import { useMutable } from \\"react-solid-state\\";
type SmileReviewsProps = {
  productId: string;
  apiKey: string;
};
import { kebabCase, snakeCase } from \\"lodash\\";

function SmileReviews(props: SmileReviewsProps) {
  const state = useMutable({
    reviews: [],
    name: \\"test\\",
    showReviewPrompt: false,
    kebabCaseValue() {
      return kebabCase(\\"testThat\\");
    },
    snakeCaseValue() {
      return snakeCase(\\"testThis\\");
    },
  });

  useEffect(() => {
    fetch(
      \`https://stamped.io/api/widget/reviews?storeUrl=builder-io.myshopify.com&apiKey=\${
        props.apiKey || \\"pubkey-8bbDq7W6w4sB3OWeM1HUy2s47702hM\\"
      }&productId=\${props.productId || \\"2410511106127\\"}\`
    )
      .then((res) => res.json())
      .then((data) => {
        state.reviews = data.data;
      });
  }, []);

  return (
    <>
      <div data-user={state.name}>
        <button onClick={(event) => (state.showReviewPrompt = true)}>
          Write a review
        </button>
        {state.showReviewPrompt || \\"asdf\\" ? (
          <>
            <input placeholder=\\"Email\\" />
            <input placeholder=\\"Title\\" className=\\"input\\" />
            <textarea
              placeholder=\\"How was your experience?\\"
              className=\\"textarea\\"
            />
            <button
              className=\\"button\\"
              onClick={(ev) => {
                ev.preventDefault();
                state.showReviewPrompt = false;
              }}
            >
              Submit
            </button>
          </>
        ) : null}
        {state.reviews?.map((review, index) => (
          <div className=\\"review\\" key={review.id}>
            <img className=\\"img\\" src={review.avatar} />
            <div
              className={state.showReviewPrompt ? \\"bg-primary\\" : \\"bg-secondary\\"}
            >
              <div>N: {index}</div>
              <div>{review.author}</div>
              <div>{review.reviewMessage}</div>
            </div>
          </div>
        ))}
      </div>
      <style jsx>{\`
        .input {
          display: block;
        }
        .textarea {
          display: block;
        }
        .button {
          display: block;
        }
        .review {
          margin: 10px;
          padding: 10px;
          background: white;
          display: flex;
          border-radius: 5px;
          box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
          -webkit-font-smoothing: antialiased;
        }
        .img {
          height: 30px;
          width: 30px;
          margin-right: 10px;
        }
      \`}</style>
    </>
  );
}

export default SmileReviews;
"
`;

exports[`React - stateType: solid > jsx > Typescript Test > StoreComment 1`] = `
"\\"use client\\";
import * as React from \\"react\\";
import { useMutable } from \\"react-solid-state\\";

function StringLiteralStore(props: any) {
  const state = useMutable({ foo: true, bar() {} });

  return <>{state.foo}</>;
}

export default StringLiteralStore;
"
`;

exports[`React - stateType: solid > jsx > Typescript Test > StoreShadowVars 1`] = `
"\\"use client\\";
import * as React from \\"react\\";
import { useMutable } from \\"react-solid-state\\";

function MyComponent(props: any) {
  const state = useMutable({
    errors: {},
    foo(errors) {
      return errors;
    },
  });

  return <>{state.foo(state.errors)}</>;
}

export default MyComponent;
"
`;

exports[`React - stateType: solid > jsx > Typescript Test > StoreWithState 1`] = `
"\\"use client\\";
import * as React from \\"react\\";
import { useMutable } from \\"react-solid-state\\";

function MyComponent(props: any) {
  const state = useMutable({
    foo: false,
    bar() {
      return state.foo;
    },
  });

  return <>{state.bar()}</>;
}

export default MyComponent;
"
`;

exports[`React - stateType: solid > jsx > Typescript Test > Submit 1`] = `
"import * as React from \\"react\\";

export interface ButtonProps {
  attributes?: any;
  text?: string;
}

function SubmitButton(props: ButtonProps) {
  return (
    <button type=\\"submit\\" {...props.attributes}>
      {props.text}
    </button>
  );
}

export default SubmitButton;
"
`;

exports[`React - stateType: solid > jsx > Typescript Test > Text 1`] = `
"\\"use client\\";
import * as React from \\"react\\";
import { useMutable } from \\"react-solid-state\\";
export interface TextProps {
  attributes?: any;
  rtlMode: boolean;
  text?: string;
  content?: string;
  builderBlock?: any;
}

import { Builder } from \\"@builder.io/sdk\\";

function Text(props: TextProps) {
  const state = useMutable({ name: \\"Decadef20\\" });

  return (
    <div
      contentEditable={allowEditingText || undefined}
      data-name={{
        test: state.name || \\"any name\\",
      }}
      dangerouslySetInnerHTML={{
        __html:
          props.text ||
          props.content ||
          state.name ||
          '<p class=\\"text-lg\\">my name</p>',
      }}
    />
  );
}

export default Text;
"
`;

exports[`React - stateType: solid > jsx > Typescript Test > Textarea 1`] = `
"import * as React from \\"react\\";

export interface TextareaProps {
  attributes?: any;
  name?: string;
  value?: string;
  defaultValue?: string;
  placeholder?: string;
}

function Textarea(props: TextareaProps) {
  return (
    <textarea
      {...props.attributes}
      placeholder={props.placeholder}
      name={props.name}
      value={props.value}
      defaultValue={props.defaultValue}
    />
  );
}

export default Textarea;
"
`;

exports[`React - stateType: solid > jsx > Typescript Test > UseValueAndFnFromStore 1`] = `
"\\"use client\\";
import * as React from \\"react\\";
import { useEffect } from \\"react\\";
import { useMutable } from \\"react-solid-state\\";
type MyProps = {
  onChange?: (active: boolean) => void;
};
type MyStore = {
  _id?: string;
  _active?: boolean;
  _do?: (id?: string) => void;
};

function UseValueAndFnFromStore(props: MyProps) {
  const state = useMutable({
    _id: \\"abc\\",
    _active: false,
    _do(id?: string) {
      state._active = !!id;

      if (props.onChange) {
        props.onChange(state._active);
      }
    },
  });

  useEffect(() => {
    if (state._do) {
      state._do(state._id);
    }
  });

  return <div>Test</div>;
}

export default UseValueAndFnFromStore;
"
`;

exports[`React - stateType: solid > jsx > Typescript Test > Video 1`] = `
"import * as React from \\"react\\";

export interface VideoProps {
  attributes?: any;
  video?: string;
  autoPlay?: boolean;
  controls?: boolean;
  muted?: boolean;
  loop?: boolean;
  playsInline?: boolean;
  aspectRatio?: number;
  width?: number;
  height?: number;
  fit?: \\"contain\\" | \\"cover\\" | \\"fill\\";
  position?:
    | \\"center\\"
    | \\"top\\"
    | \\"left\\"
    | \\"right\\"
    | \\"bottom\\"
    | \\"top left\\"
    | \\"top right\\"
    | \\"bottom left\\"
    | \\"bottom right\\";
  posterImage?: string;
  lazyLoad?: boolean;
}

function Video(props: VideoProps) {
  return (
    <video
      preload=\\"none\\"
      {...props.attributes}
      style={{
        width: \\"100%\\",
        height: \\"100%\\",
        ...props.attributes?.style,
        objectFit: props.fit,
        objectPosition: props.position,
        // Hack to get object fit to work as expected and
        // not have the video overflow
        borderRadius: 1,
      }}
      key={props.video || \\"no-src\\"}
      poster={props.posterImage}
      autoplay={props.autoPlay}
      muted={props.muted}
      controls={props.controls}
      loop={props.loop}
    />
  );
}

export default Video;
"
`;

exports[`React - stateType: solid > jsx > Typescript Test > arrowFunctionInUseStore 1`] = `
"\\"use client\\";
import * as React from \\"react\\";
import { useMutable } from \\"react-solid-state\\";

function MyComponent(props: any) {
  const state = useMutable({
    name: \\"steve\\",
    setName(value) {
      state.name = value;
    },
    updateNameWithArrowFn(value) {
      state.name = value;
    },
  });

  return <div>Hello {state.name}</div>;
}

export default MyComponent;
"
`;

exports[`React - stateType: solid > jsx > Typescript Test > basicForFragment 1`] = `
"\\"use client\\";
import * as React from \\"react\\";
import { useMutable } from \\"react-solid-state\\";

function BasicForFragment(props: any) {
  const state = useMutable({ id: \\"xyz\\" });

  return (
    <div>
      {[\\"a\\", \\"b\\", \\"c\\"]?.map((option) => (
        <React.Fragment key={\`key-\${option}\`}>
          <div>{option}</div>
        </React.Fragment>
      ))}
      {[\\"a\\", \\"b\\", \\"c\\"]?.map((option) => (
        <React.Fragment key={\`\${state.id}-\${option}\`}>
          <div>{option}</div>
        </React.Fragment>
      ))}
      <select>
        {[\\"d\\", \\"e\\", \\"f\\"]?.map((option) => (
          <option key={\`\${state.id}-\${option}\`} value={option}>
            {option}
          </option>
        ))}
      </select>
    </div>
  );
}

export default BasicForFragment;
"
`;

exports[`React - stateType: solid > jsx > Typescript Test > basicForNoTagReference 1`] = `
"\\"use client\\";
import * as React from \\"react\\";
import { useMutable } from \\"react-solid-state\\";

function MyBasicForNoTagRefComponent(props: any) {
  const state = useMutable({
    name: \\"VincentW\\",
    TagName: \\"div\\",
    tag: \\"span\\",
    get TagNameGetter() {
      return \\"span\\";
    },
  });

  return (
    <state.TagNameGetter>
      Hello <state.tag>{state.name}</state.tag>
      {props.actions?.map((action) => (
        <state.TagName>
          <action.icon />
          <span>{action.text}</span>
        </state.TagName>
      ))}
    </state.TagNameGetter>
  );
}

export default MyBasicForNoTagRefComponent;
"
`;

exports[`React - stateType: solid > jsx > Typescript Test > basicForwardRef 1`] = `
"\\"use client\\";
import * as React from \\"react\\";
import { forwardRef } from \\"react\\";
import { useMutable } from \\"react-solid-state\\";
export interface Props {
  showInput: boolean;
  inputRef: HTMLInputElement;
}

const MyBasicForwardRefComponent = forwardRef<Props[\\"inputRef\\"]>(
  function MyBasicForwardRefComponent(props: Props, inputRef) {
    const state = useMutable({ name: \\"PatrickJS\\" });

    return (
      <>
        <div>
          <input
            className=\\"input\\"
            ref={inputRef}
            value={state.name}
            onChange={(event) => (state.name = event.target.value)}
          />
        </div>
        <style jsx>{\`
          .input {
            color: red;
          }
        \`}</style>
      </>
    );
  }
);

export default MyBasicForwardRefComponent;
"
`;

exports[`React - stateType: solid > jsx > Typescript Test > basicForwardRefMetadata 1`] = `
"\\"use client\\";
import * as React from \\"react\\";
import { forwardRef } from \\"react\\";
import { useMutable } from \\"react-solid-state\\";
export interface Props {
  showInput: boolean;
  inputRef: HTMLInputElement;
}

const MyBasicForwardRefComponent = forwardRef<Props[\\"inputRef\\"]>(
  function MyBasicForwardRefComponent(props: Props, inputRef) {
    const state = useMutable({ name: \\"PatrickJS\\" });

    return (
      <>
        <div>
          <input
            className=\\"input\\"
            ref={inputRef}
            value={state.name}
            onChange={(event) => (state.name = event.target.value)}
          />
        </div>
        <style jsx>{\`
          .input {
            color: red;
          }
        \`}</style>
      </>
    );
  }
);

export default MyBasicForwardRefComponent;
"
`;

exports[`React - stateType: solid > jsx > Typescript Test > basicOnUpdateReturn 1`] = `
"\\"use client\\";
import * as React from \\"react\\";
import { useEffect } from \\"react\\";
import { useMutable } from \\"react-solid-state\\";

function MyBasicOnUpdateReturnComponent(props: any) {
  const state = useMutable({ name: \\"PatrickJS\\" });

  useEffect(() => {
    const controller = new AbortController();
    const signal = controller.signal;
    fetch(\\"https://patrickjs.com/api/resource.json\\", {
      signal,
    })
      .then((response) => response.json())
      .then((data) => {
        state.name = data.name;
      });
    return () => {
      if (!signal.aborted) {
        controller.abort();
      }
    };
  }, [state.name]);

  return <div>Hello! {state.name}</div>;
}

export default MyBasicOnUpdateReturnComponent;
"
`;

exports[`React - stateType: solid > jsx > Typescript Test > class + ClassName + css 1`] = `
"import * as React from \\"react\\";
import MyComp from \\"./my-component\\";

function MyBasicComponent(props: any) {
  return (
    <>
      <div>
        <MyComp className=\\"test\\" className=\\"test2\\">
          Hello! I can run in React, Vue, Solid, or Liquid!
        </MyComp>
        <div className=\\"test2 test div\\">
          Hello! I can run in React, Vue, Solid, or Liquid!
        </div>
      </div>
      <style jsx>{\`
        .div {
          padding: 10px;
        }
      \`}</style>
    </>
  );
}

export default MyBasicComponent;
"
`;

exports[`React - stateType: solid > jsx > Typescript Test > class + css 1`] = `
"import * as React from \\"react\\";

function MyBasicComponent(props: any) {
  return (
    <>
      <div className=\\"test div\\">
        Hello! I can run in React, Vue, Solid, or Liquid!
      </div>
      <style jsx>{\`
        .div {
          padding: 10px;
        }
      \`}</style>
    </>
  );
}

export default MyBasicComponent;
"
`;

exports[`React - stateType: solid > jsx > Typescript Test > className + css 1`] = `
"import * as React from \\"react\\";

function MyBasicComponent(props: any) {
  return (
    <>
      <div className=\\"test div\\">
        Hello! I can run in React, Vue, Solid, or Liquid!
      </div>
      <style jsx>{\`
        .div {
          padding: 10px;
        }
      \`}</style>
    </>
  );
}

export default MyBasicComponent;
"
`;

exports[`React - stateType: solid > jsx > Typescript Test > className 1`] = `
"\\"use client\\";
import * as React from \\"react\\";
import { useMutable } from \\"react-solid-state\\";
type Props = {
  [key: string]: string | JSX.Element;
  slotTesting: JSX.Element;
};
import type { JSX } from \\"../../../../jsx-runtime\\";

function ClassNameCode(props: Props) {
  const state = useMutable({ bindings: \\"a binding\\" });

  return (
    <div>
      <div className=\\"no binding\\">Without Binding</div>
      <div className={state.bindings}>With binding</div>
    </div>
  );
}

export default ClassNameCode;
"
`;

exports[`React - stateType: solid > jsx > Typescript Test > classState 1`] = `
"\\"use client\\";
import * as React from \\"react\\";
import { useMutable } from \\"react-solid-state\\";

function MyBasicComponent(props: any) {
  const state = useMutable({
    classState: \\"testClassName\\",
    styleState: {
      color: \\"red\\",
    },
  });

  return (
    <>
      <div className={state.classState + \\" div\\"} style={state.styleState}>
        Hello! I can run in React, Vue, Solid, or Liquid!
      </div>
      <style jsx>{\`
        .div {
          padding: 10px;
        }
      \`}</style>
    </>
  );
}

export default MyBasicComponent;
"
`;

exports[`React - stateType: solid > jsx > Typescript Test > componentWithContext 1`] = `
"\\"use client\\";
import * as React from \\"react\\";
import { useContext } from \\"react\\";

export interface ComponentWithContextProps {
  content: string;
}

import Context1 from \\"@dummy/1\\";
import Context2 from \\"@dummy/2\\";

function ComponentWithContext(props: ComponentWithContextProps) {
  const foo = useContext(Context1);

  return (
    <Context2.Provider
      value={{
        bar: \\"baz\\",
      }}
    >
      <Context1.Provider
        value={{
          foo: \\"bar\\",

          content() {
            return props.content;
          },
        }}
      >
        <>{foo.value}</>
      </Context1.Provider>
    </Context2.Provider>
  );
}

export default ComponentWithContext;
"
`;

exports[`React - stateType: solid > jsx > Typescript Test > componentWithContextMultiRoot 1`] = `
"\\"use client\\";
import * as React from \\"react\\";
import { useContext } from \\"react\\";

export interface ComponentWithContextProps {
  content: string;
}

import Context1 from \\"@dummy/1\\";
import Context2 from \\"@dummy/2\\";

function ComponentWithContext(props: ComponentWithContextProps) {
  const foo = useContext(Context1);

  return (
    <Context2.Provider
      value={{
        bar: \\"baz\\",
      }}
    >
      <Context1.Provider
        value={{
          foo: \\"bar\\",

          content() {
            return props.content;
          },
        }}
      >
        <>
          <>{foo.value}</>
          <div>other</div>
        </>
      </Context1.Provider>
    </Context2.Provider>
  );
}

export default ComponentWithContext;
"
`;

exports[`React - stateType: solid > jsx > Typescript Test > contentState 1`] = `
"\\"use client\\";
import * as React from \\"react\\";
import { useContext } from \\"react\\";
import BuilderContext from \\"@dummy/context.js\\";

function RenderContent(props: any) {
  return (
    <BuilderContext.Provider
      value={{
        content: props.content,
        registeredComponents: props.customComponents,
      }}
    >
      <div>setting context</div>
    </BuilderContext.Provider>
  );
}

export default RenderContent;
"
`;

exports[`React - stateType: solid > jsx > Typescript Test > defaultProps 1`] = `
"\\"use client\\";
import * as React from \\"react\\";

export interface ButtonProps {
  attributes?: any;
  text?: string;
  buttonText?: string; // no default value

  link?: string;
  openLinkInNewTab?: boolean;
  onClick?: () => void;
}

function Button(props: ButtonProps) {
  return (
    <div>
      {props.link ? (
        <a
          {...props.attributes}
          href={props.link}
          target={props.openLinkInNewTab ? \\"_blank\\" : undefined}
        >
          {props.text}
        </a>
      ) : null}
      {!props.link ? (
        <button
          type=\\"button\\"
          {...props.attributes}
          onClick={(event) => props.onClick()}
        >
          {props.buttonText}
        </button>
      ) : null}
    </div>
  );
}

Button.defaultProps = {
  text: \\"default text\\",
  link: \\"https://builder.io/\\",
  openLinkInNewTab: false,
  onClick: () => {
    console.log(\\"hi\\");
  },
};

export default Button;
"
`;

exports[`React - stateType: solid > jsx > Typescript Test > defaultPropsOutsideComponent 1`] = `
"\\"use client\\";
import * as React from \\"react\\";

export interface ButtonProps {
  attributes?: any;
  text?: string;
  link?: string;
  openLinkInNewTab?: boolean;
  onClick: () => void;
}

function Button(props: ButtonProps) {
  return (
    <div>
      {props.link ? (
        <a
          {...props.attributes}
          href={props.link}
          target={props.openLinkInNewTab ? \\"_blank\\" : undefined}
        >
          {props.text}
        </a>
      ) : null}
      {!props.link ? (
        <button
          type=\\"button\\"
          {...props.attributes}
          onClick={(event) => props.onClick(event)}
        >
          {props.text}
        </button>
      ) : null}
    </div>
  );
}

Button.defaultProps = {
  text: \\"default text\\",
  link: \\"https://builder.io/\\",
  openLinkInNewTab: false,
  onClick: () => {},
};

export default Button;
"
`;

exports[`React - stateType: solid > jsx > Typescript Test > defaultValsWithTypes 1`] = `
"import * as React from \\"react\\";

type Props = {
  name: string;
};

const DEFAULT_VALUES: Props = {
  name: \\"Sami\\",
};

function ComponentWithTypes(props: Props) {
  return <div> Hello {props.name || DEFAULT_VALUES.name}</div>;
}

export default ComponentWithTypes;
"
`;

exports[`React - stateType: solid > jsx > Typescript Test > eventInputAndChange 1`] = `
"\\"use client\\";
import * as React from \\"react\\";
import { useMutable } from \\"react-solid-state\\";

function EventInputAndChange(props: any) {
  const state = useMutable({ name: \\"Steve\\" });

  return (
    <>
      <div>
        <input
          className=\\"input\\"
          value={state.name}
          onInput={(event) => (state.name = event.target.value)}
          onChange={(event) => (state.name = event.target.value)}
        />
        Hello! I can run in React, Vue, Solid, or Liquid!
      </div>
      <style jsx>{\`
        .input {
          color: red;
        }
      \`}</style>
    </>
  );
}

export default EventInputAndChange;
"
`;

exports[`React - stateType: solid > jsx > Typescript Test > expressionState 1`] = `
"\\"use client\\";
import * as React from \\"react\\";
import { useMutable } from \\"react-solid-state\\";

function MyComponent(props: any) {
  const state = useMutable({
    refToUse: !(props.componentRef instanceof Function)
      ? props.componentRef
      : null,
  });

  return <div>{state.refToUse}</div>;
}

export default MyComponent;
"
`;

exports[`React - stateType: solid > jsx > Typescript Test > getterState 1`] = `
"import * as React from \\"react\\";
import { useMutable } from \\"react-solid-state\\";
export interface ButtonProps {
  foo: string;
}

function Button(props: ButtonProps) {
  const state = useMutable({
    get foo2() {
      return props.foo + \\"foo\\";
    },
    get bar() {
      return \\"bar\\";
    },
    baz(i: number) {
      return i + state.foo2.length;
    },
  });

  return (
    <div>
      <p>{state.foo2}</p>
      <p>{state.bar}</p>
      <p>{state.baz(1)}</p>
    </div>
  );
}

export default Button;
"
`;

exports[`React - stateType: solid > jsx > Typescript Test > import types 1`] = `
"import * as React from \\"react\\";
import { useMutable } from \\"react-solid-state\\";
type RenderContentProps = {
  options?: GetContentOptions;
  content: BuilderContent;
  renderContentProps: RenderBlockProps;
};
import { BuilderContent, GetContentOptions } from \\"@builder.io/sdk\\";
import RenderBlock, { RenderBlockProps } from \\"./builder-render-block.raw\\";

function RenderContent(props: RenderContentProps) {
  const state = useMutable({
    getRenderContentProps(block, index) {
      return {
        block: block,
        index: index,
      };
    },
  });

  return (
    <RenderBlock
      {...state.getRenderContentProps(props.renderContentProps.block, 0)}
    />
  );
}

export default RenderContent;
"
`;

exports[`React - stateType: solid > jsx > Typescript Test > multipleOnUpdate 1`] = `
"\\"use client\\";
import * as React from \\"react\\";
import { useEffect } from \\"react\\";

function MultipleOnUpdate(props: any) {
  useEffect(() => {
    console.log(\\"Runs on every update/rerender\\");
  });
  useEffect(() => {
    console.log(\\"Runs on every update/rerender as well\\");
  });

  return <div />;
}

export default MultipleOnUpdate;
"
`;

exports[`React - stateType: solid > jsx > Typescript Test > multipleOnUpdateWithDeps 1`] = `
"\\"use client\\";
import * as React from \\"react\\";
import { useEffect } from \\"react\\";
import { useMutable } from \\"react-solid-state\\";

function MultipleOnUpdateWithDeps(props: any) {
  const state = useMutable({ a: \\"a\\", b: \\"b\\", c: \\"c\\", d: \\"d\\" });

  useEffect(() => {
    console.log(\\"Runs when a or b changes\\", state.a, state.b);

    if (state.a === \\"a\\") {
      state.a = \\"b\\";
    }
  }, [state.a, state.b]);
  useEffect(() => {
    console.log(\\"Runs when c or d changes\\", state.c, state.d);

    if (state.a === \\"a\\") {
      state.a = \\"b\\";
    }
  }, [state.c, state.d]);

  return <div />;
}

export default MultipleOnUpdateWithDeps;
"
`;

exports[`React - stateType: solid > jsx > Typescript Test > multipleSpreads 1`] = `
"\\"use client\\";
import * as React from \\"react\\";
import { useMutable } from \\"react-solid-state\\";

function MyBasicComponent(props: any) {
  const state = useMutable({
    attrs: {
      hello: \\"world\\",
    },
  });

  return <input {...state.attrs} {...props} />;
}

export default MyBasicComponent;
"
`;

exports[`React - stateType: solid > jsx > Typescript Test > nestedShow 1`] = `
"import * as React from \\"react\\";

interface Props {
  conditionA: boolean;
  conditionB: boolean;
}

function NestedShow(props: Props) {
  return (
    <>
      {props.conditionA ? (
        <>
          {!props.conditionB ? (
            <div>if condition A and condition B</div>
          ) : (
            <div>else-condition-B</div>
          )}
        </>
      ) : (
        <div>else-condition-A</div>
      )}
    </>
  );
}

export default NestedShow;
"
`;

exports[`React - stateType: solid > jsx > Typescript Test > nestedStyles 1`] = `
"import * as React from \\"react\\";

function NestedStyles(props: any) {
  return (
    <>
      <div className=\\"div\\">Hello world</div>
      <style jsx>{\`
        .div {
          display: flex;
          --bar: red;
          color: var(--bar);
        }
        @media (max-width: env(--mobile)) {
          .div {
            display: block;
          }
        }
        .div:hover {
          display: flex;
        }
        .div:active {
          display: inline;
        }
        .div .nested-selector {
          display: grid;
        }
        .div .nested-selector:hover {
          display: block;
        }
        .div.nested-selector:active {
          display: inline-block;
        }
      \`}</style>
    </>
  );
}

export default NestedStyles;
"
`;

exports[`React - stateType: solid > jsx > Typescript Test > onEvent 1`] = `
"\\"use client\\";
import * as React from \\"react\\";
import { useRef, useEffect } from \\"react\\";
import { useMutable } from \\"react-solid-state\\";

function Embed(props: any) {
  const elem = useRef<HTMLDivElement>(null);
  const state = useMutable({
    foo(event) {
      console.log(\\"test2\\");
    },
    elem_onInitEditingBldr(event) {
      console.log(\\"test\\");
      state.foo(event);
    },
  });

  useEffect(() => {
    elem.current?.addEventListener(\\"initEditingBldr\\", elem_onInitEditingBldr);
    return () =>
      elem.current?.removeEventListener(
        \\"initEditingBldr\\",
        elem_onInitEditingBldr
      );
  }, []);

  useEffect(() => {
    elem.current.dispatchEvent(new CustomEvent(\\"initEditingBldr\\"));
  }, []);

  return (
    <div className=\\"builder-embed\\" ref={elem}>
      <div>Test</div>
    </div>
  );
}

export default Embed;
"
`;

exports[`React - stateType: solid > jsx > Typescript Test > onInit & onMount 1`] = `
"\\"use client\\";
import * as React from \\"react\\";
import { useRef, useEffect } from \\"react\\";

function OnInit(props: any) {
  const hasInitialized = useRef(false);
  if (!hasInitialized.current) {
    console.log(\\"onInit\\");
    hasInitialized.current = true;
  }

  useEffect(() => {
    console.log(\\"onMount\\");
  }, []);

  return <div />;
}

export default OnInit;
"
`;

exports[`React - stateType: solid > jsx > Typescript Test > onInit 1`] = `
"\\"use client\\";
import * as React from \\"react\\";
import { useRef } from \\"react\\";
import { useMutable } from \\"react-solid-state\\";
type Props = {
  name: string;
};

export const defaultValues = {
  name: \\"PatrickJS\\",
};

function OnInit(props: Props) {
  const state = useMutable({ name: \\"\\" });

  const hasInitialized = useRef(false);
  if (!hasInitialized.current) {
    state.name = defaultValues.name || props.name;
    console.log(\\"set defaults with props\\");
    hasInitialized.current = true;
  }

  return <div>Default name defined by parent {state.name}</div>;
}

export default OnInit;
"
`;

exports[`React - stateType: solid > jsx > Typescript Test > onInitPlain 1`] = `
"import * as React from \\"react\\";
import { useRef } from \\"react\\";

function OnInitPlain(props: any) {
  const hasInitialized = useRef(false);
  if (!hasInitialized.current) {
    console.log(\\"onInit\\");
    hasInitialized.current = true;
  }

  return <div />;
}

export default OnInitPlain;
"
`;

exports[`React - stateType: solid > jsx > Typescript Test > onMount 1`] = `
"\\"use client\\";
import * as React from \\"react\\";
import { useEffect } from \\"react\\";

function Comp(props: any) {
  useEffect(() => {
    console.log(\\"Runs on mount\\");
  }, []);

  useEffect(() => {
    return () => {
      console.log(\\"Runs on unMount\\");
    };
  }, []);

  return <div />;
}

export default Comp;
"
`;

exports[`React - stateType: solid > jsx > Typescript Test > onMountMultiple 1`] = `
"\\"use client\\";
import * as React from \\"react\\";
import { useEffect } from \\"react\\";

function Comp(props: any) {
  useEffect(() => {
    console.log(\\"Runs on mount\\");
  }, []);
  useEffect(() => {
    console.log(\\"Another one runs on Mount\\");
  }, []);
  useEffect(() => {
    console.log(\\"SSR runs on Mount\\");
  }, []);

  return <div />;
}

export default Comp;
"
`;

exports[`React - stateType: solid > jsx > Typescript Test > onUpdate 1`] = `
"\\"use client\\";
import * as React from \\"react\\";
import { useEffect } from \\"react\\";

function OnUpdate(props: any) {
  useEffect(() => {
    console.log(\\"Runs on every update/rerender\\");
  });

  return <div />;
}

export default OnUpdate;
"
`;

exports[`React - stateType: solid > jsx > Typescript Test > onUpdateWithDeps 1`] = `
"\\"use client\\";
import * as React from \\"react\\";
import { useEffect } from \\"react\\";
import { useMutable } from \\"react-solid-state\\";
type Props = {
  size: string;
};

function OnUpdateWithDeps(props: Props) {
  const state = useMutable({ a: \\"a\\", b: \\"b\\" });

  useEffect(() => {
    console.log(\\"Runs when a, b or size changes\\", state.a, state.b, props.size);
  }, [state.a, state.b, props.size]);

  return <div />;
}

export default OnUpdateWithDeps;
"
`;

exports[`React - stateType: solid > jsx > Typescript Test > preserveExportOrLocalStatement 1`] = `
"import * as React from \\"react\\";

type Types = {
  s: any[];
};
interface IPost {
  len: number;
}
export interface MyBasicComponentProps {
  id: string;
}

const b = 3;
const foo = () => {};
export const a = 3;
export const bar = () => {};
export function run<T>(value: T) {}

function MyBasicComponent(props: MyBasicComponentProps) {
  return <div />;
}

export default MyBasicComponent;
"
`;

exports[`React - stateType: solid > jsx > Typescript Test > preserveTyping 1`] = `
"import * as React from \\"react\\";

export type A = \\"test\\";
export interface C {
  n: \\"test\\";
}
type B = \\"test2\\";
interface D {
  n: \\"test\\";
}
export interface MyBasicComponentProps {
  name: string;
  age?: number;
}

function MyBasicComponent(props: MyBasicComponentProps) {
  return (
    <div>Hello! I can run in React, Vue, Solid, or Liquid! {props.name}</div>
  );
}

export default MyBasicComponent;
"
`;

exports[`React - stateType: solid > jsx > Typescript Test > propsDestructure 1`] = `
"\\"use client\\";
import * as React from \\"react\\";
import { useMutable } from \\"react-solid-state\\";
type Props = {
  children: any;
  type: string;
};

function MyBasicComponent(props: Props) {
  const state = useMutable({ name: \\"Decadef20\\" });

  return (
    <div>
      {props.children}
      {props.type}
      Hello! I can run in React, Vue, Solid, or Liquid!
    </div>
  );
}

export default MyBasicComponent;
"
`;

exports[`React - stateType: solid > jsx > Typescript Test > propsInterface 1`] = `
"import * as React from \\"react\\";

interface Person {
  name: string;
  age?: number;
}

function MyBasicComponent(props: Person | never) {
  return (
    <div>Hello! I can run in React, Vue, Solid, or Liquid! {props.name}</div>
  );
}

export default MyBasicComponent;
"
`;

exports[`React - stateType: solid > jsx > Typescript Test > propsType 1`] = `
"import * as React from \\"react\\";

type Person = {
  name: string;
  age?: number;
};

function MyBasicComponent(props: Person) {
  return (
    <div>Hello! I can run in React, Vue, Solid, or Liquid! {props.name}</div>
  );
}

export default MyBasicComponent;
"
`;

exports[`React - stateType: solid > jsx > Typescript Test > referencingFunInsideHook 1`] = `
"\\"use client\\";
import * as React from \\"react\\";
import { useEffect } from \\"react\\";
import { useMutable } from \\"react-solid-state\\";

function OnUpdate(props: any) {
  const state = useMutable({
    foo: function foo(params) {},
    bar: function bar() {},
    zoo: function zoo() {
      const params = {
        cb: state.bar,
      };
    },
  });

  useEffect(() => {
    state.foo({
      someOption: state.bar,
    });
  });

  return <div />;
}

export default OnUpdate;
"
`;

exports[`React - stateType: solid > jsx > Typescript Test > renderBlock 1`] = `
"\\"use client\\";
import * as React from \\"react\\";
import { useMutable } from \\"react-solid-state\\";
export type RenderBlockProps = {
  block: BuilderBlock;
  context: BuilderContextInterface;
};
import { TARGET } from \\"../../constants/target.js\\";
import type {
  BuilderContextInterface,
  RegisteredComponent,
} from \\"../../context/types.js\\";
import { evaluate } from \\"../../functions/evaluate.js\\";
import { extractTextStyles } from \\"../../functions/extract-text-styles.js\\";
import { getBlockActions } from \\"../../functions/get-block-actions.js\\";
import { getBlockComponentOptions } from \\"../../functions/get-block-component-options.js\\";
import { getBlockProperties } from \\"../../functions/get-block-properties.js\\";
import { getBlockTag } from \\"../../functions/get-block-tag.js\\";
import { getProcessedBlock } from \\"../../functions/get-processed-block.js\\";
import { getReactNativeBlockStyles } from \\"../../functions/get-react-native-block-styles.js\\";
import type { BuilderBlock } from \\"../../types/builder-block.js\\";
import type { Nullable } from \\"../../types/typescript.js\\";
import BlockStyles from \\"./block-styles\\";
import { isEmptyHtmlElement } from \\"./render-block.helpers.js\\";
import RenderComponentWithContext from \\"./render-component-with-context.js\\";
import type { RenderComponentProps } from \\"./render-component\\";
import RenderComponent from \\"./render-component\\";
import RenderRepeatedBlock from \\"./render-repeated-block\\";
import type { RepeatData } from \\"./types.js\\";

function RenderBlock(props: RenderBlockProps) {
  const state = useMutable({
    get component() {
      const componentName = getProcessedBlock({
        block: props.block,
        state: props.context.state,
        context: props.context.context,
        shouldEvaluateBindings: false,
      }).component?.name;

      if (!componentName) {
        return null;
      }

      const ref = props.context.registeredComponents[componentName];

      if (!ref) {
        // TODO: Public doc page with more info about this message
        console.warn(\`
          Could not find a registered component named \\"\${componentName}\\".
          If you registered it, is the file that registered it imported by the file that needs to render it?\`);
        return undefined;
      } else {
        return ref;
      }
    },
    get tag() {
      return getBlockTag(state.useBlock);
    },
    get useBlock() {
      return state.repeatItemData
        ? props.block
        : getProcessedBlock({
            block: props.block,
            state: props.context.state,
            context: props.context.context,
            shouldEvaluateBindings: true,
          });
    },
    get actions() {
      return getBlockActions({
        block: state.useBlock,
        state: props.context.state,
        context: props.context.context,
      });
    },
    get attributes() {
      const blockProperties = getBlockProperties(state.useBlock);
      return {
        ...blockProperties,
        ...(TARGET === \\"reactNative\\"
          ? {
              style: getReactNativeBlockStyles({
                block: state.useBlock,
                context: props.context,
                blockStyles: blockProperties.style,
              }),
            }
          : {}),
      };
    },
    get shouldWrap() {
      return !state.component?.noWrap;
    },
    get renderComponentProps() {
      return {
        blockChildren: state.useChildren,
        componentRef: state.component?.component,
        componentOptions: {
          ...getBlockComponentOptions(state.useBlock),

          /**
           * These attributes are passed to the wrapper element when there is one. If \`noWrap\` is set to true, then
           * they are provided to the component itself directly.
           */
          ...(state.shouldWrap
            ? {}
            : {
                attributes: { ...state.attributes, ...state.actions },
              }),
          customBreakpoints: state.childrenContext?.content?.meta?.breakpoints,
        },
        context: state.childrenContext,
      };
    },
    get useChildren() {
      // TO-DO: When should \`canHaveChildren\` dictate rendering?
      // This is currently commented out because some Builder components (e.g. Box) do not have \`canHaveChildren: true\`,
      // but still receive and need to render children.
      // return state.componentInfo?.canHaveChildren ? state.useBlock.children : [];
      return state.useBlock.children ?? [];
    },
    get childrenWithoutParentComponent() {
      /**
       * When there is no \`componentRef\`, there might still be children that need to be rendered. In this case,
       * we render them outside of \`componentRef\`.
       * NOTE: We make sure not to render this if \`repeatItemData\` is non-null, because that means we are rendering an array of
       * blocks, and the children will be repeated within those blocks.
       */
      const shouldRenderChildrenOutsideRef =
        !state.component?.component && !state.repeatItemData;
      return shouldRenderChildrenOutsideRef ? state.useChildren : [];
    },
    get repeatItemData() {
      /**
       * we don't use \`state.useBlock\` here because the processing done within its logic includes evaluating the block's bindings,
       * which will not work if there is a repeat.
       */
      const { repeat, ...blockWithoutRepeat } = props.block;

      if (!repeat?.collection) {
        return undefined;
      }

      const itemsArray = evaluate({
        code: repeat.collection,
        state: props.context.state,
        context: props.context.context,
      });

      if (!Array.isArray(itemsArray)) {
        return undefined;
      }

      const collectionName = repeat.collection.split(\\".\\").pop();
      const itemNameToUse =
        repeat.itemName || (collectionName ? collectionName + \\"Item\\" : \\"item\\");
      const repeatArray = itemsArray.map<RepeatData>((item, index) => ({
        context: {
          ...props.context,
          state: {
            ...props.context.state,
            $index: index,
            $item: item,
            [itemNameToUse]: item,
            [\`$\${itemNameToUse}Index\`]: index,
          },
        },
        block: blockWithoutRepeat,
      }));
      return repeatArray;
    },
    get inheritedTextStyles() {
      if (TARGET !== \\"reactNative\\") {
        return {};
      }

      const styles = getReactNativeBlockStyles({
        block: state.useBlock,
        context: props.context,
        blockStyles: state.attributes.style,
      });
      return extractTextStyles(styles);
    },
    get childrenContext() {
      return {
        apiKey: props.context.apiKey,
        state: props.context.state,
        content: props.context.content,
        context: props.context.context,
        registeredComponents: props.context.registeredComponents,
        inheritedStyles: state.inheritedTextStyles,
      };
    },
    get renderComponentTag() {
      if (TARGET === \\"reactNative\\") {
        return RenderComponentWithContext;
      } else if (TARGET === \\"vue3\\") {
        // vue3 expects a string for the component tag
        return \\"RenderComponent\\";
      } else {
        return RenderComponent;
      }
    },
    componentInfo: null,
  });

  return (
    <>
      {state.shouldWrap ? (
        <>
          {isEmptyHtmlElement(state.tag) ? (
            <state.tag {...state.attributes} {...state.actions} />
          ) : null}
          {!isEmptyHtmlElement(state.tag) && state.repeatItemData ? (
            <>
              {state.repeatItemData?.map((data, index) => (
                <RenderRepeatedBlock
                  key={index}
                  repeatContext={data.context}
                  block={data.block}
                />
              ))}
            </>
          ) : null}
          {!isEmptyHtmlElement(state.tag) && !state.repeatItemData ? (
            <state.tag {...state.attributes} {...state.actions}>
              <state.renderComponentTag {...state.renderComponentProps} />
              {state.childrenWithoutParentComponent?.map((child) => (
                <RenderBlock
                  key={\\"render-block-\\" + child.id}
                  block={child}
                  context={state.childrenContext}
                />
              ))}
              {state.childrenWithoutParentComponent?.map((child) => (
                <BlockStyles
                  key={\\"block-style-\\" + child.id}
                  block={child}
                  context={state.childrenContext}
                />
              ))}
            </state.tag>
          ) : null}
        </>
      ) : (
        <>
          <state.renderComponentTag {...state.renderComponentProps} />
        </>
      )}
    </>
  );
}

export default RenderBlock;
"
`;

exports[`React - stateType: solid > jsx > Typescript Test > renderContentExample 1`] = `
"\\"use client\\";
import * as React from \\"react\\";
import { useContext, useEffect } from \\"react\\";

type Props = {
  customComponents: string[];
  content: {
    blocks: any[];
    id: string;
  };
};
import BuilderContext from \\"@dummy/context.js\\";
import {
  dispatchNewContentToVisualEditor,
  sendComponentsToVisualEditor,
  trackClick,
} from \\"@dummy/injection-js\\";
import RenderBlocks from \\"@dummy/RenderBlocks\\";

function RenderContent(props: Props) {
  useEffect(() => {
    sendComponentsToVisualEditor(props.customComponents);
  }, []);

  useEffect(() => {
    dispatchNewContentToVisualEditor(props.content);
  }, [props.content]);

  return (
    <>
      <BuilderContext.Provider
        value={{
          get content() {
            return 3;
          },

          get registeredComponents() {
            return 4;
          },
        }}
      >
        <div className=\\"div\\" onClick={(event) => trackClick(props.content.id)}>
          <RenderBlocks blocks={props.content.blocks} />
        </div>
      </BuilderContext.Provider>
      <style jsx>{\`
        .div {
          display: flex;
          flex-direction: columns;
        }
      \`}</style>
    </>
  );
}

export default RenderContent;
"
`;

exports[`React - stateType: solid > jsx > Typescript Test > rootFragmentMultiNode 1`] = `
"import * as React from \\"react\\";

export interface ButtonProps {
  attributes?: any;
  text?: string;
  link?: string;
  openLinkInNewTab?: boolean;
}

function Button(props: ButtonProps) {
  return (
    <>
      {props.link ? (
        <a
          {...props.attributes}
          href={props.link}
          target={props.openLinkInNewTab ? \\"_blank\\" : undefined}
        >
          {props.text}
        </a>
      ) : null}
      {!props.link ? (
        <button type=\\"button\\" {...props.attributes}>
          {props.text}
        </button>
      ) : null}
    </>
  );
}

export default Button;
"
`;

exports[`React - stateType: solid > jsx > Typescript Test > rootShow 1`] = `
"import * as React from \\"react\\";

export interface RenderStylesProps {
  foo: string;
}

function RenderStyles(props: RenderStylesProps) {
  return (
    <>
      {props.foo === \\"bar\\" ? (
        <>
          <div>Bar</div>
        </>
      ) : (
        <div>Foo</div>
      )}
    </>
  );
}

export default RenderStyles;
"
`;

exports[`React - stateType: solid > jsx > Typescript Test > self-referencing component 1`] = `
"import * as React from \\"react\\";

function MyComponent(props: any) {
  return (
    <div>
      {props.name}
      {props.name === \\"Batman\\" ? <MyComponent name=\\"Bruce Wayne\\" /> : null}
    </div>
  );
}

export default MyComponent;
"
`;

exports[`React - stateType: solid > jsx > Typescript Test > self-referencing component with children 1`] = `
"import * as React from \\"react\\";

function MyComponent(props: any) {
  return (
    <div>
      {props.name}
      {props.children}
      {props.name === \\"Batman\\" ? (
        <MyComponent name=\\"Bruce\\">
          <div>Wayne</div>
        </MyComponent>
      ) : null}
    </div>
  );
}

export default MyComponent;
"
`;

exports[`React - stateType: solid > jsx > Typescript Test > setState 1`] = `
"\\"use client\\";
import * as React from \\"react\\";
import { useMutable } from \\"react-solid-state\\";

function SetState(props: any) {
  const state = useMutable({
    n: [\\"123\\"],
    someFn() {
      state.n[0] = \\"123\\";
    },
  });

  return (
    <div>
      <button onClick={(event) => state.someFn()}>Click me</button>
    </div>
  );
}

export default SetState;
"
`;

exports[`React - stateType: solid > jsx > Typescript Test > showExpressions 1`] = `
"import * as React from \\"react\\";

interface Props {
  conditionA: boolean;
  conditionB: boolean;
}

function ShowWithOtherValues(props: Props) {
  return (
    <div>
      {props.conditionA ? <>Content0</> : <>ContentA</>}
      {props.conditionA ? <>ContentA</> : null}
      {props.conditionA ? <></> : <>ContentA</>}
      {props.conditionA ? <>ContentB</> : <>{undefined}</>}
      {props.conditionA ? <>{undefined}</> : <>ContentB</>}
      {props.conditionA ? <>ContentC</> : null}
      {props.conditionA ? <></> : <>ContentC</>}
      {props.conditionA ? <>ContentD</> : null}
      {props.conditionA ? <></> : <>ContentD</>}
      {props.conditionA ? <>ContentE</> : <>hello</>}
      {props.conditionA ? <>hello</> : <>ContentE</>}
      {props.conditionA ? <>ContentF</> : <>123</>}
      {props.conditionA ? <>123</> : <>ContentF</>}
      {props.conditionA === \\"Default\\" ? (
        <>4mb</>
      ) : props.conditionB === \\"Complete\\" ? (
        <>20mb</>
      ) : (
        <>9mb</>
      )}
      {props.conditionA === \\"Default\\" ? (
        <>{props.conditionB === \\"Complete\\" ? <>20mb</> : <>9mb</>}</>
      ) : (
        <>4mb</>
      )}
      {props.conditionA === \\"Default\\" ? (
        <>{props.conditionB === \\"Complete\\" ? <div>complete</div> : <>9mb</>}</>
      ) : props.conditionC === \\"Complete\\" ? (
        <>dff</>
      ) : (
        <div>complete else</div>
      )}
    </div>
  );
}

export default ShowWithOtherValues;
"
`;

exports[`React - stateType: solid > jsx > Typescript Test > showWithFor 1`] = `
"import * as React from \\"react\\";

interface Props {
  conditionA: boolean;
  items: string[];
}

function NestedShow(props: Props) {
  return (
    <>
      {props.conditionA ? (
        <>
          {props.items?.map((item, idx) => (
            <div key={idx}>{item}</div>
          ))}
        </>
      ) : (
        <div>else-condition-A</div>
      )}
    </>
  );
}

export default NestedShow;
"
`;

exports[`React - stateType: solid > jsx > Typescript Test > showWithOtherValues 1`] = `
"import * as React from \\"react\\";

interface Props {
  conditionA: boolean;
}

function ShowWithOtherValues(props: Props) {
  return (
    <div>
      {props.conditionA ? <>ContentA</> : null}
      {props.conditionA ? <>ContentB</> : <>{undefined}</>}
      {props.conditionA ? <>ContentC</> : null}
      {props.conditionA ? <>ContentD</> : null}
      {props.conditionA ? <>ContentE</> : <>hello</>}
      {props.conditionA ? <>ContentF</> : <>123</>}
    </div>
  );
}

export default ShowWithOtherValues;
"
`;

exports[`React - stateType: solid > jsx > Typescript Test > showWithRootText 1`] = `
"import * as React from \\"react\\";

interface Props {
  conditionA: boolean;
}

function ShowRootText(props: Props) {
  return <>{props.conditionA ? <>ContentA</> : <div>else-condition-A</div>}</>;
}

export default ShowRootText;
"
`;

exports[`React - stateType: solid > jsx > Typescript Test > signalsOnUpdate 1`] = `
"\\"use client\\";
import * as React from \\"react\\";
import { useEffect } from \\"react\\";

type Props = {
  id: string;
  foo: {
    bar: {
      baz: number;
    };
  };
};

function MyBasicComponent(props: Props) {
  useEffect(() => {
    console.log(\\"props.id changed\\", props.id);
    console.log(\\"props.foo.value.bar.baz changed\\", props.foo.bar.baz);
  }, [props.id, props.foo.bar.baz]);

  return (
    <>
      <div className=\\"test div\\">
        {props.id}
        {props.foo.bar.baz}
      </div>
      <style jsx>{\`
        .div {
          padding: 10px;
        }
      \`}</style>
    </>
  );
}

export default MyBasicComponent;
"
`;

exports[`React - stateType: solid > jsx > Typescript Test > spreadAttrs 1`] = `
"import * as React from \\"react\\";

function MyBasicComponent(props: any) {
  return <input {...attrs} />;
}

export default MyBasicComponent;
"
`;

exports[`React - stateType: solid > jsx > Typescript Test > spreadNestedProps 1`] = `
"import * as React from \\"react\\";

function MyBasicComponent(props: any) {
  return <input {...props.nested} />;
}

export default MyBasicComponent;
"
`;

exports[`React - stateType: solid > jsx > Typescript Test > spreadProps 1`] = `
"import * as React from \\"react\\";

function MyBasicComponent(props: any) {
  return <input {...props} />;
}

export default MyBasicComponent;
"
`;

exports[`React - stateType: solid > jsx > Typescript Test > store-async-function 1`] = `
"import * as React from \\"react\\";
import { useMutable } from \\"react-solid-state\\";

function StringLiteralStore(props: any) {
  const state = useMutable({
    arrowFunction: async function arrowFunction() {
      return Promise.resolve();
    },
    namedFunction: async function namedFunction() {
      return Promise.resolve();
    },
    fetchUsers: async function fetchUsers() {
      return Promise.resolve();
    },
  });

  return <div />;
}

export default StringLiteralStore;
"
`;

exports[`React - stateType: solid > jsx > Typescript Test > string-literal-store 1`] = `
"\\"use client\\";
import * as React from \\"react\\";
import { useMutable } from \\"react-solid-state\\";

function StringLiteralStore(props: any) {
  const state = useMutable({ foo: 123 });

  return <div>{state.foo}</div>;
}

export default StringLiteralStore;
"
`;

exports[`React - stateType: solid > jsx > Typescript Test > styleClassAndCss 1`] = `
"import * as React from \\"react\\";

function MyComponent(props: any) {
  return (
    <>
      <div
        className=\\"builder-column div\\"
        style={{
          width: \\"100%\\",
        }}
      />
      <style jsx>{\`
        .div {
          display: flex;
          flex-direction: column;
          align-items: stretch;
        }
      \`}</style>
    </>
  );
}

export default MyComponent;
"
`;

exports[`React - stateType: solid > jsx > Typescript Test > stylePropClassAndCss 1`] = `
"import * as React from \\"react\\";

function StylePropClassAndCss(props: any) {
  return (
    <>
      <div
        style={props.attributes.style}
        className={props.attributes.class + \\" div\\"}
      />
      <style jsx>{\`
        .div {
          display: flex;
          flex-direction: column;
          align-items: stretch;
        }
      \`}</style>
    </>
  );
}

export default StylePropClassAndCss;
"
`;

exports[`React - stateType: solid > jsx > Typescript Test > subComponent 1`] = `
"import * as React from \\"react\\";
import Foo from \\"./foo-sub-component\\";

function SubComponent(props: any) {
  return <Foo />;
}

export default SubComponent;
"
`;

exports[`React - stateType: solid > jsx > Typescript Test > svgComponent 1`] = `
"import * as React from \\"react\\";

function SvgComponent(props: any) {
  return (
    <svg
      fill=\\"none\\"
      role=\\"img\\"
      viewBox={\\"0 0 \\" + 42 + \\" \\" + 42}
      width={42}
      height={42}
    >
      <defs>
        <filter id=\\"prefix__filter0_f\\" filterUnits=\\"userSpaceOnUse\\">
          <feFlood result=\\"BackgroundImageFix\\" />
          <feBlend in=\\"SourceGraphic\\" in2=\\"BackgroundImageFix\\" result=\\"shape\\" />
          <feGaussianBlur result=\\"effect1_foregroundBlur\\" stdDeviation={7} />
        </filter>
      </defs>
    </svg>
  );
}

export default SvgComponent;
"
`;

exports[`React - stateType: solid > jsx > Typescript Test > typeDependency 1`] = `
"import * as React from \\"react\\";

export type TypeDependencyProps = {
  foo: Foo;
  foo2: Foo2;
};
import type { Foo } from \\"./foo-type\\";
import type { Foo as Foo2 } from \\"./type-export\\";

function TypeDependency(props: TypeDependencyProps) {
  return <div>{props.foo}</div>;
}

export default TypeDependency;
"
`;

exports[`React - stateType: solid > jsx > Typescript Test > typeExternalStore 1`] = `
"\\"use client\\";
import * as React from \\"react\\";
import { useMutable } from \\"react-solid-state\\";
import { FooStore } from \\"./foo-store\\";

function TypeExternalStore(props: any) {
  const state = useMutable({ _name: \\"test\\" });

  return <div>Hello {state._name}! </div>;
}

export default TypeExternalStore;
"
`;

exports[`React - stateType: solid > jsx > Typescript Test > typeGetterStore 1`] = `
"\\"use client\\";
import * as React from \\"react\\";
import { useMutable } from \\"react-solid-state\\";
type GetterStore = {
  getName: () => string;
  name: string;
  get test(): string;
};

function TypeGetterStore(props: any) {
  const state = useMutable({
    name: \\"test\\",
    getName() {
      if (state.name === \\"a\\") {
        return \\"b\\";
      }

      return state.name;
    },
    get test() {
      return \\"test\\";
    },
  });

  return <div>Hello {state.name}! </div>;
}

export default TypeGetterStore;
"
`;

exports[`React - stateType: solid > jsx > Typescript Test > use-style 1`] = `
"import * as React from \\"react\\";

function MyComponent(props: any) {
  return (
    <>
      <button type=\\"button\\">Button</button>
      <style jsx>{\`
        button {
          background: blue;
          color: white;
          font-size: 12px;
          outline: 1px solid black;
        }
      \`}</style>
    </>
  );
}

export default MyComponent;
"
`;

exports[`React - stateType: solid > jsx > Typescript Test > use-style-and-css 1`] = `
"import * as React from \\"react\\";

function MyComponent(props: any) {
  return (
    <>
      <button type=\\"button\\" className=\\"button\\">
        Button
      </button>
      <style jsx>{\`
        button {
          font-size: 12px;
          outline: 1px solid black;
        }

        .button {
          background: blue;
          color: white;
        }
      \`}</style>
    </>
  );
}

export default MyComponent;
"
`;

exports[`React - stateType: solid > jsx > Typescript Test > use-style-outside-component 1`] = `
"import * as React from \\"react\\";

function MyComponent(props: any) {
  return (
    <>
      <button type=\\"button\\">Button</button>
      <style jsx>{\`
        button {
          background: blue;
          color: white;
          font-size: 12px;
          outline: 1px solid black;
        }
      \`}</style>
    </>
  );
}

export default MyComponent;
"
`;

exports[`React - stateType: solid > jsx > Typescript Test > useTarget 1`] = `
"\\"use client\\";
import * as React from \\"react\\";
import { useEffect } from \\"react\\";
import { useMutable } from \\"react-solid-state\\";

function UseTargetComponent(props: any) {
  const state = useMutable({
    get name() {
      const prefix = 123;
      return prefix + \\"foo\\";
    },
    lastName: \\"bar\\",
    foo: \\"bar\\",
  });

  useEffect(() => {
    console.log(state.foo);
    state.foo = \\"bar\\";
    console.log(\\"react\\");
    state.lastName = \\"baz\\";
    console.log(state.foo);
    state.foo = \\"baz\\";
  }, []);

  return <div>{state.name}</div>;
}

export default UseTargetComponent;
"
`;

exports[`React - stateType: solid > jsx > Typescript Test > webComponent 1`] = `
"import * as React from \\"react\\";
import { useRef } from \\"react\\";
import { register } from \\"swiper/element/bundle\\";

function MyBasicWebComponent(props: any) {
  const hasInitialized = useRef(false);
  if (!hasInitialized.current) {
    register();
    hasInitialized.current = true;
  }

  return (
    <swiper-container slides-per-view=\\"3\\" navigation=\\"true\\" pagination=\\"true\\">
      <swiper-slide>Slide 1</swiper-slide>
      <swiper-slide>Slide 2</swiper-slide>
      <swiper-slide>Slide 3</swiper-slide>
    </swiper-container>
  );
}

export default MyBasicWebComponent;
"
`;

exports[`React - stateType: solid > svelte > Javascript Test > basic 1`] = `
"\\"use client\\";
import * as React from \\"react\\";
import { useMutable } from \\"react-solid-state\\";

function MyComponent(props) {
  const state = useMutable({ name: \\"Steve\\" });

  return (
    <div>
      <input
        onChange={(event) => (state.name = event.target.value)}
        value={state.name}
      />
      Hello! I can run in React, Vue, Solid, or Liquid!
    </div>
  );
}

export default MyComponent;
"
`;

exports[`React - stateType: solid > svelte > Javascript Test > bindGroup 1`] = `
"\\"use client\\";
import * as React from \\"react\\";
import { useMutable } from \\"react-solid-state\\";

function MyComponent(props) {
  const state = useMutable({ tortilla: \\"Plain\\", fillings: [] });

  return (
    <div>
      <input
        type=\\"radio\\"
        value=\\"Plain\\"
        checked={state.tortilla === \\"Plain\\"}
        onChange={(event) => (state.tortilla = event.target.value)}
      />
      <input
        type=\\"radio\\"
        value=\\"Whole wheat\\"
        checked={state.tortilla === \\"Whole wheat\\"}
        onChange={(event) => (state.tortilla = event.target.value)}
      />
      <input
        type=\\"radio\\"
        value=\\"Spinach\\"
        checked={state.tortilla === \\"Spinach\\"}
        onChange={(event) => (state.tortilla = event.target.value)}
      />
      <br />
      <br />
      <input
        type=\\"checkbox\\"
        value=\\"Rice\\"
        checked={state.fillings === \\"Rice\\"}
        onChange={(event) => (state.fillings = event.target.value)}
      />
      <input
        type=\\"checkbox\\"
        value=\\"Beans\\"
        checked={state.fillings === \\"Beans\\"}
        onChange={(event) => (state.fillings = event.target.value)}
      />
      <input
        type=\\"checkbox\\"
        value=\\"Cheese\\"
        checked={state.fillings === \\"Cheese\\"}
        onChange={(event) => (state.fillings = event.target.value)}
      />
      <input
        type=\\"checkbox\\"
        value=\\"Guac (extra)\\"
        checked={state.fillings === \\"Guac (extra)\\"}
        onChange={(event) => (state.fillings = event.target.value)}
      />
      <p>Tortilla: {state.tortilla}</p>
      <p>Fillings: {state.fillings}</p>
    </div>
  );
}

export default MyComponent;
"
`;

exports[`React - stateType: solid > svelte > Javascript Test > bindProperty 1`] = `
"\\"use client\\";
import * as React from \\"react\\";
import { useMutable } from \\"react-solid-state\\";

function MyComponent(props) {
  const state = useMutable({ value: \\"hello\\" });

  return <input value={state.value} />;
}

export default MyComponent;
"
`;

exports[`React - stateType: solid > svelte > Javascript Test > classDirective 1`] = `
"\\"use client\\";
import * as React from \\"react\\";
import { useMutable } from \\"react-solid-state\\";

function MyComponent(props) {
  const state = useMutable({ focus: true });

  return (
    <input
      className={\`form-input \${props.disabled ? \\"disabled\\" : \\"\\"} \${
        state.focus ? \\"focus\\" : \\"\\"
      }\`}
    />
  );
}

MyComponent.defaultProps = {};

export default MyComponent;
"
`;

exports[`React - stateType: solid > svelte > Javascript Test > context 1`] = `
"'>' expected. (35:13)
  33 | return (
  34 |
> 35 | <'activeTab'.Provider  value={state.activeTab}><div>{state.activeTab}</div></'activeTab'.Provider>
     |             ^
  36 |
  37 |
  38 |"
`;

exports[`React - stateType: solid > svelte > Javascript Test > each 1`] = `
"\\"use client\\";
import * as React from \\"react\\";
import { useMutable } from \\"react-solid-state\\";

function MyComponent(props) {
  const state = useMutable({ numbers: [\\"one\\", \\"two\\", \\"three\\"] });

  return (
    <ul>
      {state.numbers?.map((num) => (
        <li>{num}</li>
      ))}
    </ul>
  );
}

export default MyComponent;
"
`;

exports[`React - stateType: solid > svelte > Javascript Test > eventHandlers 1`] = `
"\\"use client\\";
import * as React from \\"react\\";
import { useMutable } from \\"react-solid-state\\";

function MyComponent(props) {
  const state = useMutable({
    log: function log(msg = \\"hello\\") {
      console.log(msg);
    },
  });

  return (
    <div>
      <button onClick={(a) => state.log(\\"hi\\")}>Log</button>
      <button onClick={(event) => state.log(event)}>Log</button>
      <button onClick={(event) => state.log(event)}>Log</button>
    </div>
  );
}

export default MyComponent;
"
`;

exports[`React - stateType: solid > svelte > Javascript Test > html 1`] = `
"\\"use client\\";
import * as React from \\"react\\";
import { useMutable } from \\"react-solid-state\\";

function MyComponent(props) {
  const state = useMutable({ html: \\"<b>bold</b>\\" });

  return <div dangerouslySetInnerHTML={{ __html: state.html }} />;
}

export default MyComponent;
"
`;

exports[`React - stateType: solid > svelte > Javascript Test > ifElse 1`] = `
"\\"use client\\";
import * as React from \\"react\\";
import { useMutable } from \\"react-solid-state\\";

function MyComponent(props) {
  const state = useMutable({
    show: true,
    toggle: function toggle() {
      state.show = !state.show;
    },
  });

  return (
    <>
      {state.show ? (
        <>
          <button onClick={(event) => state.toggle(event)}> Hide </button>
        </>
      ) : (
        <button onClick={(event) => state.toggle(event)}> Show </button>
      )}
    </>
  );
}

export default MyComponent;
"
`;

exports[`React - stateType: solid > svelte > Javascript Test > imports 1`] = `
"\\"use client\\";
import * as React from \\"react\\";
import { useMutable } from \\"react-solid-state\\";
import Button from \\"./Button\\";

function MyComponent(props) {
  const state = useMutable({ disabled: false });

  return (
    <div>
      <Button type=\\"button\\" disabled={state.disabled}>
        <>{props.children}</>
      </Button>
    </div>
  );
}

export default MyComponent;
"
`;

exports[`React - stateType: solid > svelte > Javascript Test > lifecycleHooks 1`] = `
"\\"use client\\";
import * as React from \\"react\\";
import { useEffect } from \\"react\\";

function MyComponent(props) {
  useEffect(() => {
    console.log(\\"onMount\\");
  }, []);

  useEffect(() => {
    console.log(\\"onAfterUpdate\\");
  });

  useEffect(() => {
    return () => {
      console.log(\\"onDestroy\\");
    };
  }, []);

  return <div />;
}

export default MyComponent;
"
`;

exports[`React - stateType: solid > svelte > Javascript Test > reactive 1`] = `
"\\"use client\\";
import * as React from \\"react\\";
import { useMutable } from \\"react-solid-state\\";

function MyComponent(props) {
  const state = useMutable({
    name: \\"Steve\\",
    get lowercaseName() {
      return state.name.toLowerCase();
    },
  });

  return (
    <div>
      <input value={state.name} />
      Lowercase: {state.lowercaseName}
    </div>
  );
}

export default MyComponent;
"
`;

exports[`React - stateType: solid > svelte > Javascript Test > reactiveWithFn 1`] = `
"\\"use client\\";
import * as React from \\"react\\";
import { useEffect } from \\"react\\";
import { useMutable } from \\"react-solid-state\\";

function MyComponent(props) {
  const state = useMutable({
    a: 2,
    b: 5,
    result: null,
    calculateResult: function calculateResult(a_, b_) {
      state.result = a_ * b_;
    },
  });

  useEffect(() => {
    state.calculateResult(state.a, state.b);
  }, [state.a, state.b]);

  return (
    <div>
      <input
        type=\\"number\\"
        onChange={(event) => (state.a = event.target.value)}
        value={state.a}
      />
      <input
        type=\\"number\\"
        onChange={(event) => (state.b = event.target.value)}
        value={state.b}
      />
      Result: {state.result}
    </div>
  );
}

export default MyComponent;
"
`;

exports[`React - stateType: solid > svelte > Javascript Test > slots 1`] = `
"import * as React from \\"react\\";

function MyComponent(props) {
  return (
    <div>
      <>{props.children || \\"default\\"}</>
      <>{props.Test || <div>default</div>}</>
    </div>
  );
}

export default MyComponent;
"
`;

exports[`React - stateType: solid > svelte > Javascript Test > style 1`] = `
"import * as React from \\"react\\";

function MyComponent(props) {
  return (
    <>
      <input className=\\"form-input\\" />
      <style jsx>{\`
        input {
          color: red;
          font-size: 12px;
        }

        .form-input:focus {
          outline: 1px solid blue;
        }
      \`}</style>
    </>
  );
}

export default MyComponent;
"
`;

exports[`React - stateType: solid > svelte > Javascript Test > textExpressions 1`] = `
"\\"use client\\";
import * as React from \\"react\\";
import { useMutable } from \\"react-solid-state\\";

function MyComponent(props) {
  const state = useMutable({ a: 5, b: 12 });

  return (
    <div>
      normal:
      {state.a + state.b}
      <br />
      conditional
      {state.a > 2 ? \\"hello\\" : \\"bye\\"}
    </div>
  );
}

export default MyComponent;
"
`;

exports[`React - stateType: solid > svelte > Typescript Test > basic 1`] = `
"\\"use client\\";
import * as React from \\"react\\";
import { useMutable } from \\"react-solid-state\\";

function MyComponent(props: any) {
  const state = useMutable({ name: \\"Steve\\" });

  return (
    <div>
      <input
        onChange={(event) => (state.name = event.target.value)}
        value={state.name}
      />
      Hello! I can run in React, Vue, Solid, or Liquid!
    </div>
  );
}

export default MyComponent;
"
`;

exports[`React - stateType: solid > svelte > Typescript Test > bindGroup 1`] = `
"\\"use client\\";
import * as React from \\"react\\";
import { useMutable } from \\"react-solid-state\\";

function MyComponent(props: any) {
  const state = useMutable({ tortilla: \\"Plain\\", fillings: [] });

  return (
    <div>
      <input
        type=\\"radio\\"
        value=\\"Plain\\"
        checked={state.tortilla === \\"Plain\\"}
        onChange={(event) => (state.tortilla = event.target.value)}
      />
      <input
        type=\\"radio\\"
        value=\\"Whole wheat\\"
        checked={state.tortilla === \\"Whole wheat\\"}
        onChange={(event) => (state.tortilla = event.target.value)}
      />
      <input
        type=\\"radio\\"
        value=\\"Spinach\\"
        checked={state.tortilla === \\"Spinach\\"}
        onChange={(event) => (state.tortilla = event.target.value)}
      />
      <br />
      <br />
      <input
        type=\\"checkbox\\"
        value=\\"Rice\\"
        checked={state.fillings === \\"Rice\\"}
        onChange={(event) => (state.fillings = event.target.value)}
      />
      <input
        type=\\"checkbox\\"
        value=\\"Beans\\"
        checked={state.fillings === \\"Beans\\"}
        onChange={(event) => (state.fillings = event.target.value)}
      />
      <input
        type=\\"checkbox\\"
        value=\\"Cheese\\"
        checked={state.fillings === \\"Cheese\\"}
        onChange={(event) => (state.fillings = event.target.value)}
      />
      <input
        type=\\"checkbox\\"
        value=\\"Guac (extra)\\"
        checked={state.fillings === \\"Guac (extra)\\"}
        onChange={(event) => (state.fillings = event.target.value)}
      />
      <p>Tortilla: {state.tortilla}</p>
      <p>Fillings: {state.fillings}</p>
    </div>
  );
}

export default MyComponent;
"
`;

exports[`React - stateType: solid > svelte > Typescript Test > bindProperty 1`] = `
"\\"use client\\";
import * as React from \\"react\\";
import { useMutable } from \\"react-solid-state\\";

function MyComponent(props: any) {
  const state = useMutable({ value: \\"hello\\" });

  return <input value={state.value} />;
}

export default MyComponent;
"
`;

exports[`React - stateType: solid > svelte > Typescript Test > classDirective 1`] = `
"\\"use client\\";
import * as React from \\"react\\";
import { useMutable } from \\"react-solid-state\\";

function MyComponent(props: any) {
  const state = useMutable({ focus: true });

  return (
    <input
      className={\`form-input \${props.disabled ? \\"disabled\\" : \\"\\"} \${
        state.focus ? \\"focus\\" : \\"\\"
      }\`}
    />
  );
}

MyComponent.defaultProps = {};

export default MyComponent;
"
`;

exports[`React - stateType: solid > svelte > Typescript Test > context 1`] = `
"'>' expected. (35:13)
  33 | return (
  34 |
> 35 | <'activeTab'.Provider  value={state.activeTab}><div>{state.activeTab}</div></'activeTab'.Provider>
     |             ^
  36 |
  37 |
  38 |"
`;

exports[`React - stateType: solid > svelte > Typescript Test > each 1`] = `
"\\"use client\\";
import * as React from \\"react\\";
import { useMutable } from \\"react-solid-state\\";

function MyComponent(props: any) {
  const state = useMutable({ numbers: [\\"one\\", \\"two\\", \\"three\\"] });

  return (
    <ul>
      {state.numbers?.map((num) => (
        <li>{num}</li>
      ))}
    </ul>
  );
}

export default MyComponent;
"
`;

exports[`React - stateType: solid > svelte > Typescript Test > eventHandlers 1`] = `
"\\"use client\\";
import * as React from \\"react\\";
import { useMutable } from \\"react-solid-state\\";

function MyComponent(props: any) {
  const state = useMutable({
    log: function log(msg = \\"hello\\") {
      console.log(msg);
    },
  });

  return (
    <div>
      <button onClick={(a) => state.log(\\"hi\\")}>Log</button>
      <button onClick={(event) => state.log(event)}>Log</button>
      <button onClick={(event) => state.log(event)}>Log</button>
    </div>
  );
}

export default MyComponent;
"
`;

exports[`React - stateType: solid > svelte > Typescript Test > html 1`] = `
"\\"use client\\";
import * as React from \\"react\\";
import { useMutable } from \\"react-solid-state\\";

function MyComponent(props: any) {
  const state = useMutable({ html: \\"<b>bold</b>\\" });

  return <div dangerouslySetInnerHTML={{ __html: state.html }} />;
}

export default MyComponent;
"
`;

exports[`React - stateType: solid > svelte > Typescript Test > ifElse 1`] = `
"\\"use client\\";
import * as React from \\"react\\";
import { useMutable } from \\"react-solid-state\\";

function MyComponent(props: any) {
  const state = useMutable({
    show: true,
    toggle: function toggle() {
      state.show = !state.show;
    },
  });

  return (
    <>
      {state.show ? (
        <>
          <button onClick={(event) => state.toggle(event)}> Hide </button>
        </>
      ) : (
        <button onClick={(event) => state.toggle(event)}> Show </button>
      )}
    </>
  );
}

export default MyComponent;
"
`;

exports[`React - stateType: solid > svelte > Typescript Test > imports 1`] = `
"\\"use client\\";
import * as React from \\"react\\";
import { useMutable } from \\"react-solid-state\\";
import Button from \\"./Button\\";

function MyComponent(props: any) {
  const state = useMutable({ disabled: false });

  return (
    <div>
      <Button type=\\"button\\" disabled={state.disabled}>
        <>{props.children}</>
      </Button>
    </div>
  );
}

export default MyComponent;
"
`;

exports[`React - stateType: solid > svelte > Typescript Test > lifecycleHooks 1`] = `
"\\"use client\\";
import * as React from \\"react\\";
import { useEffect } from \\"react\\";

function MyComponent(props: any) {
  useEffect(() => {
    console.log(\\"onMount\\");
  }, []);

  useEffect(() => {
    console.log(\\"onAfterUpdate\\");
  });

  useEffect(() => {
    return () => {
      console.log(\\"onDestroy\\");
    };
  }, []);

  return <div />;
}

export default MyComponent;
"
`;

exports[`React - stateType: solid > svelte > Typescript Test > reactive 1`] = `
"\\"use client\\";
import * as React from \\"react\\";
import { useMutable } from \\"react-solid-state\\";

function MyComponent(props: any) {
  const state = useMutable({
    name: \\"Steve\\",
    get lowercaseName() {
      return state.name.toLowerCase();
    },
  });

  return (
    <div>
      <input value={state.name} />
      Lowercase: {state.lowercaseName}
    </div>
  );
}

export default MyComponent;
"
`;

exports[`React - stateType: solid > svelte > Typescript Test > reactiveWithFn 1`] = `
"\\"use client\\";
import * as React from \\"react\\";
import { useEffect } from \\"react\\";
import { useMutable } from \\"react-solid-state\\";

function MyComponent(props: any) {
  const state = useMutable({
    a: 2,
    b: 5,
    result: null,
    calculateResult: function calculateResult(a_, b_) {
      state.result = a_ * b_;
    },
  });

  useEffect(() => {
    state.calculateResult(state.a, state.b);
  }, [state.a, state.b]);

  return (
    <div>
      <input
        type=\\"number\\"
        onChange={(event) => (state.a = event.target.value)}
        value={state.a}
      />
      <input
        type=\\"number\\"
        onChange={(event) => (state.b = event.target.value)}
        value={state.b}
      />
      Result: {state.result}
    </div>
  );
}

export default MyComponent;
"
`;

exports[`React - stateType: solid > svelte > Typescript Test > slots 1`] = `
"import * as React from \\"react\\";

function MyComponent(props: any) {
  return (
    <div>
      <>{props.children || \\"default\\"}</>
      <>{props.Test || <div>default</div>}</>
    </div>
  );
}

export default MyComponent;
"
`;

exports[`React - stateType: solid > svelte > Typescript Test > style 1`] = `
"import * as React from \\"react\\";

function MyComponent(props: any) {
  return (
    <>
      <input className=\\"form-input\\" />
      <style jsx>{\`
        input {
          color: red;
          font-size: 12px;
        }

        .form-input:focus {
          outline: 1px solid blue;
        }
      \`}</style>
    </>
  );
}

export default MyComponent;
"
`;

exports[`React - stateType: solid > svelte > Typescript Test > textExpressions 1`] = `
"\\"use client\\";
import * as React from \\"react\\";
import { useMutable } from \\"react-solid-state\\";

function MyComponent(props: any) {
  const state = useMutable({ a: 5, b: 12 });

  return (
    <div>
      normal:
      {state.a + state.b}
      <br />
      conditional
      {state.a > 2 ? \\"hello\\" : \\"bye\\"}
    </div>
  );
}

export default MyComponent;
"
`;
