// Vitest Snapshot v1

exports[`Lit > jsx > Javascript Test > AdvancedRef 1`] = `
"import { LitElement, html, css } from \\"lit\\";
import { customElement, property, state, query } from \\"lit/decorators.js\\";

export interface Props {
  showInput: boolean;
}

@customElement(\\"my-basic-ref-component\\")
export default class MyBasicRefComponent extends LitElement {
  createRenderRoot() {
    return this;
  }

  @query('[ref=\\"inputRef\\"]')
  inputRef!: HTMLElement;

  @query('[ref=\\"inputNoArgRef\\"]')
  inputNoArgRef!: HTMLElement;

  @property() showInput: any;

  @state() name = \\"PatrickJS\\";

  onBlur = function onBlur() {
    // Maintain focus
    inputRef.focus();
  };
  lowerCaseName = function lowerCaseName() {
    return this.name.toLowerCase();
  };

  updated() {
    console.log(\\"Received an update\\");
  }

  render() {
    return html\`
         <style>.input {
 color: red;
}
</style>
         <div>
         <div></div>
         \${
           this.showInput
             ? html\`<my-fragment
           ><div></div>
           <input @blur=\${(event) => this.onBlur()} @change=\${(event) =>
                 (this.name = event.target.value)} />
           <div></div>
           <label><div></div></label>
           <div></div>
           <select name=\\"cars\\">
             <div></div>
             <option><div></div></option>
             <div></div>
             <option><div></div></option>
             <div></div>
           </select>
           <div></div></my-fragment
         >\`
             : null
         }
         <div></div>
         <div></div>
         <div></div>
       </div>

       \`;
  }
}
"
`;

exports[`Lit > jsx > Javascript Test > Basic 1`] = `
"export const DEFAULT_VALUES = {
  name: \\"Steve\\",
};

import { LitElement, html, css } from \\"lit\\";
import { customElement, property, state, query } from \\"lit/decorators.js\\";

export interface MyBasicComponentProps {
  id: string;
}

@customElement(\\"my-basic-component\\")
export default class MyBasicComponent extends LitElement {
  createRenderRoot() {
    return this;
  }

  @state() name = \\"Steve\\";
  @state() age = 1;
  @state() sports = [\\"\\"];

  underscore_fn_name() {
    return \\"bar\\";
  }

  render() {
    return html\`
        <style>.div {
padding: 10px;
}
</style>
        <div>
        <div></div>
        <input @change=\${(myEvent) => (this.name = myEvent.target.value)} />
        <div></div>
      </div>

      \`;
  }
}
"
`;

exports[`Lit > jsx > Javascript Test > Basic 2`] = `
"import { LitElement, html, css } from \\"lit\\";
import { customElement, property, state, query } from \\"lit/decorators.js\\";

@customElement(\\"my-basic-for-show-component\\")
export default class MyBasicForShowComponent extends LitElement {
  createRenderRoot() {
    return this;
  }

  @state() name = \\"PatrickJS\\";
  @state() names = [\\"Steve\\", \\"PatrickJS\\"];

  render() {
    return html\`
      
      <div>
      <div></div>
      \${this.names?.map(
        (person, index) =>
          html\`\${
            person === this.name
              ? html\`
      <div></div>
      <input @change=\${(event) => {
        this.name = event.target.value + \\" and \\" + person;
      }} />
      <div></div>
      <div></div>
      <div></div>
      \`
              : null
          }\`
      )}
      <div></div>
    </div>

    \`;
  }
}
"
`;

exports[`Lit > jsx > Javascript Test > Basic Context 1`] = `
"import { Injector, createInjector, MyService } from \\"@dummy/injection-js\\";

import { LitElement, html, css } from \\"lit\\";
import { customElement, property, state, query } from \\"lit/decorators.js\\";

@customElement(\\"my-basic-component\\")
export default class MyBasicComponent extends LitElement {
  createRenderRoot() {
    return this;
  }

  @state() name = \\"PatrickJS\\";

  onChange = function onChange() {
    const change = myService.method(\\"change\\");
    console.log(change);
  };

  connectedCallback() {
    const bye = myService.method(\\"hi\\");
    console.log(bye);
  }

  render() {
    return html\`
        
        <div>
        <div></div>
        <div></div>
        <div></div>
        <input @change=\${(event) => this.onChange} />
        <div></div>
      </div>

      \`;
  }
}
"
`;

exports[`Lit > jsx > Javascript Test > Basic OnMount Update 1`] = `
"import { LitElement, html, css } from \\"lit\\";
import { customElement, property, state, query } from \\"lit/decorators.js\\";

export interface Props {
  hi: string;
  bye: string;
}

@customElement(\\"my-basic-on-mount-update-component\\")
export default class MyBasicOnMountUpdateComponent extends LitElement {
  createRenderRoot() {
    return this;
  }

  @property() hi: any;
  @property() bye: any;

  @state() name = \\"PatrickJS\\";
  @state() names = [\\"Steve\\", \\"PatrickJS\\"];

  connectedCallback() {
    this.name = \\"PatrickJS onMount\\" + this.bye;
  }

  render() {
    return html\`
        
        <div>
        <div></div>
        <div></div>
      </div>

      \`;
  }
}
"
`;

exports[`Lit > jsx > Javascript Test > Basic Outputs 1`] = `
"import { LitElement, html, css } from \\"lit\\";
import { customElement, property, state, query } from \\"lit/decorators.js\\";

@customElement(\\"my-basic-outputs-component\\")
export default class MyBasicOutputsComponent extends LitElement {
  createRenderRoot() {
    return this;
  }

  @property() onMessage: any;
  @property() onEvent: any;
  @property() message: any;

  @state() name = \\"PatrickJS\\";

  connectedCallback() {
    this.onMessage(this.name);
    this.onEvent(this.message);
  }

  render() {
    return html\`
      
      <div></div>

    \`;
  }
}
"
`;

exports[`Lit > jsx > Javascript Test > Basic Outputs Meta 1`] = `
"import { LitElement, html, css } from \\"lit\\";
import { customElement, property, state, query } from \\"lit/decorators.js\\";

@customElement(\\"my-basic-outputs-component\\")
export default class MyBasicOutputsComponent extends LitElement {
  createRenderRoot() {
    return this;
  }

  @property() onMessage: any;
  @property() onEvent: any;
  @property() message: any;

  @state() name = \\"PatrickJS\\";

  connectedCallback() {
    this.onMessage(this.name);
    this.onEvent(this.message);
  }

  render() {
    return html\`
      
      <div></div>

    \`;
  }
}
"
`;

exports[`Lit > jsx > Javascript Test > BasicAttribute 1`] = `
"import { LitElement, html, css } from \\"lit\\";
import { customElement, property, state, query } from \\"lit/decorators.js\\";

@customElement(\\"my-component\\")
export default class MyComponent extends LitElement {
  createRenderRoot() {
    return this;
  }

  render() {
    return html\`
      
      <input />

    \`;
  }
}
"
`;

exports[`Lit > jsx > Javascript Test > BasicBooleanAttribute 1`] = `
"import MyBooleanAttributeComponent from \\"./basic-boolean-attribute-component.raw\\";

import { LitElement, html, css } from \\"lit\\";
import { customElement, property, state, query } from \\"lit/decorators.js\\";

type Props = {
  children: any;
  type: string;
};

@customElement(\\"my-boolean-attribute\\")
export default class MyBooleanAttribute extends LitElement {
  createRenderRoot() {
    return this;
  }

  @property() children: any;
  @property() type: any;

  render() {
    return html\`
        
        <div>
        <div></div>
        <div></div>
        <div></div>
        <div></div>
        <div></div>
        <my-boolean-attribute-component
          .toggle=\\"\${true}\\"
        ></my-boolean-attribute-component>
        <div></div>
        <my-boolean-attribute-component
          .toggle=\\"\${true}\\"
        ></my-boolean-attribute-component>
        <div></div>
        <my-boolean-attribute-component
          .list=\\"\${null}\\"
        ></my-boolean-attribute-component>
        <div></div>
      </div>

      \`;
  }
}
"
`;

exports[`Lit > jsx > Javascript Test > BasicChildComponent 1`] = `
"import MyBasicComponent from \\"./basic.raw\\";
import MyBasicOnMountUpdateComponent from \\"./basic-onMount-update.raw\\";

import { LitElement, html, css } from \\"lit\\";
import { customElement, property, state, query } from \\"lit/decorators.js\\";

@customElement(\\"my-basic-child-component\\")
export default class MyBasicChildComponent extends LitElement {
  createRenderRoot() {
    return this;
  }

  @state() name = \\"Steve\\";
  @state() dev = \\"PatrickJS\\";

  render() {
    return html\`
      
      <div>
      <div></div>
      <my-basic-component .id=\\"\${this.dev}\\"></my-basic-component>
      <div></div>
      <div>
        <div></div>
        <my-basic-on-mount-update-component
          .hi=\\"\${this.name}\\"
          .bye=\\"\${this.dev}\\"
        ></my-basic-on-mount-update-component>
        <div></div>
      </div>
      <div></div>
    </div>

    \`;
  }
}
"
`;

exports[`Lit > jsx > Javascript Test > BasicFor 1`] = `
"import { LitElement, html, css } from \\"lit\\";
import { customElement, property, state, query } from \\"lit/decorators.js\\";

@customElement(\\"my-basic-for-component\\")
export default class MyBasicForComponent extends LitElement {
  createRenderRoot() {
    return this;
  }

  @state() name = \\"PatrickJS\\";
  @state() names = [\\"Steve\\", \\"PatrickJS\\"];

  connectedCallback() {
    console.log(\\"onMount code\\");
  }

  render() {
    return html\`
      
      <div>
      <div></div>
      \${this.names?.map(
        (person, index) => html\`<my-fragment
        ><div></div>
        <input @change=\${(event) => {
          this.name = event.target.value + \\" and \\" + person;
        }} />
        <div></div>
        <div></div>
        <div></div></my-fragment
      >\`
      )}
      <div></div>
    </div>

    \`;
  }
}
"
`;

exports[`Lit > jsx > Javascript Test > BasicRef 1`] = `
"import { LitElement, html, css } from \\"lit\\";
import { customElement, property, state, query } from \\"lit/decorators.js\\";

export interface Props {
  showInput: boolean;
}

@customElement(\\"my-basic-ref-component\\")
export default class MyBasicRefComponent extends LitElement {
  createRenderRoot() {
    return this;
  }

  @query('[ref=\\"inputRef\\"]')
  inputRef!: HTMLElement;

  @query('[ref=\\"inputNoArgRef\\"]')
  inputNoArgRef!: HTMLElement;

  @property() showInput: any;

  @state() name = \\"PatrickJS\\";

  onBlur = function onBlur() {
    // Maintain focus
    inputRef.focus();
  };
  lowerCaseName = function lowerCaseName() {
    return this.name.toLowerCase();
  };

  render() {
    return html\`
         <style>.input {
 color: red;
}
</style>
         <div>
         <div></div>
         \${
           this.showInput
             ? html\`<my-fragment
           ><div></div>
           <input @blur=\${(event) => this.onBlur()} @change=\${(event) =>
                 (this.name = event.target.value)} />
           <div></div>
           <label><div></div></label>
           <div></div>
           <select name=\\"cars\\">
             <div></div>
             <option><div></div></option>
             <div></div>
             <option><div></div></option>
             <div></div>
           </select>
           <div></div></my-fragment
         >\`
             : null
         }
         <div></div>
         <div></div>
         <div></div>
       </div>

       \`;
  }
}
"
`;

exports[`Lit > jsx > Javascript Test > BasicRefAssignment 1`] = `
"import { LitElement, html, css } from \\"lit\\";
import { customElement, property, state, query } from \\"lit/decorators.js\\";

export interface Props {
  showInput: boolean;
}

@customElement(\\"my-basic-ref-assignment-component\\")
export default class MyBasicRefAssignmentComponent extends LitElement {
  createRenderRoot() {
    return this;
  }

  handlerClick = function handlerClick(event) {
    event.preventDefault();
    console.log(\\"current value\\", holdValueRef);
    holdValueRef = holdValueRef + \\"JS\\";
  };

  render() {
    return html\`
        
        <div ><div ></div>
      <button  @click=\${(evt) => this.handlerClick(evt)} ><div ></div></button>
      <div ></div></div>
      \`;
  }
}
"
`;

exports[`Lit > jsx > Javascript Test > BasicRefPrevious 1`] = `
"export function usePrevious<T>(value: T) {
  // The ref object is a generic container whose current property is mutable ...
  // ... and can hold any value, similar to an instance property on a class
  let ref = useRef<T>(null); // Store current value in ref

  onUpdate(() => {
    ref = value;
  }, [value]); // Only re-run if value changes
  // Return previous value (happens before update in useEffect above)

  return ref;
}

import { LitElement, html, css } from \\"lit\\";
import { customElement, property, state, query } from \\"lit/decorators.js\\";

export interface Props {
  showInput: boolean;
}

@customElement(\\"my-previous-component\\")
export default class MyPreviousComponent extends LitElement {
  createRenderRoot() {
    return this;
  }

  @state() count = 0;

  updated() {
    prevCount = this.count;
  }

  render() {
    return html\`
        
        <div ><div ></div>
      <h1 ><div ></div>
      <div ></div>
      <div ></div>
      <div ></div>
      <div ></div></h1>
      <div ></div>
      <button  @click=\${(event) => (this.count += 1)} ><div ></div></button>
      <div ></div></div>
      \`;
  }
}
"
`;

exports[`Lit > jsx > Javascript Test > Button 1`] = `
"import { LitElement, html, css } from \\"lit\\";
import { customElement, property, state, query } from \\"lit/decorators.js\\";

export interface ButtonProps {
  attributes?: any;
  text?: string;
  link?: string;
  openLinkInNewTab?: boolean;
}

@customElement(\\"my-button\\")
export default class Button extends LitElement {
  createRenderRoot() {
    return this;
  }

  @property() link: any;
  @property() attributes: any;
  @property() openLinkInNewTab: any;
  @property() text: any;

  render() {
    return html\`
        
        <div>
        <div></div>
        \${
          this.link
            ? html\`
        <div></div>
        <a
          ><div></div>
          <div></div>
          <div></div
        ></a>
        <div></div>
        \`
            : null
        }
        <div></div>
        \${
          !this.link
            ? html\`
        <div></div>
        <button>
          <div></div>
          <div></div>
          <div></div>
        </button>
        <div></div>
        \`
            : null
        }
        <div></div>
      </div>

      \`;
  }
}
"
`;

exports[`Lit > jsx > Javascript Test > Columns 1`] = `
"import { LitElement, html, css } from \\"lit\\";
import { customElement, property, state, query } from \\"lit/decorators.js\\";

type Column = {
  content: any; // TODO: Implement this when support for dynamic CSS lands

  width?: number;
};
export interface ColumnProps {
  columns?: Column[]; // TODO: Implement this when support for dynamic CSS lands

  space?: number; // TODO: Implement this when support for dynamic CSS lands

  stackColumnsAt?: \\"tablet\\" | \\"mobile\\" | \\"never\\"; // TODO: Implement this when support for dynamic CSS lands

  reverseColumnsWhenStacked?: boolean;
}

@customElement(\\"my-column\\")
export default class Column extends LitElement {
  createRenderRoot() {
    return this;
  }

  @property() columns: any;
  @property() space: any;

  getColumns() {
    return this.columns || [];
  }
  getGutterSize() {
    return typeof this.space === \\"number\\" ? this.space || 0 : 20;
  }
  getWidth(index) {
    const columns = this.getColumns();
    return (columns[index] && columns[index].width) || 100 / columns.length;
  }
  getColumnCssWidth(index) {
    const columns = this.getColumns();
    const gutterSize = this.getGutterSize();
    const subtractWidth = (gutterSize * (columns.length - 1)) / columns.length;
    return \`calc(\${this.getWidth(index)}% - \${subtractWidth}px)\`;
  }

  render() {
    return html\`
         <style>.div {
 display: flex;
 flex-direction: column;
 align-items: stretch;
 line-height: normal;
}
@media (max-width: 999px) {
 .div {
   flex-direction: row;
 }
}
@media (max-width: 639px) {
 .div {
   flex-direction: row-reverse;
 }
}
.div-2 {
 flex-grow: 1;
}
</style>
         <div>
         <div></div>
         \${this.columns?.map(
           (column, index) => html\`
         <div>
           <div></div>
           <div></div>
           <div></div>
           <div></div>
           <div></div>
         </div>
         \`
         )}
         <div></div>
       </div>

       \`;
  }
}
"
`;

exports[`Lit > jsx > Javascript Test > ContentSlotHtml 1`] = `
"import { LitElement, html, css } from \\"lit\\";
import { customElement, property, state, query } from \\"lit/decorators.js\\";

type Props = {
  [key: string]: string | JSX.Element;
  slotTesting: JSX.Element;
};

@customElement(\\"content-slot-code\\")
export default class ContentSlotCode extends LitElement {
  createRenderRoot() {
    return this;
  }

  @property() slotTesting: any;

  render() {
    return html\`
        
        <div>
        <div></div>
        <my-slot .name=\\"\${this.slotTesting}\\"></my-slot>
        <div></div>
        <div>
          <div></div>
          <hr />
          <div></div>
        </div>
        <div></div>
        <div>
          <div></div>
          <my-slot></my-slot>
          <div></div>
        </div>
        <div></div>
      </div>

      \`;
  }
}
"
`;

exports[`Lit > jsx > Javascript Test > ContentSlotJSX 1`] = `
"import { LitElement, html, css } from \\"lit\\";
import { customElement, property, state, query } from \\"lit/decorators.js\\";

type Props = {
  [key: string]: string | JSX.Element;
};

@customElement(\\"content-slot-jsx-code\\")
export default class ContentSlotJsxCode extends LitElement {
  createRenderRoot() {
    return this;
  }

  @property() slotContent: any;
  @property() children: any;
  @property() slotReference: any;
  @property() attributes: any;
  @property() content: any;

  @state() name = \\"king\\";
  @state() showContent = false;

  get cls() {
    return this.slotContent && this.children ? \`\${this.name}-content\` : \\"\\";
  }
  show() {
    this.slotContent ? 1 : \\"\\";
  }

  render() {
    return html\`
         
         \${
           this.slotReference
             ? html\`<div ></div>
       <div  .name=\${this.slotContent ? \\"name1\\" : \\"name2\\"}  @click=\${(event) =>
                 this.show()} ><div ></div>
       \${
         this.showContent && this.slotContent
           ? html\`<div ></div>
       <my-slot  name=\\"content\\" ><div ></div></my-slot>
       <div ></div>\`
           : null
       }
       <div ></div>
       <div ><div ></div>
       <hr  />
       <div ></div></div>
       <div ></div>
       <div ><div ></div></div>
       <div ></div></div>
       <div ></div>\`
             : null
         }
       \`;
  }
}
"
`;

exports[`Lit > jsx > Javascript Test > CustomCode 1`] = `
"import { LitElement, html, css } from \\"lit\\";
import { customElement, property, state, query } from \\"lit/decorators.js\\";

export interface CustomCodeProps {
  code: string;
  replaceNodes?: boolean;
}

@customElement(\\"custom-code\\")
export default class CustomCode extends LitElement {
  createRenderRoot() {
    return this;
  }

  @query('[ref=\\"elem\\"]')
  elem!: HTMLElement;

  @property() replaceNodes: any;
  @property() code: any;

  @state() scriptsInserted = [];
  @state() scriptsRun = [];

  findAndRunScripts() {
    // TODO: Move this function to standalone one in '@builder.io/utils'
    if (elem && typeof window !== \\"undefined\\") {
      /** @type {HTMLScriptElement[]} */
      const scripts = elem.getElementsByTagName(\\"script\\");

      for (let i = 0; i < scripts.length; i++) {
        const script = scripts[i];

        if (script.src) {
          if (this.scriptsInserted.includes(script.src)) {
            continue;
          }

          this.scriptsInserted.push(script.src);
          const newScript = document.createElement(\\"script\\");
          newScript.async = true;
          newScript.src = script.src;
          document.head.appendChild(newScript);
        } else if (
          !script.type ||
          [
            \\"text/javascript\\",
            \\"application/javascript\\",
            \\"application/ecmascript\\",
          ].includes(script.type)
        ) {
          if (this.scriptsRun.includes(script.innerText)) {
            continue;
          }

          try {
            this.scriptsRun.push(script.innerText);
            new Function(script.innerText)();
          } catch (error) {
            console.warn(\\"\`CustomCode\`: Error running script:\\", error);
          }
        }
      }
    }
  }

  connectedCallback() {
    this.findAndRunScripts();
  }

  render() {
    return html\`
        
        <div .innerhtml=\\"\${this.code}\\"></div>

      \`;
  }
}
"
`;

exports[`Lit > jsx > Javascript Test > Embed 1`] = `
"import { LitElement, html, css } from \\"lit\\";
import { customElement, property, state, query } from \\"lit/decorators.js\\";

export interface CustomCodeProps {
  code: string;
  replaceNodes?: boolean;
}

@customElement(\\"custom-code\\")
export default class CustomCode extends LitElement {
  createRenderRoot() {
    return this;
  }

  @query('[ref=\\"elem\\"]')
  elem!: HTMLElement;

  @property() replaceNodes: any;
  @property() code: any;

  @state() scriptsInserted = [];
  @state() scriptsRun = [];

  findAndRunScripts() {
    // TODO: Move this function to standalone one in '@builder.io/utils'
    if (elem && typeof window !== \\"undefined\\") {
      /** @type {HTMLScriptElement[]} */
      const scripts = elem.getElementsByTagName(\\"script\\");

      for (let i = 0; i < scripts.length; i++) {
        const script = scripts[i];

        if (script.src) {
          if (this.scriptsInserted.includes(script.src)) {
            continue;
          }

          this.scriptsInserted.push(script.src);
          const newScript = document.createElement(\\"script\\");
          newScript.async = true;
          newScript.src = script.src;
          document.head.appendChild(newScript);
        } else if (
          !script.type ||
          [
            \\"text/javascript\\",
            \\"application/javascript\\",
            \\"application/ecmascript\\",
          ].includes(script.type)
        ) {
          if (this.scriptsRun.includes(script.innerText)) {
            continue;
          }

          try {
            this.scriptsRun.push(script.innerText);
            new Function(script.innerText)();
          } catch (error) {
            console.warn(\\"\`CustomCode\`: Error running script:\\", error);
          }
        }
      }
    }
  }

  connectedCallback() {
    this.findAndRunScripts();
  }

  render() {
    return html\`
        
        <div .innerhtml=\\"\${this.code}\\"></div>

      \`;
  }
}
"
`;

exports[`Lit > jsx > Javascript Test > Form 1`] = `
"import { BuilderBlock as BuilderBlockComponent } from \\"@fake\\";
import { Builder, builder } from \\"@builder.io/sdk\\";
import { BuilderBlocks } from \\"@fake\\";
import { set } from \\"@fake\\";
import { get } from \\"@fake\\";

import { LitElement, html, css } from \\"lit\\";
import { customElement, property, state, query } from \\"lit/decorators.js\\";

export interface FormProps {
  attributes?: any;
  name?: string;
  action?: string;
  validate?: boolean;
  method?: string;
  builderBlock?: BuilderElement;
  sendSubmissionsTo?: string;
  sendSubmissionsToEmail?: string;
  sendWithJs?: boolean;
  contentType?: string;
  customHeaders?: {
    [key: string]: string;
  };
  successUrl?: string;
  previewState?: FormState;
  successMessage?: BuilderElement[];
  errorMessage?: BuilderElement[];
  sendingMessage?: BuilderElement[];
  resetFormOnSubmit?: boolean;
  errorMessagePath?: string;
}
export type FormState = \\"unsubmitted\\" | \\"sending\\" | \\"success\\" | \\"error\\";

@customElement(\\"form-component\\")
export default class FormComponent extends LitElement {
  createRenderRoot() {
    return this;
  }

  @query('[ref=\\"formRef\\"]')
  formRef!: HTMLElement;

  @property() previewState: any;
  @property() sendWithJs: any;
  @property() sendSubmissionsTo: any;
  @property() action: any;
  @property() customHeaders: any;
  @property() contentType: any;
  @property() sendSubmissionsToEmail: any;
  @property() name: any;
  @property() method: any;
  @property() errorMessagePath: any;
  @property() resetFormOnSubmit: any;
  @property() successUrl: any;
  @property() validate: any;
  @property() attributes: any;
  @property() builderBlock: any;
  @property() errorMessage: any;
  @property() sendingMessage: any;
  @property() successMessage: any;

  @state() formState = \\"unsubmitted\\";
  @state() responseData = null;
  @state() formErrorMessage = \\"\\";

  get submissionState() {
    return (Builder.isEditing && this.previewState) || this.formState;
  }
  onSubmit(event) {
    const sendWithJs = this.sendWithJs || this.sendSubmissionsTo === \\"email\\";

    if (this.sendSubmissionsTo === \\"zapier\\") {
      event.preventDefault();
    } else if (sendWithJs) {
      if (!(this.action || this.sendSubmissionsTo === \\"email\\")) {
        event.preventDefault();
        return;
      }

      event.preventDefault();
      const el = event.currentTarget;
      const headers = this.customHeaders || {};
      let body;
      const formData = new FormData(el); // TODO: maybe support null

      const formPairs = Array.from(
        event.currentTarget.querySelectorAll(\\"input,select,textarea\\")
      )
        .filter((el) => !!el.name)
        .map((el) => {
          let value;
          const key = el.name;

          if (el instanceof HTMLInputElement) {
            if (el.type === \\"radio\\") {
              if (el.checked) {
                value = el.name;
                return {
                  key,
                  value,
                };
              }
            } else if (el.type === \\"checkbox\\") {
              value = el.checked;
            } else if (el.type === \\"number\\" || el.type === \\"range\\") {
              const num = el.valueAsNumber;

              if (!isNaN(num)) {
                value = num;
              }
            } else if (el.type === \\"file\\") {
              // TODO: one vs multiple files
              value = el.files;
            } else {
              value = el.value;
            }
          } else {
            value = el.value;
          }

          return {
            key,
            value,
          };
        });
      let contentType = this.contentType;

      if (this.sendSubmissionsTo === \\"email\\") {
        contentType = \\"multipart/form-data\\";
      }

      Array.from(formPairs).forEach(({ value }) => {
        if (
          value instanceof File ||
          (Array.isArray(value) && value[0] instanceof File) ||
          value instanceof FileList
        ) {
          contentType = \\"multipart/form-data\\";
        }
      }); // TODO: send as urlEncoded or multipart by default
      // because of ease of use and reliability in browser API
      // for encoding the form?

      if (contentType !== \\"application/json\\") {
        body = formData;
      } else {
        // Json
        const json = {};
        Array.from(formPairs).forEach(({ value, key }) => {
          set(json, key, value);
        });
        body = JSON.stringify(json);
      }

      if (contentType && contentType !== \\"multipart/form-data\\") {
        if (
          /* Zapier doesn't allow content-type header to be sent from browsers */
          !(sendWithJs && this.action?.includes(\\"zapier.com\\"))
        ) {
          headers[\\"content-type\\"] = contentType;
        }
      }

      const presubmitEvent = new CustomEvent(\\"presubmit\\", {
        detail: {
          body,
        },
      });

      if (formRef) {
        formRef.dispatchEvent(presubmitEvent);

        if (presubmitEvent.defaultPrevented) {
          return;
        }
      }

      this.formState = \\"sending\\";
      const formUrl = \`\${
        builder.env === \\"dev\\" ? \\"http://localhost:5000\\" : \\"https://builder.io\\"
      }/api/v1/form-submit?apiKey=\${builder.apiKey}&to=\${btoa(
        this.sendSubmissionsToEmail || \\"\\"
      )}&name=\${encodeURIComponent(this.name || \\"\\")}\`;
      fetch(
        this.sendSubmissionsTo === \\"email\\" ? formUrl : this.action,
        /* TODO: throw error if no action URL */
        {
          body,
          headers,
          method: this.method || \\"post\\",
        }
      ).then(
        async (res) => {
          let body;
          const contentType = res.headers.get(\\"content-type\\");

          if (contentType && contentType.indexOf(\\"application/json\\") !== -1) {
            body = await res.json();
          } else {
            body = await res.text();
          }

          if (!res.ok && this.errorMessagePath) {
            /* TODO: allow supplying an error formatter function */
            let message = get(body, this.errorMessagePath);

            if (message) {
              if (typeof message !== \\"string\\") {
                /* TODO: ideally convert json to yaml so it woul dbe like
            error: - email has been taken */
                message = JSON.stringify(message);
              }

              this.formErrorMessage = message;
            }
          }

          this.responseData = body;
          this.formState = res.ok ? \\"success\\" : \\"error\\";

          if (res.ok) {
            const submitSuccessEvent = new CustomEvent(\\"submit:success\\", {
              detail: {
                res,
                body,
              },
            });

            if (formRef) {
              formRef.dispatchEvent(submitSuccessEvent);

              if (submitSuccessEvent.defaultPrevented) {
                return;
              }
              /* TODO: option to turn this on/off? */

              if (this.resetFormOnSubmit !== false) {
                formRef.reset();
              }
            }
            /* TODO: client side route event first that can be preventDefaulted */

            if (this.successUrl) {
              if (formRef) {
                const event = new CustomEvent(\\"route\\", {
                  detail: {
                    url: this.successUrl,
                  },
                });
                formRef.dispatchEvent(event);

                if (!event.defaultPrevented) {
                  location.href = this.successUrl;
                }
              } else {
                location.href = this.successUrl;
              }
            }
          }
        },
        (err) => {
          const submitErrorEvent = new CustomEvent(\\"submit:error\\", {
            detail: {
              error: err,
            },
          });

          if (formRef) {
            formRef.dispatchEvent(submitErrorEvent);

            if (submitErrorEvent.defaultPrevented) {
              return;
            }
          }

          this.responseData = err;
          this.formState = \\"error\\";
        }
      );
    }
  }

  render() {
    return html\`
         <style>.pre {
 padding: 10px;
 color: red;
 text-align: center;
}
</style>
         <form  .name=\${this.name}  @submit=\${(event) =>
      this.onSubmit(event)} ><div ></div>
       \${
         this.builderBlock && this.builderBlock.children
           ? html\`<div ></div>
       \${this.builderBlock?.children?.map(
         (block, index) =>
           html\`<builder-block-component  .key=\${block.id}  .block=\${block}  .index=\${index} ></builder-block-component>\`
       )}
       <div ></div>\`
           : null
       }
       <div ></div>
       \${
         this.submissionState === \\"error\\"
           ? html\`<div ></div>
       <builder-blocks  dataPath=\\"errorMessage\\"  .blocks=\${this.errorMessage} ></builder-blocks>
       <div ></div>\`
           : null
       }
       <div ></div>
       \${
         this.submissionState === \\"sending\\"
           ? html\`<div ></div>
       <builder-blocks  dataPath=\\"sendingMessage\\"  .blocks=\${this.sendingMessage} ></builder-blocks>
       <div ></div>\`
           : null
       }
       <div ></div>
       \${
         this.submissionState === \\"error\\" && this.responseData
           ? html\`<div ></div>
       <pre ><div ></div>
       <div ></div>
       <div ></div></pre>
       <div ></div>\`
           : null
       }
       <div ></div>
       \${
         this.submissionState === \\"success\\"
           ? html\`<div ></div>
       <builder-blocks  dataPath=\\"successMessage\\"  .blocks=\${this.successMessage} ></builder-blocks>
       <div ></div>\`
           : null
       }
       <div ></div></form>
       \`;
  }
}
"
`;

exports[`Lit > jsx > Javascript Test > Image 1`] = `
"import { LitElement, html, css } from \\"lit\\";
import { customElement, property, state, query } from \\"lit/decorators.js\\";

// TODO: AMP Support?
export interface ImageProps {
  _class?: string;
  image: string;
  sizes?: string;
  lazy?: boolean;
  height?: number;
  width?: number;
  altText?: string;
  backgroundSize?: string;
  backgroundPosition?: string; // TODO: Support generating Builder.io and or Shopify \`srcset\`s when needed

  srcset?: string; // TODO: Implement support for custom aspect ratios

  aspectRatio?: number; // TODO: This might not work as expected in terms of positioning

  children?: any;
}

@customElement(\\"my-image\\")
export default class Image extends LitElement {
  createRenderRoot() {
    return this;
  }

  @query('[ref=\\"pictureRef\\"]')
  pictureRef!: HTMLElement;

  @property() lazy: any;
  @property() altText: any;
  @property() _class: any;
  @property() image: any;
  @property() srcset: any;
  @property() sizes: any;
  @property() children: any;

  @state() scrollListener = null;
  @state() imageLoaded = false;
  @state() load = false;

  setLoaded() {
    this.imageLoaded = true;
  }
  useLazyLoading() {
    // TODO: Add more checks here, like testing for real web browsers
    return !!this.lazy && isBrowser();
  }
  isBrowser = function isBrowser() {
    return (
      typeof window !== \\"undefined\\" && window.navigator.product != \\"ReactNative\\"
    );
  };

  connectedCallback() {
    if (this.useLazyLoading()) {
      // throttled scroll capture listener
      const listener = () => {
        if (pictureRef) {
          const rect = pictureRef.getBoundingClientRect();
          const buffer = window.innerHeight / 2;

          if (rect.top < window.innerHeight + buffer) {
            setLoad(true);
            this.scrollListener = null;
            window.removeEventListener(\\"scroll\\", listener);
          }
        }
      };

      this.scrollListener = listener;
      window.addEventListener(\\"scroll\\", listener, {
        capture: true,
        passive: true,
      });
      listener();
    }
  }
  disconnectedCallback() {
    if (this.scrollListener) {
      window.removeEventListener(\\"scroll\\", this.scrollListener);
    }
  }

  render() {
    return html\`
         <style>.img {
 opacity: 1;
 transition: opacity 0.2s ease-in-out;
 object-fit: cover;
 object-position: center;
}
</style>
         <div>
         <div></div>
         <picture
           ><div></div>
           \${
             !this.useLazyLoading() || this.load
               ? html\`
           <div></div>
           <img aria-role=\${this.altText ? \\"presentation\\" : undefined} @load=\${(
                   event
                 ) => this.setLoaded()} />
           <div></div>
           \`
               : null
           }
           <div></div>
           <source />
           <div></div
         ></picture>
         <div></div>
         <div></div>
         <div></div>
       </div>

       \`;
  }
}
"
`;

exports[`Lit > jsx > Javascript Test > Image State 1`] = `
"import { LitElement, html, css } from \\"lit\\";
import { customElement, property, state, query } from \\"lit/decorators.js\\";

@customElement(\\"img-state-component\\")
export default class ImgStateComponent extends LitElement {
  createRenderRoot() {
    return this;
  }

  @state() canShow = true;
  @state() images = [\\"http://example.com/qwik.png\\"];

  render() {
    return html\`
      
      <div>
      <div></div>
      \${this.images?.map(
        (item, index) => html\`<my-fragment
        ><div></div>
        <img />
        <div></div></my-fragment
      >\`
      )}
      <div></div>
    </div>

    \`;
  }
}
"
`;

exports[`Lit > jsx > Javascript Test > Img 1`] = `
"import { Builder } from \\"@builder.io/sdk\\";

import { LitElement, html, css } from \\"lit\\";
import { customElement, property, state, query } from \\"lit/decorators.js\\";

export interface ImgProps {
  attributes?: any;
  imgSrc?: string;
  altText?: string;
  backgroundSize?: \\"cover\\" | \\"contain\\";
  backgroundPosition?:
    | \\"center\\"
    | \\"top\\"
    | \\"left\\"
    | \\"right\\"
    | \\"bottom\\"
    | \\"top left\\"
    | \\"top right\\"
    | \\"bottom left\\"
    | \\"bottom right\\";
}

@customElement(\\"img-component\\")
export default class ImgComponent extends LitElement {
  createRenderRoot() {
    return this;
  }

  @property() backgroundSize: any;
  @property() backgroundPosition: any;
  @property() attributes: any;
  @property() imgSrc: any;
  @property() altText: any;

  render() {
    return html\`
        
        <img />

      \`;
  }
}
"
`;

exports[`Lit > jsx > Javascript Test > Input 1`] = `
"import { Builder } from \\"@builder.io/sdk\\";

import { LitElement, html, css } from \\"lit\\";
import { customElement, property, state, query } from \\"lit/decorators.js\\";

export interface FormInputProps {
  type?: string;
  attributes?: any;
  name?: string;
  value?: string;
  placeholder?: string;
  defaultValue?: string;
  required?: boolean;
}

@customElement(\\"form-input-component\\")
export default class FormInputComponent extends LitElement {
  createRenderRoot() {
    return this;
  }

  @property() attributes: any;
  @property() defaultValue: any;
  @property() placeholder: any;
  @property() type: any;
  @property() name: any;
  @property() value: any;
  @property() required: any;

  render() {
    return html\`
        
        <input .name=\\"\${this.name}\\" .defaultvalue=\\"\${this.defaultValue}\\" />

      \`;
  }
}
"
`;

exports[`Lit > jsx > Javascript Test > RawText 1`] = `
"import { LitElement, html, css } from \\"lit\\";
import { customElement, property, state, query } from \\"lit/decorators.js\\";

export interface RawTextProps {
  attributes?: any;
  text?: string; // builderBlock?: any;
}

@customElement(\\"raw-text\\")
export default class RawText extends LitElement {
  createRenderRoot() {
    return this;
  }

  @property() attributes: any;
  @property() text: any;

  render() {
    return html\`
        
        <span  .innerhtml=\${this.text || \\"\\"} ></span>
      \`;
  }
}
"
`;

exports[`Lit > jsx > Javascript Test > Section 1`] = `
"import { LitElement, html, css } from \\"lit\\";
import { customElement, property, state, query } from \\"lit/decorators.js\\";

export interface SectionProps {
  maxWidth?: number;
  attributes?: any;
  children?: any;
}

@customElement(\\"section-component\\")
export default class SectionComponent extends LitElement {
  createRenderRoot() {
    return this;
  }

  @property() attributes: any;
  @property() maxWidth: any;
  @property() children: any;

  render() {
    return html\`
        
        <section>
        <div></div>
        <div></div>
        <div></div>
      </section>

      \`;
  }
}
"
`;

exports[`Lit > jsx > Javascript Test > Section 2`] = `
"import { LitElement, html, css } from \\"lit\\";
import { customElement, property, state, query } from \\"lit/decorators.js\\";

export interface SectionProps {
  maxWidth?: number;
  attributes?: any;
  children?: any;
}

@customElement(\\"section-state-component\\")
export default class SectionStateComponent extends LitElement {
  createRenderRoot() {
    return this;
  }

  @property() attributes: any;
  @property() children: any;

  @state() max = 42;
  @state() items = [42];

  render() {
    return html\`
        
        \${
          this.max
            ? html\`
      <div></div>
      \${this.items?.map(
        (item, index) => html\`
      <section>
        <div></div>
        <div></div>
        <div></div>
      </section>
      \`
      )}
      <div></div>
      \`
            : null
        }

      \`;
  }
}
"
`;

exports[`Lit > jsx > Javascript Test > Select 1`] = `
"import { Builder } from \\"@builder.io/sdk\\";

import { LitElement, html, css } from \\"lit\\";
import { customElement, property, state, query } from \\"lit/decorators.js\\";

export interface FormSelectProps {
  options?: {
    name?: string;
    value: string;
  }[];
  attributes?: any;
  name?: string;
  value?: string;
  defaultValue?: string;
}

@customElement(\\"select-component\\")
export default class SelectComponent extends LitElement {
  createRenderRoot() {
    return this;
  }

  @property() attributes: any;
  @property() value: any;
  @property() defaultValue: any;
  @property() name: any;
  @property() options: any;

  render() {
    return html\`
        
        <select .name=\\"\${this.name}\\" .defaultvalue=\\"\${this.defaultValue}\\">
        <div></div>
        \${this.options?.map(
          (option, index) => html\`
        <option data-index=\\"\${index}\\">
          <div></div>
          <div></div>
          <div></div>
        </option>
        \`
        )}
        <div></div>
      </select>

      \`;
  }
}
"
`;

exports[`Lit > jsx > Javascript Test > SlotDefault 1`] = `
"import { LitElement, html, css } from \\"lit\\";
import { customElement, property, state, query } from \\"lit/decorators.js\\";

type Props = {
  [key: string]: string;
};

@customElement(\\"slot-code\\")
export default class SlotCode extends LitElement {
  createRenderRoot() {
    return this;
  }

  render() {
    return html\`
        
        <div>
        <div></div>
        <my-slot
          ><div></div>
          <div><div></div></div>
          <div></div
        ></my-slot>
        <div></div>
      </div>

      \`;
  }
}
"
`;

exports[`Lit > jsx > Javascript Test > SlotHtml 1`] = `
"import ContentSlotCode from \\"./content-slot-jsx.raw\\";

import { LitElement, html, css } from \\"lit\\";
import { customElement, property, state, query } from \\"lit/decorators.js\\";

type Props = {
  [key: string]: string;
};

@customElement(\\"slot-code\\")
export default class SlotCode extends LitElement {
  createRenderRoot() {
    return this;
  }

  render() {
    return html\`
        
        <div ><div ></div>
      <content-slot-code ><div ></div>
      <my-slot  .testing=\${(<div>Hello</div>)} ></my-slot>
      <div ></div></content-slot-code>
      <div ></div></div>
      \`;
  }
}
"
`;

exports[`Lit > jsx > Javascript Test > SlotJsx 1`] = `
"import ContentSlotCode from \\"./content-slot-jsx.raw\\";

import { LitElement, html, css } from \\"lit\\";
import { customElement, property, state, query } from \\"lit/decorators.js\\";

type Props = {
  [key: string]: string;
};

@customElement(\\"slot-code\\")
export default class SlotCode extends LitElement {
  createRenderRoot() {
    return this;
  }

  render() {
    return html\`
        
        <div ><div ></div>
      <content-slot-code  .slotTesting=\${(
        <div>Hello</div>
      )} ></content-slot-code>
      <div ></div></div>
      \`;
  }
}
"
`;

exports[`Lit > jsx > Javascript Test > SlotNamed 1`] = `
"import { LitElement, html, css } from \\"lit\\";
import { customElement, property, state, query } from \\"lit/decorators.js\\";

type Props = {
  [key: string]: string;
};

@customElement(\\"slot-code\\")
export default class SlotCode extends LitElement {
  createRenderRoot() {
    return this;
  }

  render() {
    return html\`
        
        <div>
        <div></div>
        <my-slot name=\\"top\\"></my-slot>
        <div></div>
        <my-slot name=\\"left\\"><div></div></my-slot>
        <div></div>
        <my-slot><div></div></my-slot>
        <div></div>
      </div>

      \`;
  }
}
"
`;

exports[`Lit > jsx > Javascript Test > Stamped.io 1`] = `
"import { kebabCase } from \\"lodash\\";
import { snakeCase } from \\"lodash\\";

import { LitElement, html, css } from \\"lit\\";
import { customElement, property, state, query } from \\"lit/decorators.js\\";

type SmileReviewsProps = {
  productId: string;
  apiKey: string;
};

@customElement(\\"smile-reviews\\")
export default class SmileReviews extends LitElement {
  createRenderRoot() {
    return this;
  }

  @property() apiKey: any;
  @property() productId: any;

  @state() reviews = [];
  @state() name = \\"test\\";
  @state() showReviewPrompt = false;

  kebabCaseValue() {
    return kebabCase(\\"testThat\\");
  }
  snakeCaseValue() {
    return snakeCase(\\"testThis\\");
  }

  connectedCallback() {
    fetch(
      \`https://stamped.io/api/widget/reviews?storeUrl=builder-io.myshopify.com&apiKey=\${
        this.apiKey || \\"pubkey-8bbDq7W6w4sB3OWeM1HUy2s47702hM\\"
      }&productId=\${this.productId || \\"2410511106127\\"}\`
    )
      .then((res) => res.json())
      .then((data) => {
        this.reviews = data.data;
      });
  }

  render() {
    return html\`
         <style>.input {
 display: block;
}
.textarea {
 display: block;
}
.button {
 display: block;
}
.review {
 margin: 10px;
 padding: 10px;
 background: white;
 display: flex;
 border-radius: 5px;
 box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
}
.img {
 height: 30px;
 width: 30px;
 margin-right: 10px;
}
</style>
         <div  data-user=\${this.name} ><div ></div>
       <button  @click=\${(event) =>
         (this.showReviewPrompt = true)} ><div ></div></button>
       <div ></div>
       \${
         this.showReviewPrompt || \\"asdf\\"
           ? html\`<div ></div>
       <input  />
       <div ></div>
       <input  />
       <div ></div>
       <textarea ></textarea>
       <div ></div>
       <button  @click=\${(event) => {
         event.preventDefault();
         this.showReviewPrompt = false;
       }} ><div ></div></button>
       <div ></div>\`
           : null
       }
       <div ></div>
       \${this.reviews?.map(
         (review, index) =>
           html\`<div ><div ></div>
       <img  />
       <div ></div>
       <div ><div ></div>
       <div ><div ></div>
       <div ></div></div>
       <div ></div>
       <div ><div ></div></div>
       <div ></div>
       <div ><div ></div></div>
       <div ></div></div>
       <div ></div></div>\`
       )}
       <div ></div></div>
       \`;
  }
}
"
`;

exports[`Lit > jsx > Javascript Test > Submit 1`] = `
"import { LitElement, html, css } from \\"lit\\";
import { customElement, property, state, query } from \\"lit/decorators.js\\";

export interface ButtonProps {
  attributes?: any;
  text?: string;
}

@customElement(\\"submit-button\\")
export default class SubmitButton extends LitElement {
  createRenderRoot() {
    return this;
  }

  @property() attributes: any;
  @property() text: any;

  render() {
    return html\`
        
        <button>
        <div></div>
        <div></div>
        <div></div>
      </button>

      \`;
  }
}
"
`;

exports[`Lit > jsx > Javascript Test > Text 1`] = `
"import { Builder } from \\"@builder.io/sdk\\";

import { LitElement, html, css } from \\"lit\\";
import { customElement, property, state, query } from \\"lit/decorators.js\\";

export interface TextProps {
  attributes?: any;
  rtlMode: boolean;
  text?: string;
  content?: string;
  builderBlock?: any;
}

@customElement(\\"my-text\\")
export default class Text extends LitElement {
  createRenderRoot() {
    return this;
  }

  @property() text: any;
  @property() content: any;

  @state() name = \\"Decadef20\\";

  render() {
    return html\`
        
        <div  data-name=\${{
          test: this.name || \\"any name\\",
        }}  .contenteditable=\${allowEditingText || undefined}  .innerhtml=\${
      this.text || this.content || this.name || '<p class=\\"text-lg\\">my name</p>'
    } ></div>
      \`;
  }
}
"
`;

exports[`Lit > jsx > Javascript Test > Textarea 1`] = `
"import { LitElement, html, css } from \\"lit\\";
import { customElement, property, state, query } from \\"lit/decorators.js\\";

export interface TextareaProps {
  attributes?: any;
  name?: string;
  value?: string;
  defaultValue?: string;
  placeholder?: string;
}

@customElement(\\"my-textarea\\")
export default class Textarea extends LitElement {
  createRenderRoot() {
    return this;
  }

  @property() attributes: any;
  @property() placeholder: any;
  @property() name: any;
  @property() value: any;
  @property() defaultValue: any;

  render() {
    return html\`
        
        <textarea .name=\\"\${this.name}\\" .defaultvalue=\\"\${this.defaultValue}\\"></textarea>

      \`;
  }
}
"
`;

exports[`Lit > jsx > Javascript Test > Video 1`] = `
"import { LitElement, html, css } from \\"lit\\";
import { customElement, property, state, query } from \\"lit/decorators.js\\";

export interface VideoProps {
  attributes?: any;
  video?: string;
  autoPlay?: boolean;
  controls?: boolean;
  muted?: boolean;
  loop?: boolean;
  playsInline?: boolean;
  aspectRatio?: number;
  width?: number;
  height?: number;
  fit?: \\"contain\\" | \\"cover\\" | \\"fill\\";
  position?:
    | \\"center\\"
    | \\"top\\"
    | \\"left\\"
    | \\"right\\"
    | \\"bottom\\"
    | \\"top left\\"
    | \\"top right\\"
    | \\"bottom left\\"
    | \\"bottom right\\";
  posterImage?: string;
  lazyLoad?: boolean;
}

@customElement(\\"my-video\\")
export default class Video extends LitElement {
  createRenderRoot() {
    return this;
  }

  @property() attributes: any;
  @property() fit: any;
  @property() position: any;
  @property() video: any;
  @property() posterImage: any;
  @property() autoPlay: any;
  @property() muted: any;
  @property() controls: any;
  @property() loop: any;

  render() {
    return html\`
        
        <video></video>

      \`;
  }
}
"
`;

exports[`Lit > jsx > Javascript Test > arrowFunctionInUseStore 1`] = `
"import { LitElement, html, css } from \\"lit\\";
import { customElement, property, state, query } from \\"lit/decorators.js\\";

@customElement(\\"my-component\\")
export default class MyComponent extends LitElement {
  createRenderRoot() {
    return this;
  }

  @state() name = \\"steve\\";

  setName(value) {
    this.name = value;
  }
  updateNameWithArrowFn(value) {
    this.name = value;
  }

  render() {
    return html\`
         
         <div>
         <div></div>
         <div></div>
       </div>

       \`;
  }
}
"
`;

exports[`Lit > jsx > Javascript Test > basicForwardRef 1`] = `
"import { LitElement, html, css } from \\"lit\\";
import { customElement, property, state, query } from \\"lit/decorators.js\\";

export interface Props {
  showInput: boolean;
  inputRef: HTMLInputElement;
}

@customElement(\\"my-basic-forward-ref-component\\")
export default class MyBasicForwardRefComponent extends LitElement {
  createRenderRoot() {
    return this;
  }

  @query('[ref=\\"props.inputRef\\"]')
  propsInputRef!: HTMLElement;

  @property() inputRef: any;

  @state() name = \\"PatrickJS\\";

  render() {
    return html\`
        <style>.input {
color: red;
}
</style>
        <div>
        <div></div>
        <input @change=\${(event) => (this.name = event.target.value)} />
        <div></div>
      </div>

      \`;
  }
}
"
`;

exports[`Lit > jsx > Javascript Test > basicForwardRefMetadata 1`] = `
"import { LitElement, html, css } from \\"lit\\";
import { customElement, property, state, query } from \\"lit/decorators.js\\";

export interface Props {
  showInput: boolean;
  inputRef: HTMLInputElement;
}

@customElement(\\"my-basic-forward-ref-component\\")
export default class MyBasicForwardRefComponent extends LitElement {
  createRenderRoot() {
    return this;
  }

  @query('[ref=\\"props.inputRef\\"]')
  propsInputRef!: HTMLElement;

  @property() inputRef: any;

  @state() name = \\"PatrickJS\\";

  render() {
    return html\`
        <style>.input {
color: red;
}
</style>
        <div>
        <div></div>
        <input @change=\${(event) => (this.name = event.target.value)} />
        <div></div>
      </div>

      \`;
  }
}
"
`;

exports[`Lit > jsx > Javascript Test > basicOnUpdateReturn 1`] = `
"import { LitElement, html, css } from \\"lit\\";
import { customElement, property, state, query } from \\"lit/decorators.js\\";

@customElement(\\"my-basic-on-update-return-component\\")
export default class MyBasicOnUpdateReturnComponent extends LitElement {
  createRenderRoot() {
    return this;
  }

  @state() name = \\"PatrickJS\\";

  updated() {
    const controller = new AbortController();
    const signal = controller.signal;
    fetch(\\"https://patrickjs.com/api/resource.json\\", {
      signal,
    })
      .then((response) => response.json())
      .then((data) => {
        this.name = data.name;
      });
    return () => {
      if (!signal.aborted) {
        controller.abort();
      }
    };
  }

  render() {
    return html\`
        
        <div>
        <div></div>
        <div></div>
      </div>

      \`;
  }
}
"
`;

exports[`Lit > jsx > Javascript Test > camelCasedAttributes 1`] = `
"import React from \\"@builder.io/react\\";

import { LitElement, html, css } from \\"lit\\";
import { customElement, property, state, query } from \\"lit/decorators.js\\";

@customElement(\\"my-component\\")
export default class MyComponent extends LitElement {
  createRenderRoot() {
    return this;
  }

  @state() name = \\"Steve\\";

  render() {
    return html\`

      <div>
      <div></div>
      <img srcset=\\"http://example.com\\" />
      <div></div>
    </div>

    \`;
  }
}
"
`;

exports[`Lit > jsx > Javascript Test > class + ClassName + css 1`] = `
"import { LitElement, html, css } from \\"lit\\";
import { customElement, property, state, query } from \\"lit/decorators.js\\";

@customElement(\\"my-basic-component\\")
export default class MyBasicComponent extends LitElement {
  createRenderRoot() {
    return this;
  }

  render() {
    return html\`
        <style>.div {
padding: 10px;
}
</style>
        <div><div></div></div>

      \`;
  }
}
"
`;

exports[`Lit > jsx > Javascript Test > class + css 1`] = `
"import { LitElement, html, css } from \\"lit\\";
import { customElement, property, state, query } from \\"lit/decorators.js\\";

@customElement(\\"my-basic-component\\")
export default class MyBasicComponent extends LitElement {
  createRenderRoot() {
    return this;
  }

  render() {
    return html\`
        <style>.div {
padding: 10px;
}
</style>
        <div><div></div></div>

      \`;
  }
}
"
`;

exports[`Lit > jsx > Javascript Test > className + css 1`] = `
"import { LitElement, html, css } from \\"lit\\";
import { customElement, property, state, query } from \\"lit/decorators.js\\";

@customElement(\\"my-basic-component\\")
export default class MyBasicComponent extends LitElement {
  createRenderRoot() {
    return this;
  }

  render() {
    return html\`
        <style>.div {
padding: 10px;
}
</style>
        <div><div></div></div>

      \`;
  }
}
"
`;

exports[`Lit > jsx > Javascript Test > className 1`] = `
"import { LitElement, html, css } from \\"lit\\";
import { customElement, property, state, query } from \\"lit/decorators.js\\";

type Props = {
  [key: string]: string | JSX.Element;
  slotTesting: JSX.Element;
};

@customElement(\\"class-name-code\\")
export default class ClassNameCode extends LitElement {
  createRenderRoot() {
    return this;
  }

  @state() bindings = \\"a binding\\";

  render() {
    return html\`
        
        <div>
        <div></div>
        <div></div>
        <div><div></div></div>
        <div></div>
        <div></div>
        <div><div></div></div>
        <div></div>
      </div>

      \`;
  }
}
"
`;

exports[`Lit > jsx > Javascript Test > classState 1`] = `
"import { LitElement, html, css } from \\"lit\\";
import { customElement, property, state, query } from \\"lit/decorators.js\\";

@customElement(\\"my-basic-component\\")
export default class MyBasicComponent extends LitElement {
  createRenderRoot() {
    return this;
  }

  @state() classState = \\"testClassName\\";
  @state() styleState = {
    color: \\"red\\",
  };

  render() {
    return html\`
        <style>.div {
padding: 10px;
}
</style>
        <div><div></div></div>

      \`;
  }
}
"
`;

exports[`Lit > jsx > Javascript Test > componentWithContext 1`] = `
"import Context1 from \\"@dummy/1\\";
import Context2 from \\"@dummy/2\\";

import { LitElement, html, css } from \\"lit\\";
import { customElement, property, state, query } from \\"lit/decorators.js\\";

export interface ComponentWithContextProps {
  content: string;
}

@customElement(\\"component-with-context\\")
export default class ComponentWithContext extends LitElement {
  createRenderRoot() {
    return this;
  }

  @property() content: any;

  render() {
    return html\`
        
        <my-fragment
        ><div></div>
        <my-fragment><div></div></my-fragment>
        <div></div
      ></my-fragment>

      \`;
  }
}
"
`;

exports[`Lit > jsx > Javascript Test > componentWithContextMultiRoot 1`] = `
"import Context1 from \\"@dummy/1\\";
import Context2 from \\"@dummy/2\\";

import { LitElement, html, css } from \\"lit\\";
import { customElement, property, state, query } from \\"lit/decorators.js\\";

export interface ComponentWithContextProps {
  content: string;
}

@customElement(\\"component-with-context\\")
export default class ComponentWithContext extends LitElement {
  createRenderRoot() {
    return this;
  }

  @property() content: any;

  render() {
    return html\`
        
        <my-fragment
        ><div></div>
        <my-fragment><div></div></my-fragment>
        <div></div>
        <div><div></div></div>
        <div></div
      ></my-fragment>

      \`;
  }
}
"
`;

exports[`Lit > jsx > Javascript Test > contentState 1`] = `
"import \\"@dummy/context.js\\";

import { LitElement, html, css } from \\"lit\\";
import { customElement, property, state, query } from \\"lit/decorators.js\\";

@customElement(\\"render-content\\")
export default class RenderContent extends LitElement {
  createRenderRoot() {
    return this;
  }

  @property() content: any;
  @property() customComponents: any;

  render() {
    return html\`
      
      <div><div></div></div>

    \`;
  }
}
"
`;

exports[`Lit > jsx > Javascript Test > defaultProps 1`] = `
"import { LitElement, html, css } from \\"lit\\";
import { customElement, property, state, query } from \\"lit/decorators.js\\";

export interface ButtonProps {
  attributes?: any;
  text?: string;
  buttonText?: string; // no default value

  link?: string;
  openLinkInNewTab?: boolean;
  onClick?: () => void;
}

@customElement(\\"my-button\\")
export default class Button extends LitElement {
  createRenderRoot() {
    return this;
  }

  @property() link: any;
  @property() attributes: any;
  @property() openLinkInNewTab: any;
  @property() text: any;
  @property() onClick: any;
  @property() buttonText: any;

  render() {
    return html\`
        
        <div ><div ></div>
      \${
        this.link
          ? html\`<div ></div>
      <a ><div ></div>
      <div ></div>
      <div ></div></a>
      <div ></div>\`
          : null
      }
      <div ></div>
      \${
        !this.link
          ? html\`<div ></div>
      <button  @click=\${(event) => this.onClick(event)} ><div ></div>
      <div ></div>
      <div ></div></button>
      <div ></div>\`
          : null
      }
      <div ></div></div>
      \`;
  }
}
"
`;

exports[`Lit > jsx > Javascript Test > defaultPropsOutsideComponent 1`] = `
"import { LitElement, html, css } from \\"lit\\";
import { customElement, property, state, query } from \\"lit/decorators.js\\";

export interface ButtonProps {
  attributes?: any;
  text?: string;
  link?: string;
  openLinkInNewTab?: boolean;
  onClick: () => void;
}

@customElement(\\"my-button\\")
export default class Button extends LitElement {
  createRenderRoot() {
    return this;
  }

  @property() link: any;
  @property() attributes: any;
  @property() openLinkInNewTab: any;
  @property() text: any;
  @property() onClick: any;

  render() {
    return html\`
        
        <div ><div ></div>
      \${
        this.link
          ? html\`<div ></div>
      <a ><div ></div>
      <div ></div>
      <div ></div></a>
      <div ></div>\`
          : null
      }
      <div ></div>
      \${
        !this.link
          ? html\`<div ></div>
      <button  @click=\${(event) => this.onClick(event)} ><div ></div>
      <div ></div>
      <div ></div></button>
      <div ></div>\`
          : null
      }
      <div ></div></div>
      \`;
  }
}
"
`;

exports[`Lit > jsx > Javascript Test > defaultValsWithTypes 1`] = `
"const DEFAULT_VALUES: Props = {
  name: \\"Sami\\",
};

import { LitElement, html, css } from \\"lit\\";
import { customElement, property, state, query } from \\"lit/decorators.js\\";

type Props = {
  name: string;
};

@customElement(\\"component-with-types\\")
export default class ComponentWithTypes extends LitElement {
  createRenderRoot() {
    return this;
  }

  @property() name: any;

  render() {
    return html\`
        
        <div>
        <div></div>
        <div></div>
      </div>

      \`;
  }
}
"
`;

exports[`Lit > jsx > Javascript Test > expressionState 1`] = `
"import { LitElement, html, css } from \\"lit\\";
import { customElement, property, state, query } from \\"lit/decorators.js\\";

@customElement(\\"my-component\\")
export default class MyComponent extends LitElement {
  createRenderRoot() {
    return this;
  }

  @property() componentRef: any;

  @state() refToUse = !(this.componentRef instanceof Function)
    ? this.componentRef
    : null;

  render() {
    return html\`
      
      <div><div></div></div>

    \`;
  }
}
"
`;

exports[`Lit > jsx > Javascript Test > import types 1`] = `
"import RenderBlock from \\"./builder-render-block.raw\\";

import { LitElement, html, css } from \\"lit\\";
import { customElement, property, state, query } from \\"lit/decorators.js\\";

type RenderContentProps = {
  options?: GetContentOptions;
  content: BuilderContent;
  renderContentProps: RenderBlockProps;
};

const spread = (properties) =>
  directive((part) => {
    for (const property in properties) {
      const value = properties[attr];
      part.element[property] = value;
    }
  });

@customElement(\\"render-content\\")
export default class RenderContent extends LitElement {
  createRenderRoot() {
    return this;
  }

  @property() renderContentProps: any;

  getRenderContentProps(block, index) {
    return {
      block: block,
      index: index,
    };
  }

  render() {
    return html\`
        
        <render-block
        \${spread(
          state.getRenderContentProps(props.renderContentProps.block, 0)
        )}
      ></render-block>

      \`;
  }
}
"
`;

exports[`Lit > jsx > Javascript Test > multipleOnUpdate 1`] = `
"import { LitElement, html, css } from \\"lit\\";
import { customElement, property, state, query } from \\"lit/decorators.js\\";

@customElement(\\"multiple-on-update\\")
export default class MultipleOnUpdate extends LitElement {
  createRenderRoot() {
    return this;
  }

  updated() {
    console.log(\\"Runs on every update/rerender\\");

    console.log(\\"Runs on every update/rerender as well\\");
  }

  render() {
    return html\`
      
      <div></div>

    \`;
  }
}
"
`;

exports[`Lit > jsx > Javascript Test > multipleOnUpdateWithDeps 1`] = `
"import { LitElement, html, css } from \\"lit\\";
import { customElement, property, state, query } from \\"lit/decorators.js\\";

@customElement(\\"multiple-on-update-with-deps\\")
export default class MultipleOnUpdateWithDeps extends LitElement {
  createRenderRoot() {
    return this;
  }

  @state() a = \\"a\\";
  @state() b = \\"b\\";
  @state() c = \\"c\\";
  @state() d = \\"d\\";

  updated() {
    console.log(\\"Runs when a or b changes\\", this.a, this.b);

    if (this.a === \\"a\\") {
      this.a = \\"b\\";
    }

    console.log(\\"Runs when c or d changes\\", this.c, this.d);

    if (this.a === \\"a\\") {
      this.a = \\"b\\";
    }
  }

  render() {
    return html\`
        
        <div></div>

      \`;
  }
}
"
`;

exports[`Lit > jsx > Javascript Test > multipleSpreads 1`] = `
"import { LitElement, html, css } from \\"lit\\";
import { customElement, property, state, query } from \\"lit/decorators.js\\";

@customElement(\\"my-basic-component\\")
export default class MyBasicComponent extends LitElement {
  createRenderRoot() {
    return this;
  }

  @state() attrs = {
    hello: \\"world\\",
  };

  render() {
    return html\`
        
        <input />

      \`;
  }
}
"
`;

exports[`Lit > jsx > Javascript Test > nestedShow 1`] = `
"import { LitElement, html, css } from \\"lit\\";
import { customElement, property, state, query } from \\"lit/decorators.js\\";

interface Props {
  conditionA: boolean;
  conditionB: boolean;
}

@customElement(\\"nested-show\\")
export default class NestedShow extends LitElement {
  createRenderRoot() {
    return this;
  }

  @property() conditionA: any;
  @property() conditionB: any;

  render() {
    return html\`
        
        \${
          this.conditionA
            ? html\`
      <div></div>
      \${
        !this.conditionB
          ? html\`
      <div></div>
      <div><div></div></div>
      <div></div>
      \`
          : html\`
      <div><div></div></div>
      \`
      }
      <div></div>
      \`
            : html\`
      <div><div></div></div>
      \`
        }

      \`;
  }
}
"
`;

exports[`Lit > jsx > Javascript Test > nestedStyles 1`] = `
"import { LitElement, html, css } from \\"lit\\";
import { customElement, property, state, query } from \\"lit/decorators.js\\";

@customElement(\\"nested-styles\\")
export default class NestedStyles extends LitElement {
  createRenderRoot() {
    return this;
  }

  render() {
    return html\`
        <style>.div {
display: flex;
foo: var(--bar);
}
@media (max-width: env(--mobile)) {
.div {
  display: block;
}
}
.div:hover {
display: flex;
}
.div .nested-selector {
display: grid;
}
</style>
        <div><div></div></div>

      \`;
  }
}
"
`;

exports[`Lit > jsx > Javascript Test > onInit & onMount 1`] = `
"import { LitElement, html, css } from \\"lit\\";
import { customElement, property, state, query } from \\"lit/decorators.js\\";

@customElement(\\"on-init\\")
export default class OnInit extends LitElement {
  createRenderRoot() {
    return this;
  }

  connectedCallback() {
    console.log(\\"onMount\\");
  }

  render() {
    return html\`
      
      <div></div>

    \`;
  }
}
"
`;

exports[`Lit > jsx > Javascript Test > onInit 1`] = `
"export const defaultValues = {
  name: \\"PatrickJS\\",
};

import { LitElement, html, css } from \\"lit\\";
import { customElement, property, state, query } from \\"lit/decorators.js\\";

type Props = {
  name: string;
};

@customElement(\\"on-init\\")
export default class OnInit extends LitElement {
  createRenderRoot() {
    return this;
  }

  @property() name: any;

  @state() name = \\"\\";

  render() {
    return html\`
        
        <div>
        <div></div>
        <div></div>
      </div>

      \`;
  }
}
"
`;

exports[`Lit > jsx > Javascript Test > onMount 1`] = `
"import { LitElement, html, css } from \\"lit\\";
import { customElement, property, state, query } from \\"lit/decorators.js\\";

@customElement(\\"my-comp\\")
export default class Comp extends LitElement {
  createRenderRoot() {
    return this;
  }

  connectedCallback() {
    console.log(\\"Runs on mount\\");
  }
  disconnectedCallback() {
    console.log(\\"Runs on unMount\\");
  }

  render() {
    return html\`
      
      <div></div>

    \`;
  }
}
"
`;

exports[`Lit > jsx > Javascript Test > onUpdate 1`] = `
"import { LitElement, html, css } from \\"lit\\";
import { customElement, property, state, query } from \\"lit/decorators.js\\";

@customElement(\\"on-update\\")
export default class OnUpdate extends LitElement {
  createRenderRoot() {
    return this;
  }

  updated() {
    console.log(\\"Runs on every update/rerender\\");
  }

  render() {
    return html\`
      
      <div></div>

    \`;
  }
}
"
`;

exports[`Lit > jsx > Javascript Test > onUpdateWithDeps 1`] = `
"import { LitElement, html, css } from \\"lit\\";
import { customElement, property, state, query } from \\"lit/decorators.js\\";

type Props = {
  size: string;
};

@customElement(\\"on-update-with-deps\\")
export default class OnUpdateWithDeps extends LitElement {
  createRenderRoot() {
    return this;
  }

  @property() size: any;

  @state() a = \\"a\\";
  @state() b = \\"b\\";

  updated() {
    console.log(\\"Runs when a, b or size changes\\", this.a, this.b, this.size);
  }

  render() {
    return html\`
        
        <div></div>

      \`;
  }
}
"
`;

exports[`Lit > jsx > Javascript Test > preserveExportOrLocalStatement 1`] = `
"const b = 3;
const foo = () => {};
export const a = 3;
export const bar = () => {};
export function run<T>(value: T) {}

import { LitElement, html, css } from \\"lit\\";
import { customElement, property, state, query } from \\"lit/decorators.js\\";

type Types = {
  s: any[];
};
interface IPost {
  len: number;
}
export interface MyBasicComponentProps {
  id: string;
}

@customElement(\\"my-basic-component\\")
export default class MyBasicComponent extends LitElement {
  createRenderRoot() {
    return this;
  }

  render() {
    return html\`
        
        <div></div>

      \`;
  }
}
"
`;

exports[`Lit > jsx > Javascript Test > preserveTyping 1`] = `
"import { LitElement, html, css } from \\"lit\\";
import { customElement, property, state, query } from \\"lit/decorators.js\\";

export type A = \\"test\\";
export interface C {
  n: \\"test\\";
}
type B = \\"test2\\";
interface D {
  n: \\"test\\";
}
export interface MyBasicComponentProps {
  name: string;
  age?: number;
}

@customElement(\\"my-basic-component\\")
export default class MyBasicComponent extends LitElement {
  createRenderRoot() {
    return this;
  }

  @property() name: any;

  render() {
    return html\`
        
        <div>
        <div></div>
        <div></div>
      </div>

      \`;
  }
}
"
`;

exports[`Lit > jsx > Javascript Test > propsDestructure 1`] = `
"import { LitElement, html, css } from \\"lit\\";
import { customElement, property, state, query } from \\"lit/decorators.js\\";

type Props = {
  children: any;
  type: string;
};

@customElement(\\"my-basic-component\\")
export default class MyBasicComponent extends LitElement {
  createRenderRoot() {
    return this;
  }

  @property() children: any;
  @property() type: any;

  @state() name = \\"Decadef20\\";

  render() {
    return html\`
        
        <div>
        <div></div>
        <div></div>
        <div></div>
        <div></div>
        <div></div>
      </div>

      \`;
  }
}
"
`;

exports[`Lit > jsx > Javascript Test > propsInterface 1`] = `
"import { LitElement, html, css } from \\"lit\\";
import { customElement, property, state, query } from \\"lit/decorators.js\\";

interface Person {
  name: string;
  age?: number;
}

@customElement(\\"my-basic-component\\")
export default class MyBasicComponent extends LitElement {
  createRenderRoot() {
    return this;
  }

  @property() name: any;

  render() {
    return html\`
        
        <div>
        <div></div>
        <div></div>
      </div>

      \`;
  }
}
"
`;

exports[`Lit > jsx > Javascript Test > propsType 1`] = `
"import { LitElement, html, css } from \\"lit\\";
import { customElement, property, state, query } from \\"lit/decorators.js\\";

type Person = {
  name: string;
  age?: number;
};

@customElement(\\"my-basic-component\\")
export default class MyBasicComponent extends LitElement {
  createRenderRoot() {
    return this;
  }

  @property() name: any;

  render() {
    return html\`
        
        <div>
        <div></div>
        <div></div>
      </div>

      \`;
  }
}
"
`;

exports[`Lit > jsx > Javascript Test > referencingFunInsideHook 1`] = `
"import { LitElement, html, css } from \\"lit\\";
import { customElement, property, state, query } from \\"lit/decorators.js\\";

@customElement(\\"on-update\\")
export default class OnUpdate extends LitElement {
  createRenderRoot() {
    return this;
  }

  foo = function foo(params) {};
  bar = function bar() {};
  zoo = function zoo() {
    const params = {
      cb: this.bar,
    };
  };

  updated() {
    foo({
      someOption: bar,
    });
  }

  render() {
    return html\`
         
         <div></div>

       \`;
  }
}
"
`;

exports[`Lit > jsx > Javascript Test > renderBlock 1`] = `
"import { getBlockActions } from \\"../../functions/get-block-actions.js\\";
import { getBlockComponentOptions } from \\"../../functions/get-block-component-options.js\\";
import { getBlockProperties } from \\"../../functions/get-block-properties.js\\";
import { getBlockTag } from \\"../../functions/get-block-tag.js\\";
import { getProcessedBlock } from \\"../../functions/get-processed-block.js\\";
import { evaluate } from \\"../../functions/evaluate.js\\";
import \\"./block-styles.js\\";
import { isEmptyHtmlElement } from \\"./render-block.helpers.js\\";
import \\"./render-repeated-block.js\\";
import { TARGET } from \\"../../constants/target.js\\";
import { extractTextStyles } from \\"../../functions/extract-text-styles.js\\";
import \\"./render-component-with-context.js\\";
import \\"./render-component.js\\";
import { getReactNativeBlockStyles } from \\"../../functions/get-react-native-block-styles.js\\";

import { LitElement, html, css } from \\"lit\\";
import { customElement, property, state, query } from \\"lit/decorators.js\\";

import type {
  BuilderContextInterface,
  RegisteredComponent,
} from \\"../../context/types.js\\";
import type { BuilderBlock } from \\"../../types/builder-block.js\\";
import type { Nullable } from \\"../../types/typescript.js\\";
import type { RenderComponentProps } from \\"./render-component\\";
import type { RepeatData } from \\"./types.js\\";
export type RenderBlockProps = {
  block: BuilderBlock;
  context: BuilderContextInterface;
};

const spread = (properties) =>
  directive((part) => {
    for (const property in properties) {
      const value = properties[attr];
      part.element[property] = value;
    }
  });

@customElement(\\"render-block\\")
export default class RenderBlock extends LitElement {
  createRenderRoot() {
    return this;
  }

  @property() block: any;
  @property() context: any;

  get component() {
    const componentName = getProcessedBlock({
      block: this.block,
      this: this.context.state,
      context: this.context.context,
      shouldEvaluateBindings: false,
    }).component?.name;

    if (!componentName) {
      return null;
    }

    const ref = this.context.registeredComponents[componentName];

    if (!ref) {
      // TODO: Public doc page with more info about this message
      console.warn(\`
         Could not find a registered component named \\"\${componentName}\\". 
         If you registered it, is the file that registered it imported by the file that needs to render it?\`);
      return undefined;
    } else {
      return ref;
    }
  }
  get tag() {
    return getBlockTag(this.useBlock);
  }
  get useBlock() {
    return this.repeatItemData
      ? this.block
      : getProcessedBlock({
          block: this.block,
          this: this.context.state,
          context: this.context.context,
          shouldEvaluateBindings: true,
        });
  }
  get actions() {
    return getBlockActions({
      block: this.useBlock,
      this: this.context.state,
      context: this.context.context,
    });
  }
  get attributes() {
    const blockProperties = getBlockProperties(this.useBlock);
    return {
      ...blockProperties,
      ...(TARGET === \\"reactNative\\"
        ? {
            style: getReactNativeBlockStyles({
              block: this.useBlock,
              context: this.context,
              blockStyles: blockProperties.style,
            }),
          }
        : {}),
    };
  }
  get shouldWrap() {
    return !this.component?.noWrap;
  }
  get renderComponentProps() {
    return {
      blockChildren: this.useChildren,
      componentRef: this.component?.component,
      componentOptions: {
        ...getBlockComponentOptions(this.useBlock),

        /**
         * These attributes are passed to the wrapper element when there is one. If \`noWrap\` is set to true, then
         * they are provided to the component itself directly.
         */
        ...(this.shouldWrap
          ? {}
          : {
              attributes: { ...this.attributes, ...this.actions },
            }),
        customBreakpoints: this.childrenContext?.content?.meta?.breakpoints,
      },
      context: this.childrenContext,
    };
  }
  get useChildren() {
    // TO-DO: When should \`canHaveChildren\` dictate rendering?
    // This is currently commented out because some Builder components (e.g. Box) do not have \`canHaveChildren: true\`,
    // but still receive and need to render children.
    // return state.componentInfo?.canHaveChildren ? state.useBlock.children : [];
    return this.useBlock.children ?? [];
  }
  get childrenWithoutParentComponent() {
    /**
     * When there is no \`componentRef\`, there might still be children that need to be rendered. In this case,
     * we render them outside of \`componentRef\`.
     * NOTE: We make sure not to render this if \`repeatItemData\` is non-null, because that means we are rendering an array of
     * blocks, and the children will be repeated within those blocks.
     */
    const shouldRenderChildrenOutsideRef =
      !this.component?.component && !this.repeatItemData;
    return shouldRenderChildrenOutsideRef ? this.useChildren : [];
  }
  get repeatItemData() {
    /**
     * we don't use \`state.useBlock\` here because the processing done within its logic includes evaluating the block's bindings,
     * which will not work if there is a repeat.
     */
    const { repeat, ...blockWithoutRepeat } = this.block;

    if (!repeat?.collection) {
      return undefined;
    }

    const itemsArray = evaluate({
      code: repeat.collection,
      this: this.context.state,
      context: this.context.context,
    });

    if (!Array.isArray(itemsArray)) {
      return undefined;
    }

    const collectionName = repeat.collection.split(\\".\\").pop();
    const itemNameToUse =
      repeat.itemName || (collectionName ? collectionName + \\"Item\\" : \\"item\\");
    const repeatArray = itemsArray.map((item, index) => ({
      context: {
        ...this.context,
        this: {
          ...this.context.state,
          $index: index,
          $item: item,
          [itemNameToUse]: item,
          [\`$\${itemNameToUse}Index\`]: index,
        },
      },
      block: blockWithoutRepeat,
    }));
    return repeatArray;
  }
  get inheritedTextStyles() {
    if (TARGET !== \\"reactNative\\") {
      return {};
    }

    const styles = getReactNativeBlockStyles({
      block: this.useBlock,
      context: this.context,
      blockStyles: this.attributes.style,
    });
    return extractTextStyles(styles);
  }
  get childrenContext() {
    return {
      apiKey: this.context.apiKey,
      this: this.context.state,
      content: this.context.content,
      context: this.context.context,
      registeredComponents: this.context.registeredComponents,
      inheritedStyles: this.inheritedTextStyles,
    };
  }
  get renderComponentTag() {
    if (TARGET === \\"reactNative\\") {
      return RenderComponentWithContext;
    } else if (TARGET === \\"vue3\\") {
      // vue3 expects a string for the component tag
      return \\"RenderComponent\\";
    } else {
      return RenderComponent;
    }
  }

  render() {
    return html\`
         
         \${
           this.shouldWrap
             ? html\`<div ></div>
       <div ></div>
       \${
         isEmptyHtmlElement(this.tag)
           ? html\`<div ></div>
       <state.tag ></state.tag>
       <div ></div>\`
           : null
       }
       <div ></div>
       \${
         !isEmptyHtmlElement(this.tag) && this.repeatItemData
           ? html\`<div ></div>
       \${this.repeatItemData?.map(
         (data, index) =>
           html\`<render-repeated-block  .key=\${index}  .repeatContext=\${data.context}  .block=\${data.block} ></render-repeated-block>\`
       )}
       <div ></div>\`
           : null
       }
       <div ></div>
       \${
         !isEmptyHtmlElement(this.tag) && !this.repeatItemData
           ? html\`<div ></div>
       <state.tag ><div ></div>
       <state.renderComponentTag  \${spread(
         state.renderComponentProps
       )} ></state.renderComponentTag>
       <div ></div>
       <div ></div>
       \${this.childrenWithoutParentComponent?.map(
         (child, index) =>
           html\`<render-block  .key=\${
             \\"render-block-\\" + child.id
           }  .block=\${child}  .context=\${
             this.childrenContext
           } ></render-block>\`
       )}
       <div ></div>
       \${this.childrenWithoutParentComponent?.map(
         (child, index) =>
           html\`<block-styles  .key=\${
             \\"block-style-\\" + child.id
           }  .block=\${child}  .context=\${
             this.childrenContext
           } ></block-styles>\`
       )}
       <div ></div></state.tag>
       <div ></div>\`
           : null
       }
       <div ></div>\`
             : html\`<state.renderComponentTag  \${spread(
                 state.renderComponentProps
               )} ></state.renderComponentTag>\`
         }
       \`;
  }
}
"
`;

exports[`Lit > jsx > Javascript Test > renderContentExample 1`] = `
"import {
  sendComponentsToVisualEditor,
  dispatchNewContentToVisualEditor,
  trackClick,
} from \\"@dummy/injection-js\\";
import \\"@dummy/context.js\\";
import RenderBlocks from \\"@dummy/RenderBlocks.lite.tsx\\";

import { LitElement, html, css } from \\"lit\\";
import { customElement, property, state, query } from \\"lit/decorators.js\\";

type Props = {
  customComponents: string[];
  content: {
    blocks: any[];
    id: string;
  };
};

@customElement(\\"render-content\\")
export default class RenderContent extends LitElement {
  createRenderRoot() {
    return this;
  }

  @property() content: any;
  @property() customComponents: any;

  connectedCallback() {
    sendComponentsToVisualEditor(this.customComponents);
  }

  updated() {
    dispatchNewContentToVisualEditor(this.content);
  }

  render() {
    return html\`
        <style>.div {
display: flex;
flex-direction: columns;
}
</style>
        <div  @click=\${(event) => trackClick(this.content.id)} ><div ></div>
      <render-blocks  .blocks=\${this.content.blocks} ></render-blocks>
      <div ></div></div>
      \`;
  }
}
"
`;

exports[`Lit > jsx > Javascript Test > rootFragmentMultiNode 1`] = `
"import { LitElement, html, css } from \\"lit\\";
import { customElement, property, state, query } from \\"lit/decorators.js\\";

export interface ButtonProps {
  attributes?: any;
  text?: string;
  link?: string;
  openLinkInNewTab?: boolean;
}

@customElement(\\"my-button\\")
export default class Button extends LitElement {
  createRenderRoot() {
    return this;
  }

  @property() link: any;
  @property() attributes: any;
  @property() openLinkInNewTab: any;
  @property() text: any;

  render() {
    return html\`
        
        <my-fragment
        ><div></div>
        \${
          this.link
            ? html\`
        <div></div>
        <a
          ><div></div>
          <div></div>
          <div></div
        ></a>
        <div></div>
        \`
            : null
        }
        <div></div>
        \${
          !this.link
            ? html\`
        <div></div>
        <button>
          <div></div>
          <div></div>
          <div></div>
        </button>
        <div></div>
        \`
            : null
        }
        <div></div
      ></my-fragment>

      \`;
  }
}
"
`;

exports[`Lit > jsx > Javascript Test > rootShow 1`] = `
"import { LitElement, html, css } from \\"lit\\";
import { customElement, property, state, query } from \\"lit/decorators.js\\";

export interface RenderStylesProps {
  foo: string;
}

@customElement(\\"render-styles\\")
export default class RenderStyles extends LitElement {
  createRenderRoot() {
    return this;
  }

  @property() foo: any;

  render() {
    return html\`
        
        \${
          this.foo === \\"bar\\"
            ? html\`
      <div></div>
      <div><div></div></div>
      <div></div>
      \`
            : html\`
      <div><div></div></div>
      \`
        }

      \`;
  }
}
"
`;

exports[`Lit > jsx > Javascript Test > self-referencing component 1`] = `
"import { LitElement, html, css } from \\"lit\\";
import { customElement, property, state, query } from \\"lit/decorators.js\\";

@customElement(\\"my-component\\")
export default class MyComponent extends LitElement {
  createRenderRoot() {
    return this;
  }

  @property() name: any;

  render() {
    return html\`
      
      <div>
      <div></div>
      <div></div>
      <div></div>
      \${
        this.name === \\"Batman\\"
          ? html\`
      <div></div>
      <my-component name=\\"Bruce Wayne\\"></my-component>
      <div></div>
      \`
          : null
      }
      <div></div>
    </div>

    \`;
  }
}
"
`;

exports[`Lit > jsx > Javascript Test > self-referencing component with children 1`] = `
"import { LitElement, html, css } from \\"lit\\";
import { customElement, property, state, query } from \\"lit/decorators.js\\";

@customElement(\\"my-component\\")
export default class MyComponent extends LitElement {
  createRenderRoot() {
    return this;
  }

  @property() name: any;
  @property() children: any;

  render() {
    return html\`
      
      <div>
      <div></div>
      <div></div>
      <div></div>
      <div></div>
      <div></div>
      \${
        this.name === \\"Batman\\"
          ? html\`
      <div></div>
      <my-component name=\\"Bruce\\"
        ><div></div>
        <div><div></div></div>
        <div></div
      ></my-component>
      <div></div>
      \`
          : null
      }
      <div></div>
    </div>

    \`;
  }
}
"
`;

exports[`Lit > jsx > Javascript Test > showWithFor 1`] = `
"import { LitElement, html, css } from \\"lit\\";
import { customElement, property, state, query } from \\"lit/decorators.js\\";

interface Props {
  conditionA: boolean;
  items: string[];
}

@customElement(\\"nested-show\\")
export default class NestedShow extends LitElement {
  createRenderRoot() {
    return this;
  }

  @property() conditionA: any;
  @property() items: any;

  render() {
    return html\`
        
        \${
          this.conditionA
            ? html\`
      <div></div>
      \${this.items?.map(
        (item, index) => html\`
      <div><div></div></div>
      \`
      )}
      <div></div>
      \`
            : html\`
      <div><div></div></div>
      \`
        }

      \`;
  }
}
"
`;

exports[`Lit > jsx > Javascript Test > spreadAttrs 1`] = `
"import { LitElement, html, css } from \\"lit\\";
import { customElement, property, state, query } from \\"lit/decorators.js\\";

@customElement(\\"my-basic-component\\")
export default class MyBasicComponent extends LitElement {
  createRenderRoot() {
    return this;
  }

  render() {
    return html\`
      
      <input />

    \`;
  }
}
"
`;

exports[`Lit > jsx > Javascript Test > spreadNestedProps 1`] = `
"import { LitElement, html, css } from \\"lit\\";
import { customElement, property, state, query } from \\"lit/decorators.js\\";

@customElement(\\"my-basic-component\\")
export default class MyBasicComponent extends LitElement {
  createRenderRoot() {
    return this;
  }

  @property() nested: any;

  render() {
    return html\`
      
      <input />

    \`;
  }
}
"
`;

exports[`Lit > jsx > Javascript Test > spreadProps 1`] = `
"import { LitElement, html, css } from \\"lit\\";
import { customElement, property, state, query } from \\"lit/decorators.js\\";

@customElement(\\"my-basic-component\\")
export default class MyBasicComponent extends LitElement {
  createRenderRoot() {
    return this;
  }

  render() {
    return html\`
      
      <input />

    \`;
  }
}
"
`;

exports[`Lit > jsx > Javascript Test > styleClassAndCss 1`] = `
"import { LitElement, html, css } from \\"lit\\";
import { customElement, property, state, query } from \\"lit/decorators.js\\";

@customElement(\\"my-component\\")
export default class MyComponent extends LitElement {
  createRenderRoot() {
    return this;
  }

  render() {
    return html\`
        <style>.div {
display: flex;
flex-direction: column;
align-items: stretch;
}
</style>
        <div></div>

      \`;
  }
}
"
`;

exports[`Lit > jsx > Javascript Test > subComponent 1`] = `
"import \\"./foo-sub-component.js\\";

import { LitElement, html, css } from \\"lit\\";
import { customElement, property, state, query } from \\"lit/decorators.js\\";

@customElement(\\"sub-component\\")
export default class SubComponent extends LitElement {
  createRenderRoot() {
    return this;
  }

  render() {
    return html\`
      
      <my-foo></my-foo>

    \`;
  }
}
"
`;

exports[`Lit > jsx > Javascript Test > svgComponent 1`] = `
"import { LitElement, html, css } from \\"lit\\";
import { customElement, property, state, query } from \\"lit/decorators.js\\";

@customElement(\\"svg-component\\")
export default class SvgComponent extends LitElement {
  createRenderRoot() {
    return this;
  }

  render() {
    return html\`
      
      <svg  .viewbox=\${\\"0 0 \\" + 42 + \\" \\" + 42} ><div ></div>
    <defs ><div ></div>
    <filter  filterunits=\\"userSpaceOnUse\\" ><div ></div>
    <feFlood ></feFlood>
    <div ></div>
    <feBlend ></feBlend>
    <div ></div>
    <feGaussianBlur  .stddeviation=\${7} ></feGaussianBlur>
    <div ></div></filter>
    <div ></div></defs>
    <div ></div></svg>
    \`;
  }
}
"
`;

exports[`Lit > jsx > Javascript Test > typeDependency 1`] = `
"import { LitElement, html, css } from \\"lit\\";
import { customElement, property, state, query } from \\"lit/decorators.js\\";

import type { Foo } from \\"./foo-type\\";
import type { Foo as Foo2 } from \\"./type-export\\";
export type TypeDependencyProps = {
  foo: Foo;
  foo2: Foo2;
};

@customElement(\\"type-dependency\\")
export default class TypeDependency extends LitElement {
  createRenderRoot() {
    return this;
  }

  @property() foo: any;

  render() {
    return html\`
        
        <div><div></div></div>

      \`;
  }
}
"
`;

exports[`Lit > jsx > Javascript Test > use-style 1`] = `
"import { LitElement, html, css } from \\"lit\\";
import { customElement, property, state, query } from \\"lit/decorators.js\\";

@customElement(\\"my-component\\")
export default class MyComponent extends LitElement {
  createRenderRoot() {
    return this;
  }

  render() {
    return html\`
        <style>button {
background: blue;
color: white;
font-size: 12px;
outline: 1px solid black;
}
</style>
        <button><div></div></button>

      \`;
  }
}
"
`;

exports[`Lit > jsx > Javascript Test > use-style-and-css 1`] = `
"import { LitElement, html, css } from \\"lit\\";
import { customElement, property, state, query } from \\"lit/decorators.js\\";

@customElement(\\"my-component\\")
export default class MyComponent extends LitElement {
  createRenderRoot() {
    return this;
  }

  render() {
    return html\`
        <style>.button {
background: blue;
color: white;
}

button {
font-size: 12px;
outline: 1px solid black;
}
</style>
        <button><div></div></button>

      \`;
  }
}
"
`;

exports[`Lit > jsx > Javascript Test > use-style-outside-component 1`] = `
"import { LitElement, html, css } from \\"lit\\";
import { customElement, property, state, query } from \\"lit/decorators.js\\";

@customElement(\\"my-component\\")
export default class MyComponent extends LitElement {
  createRenderRoot() {
    return this;
  }

  render() {
    return html\`
        <style>button {
background: blue;
color: white;
font-size: 12px;
outline: 1px solid black;
}
</style>
        <button><div></div></button>

      \`;
  }
}
"
`;

exports[`Lit > jsx > Remove Internal mitosis package 1`] = `
"import { LitElement, html, css } from \\"lit\\";
import { customElement, property, state, query } from \\"lit/decorators.js\\";

@customElement(\\"my-basic-component\\")
export default class MyBasicComponent extends LitElement {
  createRenderRoot() {
    return this;
  }

  @state() name = \\"PatrickJS\\";

  render() {
    return html\`
      
      <div>
      <div></div>
      <div></div>
      <div></div>
    </div>

    \`;
  }
}
"
`;

exports[`Lit > jsx > Typescript Test > AdvancedRef 1`] = `
"import { LitElement, html, css } from \\"lit\\";
import { customElement, property, state, query } from \\"lit/decorators.js\\";

export interface Props {
  showInput: boolean;
}

@customElement(\\"my-basic-ref-component\\")
export default class MyBasicRefComponent extends LitElement {
  createRenderRoot() {
    return this;
  }

  @query('[ref=\\"inputRef\\"]')
  inputRef!: HTMLElement;

  @query('[ref=\\"inputNoArgRef\\"]')
  inputNoArgRef!: HTMLElement;

  @property() showInput: any;

  @state() name = \\"PatrickJS\\";

  onBlur = function onBlur() {
    // Maintain focus
    inputRef.focus();
  };
  lowerCaseName = function lowerCaseName() {
    return this.name.toLowerCase();
  };

  updated() {
    console.log(\\"Received an update\\");
  }

  render() {
    return html\`
         <style>.input {
 color: red;
}
</style>
         <div>
         <div></div>
         \${
           this.showInput
             ? html\`<my-fragment
           ><div></div>
           <input @blur=\${(event) => this.onBlur()} @change=\${(event) =>
                 (this.name = event.target.value)} />
           <div></div>
           <label><div></div></label>
           <div></div>
           <select name=\\"cars\\">
             <div></div>
             <option><div></div></option>
             <div></div>
             <option><div></div></option>
             <div></div>
           </select>
           <div></div></my-fragment
         >\`
             : null
         }
         <div></div>
         <div></div>
         <div></div>
       </div>

       \`;
  }
}
"
`;

exports[`Lit > jsx > Typescript Test > Basic 1`] = `
"export const DEFAULT_VALUES = {
  name: \\"Steve\\",
};

import { LitElement, html, css } from \\"lit\\";
import { customElement, property, state, query } from \\"lit/decorators.js\\";

export interface MyBasicComponentProps {
  id: string;
}

@customElement(\\"my-basic-component\\")
export default class MyBasicComponent extends LitElement {
  createRenderRoot() {
    return this;
  }

  @state() name = \\"Steve\\";
  @state() age = 1;
  @state() sports = [\\"\\"];

  underscore_fn_name() {
    return \\"bar\\";
  }

  render() {
    return html\`
        <style>.div {
padding: 10px;
}
</style>
        <div>
        <div></div>
        <input @change=\${(myEvent) => (this.name = myEvent.target.value)} />
        <div></div>
      </div>

      \`;
  }
}
"
`;

exports[`Lit > jsx > Typescript Test > Basic 2`] = `
"import { LitElement, html, css } from \\"lit\\";
import { customElement, property, state, query } from \\"lit/decorators.js\\";

@customElement(\\"my-basic-for-show-component\\")
export default class MyBasicForShowComponent extends LitElement {
  createRenderRoot() {
    return this;
  }

  @state() name = \\"PatrickJS\\";
  @state() names = [\\"Steve\\", \\"PatrickJS\\"];

  render() {
    return html\`
      
      <div>
      <div></div>
      \${this.names?.map(
        (person, index) =>
          html\`\${
            person === this.name
              ? html\`
      <div></div>
      <input @change=\${(event) => {
        this.name = event.target.value + \\" and \\" + person;
      }} />
      <div></div>
      <div></div>
      <div></div>
      \`
              : null
          }\`
      )}
      <div></div>
    </div>

    \`;
  }
}
"
`;

exports[`Lit > jsx > Typescript Test > Basic Context 1`] = `
"import { Injector, createInjector, MyService } from \\"@dummy/injection-js\\";

import { LitElement, html, css } from \\"lit\\";
import { customElement, property, state, query } from \\"lit/decorators.js\\";

@customElement(\\"my-basic-component\\")
export default class MyBasicComponent extends LitElement {
  createRenderRoot() {
    return this;
  }

  @state() name = \\"PatrickJS\\";

  onChange = function onChange() {
    const change = myService.method(\\"change\\");
    console.log(change);
  };

  connectedCallback() {
    const bye = myService.method(\\"hi\\");
    console.log(bye);
  }

  render() {
    return html\`
        
        <div>
        <div></div>
        <div></div>
        <div></div>
        <input @change=\${(event) => this.onChange} />
        <div></div>
      </div>

      \`;
  }
}
"
`;

exports[`Lit > jsx > Typescript Test > Basic OnMount Update 1`] = `
"import { LitElement, html, css } from \\"lit\\";
import { customElement, property, state, query } from \\"lit/decorators.js\\";

export interface Props {
  hi: string;
  bye: string;
}

@customElement(\\"my-basic-on-mount-update-component\\")
export default class MyBasicOnMountUpdateComponent extends LitElement {
  createRenderRoot() {
    return this;
  }

  @property() hi: any;
  @property() bye: any;

  @state() name = \\"PatrickJS\\";
  @state() names = [\\"Steve\\", \\"PatrickJS\\"];

  connectedCallback() {
    this.name = \\"PatrickJS onMount\\" + this.bye;
  }

  render() {
    return html\`
        
        <div>
        <div></div>
        <div></div>
      </div>

      \`;
  }
}
"
`;

exports[`Lit > jsx > Typescript Test > Basic Outputs 1`] = `
"import { LitElement, html, css } from \\"lit\\";
import { customElement, property, state, query } from \\"lit/decorators.js\\";

@customElement(\\"my-basic-outputs-component\\")
export default class MyBasicOutputsComponent extends LitElement {
  createRenderRoot() {
    return this;
  }

  @property() onMessage: any;
  @property() onEvent: any;
  @property() message: any;

  @state() name = \\"PatrickJS\\";

  connectedCallback() {
    this.onMessage(this.name);
    this.onEvent(this.message);
  }

  render() {
    return html\`
      
      <div></div>

    \`;
  }
}
"
`;

exports[`Lit > jsx > Typescript Test > Basic Outputs Meta 1`] = `
"import { LitElement, html, css } from \\"lit\\";
import { customElement, property, state, query } from \\"lit/decorators.js\\";

@customElement(\\"my-basic-outputs-component\\")
export default class MyBasicOutputsComponent extends LitElement {
  createRenderRoot() {
    return this;
  }

  @property() onMessage: any;
  @property() onEvent: any;
  @property() message: any;

  @state() name = \\"PatrickJS\\";

  connectedCallback() {
    this.onMessage(this.name);
    this.onEvent(this.message);
  }

  render() {
    return html\`
      
      <div></div>

    \`;
  }
}
"
`;

exports[`Lit > jsx > Typescript Test > BasicAttribute 1`] = `
"import { LitElement, html, css } from \\"lit\\";
import { customElement, property, state, query } from \\"lit/decorators.js\\";

@customElement(\\"my-component\\")
export default class MyComponent extends LitElement {
  createRenderRoot() {
    return this;
  }

  render() {
    return html\`
      
      <input />

    \`;
  }
}
"
`;

exports[`Lit > jsx > Typescript Test > BasicBooleanAttribute 1`] = `
"import MyBooleanAttributeComponent from \\"./basic-boolean-attribute-component.raw\\";

import { LitElement, html, css } from \\"lit\\";
import { customElement, property, state, query } from \\"lit/decorators.js\\";

type Props = {
  children: any;
  type: string;
};

@customElement(\\"my-boolean-attribute\\")
export default class MyBooleanAttribute extends LitElement {
  createRenderRoot() {
    return this;
  }

  @property() children: any;
  @property() type: any;

  render() {
    return html\`
        
        <div>
        <div></div>
        <div></div>
        <div></div>
        <div></div>
        <div></div>
        <my-boolean-attribute-component
          .toggle=\\"\${true}\\"
        ></my-boolean-attribute-component>
        <div></div>
        <my-boolean-attribute-component
          .toggle=\\"\${true}\\"
        ></my-boolean-attribute-component>
        <div></div>
        <my-boolean-attribute-component
          .list=\\"\${null}\\"
        ></my-boolean-attribute-component>
        <div></div>
      </div>

      \`;
  }
}
"
`;

exports[`Lit > jsx > Typescript Test > BasicChildComponent 1`] = `
"import MyBasicComponent from \\"./basic.raw\\";
import MyBasicOnMountUpdateComponent from \\"./basic-onMount-update.raw\\";

import { LitElement, html, css } from \\"lit\\";
import { customElement, property, state, query } from \\"lit/decorators.js\\";

@customElement(\\"my-basic-child-component\\")
export default class MyBasicChildComponent extends LitElement {
  createRenderRoot() {
    return this;
  }

  @state() name = \\"Steve\\";
  @state() dev = \\"PatrickJS\\";

  render() {
    return html\`
      
      <div>
      <div></div>
      <my-basic-component .id=\\"\${this.dev}\\"></my-basic-component>
      <div></div>
      <div>
        <div></div>
        <my-basic-on-mount-update-component
          .hi=\\"\${this.name}\\"
          .bye=\\"\${this.dev}\\"
        ></my-basic-on-mount-update-component>
        <div></div>
      </div>
      <div></div>
    </div>

    \`;
  }
}
"
`;

exports[`Lit > jsx > Typescript Test > BasicFor 1`] = `
"import { LitElement, html, css } from \\"lit\\";
import { customElement, property, state, query } from \\"lit/decorators.js\\";

@customElement(\\"my-basic-for-component\\")
export default class MyBasicForComponent extends LitElement {
  createRenderRoot() {
    return this;
  }

  @state() name = \\"PatrickJS\\";
  @state() names = [\\"Steve\\", \\"PatrickJS\\"];

  connectedCallback() {
    console.log(\\"onMount code\\");
  }

  render() {
    return html\`
      
      <div>
      <div></div>
      \${this.names?.map(
        (person, index) => html\`<my-fragment
        ><div></div>
        <input @change=\${(event) => {
          this.name = event.target.value + \\" and \\" + person;
        }} />
        <div></div>
        <div></div>
        <div></div></my-fragment
      >\`
      )}
      <div></div>
    </div>

    \`;
  }
}
"
`;

exports[`Lit > jsx > Typescript Test > BasicRef 1`] = `
"import { LitElement, html, css } from \\"lit\\";
import { customElement, property, state, query } from \\"lit/decorators.js\\";

export interface Props {
  showInput: boolean;
}

@customElement(\\"my-basic-ref-component\\")
export default class MyBasicRefComponent extends LitElement {
  createRenderRoot() {
    return this;
  }

  @query('[ref=\\"inputRef\\"]')
  inputRef!: HTMLElement;

  @query('[ref=\\"inputNoArgRef\\"]')
  inputNoArgRef!: HTMLElement;

  @property() showInput: any;

  @state() name = \\"PatrickJS\\";

  onBlur = function onBlur() {
    // Maintain focus
    inputRef.focus();
  };
  lowerCaseName = function lowerCaseName() {
    return this.name.toLowerCase();
  };

  render() {
    return html\`
         <style>.input {
 color: red;
}
</style>
         <div>
         <div></div>
         \${
           this.showInput
             ? html\`<my-fragment
           ><div></div>
           <input @blur=\${(event) => this.onBlur()} @change=\${(event) =>
                 (this.name = event.target.value)} />
           <div></div>
           <label><div></div></label>
           <div></div>
           <select name=\\"cars\\">
             <div></div>
             <option><div></div></option>
             <div></div>
             <option><div></div></option>
             <div></div>
           </select>
           <div></div></my-fragment
         >\`
             : null
         }
         <div></div>
         <div></div>
         <div></div>
       </div>

       \`;
  }
}
"
`;

exports[`Lit > jsx > Typescript Test > BasicRefAssignment 1`] = `
"import { LitElement, html, css } from \\"lit\\";
import { customElement, property, state, query } from \\"lit/decorators.js\\";

export interface Props {
  showInput: boolean;
}

@customElement(\\"my-basic-ref-assignment-component\\")
export default class MyBasicRefAssignmentComponent extends LitElement {
  createRenderRoot() {
    return this;
  }

  handlerClick = function handlerClick(event) {
    event.preventDefault();
    console.log(\\"current value\\", holdValueRef);
    holdValueRef = holdValueRef + \\"JS\\";
  };

  render() {
    return html\`
        
        <div ><div ></div>
      <button  @click=\${(evt) => this.handlerClick(evt)} ><div ></div></button>
      <div ></div></div>
      \`;
  }
}
"
`;

exports[`Lit > jsx > Typescript Test > BasicRefPrevious 1`] = `
"export function usePrevious<T>(value: T) {
  // The ref object is a generic container whose current property is mutable ...
  // ... and can hold any value, similar to an instance property on a class
  let ref = useRef<T>(null); // Store current value in ref

  onUpdate(() => {
    ref = value;
  }, [value]); // Only re-run if value changes
  // Return previous value (happens before update in useEffect above)

  return ref;
}

import { LitElement, html, css } from \\"lit\\";
import { customElement, property, state, query } from \\"lit/decorators.js\\";

export interface Props {
  showInput: boolean;
}

@customElement(\\"my-previous-component\\")
export default class MyPreviousComponent extends LitElement {
  createRenderRoot() {
    return this;
  }

  @state() count = 0;

  updated() {
    prevCount = this.count;
  }

  render() {
    return html\`
        
        <div ><div ></div>
      <h1 ><div ></div>
      <div ></div>
      <div ></div>
      <div ></div>
      <div ></div></h1>
      <div ></div>
      <button  @click=\${(event) => (this.count += 1)} ><div ></div></button>
      <div ></div></div>
      \`;
  }
}
"
`;

exports[`Lit > jsx > Typescript Test > Button 1`] = `
"import { LitElement, html, css } from \\"lit\\";
import { customElement, property, state, query } from \\"lit/decorators.js\\";

export interface ButtonProps {
  attributes?: any;
  text?: string;
  link?: string;
  openLinkInNewTab?: boolean;
}

@customElement(\\"my-button\\")
export default class Button extends LitElement {
  createRenderRoot() {
    return this;
  }

  @property() link: any;
  @property() attributes: any;
  @property() openLinkInNewTab: any;
  @property() text: any;

  render() {
    return html\`
        
        <div>
        <div></div>
        \${
          this.link
            ? html\`
        <div></div>
        <a
          ><div></div>
          <div></div>
          <div></div
        ></a>
        <div></div>
        \`
            : null
        }
        <div></div>
        \${
          !this.link
            ? html\`
        <div></div>
        <button>
          <div></div>
          <div></div>
          <div></div>
        </button>
        <div></div>
        \`
            : null
        }
        <div></div>
      </div>

      \`;
  }
}
"
`;

exports[`Lit > jsx > Typescript Test > Columns 1`] = `
"import { LitElement, html, css } from \\"lit\\";
import { customElement, property, state, query } from \\"lit/decorators.js\\";

type Column = {
  content: any; // TODO: Implement this when support for dynamic CSS lands

  width?: number;
};
export interface ColumnProps {
  columns?: Column[]; // TODO: Implement this when support for dynamic CSS lands

  space?: number; // TODO: Implement this when support for dynamic CSS lands

  stackColumnsAt?: \\"tablet\\" | \\"mobile\\" | \\"never\\"; // TODO: Implement this when support for dynamic CSS lands

  reverseColumnsWhenStacked?: boolean;
}

@customElement(\\"my-column\\")
export default class Column extends LitElement {
  createRenderRoot() {
    return this;
  }

  @property() columns: any;
  @property() space: any;

  getColumns() {
    return this.columns || [];
  }
  getGutterSize() {
    return typeof this.space === \\"number\\" ? this.space || 0 : 20;
  }
  getWidth(index) {
    const columns = this.getColumns();
    return (columns[index] && columns[index].width) || 100 / columns.length;
  }
  getColumnCssWidth(index) {
    const columns = this.getColumns();
    const gutterSize = this.getGutterSize();
    const subtractWidth = (gutterSize * (columns.length - 1)) / columns.length;
    return \`calc(\${this.getWidth(index)}% - \${subtractWidth}px)\`;
  }

  render() {
    return html\`
         <style>.div {
 display: flex;
 flex-direction: column;
 align-items: stretch;
 line-height: normal;
}
@media (max-width: 999px) {
 .div {
   flex-direction: row;
 }
}
@media (max-width: 639px) {
 .div {
   flex-direction: row-reverse;
 }
}
.div-2 {
 flex-grow: 1;
}
</style>
         <div>
         <div></div>
         \${this.columns?.map(
           (column, index) => html\`
         <div>
           <div></div>
           <div></div>
           <div></div>
           <div></div>
           <div></div>
         </div>
         \`
         )}
         <div></div>
       </div>

       \`;
  }
}
"
`;

exports[`Lit > jsx > Typescript Test > ContentSlotHtml 1`] = `
"import { LitElement, html, css } from \\"lit\\";
import { customElement, property, state, query } from \\"lit/decorators.js\\";

type Props = {
  [key: string]: string | JSX.Element;
  slotTesting: JSX.Element;
};

@customElement(\\"content-slot-code\\")
export default class ContentSlotCode extends LitElement {
  createRenderRoot() {
    return this;
  }

  @property() slotTesting: any;

  render() {
    return html\`
        
        <div>
        <div></div>
        <my-slot .name=\\"\${this.slotTesting}\\"></my-slot>
        <div></div>
        <div>
          <div></div>
          <hr />
          <div></div>
        </div>
        <div></div>
        <div>
          <div></div>
          <my-slot></my-slot>
          <div></div>
        </div>
        <div></div>
      </div>

      \`;
  }
}
"
`;

exports[`Lit > jsx > Typescript Test > ContentSlotJSX 1`] = `
"import { LitElement, html, css } from \\"lit\\";
import { customElement, property, state, query } from \\"lit/decorators.js\\";

type Props = {
  [key: string]: string | JSX.Element;
};

@customElement(\\"content-slot-jsx-code\\")
export default class ContentSlotJsxCode extends LitElement {
  createRenderRoot() {
    return this;
  }

  @property() slotContent: any;
  @property() children: any;
  @property() slotReference: any;
  @property() attributes: any;
  @property() content: any;

  @state() name = \\"king\\";
  @state() showContent = false;

  get cls() {
    return this.slotContent && this.children ? \`\${this.name}-content\` : \\"\\";
  }
  show() {
    this.slotContent ? 1 : \\"\\";
  }

  render() {
    return html\`
         
         \${
           this.slotReference
             ? html\`<div ></div>
       <div  .name=\${this.slotContent ? \\"name1\\" : \\"name2\\"}  @click=\${(event) =>
                 this.show()} ><div ></div>
       \${
         this.showContent && this.slotContent
           ? html\`<div ></div>
       <my-slot  name=\\"content\\" ><div ></div></my-slot>
       <div ></div>\`
           : null
       }
       <div ></div>
       <div ><div ></div>
       <hr  />
       <div ></div></div>
       <div ></div>
       <div ><div ></div></div>
       <div ></div></div>
       <div ></div>\`
             : null
         }
       \`;
  }
}
"
`;

exports[`Lit > jsx > Typescript Test > CustomCode 1`] = `
"import { LitElement, html, css } from \\"lit\\";
import { customElement, property, state, query } from \\"lit/decorators.js\\";

export interface CustomCodeProps {
  code: string;
  replaceNodes?: boolean;
}

@customElement(\\"custom-code\\")
export default class CustomCode extends LitElement {
  createRenderRoot() {
    return this;
  }

  @query('[ref=\\"elem\\"]')
  elem!: HTMLElement;

  @property() replaceNodes: any;
  @property() code: any;

  @state() scriptsInserted = [];
  @state() scriptsRun = [];

  findAndRunScripts() {
    // TODO: Move this function to standalone one in '@builder.io/utils'
    if (elem && typeof window !== \\"undefined\\") {
      /** @type {HTMLScriptElement[]} */
      const scripts = elem.getElementsByTagName(\\"script\\");

      for (let i = 0; i < scripts.length; i++) {
        const script = scripts[i];

        if (script.src) {
          if (this.scriptsInserted.includes(script.src)) {
            continue;
          }

          this.scriptsInserted.push(script.src);
          const newScript = document.createElement(\\"script\\");
          newScript.async = true;
          newScript.src = script.src;
          document.head.appendChild(newScript);
        } else if (
          !script.type ||
          [
            \\"text/javascript\\",
            \\"application/javascript\\",
            \\"application/ecmascript\\",
          ].includes(script.type)
        ) {
          if (this.scriptsRun.includes(script.innerText)) {
            continue;
          }

          try {
            this.scriptsRun.push(script.innerText);
            new Function(script.innerText)();
          } catch (error) {
            console.warn(\\"\`CustomCode\`: Error running script:\\", error);
          }
        }
      }
    }
  }

  connectedCallback() {
    this.findAndRunScripts();
  }

  render() {
    return html\`
        
        <div .innerhtml=\\"\${this.code}\\"></div>

      \`;
  }
}
"
`;

exports[`Lit > jsx > Typescript Test > Embed 1`] = `
"import { LitElement, html, css } from \\"lit\\";
import { customElement, property, state, query } from \\"lit/decorators.js\\";

export interface CustomCodeProps {
  code: string;
  replaceNodes?: boolean;
}

@customElement(\\"custom-code\\")
export default class CustomCode extends LitElement {
  createRenderRoot() {
    return this;
  }

  @query('[ref=\\"elem\\"]')
  elem!: HTMLElement;

  @property() replaceNodes: any;
  @property() code: any;

  @state() scriptsInserted = [];
  @state() scriptsRun = [];

  findAndRunScripts() {
    // TODO: Move this function to standalone one in '@builder.io/utils'
    if (elem && typeof window !== \\"undefined\\") {
      /** @type {HTMLScriptElement[]} */
      const scripts = elem.getElementsByTagName(\\"script\\");

      for (let i = 0; i < scripts.length; i++) {
        const script = scripts[i];

        if (script.src) {
          if (this.scriptsInserted.includes(script.src)) {
            continue;
          }

          this.scriptsInserted.push(script.src);
          const newScript = document.createElement(\\"script\\");
          newScript.async = true;
          newScript.src = script.src;
          document.head.appendChild(newScript);
        } else if (
          !script.type ||
          [
            \\"text/javascript\\",
            \\"application/javascript\\",
            \\"application/ecmascript\\",
          ].includes(script.type)
        ) {
          if (this.scriptsRun.includes(script.innerText)) {
            continue;
          }

          try {
            this.scriptsRun.push(script.innerText);
            new Function(script.innerText)();
          } catch (error) {
            console.warn(\\"\`CustomCode\`: Error running script:\\", error);
          }
        }
      }
    }
  }

  connectedCallback() {
    this.findAndRunScripts();
  }

  render() {
    return html\`
        
        <div .innerhtml=\\"\${this.code}\\"></div>

      \`;
  }
}
"
`;

exports[`Lit > jsx > Typescript Test > Form 1`] = `
"import { BuilderBlock as BuilderBlockComponent } from \\"@fake\\";
import { Builder, builder } from \\"@builder.io/sdk\\";
import { BuilderBlocks } from \\"@fake\\";
import { set } from \\"@fake\\";
import { get } from \\"@fake\\";

import { LitElement, html, css } from \\"lit\\";
import { customElement, property, state, query } from \\"lit/decorators.js\\";

export interface FormProps {
  attributes?: any;
  name?: string;
  action?: string;
  validate?: boolean;
  method?: string;
  builderBlock?: BuilderElement;
  sendSubmissionsTo?: string;
  sendSubmissionsToEmail?: string;
  sendWithJs?: boolean;
  contentType?: string;
  customHeaders?: {
    [key: string]: string;
  };
  successUrl?: string;
  previewState?: FormState;
  successMessage?: BuilderElement[];
  errorMessage?: BuilderElement[];
  sendingMessage?: BuilderElement[];
  resetFormOnSubmit?: boolean;
  errorMessagePath?: string;
}
export type FormState = \\"unsubmitted\\" | \\"sending\\" | \\"success\\" | \\"error\\";

@customElement(\\"form-component\\")
export default class FormComponent extends LitElement {
  createRenderRoot() {
    return this;
  }

  @query('[ref=\\"formRef\\"]')
  formRef!: HTMLElement;

  @property() previewState: any;
  @property() sendWithJs: any;
  @property() sendSubmissionsTo: any;
  @property() action: any;
  @property() customHeaders: any;
  @property() contentType: any;
  @property() sendSubmissionsToEmail: any;
  @property() name: any;
  @property() method: any;
  @property() errorMessagePath: any;
  @property() resetFormOnSubmit: any;
  @property() successUrl: any;
  @property() validate: any;
  @property() attributes: any;
  @property() builderBlock: any;
  @property() errorMessage: any;
  @property() sendingMessage: any;
  @property() successMessage: any;

  @state() formState = \\"unsubmitted\\";
  @state() responseData = null;
  @state() formErrorMessage = \\"\\";

  get submissionState() {
    return (Builder.isEditing && this.previewState) || this.formState;
  }
  onSubmit(event) {
    const sendWithJs = this.sendWithJs || this.sendSubmissionsTo === \\"email\\";

    if (this.sendSubmissionsTo === \\"zapier\\") {
      event.preventDefault();
    } else if (sendWithJs) {
      if (!(this.action || this.sendSubmissionsTo === \\"email\\")) {
        event.preventDefault();
        return;
      }

      event.preventDefault();
      const el = event.currentTarget;
      const headers = this.customHeaders || {};
      let body;
      const formData = new FormData(el); // TODO: maybe support null

      const formPairs = Array.from(
        event.currentTarget.querySelectorAll(\\"input,select,textarea\\")
      )
        .filter((el) => !!el.name)
        .map((el) => {
          let value;
          const key = el.name;

          if (el instanceof HTMLInputElement) {
            if (el.type === \\"radio\\") {
              if (el.checked) {
                value = el.name;
                return {
                  key,
                  value,
                };
              }
            } else if (el.type === \\"checkbox\\") {
              value = el.checked;
            } else if (el.type === \\"number\\" || el.type === \\"range\\") {
              const num = el.valueAsNumber;

              if (!isNaN(num)) {
                value = num;
              }
            } else if (el.type === \\"file\\") {
              // TODO: one vs multiple files
              value = el.files;
            } else {
              value = el.value;
            }
          } else {
            value = el.value;
          }

          return {
            key,
            value,
          };
        });
      let contentType = this.contentType;

      if (this.sendSubmissionsTo === \\"email\\") {
        contentType = \\"multipart/form-data\\";
      }

      Array.from(formPairs).forEach(({ value }) => {
        if (
          value instanceof File ||
          (Array.isArray(value) && value[0] instanceof File) ||
          value instanceof FileList
        ) {
          contentType = \\"multipart/form-data\\";
        }
      }); // TODO: send as urlEncoded or multipart by default
      // because of ease of use and reliability in browser API
      // for encoding the form?

      if (contentType !== \\"application/json\\") {
        body = formData;
      } else {
        // Json
        const json = {};
        Array.from(formPairs).forEach(({ value, key }) => {
          set(json, key, value);
        });
        body = JSON.stringify(json);
      }

      if (contentType && contentType !== \\"multipart/form-data\\") {
        if (
          /* Zapier doesn't allow content-type header to be sent from browsers */
          !(sendWithJs && this.action?.includes(\\"zapier.com\\"))
        ) {
          headers[\\"content-type\\"] = contentType;
        }
      }

      const presubmitEvent = new CustomEvent(\\"presubmit\\", {
        detail: {
          body,
        },
      });

      if (formRef) {
        formRef.dispatchEvent(presubmitEvent);

        if (presubmitEvent.defaultPrevented) {
          return;
        }
      }

      this.formState = \\"sending\\";
      const formUrl = \`\${
        builder.env === \\"dev\\" ? \\"http://localhost:5000\\" : \\"https://builder.io\\"
      }/api/v1/form-submit?apiKey=\${builder.apiKey}&to=\${btoa(
        this.sendSubmissionsToEmail || \\"\\"
      )}&name=\${encodeURIComponent(this.name || \\"\\")}\`;
      fetch(
        this.sendSubmissionsTo === \\"email\\" ? formUrl : this.action,
        /* TODO: throw error if no action URL */
        {
          body,
          headers,
          method: this.method || \\"post\\",
        }
      ).then(
        async (res) => {
          let body;
          const contentType = res.headers.get(\\"content-type\\");

          if (contentType && contentType.indexOf(\\"application/json\\") !== -1) {
            body = await res.json();
          } else {
            body = await res.text();
          }

          if (!res.ok && this.errorMessagePath) {
            /* TODO: allow supplying an error formatter function */
            let message = get(body, this.errorMessagePath);

            if (message) {
              if (typeof message !== \\"string\\") {
                /* TODO: ideally convert json to yaml so it woul dbe like
            error: - email has been taken */
                message = JSON.stringify(message);
              }

              this.formErrorMessage = message;
            }
          }

          this.responseData = body;
          this.formState = res.ok ? \\"success\\" : \\"error\\";

          if (res.ok) {
            const submitSuccessEvent = new CustomEvent(\\"submit:success\\", {
              detail: {
                res,
                body,
              },
            });

            if (formRef) {
              formRef.dispatchEvent(submitSuccessEvent);

              if (submitSuccessEvent.defaultPrevented) {
                return;
              }
              /* TODO: option to turn this on/off? */

              if (this.resetFormOnSubmit !== false) {
                formRef.reset();
              }
            }
            /* TODO: client side route event first that can be preventDefaulted */

            if (this.successUrl) {
              if (formRef) {
                const event = new CustomEvent(\\"route\\", {
                  detail: {
                    url: this.successUrl,
                  },
                });
                formRef.dispatchEvent(event);

                if (!event.defaultPrevented) {
                  location.href = this.successUrl;
                }
              } else {
                location.href = this.successUrl;
              }
            }
          }
        },
        (err) => {
          const submitErrorEvent = new CustomEvent(\\"submit:error\\", {
            detail: {
              error: err,
            },
          });

          if (formRef) {
            formRef.dispatchEvent(submitErrorEvent);

            if (submitErrorEvent.defaultPrevented) {
              return;
            }
          }

          this.responseData = err;
          this.formState = \\"error\\";
        }
      );
    }
  }

  render() {
    return html\`
         <style>.pre {
 padding: 10px;
 color: red;
 text-align: center;
}
</style>
         <form  .name=\${this.name}  @submit=\${(event) =>
      this.onSubmit(event)} ><div ></div>
       \${
         this.builderBlock && this.builderBlock.children
           ? html\`<div ></div>
       \${this.builderBlock?.children?.map(
         (block, index) =>
           html\`<builder-block-component  .key=\${block.id}  .block=\${block}  .index=\${index} ></builder-block-component>\`
       )}
       <div ></div>\`
           : null
       }
       <div ></div>
       \${
         this.submissionState === \\"error\\"
           ? html\`<div ></div>
       <builder-blocks  dataPath=\\"errorMessage\\"  .blocks=\${this.errorMessage} ></builder-blocks>
       <div ></div>\`
           : null
       }
       <div ></div>
       \${
         this.submissionState === \\"sending\\"
           ? html\`<div ></div>
       <builder-blocks  dataPath=\\"sendingMessage\\"  .blocks=\${this.sendingMessage} ></builder-blocks>
       <div ></div>\`
           : null
       }
       <div ></div>
       \${
         this.submissionState === \\"error\\" && this.responseData
           ? html\`<div ></div>
       <pre ><div ></div>
       <div ></div>
       <div ></div></pre>
       <div ></div>\`
           : null
       }
       <div ></div>
       \${
         this.submissionState === \\"success\\"
           ? html\`<div ></div>
       <builder-blocks  dataPath=\\"successMessage\\"  .blocks=\${this.successMessage} ></builder-blocks>
       <div ></div>\`
           : null
       }
       <div ></div></form>
       \`;
  }
}
"
`;

exports[`Lit > jsx > Typescript Test > Image 1`] = `
"import { LitElement, html, css } from \\"lit\\";
import { customElement, property, state, query } from \\"lit/decorators.js\\";

// TODO: AMP Support?
export interface ImageProps {
  _class?: string;
  image: string;
  sizes?: string;
  lazy?: boolean;
  height?: number;
  width?: number;
  altText?: string;
  backgroundSize?: string;
  backgroundPosition?: string; // TODO: Support generating Builder.io and or Shopify \`srcset\`s when needed

  srcset?: string; // TODO: Implement support for custom aspect ratios

  aspectRatio?: number; // TODO: This might not work as expected in terms of positioning

  children?: any;
}

@customElement(\\"my-image\\")
export default class Image extends LitElement {
  createRenderRoot() {
    return this;
  }

  @query('[ref=\\"pictureRef\\"]')
  pictureRef!: HTMLElement;

  @property() lazy: any;
  @property() altText: any;
  @property() _class: any;
  @property() image: any;
  @property() srcset: any;
  @property() sizes: any;
  @property() children: any;

  @state() scrollListener = null;
  @state() imageLoaded = false;
  @state() load = false;

  setLoaded() {
    this.imageLoaded = true;
  }
  useLazyLoading() {
    // TODO: Add more checks here, like testing for real web browsers
    return !!this.lazy && isBrowser();
  }
  isBrowser = function isBrowser() {
    return (
      typeof window !== \\"undefined\\" && window.navigator.product != \\"ReactNative\\"
    );
  };

  connectedCallback() {
    if (this.useLazyLoading()) {
      // throttled scroll capture listener
      const listener = () => {
        if (pictureRef) {
          const rect = pictureRef.getBoundingClientRect();
          const buffer = window.innerHeight / 2;

          if (rect.top < window.innerHeight + buffer) {
            setLoad(true);
            this.scrollListener = null;
            window.removeEventListener(\\"scroll\\", listener);
          }
        }
      };

      this.scrollListener = listener;
      window.addEventListener(\\"scroll\\", listener, {
        capture: true,
        passive: true,
      });
      listener();
    }
  }
  disconnectedCallback() {
    if (this.scrollListener) {
      window.removeEventListener(\\"scroll\\", this.scrollListener);
    }
  }

  render() {
    return html\`
         <style>.img {
 opacity: 1;
 transition: opacity 0.2s ease-in-out;
 object-fit: cover;
 object-position: center;
}
</style>
         <div>
         <div></div>
         <picture
           ><div></div>
           \${
             !this.useLazyLoading() || this.load
               ? html\`
           <div></div>
           <img aria-role=\${this.altText ? \\"presentation\\" : undefined} @load=\${(
                   event
                 ) => this.setLoaded()} />
           <div></div>
           \`
               : null
           }
           <div></div>
           <source />
           <div></div
         ></picture>
         <div></div>
         <div></div>
         <div></div>
       </div>

       \`;
  }
}
"
`;

exports[`Lit > jsx > Typescript Test > Image State 1`] = `
"import { LitElement, html, css } from \\"lit\\";
import { customElement, property, state, query } from \\"lit/decorators.js\\";

@customElement(\\"img-state-component\\")
export default class ImgStateComponent extends LitElement {
  createRenderRoot() {
    return this;
  }

  @state() canShow = true;
  @state() images = [\\"http://example.com/qwik.png\\"];

  render() {
    return html\`
      
      <div>
      <div></div>
      \${this.images?.map(
        (item, index) => html\`<my-fragment
        ><div></div>
        <img />
        <div></div></my-fragment
      >\`
      )}
      <div></div>
    </div>

    \`;
  }
}
"
`;

exports[`Lit > jsx > Typescript Test > Img 1`] = `
"import { Builder } from \\"@builder.io/sdk\\";

import { LitElement, html, css } from \\"lit\\";
import { customElement, property, state, query } from \\"lit/decorators.js\\";

export interface ImgProps {
  attributes?: any;
  imgSrc?: string;
  altText?: string;
  backgroundSize?: \\"cover\\" | \\"contain\\";
  backgroundPosition?:
    | \\"center\\"
    | \\"top\\"
    | \\"left\\"
    | \\"right\\"
    | \\"bottom\\"
    | \\"top left\\"
    | \\"top right\\"
    | \\"bottom left\\"
    | \\"bottom right\\";
}

@customElement(\\"img-component\\")
export default class ImgComponent extends LitElement {
  createRenderRoot() {
    return this;
  }

  @property() backgroundSize: any;
  @property() backgroundPosition: any;
  @property() attributes: any;
  @property() imgSrc: any;
  @property() altText: any;

  render() {
    return html\`
        
        <img />

      \`;
  }
}
"
`;

exports[`Lit > jsx > Typescript Test > Input 1`] = `
"import { Builder } from \\"@builder.io/sdk\\";

import { LitElement, html, css } from \\"lit\\";
import { customElement, property, state, query } from \\"lit/decorators.js\\";

export interface FormInputProps {
  type?: string;
  attributes?: any;
  name?: string;
  value?: string;
  placeholder?: string;
  defaultValue?: string;
  required?: boolean;
}

@customElement(\\"form-input-component\\")
export default class FormInputComponent extends LitElement {
  createRenderRoot() {
    return this;
  }

  @property() attributes: any;
  @property() defaultValue: any;
  @property() placeholder: any;
  @property() type: any;
  @property() name: any;
  @property() value: any;
  @property() required: any;

  render() {
    return html\`
        
        <input .name=\\"\${this.name}\\" .defaultvalue=\\"\${this.defaultValue}\\" />

      \`;
  }
}
"
`;

exports[`Lit > jsx > Typescript Test > RawText 1`] = `
"import { LitElement, html, css } from \\"lit\\";
import { customElement, property, state, query } from \\"lit/decorators.js\\";

export interface RawTextProps {
  attributes?: any;
  text?: string; // builderBlock?: any;
}

@customElement(\\"raw-text\\")
export default class RawText extends LitElement {
  createRenderRoot() {
    return this;
  }

  @property() attributes: any;
  @property() text: any;

  render() {
    return html\`
        
        <span  .innerhtml=\${this.text || \\"\\"} ></span>
      \`;
  }
}
"
`;

exports[`Lit > jsx > Typescript Test > Section 1`] = `
"import { LitElement, html, css } from \\"lit\\";
import { customElement, property, state, query } from \\"lit/decorators.js\\";

export interface SectionProps {
  maxWidth?: number;
  attributes?: any;
  children?: any;
}

@customElement(\\"section-component\\")
export default class SectionComponent extends LitElement {
  createRenderRoot() {
    return this;
  }

  @property() attributes: any;
  @property() maxWidth: any;
  @property() children: any;

  render() {
    return html\`
        
        <section>
        <div></div>
        <div></div>
        <div></div>
      </section>

      \`;
  }
}
"
`;

exports[`Lit > jsx > Typescript Test > Section 2`] = `
"import { LitElement, html, css } from \\"lit\\";
import { customElement, property, state, query } from \\"lit/decorators.js\\";

export interface SectionProps {
  maxWidth?: number;
  attributes?: any;
  children?: any;
}

@customElement(\\"section-state-component\\")
export default class SectionStateComponent extends LitElement {
  createRenderRoot() {
    return this;
  }

  @property() attributes: any;
  @property() children: any;

  @state() max = 42;
  @state() items = [42];

  render() {
    return html\`
        
        \${
          this.max
            ? html\`
      <div></div>
      \${this.items?.map(
        (item, index) => html\`
      <section>
        <div></div>
        <div></div>
        <div></div>
      </section>
      \`
      )}
      <div></div>
      \`
            : null
        }

      \`;
  }
}
"
`;

exports[`Lit > jsx > Typescript Test > Select 1`] = `
"import { Builder } from \\"@builder.io/sdk\\";

import { LitElement, html, css } from \\"lit\\";
import { customElement, property, state, query } from \\"lit/decorators.js\\";

export interface FormSelectProps {
  options?: {
    name?: string;
    value: string;
  }[];
  attributes?: any;
  name?: string;
  value?: string;
  defaultValue?: string;
}

@customElement(\\"select-component\\")
export default class SelectComponent extends LitElement {
  createRenderRoot() {
    return this;
  }

  @property() attributes: any;
  @property() value: any;
  @property() defaultValue: any;
  @property() name: any;
  @property() options: any;

  render() {
    return html\`
        
        <select .name=\\"\${this.name}\\" .defaultvalue=\\"\${this.defaultValue}\\">
        <div></div>
        \${this.options?.map(
          (option, index) => html\`
        <option data-index=\\"\${index}\\">
          <div></div>
          <div></div>
          <div></div>
        </option>
        \`
        )}
        <div></div>
      </select>

      \`;
  }
}
"
`;

exports[`Lit > jsx > Typescript Test > SlotDefault 1`] = `
"import { LitElement, html, css } from \\"lit\\";
import { customElement, property, state, query } from \\"lit/decorators.js\\";

type Props = {
  [key: string]: string;
};

@customElement(\\"slot-code\\")
export default class SlotCode extends LitElement {
  createRenderRoot() {
    return this;
  }

  render() {
    return html\`
        
        <div>
        <div></div>
        <my-slot
          ><div></div>
          <div><div></div></div>
          <div></div
        ></my-slot>
        <div></div>
      </div>

      \`;
  }
}
"
`;

exports[`Lit > jsx > Typescript Test > SlotHtml 1`] = `
"import ContentSlotCode from \\"./content-slot-jsx.raw\\";

import { LitElement, html, css } from \\"lit\\";
import { customElement, property, state, query } from \\"lit/decorators.js\\";

type Props = {
  [key: string]: string;
};

@customElement(\\"slot-code\\")
export default class SlotCode extends LitElement {
  createRenderRoot() {
    return this;
  }

  render() {
    return html\`
        
        <div ><div ></div>
      <content-slot-code ><div ></div>
      <my-slot  .testing=\${(<div>Hello</div>)} ></my-slot>
      <div ></div></content-slot-code>
      <div ></div></div>
      \`;
  }
}
"
`;

exports[`Lit > jsx > Typescript Test > SlotJsx 1`] = `
"import ContentSlotCode from \\"./content-slot-jsx.raw\\";

import { LitElement, html, css } from \\"lit\\";
import { customElement, property, state, query } from \\"lit/decorators.js\\";

type Props = {
  [key: string]: string;
};

@customElement(\\"slot-code\\")
export default class SlotCode extends LitElement {
  createRenderRoot() {
    return this;
  }

  render() {
    return html\`
        
        <div ><div ></div>
      <content-slot-code  .slotTesting=\${(
        <div>Hello</div>
      )} ></content-slot-code>
      <div ></div></div>
      \`;
  }
}
"
`;

exports[`Lit > jsx > Typescript Test > SlotNamed 1`] = `
"import { LitElement, html, css } from \\"lit\\";
import { customElement, property, state, query } from \\"lit/decorators.js\\";

type Props = {
  [key: string]: string;
};

@customElement(\\"slot-code\\")
export default class SlotCode extends LitElement {
  createRenderRoot() {
    return this;
  }

  render() {
    return html\`
        
        <div>
        <div></div>
        <my-slot name=\\"top\\"></my-slot>
        <div></div>
        <my-slot name=\\"left\\"><div></div></my-slot>
        <div></div>
        <my-slot><div></div></my-slot>
        <div></div>
      </div>

      \`;
  }
}
"
`;

exports[`Lit > jsx > Typescript Test > Stamped.io 1`] = `
"import { kebabCase } from \\"lodash\\";
import { snakeCase } from \\"lodash\\";

import { LitElement, html, css } from \\"lit\\";
import { customElement, property, state, query } from \\"lit/decorators.js\\";

type SmileReviewsProps = {
  productId: string;
  apiKey: string;
};

@customElement(\\"smile-reviews\\")
export default class SmileReviews extends LitElement {
  createRenderRoot() {
    return this;
  }

  @property() apiKey: any;
  @property() productId: any;

  @state() reviews = [];
  @state() name = \\"test\\";
  @state() showReviewPrompt = false;

  kebabCaseValue() {
    return kebabCase(\\"testThat\\");
  }
  snakeCaseValue() {
    return snakeCase(\\"testThis\\");
  }

  connectedCallback() {
    fetch(
      \`https://stamped.io/api/widget/reviews?storeUrl=builder-io.myshopify.com&apiKey=\${
        this.apiKey || \\"pubkey-8bbDq7W6w4sB3OWeM1HUy2s47702hM\\"
      }&productId=\${this.productId || \\"2410511106127\\"}\`
    )
      .then((res) => res.json())
      .then((data) => {
        this.reviews = data.data;
      });
  }

  render() {
    return html\`
         <style>.input {
 display: block;
}
.textarea {
 display: block;
}
.button {
 display: block;
}
.review {
 margin: 10px;
 padding: 10px;
 background: white;
 display: flex;
 border-radius: 5px;
 box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
}
.img {
 height: 30px;
 width: 30px;
 margin-right: 10px;
}
</style>
         <div  data-user=\${this.name} ><div ></div>
       <button  @click=\${(event) =>
         (this.showReviewPrompt = true)} ><div ></div></button>
       <div ></div>
       \${
         this.showReviewPrompt || \\"asdf\\"
           ? html\`<div ></div>
       <input  />
       <div ></div>
       <input  />
       <div ></div>
       <textarea ></textarea>
       <div ></div>
       <button  @click=\${(event) => {
         event.preventDefault();
         this.showReviewPrompt = false;
       }} ><div ></div></button>
       <div ></div>\`
           : null
       }
       <div ></div>
       \${this.reviews?.map(
         (review, index) =>
           html\`<div ><div ></div>
       <img  />
       <div ></div>
       <div ><div ></div>
       <div ><div ></div>
       <div ></div></div>
       <div ></div>
       <div ><div ></div></div>
       <div ></div>
       <div ><div ></div></div>
       <div ></div></div>
       <div ></div></div>\`
       )}
       <div ></div></div>
       \`;
  }
}
"
`;

exports[`Lit > jsx > Typescript Test > Submit 1`] = `
"import { LitElement, html, css } from \\"lit\\";
import { customElement, property, state, query } from \\"lit/decorators.js\\";

export interface ButtonProps {
  attributes?: any;
  text?: string;
}

@customElement(\\"submit-button\\")
export default class SubmitButton extends LitElement {
  createRenderRoot() {
    return this;
  }

  @property() attributes: any;
  @property() text: any;

  render() {
    return html\`
        
        <button>
        <div></div>
        <div></div>
        <div></div>
      </button>

      \`;
  }
}
"
`;

exports[`Lit > jsx > Typescript Test > Text 1`] = `
"import { Builder } from \\"@builder.io/sdk\\";

import { LitElement, html, css } from \\"lit\\";
import { customElement, property, state, query } from \\"lit/decorators.js\\";

export interface TextProps {
  attributes?: any;
  rtlMode: boolean;
  text?: string;
  content?: string;
  builderBlock?: any;
}

@customElement(\\"my-text\\")
export default class Text extends LitElement {
  createRenderRoot() {
    return this;
  }

  @property() text: any;
  @property() content: any;

  @state() name = \\"Decadef20\\";

  render() {
    return html\`
        
        <div  data-name=\${{
          test: this.name || \\"any name\\",
        }}  .contenteditable=\${allowEditingText || undefined}  .innerhtml=\${
      this.text || this.content || this.name || '<p class=\\"text-lg\\">my name</p>'
    } ></div>
      \`;
  }
}
"
`;

exports[`Lit > jsx > Typescript Test > Textarea 1`] = `
"import { LitElement, html, css } from \\"lit\\";
import { customElement, property, state, query } from \\"lit/decorators.js\\";

export interface TextareaProps {
  attributes?: any;
  name?: string;
  value?: string;
  defaultValue?: string;
  placeholder?: string;
}

@customElement(\\"my-textarea\\")
export default class Textarea extends LitElement {
  createRenderRoot() {
    return this;
  }

  @property() attributes: any;
  @property() placeholder: any;
  @property() name: any;
  @property() value: any;
  @property() defaultValue: any;

  render() {
    return html\`
        
        <textarea .name=\\"\${this.name}\\" .defaultvalue=\\"\${this.defaultValue}\\"></textarea>

      \`;
  }
}
"
`;

exports[`Lit > jsx > Typescript Test > Video 1`] = `
"import { LitElement, html, css } from \\"lit\\";
import { customElement, property, state, query } from \\"lit/decorators.js\\";

export interface VideoProps {
  attributes?: any;
  video?: string;
  autoPlay?: boolean;
  controls?: boolean;
  muted?: boolean;
  loop?: boolean;
  playsInline?: boolean;
  aspectRatio?: number;
  width?: number;
  height?: number;
  fit?: \\"contain\\" | \\"cover\\" | \\"fill\\";
  position?:
    | \\"center\\"
    | \\"top\\"
    | \\"left\\"
    | \\"right\\"
    | \\"bottom\\"
    | \\"top left\\"
    | \\"top right\\"
    | \\"bottom left\\"
    | \\"bottom right\\";
  posterImage?: string;
  lazyLoad?: boolean;
}

@customElement(\\"my-video\\")
export default class Video extends LitElement {
  createRenderRoot() {
    return this;
  }

  @property() attributes: any;
  @property() fit: any;
  @property() position: any;
  @property() video: any;
  @property() posterImage: any;
  @property() autoPlay: any;
  @property() muted: any;
  @property() controls: any;
  @property() loop: any;

  render() {
    return html\`
        
        <video></video>

      \`;
  }
}
"
`;

exports[`Lit > jsx > Typescript Test > arrowFunctionInUseStore 1`] = `
"import { LitElement, html, css } from \\"lit\\";
import { customElement, property, state, query } from \\"lit/decorators.js\\";

@customElement(\\"my-component\\")
export default class MyComponent extends LitElement {
  createRenderRoot() {
    return this;
  }

  @state() name = \\"steve\\";

  setName(value) {
    this.name = value;
  }
  updateNameWithArrowFn(value) {
    this.name = value;
  }

  render() {
    return html\`
         
         <div>
         <div></div>
         <div></div>
       </div>

       \`;
  }
}
"
`;

exports[`Lit > jsx > Typescript Test > basicForwardRef 1`] = `
"import { LitElement, html, css } from \\"lit\\";
import { customElement, property, state, query } from \\"lit/decorators.js\\";

export interface Props {
  showInput: boolean;
  inputRef: HTMLInputElement;
}

@customElement(\\"my-basic-forward-ref-component\\")
export default class MyBasicForwardRefComponent extends LitElement {
  createRenderRoot() {
    return this;
  }

  @query('[ref=\\"props.inputRef\\"]')
  propsInputRef!: HTMLElement;

  @property() inputRef: any;

  @state() name = \\"PatrickJS\\";

  render() {
    return html\`
        <style>.input {
color: red;
}
</style>
        <div>
        <div></div>
        <input @change=\${(event) => (this.name = event.target.value)} />
        <div></div>
      </div>

      \`;
  }
}
"
`;

exports[`Lit > jsx > Typescript Test > basicForwardRefMetadata 1`] = `
"import { LitElement, html, css } from \\"lit\\";
import { customElement, property, state, query } from \\"lit/decorators.js\\";

export interface Props {
  showInput: boolean;
  inputRef: HTMLInputElement;
}

@customElement(\\"my-basic-forward-ref-component\\")
export default class MyBasicForwardRefComponent extends LitElement {
  createRenderRoot() {
    return this;
  }

  @query('[ref=\\"props.inputRef\\"]')
  propsInputRef!: HTMLElement;

  @property() inputRef: any;

  @state() name = \\"PatrickJS\\";

  render() {
    return html\`
        <style>.input {
color: red;
}
</style>
        <div>
        <div></div>
        <input @change=\${(event) => (this.name = event.target.value)} />
        <div></div>
      </div>

      \`;
  }
}
"
`;

exports[`Lit > jsx > Typescript Test > basicOnUpdateReturn 1`] = `
"import { LitElement, html, css } from \\"lit\\";
import { customElement, property, state, query } from \\"lit/decorators.js\\";

@customElement(\\"my-basic-on-update-return-component\\")
export default class MyBasicOnUpdateReturnComponent extends LitElement {
  createRenderRoot() {
    return this;
  }

  @state() name = \\"PatrickJS\\";

  updated() {
    const controller = new AbortController();
    const signal = controller.signal;
    fetch(\\"https://patrickjs.com/api/resource.json\\", {
      signal,
    })
      .then((response) => response.json())
      .then((data) => {
        this.name = data.name;
      });
    return () => {
      if (!signal.aborted) {
        controller.abort();
      }
    };
  }

  render() {
    return html\`
        
        <div>
        <div></div>
        <div></div>
      </div>

      \`;
  }
}
"
`;

exports[`Lit > jsx > Typescript Test > camelCasedAttributes 1`] = `
"import React from \\"@builder.io/react\\";

import { LitElement, html, css } from \\"lit\\";
import { customElement, property, state, query } from \\"lit/decorators.js\\";

@customElement(\\"my-component\\")
export default class MyComponent extends LitElement {
  createRenderRoot() {
    return this;
  }

  @state() name = \\"Steve\\";

  render() {
    return html\`

      <div>
      <div></div>
      <img srcset=\\"http://example.com\\" />
      <div></div>
    </div>

    \`;
  }
}
"
`;

exports[`Lit > jsx > Typescript Test > class + ClassName + css 1`] = `
"import { LitElement, html, css } from \\"lit\\";
import { customElement, property, state, query } from \\"lit/decorators.js\\";

@customElement(\\"my-basic-component\\")
export default class MyBasicComponent extends LitElement {
  createRenderRoot() {
    return this;
  }

  render() {
    return html\`
        <style>.div {
padding: 10px;
}
</style>
        <div><div></div></div>

      \`;
  }
}
"
`;

exports[`Lit > jsx > Typescript Test > class + css 1`] = `
"import { LitElement, html, css } from \\"lit\\";
import { customElement, property, state, query } from \\"lit/decorators.js\\";

@customElement(\\"my-basic-component\\")
export default class MyBasicComponent extends LitElement {
  createRenderRoot() {
    return this;
  }

  render() {
    return html\`
        <style>.div {
padding: 10px;
}
</style>
        <div><div></div></div>

      \`;
  }
}
"
`;

exports[`Lit > jsx > Typescript Test > className + css 1`] = `
"import { LitElement, html, css } from \\"lit\\";
import { customElement, property, state, query } from \\"lit/decorators.js\\";

@customElement(\\"my-basic-component\\")
export default class MyBasicComponent extends LitElement {
  createRenderRoot() {
    return this;
  }

  render() {
    return html\`
        <style>.div {
padding: 10px;
}
</style>
        <div><div></div></div>

      \`;
  }
}
"
`;

exports[`Lit > jsx > Typescript Test > className 1`] = `
"import { LitElement, html, css } from \\"lit\\";
import { customElement, property, state, query } from \\"lit/decorators.js\\";

type Props = {
  [key: string]: string | JSX.Element;
  slotTesting: JSX.Element;
};

@customElement(\\"class-name-code\\")
export default class ClassNameCode extends LitElement {
  createRenderRoot() {
    return this;
  }

  @state() bindings = \\"a binding\\";

  render() {
    return html\`
        
        <div>
        <div></div>
        <div></div>
        <div><div></div></div>
        <div></div>
        <div></div>
        <div><div></div></div>
        <div></div>
      </div>

      \`;
  }
}
"
`;

exports[`Lit > jsx > Typescript Test > classState 1`] = `
"import { LitElement, html, css } from \\"lit\\";
import { customElement, property, state, query } from \\"lit/decorators.js\\";

@customElement(\\"my-basic-component\\")
export default class MyBasicComponent extends LitElement {
  createRenderRoot() {
    return this;
  }

  @state() classState = \\"testClassName\\";
  @state() styleState = {
    color: \\"red\\",
  };

  render() {
    return html\`
        <style>.div {
padding: 10px;
}
</style>
        <div><div></div></div>

      \`;
  }
}
"
`;

exports[`Lit > jsx > Typescript Test > componentWithContext 1`] = `
"import Context1 from \\"@dummy/1\\";
import Context2 from \\"@dummy/2\\";

import { LitElement, html, css } from \\"lit\\";
import { customElement, property, state, query } from \\"lit/decorators.js\\";

export interface ComponentWithContextProps {
  content: string;
}

@customElement(\\"component-with-context\\")
export default class ComponentWithContext extends LitElement {
  createRenderRoot() {
    return this;
  }

  @property() content: any;

  render() {
    return html\`
        
        <my-fragment
        ><div></div>
        <my-fragment><div></div></my-fragment>
        <div></div
      ></my-fragment>

      \`;
  }
}
"
`;

exports[`Lit > jsx > Typescript Test > componentWithContextMultiRoot 1`] = `
"import Context1 from \\"@dummy/1\\";
import Context2 from \\"@dummy/2\\";

import { LitElement, html, css } from \\"lit\\";
import { customElement, property, state, query } from \\"lit/decorators.js\\";

export interface ComponentWithContextProps {
  content: string;
}

@customElement(\\"component-with-context\\")
export default class ComponentWithContext extends LitElement {
  createRenderRoot() {
    return this;
  }

  @property() content: any;

  render() {
    return html\`
        
        <my-fragment
        ><div></div>
        <my-fragment><div></div></my-fragment>
        <div></div>
        <div><div></div></div>
        <div></div
      ></my-fragment>

      \`;
  }
}
"
`;

exports[`Lit > jsx > Typescript Test > contentState 1`] = `
"import \\"@dummy/context.js\\";

import { LitElement, html, css } from \\"lit\\";
import { customElement, property, state, query } from \\"lit/decorators.js\\";

@customElement(\\"render-content\\")
export default class RenderContent extends LitElement {
  createRenderRoot() {
    return this;
  }

  @property() content: any;
  @property() customComponents: any;

  render() {
    return html\`
      
      <div><div></div></div>

    \`;
  }
}
"
`;

exports[`Lit > jsx > Typescript Test > defaultProps 1`] = `
"import { LitElement, html, css } from \\"lit\\";
import { customElement, property, state, query } from \\"lit/decorators.js\\";

export interface ButtonProps {
  attributes?: any;
  text?: string;
  buttonText?: string; // no default value

  link?: string;
  openLinkInNewTab?: boolean;
  onClick?: () => void;
}

@customElement(\\"my-button\\")
export default class Button extends LitElement {
  createRenderRoot() {
    return this;
  }

  @property() link: any;
  @property() attributes: any;
  @property() openLinkInNewTab: any;
  @property() text: any;
  @property() onClick: any;
  @property() buttonText: any;

  render() {
    return html\`
        
        <div ><div ></div>
      \${
        this.link
          ? html\`<div ></div>
      <a ><div ></div>
      <div ></div>
      <div ></div></a>
      <div ></div>\`
          : null
      }
      <div ></div>
      \${
        !this.link
          ? html\`<div ></div>
      <button  @click=\${(event) => this.onClick(event)} ><div ></div>
      <div ></div>
      <div ></div></button>
      <div ></div>\`
          : null
      }
      <div ></div></div>
      \`;
  }
}
"
`;

exports[`Lit > jsx > Typescript Test > defaultPropsOutsideComponent 1`] = `
"import { LitElement, html, css } from \\"lit\\";
import { customElement, property, state, query } from \\"lit/decorators.js\\";

export interface ButtonProps {
  attributes?: any;
  text?: string;
  link?: string;
  openLinkInNewTab?: boolean;
  onClick: () => void;
}

@customElement(\\"my-button\\")
export default class Button extends LitElement {
  createRenderRoot() {
    return this;
  }

  @property() link: any;
  @property() attributes: any;
  @property() openLinkInNewTab: any;
  @property() text: any;
  @property() onClick: any;

  render() {
    return html\`
        
        <div ><div ></div>
      \${
        this.link
          ? html\`<div ></div>
      <a ><div ></div>
      <div ></div>
      <div ></div></a>
      <div ></div>\`
          : null
      }
      <div ></div>
      \${
        !this.link
          ? html\`<div ></div>
      <button  @click=\${(event) => this.onClick(event)} ><div ></div>
      <div ></div>
      <div ></div></button>
      <div ></div>\`
          : null
      }
      <div ></div></div>
      \`;
  }
}
"
`;

exports[`Lit > jsx > Typescript Test > defaultValsWithTypes 1`] = `
"const DEFAULT_VALUES: Props = {
  name: \\"Sami\\",
};

import { LitElement, html, css } from \\"lit\\";
import { customElement, property, state, query } from \\"lit/decorators.js\\";

type Props = {
  name: string;
};

@customElement(\\"component-with-types\\")
export default class ComponentWithTypes extends LitElement {
  createRenderRoot() {
    return this;
  }

  @property() name: any;

  render() {
    return html\`
        
        <div>
        <div></div>
        <div></div>
      </div>

      \`;
  }
}
"
`;

exports[`Lit > jsx > Typescript Test > expressionState 1`] = `
"import { LitElement, html, css } from \\"lit\\";
import { customElement, property, state, query } from \\"lit/decorators.js\\";

@customElement(\\"my-component\\")
export default class MyComponent extends LitElement {
  createRenderRoot() {
    return this;
  }

  @property() componentRef: any;

  @state() refToUse = !(this.componentRef instanceof Function)
    ? this.componentRef
    : null;

  render() {
    return html\`
      
      <div><div></div></div>

    \`;
  }
}
"
`;

exports[`Lit > jsx > Typescript Test > import types 1`] = `
"import RenderBlock from \\"./builder-render-block.raw\\";

import { LitElement, html, css } from \\"lit\\";
import { customElement, property, state, query } from \\"lit/decorators.js\\";

type RenderContentProps = {
  options?: GetContentOptions;
  content: BuilderContent;
  renderContentProps: RenderBlockProps;
};

const spread = (properties) =>
  directive((part) => {
    for (const property in properties) {
      const value = properties[attr];
      part.element[property] = value;
    }
  });

@customElement(\\"render-content\\")
export default class RenderContent extends LitElement {
  createRenderRoot() {
    return this;
  }

  @property() renderContentProps: any;

  getRenderContentProps(block, index) {
    return {
      block: block,
      index: index,
    };
  }

  render() {
    return html\`
        
        <render-block
        \${spread(
          state.getRenderContentProps(props.renderContentProps.block, 0)
        )}
      ></render-block>

      \`;
  }
}
"
`;

exports[`Lit > jsx > Typescript Test > multipleOnUpdate 1`] = `
"import { LitElement, html, css } from \\"lit\\";
import { customElement, property, state, query } from \\"lit/decorators.js\\";

@customElement(\\"multiple-on-update\\")
export default class MultipleOnUpdate extends LitElement {
  createRenderRoot() {
    return this;
  }

  updated() {
    console.log(\\"Runs on every update/rerender\\");

    console.log(\\"Runs on every update/rerender as well\\");
  }

  render() {
    return html\`
      
      <div></div>

    \`;
  }
}
"
`;

exports[`Lit > jsx > Typescript Test > multipleOnUpdateWithDeps 1`] = `
"import { LitElement, html, css } from \\"lit\\";
import { customElement, property, state, query } from \\"lit/decorators.js\\";

@customElement(\\"multiple-on-update-with-deps\\")
export default class MultipleOnUpdateWithDeps extends LitElement {
  createRenderRoot() {
    return this;
  }

  @state() a = \\"a\\";
  @state() b = \\"b\\";
  @state() c = \\"c\\";
  @state() d = \\"d\\";

  updated() {
    console.log(\\"Runs when a or b changes\\", this.a, this.b);

    if (this.a === \\"a\\") {
      this.a = \\"b\\";
    }

    console.log(\\"Runs when c or d changes\\", this.c, this.d);

    if (this.a === \\"a\\") {
      this.a = \\"b\\";
    }
  }

  render() {
    return html\`
        
        <div></div>

      \`;
  }
}
"
`;

exports[`Lit > jsx > Typescript Test > multipleSpreads 1`] = `
"import { LitElement, html, css } from \\"lit\\";
import { customElement, property, state, query } from \\"lit/decorators.js\\";

@customElement(\\"my-basic-component\\")
export default class MyBasicComponent extends LitElement {
  createRenderRoot() {
    return this;
  }

  @state() attrs = {
    hello: \\"world\\",
  };

  render() {
    return html\`
        
        <input />

      \`;
  }
}
"
`;

exports[`Lit > jsx > Typescript Test > nestedShow 1`] = `
"import { LitElement, html, css } from \\"lit\\";
import { customElement, property, state, query } from \\"lit/decorators.js\\";

interface Props {
  conditionA: boolean;
  conditionB: boolean;
}

@customElement(\\"nested-show\\")
export default class NestedShow extends LitElement {
  createRenderRoot() {
    return this;
  }

  @property() conditionA: any;
  @property() conditionB: any;

  render() {
    return html\`
        
        \${
          this.conditionA
            ? html\`
      <div></div>
      \${
        !this.conditionB
          ? html\`
      <div></div>
      <div><div></div></div>
      <div></div>
      \`
          : html\`
      <div><div></div></div>
      \`
      }
      <div></div>
      \`
            : html\`
      <div><div></div></div>
      \`
        }

      \`;
  }
}
"
`;

exports[`Lit > jsx > Typescript Test > nestedStyles 1`] = `
"import { LitElement, html, css } from \\"lit\\";
import { customElement, property, state, query } from \\"lit/decorators.js\\";

@customElement(\\"nested-styles\\")
export default class NestedStyles extends LitElement {
  createRenderRoot() {
    return this;
  }

  render() {
    return html\`
        <style>.div {
display: flex;
foo: var(--bar);
}
@media (max-width: env(--mobile)) {
.div {
  display: block;
}
}
.div:hover {
display: flex;
}
.div .nested-selector {
display: grid;
}
</style>
        <div><div></div></div>

      \`;
  }
}
"
`;

exports[`Lit > jsx > Typescript Test > onInit & onMount 1`] = `
"import { LitElement, html, css } from \\"lit\\";
import { customElement, property, state, query } from \\"lit/decorators.js\\";

@customElement(\\"on-init\\")
export default class OnInit extends LitElement {
  createRenderRoot() {
    return this;
  }

  connectedCallback() {
    console.log(\\"onMount\\");
  }

  render() {
    return html\`
      
      <div></div>

    \`;
  }
}
"
`;

exports[`Lit > jsx > Typescript Test > onInit 1`] = `
"export const defaultValues = {
  name: \\"PatrickJS\\",
};

import { LitElement, html, css } from \\"lit\\";
import { customElement, property, state, query } from \\"lit/decorators.js\\";

type Props = {
  name: string;
};

@customElement(\\"on-init\\")
export default class OnInit extends LitElement {
  createRenderRoot() {
    return this;
  }

  @property() name: any;

  @state() name = \\"\\";

  render() {
    return html\`
        
        <div>
        <div></div>
        <div></div>
      </div>

      \`;
  }
}
"
`;

exports[`Lit > jsx > Typescript Test > onMount 1`] = `
"import { LitElement, html, css } from \\"lit\\";
import { customElement, property, state, query } from \\"lit/decorators.js\\";

@customElement(\\"my-comp\\")
export default class Comp extends LitElement {
  createRenderRoot() {
    return this;
  }

  connectedCallback() {
    console.log(\\"Runs on mount\\");
  }
  disconnectedCallback() {
    console.log(\\"Runs on unMount\\");
  }

  render() {
    return html\`
      
      <div></div>

    \`;
  }
}
"
`;

exports[`Lit > jsx > Typescript Test > onUpdate 1`] = `
"import { LitElement, html, css } from \\"lit\\";
import { customElement, property, state, query } from \\"lit/decorators.js\\";

@customElement(\\"on-update\\")
export default class OnUpdate extends LitElement {
  createRenderRoot() {
    return this;
  }

  updated() {
    console.log(\\"Runs on every update/rerender\\");
  }

  render() {
    return html\`
      
      <div></div>

    \`;
  }
}
"
`;

exports[`Lit > jsx > Typescript Test > onUpdateWithDeps 1`] = `
"import { LitElement, html, css } from \\"lit\\";
import { customElement, property, state, query } from \\"lit/decorators.js\\";

type Props = {
  size: string;
};

@customElement(\\"on-update-with-deps\\")
export default class OnUpdateWithDeps extends LitElement {
  createRenderRoot() {
    return this;
  }

  @property() size: any;

  @state() a = \\"a\\";
  @state() b = \\"b\\";

  updated() {
    console.log(\\"Runs when a, b or size changes\\", this.a, this.b, this.size);
  }

  render() {
    return html\`
        
        <div></div>

      \`;
  }
}
"
`;

exports[`Lit > jsx > Typescript Test > preserveExportOrLocalStatement 1`] = `
"const b = 3;
const foo = () => {};
export const a = 3;
export const bar = () => {};
export function run<T>(value: T) {}

import { LitElement, html, css } from \\"lit\\";
import { customElement, property, state, query } from \\"lit/decorators.js\\";

type Types = {
  s: any[];
};
interface IPost {
  len: number;
}
export interface MyBasicComponentProps {
  id: string;
}

@customElement(\\"my-basic-component\\")
export default class MyBasicComponent extends LitElement {
  createRenderRoot() {
    return this;
  }

  render() {
    return html\`
        
        <div></div>

      \`;
  }
}
"
`;

exports[`Lit > jsx > Typescript Test > preserveTyping 1`] = `
"import { LitElement, html, css } from \\"lit\\";
import { customElement, property, state, query } from \\"lit/decorators.js\\";

export type A = \\"test\\";
export interface C {
  n: \\"test\\";
}
type B = \\"test2\\";
interface D {
  n: \\"test\\";
}
export interface MyBasicComponentProps {
  name: string;
  age?: number;
}

@customElement(\\"my-basic-component\\")
export default class MyBasicComponent extends LitElement {
  createRenderRoot() {
    return this;
  }

  @property() name: any;

  render() {
    return html\`
        
        <div>
        <div></div>
        <div></div>
      </div>

      \`;
  }
}
"
`;

exports[`Lit > jsx > Typescript Test > propsDestructure 1`] = `
"import { LitElement, html, css } from \\"lit\\";
import { customElement, property, state, query } from \\"lit/decorators.js\\";

type Props = {
  children: any;
  type: string;
};

@customElement(\\"my-basic-component\\")
export default class MyBasicComponent extends LitElement {
  createRenderRoot() {
    return this;
  }

  @property() children: any;
  @property() type: any;

  @state() name = \\"Decadef20\\";

  render() {
    return html\`
        
        <div>
        <div></div>
        <div></div>
        <div></div>
        <div></div>
        <div></div>
      </div>

      \`;
  }
}
"
`;

exports[`Lit > jsx > Typescript Test > propsInterface 1`] = `
"import { LitElement, html, css } from \\"lit\\";
import { customElement, property, state, query } from \\"lit/decorators.js\\";

interface Person {
  name: string;
  age?: number;
}

@customElement(\\"my-basic-component\\")
export default class MyBasicComponent extends LitElement {
  createRenderRoot() {
    return this;
  }

  @property() name: any;

  render() {
    return html\`
        
        <div>
        <div></div>
        <div></div>
      </div>

      \`;
  }
}
"
`;

exports[`Lit > jsx > Typescript Test > propsType 1`] = `
"import { LitElement, html, css } from \\"lit\\";
import { customElement, property, state, query } from \\"lit/decorators.js\\";

type Person = {
  name: string;
  age?: number;
};

@customElement(\\"my-basic-component\\")
export default class MyBasicComponent extends LitElement {
  createRenderRoot() {
    return this;
  }

  @property() name: any;

  render() {
    return html\`
        
        <div>
        <div></div>
        <div></div>
      </div>

      \`;
  }
}
"
`;

exports[`Lit > jsx > Typescript Test > referencingFunInsideHook 1`] = `
"import { LitElement, html, css } from \\"lit\\";
import { customElement, property, state, query } from \\"lit/decorators.js\\";

@customElement(\\"on-update\\")
export default class OnUpdate extends LitElement {
  createRenderRoot() {
    return this;
  }

  foo = function foo(params) {};
  bar = function bar() {};
  zoo = function zoo() {
    const params = {
      cb: this.bar,
    };
  };

  updated() {
    foo({
      someOption: bar,
    });
  }

  render() {
    return html\`
         
         <div></div>

       \`;
  }
}
"
`;

exports[`Lit > jsx > Typescript Test > renderBlock 1`] = `
"import { getBlockActions } from \\"../../functions/get-block-actions.js\\";
import { getBlockComponentOptions } from \\"../../functions/get-block-component-options.js\\";
import { getBlockProperties } from \\"../../functions/get-block-properties.js\\";
import { getBlockTag } from \\"../../functions/get-block-tag.js\\";
import { getProcessedBlock } from \\"../../functions/get-processed-block.js\\";
import { evaluate } from \\"../../functions/evaluate.js\\";
import \\"./block-styles.js\\";
import { isEmptyHtmlElement } from \\"./render-block.helpers.js\\";
import \\"./render-repeated-block.js\\";
import { TARGET } from \\"../../constants/target.js\\";
import { extractTextStyles } from \\"../../functions/extract-text-styles.js\\";
import \\"./render-component-with-context.js\\";
import \\"./render-component.js\\";
import { getReactNativeBlockStyles } from \\"../../functions/get-react-native-block-styles.js\\";

import { LitElement, html, css } from \\"lit\\";
import { customElement, property, state, query } from \\"lit/decorators.js\\";

import type {
  BuilderContextInterface,
  RegisteredComponent,
} from \\"../../context/types.js\\";
import type { BuilderBlock } from \\"../../types/builder-block.js\\";
import type { Nullable } from \\"../../types/typescript.js\\";
import type { RenderComponentProps } from \\"./render-component\\";
import type { RepeatData } from \\"./types.js\\";
export type RenderBlockProps = {
  block: BuilderBlock;
  context: BuilderContextInterface;
};

const spread = (properties) =>
  directive((part) => {
    for (const property in properties) {
      const value = properties[attr];
      part.element[property] = value;
    }
  });

@customElement(\\"render-block\\")
export default class RenderBlock extends LitElement {
  createRenderRoot() {
    return this;
  }

  @property() block: any;
  @property() context: any;

  get component() {
    const componentName = getProcessedBlock({
      block: this.block,
      this: this.context.state,
      context: this.context.context,
      shouldEvaluateBindings: false,
    }).component?.name;

    if (!componentName) {
      return null;
    }

    const ref = this.context.registeredComponents[componentName];

    if (!ref) {
      // TODO: Public doc page with more info about this message
      console.warn(\`
         Could not find a registered component named \\"\${componentName}\\". 
         If you registered it, is the file that registered it imported by the file that needs to render it?\`);
      return undefined;
    } else {
      return ref;
    }
  }
  get tag() {
    return getBlockTag(this.useBlock);
  }
  get useBlock() {
    return this.repeatItemData
      ? this.block
      : getProcessedBlock({
          block: this.block,
          this: this.context.state,
          context: this.context.context,
          shouldEvaluateBindings: true,
        });
  }
  get actions() {
    return getBlockActions({
      block: this.useBlock,
      this: this.context.state,
      context: this.context.context,
    });
  }
  get attributes() {
    const blockProperties = getBlockProperties(this.useBlock);
    return {
      ...blockProperties,
      ...(TARGET === \\"reactNative\\"
        ? {
            style: getReactNativeBlockStyles({
              block: this.useBlock,
              context: this.context,
              blockStyles: blockProperties.style,
            }),
          }
        : {}),
    };
  }
  get shouldWrap() {
    return !this.component?.noWrap;
  }
  get renderComponentProps() {
    return {
      blockChildren: this.useChildren,
      componentRef: this.component?.component,
      componentOptions: {
        ...getBlockComponentOptions(this.useBlock),

        /**
         * These attributes are passed to the wrapper element when there is one. If \`noWrap\` is set to true, then
         * they are provided to the component itself directly.
         */
        ...(this.shouldWrap
          ? {}
          : {
              attributes: { ...this.attributes, ...this.actions },
            }),
        customBreakpoints: this.childrenContext?.content?.meta?.breakpoints,
      },
      context: this.childrenContext,
    };
  }
  get useChildren() {
    // TO-DO: When should \`canHaveChildren\` dictate rendering?
    // This is currently commented out because some Builder components (e.g. Box) do not have \`canHaveChildren: true\`,
    // but still receive and need to render children.
    // return state.componentInfo?.canHaveChildren ? state.useBlock.children : [];
    return this.useBlock.children ?? [];
  }
  get childrenWithoutParentComponent() {
    /**
     * When there is no \`componentRef\`, there might still be children that need to be rendered. In this case,
     * we render them outside of \`componentRef\`.
     * NOTE: We make sure not to render this if \`repeatItemData\` is non-null, because that means we are rendering an array of
     * blocks, and the children will be repeated within those blocks.
     */
    const shouldRenderChildrenOutsideRef =
      !this.component?.component && !this.repeatItemData;
    return shouldRenderChildrenOutsideRef ? this.useChildren : [];
  }
  get repeatItemData() {
    /**
     * we don't use \`state.useBlock\` here because the processing done within its logic includes evaluating the block's bindings,
     * which will not work if there is a repeat.
     */
    const { repeat, ...blockWithoutRepeat } = this.block;

    if (!repeat?.collection) {
      return undefined;
    }

    const itemsArray = evaluate({
      code: repeat.collection,
      this: this.context.state,
      context: this.context.context,
    });

    if (!Array.isArray(itemsArray)) {
      return undefined;
    }

    const collectionName = repeat.collection.split(\\".\\").pop();
    const itemNameToUse =
      repeat.itemName || (collectionName ? collectionName + \\"Item\\" : \\"item\\");
    const repeatArray = itemsArray.map((item, index) => ({
      context: {
        ...this.context,
        this: {
          ...this.context.state,
          $index: index,
          $item: item,
          [itemNameToUse]: item,
          [\`$\${itemNameToUse}Index\`]: index,
        },
      },
      block: blockWithoutRepeat,
    }));
    return repeatArray;
  }
  get inheritedTextStyles() {
    if (TARGET !== \\"reactNative\\") {
      return {};
    }

    const styles = getReactNativeBlockStyles({
      block: this.useBlock,
      context: this.context,
      blockStyles: this.attributes.style,
    });
    return extractTextStyles(styles);
  }
  get childrenContext() {
    return {
      apiKey: this.context.apiKey,
      this: this.context.state,
      content: this.context.content,
      context: this.context.context,
      registeredComponents: this.context.registeredComponents,
      inheritedStyles: this.inheritedTextStyles,
    };
  }
  get renderComponentTag() {
    if (TARGET === \\"reactNative\\") {
      return RenderComponentWithContext;
    } else if (TARGET === \\"vue3\\") {
      // vue3 expects a string for the component tag
      return \\"RenderComponent\\";
    } else {
      return RenderComponent;
    }
  }

  render() {
    return html\`
         
         \${
           this.shouldWrap
             ? html\`<div ></div>
       <div ></div>
       \${
         isEmptyHtmlElement(this.tag)
           ? html\`<div ></div>
       <state.tag ></state.tag>
       <div ></div>\`
           : null
       }
       <div ></div>
       \${
         !isEmptyHtmlElement(this.tag) && this.repeatItemData
           ? html\`<div ></div>
       \${this.repeatItemData?.map(
         (data, index) =>
           html\`<render-repeated-block  .key=\${index}  .repeatContext=\${data.context}  .block=\${data.block} ></render-repeated-block>\`
       )}
       <div ></div>\`
           : null
       }
       <div ></div>
       \${
         !isEmptyHtmlElement(this.tag) && !this.repeatItemData
           ? html\`<div ></div>
       <state.tag ><div ></div>
       <state.renderComponentTag  \${spread(
         state.renderComponentProps
       )} ></state.renderComponentTag>
       <div ></div>
       <div ></div>
       \${this.childrenWithoutParentComponent?.map(
         (child, index) =>
           html\`<render-block  .key=\${
             \\"render-block-\\" + child.id
           }  .block=\${child}  .context=\${
             this.childrenContext
           } ></render-block>\`
       )}
       <div ></div>
       \${this.childrenWithoutParentComponent?.map(
         (child, index) =>
           html\`<block-styles  .key=\${
             \\"block-style-\\" + child.id
           }  .block=\${child}  .context=\${
             this.childrenContext
           } ></block-styles>\`
       )}
       <div ></div></state.tag>
       <div ></div>\`
           : null
       }
       <div ></div>\`
             : html\`<state.renderComponentTag  \${spread(
                 state.renderComponentProps
               )} ></state.renderComponentTag>\`
         }
       \`;
  }
}
"
`;

exports[`Lit > jsx > Typescript Test > renderContentExample 1`] = `
"import {
  sendComponentsToVisualEditor,
  dispatchNewContentToVisualEditor,
  trackClick,
} from \\"@dummy/injection-js\\";
import \\"@dummy/context.js\\";
import RenderBlocks from \\"@dummy/RenderBlocks.lite.tsx\\";

import { LitElement, html, css } from \\"lit\\";
import { customElement, property, state, query } from \\"lit/decorators.js\\";

type Props = {
  customComponents: string[];
  content: {
    blocks: any[];
    id: string;
  };
};

@customElement(\\"render-content\\")
export default class RenderContent extends LitElement {
  createRenderRoot() {
    return this;
  }

  @property() content: any;
  @property() customComponents: any;

  connectedCallback() {
    sendComponentsToVisualEditor(this.customComponents);
  }

  updated() {
    dispatchNewContentToVisualEditor(this.content);
  }

  render() {
    return html\`
        <style>.div {
display: flex;
flex-direction: columns;
}
</style>
        <div  @click=\${(event) => trackClick(this.content.id)} ><div ></div>
      <render-blocks  .blocks=\${this.content.blocks} ></render-blocks>
      <div ></div></div>
      \`;
  }
}
"
`;

exports[`Lit > jsx > Typescript Test > rootFragmentMultiNode 1`] = `
"import { LitElement, html, css } from \\"lit\\";
import { customElement, property, state, query } from \\"lit/decorators.js\\";

export interface ButtonProps {
  attributes?: any;
  text?: string;
  link?: string;
  openLinkInNewTab?: boolean;
}

@customElement(\\"my-button\\")
export default class Button extends LitElement {
  createRenderRoot() {
    return this;
  }

  @property() link: any;
  @property() attributes: any;
  @property() openLinkInNewTab: any;
  @property() text: any;

  render() {
    return html\`
        
        <my-fragment
        ><div></div>
        \${
          this.link
            ? html\`
        <div></div>
        <a
          ><div></div>
          <div></div>
          <div></div
        ></a>
        <div></div>
        \`
            : null
        }
        <div></div>
        \${
          !this.link
            ? html\`
        <div></div>
        <button>
          <div></div>
          <div></div>
          <div></div>
        </button>
        <div></div>
        \`
            : null
        }
        <div></div
      ></my-fragment>

      \`;
  }
}
"
`;

exports[`Lit > jsx > Typescript Test > rootShow 1`] = `
"import { LitElement, html, css } from \\"lit\\";
import { customElement, property, state, query } from \\"lit/decorators.js\\";

export interface RenderStylesProps {
  foo: string;
}

@customElement(\\"render-styles\\")
export default class RenderStyles extends LitElement {
  createRenderRoot() {
    return this;
  }

  @property() foo: any;

  render() {
    return html\`
        
        \${
          this.foo === \\"bar\\"
            ? html\`
      <div></div>
      <div><div></div></div>
      <div></div>
      \`
            : html\`
      <div><div></div></div>
      \`
        }

      \`;
  }
}
"
`;

exports[`Lit > jsx > Typescript Test > self-referencing component 1`] = `
"import { LitElement, html, css } from \\"lit\\";
import { customElement, property, state, query } from \\"lit/decorators.js\\";

@customElement(\\"my-component\\")
export default class MyComponent extends LitElement {
  createRenderRoot() {
    return this;
  }

  @property() name: any;

  render() {
    return html\`
      
      <div>
      <div></div>
      <div></div>
      <div></div>
      \${
        this.name === \\"Batman\\"
          ? html\`
      <div></div>
      <my-component name=\\"Bruce Wayne\\"></my-component>
      <div></div>
      \`
          : null
      }
      <div></div>
    </div>

    \`;
  }
}
"
`;

exports[`Lit > jsx > Typescript Test > self-referencing component with children 1`] = `
"import { LitElement, html, css } from \\"lit\\";
import { customElement, property, state, query } from \\"lit/decorators.js\\";

@customElement(\\"my-component\\")
export default class MyComponent extends LitElement {
  createRenderRoot() {
    return this;
  }

  @property() name: any;
  @property() children: any;

  render() {
    return html\`
      
      <div>
      <div></div>
      <div></div>
      <div></div>
      <div></div>
      <div></div>
      \${
        this.name === \\"Batman\\"
          ? html\`
      <div></div>
      <my-component name=\\"Bruce\\"
        ><div></div>
        <div><div></div></div>
        <div></div
      ></my-component>
      <div></div>
      \`
          : null
      }
      <div></div>
    </div>

    \`;
  }
}
"
`;

exports[`Lit > jsx > Typescript Test > showWithFor 1`] = `
"import { LitElement, html, css } from \\"lit\\";
import { customElement, property, state, query } from \\"lit/decorators.js\\";

interface Props {
  conditionA: boolean;
  items: string[];
}

@customElement(\\"nested-show\\")
export default class NestedShow extends LitElement {
  createRenderRoot() {
    return this;
  }

  @property() conditionA: any;
  @property() items: any;

  render() {
    return html\`
        
        \${
          this.conditionA
            ? html\`
      <div></div>
      \${this.items?.map(
        (item, index) => html\`
      <div><div></div></div>
      \`
      )}
      <div></div>
      \`
            : html\`
      <div><div></div></div>
      \`
        }

      \`;
  }
}
"
`;

exports[`Lit > jsx > Typescript Test > spreadAttrs 1`] = `
"import { LitElement, html, css } from \\"lit\\";
import { customElement, property, state, query } from \\"lit/decorators.js\\";

@customElement(\\"my-basic-component\\")
export default class MyBasicComponent extends LitElement {
  createRenderRoot() {
    return this;
  }

  render() {
    return html\`
      
      <input />

    \`;
  }
}
"
`;

exports[`Lit > jsx > Typescript Test > spreadNestedProps 1`] = `
"import { LitElement, html, css } from \\"lit\\";
import { customElement, property, state, query } from \\"lit/decorators.js\\";

@customElement(\\"my-basic-component\\")
export default class MyBasicComponent extends LitElement {
  createRenderRoot() {
    return this;
  }

  @property() nested: any;

  render() {
    return html\`
      
      <input />

    \`;
  }
}
"
`;

exports[`Lit > jsx > Typescript Test > spreadProps 1`] = `
"import { LitElement, html, css } from \\"lit\\";
import { customElement, property, state, query } from \\"lit/decorators.js\\";

@customElement(\\"my-basic-component\\")
export default class MyBasicComponent extends LitElement {
  createRenderRoot() {
    return this;
  }

  render() {
    return html\`
      
      <input />

    \`;
  }
}
"
`;

exports[`Lit > jsx > Typescript Test > styleClassAndCss 1`] = `
"import { LitElement, html, css } from \\"lit\\";
import { customElement, property, state, query } from \\"lit/decorators.js\\";

@customElement(\\"my-component\\")
export default class MyComponent extends LitElement {
  createRenderRoot() {
    return this;
  }

  render() {
    return html\`
        <style>.div {
display: flex;
flex-direction: column;
align-items: stretch;
}
</style>
        <div></div>

      \`;
  }
}
"
`;

exports[`Lit > jsx > Typescript Test > subComponent 1`] = `
"import \\"./foo-sub-component.js\\";

import { LitElement, html, css } from \\"lit\\";
import { customElement, property, state, query } from \\"lit/decorators.js\\";

@customElement(\\"sub-component\\")
export default class SubComponent extends LitElement {
  createRenderRoot() {
    return this;
  }

  render() {
    return html\`
      
      <my-foo></my-foo>

    \`;
  }
}
"
`;

exports[`Lit > jsx > Typescript Test > svgComponent 1`] = `
"import { LitElement, html, css } from \\"lit\\";
import { customElement, property, state, query } from \\"lit/decorators.js\\";

@customElement(\\"svg-component\\")
export default class SvgComponent extends LitElement {
  createRenderRoot() {
    return this;
  }

  render() {
    return html\`
      
      <svg  .viewbox=\${\\"0 0 \\" + 42 + \\" \\" + 42} ><div ></div>
    <defs ><div ></div>
    <filter  filterunits=\\"userSpaceOnUse\\" ><div ></div>
    <feFlood ></feFlood>
    <div ></div>
    <feBlend ></feBlend>
    <div ></div>
    <feGaussianBlur  .stddeviation=\${7} ></feGaussianBlur>
    <div ></div></filter>
    <div ></div></defs>
    <div ></div></svg>
    \`;
  }
}
"
`;

exports[`Lit > jsx > Typescript Test > typeDependency 1`] = `
"import { LitElement, html, css } from \\"lit\\";
import { customElement, property, state, query } from \\"lit/decorators.js\\";

import type { Foo } from \\"./foo-type\\";
import type { Foo as Foo2 } from \\"./type-export\\";
export type TypeDependencyProps = {
  foo: Foo;
  foo2: Foo2;
};

@customElement(\\"type-dependency\\")
export default class TypeDependency extends LitElement {
  createRenderRoot() {
    return this;
  }

  @property() foo: any;

  render() {
    return html\`
        
        <div><div></div></div>

      \`;
  }
}
"
`;

exports[`Lit > jsx > Typescript Test > use-style 1`] = `
"import { LitElement, html, css } from \\"lit\\";
import { customElement, property, state, query } from \\"lit/decorators.js\\";

@customElement(\\"my-component\\")
export default class MyComponent extends LitElement {
  createRenderRoot() {
    return this;
  }

  render() {
    return html\`
        <style>button {
background: blue;
color: white;
font-size: 12px;
outline: 1px solid black;
}
</style>
        <button><div></div></button>

      \`;
  }
}
"
`;

exports[`Lit > jsx > Typescript Test > use-style-and-css 1`] = `
"import { LitElement, html, css } from \\"lit\\";
import { customElement, property, state, query } from \\"lit/decorators.js\\";

@customElement(\\"my-component\\")
export default class MyComponent extends LitElement {
  createRenderRoot() {
    return this;
  }

  render() {
    return html\`
        <style>.button {
background: blue;
color: white;
}

button {
font-size: 12px;
outline: 1px solid black;
}
</style>
        <button><div></div></button>

      \`;
  }
}
"
`;

exports[`Lit > jsx > Typescript Test > use-style-outside-component 1`] = `
"import { LitElement, html, css } from \\"lit\\";
import { customElement, property, state, query } from \\"lit/decorators.js\\";

@customElement(\\"my-component\\")
export default class MyComponent extends LitElement {
  createRenderRoot() {
    return this;
  }

  render() {
    return html\`
        <style>button {
background: blue;
color: white;
font-size: 12px;
outline: 1px solid black;
}
</style>
        <button><div></div></button>

      \`;
  }
}
"
`;

exports[`Lit > svelte > Javascript Test > basic 1`] = `
"import { LitElement, html, css } from \\"lit\\";
import { customElement, property, state, query } from \\"lit/decorators.js\\";

@customElement(\\"my-component\\")
export default class MyComponent extends LitElement {
  createRenderRoot() {
    return this;
  }

  @state() name = \\"Steve\\";

  render() {
    return html\`
      
      <div>
      <input @change=\${(event) => (this.name = event.target.value)} />
      <div></div>
    </div>

    \`;
  }
}
"
`;

exports[`Lit > svelte > Javascript Test > bindGroup 1`] = `
"import { LitElement, html, css } from \\"lit\\";
import { customElement, property, state, query } from \\"lit/decorators.js\\";

@customElement(\\"my-component\\")
export default class MyComponent extends LitElement {
  createRenderRoot() {
    return this;
  }

  @state() tortilla = \\"Plain\\";
  @state() fillings = [];

  render() {
    return html\`
      
      <div ><input  @change=\${(event) =>
        (this.tortilla = event.target.value)}  />
    <input  @change=\${(event) => (this.tortilla = event.target.value)}  />
    <input  @change=\${(event) => (this.tortilla = event.target.value)}  />
    <br  />
    <br  />
    <input  @change=\${(event) => (this.fillings = event.target.value)}  />
    <input  @change=\${(event) => (this.fillings = event.target.value)}  />
    <input  @change=\${(event) => (this.fillings = event.target.value)}  />
    <input  @change=\${(event) => (this.fillings = event.target.value)}  />
    <p ><div ></div>
    <div ></div></p>
    <p ><div ></div>
    <div ></div></p></div>
    \`;
  }
}
"
`;

exports[`Lit > svelte > Javascript Test > bindProperty 1`] = `
"import { LitElement, html, css } from \\"lit\\";
import { customElement, property, state, query } from \\"lit/decorators.js\\";

@customElement(\\"my-component\\")
export default class MyComponent extends LitElement {
  createRenderRoot() {
    return this;
  }

  @state() value = \\"hello\\";

  render() {
    return html\`
      
      <input />

    \`;
  }
}
"
`;

exports[`Lit > svelte > Javascript Test > classDirective 1`] = `
"import { LitElement, html, css } from \\"lit\\";
import { customElement, property, state, query } from \\"lit/decorators.js\\";

@customElement(\\"my-component\\")
export default class MyComponent extends LitElement {
  createRenderRoot() {
    return this;
  }

  @property() disabled: any;

  @state() focus = true;

  render() {
    return html\`
      
      <input />

    \`;
  }
}
"
`;

exports[`Lit > svelte > Javascript Test > context 1`] = `
"import { LitElement, html, css } from \\"lit\\";
import { customElement, property, state, query } from \\"lit/decorators.js\\";

@customElement(\\"my-component\\")
export default class MyComponent extends LitElement {
  createRenderRoot() {
    return this;
  }

  @state() activeTab = 0;

  render() {
    return html\`
      
      <div><div></div></div>

    \`;
  }
}
"
`;

exports[`Lit > svelte > Javascript Test > each 1`] = `
"import { LitElement, html, css } from \\"lit\\";
import { customElement, property, state, query } from \\"lit/decorators.js\\";

@customElement(\\"my-component\\")
export default class MyComponent extends LitElement {
  createRenderRoot() {
    return this;
  }

  @state() numbers = [\\"one\\", \\"two\\", \\"three\\"];

  render() {
    return html\`
      
      <ul>
      \${this.numbers?.map(
        (num, index) => html\`
      <li><div></div></li>
      \`
      )}
    </ul>

    \`;
  }
}
"
`;

exports[`Lit > svelte > Javascript Test > eventHandlers 1`] = `
"import { LitElement, html, css } from \\"lit\\";
import { customElement, property, state, query } from \\"lit/decorators.js\\";

@customElement(\\"my-component\\")
export default class MyComponent extends LitElement {
  createRenderRoot() {
    return this;
  }

  log = function log(msg = \\"hello\\") {
    console.log(msg);
  };

  render() {
    return html\`
        
        <div ><button  @click=\${(a) => this.log(\\"hi\\")} ><div ></div></button>
      <button  @click=\${(event) => this.log(event)} ><div ></div></button>
      <button  @click=\${(event) => this.log(event)} ><div ></div></button></div>
      \`;
  }
}
"
`;

exports[`Lit > svelte > Javascript Test > html 1`] = `
"import { LitElement, html, css } from \\"lit\\";
import { customElement, property, state, query } from \\"lit/decorators.js\\";

@customElement(\\"my-component\\")
export default class MyComponent extends LitElement {
  createRenderRoot() {
    return this;
  }

  @state() html = \\"<b>bold</b>\\";

  render() {
    return html\`
      
      <div .innerhtml=\\"\${this.html}\\"></div>

    \`;
  }
}
"
`;

exports[`Lit > svelte > Javascript Test > ifElse 1`] = `
"import { LitElement, html, css } from \\"lit\\";
import { customElement, property, state, query } from \\"lit/decorators.js\\";

@customElement(\\"my-component\\")
export default class MyComponent extends LitElement {
  createRenderRoot() {
    return this;
  }

  @state() show = true;

  toggle = function toggle() {
    this.show = !this.show;
  };

  render() {
    return html\`
        
        \${
          this.show
            ? html\`<button  @click=\${(event) =>
                this.toggle(event)} ><div ></div></button>\`
            : html\`<button  @click=\${(event) =>
                this.toggle(event)} ><div ></div></button>\`
        }
      \`;
  }
}
"
`;

exports[`Lit > svelte > Javascript Test > imports 1`] = `
"import \\"./Button.js\\";

import { LitElement, html, css } from \\"lit\\";
import { customElement, property, state, query } from \\"lit/decorators.js\\";

@customElement(\\"my-component\\")
export default class MyComponent extends LitElement {
  createRenderRoot() {
    return this;
  }

  @state() disabled = false;

  render() {
    return html\`
      
      <div>
      <my-button type=\\"button\\" .disabled=\\"\${this.disabled}\\"
        ><my-slot></my-slot
      ></my-button>
    </div>

    \`;
  }
}
"
`;

exports[`Lit > svelte > Javascript Test > lifecycleHooks 1`] = `
"import { LitElement, html, css } from \\"lit\\";
import { customElement, property, state, query } from \\"lit/decorators.js\\";

@customElement(\\"my-component\\")
export default class MyComponent extends LitElement {
  createRenderRoot() {
    return this;
  }

  connectedCallback() {
    console.log(\\"onMount\\");
  }
  disconnectedCallback() {
    console.log(\\"onDestroy\\");
  }
  updated() {
    console.log(\\"onAfterUpdate\\");
  }

  render() {
    return html\`
      
      <div></div>

    \`;
  }
}
"
`;

exports[`Lit > svelte > Javascript Test > reactive 1`] = `
"import { LitElement, html, css } from \\"lit\\";
import { customElement, property, state, query } from \\"lit/decorators.js\\";

@customElement(\\"my-component\\")
export default class MyComponent extends LitElement {
  createRenderRoot() {
    return this;
  }

  @state() name = \\"Steve\\";

  get lowercaseName() {
    return this.name.toLowerCase();
  }

  render() {
    return html\`
        
        <div>
        <input />
        <div></div>
        <div></div>
      </div>

      \`;
  }
}
"
`;

exports[`Lit > svelte > Javascript Test > reactiveWithFn 1`] = `
"import { LitElement, html, css } from \\"lit\\";
import { customElement, property, state, query } from \\"lit/decorators.js\\";

@customElement(\\"my-component\\")
export default class MyComponent extends LitElement {
  createRenderRoot() {
    return this;
  }

  @state() a = 2;
  @state() b = 5;
  @state() result = null;

  calculateResult = function calculateResult(a_, b_) {
    this.result = a_ * b_;
  };

  updated() {
    this.calculateResult(this.a, this.b);
  }

  render() {
    return html\`
        
        <div>
        <input @change=\${(event) => (this.a = event.target.value)} /> <input
        @change=\${(event) => (this.b = event.target.value)} />
        <div></div>
        <div></div>
      </div>

      \`;
  }
}
"
`;

exports[`Lit > svelte > Javascript Test > slots 1`] = `
"import { LitElement, html, css } from \\"lit\\";
import { customElement, property, state, query } from \\"lit/decorators.js\\";

@customElement(\\"my-component\\")
export default class MyComponent extends LitElement {
  createRenderRoot() {
    return this;
  }

  render() {
    return html\`
      
      <div>
      <my-slot><div></div></my-slot>
      <my-slot name=\\"Test\\"
        ><div><div></div></div
      ></my-slot>
    </div>

    \`;
  }
}
"
`;

exports[`Lit > svelte > Javascript Test > style 1`] = `
"import { LitElement, html, css } from \\"lit\\";
import { customElement, property, state, query } from \\"lit/decorators.js\\";

@customElement(\\"my-component\\")
export default class MyComponent extends LitElement {
  createRenderRoot() {
    return this;
  }

  render() {
    return html\`
        <style>input {
color: red;
font-size: 12px;
}

.form-input:focus {
outline: 1px solid blue;
}
</style>
        <input />

      \`;
  }
}
"
`;

exports[`Lit > svelte > Javascript Test > textExpressions 1`] = `
"import { LitElement, html, css } from \\"lit\\";
import { customElement, property, state, query } from \\"lit/decorators.js\\";

@customElement(\\"my-component\\")
export default class MyComponent extends LitElement {
  createRenderRoot() {
    return this;
  }

  @state() a = 5;
  @state() b = 12;

  render() {
    return html\`
      
      <div>
      <div></div>
      <div></div>
      <br />
      <div></div>
      <div></div>
    </div>

    \`;
  }
}
"
`;

exports[`Lit > svelte > Typescript Test > basic 1`] = `
"import { LitElement, html, css } from \\"lit\\";
import { customElement, property, state, query } from \\"lit/decorators.js\\";

@customElement(\\"my-component\\")
export default class MyComponent extends LitElement {
  createRenderRoot() {
    return this;
  }

  @state() name = \\"Steve\\";

  render() {
    return html\`
      
      <div>
      <input @change=\${(event) => (this.name = event.target.value)} />
      <div></div>
    </div>

    \`;
  }
}
"
`;

exports[`Lit > svelte > Typescript Test > bindGroup 1`] = `
"import { LitElement, html, css } from \\"lit\\";
import { customElement, property, state, query } from \\"lit/decorators.js\\";

@customElement(\\"my-component\\")
export default class MyComponent extends LitElement {
  createRenderRoot() {
    return this;
  }

  @state() tortilla = \\"Plain\\";
  @state() fillings = [];

  render() {
    return html\`
      
      <div ><input  @change=\${(event) =>
        (this.tortilla = event.target.value)}  />
    <input  @change=\${(event) => (this.tortilla = event.target.value)}  />
    <input  @change=\${(event) => (this.tortilla = event.target.value)}  />
    <br  />
    <br  />
    <input  @change=\${(event) => (this.fillings = event.target.value)}  />
    <input  @change=\${(event) => (this.fillings = event.target.value)}  />
    <input  @change=\${(event) => (this.fillings = event.target.value)}  />
    <input  @change=\${(event) => (this.fillings = event.target.value)}  />
    <p ><div ></div>
    <div ></div></p>
    <p ><div ></div>
    <div ></div></p></div>
    \`;
  }
}
"
`;

exports[`Lit > svelte > Typescript Test > bindProperty 1`] = `
"import { LitElement, html, css } from \\"lit\\";
import { customElement, property, state, query } from \\"lit/decorators.js\\";

@customElement(\\"my-component\\")
export default class MyComponent extends LitElement {
  createRenderRoot() {
    return this;
  }

  @state() value = \\"hello\\";

  render() {
    return html\`
      
      <input />

    \`;
  }
}
"
`;

exports[`Lit > svelte > Typescript Test > classDirective 1`] = `
"import { LitElement, html, css } from \\"lit\\";
import { customElement, property, state, query } from \\"lit/decorators.js\\";

@customElement(\\"my-component\\")
export default class MyComponent extends LitElement {
  createRenderRoot() {
    return this;
  }

  @property() disabled: any;

  @state() focus = true;

  render() {
    return html\`
      
      <input />

    \`;
  }
}
"
`;

exports[`Lit > svelte > Typescript Test > context 1`] = `
"import { LitElement, html, css } from \\"lit\\";
import { customElement, property, state, query } from \\"lit/decorators.js\\";

@customElement(\\"my-component\\")
export default class MyComponent extends LitElement {
  createRenderRoot() {
    return this;
  }

  @state() activeTab = 0;

  render() {
    return html\`
      
      <div><div></div></div>

    \`;
  }
}
"
`;

exports[`Lit > svelte > Typescript Test > each 1`] = `
"import { LitElement, html, css } from \\"lit\\";
import { customElement, property, state, query } from \\"lit/decorators.js\\";

@customElement(\\"my-component\\")
export default class MyComponent extends LitElement {
  createRenderRoot() {
    return this;
  }

  @state() numbers = [\\"one\\", \\"two\\", \\"three\\"];

  render() {
    return html\`
      
      <ul>
      \${this.numbers?.map(
        (num, index) => html\`
      <li><div></div></li>
      \`
      )}
    </ul>

    \`;
  }
}
"
`;

exports[`Lit > svelte > Typescript Test > eventHandlers 1`] = `
"import { LitElement, html, css } from \\"lit\\";
import { customElement, property, state, query } from \\"lit/decorators.js\\";

@customElement(\\"my-component\\")
export default class MyComponent extends LitElement {
  createRenderRoot() {
    return this;
  }

  log = function log(msg = \\"hello\\") {
    console.log(msg);
  };

  render() {
    return html\`
        
        <div ><button  @click=\${(a) => this.log(\\"hi\\")} ><div ></div></button>
      <button  @click=\${(event) => this.log(event)} ><div ></div></button>
      <button  @click=\${(event) => this.log(event)} ><div ></div></button></div>
      \`;
  }
}
"
`;

exports[`Lit > svelte > Typescript Test > html 1`] = `
"import { LitElement, html, css } from \\"lit\\";
import { customElement, property, state, query } from \\"lit/decorators.js\\";

@customElement(\\"my-component\\")
export default class MyComponent extends LitElement {
  createRenderRoot() {
    return this;
  }

  @state() html = \\"<b>bold</b>\\";

  render() {
    return html\`
      
      <div .innerhtml=\\"\${this.html}\\"></div>

    \`;
  }
}
"
`;

exports[`Lit > svelte > Typescript Test > ifElse 1`] = `
"import { LitElement, html, css } from \\"lit\\";
import { customElement, property, state, query } from \\"lit/decorators.js\\";

@customElement(\\"my-component\\")
export default class MyComponent extends LitElement {
  createRenderRoot() {
    return this;
  }

  @state() show = true;

  toggle = function toggle() {
    this.show = !this.show;
  };

  render() {
    return html\`
        
        \${
          this.show
            ? html\`<button  @click=\${(event) =>
                this.toggle(event)} ><div ></div></button>\`
            : html\`<button  @click=\${(event) =>
                this.toggle(event)} ><div ></div></button>\`
        }
      \`;
  }
}
"
`;

exports[`Lit > svelte > Typescript Test > imports 1`] = `
"import \\"./Button.js\\";

import { LitElement, html, css } from \\"lit\\";
import { customElement, property, state, query } from \\"lit/decorators.js\\";

@customElement(\\"my-component\\")
export default class MyComponent extends LitElement {
  createRenderRoot() {
    return this;
  }

  @state() disabled = false;

  render() {
    return html\`
      
      <div>
      <my-button type=\\"button\\" .disabled=\\"\${this.disabled}\\"
        ><my-slot></my-slot
      ></my-button>
    </div>

    \`;
  }
}
"
`;

exports[`Lit > svelte > Typescript Test > lifecycleHooks 1`] = `
"import { LitElement, html, css } from \\"lit\\";
import { customElement, property, state, query } from \\"lit/decorators.js\\";

@customElement(\\"my-component\\")
export default class MyComponent extends LitElement {
  createRenderRoot() {
    return this;
  }

  connectedCallback() {
    console.log(\\"onMount\\");
  }
  disconnectedCallback() {
    console.log(\\"onDestroy\\");
  }
  updated() {
    console.log(\\"onAfterUpdate\\");
  }

  render() {
    return html\`
      
      <div></div>

    \`;
  }
}
"
`;

exports[`Lit > svelte > Typescript Test > reactive 1`] = `
"import { LitElement, html, css } from \\"lit\\";
import { customElement, property, state, query } from \\"lit/decorators.js\\";

@customElement(\\"my-component\\")
export default class MyComponent extends LitElement {
  createRenderRoot() {
    return this;
  }

  @state() name = \\"Steve\\";

  get lowercaseName() {
    return this.name.toLowerCase();
  }

  render() {
    return html\`
        
        <div>
        <input />
        <div></div>
        <div></div>
      </div>

      \`;
  }
}
"
`;

exports[`Lit > svelte > Typescript Test > reactiveWithFn 1`] = `
"import { LitElement, html, css } from \\"lit\\";
import { customElement, property, state, query } from \\"lit/decorators.js\\";

@customElement(\\"my-component\\")
export default class MyComponent extends LitElement {
  createRenderRoot() {
    return this;
  }

  @state() a = 2;
  @state() b = 5;
  @state() result = null;

  calculateResult = function calculateResult(a_, b_) {
    this.result = a_ * b_;
  };

  updated() {
    this.calculateResult(this.a, this.b);
  }

  render() {
    return html\`
        
        <div>
        <input @change=\${(event) => (this.a = event.target.value)} /> <input
        @change=\${(event) => (this.b = event.target.value)} />
        <div></div>
        <div></div>
      </div>

      \`;
  }
}
"
`;

exports[`Lit > svelte > Typescript Test > slots 1`] = `
"import { LitElement, html, css } from \\"lit\\";
import { customElement, property, state, query } from \\"lit/decorators.js\\";

@customElement(\\"my-component\\")
export default class MyComponent extends LitElement {
  createRenderRoot() {
    return this;
  }

  render() {
    return html\`
      
      <div>
      <my-slot><div></div></my-slot>
      <my-slot name=\\"Test\\"
        ><div><div></div></div
      ></my-slot>
    </div>

    \`;
  }
}
"
`;

exports[`Lit > svelte > Typescript Test > style 1`] = `
"import { LitElement, html, css } from \\"lit\\";
import { customElement, property, state, query } from \\"lit/decorators.js\\";

@customElement(\\"my-component\\")
export default class MyComponent extends LitElement {
  createRenderRoot() {
    return this;
  }

  render() {
    return html\`
        <style>input {
color: red;
font-size: 12px;
}

.form-input:focus {
outline: 1px solid blue;
}
</style>
        <input />

      \`;
  }
}
"
`;

exports[`Lit > svelte > Typescript Test > textExpressions 1`] = `
"import { LitElement, html, css } from \\"lit\\";
import { customElement, property, state, query } from \\"lit/decorators.js\\";

@customElement(\\"my-component\\")
export default class MyComponent extends LitElement {
  createRenderRoot() {
    return this;
  }

  @state() a = 5;
  @state() b = 12;

  render() {
    return html\`
      
      <div>
      <div></div>
      <div></div>
      <br />
      <div></div>
      <div></div>
    </div>

    \`;
  }
}
"
`;
