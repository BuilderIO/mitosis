// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Vue AdvancedRef 1`] = `
"<template>
  <div>
    <input
      class=\\"input\\"
      ref=\\"inputRef\\"
      :value=\\"name\\"
      @blur=\\"onBlur()\\"
      @input=\\"name = $event.target.value\\"
    />

    <label for=\\"cars\\" ref=\\"inputNoArgRef\\"> Choose a car: </label>

    <select name=\\"cars\\" id=\\"cars\\">
      <option value=\\"supra\\">GR Supra</option>
      <option value=\\"86\\">GR 86</option>
    </select>

    Hello
    {{ lowerCaseName() }}! I can run in React, Qwik, Vue, Solid, or Web
    Component!
  </div>
</template>
<script setup lang=\\"ts\\">
    import { defineComponent, defineProps, ref, watch } from \\"vue\\"





    export interface Props {
showInput: boolean;
}
    defineProps(Props)
    const name= ref('PatrickJS')






    const inputRef = ref<HTMLInputElement>()
const inputNoArgRef = ref<HTMLLabelElement>()



    watch([inputRef, inputNoArgRef], ([inputRef, inputNoArgRef]) => {

console.log('Received an update');

            })

    function onBlur = function onBlur() {
// Maintain focus
inputRef.focus();
}
function lowerCaseName = function lowerCaseName() {
return name.toLowerCase();
}
</script>
<style scoped>
.input {
  color: red;
}
</style>
"
`;

exports[`Vue Basic 1`] = `
"<template>
  <div class=\\"test div\\">
    <input
      :value=\\"DEFAULT_VALUES.name || name\\"
      @input=\\"name = $event.target.value\\"
    />
    Hello! I can run in React, Vue, Solid, or Liquid!
  </div>
</template>
<script setup lang=\\"ts\\">
    import { defineComponent, ref } from \\"vue\\"


  export const DEFAULT_VALUES = {
name: 'Steve'
};


    export interface MyBasicComponentProps {
id: string
}
    const name= ref('Steve')











    function  underscore_fn_name() {
return 'bar';
}
</script>
<style scoped>
.div {
  padding: 10px;
}
</style>
"
`;

exports[`Vue Basic 2`] = `
"<template>
  <div>
    <input
      v-if=\\"person === name\\"
      :value=\\"name\\"
      @input=\\"name = $event.target.value + ' and ' + person\\"
    />
  </div>
</template>
<script setup lang=\\"ts\\">
    import { defineComponent, ref } from \\"vue\\"






    const name= ref('PatrickJS')
const names= ref(['Steve', 'PatrickJS'])
</script>
"
`;

exports[`Vue Basic Context 1`] = `
"<template>
  <div>
    {{ myService.method(\\"hello\\") + name }}
    Hello! I can run in React, Vue, Solid, or Liquid!
    <input @input=\\"onChange\\" />
  </div>
</template>
<script setup lang=\\"ts\\">
  import { defineComponent, inject, onMounted, provide, ref } from \\"vue\\"

import { Injector, createInjector, MyService } from '@dummy/injection-js';




  const name= ref('PatrickJS')


  const myService = inject(MyService)

  provide(Injector, createInjector())


  onMounted(() => { const bye = myService.method('hi');
console.log(bye)})



  function onChange = function onChange() {
const change = myService.method('change');
console.log(change);
}
</script>
"
`;

exports[`Vue Basic OnMount Update 1`] = `
"<template>
  <div>Hello {{ name }}</div>
</template>
<script setup lang=\\"ts\\">
    import { defineComponent, defineProps, onMounted, ref } from \\"vue\\"





    export interface Props {
hi: string;
bye: string;
}
    defineProps(Props)
const name= ref('PatrickJS')
const names= ref(['Steve', 'PatrickJS'])







onMounted(() => { name = 'PatrickJS onMount' + bye})
</script>
"
`;

exports[`Vue Basic Outputs 1`] = `
"<template>
  <div></div>
</template>
<script setup lang=\\"ts\\">
  import { defineComponent, defineProps, onMounted, ref } from \\"vue\\"






  defineProps(any)
const name= ref('PatrickJS')







onMounted(() => { onMessage(name);
onEvent(message)})
</script>
"
`;

exports[`Vue Basic Outputs Meta 1`] = `
"<template>
  <div></div>
</template>
<script setup lang=\\"ts\\">
  import { defineComponent, defineProps, onMounted, ref } from \\"vue\\"






  defineProps(any)
const name= ref('PatrickJS')







onMounted(() => { onMessage(name);
onEvent(message)})
</script>
"
`;

exports[`Vue BasicChildComponent 1`] = `
"<template>
  <div>
    <my-basic-component :id=\\"dev\\"></my-basic-component>
    <div>
      <my-basic-on-mount-update-component
        :hi=\\"name\\"
        :bye=\\"dev\\"
      ></my-basic-on-mount-update-component>
    </div>
  </div>
</template>
<script setup lang=\\"ts\\">
  import { defineComponent, ref } from \\"vue\\"

import MyBasicComponent from './basic.raw';
import MyBasicOnMountUpdateComponent from './basic-onMount-update.raw';




  const name= ref('Steve')
const dev= ref('PatrickJS')
</script>
"
`;

exports[`Vue BasicFor 1`] = `
"<template>
  <div>
    <input
      :value=\\"name\\"
      @input=\\"name = $event.target.value + ' and ' + person\\"
    />

    Hello
    {{ person }}
    ! I can run in Qwik, Web Component, React, Vue, Solid, or Liquid!
  </div>
</template>
<script setup lang=\\"ts\\">
    import { defineComponent, onMounted, ref } from \\"vue\\"






    const name= ref('PatrickJS')
const names= ref(['Steve', 'PatrickJS'])







onMounted(() => { console.log('onMount code')})
</script>
"
`;

exports[`Vue BasicRef 1`] = `
"<template>
  <div>
    <input
      class=\\"input\\"
      ref=\\"inputRef\\"
      :value=\\"name\\"
      @blur=\\"onBlur()\\"
      @input=\\"name = $event.target.value\\"
    />

    <label for=\\"cars\\" ref=\\"inputNoArgRef\\"> Choose a car: </label>

    <select name=\\"cars\\" id=\\"cars\\">
      <option value=\\"supra\\">GR Supra</option>
      <option value=\\"86\\">GR 86</option>
    </select>

    Hello
    {{ lowerCaseName() }}! I can run in React, Qwik, Vue, Solid, or Web
    Component!
  </div>
</template>
<script setup lang=\\"ts\\">
    import { defineComponent, defineProps, ref } from \\"vue\\"





    export interface Props {
showInput: boolean;
}
    defineProps(Props)
    const name= ref('PatrickJS')






    const inputRef = ref<HTMLInputElement>()
const inputNoArgRef = ref<HTMLLabelElement>()




    function onBlur = function onBlur() {
// Maintain focus
inputRef.focus();
}
function lowerCaseName = function lowerCaseName() {
return name.toLowerCase();
}
</script>
<style scoped>
.input {
  color: red;
}
</style>
"
`;

exports[`Vue BasicRefAssignment 1`] = `
"<template>
  <div>
    <button @click=\\"handlerClick($event)\\">Click</button>
  </div>
</template>
<script setup lang=\\"ts\\">
    import { defineComponent } from \\"vue\\"





    export interface Props {
showInput: boolean;
}
    const holdValueRef = ref<undefined>()




    function handlerClick = function handlerClick(event) {
event.preventDefault();
console.log('current value', holdValueRef);
holdValueRef = holdValueRef + 'JS';
}
</script>
"
`;

exports[`Vue BasicRefPrevious 1`] = `
"<template>
  <div>
    <h1>Now: {{ count }}, before: {{ prevCount }}</h1>
    <button @click=\\"count += 1\\">Increment</button>
  </div>
</template>
<script setup lang=\\"ts\\">
    import { defineComponent, ref, watch } from \\"vue\\"


  export function usePrevious<T>(value: T) {
// The ref object is a generic container whose current property is mutable ...
// ... and can hold any value, similar to an instance property on a class
let ref = useRef<T>(null); // Store current value in ref

onUpdate(() => {
  ref = value;
}, [value]); // Only re-run if value changes
// Return previous value (happens before update in useEffect above)

return ref;
}


    export interface Props {
showInput: boolean;
}
    const count= ref(0)






    const prevCount = ref<undefined>()



    watch([count], ([count]) => {

prevCount = count;

            })
</script>
"
`;

exports[`Vue Button 1`] = `
"<template>
  <a
    v-bind=\\"attributes\\"
    v-if=\\"link\\"
    :href=\\"link\\"
    :target=\\"openLinkInNewTab ? '_blank' : undefined\\"
  >
    {{ text }}
  </a>

  <button v-bind=\\"attributes\\" type=\\"button\\" v-if=\\"!link\\">
    {{ text }}
  </button>
</template>
<script setup lang=\\"ts\\">
    import { defineComponent, defineProps } from \\"vue\\"





    export interface ButtonProps {
attributes?: any;
text?: string;
link?: string;
openLinkInNewTab?: boolean;
}
    defineProps(ButtonProps)
</script>
"
`;

exports[`Vue Columns 1`] = `
"<template>
  <div class=\\"builder-columns div\\">
    <div
      class=\\"builder-column div-2\\"
      v-for=\\"(column, index) in columns\\"
      :key=\\"index\\"
    >
      {{ column.content }} {{ index }}
    </div>
  </div>
</template>
<script setup lang=\\"ts\\">
    import { defineComponent, defineProps } from \\"vue\\"





    type Column = {
content: any; // TODO: Implement this when support for dynamic CSS lands

width?: number;
};
export interface ColumnProps {
columns?: Column[]; // TODO: Implement this when support for dynamic CSS lands

space?: number; // TODO: Implement this when support for dynamic CSS lands

stackColumnsAt?: 'tablet' | 'mobile' | 'never'; // TODO: Implement this when support for dynamic CSS lands

reverseColumnsWhenStacked?: boolean;
}
    defineProps(ColumnProps)











    function  getColumns() {
return columns || [];
}
function  getGutterSize() {
return typeof space === 'number' ? space || 0 : 20;
}
function  getWidth(index) {
const columns = getColumns();
return columns[index] && columns[index].width || 100 / columns.length;
}
function  getColumnCssWidth(index) {
const columns = getColumns();
const gutterSize = getGutterSize();
const subtractWidth = gutterSize * (columns.length - 1) / columns.length;
return \`calc(\${getWidth(index)}% - \${subtractWidth}px)\`;
}
</script>
<style scoped>
.div {
  display: flex;
  flex-direction: column;
  align-items: stretch;
  line-height: normal;
}
@media (max-width: 999px) {
  .div {
    flex-direction: row;
  }
}
@media (max-width: 639px) {
  .div {
    flex-direction: row-reverse;
  }
}
.div-2 {
  flex-grow: 1;
}
</style>
"
`;

exports[`Vue ContentSlotHtml 1`] = `
"<template>
  <div>
    <slot :name=\\"slotTesting\\"></slot>
    <div>
      <hr />
    </div>
    <div>
      <slot></slot>
    </div>
  </div>
</template>
<script setup lang=\\"ts\\">
    import { defineComponent, defineProps } from \\"vue\\"





    type Props = {
[key: string]: string | JSX.Element;
slotTesting: JSX.Element;
};
    defineProps(Props)
</script>
"
`;

exports[`Vue ContentSlotJSX 1`] = `
"<template>
  <div>
    <slot name=\\"testing\\" />
    <div>
      <hr />
    </div>
    <div><slot /></div>
  </div>
</template>
<script setup lang=\\"ts\\">
    import { defineComponent, defineProps } from \\"vue\\"





    type Props = {
[key: string]: string | JSX.Element;
};
    defineProps(Props)
</script>
"
`;

exports[`Vue CustomCode 1`] = `
"<template>
  <div
    ref=\\"elem\\"
    :class=\\"
      _classStringToObject(
        'builder-custom-code' + (replaceNodes ? ' replace-nodes' : '')
      )
    \\"
    v-html=\\"code\\"
  ></div>
</template>
<script setup lang=\\"ts\\">
    import { defineComponent, defineProps, onMounted, ref } from \\"vue\\"





    export interface CustomCodeProps {
code: string;
replaceNodes?: boolean;
}
    defineProps(CustomCodeProps)
    const scriptsInserted= ref([])
const scriptsRun= ref([])






    const elem = ref<HTMLDivElement>()
    onMounted(() => { findAndRunScripts()})



    function  findAndRunScripts() {
// TODO: Move this function to standalone one in '@builder.io/utils'
if (elem && typeof window !== 'undefined') {
/** @type {HTMLScriptElement[]} */
const scripts = elem.getElementsByTagName('script');

for (let i = 0; i < scripts.length; i++) {
  const script = scripts[i];

  if (script.src) {
    if (scriptsInserted.includes(script.src)) {
      continue;
    }

    scriptsInserted.push(script.src);
    const newScript = document.createElement('script');
    newScript.async = true;
    newScript.src = script.src;
    document.head.appendChild(newScript);
  } else if (!script.type || ['text/javascript', 'application/javascript', 'application/ecmascript'].includes(script.type)) {
    if (scriptsRun.includes(script.innerText)) {
      continue;
    }

    try {
      scriptsRun.push(script.innerText);
      new Function(script.innerText)();
    } catch (error) {
      console.warn('\`CustomCode\`: Error running script:', error);
    }
  }
}
}
}
</script>
"
`;

exports[`Vue Embed 1`] = `
"<template>
  <div
    ref=\\"elem\\"
    :class=\\"
      _classStringToObject(
        'builder-custom-code' + (replaceNodes ? ' replace-nodes' : '')
      )
    \\"
    v-html=\\"code\\"
  ></div>
</template>
<script setup lang=\\"ts\\">
    import { defineComponent, defineProps, onMounted, ref } from \\"vue\\"





    export interface CustomCodeProps {
code: string;
replaceNodes?: boolean;
}
    defineProps(CustomCodeProps)
    const scriptsInserted= ref([])
const scriptsRun= ref([])






    const elem = ref<HTMLDivElement>()
    onMounted(() => { findAndRunScripts()})



    function  findAndRunScripts() {
// TODO: Move this function to standalone one in '@builder.io/utils'
if (elem && typeof window !== 'undefined') {
/** @type {HTMLScriptElement[]} */
const scripts = elem.getElementsByTagName('script');

for (let i = 0; i < scripts.length; i++) {
  const script = scripts[i];

  if (script.src) {
    if (scriptsInserted.includes(script.src)) {
      continue;
    }

    scriptsInserted.push(script.src);
    const newScript = document.createElement('script');
    newScript.async = true;
    newScript.src = script.src;
    document.head.appendChild(newScript);
  } else if (!script.type || ['text/javascript', 'application/javascript', 'application/ecmascript'].includes(script.type)) {
    if (scriptsRun.includes(script.innerText)) {
      continue;
    }

    try {
      scriptsRun.push(script.innerText);
      new Function(script.innerText)();
    } catch (error) {
      console.warn('\`CustomCode\`: Error running script:', error);
    }
  }
}
}
}
</script>
"
`;

exports[`Vue Form 1`] = `
"<template>
  <form
    v-bind=\\"attributes\\"
    :validate=\\"validate\\"
    ref=\\"formRef\\"
    :action=\\"!sendWithJs && action\\"
    :method=\\"method\\"
    :name=\\"name\\"
    @submit=\\"onSubmit($event)\\"
  >
    <builder-block-component
      v-for=\\"(block, index) in builderBlock?.children\\"
      v-if=\\"builderBlock && builderBlock.children\\"
      :block=\\"block\\"
      :index=\\"index\\"
      :key=\\"block.id\\"
    ></builder-block-component>

    <builder-blocks
      dataPath=\\"errorMessage\\"
      v-if=\\"submissionState === 'error'\\"
      :blocks=\\"errorMessage\\"
    ></builder-blocks>

    <builder-blocks
      dataPath=\\"sendingMessage\\"
      v-if=\\"submissionState === 'sending'\\"
      :blocks=\\"sendingMessage\\"
    ></builder-blocks>

    <pre
      class=\\"builder-form-error-text pre\\"
      v-if=\\"submissionState === 'error' && responseData\\"
    >
        {{ JSON.stringify(responseData, null, 2) }}
      </pre
    >

    <builder-blocks
      dataPath=\\"successMessage\\"
      v-if=\\"submissionState === 'success'\\"
      :blocks=\\"successMessage\\"
    ></builder-blocks>
  </form>
</template>
<script setup lang=\\"ts\\">
    import { defineComponent, defineProps, ref } from \\"vue\\"

  import { BuilderBlock as BuilderBlockComponent } from '@fake';
import { Builder, builder } from '@builder.io/sdk';
import { BuilderBlocks } from '@fake';
import { set } from '@fake';
import { get } from '@fake';



    export interface FormProps {
attributes?: any;
name?: string;
action?: string;
validate?: boolean;
method?: string;
builderBlock?: BuilderElement;
sendSubmissionsTo?: string;
sendSubmissionsToEmail?: string;
sendWithJs?: boolean;
contentType?: string;
customHeaders?: {
  [key: string]: string;
};
successUrl?: string;
previewState?: FormState;
successMessage?: BuilderElement[];
errorMessage?: BuilderElement[];
sendingMessage?: BuilderElement[];
resetFormOnSubmit?: boolean;
errorMessagePath?: string;
}
export type FormState = 'unsubmitted' | 'sending' | 'success' | 'error';
    defineProps(FormProps)
    const formState= ref('unsubmitted')
const responseData= ref(null)
const formErrorMessage= ref('')






    const formRef = ref<HTMLFormElement>()




    function  onSubmit(event) {
const sendWithJs = sendWithJs || sendSubmissionsTo === 'email';

if (sendSubmissionsTo === 'zapier') {
event.preventDefault();
} else if (sendWithJs) {
if (!(action || sendSubmissionsTo === 'email')) {
  event.preventDefault();
  return;
}

event.preventDefault();
const el = event.currentTarget;
const headers = customHeaders || {};
let body;
const formData = new FormData(el); // TODO: maybe support null

const formPairs = Array.from(event.currentTarget.querySelectorAll('input,select,textarea')).filter(el => !!el.name).map(el => {
  let value;
  const key = el.name;

  if (el instanceof HTMLInputElement) {
    if (el.type === 'radio') {
      if (el.checked) {
        value = el.name;
        return {
          key,
          value
        };
      }
    } else if (el.type === 'checkbox') {
      value = el.checked;
    } else if (el.type === 'number' || el.type === 'range') {
      const num = el.valueAsNumber;

      if (!isNaN(num)) {
        value = num;
      }
    } else if (el.type === 'file') {
      // TODO: one vs multiple files
      value = el.files;
    } else {
      value = el.value;
    }
  } else {
    value = el.value;
  }

  return {
    key,
    value
  };
});
let contentType = contentType;

if (sendSubmissionsTo === 'email') {
  contentType = 'multipart/form-data';
}

Array.from(formPairs).forEach(({
  value
}) => {
  if (value instanceof File || Array.isArray(value) && value[0] instanceof File || value instanceof FileList) {
    contentType = 'multipart/form-data';
  }
}); // TODO: send as urlEncoded or multipart by default
// because of ease of use and reliability in browser API
// for encoding the form?

if (contentType !== 'application/json') {
  body = formData;
} else {
  // Json
  const json = {};
  Array.from(formPairs).forEach(({
    value,
    key
  }) => {
    set(json, key, value);
  });
  body = JSON.stringify(json);
}

if (contentType && contentType !== 'multipart/form-data') {
  if (
  /* Zapier doesn't allow content-type header to be sent from browsers */
  !(sendWithJs && action?.includes('zapier.com'))) {
    headers['content-type'] = contentType;
  }
}

const presubmitEvent = new CustomEvent('presubmit', {
  detail: {
    body
  }
});

if (formRef) {
  formRef.dispatchEvent(presubmitEvent);

  if (presubmitEvent.defaultPrevented) {
    return;
  }
}

formState = 'sending';
const formUrl = \`\${builder.env === 'dev' ? 'http://localhost:5000' : 'https://builder.io'}/api/v1/form-submit?apiKey=\${builder.apiKey}&to=\${btoa(sendSubmissionsToEmail || '')}&name=\${encodeURIComponent(name || '')}\`;
fetch(sendSubmissionsTo === 'email' ? formUrl : action
/* TODO: throw error if no action URL */
, {
  body,
  headers,
  method: method || 'post'
}).then(async res => {
  let body;
  const contentType = res.headers.get('content-type');

  if (contentType && contentType.indexOf('application/json') !== -1) {
    body = await res.json();
  } else {
    body = await res.text();
  }

  if (!res.ok && errorMessagePath) {
    /* TODO: allow supplying an error formatter function */
    let message = get(body, errorMessagePath);

    if (message) {
      if (typeof message !== 'string') {
        /* TODO: ideally convert json to yaml so it woul dbe like
         error: - email has been taken */
        message = JSON.stringify(message);
      }

      formErrorMessage = message;
    }
  }

  responseData = body;
  formState = res.ok ? 'success' : 'error';

  if (res.ok) {
    const submitSuccessEvent = new CustomEvent('submit:success', {
      detail: {
        res,
        body
      }
    });

    if (formRef) {
      formRef.dispatchEvent(submitSuccessEvent);

      if (submitSuccessEvent.defaultPrevented) {
        return;
      }
      /* TODO: option to turn this on/off? */


      if (resetFormOnSubmit !== false) {
        formRef.reset();
      }
    }
    /* TODO: client side route event first that can be preventDefaulted */


    if (successUrl) {
      if (formRef) {
        const event = new CustomEvent('route', {
          detail: {
            url: successUrl
          }
        });
        formRef.dispatchEvent(event);

        if (!event.defaultPrevented) {
          location.href = successUrl;
        }
      } else {
        location.href = successUrl;
      }
    }
  }
}, err => {
  const submitErrorEvent = new CustomEvent('submit:error', {
    detail: {
      error: err
    }
  });

  if (formRef) {
    formRef.dispatchEvent(submitErrorEvent);

    if (submitErrorEvent.defaultPrevented) {
      return;
    }
  }

  responseData = err;
  formState = 'error';
});
}
}
</script>
<style scoped>
.pre {
  padding: 10px;
  color: red;
  text-align: center;
}
</style>
"
`;

exports[`Vue Image 1`] = `
"<template>
  <picture ref=\\"pictureRef\\">
    <img
      v-if=\\"!useLazyLoading() || load\\"
      :alt=\\"altText\\"
      :aria-role=\\"altText ? 'presentation' : undefined\\"
      :class=\\"
        _classStringToObject(
          'builder-image' + (_class ? ' ' + _class : '') + ' img'
        )
      \\"
      :src=\\"image\\"
      @load=\\"setLoaded()\\"
      :srcset=\\"srcset\\"
      :sizes=\\"sizes\\"
    />

    <source :srcset=\\"srcset\\" />
  </picture>

  <slot />
</template>
<script setup lang=\\"ts\\">
    import { defineComponent, defineProps, onMounted, onUnMounted, ref } from \\"vue\\"





    // TODO: AMP Support?
export interface ImageProps {
_class?: string;
image: string;
sizes?: string;
lazy?: boolean;
height?: number;
width?: number;
altText?: string;
backgroundSize?: string;
backgroundPosition?: string; // TODO: Support generating Builder.io and or Shopify \`srcset\`s when needed

srcset?: string; // TODO: Implement support for custom aspect ratios

aspectRatio?: number; // TODO: This might not work as expected in terms of positioning

children?: any;
}
    defineProps(ImageProps)
    const scrollListener= ref(null)
const imageLoaded= ref(false)
const load= ref(false)






    const pictureRef = ref<HTMLElement>()
    onMounted(() => { if (useLazyLoading()) {
// throttled scroll capture listener
const listener = () => {
if (pictureRef) {
  const rect = pictureRef.getBoundingClientRect();
  const buffer = window.innerHeight / 2;

  if (rect.top < window.innerHeight + buffer) {
    setLoad(true);
    scrollListener = null;
    window.removeEventListener('scroll', listener);
  }
}
};

scrollListener = listener;
window.addEventListener('scroll', listener, {
capture: true,
passive: true
});
listener();
}})
    onMounted(() => { if (scrollListener) {
window.removeEventListener('scroll', scrollListener);
}})


    function  setLoaded() {
imageLoaded = true;
}
function  useLazyLoading() {
// TODO: Add more checks here, like testing for real web browsers
return !!lazy && isBrowser();
}
function isBrowser = function isBrowser() {
return typeof window !== 'undefined' && window.navigator.product != 'ReactNative';
}
</script>
<style scoped>
.img {
  opacity: 1;
  transition: opacity 0.2s ease-in-out;
  object-fit: cover;
  object-position: center;
}
</style>
"
`;

exports[`Vue Image State 1`] = `
"<template>
  <div>
    <img class=\\"custom-class\\" :src=\\"item\\" :key=\\"itemIndex\\" />
  </div>
</template>
<script setup lang=\\"ts\\">
  import { defineComponent, ref } from \\"vue\\"






  const canShow= ref(true)
const images= ref(['http://example.com/qwik.png'])
</script>
"
`;

exports[`Vue Img 1`] = `
"<template>
  <img
    v-bind=\\"attributes\\"
    :style=\\"{
      objectFit: backgroundSize || 'cover',
      objectPosition: backgroundPosition || 'center',
    }\\"
    :key=\\"(Builder.isEditing && imgSrc) || 'default-key'\\"
    :alt=\\"altText\\"
    :src=\\"imgSrc\\"
  />
</template>
<script setup lang=\\"ts\\">
    import { defineComponent, defineProps } from \\"vue\\"

  import { Builder } from '@builder.io/sdk';



    export interface ImgProps {
attributes?: any;
imgSrc?: string;
altText?: string;
backgroundSize?: 'cover' | 'contain';
backgroundPosition?: 'center' | 'top' | 'left' | 'right' | 'bottom' | 'top left' | 'top right' | 'bottom left' | 'bottom right';
}
    defineProps(ImgProps)
</script>
"
`;

exports[`Vue Input 1`] = `
"<template>
  <input
    v-bind=\\"attributes\\"
    :key=\\"Builder.isEditing && defaultValue ? defaultValue : 'default-key'\\"
    :placeholder=\\"placeholder\\"
    :type=\\"type\\"
    :name=\\"name\\"
    :value=\\"value\\"
    :defaultValue=\\"defaultValue\\"
    :required=\\"required\\"
  />
</template>
<script setup lang=\\"ts\\">
    import { defineComponent, defineProps } from \\"vue\\"

  import { Builder } from '@builder.io/sdk';



    export interface FormInputProps {
type?: string;
attributes?: any;
name?: string;
value?: string;
placeholder?: string;
defaultValue?: string;
required?: boolean;
}
    defineProps(FormInputProps)
</script>
"
`;

exports[`Vue RawText 1`] = `
"<template>
  <span
    :class=\\"_classStringToObject(attributes?.class || attributes?.className)\\"
    v-html=\\"text || ''\\"
  ></span>
</template>
<script setup lang=\\"ts\\">
    import { defineComponent, defineProps } from \\"vue\\"





    export interface RawTextProps {
attributes?: any;
text?: string; // builderBlock?: any;

}
    defineProps(RawTextProps)
</script>
"
`;

exports[`Vue Remove Internal mitosis package 1`] = `
"<template>
  <div>Hello {{ name }}! I can run in React, Qwik, Vue, Solid, or Liquid!</div>
</template>
<script setup lang=\\"ts\\">
import { defineComponent, ref } from \\"vue\\"






const name= ref('PatrickJS')
</script>
"
`;

exports[`Vue Section 1`] = `
"<template>
  <section
    v-bind=\\"attributes\\"
    :style=\\"
      maxWidth && typeof maxWidth === 'number'
        ? {
            maxWidth: maxWidth,
          }
        : undefined
    \\"
  >
    <slot />
  </section>
</template>
<script setup lang=\\"ts\\">
    import { defineComponent, defineProps } from \\"vue\\"





    export interface SectionProps {
maxWidth?: number;
attributes?: any;
children?: any;
}
    defineProps(SectionProps)
</script>
"
`;

exports[`Vue Section 2`] = `
"<template>
  <section
    v-bind=\\"attributes\\"
    v-for=\\"(item, index) in items\\"
    v-if=\\"max\\"
    :style=\\"{
      maxWidth: item + max,
    }\\"
    :key=\\"index\\"
  >
    <slot />
  </section>
</template>
<script setup lang=\\"ts\\">
    import { defineComponent, defineProps, ref } from \\"vue\\"





    export interface SectionProps {
maxWidth?: number;
attributes?: any;
children?: any;
}
    defineProps(SectionProps)
const max= ref(42)
const items= ref([42])
</script>
"
`;

exports[`Vue Select 1`] = `
"<template>
  <select
    v-bind=\\"attributes\\"
    :value=\\"value\\"
    :key=\\"Builder.isEditing && defaultValue ? defaultValue : 'default-key'\\"
    :defaultValue=\\"defaultValue\\"
    :name=\\"name\\"
  >
    <option
      v-for=\\"(option, index) in options\\"
      :value=\\"option.value\\"
      :data-index=\\"index\\"
      :key=\\"index\\"
    >
      {{ option.name || option.value }}
    </option>
  </select>
</template>
<script setup lang=\\"ts\\">
    import { defineComponent, defineProps } from \\"vue\\"

  import { Builder } from '@builder.io/sdk';



    export interface FormSelectProps {
options?: {
  name?: string;
  value: string;
}[];
attributes?: any;
name?: string;
value?: string;
defaultValue?: string;
}
    defineProps(FormSelectProps)
</script>
"
`;

exports[`Vue SlotHtml 1`] = `
"<template>
  <div>
    <content-slot-code>
      <slot :testing=\\"<div>Hello</div>\\"></slot>
    </content-slot-code>
  </div>
</template>
<script setup lang=\\"ts\\">
    import { defineComponent } from \\"vue\\"

  import ContentSlotCode from './content-slot-jsx.raw';



    type Props = {
[key: string]: string;
};
</script>
"
`;

exports[`Vue SlotJsx 1`] = `
"<template>
  <div>
    <content-slot-code :slotTesting=\\"<div>Hello</div>\\"></content-slot-code>
  </div>
</template>
<script setup lang=\\"ts\\">
    import { defineComponent } from \\"vue\\"

  import ContentSlotCode from './content-slot-jsx.raw';



    type Props = {
[key: string]: string;
};
</script>
"
`;

exports[`Vue Stamped.io 1`] = `
"<template>
  <div :data-user=\\"name\\">
    <button @click=\\"showReviewPrompt = true\\">Write a review</button>

    <input placeholder=\\"Email\\" v-if=\\"showReviewPrompt\\" />

    <div class=\\"review\\" v-for=\\"(review, index) in reviews\\" :key=\\"review.id\\">
      <img class=\\"img\\" :src=\\"review.avatar\\" />
      <div
        :class=\\"
          _classStringToObject(showReviewPrompt ? 'bg-primary' : 'bg-secondary')
        \\"
      >
        <div>N: {{ index }}</div>
        <div>{{ review.author }}</div>
        <div>{{ review.reviewMessage }}</div>
      </div>
    </div>
  </div>
</template>
<script setup lang=\\"ts\\">
    import { defineComponent, defineProps, onMounted, ref } from \\"vue\\"

  import { kebabCase } from 'lodash';
import { snakeCase } from 'lodash';



    type SmileReviewsProps = {
productId: string;
apiKey: string;
};
    defineProps(SmileReviewsProps)
    const reviews= ref([])
const name= ref('test')
const showReviewPrompt= ref(false)







    onMounted(() => { fetch(\`https://stamped.io/api/widget/reviews?storeUrl=builder-io.myshopify.com&apiKey=\${apiKey || 'pubkey-8bbDq7W6w4sB3OWeM1HUy2s47702hM'}&productId=\${productId || '2410511106127'}\`).then(res => res.json()).then(data => {
reviews = data.data;
})})



    function  kebabCaseValue() {
return kebabCase('testThat');
}
function  snakeCaseValue() {
return snakeCase('testThis');
}
</script>
<style scoped>
.input {
  display: block;
}
.textarea {
  display: block;
}
.button {
  display: block;
}
.review {
  margin: 10px;
  padding: 10px;
  background: white;
  display: flex;
  border-radius: 5px;
  box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
}
.img {
  height: 30px;
  width: 30px;
  margin-right: 10px;
}
</style>
"
`;

exports[`Vue Submit 1`] = `
"<template>
  <button v-bind=\\"attributes\\" type=\\"submit\\">
    {{ text }}
  </button>
</template>
<script setup lang=\\"ts\\">
    import { defineComponent, defineProps } from \\"vue\\"





    export interface ButtonProps {
attributes?: any;
text?: string;
}
    defineProps(ButtonProps)
</script>
"
`;

exports[`Vue Text 1`] = `
"<template>
  <div
    :contentEditable=\\"allowEditingText || undefined\\"
    :data-name=\\"{
      test: name || 'any name',
    }\\"
    v-html=\\"text || content || name || '<p class=\\\\'text-lg\\\\'>my name</p>'\\"
  ></div>
</template>
<script setup lang=\\"ts\\">
    import { defineComponent, defineProps, ref } from \\"vue\\"

  import { Builder } from '@builder.io/sdk';



    export interface TextProps {
attributes?: any;
rtlMode: boolean;
text?: string;
content?: string;
builderBlock?: any;
}
    defineProps(TextProps)
const name= ref('Decadef20')
</script>
"
`;

exports[`Vue Textarea 1`] = `
"<template>
  <textarea
    v-bind=\\"attributes\\"
    :placeholder=\\"placeholder\\"
    :name=\\"name\\"
    :value=\\"value\\"
    :defaultValue=\\"defaultValue\\"
  ></textarea>
</template>
<script setup lang=\\"ts\\">
    import { defineComponent, defineProps } from \\"vue\\"





    export interface TextareaProps {
attributes?: any;
name?: string;
value?: string;
defaultValue?: string;
placeholder?: string;
}
    defineProps(TextareaProps)
</script>
"
`;

exports[`Vue Video 1`] = `
"<template>
  <video
    v-bind=\\"attributes\\"
    preload=\\"none\\"
    :style=\\"{
      width: '100%',
      height: '100%',
      ...attributes?.style,
      objectFit: fit,
      objectPosition: position,
      // Hack to get object fit to work as expected and
      // not have the video overflow
      borderRadius: 1,
    }\\"
    :key=\\"video || 'no-src'\\"
    :poster=\\"posterImage\\"
    :autoplay=\\"autoPlay\\"
    :muted=\\"muted\\"
    :controls=\\"controls\\"
    :loop=\\"loop\\"
  ></video>
</template>
<script setup lang=\\"ts\\">
    import { defineComponent, defineProps } from \\"vue\\"





    export interface VideoProps {
attributes?: any;
video?: string;
autoPlay?: boolean;
controls?: boolean;
muted?: boolean;
loop?: boolean;
playsInline?: boolean;
aspectRatio?: number;
width?: number;
height?: number;
fit?: 'contain' | 'cover' | 'fill';
position?: 'center' | 'top' | 'left' | 'right' | 'bottom' | 'top left' | 'top right' | 'bottom left' | 'bottom right';
posterImage?: string;
lazyLoad?: boolean;
}
    defineProps(VideoProps)
</script>
"
`;

exports[`Vue basicForwardRef 1`] = `
"<template>
  <div>
    <input
      class=\\"input\\"
      ref=\\"inputRef\\"
      :value=\\"name\\"
      @input=\\"name = $event.target.value\\"
    />
  </div>
</template>
<script setup lang=\\"ts\\">
    import { defineComponent, defineProps, ref } from \\"vue\\"





    export interface Props {
showInput: boolean;
inputRef: HTMLInputElement;
}
    defineProps(Props)
const name= ref('PatrickJS')
</script>
<style scoped>
.input {
  color: red;
}
</style>
"
`;

exports[`Vue basicForwardRefMetadata 1`] = `
"<template>
  <div>
    <input
      class=\\"input\\"
      ref=\\"inputRef\\"
      :value=\\"name\\"
      @input=\\"name = $event.target.value\\"
    />
  </div>
</template>
<script setup lang=\\"ts\\">
    import { defineComponent, defineProps, ref } from \\"vue\\"





    export interface Props {
showInput: boolean;
inputRef: HTMLInputElement;
}
    defineProps(Props)
const name= ref('PatrickJS')
</script>
<style scoped>
.input {
  color: red;
}
</style>
"
`;

exports[`Vue basicOnUpdateReturn 1`] = `
"<template>
  <div>Hello! {{ name }}</div>
</template>
<script setup lang=\\"ts\\">
    import { defineComponent, ref, watch } from \\"vue\\"






    const name= ref('PatrickJS')










    watch([name], ([name]) => {

const controller = new AbortController();
const signal = controller.signal;
fetch('https://patrickjs.com/api/resource.json', {
signal
}).then(response => response.json()).then(data => {
name = data.name;
});
return () => {
if (!signal.aborted) {
  controller.abort();
}
};

            })
</script>
"
`;

exports[`Vue class + ClassName + css 1`] = `
"<template>
  <div class=\\"test2 test div\\">
    Hello! I can run in React, Vue, Solid, or Liquid!
  </div>
</template>
<script setup lang=\\"ts\\">
import { defineComponent } from \\"vue\\"
</script>
<style scoped>
.div {
  padding: 10px;
}
</style>
"
`;

exports[`Vue class + css 1`] = `
"<template>
  <div class=\\"test div\\">Hello! I can run in React, Vue, Solid, or Liquid!</div>
</template>
<script setup lang=\\"ts\\">
import { defineComponent } from \\"vue\\"
</script>
<style scoped>
.div {
  padding: 10px;
}
</style>
"
`;

exports[`Vue className + css 1`] = `
"<template>
  <div class=\\"test div\\">Hello! I can run in React, Vue, Solid, or Liquid!</div>
</template>
<script setup lang=\\"ts\\">
import { defineComponent } from \\"vue\\"
</script>
<style scoped>
.div {
  padding: 10px;
}
</style>
"
`;

exports[`Vue className 1`] = `
"<template>
  <div>
    <div class=\\"no binding\\">Without Binding</div>

    <div :class=\\"_classStringToObject(bindings)\\">With binding</div>
  </div>
</template>
<script setup lang=\\"ts\\">
    import { defineComponent, ref } from \\"vue\\"





    type Props = {
[key: string]: string | JSX.Element;
slotTesting: JSX.Element;
};
    const bindings= ref('a binding')
</script>
"
`;

exports[`Vue classState 1`] = `
"<template>
  <div :class=\\"_classStringToObject(classState + ' div')\\" :style=\\"styleState\\">
    Hello! I can run in React, Vue, Solid, or Liquid!
  </div>
</template>
<script setup lang=\\"ts\\">
  import { defineComponent, ref } from \\"vue\\"






  const classState= ref('testClassName')
const styleState= ref({
color: 'red'
})
</script>
<style scoped>
.div {
  padding: 10px;
}
</style>
"
`;

exports[`Vue defaultProps 1`] = `
"<template>
  <a
    v-bind=\\"attributes\\"
    v-if=\\"link\\"
    :href=\\"link\\"
    :target=\\"openLinkInNewTab ? '_blank' : undefined\\"
  >
    {{ text }}
  </a>

  <button v-bind=\\"attributes\\" type=\\"button\\" v-if=\\"!link\\">
    {{ text }}
  </button>
</template>
<script setup lang=\\"ts\\">
    import { defineComponent, defineProps, withDefaults } from \\"vue\\"





    export interface ButtonProps {
attributes?: any;
text?: string;
link?: string;
openLinkInNewTab?: boolean;
}
    withDefaults(defineProps<ButtonProps>(), {text:'default text',link:'https://builder.io/',openLinkInNewTab:false})
</script>
"
`;

exports[`Vue defaultValsWithTypes 1`] = `
"<template>
  <div>Hello {{ name || DEFAULT_VALUES.name }}</div>
</template>
<script setup lang=\\"ts\\">
    import { defineComponent, defineProps } from \\"vue\\"


  const DEFAULT_VALUES: Props = {
name: 'Sami'
};


    type Props = {
name: string;
};
    defineProps(Props)
</script>
"
`;

exports[`Vue multipleOnUpdate 1`] = `
"<template>
  <div></div>
</template>
<script setup lang=\\"ts\\">
  import { defineComponent, onUpdated } from \\"vue\\"






  onUpdated(() =>
console.log('Runs on every update/rerender');
),onUpdated(() =>
console.log('Runs on every update/rerender as well');
)
</script>
"
`;

exports[`Vue multipleOnUpdateWithDeps 1`] = `
"<template>
  <div></div>
</template>
<script setup lang=\\"ts\\">
    import { defineComponent, ref, watch } from \\"vue\\"






    const a= ref('a')
const b= ref('b')
const c= ref('c')
const d= ref('d')










    watch([a, b], ([a, b]) => {

console.log('Runs when a or b changes', a, b);

if (a === 'a') {
a = 'b';
}

            })
,watch([c, d], ([c, d]) => {

console.log('Runs when c or d changes', c, d);

if (a === 'a') {
a = 'b';
}

            })
</script>
"
`;

exports[`Vue nestedShow 1`] = `
"<template>
  <div v-if=\\"!Boolean(conditionA)\\">else-condition-A</div>

  <div v-else-if=\\"!Boolean(!conditionB)\\">else-condition-B</div>

  <div v-else>if condition A and condition B</div>
</template>
<script setup lang=\\"ts\\">
    import { defineComponent, defineProps } from \\"vue\\"





    interface Props {
conditionA: boolean;
conditionB: boolean;
}
    defineProps(Props)
</script>
"
`;

exports[`Vue nestedStyles 1`] = `
"<template>
  <div class=\\"div\\">Hello world</div>
</template>
<script setup lang=\\"ts\\">
import { defineComponent } from \\"vue\\"
</script>
<style scoped>
.div {
  display: flex;
  foo: var(--bar);
}
@media (max-width: env(--mobile)) {
  .div {
    display: block;
  }
}
.div:hover {
  display: flex;
}
.div .nested-selector {
  display: grid;
}
</style>
"
`;

exports[`Vue onInit & onMount 1`] = `
"<template>
  <div></div>
</template>
<script setup lang=\\"ts\\">
import { defineComponent, onMounted } from \\"vue\\"






onMounted(() => { console.log('onMount')})
</script>
"
`;

exports[`Vue onInit 1`] = `
"<template>
  <div>Default name defined by parent {{ name }}</div>
</template>
<script setup lang=\\"ts\\">
    import { defineComponent, defineProps, ref } from \\"vue\\"


  export const defaultValues = {
name: 'PatrickJS'
};


    type Props = {
name: string;
};
    defineProps(Props)
const name= ref('')
</script>
"
`;

exports[`Vue onMount 1`] = `
"<template>
  <div></div>
</template>
<script setup lang=\\"ts\\">
  import { defineComponent, onMounted, onUnMounted } from \\"vue\\"






  onMounted(() => { console.log('Runs on mount')})
onMounted(() => { console.log('Runs on unMount')})
</script>
"
`;

exports[`Vue onUpdate 1`] = `
"<template>
  <div></div>
</template>
<script setup lang=\\"ts\\">
  import { defineComponent, onUpdated } from \\"vue\\"






  onUpdated(() =>
console.log('Runs on every update/rerender');
)
</script>
"
`;

exports[`Vue onUpdateWithDeps 1`] = `
"<template>
  <div></div>
</template>
<script setup lang=\\"ts\\">
  import { defineComponent, ref, watch } from \\"vue\\"






  const a= ref('a')
const b= ref('b')










  watch([a, b], ([a, b]) => {

console.log('Runs when a or b changes', a, b);

          })
</script>
"
`;

exports[`Vue preserveExportOrLocalStatement 1`] = `
"<template>
  <div></div>
</template>
<script setup lang=\\"ts\\">
    import { defineComponent } from \\"vue\\"


  const b = 3;
const foo = () => {};
export const a = 3;
export const bar = () => {};
export function run<T>(value: T) {}


    type Types = {
s: any[];
};
interface IPost {
len: number;
}
export interface MyBasicComponentProps {
id: string
}
</script>
"
`;

exports[`Vue preserveTyping 1`] = `
"<template>
  <div>Hello! I can run in React, Vue, Solid, or Liquid! {{ name }}</div>
</template>
<script setup lang=\\"ts\\">
    import { defineComponent, defineProps } from \\"vue\\"





    export type A = 'test';
export interface C {
n: 'test';
}
type B = 'test2';
interface D {
n: 'test';
}
export interface MyBasicComponentProps {
name: string
age?: number
}
    defineProps(MyBasicComponentProps)
</script>
"
`;

exports[`Vue propsDestructure 1`] = `
"<template>
  <div>
    <slot /> {{ type }}
    Hello! I can run in React, Vue, Solid, or Liquid!
  </div>
</template>
<script setup lang=\\"ts\\">
    import { defineComponent, defineProps, ref } from \\"vue\\"





    type Props = {
children: any;
type: string;
};
    defineProps(Props)
const name= ref('Decadef20')
</script>
"
`;

exports[`Vue propsInterface 1`] = `
"<template>
  <div>Hello! I can run in React, Vue, Solid, or Liquid! {{ name }}</div>
</template>
<script setup lang=\\"ts\\">
    import { defineComponent, defineProps } from \\"vue\\"





    interface Person {
name: string;
age?: number;
}
    defineProps(Person | never)
</script>
"
`;

exports[`Vue propsType 1`] = `
"<template>
  <div>Hello! I can run in React, Vue, Solid, or Liquid! {{ name }}</div>
</template>
<script setup lang=\\"ts\\">
    import { defineComponent, defineProps } from \\"vue\\"





    type Person = {
name: string;
age?: number;
};
    defineProps(Person)
</script>
"
`;

exports[`Vue rootShow 1`] = `
"<template>
  <div v-if=\\"foo === 'bar'\\">Bar</div>
  <div v-else>Foo</div>
</template>
<script setup lang=\\"ts\\">
    import { defineComponent, defineProps } from \\"vue\\"





    export interface RenderStylesProps {
foo: string
}
    defineProps(RenderStylesProps)
</script>
"
`;

exports[`Vue self-referencing component 1`] = `
"<template>
  <div>
    {{ name }}

    <my-component name=\\"Bruce Wayne\\" v-if=\\"name === 'Batman'\\"></my-component>
  </div>
</template>
<script setup lang=\\"ts\\">
import { defineComponent, defineProps } from \\"vue\\"






defineProps(any)
</script>
"
`;

exports[`Vue self-referencing component with children 1`] = `
"<template>
  <div>
    {{ name }}
    <slot />

    <my-component name=\\"Bruce\\" v-if=\\"name === 'Batman'\\">
      <div>Wayne</div>
    </my-component>
  </div>
</template>
<script setup lang=\\"ts\\">
import { defineComponent, defineProps } from \\"vue\\"






defineProps(any)
</script>
"
`;

exports[`Vue showWithFor 1`] = `
"<template>
  <div v-for=\\"(item, index) in items\\" v-if=\\"conditionA\\" :key=\\"idx\\">
    {{ item }}
  </div>
  <div v-else>else-condition-A</div>
</template>
<script setup lang=\\"ts\\">
    import { defineComponent, defineProps } from \\"vue\\"





    interface Props {
conditionA: boolean;
items: string[];
}
    defineProps(Props)
</script>
"
`;

exports[`Vue subComponent 1`] = `
"<template>
  <foo></foo>
</template>
<script setup lang=\\"ts\\">
  import { defineComponent } from \\"vue\\"

import Foo from './foo-sub-component.vue';
</script>
"
`;

exports[`Vue typeDependency 1`] = `
"<template>
  <div>{{ foo }}</div>
</template>
<script setup lang=\\"ts\\">
    import { defineComponent, defineProps } from \\"vue\\"





    import type { Foo } from './foo-type';
import type { Foo as Foo2 } from \\"./type-export\\";
export type TypeDependencyProps = {
foo: Foo;
foo2: Foo2;
};
    defineProps(TypeDependencyProps)
</script>
"
`;
