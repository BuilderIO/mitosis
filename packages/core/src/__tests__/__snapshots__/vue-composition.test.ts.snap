// Vitest Snapshot v1

exports[`Vue > jsx > Javascript Test > AdvancedRef 1`] = `
"<template>
  <div>
    <div></div>
    <template v-if=\\"showInput\\">
      <div></div>
      <input @blur=\\"onBlur()\\" @input=\\"name = $event.target.value\\" />
      <div></div>
      <label><div></div></label>
      <div></div>
      <select name=\\"cars\\">
        <div></div>
        <option><div></div></option>
        <div></div>
        <option><div></div></option>
        <div></div>
      </select>
      <div></div>
    </template>

    <div></div>
    <div></div>
    <div></div>
  </div>
</template>

<script setup>
import { ref, watch } from \\"vue\\";

const props = defineProps([\\"showInput\\"]);
const name = ref(\\"PatrickJS\\");

const inputRef = ref(null);
const inputNoArgRef = ref(null);

watch(
  () => [inputRef.value, inputNoArgRef.value],
  ([inputRef, inputNoArgRef]) => {
    console.log(\\"Received an update\\");
  },
  { immediate: true }
);
function onBlur() {
  // Maintain focus
  inputRef.value.focus();
}
function lowerCaseName() {
  return name.value.toLowerCase();
}
</script>"
`;

exports[`Vue > jsx > Javascript Test > Basic 1`] = `
"<template>
  <div>
    <div></div>
    <input @input=\\"name = $event.target.value\\" />
    <div></div>
  </div>
</template>

<script setup>
import { ref } from \\"vue\\";

export const DEFAULT_VALUES = {
  name: \\"Steve\\",
};

const name = ref(\\"Steve\\");
const age = ref(1);
const sports = ref([\\"\\"]);

function underscore_fn_name() {
  return \\"bar\\";
}
</script>"
`;

exports[`Vue > jsx > Javascript Test > Basic 2`] = `
"<template>
  <div>
    <div></div>
    <template :key=\\"index\\" v-for=\\"(person, index) in names\\">
      <template v-if=\\"person === name\\">
        <div></div>
        <input @input=\\"name = $event.target.value + ' and ' + person\\" />
        <div></div>
        <div></div>
        <div></div>
      </template>
    </template>
    <div></div>
  </div>
</template>

<script setup>
import { ref } from \\"vue\\";

const name = ref(\\"PatrickJS\\");
const names = ref([\\"Steve\\", \\"PatrickJS\\"]);
</script>"
`;

exports[`Vue > jsx > Javascript Test > Basic Context 1`] = `
"<template>
  <div>
    <div></div>
    <div></div>
    <div></div>
    <input @input=\\"onChange\\" />
    <div></div>
  </div>
</template>

<script setup>
import { inject, onMounted, provide, ref } from \\"vue\\";

import { Injector, createInjector, MyService } from \\"@dummy/injection-js\\";

const name = ref(\\"PatrickJS\\");

const myService = inject(MyService.key);

provide(Injector.key, createInjector());

const hi = myService.method(\\"hi\\");
console.log(hi);
onMounted(() => {
  const bye = myService.method(\\"hi\\");
  console.log(bye);
});

function onChange() {
  const change = myService.method(\\"change\\");
  console.log(change);
}
</script>"
`;

exports[`Vue > jsx > Javascript Test > Basic OnMount Update 1`] = `
"<template>
  <div>
    <div></div>
    <div></div>
  </div>
</template>

<script setup>
import { onMounted, ref } from \\"vue\\";

const props = defineProps([\\"hi\\", \\"bye\\"]);
const name = ref(\\"PatrickJS\\");
const names = ref([\\"Steve\\", \\"PatrickJS\\"]);

name.value = \\"PatrickJS onInit\\" + props.hi;
onMounted(() => {
  name.value = \\"PatrickJS onMount\\" + props.bye;
});
</script>"
`;

exports[`Vue > jsx > Javascript Test > Basic Outputs 1`] = `
"<template>
  <div></div>
</template>

<script setup>
import { onMounted, ref } from \\"vue\\";

const props = defineProps([\\"onMessage\\", \\"onEvent\\", \\"message\\"]);
const name = ref(\\"PatrickJS\\");

onMounted(() => {
  props.onMessage(name);
  props.onEvent(props.message);
});
</script>"
`;

exports[`Vue > jsx > Javascript Test > Basic Outputs Meta 1`] = `
"<template>
  <div></div>
</template>

<script setup>
import { onMounted, ref } from \\"vue\\";

const props = defineProps([\\"onMessage\\", \\"onEvent\\", \\"message\\"]);
const name = ref(\\"PatrickJS\\");

onMounted(() => {
  props.onMessage(name);
  props.onEvent(props.message);
});
</script>"
`;

exports[`Vue > jsx > Javascript Test > BasicAttribute 1`] = `
"<template>
  <input />
</template>"
`;

exports[`Vue > jsx > Javascript Test > BasicBooleanAttribute 1`] = `
"<template>
  <div>
    <div></div>
    <div></div>
    <div></div>
    <div></div>
    <div></div>
    <my-boolean-attribute-component
      :toggle=\\"true\\"
    ></my-boolean-attribute-component>
    <div></div>
    <my-boolean-attribute-component
      :toggle=\\"true\\"
    ></my-boolean-attribute-component>
    <div></div>
    <my-boolean-attribute-component
      :list=\\"null\\"
    ></my-boolean-attribute-component>
    <div></div>
  </div>
</template>

<script setup>
import MyBooleanAttributeComponent from \\"./basic-boolean-attribute-component.raw\\";

const props = defineProps([\\"children\\", \\"type\\"]);
</script>"
`;

exports[`Vue > jsx > Javascript Test > BasicChildComponent 1`] = `
"<template>
  <div>
    <div></div>
    <my-basic-component :id=\\"dev\\"></my-basic-component>
    <div></div>
    <div>
      <div></div>
      <my-basic-on-mount-update-component
        :hi=\\"name\\"
        :bye=\\"dev\\"
      ></my-basic-on-mount-update-component>
      <div></div>
    </div>
    <div></div>
  </div>
</template>

<script setup>
import { ref } from \\"vue\\";

import MyBasicComponent from \\"./basic.raw\\";
import MyBasicOnMountUpdateComponent from \\"./basic-onMount-update.raw\\";

const name = ref(\\"Steve\\");
const dev = ref(\\"PatrickJS\\");
</script>"
`;

exports[`Vue > jsx > Javascript Test > BasicFor 1`] = `
"<template>
  <div>
    <div></div>
    <template :key=\\"index\\" v-for=\\"(person, index) in names\\">
      <div></div>
      <input @input=\\"name = $event.target.value + ' and ' + person\\" />
      <div></div>
      <div></div>
      <div></div>
    </template>
    <div></div>
  </div>
</template>

<script setup>
import { onMounted, ref } from \\"vue\\";

const name = ref(\\"PatrickJS\\");
const names = ref([\\"Steve\\", \\"PatrickJS\\"]);

onMounted(() => {
  console.log(\\"onMount code\\");
});
</script>"
`;

exports[`Vue > jsx > Javascript Test > BasicRef 1`] = `
"<template>
  <div>
    <div></div>
    <template v-if=\\"showInput\\">
      <div></div>
      <input @blur=\\"onBlur()\\" @input=\\"name = $event.target.value\\" />
      <div></div>
      <label><div></div></label>
      <div></div>
      <select name=\\"cars\\">
        <div></div>
        <option><div></div></option>
        <div></div>
        <option><div></div></option>
        <div></div>
      </select>
      <div></div>
    </template>

    <div></div>
    <div></div>
    <div></div>
  </div>
</template>

<script setup>
import { ref } from \\"vue\\";

const props = defineProps([\\"showInput\\"]);
const name = ref(\\"PatrickJS\\");

const inputRef = ref(null);
const inputNoArgRef = ref(null);

function onBlur() {
  // Maintain focus
  inputRef.value.focus();
}
function lowerCaseName() {
  return name.value.toLowerCase();
}
</script>"
`;

exports[`Vue > jsx > Javascript Test > BasicRefAssignment 1`] = `
"<template>
  <div>
    <div></div>
    <button @click=\\"handlerClick($event)\\"><div></div></button>
    <div></div>
  </div>
</template>

<script setup>
const holdValueRef = ref(null);

function handlerClick(event) {
  event.preventDefault();
  console.log(\\"current value\\", holdValueRef);
  holdValueRef.value = holdValueRef.value + \\"JS\\";
}
</script>"
`;

exports[`Vue > jsx > Javascript Test > BasicRefPrevious 1`] = `
"<template>
  <div>
    <div></div>
    <h1>
      <div></div>
      <div></div>
      <div></div>
      <div></div>
      <div></div>
    </h1>
    <div></div>
    <button @click=\\"count += 1\\"><div></div></button>
    <div></div>
  </div>
</template>

<script setup>
import { ref, watch } from \\"vue\\";

export function usePrevious<T>(value: T) {
  // The ref object is a generic container whose current property is mutable ...
  // ... and can hold any value, similar to an instance property on a class
  let ref = useRef < T > null; // Store current value in ref

  onUpdate(() => {
    ref = value;
  }, [value]); // Only re-run if value changes
  // Return previous value (happens before update in useEffect above)

  return ref;
}

const count = ref(0);

const prevCount = ref(null);

watch(
  () => [count.value],
  ([count]) => {
    prevCount.value = count.value;
  },
  { immediate: true }
);
</script>"
`;

exports[`Vue > jsx > Javascript Test > Button 1`] = `
"<template>
  <div>
    <div></div>
    <template v-if=\\"link\\">
      <div></div>
      <a
        ><div></div>
        <div></div>
        <div></div
      ></a>
      <div></div>
    </template>

    <div></div>
    <template v-if=\\"!link\\">
      <div></div>
      <button>
        <div></div>
        <div></div>
        <div></div>
      </button>
      <div></div>
    </template>

    <div></div>
  </div>
</template>

<script setup>
const props = defineProps([\\"link\\", \\"attributes\\", \\"openLinkInNewTab\\", \\"text\\"]);
</script>"
`;

exports[`Vue > jsx > Javascript Test > Columns 1`] = `
"<template>
  <div>
    <div></div>
    <template :key=\\"index\\" v-for=\\"(column, index) in columns\\">
      <div>
        <div></div>
        <div></div>
        <div></div>
        <div></div>
        <div></div>
      </div>
    </template>
    <div></div>
  </div>
</template>

<script setup>
const props = defineProps([\\"columns\\", \\"space\\"]);

function getColumns() {
  return props.columns || [];
}
function getGutterSize() {
  return typeof props.space === \\"number\\" ? props.space || 0 : 20;
}
function getWidth(index) {
  const columns = getColumns();
  return (columns[index] && columns[index].width) || 100 / columns.length;
}
function getColumnCssWidth(index) {
  const columns = getColumns();
  const gutterSize = getGutterSize();
  const subtractWidth = (gutterSize * (columns.length - 1)) / columns.length;
  return \`calc(\${getWidth(index)}% - \${subtractWidth}px)\`;
}
</script>"
`;

exports[`Vue > jsx > Javascript Test > ContentSlotHtml 1`] = `
"<template>
  <div>
    <div></div>
    <slot name=\\"testing\\"></slot>
    <div></div>
    <div>
      <div></div>
      <hr />
      <div></div>
    </div>
    <div></div>
    <div>
      <div></div>
      <slot />
      <div></div>
    </div>
    <div></div>
  </div>
</template>

<script setup>
import { useSlots } from \\"vue\\";
</script>"
`;

exports[`Vue > jsx > Javascript Test > ContentSlotJSX 1`] = `
"<template>
  <template v-if=\\"$slots.reference\\">
    <div></div>
    <div :name=\\"$slots.content ? 'name1' : 'name2'\\" @click=\\"show()\\">
      <div></div>
      <template v-if=\\"showContent && $slots.content\\">
        <div></div>
        <slot name=\\"content\\"><div></div></slot>
        <div></div>
      </template>

      <div></div>
      <div>
        <div></div>
        <hr />
        <div></div>
      </div>
      <div></div>
      <div><div></div></div>
      <div></div>
    </div>
    <div></div>
  </template>
</template>

<script setup>
import { computed, ref, useSlots } from \\"vue\\";

const props = withDefaults(defineProps(), {
  children: undefined,
  attributes: undefined,
  content: \\"\\",
});
const name = ref(\\"king\\");
const showContent = ref(false);

const cls = computed(() => {
  return useSlots().content && useSlots().default
    ? \`\${name.value}-content\`
    : \\"\\";
});

function show() {
  useSlots().content ? 1 : \\"\\";
}
</script>"
`;

exports[`Vue > jsx > Javascript Test > CustomCode 1`] = `
"<template>
  <div :innerhtml=\\"code\\"></div>
</template>

<script setup>
import { onMounted, ref } from \\"vue\\";

const props = defineProps([\\"replaceNodes\\", \\"code\\"]);
const scriptsInserted = ref([]);
const scriptsRun = ref([]);

const elem = ref(null);

onMounted(() => {
  findAndRunScripts();
});

function findAndRunScripts() {
  // TODO: Move this function to standalone one in '@builder.io/utils'
  if (elem.value && typeof window !== \\"undefined\\") {
    /** @type {HTMLScriptElement[]} */
    const scripts = elem.value.getElementsByTagName(\\"script\\");

    for (let i = 0; i < scripts.length; i++) {
      const script = scripts[i];

      if (script.src) {
        if (scriptsInserted.value.includes(script.src)) {
          continue;
        }

        scriptsInserted.value.push(script.src);
        const newScript = document.createElement(\\"script\\");
        newScript.async = true;
        newScript.src = script.src;
        document.head.appendChild(newScript);
      } else if (
        !script.type ||
        [
          \\"text/javascript\\",
          \\"application/javascript\\",
          \\"application/ecmascript\\",
        ].includes(script.type)
      ) {
        if (scriptsRun.value.includes(script.innerText)) {
          continue;
        }

        try {
          scriptsRun.value.push(script.innerText);
          new Function(script.innerText)();
        } catch (error) {
          console.warn(\\"\`CustomCode\`: Error running script:\\", error);
        }
      }
    }
  }
}
</script>"
`;

exports[`Vue > jsx > Javascript Test > Embed 1`] = `
"<template>
  <div :innerhtml=\\"code\\"></div>
</template>

<script setup>
import { onMounted, ref } from \\"vue\\";

const props = defineProps([\\"replaceNodes\\", \\"code\\"]);
const scriptsInserted = ref([]);
const scriptsRun = ref([]);

const elem = ref(null);

onMounted(() => {
  findAndRunScripts();
});

function findAndRunScripts() {
  // TODO: Move this function to standalone one in '@builder.io/utils'
  if (elem.value && typeof window !== \\"undefined\\") {
    /** @type {HTMLScriptElement[]} */
    const scripts = elem.value.getElementsByTagName(\\"script\\");

    for (let i = 0; i < scripts.length; i++) {
      const script = scripts[i];

      if (script.src) {
        if (scriptsInserted.value.includes(script.src)) {
          continue;
        }

        scriptsInserted.value.push(script.src);
        const newScript = document.createElement(\\"script\\");
        newScript.async = true;
        newScript.src = script.src;
        document.head.appendChild(newScript);
      } else if (
        !script.type ||
        [
          \\"text/javascript\\",
          \\"application/javascript\\",
          \\"application/ecmascript\\",
        ].includes(script.type)
      ) {
        if (scriptsRun.value.includes(script.innerText)) {
          continue;
        }

        try {
          scriptsRun.value.push(script.innerText);
          new Function(script.innerText)();
        } catch (error) {
          console.warn(\\"\`CustomCode\`: Error running script:\\", error);
        }
      }
    }
  }
}
</script>"
`;

exports[`Vue > jsx > Javascript Test > Form 1`] = `
"<template>
  <form :name=\\"name\\" @submit=\\"onSubmit($event)\\">
    <div></div>
    <template v-if=\\"builderBlock && builderBlock.children\\">
      <div></div>
      <template
        :key=\\"block.id\\"
        v-for=\\"(block, index) in builderBlock?.children\\"
      >
        <builder-block-component
          :block=\\"block\\"
          :index=\\"index\\"
        ></builder-block-component>
      </template>
      <div></div>
    </template>

    <div></div>
    <template v-if=\\"submissionState === 'error'\\">
      <div></div>
      <builder-blocks
        dataPath=\\"errorMessage\\"
        :blocks=\\"errorMessage\\"
      ></builder-blocks>
      <div></div>
    </template>

    <div></div>
    <template v-if=\\"submissionState === 'sending'\\">
      <div></div>
      <builder-blocks
        dataPath=\\"sendingMessage\\"
        :blocks=\\"sendingMessage\\"
      ></builder-blocks>
      <div></div>
    </template>

    <div></div>
    <template v-if=\\"submissionState === 'error' && responseData\\">
      <div></div>
      <pre><div    ></div><div    ></div><div    ></div></pre>
      <div></div>
    </template>

    <div></div>
    <template v-if=\\"submissionState === 'success'\\">
      <div></div>
      <builder-blocks
        dataPath=\\"successMessage\\"
        :blocks=\\"successMessage\\"
      ></builder-blocks>
      <div></div>
    </template>

    <div></div>
  </form>
</template>

<script setup>
import { computed, ref } from \\"vue\\";

import { BuilderBlock as BuilderBlockComponent } from \\"@fake\\";
import { Builder, builder } from \\"@builder.io/sdk\\";
import { BuilderBlocks } from \\"@fake\\";
import { set } from \\"@fake\\";
import { get } from \\"@fake\\";

const props = defineProps([
  \\"previewState\\",
  \\"sendWithJs\\",
  \\"sendSubmissionsTo\\",
  \\"action\\",
  \\"customHeaders\\",
  \\"contentType\\",
  \\"sendSubmissionsToEmail\\",
  \\"name\\",
  \\"method\\",
  \\"errorMessagePath\\",
  \\"resetFormOnSubmit\\",
  \\"successUrl\\",
  \\"validate\\",
  \\"attributes\\",
  \\"builderBlock\\",
  \\"errorMessage\\",
  \\"sendingMessage\\",
  \\"successMessage\\",
]);
const formState = ref(\\"unsubmitted\\");
const responseData = ref(null);
const formErrorMessage = ref(\\"\\");

const formRef = ref(null);

const submissionState = computed(() => {
  return (Builder.isEditing && props.previewState) || formState.value;
});

function onSubmit(event) {
  const sendWithJs = props.sendWithJs || props.sendSubmissionsTo === \\"email\\";

  if (props.sendSubmissionsTo === \\"zapier\\") {
    event.preventDefault();
  } else if (sendWithJs) {
    if (!(props.action || props.sendSubmissionsTo === \\"email\\")) {
      event.preventDefault();
      return;
    }

    event.preventDefault();
    const el = event.currentTarget;
    const headers = props.customHeaders || {};
    let body;
    const formData = new FormData(el); // TODO: maybe support null

    const formPairs = Array.from(
      event.currentTarget.querySelectorAll(\\"input,select,textarea\\")
    )
      .filter((el) => !!el.name)
      .map((el) => {
        let value;
        const key = el.name;

        if (el instanceof HTMLInputElement) {
          if (el.type === \\"radio\\") {
            if (el.checked) {
              value = el.name;
              return {
                key,
                value,
              };
            }
          } else if (el.type === \\"checkbox\\") {
            value = el.checked;
          } else if (el.type === \\"number\\" || el.type === \\"range\\") {
            const num = el.valueAsNumber;

            if (!isNaN(num)) {
              value = num;
            }
          } else if (el.type === \\"file\\") {
            // TODO: one vs multiple files
            value = el.files;
          } else {
            value = el.value;
          }
        } else {
          value = el.value;
        }

        return {
          key,
          value,
        };
      });
    let contentType = props.contentType;

    if (props.sendSubmissionsTo === \\"email\\") {
      contentType = \\"multipart/form-data\\";
    }

    Array.from(formPairs).forEach(({ value }) => {
      if (
        value instanceof File ||
        (Array.isArray(value) && value[0] instanceof File) ||
        value instanceof FileList
      ) {
        contentType = \\"multipart/form-data\\";
      }
    }); // TODO: send as urlEncoded or multipart by default
    // because of ease of use and reliability in browser API
    // for encoding the form?

    if (contentType !== \\"application/json\\") {
      body = formData;
    } else {
      // Json
      const json = {};
      Array.from(formPairs).forEach(({ value, key }) => {
        set(json, key, value);
      });
      body = JSON.stringify(json);
    }

    if (contentType && contentType !== \\"multipart/form-data\\") {
      if (
        /* Zapier doesn't allow content-type header to be sent from browsers */
        !(sendWithJs && props.action?.includes(\\"zapier.com\\"))
      ) {
        headers[\\"content-type\\"] = contentType;
      }
    }

    const presubmitEvent = new CustomEvent(\\"presubmit\\", {
      detail: {
        body,
      },
    });

    if (formRef.value) {
      formRef.value.dispatchEvent(presubmitEvent);

      if (presubmitEvent.defaultPrevented) {
        return;
      }
    }

    formState.value = \\"sending\\";
    const formUrl = \`\${
      builder.env === \\"dev\\" ? \\"http://localhost:5000\\" : \\"https://builder.io\\"
    }/api/v1/form-submit?apiKey=\${builder.apiKey}&to=\${btoa(
      props.sendSubmissionsToEmail || \\"\\"
    )}&name=\${encodeURIComponent(props.name || \\"\\")}\`;
    fetch(
      props.sendSubmissionsTo === \\"email\\" ? formUrl : props.action,
      /* TODO: throw error if no action URL */
      {
        body,
        headers,
        method: props.method || \\"post\\",
      }
    ).then(
      async (res) => {
        let body;
        const contentType = res.headers.get(\\"content-type\\");

        if (contentType && contentType.indexOf(\\"application/json\\") !== -1) {
          body = await res.json();
        } else {
          body = await res.text();
        }

        if (!res.ok && props.errorMessagePath) {
          /* TODO: allow supplying an error formatter function */
          let message = get(body, props.errorMessagePath);

          if (message) {
            if (typeof message !== \\"string\\") {
              /* TODO: ideally convert json to yaml so it woul dbe like
         error: - email has been taken */
              message = JSON.stringify(message);
            }

            formErrorMessage.value = message;
          }
        }

        responseData.value = body;
        formState.value = res.ok ? \\"success\\" : \\"error\\";

        if (res.ok) {
          const submitSuccessEvent = new CustomEvent(\\"submit:success\\", {
            detail: {
              res,
              body,
            },
          });

          if (formRef.value) {
            formRef.value.dispatchEvent(submitSuccessEvent);

            if (submitSuccessEvent.defaultPrevented) {
              return;
            }
            /* TODO: option to turn this on/off? */

            if (props.resetFormOnSubmit !== false) {
              formRef.value.reset();
            }
          }
          /* TODO: client side route event first that can be preventDefaulted */

          if (props.successUrl) {
            if (formRef.value) {
              const event = new CustomEvent(\\"route\\", {
                detail: {
                  url: props.successUrl,
                },
              });
              formRef.value.dispatchEvent(event);

              if (!event.defaultPrevented) {
                location.href = props.successUrl;
              }
            } else {
              location.href = props.successUrl;
            }
          }
        }
      },
      (err) => {
        const submitErrorEvent = new CustomEvent(\\"submit:error\\", {
          detail: {
            error: err,
          },
        });

        if (formRef.value) {
          formRef.value.dispatchEvent(submitErrorEvent);

          if (submitErrorEvent.defaultPrevented) {
            return;
          }
        }

        responseData.value = err;
        formState.value = \\"error\\";
      }
    );
  }
}
</script>"
`;

exports[`Vue > jsx > Javascript Test > Image 1`] = `
"<template>
  <div>
    <div></div>
    <picture
      ><div></div>
      <template v-if=\\"!useLazyLoading() || load\\">
        <div></div>
        <img
          :aria-role=\\"altText ? 'presentation' : undefined\\"
          @load=\\"setLoaded()\\"
        />
        <div></div>
      </template>

      <div></div>
      <source />
      <div></div
    ></picture>
    <div></div>
    <div></div>
    <div></div>
  </div>
</template>

<script setup>
import { onMounted, onUnmounted, ref } from \\"vue\\";

const props = defineProps([
  \\"lazy\\",
  \\"altText\\",
  \\"_class\\",
  \\"image\\",
  \\"srcset\\",
  \\"sizes\\",
  \\"children\\",
]);
const scrollListener = ref(null);
const imageLoaded = ref(false);
const load = ref(false);

const pictureRef = ref(null);

onMounted(() => {
  if (useLazyLoading()) {
    // throttled scroll capture listener
    const listener = () => {
      if (pictureRef.value) {
        const rect = pictureRef.value.getBoundingClientRect();
        const buffer = window.innerHeight / 2;

        if (rect.top < window.innerHeight + buffer) {
          setLoad(true);
          scrollListener.value = null;
          window.removeEventListener(\\"scroll\\", listener);
        }
      }
    };

    scrollListener.value = listener;
    window.addEventListener(\\"scroll\\", listener, {
      capture: true,
      passive: true,
    });
    listener();
  }
});
onUnmounted(() => {
  if (scrollListener.value) {
    window.removeEventListener(\\"scroll\\", scrollListener);
  }
});

function setLoaded() {
  imageLoaded.value = true;
}
function useLazyLoading() {
  // TODO: Add more checks here, like testing for real web browsers
  return !!props.lazy && isBrowser();
}
function isBrowser() {
  return (
    typeof window !== \\"undefined\\" && window.navigator.product != \\"ReactNative\\"
  );
}
</script>"
`;

exports[`Vue > jsx > Javascript Test > Image State 1`] = `
"<template>
  <div>
    <div></div>
    <template :key=\\"index\\" v-for=\\"(item, index) in images\\">
      <div></div>
      <img />
      <div></div>
    </template>
    <div></div>
  </div>
</template>

<script setup>
import { ref } from \\"vue\\";

const canShow = ref(true);
const images = ref([\\"http://example.com/qwik.png\\"]);
</script>"
`;

exports[`Vue > jsx > Javascript Test > Img 1`] = `
"<template>
  <img />
</template>

<script setup>
import { Builder } from \\"@builder.io/sdk\\";

const props = defineProps([
  \\"backgroundSize\\",
  \\"backgroundPosition\\",
  \\"attributes\\",
  \\"imgSrc\\",
  \\"altText\\",
]);
</script>"
`;

exports[`Vue > jsx > Javascript Test > Input 1`] = `
"<template>
  <input :name=\\"name\\" :defaultvalue=\\"defaultValue\\" />
</template>

<script setup>
import { Builder } from \\"@builder.io/sdk\\";

const props = defineProps([
  \\"attributes\\",
  \\"defaultValue\\",
  \\"placeholder\\",
  \\"type\\",
  \\"name\\",
  \\"value\\",
  \\"required\\",
]);
</script>"
`;

exports[`Vue > jsx > Javascript Test > RawText 1`] = `
"<template>
  <span :innerhtml=\\"text || ''\\"></span>
</template>

<script setup>
const props = defineProps([\\"attributes\\", \\"text\\"]);
</script>"
`;

exports[`Vue > jsx > Javascript Test > Section 1`] = `
"<template>
  <section>
    <div></div>
    <div></div>
    <div></div>
  </section>
</template>

<script setup>
const props = defineProps([\\"attributes\\", \\"maxWidth\\", \\"children\\"]);
</script>"
`;

exports[`Vue > jsx > Javascript Test > Section 2`] = `
"<template>
  <template v-if=\\"max\\">
    <div></div>
    <template :key=\\"index\\" v-for=\\"(item, index) in items\\">
      <section>
        <div></div>
        <div></div>
        <div></div>
      </section>
    </template>
    <div></div>
  </template>
</template>

<script setup>
import { ref } from \\"vue\\";

const props = defineProps([\\"attributes\\", \\"children\\"]);
const max = ref(42);
const items = ref([42]);
</script>"
`;

exports[`Vue > jsx > Javascript Test > Select 1`] = `
"<template>
  <select :name=\\"name\\" :defaultvalue=\\"defaultValue\\">
    <div></div>
    <template :key=\\"index\\" v-for=\\"(option, index) in options\\">
      <option :data-index=\\"index\\">
        <div></div>
        <div></div>
        <div></div>
      </option>
    </template>
    <div></div>
  </select>
</template>

<script setup>
import { Builder } from \\"@builder.io/sdk\\";

const props = defineProps([
  \\"attributes\\",
  \\"value\\",
  \\"defaultValue\\",
  \\"name\\",
  \\"options\\",
]);
</script>"
`;

exports[`Vue > jsx > Javascript Test > SlotDefault 1`] = `
"<template>
  <div>
    <div></div>
    <slot
      ><div></div>
      <div><div></div></div>
      <div></div
    ></slot>
    <div></div>
  </div>
</template>"
`;

exports[`Vue > jsx > Javascript Test > SlotHtml 1`] = `
"<template>
  <div>
    <div></div>
    <content-slot-code
      ><div></div>
      <template #testing>
        <div>Hello</div>
      </template>
      <div></div
    ></content-slot-code>
    <div></div>
  </div>
</template>

<script setup>
import ContentSlotCode from \\"./content-slot-jsx.raw\\";
</script>"
`;

exports[`Vue > jsx > Javascript Test > SlotJsx 1`] = `
"<template>
  <div>
    <div></div>
    <content-slot-code :slotTesting=\\"<div>Hello</div>\\"></content-slot-code>
    <div></div>
  </div>
</template>

<script setup>
import ContentSlotCode from \\"./content-slot-jsx.raw\\";
</script>"
`;

exports[`Vue > jsx > Javascript Test > SlotNamed 1`] = `
"<template>
  <div>
    <div></div>
    <slot name=\\"top\\"></slot>
    <div></div>
    <slot name=\\"left\\"><div></div></slot>
    <div></div>
    <slot><div></div></slot>
    <div></div>
  </div>
</template>"
`;

exports[`Vue > jsx > Javascript Test > Stamped.io 1`] = `
"<template>
  <div :data-user=\\"name\\">
    <div></div>
    <button @click=\\"showReviewPrompt = true\\"><div></div></button>
    <div></div>
    <template v-if=\\"showReviewPrompt || 'asdf'\\">
      <div></div>
      <input />
      <div></div>
      <input />
      <div></div>
      <textarea></textarea>
      <div></div>
      <button
        @click=\\"
          $event.preventDefault();
          showReviewPrompt = false;
        \\"
      >
        <div></div>
      </button>
      <div></div>
    </template>

    <div></div>
    <template :key=\\"review.id\\" v-for=\\"(review, index) in reviews\\">
      <div>
        <div></div>
        <img />
        <div></div>
        <div>
          <div></div>
          <div>
            <div></div>
            <div></div>
          </div>
          <div></div>
          <div><div></div></div>
          <div></div>
          <div><div></div></div>
          <div></div>
        </div>
        <div></div>
      </div>
    </template>
    <div></div>
  </div>
</template>

<script setup>
import { onMounted, ref } from \\"vue\\";

import { kebabCase } from \\"lodash\\";
import { snakeCase } from \\"lodash\\";

const props = defineProps([\\"apiKey\\", \\"productId\\"]);
const reviews = ref([]);
const name = ref(\\"test\\");
const showReviewPrompt = ref(false);

onMounted(() => {
  fetch(
    \`https://stamped.io/api/widget/reviews?storeUrl=builder-io.myshopify.com&apiKey=\${
      props.apiKey || \\"pubkey-8bbDq7W6w4sB3OWeM1HUy2s47702hM\\"
    }&productId=\${props.productId || \\"2410511106127\\"}\`
  )
    .then((res) => res.json())
    .then((data) => {
      reviews.value = data.data;
    });
});

function kebabCaseValue() {
  return kebabCase(\\"testThat\\");
}
function snakeCaseValue() {
  return snakeCase(\\"testThis\\");
}
</script>"
`;

exports[`Vue > jsx > Javascript Test > Submit 1`] = `
"<template>
  <button>
    <div></div>
    <div></div>
    <div></div>
  </button>
</template>

<script setup>
const props = defineProps([\\"attributes\\", \\"text\\"]);
</script>"
`;

exports[`Vue > jsx > Javascript Test > Text 1`] = `
"<template>
  <div
    :data-name=\\"{
      test: name || 'any name',
    }\\"
    :contenteditable=\\"allowEditingText || undefined\\"
    :innerhtml=\\"
      text || content || name || '<p class=&quot;text-lg&quot;>my name</p>'
    \\"
  ></div>
</template>

<script setup>
import { ref } from \\"vue\\";

import { Builder } from \\"@builder.io/sdk\\";

const props = defineProps([\\"text\\", \\"content\\"]);
const name = ref(\\"Decadef20\\");
</script>"
`;

exports[`Vue > jsx > Javascript Test > Textarea 1`] = `
"<template>
  <textarea :name=\\"name\\" :defaultvalue=\\"defaultValue\\"></textarea>
</template>

<script setup>
const props = defineProps([
  \\"attributes\\",
  \\"placeholder\\",
  \\"name\\",
  \\"value\\",
  \\"defaultValue\\",
]);
</script>"
`;

exports[`Vue > jsx > Javascript Test > Video 1`] = `
"<template>
  <video></video>
</template>

<script setup>
const props = defineProps([
  \\"attributes\\",
  \\"fit\\",
  \\"position\\",
  \\"video\\",
  \\"posterImage\\",
  \\"autoPlay\\",
  \\"muted\\",
  \\"controls\\",
  \\"loop\\",
]);
</script>"
`;

exports[`Vue > jsx > Javascript Test > arrowFunctionInUseStore 1`] = `
"<template>
  <div>
    <div></div>
    <div></div>
  </div>
</template>

<script setup>
import { ref } from \\"vue\\";

const name = ref(\\"steve\\");

function setName(value) {
  name.value = value;
}
function updateNameWithArrowFn(value) {
  name.value = value;
}
</script>"
`;

exports[`Vue > jsx > Javascript Test > basicForwardRef 1`] = `
"<template>
  <div>
    <div></div>
    <input @input=\\"name = $event.target.value\\" />
    <div></div>
  </div>
</template>

<script setup>
import { ref } from \\"vue\\";

const props = defineProps([\\"inputRef\\"]);
const name = ref(\\"PatrickJS\\");
</script>"
`;

exports[`Vue > jsx > Javascript Test > basicForwardRefMetadata 1`] = `
"<template>
  <div>
    <div></div>
    <input @input=\\"name = $event.target.value\\" />
    <div></div>
  </div>
</template>

<script setup>
import { ref } from \\"vue\\";

const props = defineProps([\\"inputRef\\"]);
const name = ref(\\"PatrickJS\\");
</script>"
`;

exports[`Vue > jsx > Javascript Test > basicOnUpdateReturn 1`] = `
"<template>
  <div>
    <div></div>
    <div></div>
  </div>
</template>

<script setup>
import { ref, watch } from \\"vue\\";

const name = ref(\\"PatrickJS\\");

watch(
  () => [name.value],
  ([name]) => {
    const controller = new AbortController();
    const signal = controller.signal;
    fetch(\\"https://patrickjs.com/api/resource.json\\", {
      signal,
    })
      .then((response) => response.json())
      .then((data) => {
        name.value = data.name;
      });
    return () => {
      if (!signal.aborted) {
        controller.abort();
      }
    };
  },
  { immediate: true }
);
</script>"
`;

exports[`Vue > jsx > Javascript Test > camelCasedAttributes 1`] = `
"<template>
  <div>
    <div></div>
    <img srcset=\\"http://example.com\\" />
    <div></div>
  </div>
</template>

<script setup>
import { ref } from \\"vue\\";

import React from \\"@builder.io/react\\";

const name = ref(\\"Steve\\");
</script>"
`;

exports[`Vue > jsx > Javascript Test > class + ClassName + css 1`] = `
"<template>
  <div><div></div></div>
</template>"
`;

exports[`Vue > jsx > Javascript Test > class + css 1`] = `
"<template>
  <div><div></div></div>
</template>"
`;

exports[`Vue > jsx > Javascript Test > className + css 1`] = `
"<template>
  <div><div></div></div>
</template>"
`;

exports[`Vue > jsx > Javascript Test > className 1`] = `
"<template>
  <div>
    <div></div>
    <div></div>
    <div><div></div></div>
    <div></div>
    <div></div>
    <div><div></div></div>
    <div></div>
  </div>
</template>

<script setup>
import { ref } from \\"vue\\";

const bindings = ref(\\"a binding\\");
</script>"
`;

exports[`Vue > jsx > Javascript Test > classState 1`] = `
"<template>
  <div><div></div></div>
</template>

<script setup>
import { ref } from \\"vue\\";

const classState = ref(\\"testClassName\\");
const styleState = ref({
  color: \\"red\\",
});
</script>"
`;

exports[`Vue > jsx > Javascript Test > componentWithContext 1`] = `
"<template>
  <div></div>
  <div></div>
  <div></div>
</template>

<script setup>
import { inject, provide } from \\"vue\\";

import Context1 from \\"@dummy/1\\";
import Context2 from \\"@dummy/2\\";

const props = defineProps([\\"content\\"]);

const foo = inject(Context1.key);

provide(Context1.key, {
  foo: \\"bar\\",
  content() {
    return props.content;
  },
});
provide(Context2.key, { bar: \\"baz\\" });
</script>"
`;

exports[`Vue > jsx > Javascript Test > componentWithContextMultiRoot 1`] = `
"<template>
  <div></div>
  <div></div>
  <div></div>
  <div><div></div></div>
  <div></div>
</template>

<script setup>
import { inject, provide } from \\"vue\\";

import Context1 from \\"@dummy/1\\";
import Context2 from \\"@dummy/2\\";

const props = defineProps([\\"content\\"]);

const foo = inject(Context1.key);

provide(Context1.key, {
  foo: \\"bar\\",
  content() {
    return props.content;
  },
});
provide(Context2.key, { bar: \\"baz\\" });
</script>"
`;

exports[`Vue > jsx > Javascript Test > contentState 1`] = `
"<template>
  <div><div></div></div>
</template>

<script setup>
import { provide } from \\"vue\\";

import BuilderContext from \\"@dummy/context.vue\\";

const props = defineProps([\\"content\\", \\"customComponents\\"]);

provide(BuilderContext.key, {
  content: props.content,
  registeredComponents: props.customComponents,
});
</script>"
`;

exports[`Vue > jsx > Javascript Test > defaultProps 1`] = `
"<template>
  <div>
    <div></div>
    <template v-if=\\"link\\">
      <div></div>
      <a
        ><div></div>
        <div></div>
        <div></div
      ></a>
      <div></div>
    </template>

    <div></div>
    <template v-if=\\"!link\\">
      <div></div>
      <button @click=\\"onClick($event)\\">
        <div></div>
        <div></div>
        <div></div>
      </button>
      <div></div>
    </template>

    <div></div>
  </div>
</template>

<script setup>
const props = withDefaults(defineProps(), {
  link: \\"https://builder.io/\\",
  attributes: undefined,
  openLinkInNewTab: false,
  text: \\"default text\\",
  onClick: () => {
    console.log(\\"hi\\");
  },
  buttonText: undefined,
});
</script>"
`;

exports[`Vue > jsx > Javascript Test > defaultPropsOutsideComponent 1`] = `
"<template>
  <div>
    <div></div>
    <template v-if=\\"link\\">
      <div></div>
      <a
        ><div></div>
        <div></div>
        <div></div
      ></a>
      <div></div>
    </template>

    <div></div>
    <template v-if=\\"!link\\">
      <div></div>
      <button @click=\\"onClick($event)\\">
        <div></div>
        <div></div>
        <div></div>
      </button>
      <div></div>
    </template>

    <div></div>
  </div>
</template>

<script setup>
const props = withDefaults(defineProps(), {
  link: \\"https://builder.io/\\",
  attributes: undefined,
  openLinkInNewTab: false,
  text: \\"default text\\",
  onClick: () => {},
});
</script>"
`;

exports[`Vue > jsx > Javascript Test > defaultValsWithTypes 1`] = `
"<template>
  <div>
    <div></div>
    <div></div>
  </div>
</template>

<script setup>
const DEFAULT_VALUES: Props = {
  name: \\"Sami\\",
};

const props = defineProps([\\"name\\"]);
</script>"
`;

exports[`Vue > jsx > Javascript Test > expressionState 1`] = `
"<template>
  <div><div></div></div>
</template>

<script setup>
import { ref } from \\"vue\\";

const props = defineProps([\\"componentRef\\"]);
const refToUse = ref(
  !(props.componentRef instanceof Function) ? props.componentRef : null
);
</script>"
`;

exports[`Vue > jsx > Javascript Test > import types 1`] = `
"<template>
  <render-block
    v-bind=\\"getRenderContentProps(renderContentProps.block, 0)\\"
  ></render-block>
</template>

<script setup>
import RenderBlock from \\"./builder-render-block.raw\\";

const props = defineProps([\\"renderContentProps\\"]);

function getRenderContentProps(block, index) {
  return {
    block: block,
    index: index,
  };
}
</script>"
`;

exports[`Vue > jsx > Javascript Test > multipleOnUpdate 1`] = `
"<template>
  <div></div>
</template>

<script setup>
import { onUpdated } from \\"vue\\";

onUpdated(() => console.log(\\"Runs on every update/rerender\\"));
onUpdated(() => console.log(\\"Runs on every update/rerender as well\\"));
</script>"
`;

exports[`Vue > jsx > Javascript Test > multipleOnUpdateWithDeps 1`] = `
"<template>
  <div></div>
</template>

<script setup>
import { ref, watch } from \\"vue\\";

const a = ref(\\"a\\");
const b = ref(\\"b\\");
const c = ref(\\"c\\");
const d = ref(\\"d\\");

watch(
  () => [a.value, b.value],
  ([a, b]) => {
    console.log(\\"Runs when a or b changes\\", a, b);

    if (a.value === \\"a\\") {
      a.value = \\"b\\";
    }
  },
  { immediate: true }
);
watch(
  () => [c.value, d.value],
  ([c, d]) => {
    console.log(\\"Runs when c or d changes\\", c, d);

    if (a.value === \\"a\\") {
      a.value = \\"b\\";
    }
  },
  { immediate: true }
);
</script>"
`;

exports[`Vue > jsx > Javascript Test > multipleSpreads 1`] = `
"<template>
  <input />
</template>

<script setup>
import { ref } from \\"vue\\";

const attrs = ref({
  hello: \\"world\\",
});
</script>"
`;

exports[`Vue > jsx > Javascript Test > nestedShow 1`] = `
"<template>
  <template v-if=\\"conditionA\\">
    <div></div>

    <template v-if=\\"!conditionB\\">
      <div></div>
      <div><div></div></div>
      <div></div>
    </template>

    <template v-else>
      <div><div></div></div>
    </template>

    <div></div>
  </template>

  <template v-else>
    <div><div></div></div>
  </template>
</template>

<script setup>
const props = defineProps([\\"conditionA\\", \\"conditionB\\"]);
</script>"
`;

exports[`Vue > jsx > Javascript Test > nestedStyles 1`] = `
"<template>
  <div><div></div></div>
</template>"
`;

exports[`Vue > jsx > Javascript Test > onInit & onMount 1`] = `
"<template>
  <div></div>
</template>

<script setup>
import { onMounted } from \\"vue\\";

console.log(\\"onInit\\");
onMounted(() => {
  console.log(\\"onMount\\");
});
</script>"
`;

exports[`Vue > jsx > Javascript Test > onInit 1`] = `
"<template>
  <div>
    <div></div>
    <div></div>
  </div>
</template>

<script setup>
import { ref } from \\"vue\\";

export const defaultValues = {
  name: \\"PatrickJS\\",
};

const props = defineProps([\\"name\\"]);
const name = ref(\\"\\");

name.value = defaultValues.name || props.name;
console.log(\\"set defaults with props\\");
</script>"
`;

exports[`Vue > jsx > Javascript Test > onMount 1`] = `
"<template>
  <div></div>
</template>

<script setup>
import { onMounted, onUnmounted } from \\"vue\\";

onMounted(() => {
  console.log(\\"Runs on mount\\");
});
onUnmounted(() => {
  console.log(\\"Runs on unMount\\");
});
</script>"
`;

exports[`Vue > jsx > Javascript Test > onUpdate 1`] = `
"<template>
  <div></div>
</template>

<script setup>
import { onUpdated } from \\"vue\\";

onUpdated(() => console.log(\\"Runs on every update/rerender\\"));
</script>"
`;

exports[`Vue > jsx > Javascript Test > onUpdateWithDeps 1`] = `
"<template>
  <div></div>
</template>

<script setup>
import { ref, watch } from \\"vue\\";

const props = defineProps([\\"size\\"]);
const a = ref(\\"a\\");
const b = ref(\\"b\\");

watch(
  () => [a.value, b.value, props.size],
  ([a, b, size]) => {
    console.log(\\"Runs when a, b or size changes\\", a, b, props.size);
  },
  { immediate: true }
);
</script>"
`;

exports[`Vue > jsx > Javascript Test > preserveExportOrLocalStatement 1`] = `
"<template>
  <div></div>
</template>

<script setup>
const b = 3;
const foo = () => {};
export const a = 3;
export const bar = () => {};
export function run<T>(value: T) {}
</script>"
`;

exports[`Vue > jsx > Javascript Test > preserveTyping 1`] = `
"<template>
  <div>
    <div></div>
    <div></div>
  </div>
</template>

<script setup>
const props = defineProps([\\"name\\"]);
</script>"
`;

exports[`Vue > jsx > Javascript Test > propsDestructure 1`] = `
"<template>
  <div>
    <div></div>
    <div></div>
    <div></div>
    <div></div>
    <div></div>
  </div>
</template>

<script setup>
import { ref } from \\"vue\\";

const props = defineProps([\\"children\\", \\"type\\"]);
const name = ref(\\"Decadef20\\");
</script>"
`;

exports[`Vue > jsx > Javascript Test > propsInterface 1`] = `
"<template>
  <div>
    <div></div>
    <div></div>
  </div>
</template>

<script setup>
const props = defineProps([\\"name\\"]);
</script>"
`;

exports[`Vue > jsx > Javascript Test > propsType 1`] = `
"<template>
  <div>
    <div></div>
    <div></div>
  </div>
</template>

<script setup>
const props = defineProps([\\"name\\"]);
</script>"
`;

exports[`Vue > jsx > Javascript Test > referencingFunInsideHook 1`] = `
"<template>
  <div></div>
</template>

<script setup>
import { onUpdated } from \\"vue\\";

onUpdated(() =>
  foo({
    someOption: bar,
  })
);

function foo(params) {}
function bar() {}
function zoo() {
  const params = {
    cb: bar,
  };
}
</script>"
`;

exports[`Vue > jsx > Javascript Test > renderBlock 1`] = `
"<template>
  <template v-if=\\"shouldWrap\\">
    <div></div>
    <div></div>

    <template v-if=\\"isEmptyHtmlElement(tag)\\">
      <div></div>
      <component></component>
      <div></div>
    </template>

    <div></div>

    <template v-if=\\"!isEmptyHtmlElement(tag) && repeatItemData\\">
      <div></div>
      <template :key=\\"index\\" v-for=\\"(data, index) in repeatItemData\\">
        <render-repeated-block
          :repeatContext=\\"data.context\\"
          :block=\\"data.block\\"
        ></render-repeated-block>
      </template>
      <div></div>
    </template>

    <div></div>

    <template v-if=\\"!isEmptyHtmlElement(tag) && !repeatItemData\\">
      <div></div>
      <component
        ><div></div>
        <component v-bind=\\"renderComponentProps\\"></component>
        <div></div>
        <div></div>
        <template
          :key=\\"'render-block-' + child.id\\"
          v-for=\\"(child, index) in childrenWithoutParentComponent\\"
        >
          <render-block
            :block=\\"child\\"
            :context=\\"childrenContext\\"
          ></render-block>
        </template>
        <div></div>
        <template
          :key=\\"'block-style-' + child.id\\"
          v-for=\\"(child, index) in childrenWithoutParentComponent\\"
        >
          <block-styles
            :block=\\"child\\"
            :context=\\"childrenContext\\"
          ></block-styles>
        </template>
        <div></div
      ></component>
      <div></div>
    </template>

    <div></div>
  </template>

  <template v-else>
    <component v-bind=\\"renderComponentProps\\"></component>
  </template>
</template>

<script setup>
import { computed } from \\"vue\\";

import { getBlockActions } from \\"../../functions/get-block-actions.js\\";
import { getBlockComponentOptions } from \\"../../functions/get-block-component-options.js\\";
import { getBlockProperties } from \\"../../functions/get-block-properties.js\\";
import { getBlockTag } from \\"../../functions/get-block-tag.js\\";
import { getProcessedBlock } from \\"../../functions/get-processed-block.js\\";
import { evaluate } from \\"../../functions/evaluate.js\\";
import BlockStyles from \\"./block-styles.vue\\";
import { isEmptyHtmlElement } from \\"./render-block.helpers.js\\";
import RenderRepeatedBlock from \\"./render-repeated-block.vue\\";
import { TARGET } from \\"../../constants/target.js\\";
import { extractTextStyles } from \\"../../functions/extract-text-styles.js\\";
import RenderComponentWithContext from \\"./render-component-with-context.vue\\";
import RenderComponent from \\"./render-component.vue\\";
import { getReactNativeBlockStyles } from \\"../../functions/get-react-native-block-styles.js\\";

const props = defineProps([\\"block\\", \\"context\\"]);

const component = computed(() => {
  const componentName = getProcessedBlock({
    block: props.block,
    state: props.context.state,
    context: props.context.context,
    shouldEvaluateBindings: false,
  }).component?.name;

  if (!componentName) {
    return null;
  }

  const ref = props.context.registeredComponents[componentName];

  if (!ref) {
    // TODO: Public doc page with more info about this message
    console.warn(\`
       Could not find a registered component named \\"\${componentName}\\". 
       If you registered it, is the file that registered it imported by the file that needs to render it?\`);
    return undefined;
  } else {
    return ref;
  }
});
const tag = computed(() => {
  return getBlockTag(useBlock);
});
const useBlock = computed(() => {
  return repeatItemData
    ? props.block
    : getProcessedBlock({
        block: props.block,
        state: props.context.state,
        context: props.context.context,
        shouldEvaluateBindings: true,
      });
});
const actions = computed(() => {
  return getBlockActions({
    block: useBlock,
    state: props.context.state,
    context: props.context.context,
  });
});
const attributes = computed(() => {
  const blockProperties = getBlockProperties(useBlock);
  return {
    ...blockProperties,
    ...(TARGET === \\"reactNative\\"
      ? {
          style: getReactNativeBlockStyles({
            block: useBlock,
            context: props.context,
            blockStyles: blockProperties.style,
          }),
        }
      : {}),
  };
});
const shouldWrap = computed(() => {
  return !component?.noWrap;
});
const renderComponentProps = computed(() => {
  return {
    blockChildren: useChildren,
    componentRef: component?.component,
    componentOptions: {
      ...getBlockComponentOptions(useBlock),

      /**
       * These attributes are passed to the wrapper element when there is one. If \`noWrap\` is set to true, then
       * they are provided to the component itself directly.
       */
      ...(shouldWrap
        ? {}
        : {
            attributes: { ...attributes, ...actions },
          }),
      customBreakpoints: childrenContext?.content?.meta?.breakpoints,
    },
    context: childrenContext,
  };
});
const useChildren = computed(() => {
  // TO-DO: When should \`canHaveChildren\` dictate rendering?
  // This is currently commented out because some Builder components (e.g. Box) do not have \`canHaveChildren: true\`,
  // but still receive and need to render children.
  // return state.componentInfo?.canHaveChildren ? state.useBlock.children : [];
  return useBlock.children ?? [];
});
const childrenWithoutParentComponent = computed(() => {
  /**
   * When there is no \`componentRef\`, there might still be children that need to be rendered. In this case,
   * we render them outside of \`componentRef\`.
   * NOTE: We make sure not to render this if \`repeatItemData\` is non-null, because that means we are rendering an array of
   * blocks, and the children will be repeated within those blocks.
   */
  const shouldRenderChildrenOutsideRef =
    !component?.component && !repeatItemData;
  return shouldRenderChildrenOutsideRef ? useChildren : [];
});
const repeatItemData = computed(() => {
  /**
   * we don't use \`state.useBlock\` here because the processing done within its logic includes evaluating the block's bindings,
   * which will not work if there is a repeat.
   */
  const { repeat, ...blockWithoutRepeat } = props.block;

  if (!repeat?.collection) {
    return undefined;
  }

  const itemsArray = evaluate({
    code: repeat.collection,
    state: props.context.state,
    context: props.context.context,
  });

  if (!Array.isArray(itemsArray)) {
    return undefined;
  }

  const collectionName = repeat.collection.split(\\".\\").pop();
  const itemNameToUse =
    repeat.itemName || (collectionName ? collectionName + \\"Item\\" : \\"item\\");
  const repeatArray = itemsArray.map((item, index) => ({
    context: {
      ...props.context,
      state: {
        ...props.context.state,
        $index: index,
        $item: item,
        [itemNameToUse]: item,
        [\`$\${itemNameToUse}Index\`]: index,
      },
    },
    block: blockWithoutRepeat,
  }));
  return repeatArray;
});
const inheritedTextStyles = computed(() => {
  if (TARGET !== \\"reactNative\\") {
    return {};
  }

  const styles = getReactNativeBlockStyles({
    block: useBlock,
    context: props.context,
    blockStyles: attributes.style,
  });
  return extractTextStyles(styles);
});
const childrenContext = computed(() => {
  return {
    apiKey: props.context.apiKey,
    state: props.context.state,
    content: props.context.content,
    context: props.context.context,
    registeredComponents: props.context.registeredComponents,
    inheritedStyles: inheritedTextStyles,
  };
});
const renderComponentTag = computed(() => {
  if (TARGET === \\"reactNative\\") {
    return RenderComponentWithContext;
  } else if (TARGET === \\"vue3\\") {
    // vue3 expects a string for the component tag
    return \\"RenderComponent\\";
  } else {
    return RenderComponent;
  }
});
</script>"
`;

exports[`Vue > jsx > Javascript Test > renderContentExample 1`] = `
"<template>
  <div @click=\\"trackClick(content.id)\\">
    <div></div>
    <render-blocks :blocks=\\"content.blocks\\"></render-blocks>
    <div></div>
  </div>
</template>

<script setup>
import { onMounted, provide, watch } from \\"vue\\";

import {
  sendComponentsToVisualEditor,
  dispatchNewContentToVisualEditor,
  trackClick,
} from \\"@dummy/injection-js\\";
import BuilderContext from \\"@dummy/context.vue\\";
import RenderBlocks from \\"@dummy/RenderBlocks.lite.tsx\\";

const props = defineProps([\\"content\\", \\"customComponents\\"]);

provide(BuilderContext.key, {
  get content() {
    return 3;
  },
  get registeredComponents() {
    return 4;
  },
});

onMounted(() => {
  sendComponentsToVisualEditor(props.customComponents);
});

watch(
  () => [props.content],
  ([content]) => {
    dispatchNewContentToVisualEditor(props.content);
  },
  { immediate: true }
);
</script>"
`;

exports[`Vue > jsx > Javascript Test > rootFragmentMultiNode 1`] = `
"<template>
  <div></div>

  <template v-if=\\"link\\">
    <div></div>
    <a
      ><div></div>
      <div></div>
      <div></div
    ></a>
    <div></div>
  </template>

  <div></div>

  <template v-if=\\"!link\\">
    <div></div>
    <button>
      <div></div>
      <div></div>
      <div></div>
    </button>
    <div></div>
  </template>

  <div></div>
</template>

<script setup>
const props = defineProps([\\"link\\", \\"attributes\\", \\"openLinkInNewTab\\", \\"text\\"]);
</script>"
`;

exports[`Vue > jsx > Javascript Test > rootShow 1`] = `
"<template>
  <template v-if=\\"foo === 'bar'\\">
    <div></div>
    <div><div></div></div>
    <div></div>
  </template>

  <template v-else>
    <div><div></div></div>
  </template>
</template>

<script setup>
const props = defineProps([\\"foo\\"]);
</script>"
`;

exports[`Vue > jsx > Javascript Test > self-referencing component 1`] = `
"<template>
  <div>
    <div></div>
    <div></div>
    <div></div>
    <template v-if=\\"name === 'Batman'\\">
      <div></div>
      <my-component name=\\"Bruce Wayne\\"></my-component>
      <div></div>
    </template>

    <div></div>
  </div>
</template>

<script setup>
const props = defineProps([\\"name\\"]);
</script>"
`;

exports[`Vue > jsx > Javascript Test > self-referencing component with children 1`] = `
"<template>
  <div>
    <div></div>
    <div></div>
    <div></div>
    <div></div>
    <div></div>
    <template v-if=\\"name === 'Batman'\\">
      <div></div>
      <my-component name=\\"Bruce\\"
        ><div></div>
        <div><div></div></div>
        <div></div
      ></my-component>
      <div></div>
    </template>

    <div></div>
  </div>
</template>

<script setup>
const props = defineProps([\\"name\\", \\"children\\"]);
</script>"
`;

exports[`Vue > jsx > Javascript Test > showWithFor 1`] = `
"<template>
  <template v-if=\\"conditionA\\">
    <div></div>
    <template :key=\\"idx\\" v-for=\\"(item, index) in items\\">
      <div><div></div></div>
    </template>
    <div></div>
  </template>

  <template v-else>
    <div><div></div></div>
  </template>
</template>

<script setup>
const props = defineProps([\\"conditionA\\", \\"items\\"]);
</script>"
`;

exports[`Vue > jsx > Javascript Test > spreadAttrs 1`] = `
"<template>
  <input />
</template>"
`;

exports[`Vue > jsx > Javascript Test > spreadNestedProps 1`] = `
"<template>
  <input />
</template>

<script setup>
const props = defineProps([\\"nested\\"]);
</script>"
`;

exports[`Vue > jsx > Javascript Test > spreadProps 1`] = `
"<template>
  <input />
</template>"
`;

exports[`Vue > jsx > Javascript Test > styleClassAndCss 1`] = `
"<template>
  <div></div>
</template>"
`;

exports[`Vue > jsx > Javascript Test > subComponent 1`] = `
"<template>
  <foo></foo>
</template>

<script setup>
import Foo from \\"./foo-sub-component.vue\\";
</script>"
`;

exports[`Vue > jsx > Javascript Test > svgComponent 1`] = `
"<template>
  <svg :viewbox=\\"'0 0 ' + 42 + ' ' + 42\\">
    <div></div>
    <defs>
      <div></div>
      <filter filterunits=\\"userSpaceOnUse\\">
        <div></div>
        <feFlood></feFlood>
        <div></div>
        <feBlend></feBlend>
        <div></div>
        <feGaussianBlur :stddeviation=\\"7\\"></feGaussianBlur>
        <div></div>
      </filter>
      <div></div>
    </defs>
    <div></div>
  </svg>
</template>"
`;

exports[`Vue > jsx > Javascript Test > typeDependency 1`] = `
"<template>
  <div><div></div></div>
</template>

<script setup>
const props = defineProps([\\"foo\\"]);
</script>"
`;

exports[`Vue > jsx > Javascript Test > use-style 1`] = `
"<template>
  <button><div></div></button>
</template>



<style scoped>
button {
  background: blue;
  color: white;
  font-size: 12px;
  outline: 1px solid black;
}
</style>"
`;

exports[`Vue > jsx > Javascript Test > use-style-and-css 1`] = `
"<template>
  <button><div></div></button>
</template>



<style scoped>
button {
  font-size: 12px;
  outline: 1px solid black;
}
</style>"
`;

exports[`Vue > jsx > Javascript Test > use-style-outside-component 1`] = `
"<template>
  <button><div></div></button>
</template>



<style scoped>
button {
  background: blue;
  color: white;
  font-size: 12px;
  outline: 1px solid black;
}
</style>"
`;

exports[`Vue > jsx > Remove Internal mitosis package 1`] = `
"<template>
  <div>
    <div></div>
    <div></div>
    <div></div>
  </div>
</template>

<script setup>
import { ref } from \\"vue\\";

const name = ref(\\"PatrickJS\\");
</script>"
`;

exports[`Vue > jsx > Typescript Test > AdvancedRef 1`] = `
"<template>
  <div>
    <div></div>
    <template v-if=\\"showInput\\">
      <div></div>
      <input @blur=\\"onBlur()\\" @input=\\"name = $event.target.value\\" />
      <div></div>
      <label><div></div></label>
      <div></div>
      <select name=\\"cars\\">
        <div></div>
        <option><div></div></option>
        <div></div>
        <option><div></div></option>
        <div></div>
      </select>
      <div></div>
    </template>

    <div></div>
    <div></div>
    <div></div>
  </div>
</template>

<script setup lang=\\"ts\\">
import { ref, watch } from \\"vue\\";
export interface Props {
  showInput: boolean;
}

const props = defineProps<Props>();
const name = ref(\\"PatrickJS\\");

const inputRef = ref<HTMLInputElement>();
const inputNoArgRef = ref<HTMLLabelElement>();

watch(
  () => [inputRef.value, inputNoArgRef.value],
  ([inputRef, inputNoArgRef]) => {
    console.log(\\"Received an update\\");
  },
  { immediate: true }
);
function onBlur() {
  // Maintain focus
  inputRef.value.focus();
}
function lowerCaseName() {
  return name.value.toLowerCase();
}
</script>"
`;

exports[`Vue > jsx > Typescript Test > Basic 1`] = `
"<template>
  <div>
    <div></div>
    <input @input=\\"name = $event.target.value\\" />
    <div></div>
  </div>
</template>

<script setup lang=\\"ts\\">
import { ref } from \\"vue\\";
export interface MyBasicComponentProps {
  id: string;
}

export const DEFAULT_VALUES = {
  name: \\"Steve\\",
};

const name = ref(\\"Steve\\");
const age = ref<number>(1);
const sports = ref<Array<string>>([\\"\\"]);

function underscore_fn_name() {
  return \\"bar\\";
}
</script>"
`;

exports[`Vue > jsx > Typescript Test > Basic 2`] = `
"<template>
  <div>
    <div></div>
    <template :key=\\"index\\" v-for=\\"(person, index) in names\\">
      <template v-if=\\"person === name\\">
        <div></div>
        <input @input=\\"name = $event.target.value + ' and ' + person\\" />
        <div></div>
        <div></div>
        <div></div>
      </template>
    </template>
    <div></div>
  </div>
</template>

<script setup lang=\\"ts\\">
import { ref } from \\"vue\\";

const name = ref(\\"PatrickJS\\");
const names = ref([\\"Steve\\", \\"PatrickJS\\"]);
</script>"
`;

exports[`Vue > jsx > Typescript Test > Basic Context 1`] = `
"<template>
  <div>
    <div></div>
    <div></div>
    <div></div>
    <input @input=\\"onChange\\" />
    <div></div>
  </div>
</template>

<script setup lang=\\"ts\\">
import { inject, onMounted, provide, ref } from \\"vue\\";

import { Injector, createInjector, MyService } from \\"@dummy/injection-js\\";

const name = ref(\\"PatrickJS\\");

const myService = inject(MyService.key);

provide(Injector.key, createInjector());

const hi = myService.method(\\"hi\\");
console.log(hi);
onMounted(() => {
  const bye = myService.method(\\"hi\\");
  console.log(bye);
});

function onChange() {
  const change = myService.method(\\"change\\");
  console.log(change);
}
</script>"
`;

exports[`Vue > jsx > Typescript Test > Basic OnMount Update 1`] = `
"<template>
  <div>
    <div></div>
    <div></div>
  </div>
</template>

<script setup lang=\\"ts\\">
import { onMounted, ref } from \\"vue\\";
export interface Props {
  hi: string;
  bye: string;
}

const props = defineProps<Props>();
const name = ref(\\"PatrickJS\\");
const names = ref([\\"Steve\\", \\"PatrickJS\\"]);

name.value = \\"PatrickJS onInit\\" + props.hi;
onMounted(() => {
  name.value = \\"PatrickJS onMount\\" + props.bye;
});
</script>"
`;

exports[`Vue > jsx > Typescript Test > Basic Outputs 1`] = `
"<template>
  <div></div>
</template>

<script setup lang=\\"ts\\">
import { onMounted, ref } from \\"vue\\";

const props = defineProps([\\"onMessage\\", \\"onEvent\\", \\"message\\"]);
const name = ref(\\"PatrickJS\\");

onMounted(() => {
  props.onMessage(name);
  props.onEvent(props.message);
});
</script>"
`;

exports[`Vue > jsx > Typescript Test > Basic Outputs Meta 1`] = `
"<template>
  <div></div>
</template>

<script setup lang=\\"ts\\">
import { onMounted, ref } from \\"vue\\";

const props = defineProps([\\"onMessage\\", \\"onEvent\\", \\"message\\"]);
const name = ref(\\"PatrickJS\\");

onMounted(() => {
  props.onMessage(name);
  props.onEvent(props.message);
});
</script>"
`;

exports[`Vue > jsx > Typescript Test > BasicAttribute 1`] = `
"<template>
  <input />
</template>"
`;

exports[`Vue > jsx > Typescript Test > BasicBooleanAttribute 1`] = `
"<template>
  <div>
    <div></div>
    <div></div>
    <div></div>
    <div></div>
    <div></div>
    <my-boolean-attribute-component
      :toggle=\\"true\\"
    ></my-boolean-attribute-component>
    <div></div>
    <my-boolean-attribute-component
      :toggle=\\"true\\"
    ></my-boolean-attribute-component>
    <div></div>
    <my-boolean-attribute-component
      :list=\\"null\\"
    ></my-boolean-attribute-component>
    <div></div>
  </div>
</template>

<script setup lang=\\"ts\\">
type Props = {
  children: any;
  type: string;
};

import MyBooleanAttributeComponent from \\"./basic-boolean-attribute-component.raw\\";

const props = defineProps<Props>();
</script>"
`;

exports[`Vue > jsx > Typescript Test > BasicChildComponent 1`] = `
"<template>
  <div>
    <div></div>
    <my-basic-component :id=\\"dev\\"></my-basic-component>
    <div></div>
    <div>
      <div></div>
      <my-basic-on-mount-update-component
        :hi=\\"name\\"
        :bye=\\"dev\\"
      ></my-basic-on-mount-update-component>
      <div></div>
    </div>
    <div></div>
  </div>
</template>

<script setup lang=\\"ts\\">
import { ref } from \\"vue\\";

import MyBasicComponent from \\"./basic.raw\\";
import MyBasicOnMountUpdateComponent from \\"./basic-onMount-update.raw\\";

const name = ref(\\"Steve\\");
const dev = ref(\\"PatrickJS\\");
</script>"
`;

exports[`Vue > jsx > Typescript Test > BasicFor 1`] = `
"<template>
  <div>
    <div></div>
    <template :key=\\"index\\" v-for=\\"(person, index) in names\\">
      <div></div>
      <input @input=\\"name = $event.target.value + ' and ' + person\\" />
      <div></div>
      <div></div>
      <div></div>
    </template>
    <div></div>
  </div>
</template>

<script setup lang=\\"ts\\">
import { onMounted, ref } from \\"vue\\";

const name = ref(\\"PatrickJS\\");
const names = ref([\\"Steve\\", \\"PatrickJS\\"]);

onMounted(() => {
  console.log(\\"onMount code\\");
});
</script>"
`;

exports[`Vue > jsx > Typescript Test > BasicRef 1`] = `
"<template>
  <div>
    <div></div>
    <template v-if=\\"showInput\\">
      <div></div>
      <input @blur=\\"onBlur()\\" @input=\\"name = $event.target.value\\" />
      <div></div>
      <label><div></div></label>
      <div></div>
      <select name=\\"cars\\">
        <div></div>
        <option><div></div></option>
        <div></div>
        <option><div></div></option>
        <div></div>
      </select>
      <div></div>
    </template>

    <div></div>
    <div></div>
    <div></div>
  </div>
</template>

<script setup lang=\\"ts\\">
import { ref } from \\"vue\\";
export interface Props {
  showInput: boolean;
}

const props = defineProps<Props>();
const name = ref(\\"PatrickJS\\");

const inputRef = ref<HTMLInputElement>();
const inputNoArgRef = ref<HTMLLabelElement>();

function onBlur() {
  // Maintain focus
  inputRef.value.focus();
}
function lowerCaseName() {
  return name.value.toLowerCase();
}
</script>"
`;

exports[`Vue > jsx > Typescript Test > BasicRefAssignment 1`] = `
"<template>
  <div>
    <div></div>
    <button @click=\\"handlerClick($event)\\"><div></div></button>
    <div></div>
  </div>
</template>

<script setup lang=\\"ts\\">
export interface Props {
  showInput: boolean;
}

const holdValueRef = ref<undefined>();

function handlerClick(event) {
  event.preventDefault();
  console.log(\\"current value\\", holdValueRef);
  holdValueRef.value = holdValueRef.value + \\"JS\\";
}
</script>"
`;

exports[`Vue > jsx > Typescript Test > BasicRefPrevious 1`] = `
"<template>
  <div>
    <div></div>
    <h1>
      <div></div>
      <div></div>
      <div></div>
      <div></div>
      <div></div>
    </h1>
    <div></div>
    <button @click=\\"count += 1\\"><div></div></button>
    <div></div>
  </div>
</template>

<script setup lang=\\"ts\\">
import { ref, watch } from \\"vue\\";
export interface Props {
  showInput: boolean;
}

export function usePrevious<T>(value: T) {
  // The ref object is a generic container whose current property is mutable ...
  // ... and can hold any value, similar to an instance property on a class
  let ref = useRef<T>(null); // Store current value in ref

  onUpdate(() => {
    ref = value;
  }, [value]); // Only re-run if value changes
  // Return previous value (happens before update in useEffect above)

  return ref;
}

const count = ref(0);

const prevCount = ref<undefined>();

watch(
  () => [count.value],
  ([count]) => {
    prevCount.value = count.value;
  },
  { immediate: true }
);
</script>"
`;

exports[`Vue > jsx > Typescript Test > Button 1`] = `
"<template>
  <div>
    <div></div>
    <template v-if=\\"link\\">
      <div></div>
      <a
        ><div></div>
        <div></div>
        <div></div
      ></a>
      <div></div>
    </template>

    <div></div>
    <template v-if=\\"!link\\">
      <div></div>
      <button>
        <div></div>
        <div></div>
        <div></div>
      </button>
      <div></div>
    </template>

    <div></div>
  </div>
</template>

<script setup lang=\\"ts\\">
export interface ButtonProps {
  attributes?: any;
  text?: string;
  link?: string;
  openLinkInNewTab?: boolean;
}

const props = defineProps<ButtonProps>();
</script>"
`;

exports[`Vue > jsx > Typescript Test > Columns 1`] = `
"<template>
  <div>
    <div></div>
    <template :key=\\"index\\" v-for=\\"(column, index) in columns\\">
      <div>
        <div></div>
        <div></div>
        <div></div>
        <div></div>
        <div></div>
      </div>
    </template>
    <div></div>
  </div>
</template>

<script setup lang=\\"ts\\">
type Column = {
  content: any; // TODO: Implement this when support for dynamic CSS lands

  width?: number;
};
export interface ColumnProps {
  columns?: Column[]; // TODO: Implement this when support for dynamic CSS lands

  space?: number; // TODO: Implement this when support for dynamic CSS lands

  stackColumnsAt?: \\"tablet\\" | \\"mobile\\" | \\"never\\"; // TODO: Implement this when support for dynamic CSS lands

  reverseColumnsWhenStacked?: boolean;
}

const props = defineProps<ColumnProps>();

function getColumns() {
  return props.columns || [];
}
function getGutterSize() {
  return typeof props.space === \\"number\\" ? props.space || 0 : 20;
}
function getWidth(index) {
  const columns = getColumns();
  return (columns[index] && columns[index].width) || 100 / columns.length;
}
function getColumnCssWidth(index) {
  const columns = getColumns();
  const gutterSize = getGutterSize();
  const subtractWidth = (gutterSize * (columns.length - 1)) / columns.length;
  return \`calc(\${getWidth(index)}% - \${subtractWidth}px)\`;
}
</script>"
`;

exports[`Vue > jsx > Typescript Test > ContentSlotHtml 1`] = `
"<template>
  <div>
    <div></div>
    <slot name=\\"testing\\"></slot>
    <div></div>
    <div>
      <div></div>
      <hr />
      <div></div>
    </div>
    <div></div>
    <div>
      <div></div>
      <slot />
      <div></div>
    </div>
    <div></div>
  </div>
</template>

<script setup lang=\\"ts\\">
import { useSlots } from \\"vue\\";
type Props = {
  [key: string]: string | JSX.Element;
  slotTesting: JSX.Element;
};
</script>"
`;

exports[`Vue > jsx > Typescript Test > ContentSlotJSX 1`] = `
"<template>
  <template v-if=\\"$slots.reference\\">
    <div></div>
    <div :name=\\"$slots.content ? 'name1' : 'name2'\\" @click=\\"show()\\">
      <div></div>
      <template v-if=\\"showContent && $slots.content\\">
        <div></div>
        <slot name=\\"content\\"><div></div></slot>
        <div></div>
      </template>

      <div></div>
      <div>
        <div></div>
        <hr />
        <div></div>
      </div>
      <div></div>
      <div><div></div></div>
      <div></div>
    </div>
    <div></div>
  </template>
</template>

<script setup lang=\\"ts\\">
import { computed, ref, useSlots } from \\"vue\\";
type Props = {
  [key: string]: string | JSX.Element;
};

const props = withDefaults(defineProps<Props>(), {
  children: undefined,
  attributes: undefined,
  content: \\"\\",
});
const name = ref(\\"king\\");
const showContent = ref(false);

const cls = computed(() => {
  return useSlots().content && useSlots().default
    ? \`\${name.value}-content\`
    : \\"\\";
});

function show() {
  useSlots().content ? 1 : \\"\\";
}
</script>"
`;

exports[`Vue > jsx > Typescript Test > CustomCode 1`] = `
"<template>
  <div :innerhtml=\\"code\\"></div>
</template>

<script setup lang=\\"ts\\">
import { onMounted, ref } from \\"vue\\";
export interface CustomCodeProps {
  code: string;
  replaceNodes?: boolean;
}

const props = defineProps<CustomCodeProps>();
const scriptsInserted = ref([]);
const scriptsRun = ref([]);

const elem = ref<HTMLDivElement>();

onMounted(() => {
  findAndRunScripts();
});

function findAndRunScripts() {
  // TODO: Move this function to standalone one in '@builder.io/utils'
  if (elem.value && typeof window !== \\"undefined\\") {
    /** @type {HTMLScriptElement[]} */
    const scripts = elem.value.getElementsByTagName(\\"script\\");

    for (let i = 0; i < scripts.length; i++) {
      const script = scripts[i];

      if (script.src) {
        if (scriptsInserted.value.includes(script.src)) {
          continue;
        }

        scriptsInserted.value.push(script.src);
        const newScript = document.createElement(\\"script\\");
        newScript.async = true;
        newScript.src = script.src;
        document.head.appendChild(newScript);
      } else if (
        !script.type ||
        [
          \\"text/javascript\\",
          \\"application/javascript\\",
          \\"application/ecmascript\\",
        ].includes(script.type)
      ) {
        if (scriptsRun.value.includes(script.innerText)) {
          continue;
        }

        try {
          scriptsRun.value.push(script.innerText);
          new Function(script.innerText)();
        } catch (error) {
          console.warn(\\"\`CustomCode\`: Error running script:\\", error);
        }
      }
    }
  }
}
</script>"
`;

exports[`Vue > jsx > Typescript Test > Embed 1`] = `
"<template>
  <div :innerhtml=\\"code\\"></div>
</template>

<script setup lang=\\"ts\\">
import { onMounted, ref } from \\"vue\\";
export interface CustomCodeProps {
  code: string;
  replaceNodes?: boolean;
}

const props = defineProps<CustomCodeProps>();
const scriptsInserted = ref([]);
const scriptsRun = ref([]);

const elem = ref<HTMLDivElement>();

onMounted(() => {
  findAndRunScripts();
});

function findAndRunScripts() {
  // TODO: Move this function to standalone one in '@builder.io/utils'
  if (elem.value && typeof window !== \\"undefined\\") {
    /** @type {HTMLScriptElement[]} */
    const scripts = elem.value.getElementsByTagName(\\"script\\");

    for (let i = 0; i < scripts.length; i++) {
      const script = scripts[i];

      if (script.src) {
        if (scriptsInserted.value.includes(script.src)) {
          continue;
        }

        scriptsInserted.value.push(script.src);
        const newScript = document.createElement(\\"script\\");
        newScript.async = true;
        newScript.src = script.src;
        document.head.appendChild(newScript);
      } else if (
        !script.type ||
        [
          \\"text/javascript\\",
          \\"application/javascript\\",
          \\"application/ecmascript\\",
        ].includes(script.type)
      ) {
        if (scriptsRun.value.includes(script.innerText)) {
          continue;
        }

        try {
          scriptsRun.value.push(script.innerText);
          new Function(script.innerText)();
        } catch (error) {
          console.warn(\\"\`CustomCode\`: Error running script:\\", error);
        }
      }
    }
  }
}
</script>"
`;

exports[`Vue > jsx > Typescript Test > Form 1`] = `
"<template>
  <form :name=\\"name\\" @submit=\\"onSubmit($event)\\">
    <div></div>
    <template v-if=\\"builderBlock && builderBlock.children\\">
      <div></div>
      <template
        :key=\\"block.id\\"
        v-for=\\"(block, index) in builderBlock?.children\\"
      >
        <builder-block-component
          :block=\\"block\\"
          :index=\\"index\\"
        ></builder-block-component>
      </template>
      <div></div>
    </template>

    <div></div>
    <template v-if=\\"submissionState === 'error'\\">
      <div></div>
      <builder-blocks
        dataPath=\\"errorMessage\\"
        :blocks=\\"errorMessage\\"
      ></builder-blocks>
      <div></div>
    </template>

    <div></div>
    <template v-if=\\"submissionState === 'sending'\\">
      <div></div>
      <builder-blocks
        dataPath=\\"sendingMessage\\"
        :blocks=\\"sendingMessage\\"
      ></builder-blocks>
      <div></div>
    </template>

    <div></div>
    <template v-if=\\"submissionState === 'error' && responseData\\">
      <div></div>
      <pre><div    ></div><div    ></div><div    ></div></pre>
      <div></div>
    </template>

    <div></div>
    <template v-if=\\"submissionState === 'success'\\">
      <div></div>
      <builder-blocks
        dataPath=\\"successMessage\\"
        :blocks=\\"successMessage\\"
      ></builder-blocks>
      <div></div>
    </template>

    <div></div>
  </form>
</template>

<script setup lang=\\"ts\\">
import { computed, ref } from \\"vue\\";
export interface FormProps {
  attributes?: any;
  name?: string;
  action?: string;
  validate?: boolean;
  method?: string;
  builderBlock?: BuilderElement;
  sendSubmissionsTo?: string;
  sendSubmissionsToEmail?: string;
  sendWithJs?: boolean;
  contentType?: string;
  customHeaders?: {
    [key: string]: string;
  };
  successUrl?: string;
  previewState?: FormState;
  successMessage?: BuilderElement[];
  errorMessage?: BuilderElement[];
  sendingMessage?: BuilderElement[];
  resetFormOnSubmit?: boolean;
  errorMessagePath?: string;
}
export type FormState = \\"unsubmitted\\" | \\"sending\\" | \\"success\\" | \\"error\\";

import { BuilderBlock as BuilderBlockComponent } from \\"@fake\\";
import { Builder, builder } from \\"@builder.io/sdk\\";
import { BuilderBlocks } from \\"@fake\\";
import { set } from \\"@fake\\";
import { get } from \\"@fake\\";

const props = defineProps<FormProps>();
const formState = ref(\\"unsubmitted\\");
const responseData = ref(null);
const formErrorMessage = ref(\\"\\");

const formRef = ref<HTMLFormElement>();

const submissionState = computed(() => {
  return (Builder.isEditing && props.previewState) || formState.value;
});

function onSubmit(event) {
  const sendWithJs = props.sendWithJs || props.sendSubmissionsTo === \\"email\\";

  if (props.sendSubmissionsTo === \\"zapier\\") {
    event.preventDefault();
  } else if (sendWithJs) {
    if (!(props.action || props.sendSubmissionsTo === \\"email\\")) {
      event.preventDefault();
      return;
    }

    event.preventDefault();
    const el = event.currentTarget;
    const headers = props.customHeaders || {};
    let body;
    const formData = new FormData(el); // TODO: maybe support null

    const formPairs = Array.from(
      event.currentTarget.querySelectorAll(\\"input,select,textarea\\")
    )
      .filter((el) => !!el.name)
      .map((el) => {
        let value;
        const key = el.name;

        if (el instanceof HTMLInputElement) {
          if (el.type === \\"radio\\") {
            if (el.checked) {
              value = el.name;
              return {
                key,
                value,
              };
            }
          } else if (el.type === \\"checkbox\\") {
            value = el.checked;
          } else if (el.type === \\"number\\" || el.type === \\"range\\") {
            const num = el.valueAsNumber;

            if (!isNaN(num)) {
              value = num;
            }
          } else if (el.type === \\"file\\") {
            // TODO: one vs multiple files
            value = el.files;
          } else {
            value = el.value;
          }
        } else {
          value = el.value;
        }

        return {
          key,
          value,
        };
      });
    let contentType = props.contentType;

    if (props.sendSubmissionsTo === \\"email\\") {
      contentType = \\"multipart/form-data\\";
    }

    Array.from(formPairs).forEach(({ value }) => {
      if (
        value instanceof File ||
        (Array.isArray(value) && value[0] instanceof File) ||
        value instanceof FileList
      ) {
        contentType = \\"multipart/form-data\\";
      }
    }); // TODO: send as urlEncoded or multipart by default
    // because of ease of use and reliability in browser API
    // for encoding the form?

    if (contentType !== \\"application/json\\") {
      body = formData;
    } else {
      // Json
      const json = {};
      Array.from(formPairs).forEach(({ value, key }) => {
        set(json, key, value);
      });
      body = JSON.stringify(json);
    }

    if (contentType && contentType !== \\"multipart/form-data\\") {
      if (
        /* Zapier doesn't allow content-type header to be sent from browsers */
        !(sendWithJs && props.action?.includes(\\"zapier.com\\"))
      ) {
        headers[\\"content-type\\"] = contentType;
      }
    }

    const presubmitEvent = new CustomEvent(\\"presubmit\\", {
      detail: {
        body,
      },
    });

    if (formRef.value) {
      formRef.value.dispatchEvent(presubmitEvent);

      if (presubmitEvent.defaultPrevented) {
        return;
      }
    }

    formState.value = \\"sending\\";
    const formUrl = \`\${
      builder.env === \\"dev\\" ? \\"http://localhost:5000\\" : \\"https://builder.io\\"
    }/api/v1/form-submit?apiKey=\${builder.apiKey}&to=\${btoa(
      props.sendSubmissionsToEmail || \\"\\"
    )}&name=\${encodeURIComponent(props.name || \\"\\")}\`;
    fetch(
      props.sendSubmissionsTo === \\"email\\" ? formUrl : props.action,
      /* TODO: throw error if no action URL */
      {
        body,
        headers,
        method: props.method || \\"post\\",
      }
    ).then(
      async (res) => {
        let body;
        const contentType = res.headers.get(\\"content-type\\");

        if (contentType && contentType.indexOf(\\"application/json\\") !== -1) {
          body = await res.json();
        } else {
          body = await res.text();
        }

        if (!res.ok && props.errorMessagePath) {
          /* TODO: allow supplying an error formatter function */
          let message = get(body, props.errorMessagePath);

          if (message) {
            if (typeof message !== \\"string\\") {
              /* TODO: ideally convert json to yaml so it woul dbe like
         error: - email has been taken */
              message = JSON.stringify(message);
            }

            formErrorMessage.value = message;
          }
        }

        responseData.value = body;
        formState.value = res.ok ? \\"success\\" : \\"error\\";

        if (res.ok) {
          const submitSuccessEvent = new CustomEvent(\\"submit:success\\", {
            detail: {
              res,
              body,
            },
          });

          if (formRef.value) {
            formRef.value.dispatchEvent(submitSuccessEvent);

            if (submitSuccessEvent.defaultPrevented) {
              return;
            }
            /* TODO: option to turn this on/off? */

            if (props.resetFormOnSubmit !== false) {
              formRef.value.reset();
            }
          }
          /* TODO: client side route event first that can be preventDefaulted */

          if (props.successUrl) {
            if (formRef.value) {
              const event = new CustomEvent(\\"route\\", {
                detail: {
                  url: props.successUrl,
                },
              });
              formRef.value.dispatchEvent(event);

              if (!event.defaultPrevented) {
                location.href = props.successUrl;
              }
            } else {
              location.href = props.successUrl;
            }
          }
        }
      },
      (err) => {
        const submitErrorEvent = new CustomEvent(\\"submit:error\\", {
          detail: {
            error: err,
          },
        });

        if (formRef.value) {
          formRef.value.dispatchEvent(submitErrorEvent);

          if (submitErrorEvent.defaultPrevented) {
            return;
          }
        }

        responseData.value = err;
        formState.value = \\"error\\";
      }
    );
  }
}
</script>"
`;

exports[`Vue > jsx > Typescript Test > Image 1`] = `
"<template>
  <div>
    <div></div>
    <picture
      ><div></div>
      <template v-if=\\"!useLazyLoading() || load\\">
        <div></div>
        <img
          :aria-role=\\"altText ? 'presentation' : undefined\\"
          @load=\\"setLoaded()\\"
        />
        <div></div>
      </template>

      <div></div>
      <source />
      <div></div
    ></picture>
    <div></div>
    <div></div>
    <div></div>
  </div>
</template>

<script setup lang=\\"ts\\">
import { onMounted, onUnmounted, ref } from \\"vue\\";
// TODO: AMP Support?
export interface ImageProps {
  _class?: string;
  image: string;
  sizes?: string;
  lazy?: boolean;
  height?: number;
  width?: number;
  altText?: string;
  backgroundSize?: string;
  backgroundPosition?: string; // TODO: Support generating Builder.io and or Shopify \`srcset\`s when needed

  srcset?: string; // TODO: Implement support for custom aspect ratios

  aspectRatio?: number; // TODO: This might not work as expected in terms of positioning

  children?: any;
}

const props = defineProps<ImageProps>();
const scrollListener = ref(null);
const imageLoaded = ref(false);
const load = ref(false);

const pictureRef = ref<HTMLElement>();

onMounted(() => {
  if (useLazyLoading()) {
    // throttled scroll capture listener
    const listener = () => {
      if (pictureRef.value) {
        const rect = pictureRef.value.getBoundingClientRect();
        const buffer = window.innerHeight / 2;

        if (rect.top < window.innerHeight + buffer) {
          setLoad(true);
          scrollListener.value = null;
          window.removeEventListener(\\"scroll\\", listener);
        }
      }
    };

    scrollListener.value = listener;
    window.addEventListener(\\"scroll\\", listener, {
      capture: true,
      passive: true,
    });
    listener();
  }
});
onUnmounted(() => {
  if (scrollListener.value) {
    window.removeEventListener(\\"scroll\\", scrollListener);
  }
});

function setLoaded() {
  imageLoaded.value = true;
}
function useLazyLoading() {
  // TODO: Add more checks here, like testing for real web browsers
  return !!props.lazy && isBrowser();
}
function isBrowser() {
  return (
    typeof window !== \\"undefined\\" && window.navigator.product != \\"ReactNative\\"
  );
}
</script>"
`;

exports[`Vue > jsx > Typescript Test > Image State 1`] = `
"<template>
  <div>
    <div></div>
    <template :key=\\"index\\" v-for=\\"(item, index) in images\\">
      <div></div>
      <img />
      <div></div>
    </template>
    <div></div>
  </div>
</template>

<script setup lang=\\"ts\\">
import { ref } from \\"vue\\";

const canShow = ref(true);
const images = ref([\\"http://example.com/qwik.png\\"]);
</script>"
`;

exports[`Vue > jsx > Typescript Test > Img 1`] = `
"<template>
  <img />
</template>

<script setup lang=\\"ts\\">
export interface ImgProps {
  attributes?: any;
  imgSrc?: string;
  altText?: string;
  backgroundSize?: \\"cover\\" | \\"contain\\";
  backgroundPosition?:
    | \\"center\\"
    | \\"top\\"
    | \\"left\\"
    | \\"right\\"
    | \\"bottom\\"
    | \\"top left\\"
    | \\"top right\\"
    | \\"bottom left\\"
    | \\"bottom right\\";
}

import { Builder } from \\"@builder.io/sdk\\";

const props = defineProps<ImgProps>();
</script>"
`;

exports[`Vue > jsx > Typescript Test > Input 1`] = `
"<template>
  <input :name=\\"name\\" :defaultvalue=\\"defaultValue\\" />
</template>

<script setup lang=\\"ts\\">
export interface FormInputProps {
  type?: string;
  attributes?: any;
  name?: string;
  value?: string;
  placeholder?: string;
  defaultValue?: string;
  required?: boolean;
}

import { Builder } from \\"@builder.io/sdk\\";

const props = defineProps<FormInputProps>();
</script>"
`;

exports[`Vue > jsx > Typescript Test > RawText 1`] = `
"<template>
  <span :innerhtml=\\"text || ''\\"></span>
</template>

<script setup lang=\\"ts\\">
export interface RawTextProps {
  attributes?: any;
  text?: string; // builderBlock?: any;
}

const props = defineProps<RawTextProps>();
</script>"
`;

exports[`Vue > jsx > Typescript Test > Section 1`] = `
"<template>
  <section>
    <div></div>
    <div></div>
    <div></div>
  </section>
</template>

<script setup lang=\\"ts\\">
export interface SectionProps {
  maxWidth?: number;
  attributes?: any;
  children?: any;
}

const props = defineProps<SectionProps>();
</script>"
`;

exports[`Vue > jsx > Typescript Test > Section 2`] = `
"<template>
  <template v-if=\\"max\\">
    <div></div>
    <template :key=\\"index\\" v-for=\\"(item, index) in items\\">
      <section>
        <div></div>
        <div></div>
        <div></div>
      </section>
    </template>
    <div></div>
  </template>
</template>

<script setup lang=\\"ts\\">
import { ref } from \\"vue\\";
export interface SectionProps {
  maxWidth?: number;
  attributes?: any;
  children?: any;
}

const props = defineProps<SectionProps>();
const max = ref(42);
const items = ref([42]);
</script>"
`;

exports[`Vue > jsx > Typescript Test > Select 1`] = `
"<template>
  <select :name=\\"name\\" :defaultvalue=\\"defaultValue\\">
    <div></div>
    <template :key=\\"index\\" v-for=\\"(option, index) in options\\">
      <option :data-index=\\"index\\">
        <div></div>
        <div></div>
        <div></div>
      </option>
    </template>
    <div></div>
  </select>
</template>

<script setup lang=\\"ts\\">
export interface FormSelectProps {
  options?: {
    name?: string;
    value: string;
  }[];
  attributes?: any;
  name?: string;
  value?: string;
  defaultValue?: string;
}

import { Builder } from \\"@builder.io/sdk\\";

const props = defineProps<FormSelectProps>();
</script>"
`;

exports[`Vue > jsx > Typescript Test > SlotDefault 1`] = `
"<template>
  <div>
    <div></div>
    <slot
      ><div></div>
      <div><div></div></div>
      <div></div
    ></slot>
    <div></div>
  </div>
</template>

<script setup lang=\\"ts\\">
type Props = {
  [key: string]: string;
};
</script>"
`;

exports[`Vue > jsx > Typescript Test > SlotHtml 1`] = `
"<template>
  <div>
    <div></div>
    <content-slot-code
      ><div></div>
      <template #testing>
        <div>Hello</div>
      </template>
      <div></div
    ></content-slot-code>
    <div></div>
  </div>
</template>

<script setup lang=\\"ts\\">
type Props = {
  [key: string]: string;
};

import ContentSlotCode from \\"./content-slot-jsx.raw\\";
</script>"
`;

exports[`Vue > jsx > Typescript Test > SlotJsx 1`] = `
"<template>
  <div>
    <div></div>
    <content-slot-code :slotTesting=\\"<div>Hello</div>\\"></content-slot-code>
    <div></div>
  </div>
</template>

<script setup lang=\\"ts\\">
type Props = {
  [key: string]: string;
};

import ContentSlotCode from \\"./content-slot-jsx.raw\\";
</script>"
`;

exports[`Vue > jsx > Typescript Test > SlotNamed 1`] = `
"<template>
  <div>
    <div></div>
    <slot name=\\"top\\"></slot>
    <div></div>
    <slot name=\\"left\\"><div></div></slot>
    <div></div>
    <slot><div></div></slot>
    <div></div>
  </div>
</template>

<script setup lang=\\"ts\\">
type Props = {
  [key: string]: string;
};
</script>"
`;

exports[`Vue > jsx > Typescript Test > Stamped.io 1`] = `
"<template>
  <div :data-user=\\"name\\">
    <div></div>
    <button @click=\\"showReviewPrompt = true\\"><div></div></button>
    <div></div>
    <template v-if=\\"showReviewPrompt || 'asdf'\\">
      <div></div>
      <input />
      <div></div>
      <input />
      <div></div>
      <textarea></textarea>
      <div></div>
      <button
        @click=\\"
          $event.preventDefault();
          showReviewPrompt = false;
        \\"
      >
        <div></div>
      </button>
      <div></div>
    </template>

    <div></div>
    <template :key=\\"review.id\\" v-for=\\"(review, index) in reviews\\">
      <div>
        <div></div>
        <img />
        <div></div>
        <div>
          <div></div>
          <div>
            <div></div>
            <div></div>
          </div>
          <div></div>
          <div><div></div></div>
          <div></div>
          <div><div></div></div>
          <div></div>
        </div>
        <div></div>
      </div>
    </template>
    <div></div>
  </div>
</template>

<script setup lang=\\"ts\\">
import { onMounted, ref } from \\"vue\\";
type SmileReviewsProps = {
  productId: string;
  apiKey: string;
};

import { kebabCase } from \\"lodash\\";
import { snakeCase } from \\"lodash\\";

const props = defineProps<SmileReviewsProps>();
const reviews = ref([]);
const name = ref(\\"test\\");
const showReviewPrompt = ref(false);

onMounted(() => {
  fetch(
    \`https://stamped.io/api/widget/reviews?storeUrl=builder-io.myshopify.com&apiKey=\${
      props.apiKey || \\"pubkey-8bbDq7W6w4sB3OWeM1HUy2s47702hM\\"
    }&productId=\${props.productId || \\"2410511106127\\"}\`
  )
    .then((res) => res.json())
    .then((data) => {
      reviews.value = data.data;
    });
});

function kebabCaseValue() {
  return kebabCase(\\"testThat\\");
}
function snakeCaseValue() {
  return snakeCase(\\"testThis\\");
}
</script>"
`;

exports[`Vue > jsx > Typescript Test > Submit 1`] = `
"<template>
  <button>
    <div></div>
    <div></div>
    <div></div>
  </button>
</template>

<script setup lang=\\"ts\\">
export interface ButtonProps {
  attributes?: any;
  text?: string;
}

const props = defineProps<ButtonProps>();
</script>"
`;

exports[`Vue > jsx > Typescript Test > Text 1`] = `
"<template>
  <div
    :data-name=\\"{
      test: name || 'any name',
    }\\"
    :contenteditable=\\"allowEditingText || undefined\\"
    :innerhtml=\\"
      text || content || name || '<p class=&quot;text-lg&quot;>my name</p>'
    \\"
  ></div>
</template>

<script setup lang=\\"ts\\">
import { ref } from \\"vue\\";
export interface TextProps {
  attributes?: any;
  rtlMode: boolean;
  text?: string;
  content?: string;
  builderBlock?: any;
}

import { Builder } from \\"@builder.io/sdk\\";

const props = defineProps<TextProps>();
const name = ref(\\"Decadef20\\");
</script>"
`;

exports[`Vue > jsx > Typescript Test > Textarea 1`] = `
"<template>
  <textarea :name=\\"name\\" :defaultvalue=\\"defaultValue\\"></textarea>
</template>

<script setup lang=\\"ts\\">
export interface TextareaProps {
  attributes?: any;
  name?: string;
  value?: string;
  defaultValue?: string;
  placeholder?: string;
}

const props = defineProps<TextareaProps>();
</script>"
`;

exports[`Vue > jsx > Typescript Test > Video 1`] = `
"<template>
  <video></video>
</template>

<script setup lang=\\"ts\\">
export interface VideoProps {
  attributes?: any;
  video?: string;
  autoPlay?: boolean;
  controls?: boolean;
  muted?: boolean;
  loop?: boolean;
  playsInline?: boolean;
  aspectRatio?: number;
  width?: number;
  height?: number;
  fit?: \\"contain\\" | \\"cover\\" | \\"fill\\";
  position?:
    | \\"center\\"
    | \\"top\\"
    | \\"left\\"
    | \\"right\\"
    | \\"bottom\\"
    | \\"top left\\"
    | \\"top right\\"
    | \\"bottom left\\"
    | \\"bottom right\\";
  posterImage?: string;
  lazyLoad?: boolean;
}

const props = defineProps<VideoProps>();
</script>"
`;

exports[`Vue > jsx > Typescript Test > arrowFunctionInUseStore 1`] = `
"<template>
  <div>
    <div></div>
    <div></div>
  </div>
</template>

<script setup lang=\\"ts\\">
import { ref } from \\"vue\\";

const name = ref(\\"steve\\");

function setName(value) {
  name.value = value;
}
function updateNameWithArrowFn(value) {
  name.value = value;
}
</script>"
`;

exports[`Vue > jsx > Typescript Test > basicForwardRef 1`] = `
"<template>
  <div>
    <div></div>
    <input @input=\\"name = $event.target.value\\" />
    <div></div>
  </div>
</template>

<script setup lang=\\"ts\\">
import { ref } from \\"vue\\";
export interface Props {
  showInput: boolean;
  inputRef: HTMLInputElement;
}

const props = defineProps<Props>();
const name = ref(\\"PatrickJS\\");
</script>"
`;

exports[`Vue > jsx > Typescript Test > basicForwardRefMetadata 1`] = `
"<template>
  <div>
    <div></div>
    <input @input=\\"name = $event.target.value\\" />
    <div></div>
  </div>
</template>

<script setup lang=\\"ts\\">
import { ref } from \\"vue\\";
export interface Props {
  showInput: boolean;
  inputRef: HTMLInputElement;
}

const props = defineProps<Props>();
const name = ref(\\"PatrickJS\\");
</script>"
`;

exports[`Vue > jsx > Typescript Test > basicOnUpdateReturn 1`] = `
"<template>
  <div>
    <div></div>
    <div></div>
  </div>
</template>

<script setup lang=\\"ts\\">
import { ref, watch } from \\"vue\\";

const name = ref(\\"PatrickJS\\");

watch(
  () => [name.value],
  ([name]) => {
    const controller = new AbortController();
    const signal = controller.signal;
    fetch(\\"https://patrickjs.com/api/resource.json\\", {
      signal,
    })
      .then((response) => response.json())
      .then((data) => {
        name.value = data.name;
      });
    return () => {
      if (!signal.aborted) {
        controller.abort();
      }
    };
  },
  { immediate: true }
);
</script>"
`;

exports[`Vue > jsx > Typescript Test > camelCasedAttributes 1`] = `
"<template>
  <div>
    <div></div>
    <img srcset=\\"http://example.com\\" />
    <div></div>
  </div>
</template>

<script setup lang=\\"ts\\">
import { ref } from \\"vue\\";

import React from \\"@builder.io/react\\";

const name = ref(\\"Steve\\");
</script>"
`;

exports[`Vue > jsx > Typescript Test > class + ClassName + css 1`] = `
"<template>
  <div><div></div></div>
</template>"
`;

exports[`Vue > jsx > Typescript Test > class + css 1`] = `
"<template>
  <div><div></div></div>
</template>"
`;

exports[`Vue > jsx > Typescript Test > className + css 1`] = `
"<template>
  <div><div></div></div>
</template>"
`;

exports[`Vue > jsx > Typescript Test > className 1`] = `
"<template>
  <div>
    <div></div>
    <div></div>
    <div><div></div></div>
    <div></div>
    <div></div>
    <div><div></div></div>
    <div></div>
  </div>
</template>

<script setup lang=\\"ts\\">
import { ref } from \\"vue\\";
type Props = {
  [key: string]: string | JSX.Element;
  slotTesting: JSX.Element;
};

const bindings = ref(\\"a binding\\");
</script>"
`;

exports[`Vue > jsx > Typescript Test > classState 1`] = `
"<template>
  <div><div></div></div>
</template>

<script setup lang=\\"ts\\">
import { ref } from \\"vue\\";

const classState = ref(\\"testClassName\\");
const styleState = ref({
  color: \\"red\\",
});
</script>"
`;

exports[`Vue > jsx > Typescript Test > componentWithContext 1`] = `
"<template>
  <div></div>
  <div></div>
  <div></div>
</template>

<script setup lang=\\"ts\\">
import { inject, provide } from \\"vue\\";
export interface ComponentWithContextProps {
  content: string;
}

import Context1 from \\"@dummy/1\\";
import Context2 from \\"@dummy/2\\";

const props = defineProps<ComponentWithContextProps>();

const foo = inject(Context1.key);

provide(Context1.key, {
  foo: \\"bar\\",
  content() {
    return props.content;
  },
});
provide(Context2.key, { bar: \\"baz\\" });
</script>"
`;

exports[`Vue > jsx > Typescript Test > componentWithContextMultiRoot 1`] = `
"<template>
  <div></div>
  <div></div>
  <div></div>
  <div><div></div></div>
  <div></div>
</template>

<script setup lang=\\"ts\\">
import { inject, provide } from \\"vue\\";
export interface ComponentWithContextProps {
  content: string;
}

import Context1 from \\"@dummy/1\\";
import Context2 from \\"@dummy/2\\";

const props = defineProps<ComponentWithContextProps>();

const foo = inject(Context1.key);

provide(Context1.key, {
  foo: \\"bar\\",
  content() {
    return props.content;
  },
});
provide(Context2.key, { bar: \\"baz\\" });
</script>"
`;

exports[`Vue > jsx > Typescript Test > contentState 1`] = `
"<template>
  <div><div></div></div>
</template>

<script setup lang=\\"ts\\">
import { provide } from \\"vue\\";

import BuilderContext from \\"@dummy/context.vue\\";

const props = defineProps([\\"content\\", \\"customComponents\\"]);

provide(BuilderContext.key, {
  content: props.content,
  registeredComponents: props.customComponents,
});
</script>"
`;

exports[`Vue > jsx > Typescript Test > defaultProps 1`] = `
"<template>
  <div>
    <div></div>
    <template v-if=\\"link\\">
      <div></div>
      <a
        ><div></div>
        <div></div>
        <div></div
      ></a>
      <div></div>
    </template>

    <div></div>
    <template v-if=\\"!link\\">
      <div></div>
      <button @click=\\"onClick($event)\\">
        <div></div>
        <div></div>
        <div></div>
      </button>
      <div></div>
    </template>

    <div></div>
  </div>
</template>

<script setup lang=\\"ts\\">
export interface ButtonProps {
  attributes?: any;
  text?: string;
  buttonText?: string; // no default value

  link?: string;
  openLinkInNewTab?: boolean;
  onClick?: () => void;
}

const props = withDefaults(defineProps<ButtonProps>(), {
  link: \\"https://builder.io/\\",
  attributes: undefined,
  openLinkInNewTab: false,
  text: \\"default text\\",
  onClick: () => {
    console.log(\\"hi\\");
  },
  buttonText: undefined,
});
</script>"
`;

exports[`Vue > jsx > Typescript Test > defaultPropsOutsideComponent 1`] = `
"<template>
  <div>
    <div></div>
    <template v-if=\\"link\\">
      <div></div>
      <a
        ><div></div>
        <div></div>
        <div></div
      ></a>
      <div></div>
    </template>

    <div></div>
    <template v-if=\\"!link\\">
      <div></div>
      <button @click=\\"onClick($event)\\">
        <div></div>
        <div></div>
        <div></div>
      </button>
      <div></div>
    </template>

    <div></div>
  </div>
</template>

<script setup lang=\\"ts\\">
export interface ButtonProps {
  attributes?: any;
  text?: string;
  link?: string;
  openLinkInNewTab?: boolean;
  onClick: () => void;
}

const props = withDefaults(defineProps<ButtonProps>(), {
  link: \\"https://builder.io/\\",
  attributes: undefined,
  openLinkInNewTab: false,
  text: \\"default text\\",
  onClick: () => {},
});
</script>"
`;

exports[`Vue > jsx > Typescript Test > defaultValsWithTypes 1`] = `
"<template>
  <div>
    <div></div>
    <div></div>
  </div>
</template>

<script setup lang=\\"ts\\">
type Props = {
  name: string;
};

const DEFAULT_VALUES: Props = {
  name: \\"Sami\\",
};

const props = defineProps<Props>();
</script>"
`;

exports[`Vue > jsx > Typescript Test > expressionState 1`] = `
"<template>
  <div><div></div></div>
</template>

<script setup lang=\\"ts\\">
import { ref } from \\"vue\\";

const props = defineProps([\\"componentRef\\"]);
const refToUse = ref(
  !(props.componentRef instanceof Function) ? props.componentRef : null
);
</script>"
`;

exports[`Vue > jsx > Typescript Test > import types 1`] = `
"<template>
  <render-block
    v-bind=\\"getRenderContentProps(renderContentProps.block, 0)\\"
  ></render-block>
</template>

<script setup lang=\\"ts\\">
type RenderContentProps = {
  options?: GetContentOptions;
  content: BuilderContent;
  renderContentProps: RenderBlockProps;
};

import RenderBlock from \\"./builder-render-block.raw\\";

const props = defineProps<RenderContentProps>();

function getRenderContentProps(block, index) {
  return {
    block: block,
    index: index,
  };
}
</script>"
`;

exports[`Vue > jsx > Typescript Test > multipleOnUpdate 1`] = `
"<template>
  <div></div>
</template>

<script setup lang=\\"ts\\">
import { onUpdated } from \\"vue\\";

onUpdated(() => console.log(\\"Runs on every update/rerender\\"));
onUpdated(() => console.log(\\"Runs on every update/rerender as well\\"));
</script>"
`;

exports[`Vue > jsx > Typescript Test > multipleOnUpdateWithDeps 1`] = `
"<template>
  <div></div>
</template>

<script setup lang=\\"ts\\">
import { ref, watch } from \\"vue\\";

const a = ref(\\"a\\");
const b = ref(\\"b\\");
const c = ref(\\"c\\");
const d = ref(\\"d\\");

watch(
  () => [a.value, b.value],
  ([a, b]) => {
    console.log(\\"Runs when a or b changes\\", a, b);

    if (a.value === \\"a\\") {
      a.value = \\"b\\";
    }
  },
  { immediate: true }
);
watch(
  () => [c.value, d.value],
  ([c, d]) => {
    console.log(\\"Runs when c or d changes\\", c, d);

    if (a.value === \\"a\\") {
      a.value = \\"b\\";
    }
  },
  { immediate: true }
);
</script>"
`;

exports[`Vue > jsx > Typescript Test > multipleSpreads 1`] = `
"<template>
  <input />
</template>

<script setup lang=\\"ts\\">
import { ref } from \\"vue\\";

const attrs = ref({
  hello: \\"world\\",
});
</script>"
`;

exports[`Vue > jsx > Typescript Test > nestedShow 1`] = `
"<template>
  <template v-if=\\"conditionA\\">
    <div></div>

    <template v-if=\\"!conditionB\\">
      <div></div>
      <div><div></div></div>
      <div></div>
    </template>

    <template v-else>
      <div><div></div></div>
    </template>

    <div></div>
  </template>

  <template v-else>
    <div><div></div></div>
  </template>
</template>

<script setup lang=\\"ts\\">
interface Props {
  conditionA: boolean;
  conditionB: boolean;
}

const props = defineProps<Props>();
</script>"
`;

exports[`Vue > jsx > Typescript Test > nestedStyles 1`] = `
"<template>
  <div><div></div></div>
</template>"
`;

exports[`Vue > jsx > Typescript Test > onInit & onMount 1`] = `
"<template>
  <div></div>
</template>

<script setup lang=\\"ts\\">
import { onMounted } from \\"vue\\";

console.log(\\"onInit\\");
onMounted(() => {
  console.log(\\"onMount\\");
});
</script>"
`;

exports[`Vue > jsx > Typescript Test > onInit 1`] = `
"<template>
  <div>
    <div></div>
    <div></div>
  </div>
</template>

<script setup lang=\\"ts\\">
import { ref } from \\"vue\\";
type Props = {
  name: string;
};

export const defaultValues = {
  name: \\"PatrickJS\\",
};

const props = defineProps<Props>();
const name = ref(\\"\\");

name.value = defaultValues.name || props.name;
console.log(\\"set defaults with props\\");
</script>"
`;

exports[`Vue > jsx > Typescript Test > onMount 1`] = `
"<template>
  <div></div>
</template>

<script setup lang=\\"ts\\">
import { onMounted, onUnmounted } from \\"vue\\";

onMounted(() => {
  console.log(\\"Runs on mount\\");
});
onUnmounted(() => {
  console.log(\\"Runs on unMount\\");
});
</script>"
`;

exports[`Vue > jsx > Typescript Test > onUpdate 1`] = `
"<template>
  <div></div>
</template>

<script setup lang=\\"ts\\">
import { onUpdated } from \\"vue\\";

onUpdated(() => console.log(\\"Runs on every update/rerender\\"));
</script>"
`;

exports[`Vue > jsx > Typescript Test > onUpdateWithDeps 1`] = `
"<template>
  <div></div>
</template>

<script setup lang=\\"ts\\">
import { ref, watch } from \\"vue\\";
type Props = {
  size: string;
};

const props = defineProps<Props>();
const a = ref(\\"a\\");
const b = ref(\\"b\\");

watch(
  () => [a.value, b.value, props.size],
  ([a, b, size]) => {
    console.log(\\"Runs when a, b or size changes\\", a, b, props.size);
  },
  { immediate: true }
);
</script>"
`;

exports[`Vue > jsx > Typescript Test > preserveExportOrLocalStatement 1`] = `
"<template>
  <div></div>
</template>

<script setup lang=\\"ts\\">
type Types = {
  s: any[];
};
interface IPost {
  len: number;
}
export interface MyBasicComponentProps {
  id: string;
}

const b = 3;
const foo = () => {};
export const a = 3;
export const bar = () => {};
export function run<T>(value: T) {}
</script>"
`;

exports[`Vue > jsx > Typescript Test > preserveTyping 1`] = `
"<template>
  <div>
    <div></div>
    <div></div>
  </div>
</template>

<script setup lang=\\"ts\\">
export type A = \\"test\\";
export interface C {
  n: \\"test\\";
}
type B = \\"test2\\";
interface D {
  n: \\"test\\";
}
export interface MyBasicComponentProps {
  name: string;
  age?: number;
}

const props = defineProps<MyBasicComponentProps>();
</script>"
`;

exports[`Vue > jsx > Typescript Test > propsDestructure 1`] = `
"<template>
  <div>
    <div></div>
    <div></div>
    <div></div>
    <div></div>
    <div></div>
  </div>
</template>

<script setup lang=\\"ts\\">
import { ref } from \\"vue\\";
type Props = {
  children: any;
  type: string;
};

const props = defineProps<Props>();
const name = ref(\\"Decadef20\\");
</script>"
`;

exports[`Vue > jsx > Typescript Test > propsInterface 1`] = `
"<template>
  <div>
    <div></div>
    <div></div>
  </div>
</template>

<script setup lang=\\"ts\\">
interface Person {
  name: string;
  age?: number;
}

const props = defineProps<Person | never>();
</script>"
`;

exports[`Vue > jsx > Typescript Test > propsType 1`] = `
"<template>
  <div>
    <div></div>
    <div></div>
  </div>
</template>

<script setup lang=\\"ts\\">
type Person = {
  name: string;
  age?: number;
};

const props = defineProps<Person>();
</script>"
`;

exports[`Vue > jsx > Typescript Test > referencingFunInsideHook 1`] = `
"<template>
  <div></div>
</template>

<script setup lang=\\"ts\\">
import { onUpdated } from \\"vue\\";

onUpdated(() =>
  foo({
    someOption: bar,
  })
);

function foo(params) {}
function bar() {}
function zoo() {
  const params = {
    cb: bar,
  };
}
</script>"
`;

exports[`Vue > jsx > Typescript Test > renderBlock 1`] = `
"<template>
  <template v-if=\\"shouldWrap\\">
    <div></div>
    <div></div>

    <template v-if=\\"isEmptyHtmlElement(tag)\\">
      <div></div>
      <component></component>
      <div></div>
    </template>

    <div></div>

    <template v-if=\\"!isEmptyHtmlElement(tag) && repeatItemData\\">
      <div></div>
      <template :key=\\"index\\" v-for=\\"(data, index) in repeatItemData\\">
        <render-repeated-block
          :repeatContext=\\"data.context\\"
          :block=\\"data.block\\"
        ></render-repeated-block>
      </template>
      <div></div>
    </template>

    <div></div>

    <template v-if=\\"!isEmptyHtmlElement(tag) && !repeatItemData\\">
      <div></div>
      <component
        ><div></div>
        <component v-bind=\\"renderComponentProps\\"></component>
        <div></div>
        <div></div>
        <template
          :key=\\"'render-block-' + child.id\\"
          v-for=\\"(child, index) in childrenWithoutParentComponent\\"
        >
          <render-block
            :block=\\"child\\"
            :context=\\"childrenContext\\"
          ></render-block>
        </template>
        <div></div>
        <template
          :key=\\"'block-style-' + child.id\\"
          v-for=\\"(child, index) in childrenWithoutParentComponent\\"
        >
          <block-styles
            :block=\\"child\\"
            :context=\\"childrenContext\\"
          ></block-styles>
        </template>
        <div></div
      ></component>
      <div></div>
    </template>

    <div></div>
  </template>

  <template v-else>
    <component v-bind=\\"renderComponentProps\\"></component>
  </template>
</template>

<script setup lang=\\"ts\\">
import { computed } from \\"vue\\";
import type {
  BuilderContextInterface,
  RegisteredComponent,
} from \\"../../context/types.js\\";
import type { BuilderBlock } from \\"../../types/builder-block.js\\";
import type { Nullable } from \\"../../types/typescript.js\\";
import type { RenderComponentProps } from \\"./render-component\\";
import type { RepeatData } from \\"./types.js\\";
export type RenderBlockProps = {
  block: BuilderBlock;
  context: BuilderContextInterface;
};

import { getBlockActions } from \\"../../functions/get-block-actions.js\\";
import { getBlockComponentOptions } from \\"../../functions/get-block-component-options.js\\";
import { getBlockProperties } from \\"../../functions/get-block-properties.js\\";
import { getBlockTag } from \\"../../functions/get-block-tag.js\\";
import { getProcessedBlock } from \\"../../functions/get-processed-block.js\\";
import { evaluate } from \\"../../functions/evaluate.js\\";
import BlockStyles from \\"./block-styles.vue\\";
import { isEmptyHtmlElement } from \\"./render-block.helpers.js\\";
import RenderRepeatedBlock from \\"./render-repeated-block.vue\\";
import { TARGET } from \\"../../constants/target.js\\";
import { extractTextStyles } from \\"../../functions/extract-text-styles.js\\";
import RenderComponentWithContext from \\"./render-component-with-context.vue\\";
import RenderComponent from \\"./render-component.vue\\";
import { getReactNativeBlockStyles } from \\"../../functions/get-react-native-block-styles.js\\";

const props = defineProps<RenderBlockProps>();

const component = computed(() => {
  const componentName = getProcessedBlock({
    block: props.block,
    state: props.context.state,
    context: props.context.context,
    shouldEvaluateBindings: false,
  }).component?.name;

  if (!componentName) {
    return null;
  }

  const ref = props.context.registeredComponents[componentName];

  if (!ref) {
    // TODO: Public doc page with more info about this message
    console.warn(\`
       Could not find a registered component named \\"\${componentName}\\". 
       If you registered it, is the file that registered it imported by the file that needs to render it?\`);
    return undefined;
  } else {
    return ref;
  }
});
const tag = computed(() => {
  return getBlockTag(useBlock);
});
const useBlock = computed(() => {
  return repeatItemData
    ? props.block
    : getProcessedBlock({
        block: props.block,
        state: props.context.state,
        context: props.context.context,
        shouldEvaluateBindings: true,
      });
});
const actions = computed(() => {
  return getBlockActions({
    block: useBlock,
    state: props.context.state,
    context: props.context.context,
  });
});
const attributes = computed(() => {
  const blockProperties = getBlockProperties(useBlock);
  return {
    ...blockProperties,
    ...(TARGET === \\"reactNative\\"
      ? {
          style: getReactNativeBlockStyles({
            block: useBlock,
            context: props.context,
            blockStyles: blockProperties.style,
          }),
        }
      : {}),
  };
});
const shouldWrap = computed(() => {
  return !component?.noWrap;
});
const renderComponentProps = computed(() => {
  return {
    blockChildren: useChildren,
    componentRef: component?.component,
    componentOptions: {
      ...getBlockComponentOptions(useBlock),

      /**
       * These attributes are passed to the wrapper element when there is one. If \`noWrap\` is set to true, then
       * they are provided to the component itself directly.
       */
      ...(shouldWrap
        ? {}
        : {
            attributes: { ...attributes, ...actions },
          }),
      customBreakpoints: childrenContext?.content?.meta?.breakpoints,
    },
    context: childrenContext,
  };
});
const useChildren = computed(() => {
  // TO-DO: When should \`canHaveChildren\` dictate rendering?
  // This is currently commented out because some Builder components (e.g. Box) do not have \`canHaveChildren: true\`,
  // but still receive and need to render children.
  // return state.componentInfo?.canHaveChildren ? state.useBlock.children : [];
  return useBlock.children ?? [];
});
const childrenWithoutParentComponent = computed(() => {
  /**
   * When there is no \`componentRef\`, there might still be children that need to be rendered. In this case,
   * we render them outside of \`componentRef\`.
   * NOTE: We make sure not to render this if \`repeatItemData\` is non-null, because that means we are rendering an array of
   * blocks, and the children will be repeated within those blocks.
   */
  const shouldRenderChildrenOutsideRef =
    !component?.component && !repeatItemData;
  return shouldRenderChildrenOutsideRef ? useChildren : [];
});
const repeatItemData = computed(() => {
  /**
   * we don't use \`state.useBlock\` here because the processing done within its logic includes evaluating the block's bindings,
   * which will not work if there is a repeat.
   */
  const { repeat, ...blockWithoutRepeat } = props.block;

  if (!repeat?.collection) {
    return undefined;
  }

  const itemsArray = evaluate({
    code: repeat.collection,
    state: props.context.state,
    context: props.context.context,
  });

  if (!Array.isArray(itemsArray)) {
    return undefined;
  }

  const collectionName = repeat.collection.split(\\".\\").pop();
  const itemNameToUse =
    repeat.itemName || (collectionName ? collectionName + \\"Item\\" : \\"item\\");
  const repeatArray = itemsArray.map((item, index) => ({
    context: {
      ...props.context,
      state: {
        ...props.context.state,
        $index: index,
        $item: item,
        [itemNameToUse]: item,
        [\`$\${itemNameToUse}Index\`]: index,
      },
    },
    block: blockWithoutRepeat,
  }));
  return repeatArray;
});
const inheritedTextStyles = computed(() => {
  if (TARGET !== \\"reactNative\\") {
    return {};
  }

  const styles = getReactNativeBlockStyles({
    block: useBlock,
    context: props.context,
    blockStyles: attributes.style,
  });
  return extractTextStyles(styles);
});
const childrenContext = computed(() => {
  return {
    apiKey: props.context.apiKey,
    state: props.context.state,
    content: props.context.content,
    context: props.context.context,
    registeredComponents: props.context.registeredComponents,
    inheritedStyles: inheritedTextStyles,
  };
});
const renderComponentTag = computed(() => {
  if (TARGET === \\"reactNative\\") {
    return RenderComponentWithContext;
  } else if (TARGET === \\"vue3\\") {
    // vue3 expects a string for the component tag
    return \\"RenderComponent\\";
  } else {
    return RenderComponent;
  }
});
</script>"
`;

exports[`Vue > jsx > Typescript Test > renderContentExample 1`] = `
"<template>
  <div @click=\\"trackClick(content.id)\\">
    <div></div>
    <render-blocks :blocks=\\"content.blocks\\"></render-blocks>
    <div></div>
  </div>
</template>

<script setup lang=\\"ts\\">
import { onMounted, provide, watch } from \\"vue\\";
type Props = {
  customComponents: string[];
  content: {
    blocks: any[];
    id: string;
  };
};

import {
  sendComponentsToVisualEditor,
  dispatchNewContentToVisualEditor,
  trackClick,
} from \\"@dummy/injection-js\\";
import BuilderContext from \\"@dummy/context.vue\\";
import RenderBlocks from \\"@dummy/RenderBlocks.lite.tsx\\";

const props = defineProps<Props>();

provide(BuilderContext.key, {
  get content() {
    return 3;
  },
  get registeredComponents() {
    return 4;
  },
});

onMounted(() => {
  sendComponentsToVisualEditor(props.customComponents);
});

watch(
  () => [props.content],
  ([content]) => {
    dispatchNewContentToVisualEditor(props.content);
  },
  { immediate: true }
);
</script>"
`;

exports[`Vue > jsx > Typescript Test > rootFragmentMultiNode 1`] = `
"<template>
  <div></div>

  <template v-if=\\"link\\">
    <div></div>
    <a
      ><div></div>
      <div></div>
      <div></div
    ></a>
    <div></div>
  </template>

  <div></div>

  <template v-if=\\"!link\\">
    <div></div>
    <button>
      <div></div>
      <div></div>
      <div></div>
    </button>
    <div></div>
  </template>

  <div></div>
</template>

<script setup lang=\\"ts\\">
export interface ButtonProps {
  attributes?: any;
  text?: string;
  link?: string;
  openLinkInNewTab?: boolean;
}

const props = defineProps<ButtonProps>();
</script>"
`;

exports[`Vue > jsx > Typescript Test > rootShow 1`] = `
"<template>
  <template v-if=\\"foo === 'bar'\\">
    <div></div>
    <div><div></div></div>
    <div></div>
  </template>

  <template v-else>
    <div><div></div></div>
  </template>
</template>

<script setup lang=\\"ts\\">
export interface RenderStylesProps {
  foo: string;
}

const props = defineProps<RenderStylesProps>();
</script>"
`;

exports[`Vue > jsx > Typescript Test > self-referencing component 1`] = `
"<template>
  <div>
    <div></div>
    <div></div>
    <div></div>
    <template v-if=\\"name === 'Batman'\\">
      <div></div>
      <my-component name=\\"Bruce Wayne\\"></my-component>
      <div></div>
    </template>

    <div></div>
  </div>
</template>

<script setup lang=\\"ts\\">
const props = defineProps([\\"name\\"]);
</script>"
`;

exports[`Vue > jsx > Typescript Test > self-referencing component with children 1`] = `
"<template>
  <div>
    <div></div>
    <div></div>
    <div></div>
    <div></div>
    <div></div>
    <template v-if=\\"name === 'Batman'\\">
      <div></div>
      <my-component name=\\"Bruce\\"
        ><div></div>
        <div><div></div></div>
        <div></div
      ></my-component>
      <div></div>
    </template>

    <div></div>
  </div>
</template>

<script setup lang=\\"ts\\">
const props = defineProps([\\"name\\", \\"children\\"]);
</script>"
`;

exports[`Vue > jsx > Typescript Test > showWithFor 1`] = `
"<template>
  <template v-if=\\"conditionA\\">
    <div></div>
    <template :key=\\"idx\\" v-for=\\"(item, index) in items\\">
      <div><div></div></div>
    </template>
    <div></div>
  </template>

  <template v-else>
    <div><div></div></div>
  </template>
</template>

<script setup lang=\\"ts\\">
interface Props {
  conditionA: boolean;
  items: string[];
}

const props = defineProps<Props>();
</script>"
`;

exports[`Vue > jsx > Typescript Test > spreadAttrs 1`] = `
"<template>
  <input />
</template>"
`;

exports[`Vue > jsx > Typescript Test > spreadNestedProps 1`] = `
"<template>
  <input />
</template>

<script setup lang=\\"ts\\">
const props = defineProps([\\"nested\\"]);
</script>"
`;

exports[`Vue > jsx > Typescript Test > spreadProps 1`] = `
"<template>
  <input />
</template>"
`;

exports[`Vue > jsx > Typescript Test > styleClassAndCss 1`] = `
"<template>
  <div></div>
</template>"
`;

exports[`Vue > jsx > Typescript Test > subComponent 1`] = `
"<template>
  <foo></foo>
</template>

<script setup lang=\\"ts\\">
import Foo from \\"./foo-sub-component.vue\\";
</script>"
`;

exports[`Vue > jsx > Typescript Test > svgComponent 1`] = `
"<template>
  <svg :viewbox=\\"'0 0 ' + 42 + ' ' + 42\\">
    <div></div>
    <defs>
      <div></div>
      <filter filterunits=\\"userSpaceOnUse\\">
        <div></div>
        <feFlood></feFlood>
        <div></div>
        <feBlend></feBlend>
        <div></div>
        <feGaussianBlur :stddeviation=\\"7\\"></feGaussianBlur>
        <div></div>
      </filter>
      <div></div>
    </defs>
    <div></div>
  </svg>
</template>"
`;

exports[`Vue > jsx > Typescript Test > typeDependency 1`] = `
"<template>
  <div><div></div></div>
</template>

<script setup lang=\\"ts\\">
import type { Foo } from \\"./foo-type\\";
import type { Foo as Foo2 } from \\"./type-export\\";
export type TypeDependencyProps = {
  foo: Foo;
  foo2: Foo2;
};

const props = defineProps<TypeDependencyProps>();
</script>"
`;

exports[`Vue > jsx > Typescript Test > use-style 1`] = `
"<template>
  <button><div></div></button>
</template>



<style scoped>
button {
  background: blue;
  color: white;
  font-size: 12px;
  outline: 1px solid black;
}
</style>"
`;

exports[`Vue > jsx > Typescript Test > use-style-and-css 1`] = `
"<template>
  <button><div></div></button>
</template>



<style scoped>
button {
  font-size: 12px;
  outline: 1px solid black;
}
</style>"
`;

exports[`Vue > jsx > Typescript Test > use-style-outside-component 1`] = `
"<template>
  <button><div></div></button>
</template>



<style scoped>
button {
  background: blue;
  color: white;
  font-size: 12px;
  outline: 1px solid black;
}
</style>"
`;

exports[`Vue > svelte > Javascript Test > basic 1`] = `
"<template>
  <div>
    <input @input=\\"name = $event.target.value\\" />
    <div></div>
  </div>
</template>

<script setup>
import { ref } from \\"vue\\";

const name = ref(\\"Steve\\");
</script>"
`;

exports[`Vue > svelte > Javascript Test > bindGroup 1`] = `
"<template>
  <div    ><input  @input=\\"tortilla = $event.target.value\\"   /><input  @input=\\"tortilla = $event.target.value\\"   /><input  @input=\\"tortilla = $event.target.value\\"   /><br     /><br     /><input  @input=\\"fillings = $event.target.value\\"   /><input  @input=\\"fillings = $event.target.value\\"   /><input  @input=\\"fillings = $event.target.value\\"   /><input  @input=\\"fillings = $event.target.value\\"   /><p    ><div    ></div><div    ></div></p><p    ><div    ></div><div    ></div></p></div>
</template>


<script setup >
  import { ref } from \\"vue\\"








  const tortilla= ref(\\"Plain\\")
const fillings= ref([])
</script>"
`;

exports[`Vue > svelte > Javascript Test > bindProperty 1`] = `
"<template>
  <input />
</template>

<script setup>
import { ref } from \\"vue\\";

const value = ref(\\"hello\\");
</script>"
`;

exports[`Vue > svelte > Javascript Test > classDirective 1`] = `
"<template>
  <input />
</template>

<script setup>
import { ref } from \\"vue\\";

const props = withDefaults(defineProps(), { disabled: undefined });
const focus = ref(true);
</script>"
`;

exports[`Vue > svelte > Javascript Test > context 1`] = `
"<template>
  <div><div></div></div>
</template>

<script setup>
import { inject, provide, ref } from \\"vue\\";

const activeTab = ref(0);

const disabled = inject(\\"disabled\\");

provide(\\"activeTab\\", activeTab.value);
</script>"
`;

exports[`Vue > svelte > Javascript Test > each 1`] = `
"<template>
  <ul>
    <template :key=\\"index\\" v-for=\\"(num, index) in numbers\\">
      <li><div></div></li>
    </template>
  </ul>
</template>

<script setup>
import { ref } from \\"vue\\";

const numbers = ref([\\"one\\", \\"two\\", \\"three\\"]);
</script>"
`;

exports[`Vue > svelte > Javascript Test > eventHandlers 1`] = `
"<template>
  <div>
    <button @click=\\"log('hi')\\"><div></div></button
    ><button @click=\\"log($event)\\"><div></div></button
    ><button @click=\\"log($event)\\"><div></div></button>
  </div>
</template>

<script setup>
function log(msg = \\"hello\\") {
  console.log(msg);
}
</script>"
`;

exports[`Vue > svelte > Javascript Test > html 1`] = `
"<template>
  <div :innerhtml=\\"html\\"></div>
</template>

<script setup>
import { ref } from \\"vue\\";

const html = ref(\\"<b>bold</b>\\");
</script>"
`;

exports[`Vue > svelte > Javascript Test > ifElse 1`] = `
"<template>
  <template v-if=\\"show\\">
    <button @click=\\"toggle($event)\\"><div></div></button>
  </template>

  <template v-else>
    <button @click=\\"toggle($event)\\"><div></div></button>
  </template>
</template>

<script setup>
import { ref } from \\"vue\\";

const show = ref(true);

function toggle() {
  show.value = !show.value;
}
</script>"
`;

exports[`Vue > svelte > Javascript Test > imports 1`] = `
"<template>
  <div>
    <button type=\\"button\\" :disabled=\\"disabled\\"><slot /></button>
  </div>
</template>

<script setup>
import { ref } from \\"vue\\";

import Button from \\"./Button.vue\\";

const disabled = ref(false);
</script>"
`;

exports[`Vue > svelte > Javascript Test > lifecycleHooks 1`] = `
"<template>
  <div></div>
</template>

<script setup>
import { onMounted, onUnmounted, onUpdated } from \\"vue\\";

onMounted(() => {
  console.log(\\"onMount\\");
});
onUnmounted(() => {
  console.log(\\"onDestroy\\");
});

onUpdated(() => console.log(\\"onAfterUpdate\\"));
</script>"
`;

exports[`Vue > svelte > Javascript Test > reactive 1`] = `
"<template>
  <div>
    <input />
    <div></div>
    <div></div>
  </div>
</template>

<script setup>
import { computed, ref } from \\"vue\\";

const name = ref(\\"Steve\\");

const lowercaseName = computed(() => {
  return name.value.toLowerCase();
});
</script>"
`;

exports[`Vue > svelte > Javascript Test > reactiveWithFn 1`] = `
"<template>
  <div>
    <input @input=\\"a = $event.target.value\\" /><input
      @input=\\"b = $event.target.value\\"
    />
    <div></div>
    <div></div>
  </div>
</template>

<script setup>
import { ref, watch } from \\"vue\\";

const a = ref(2);
const b = ref(5);
const result = ref(null);

watch(
  () => [a.value, b.value],
  ([a, b]) => {
    calculateResult(a, b);
  },
  { immediate: true }
);
function calculateResult(a_, b_) {
  result.value = a_ * b_;
}
</script>"
`;

exports[`Vue > svelte > Javascript Test > slots 1`] = `
"<template>
  <div>
    <slot><div></div></slot
    ><slot name=\\"test\\"
      ><div><div></div></div
    ></slot>
  </div>
</template>"
`;

exports[`Vue > svelte > Javascript Test > style 1`] = `
"<template>
  <input />
</template>



<style scoped>
input {
  color: red;
  font-size: 12px;
}

.form-input:focus {
  outline: 1px solid blue;
}
</style>"
`;

exports[`Vue > svelte > Javascript Test > textExpressions 1`] = `
"<template>
  <div>
    <div></div>
    <div></div>
    <br />
    <div></div>
    <div></div>
  </div>
</template>

<script setup>
import { ref } from \\"vue\\";

const a = ref(5);
const b = ref(12);
</script>"
`;

exports[`Vue > svelte > Typescript Test > basic 1`] = `
"<template>
  <div>
    <input @input=\\"name = $event.target.value\\" />
    <div></div>
  </div>
</template>

<script setup lang=\\"ts\\">
import { ref } from \\"vue\\";

const name = ref(\\"Steve\\");
</script>"
`;

exports[`Vue > svelte > Typescript Test > bindGroup 1`] = `
"<template>
  <div    ><input  @input=\\"tortilla = $event.target.value\\"   /><input  @input=\\"tortilla = $event.target.value\\"   /><input  @input=\\"tortilla = $event.target.value\\"   /><br     /><br     /><input  @input=\\"fillings = $event.target.value\\"   /><input  @input=\\"fillings = $event.target.value\\"   /><input  @input=\\"fillings = $event.target.value\\"   /><input  @input=\\"fillings = $event.target.value\\"   /><p    ><div    ></div><div    ></div></p><p    ><div    ></div><div    ></div></p></div>
</template>


<script setup lang='ts'>
  import { ref } from \\"vue\\"








  const tortilla= ref(\\"Plain\\")
const fillings= ref([])
</script>"
`;

exports[`Vue > svelte > Typescript Test > bindProperty 1`] = `
"<template>
  <input />
</template>

<script setup lang=\\"ts\\">
import { ref } from \\"vue\\";

const value = ref(\\"hello\\");
</script>"
`;

exports[`Vue > svelte > Typescript Test > classDirective 1`] = `
"<template>
  <input />
</template>

<script setup lang=\\"ts\\">
import { ref } from \\"vue\\";

const props = withDefaults(defineProps<undefined>(), { disabled: undefined });
const focus = ref(true);
</script>"
`;

exports[`Vue > svelte > Typescript Test > context 1`] = `
"<template>
  <div><div></div></div>
</template>

<script setup lang=\\"ts\\">
import { inject, provide, ref } from \\"vue\\";

const activeTab = ref(0);

const disabled = inject(\\"disabled\\");

provide(\\"activeTab\\", activeTab.value);
</script>"
`;

exports[`Vue > svelte > Typescript Test > each 1`] = `
"<template>
  <ul>
    <template :key=\\"index\\" v-for=\\"(num, index) in numbers\\">
      <li><div></div></li>
    </template>
  </ul>
</template>

<script setup lang=\\"ts\\">
import { ref } from \\"vue\\";

const numbers = ref([\\"one\\", \\"two\\", \\"three\\"]);
</script>"
`;

exports[`Vue > svelte > Typescript Test > eventHandlers 1`] = `
"<template>
  <div>
    <button @click=\\"log('hi')\\"><div></div></button
    ><button @click=\\"log($event)\\"><div></div></button
    ><button @click=\\"log($event)\\"><div></div></button>
  </div>
</template>

<script setup lang=\\"ts\\">
function log(msg = \\"hello\\") {
  console.log(msg);
}
</script>"
`;

exports[`Vue > svelte > Typescript Test > html 1`] = `
"<template>
  <div :innerhtml=\\"html\\"></div>
</template>

<script setup lang=\\"ts\\">
import { ref } from \\"vue\\";

const html = ref(\\"<b>bold</b>\\");
</script>"
`;

exports[`Vue > svelte > Typescript Test > ifElse 1`] = `
"<template>
  <template v-if=\\"show\\">
    <button @click=\\"toggle($event)\\"><div></div></button>
  </template>

  <template v-else>
    <button @click=\\"toggle($event)\\"><div></div></button>
  </template>
</template>

<script setup lang=\\"ts\\">
import { ref } from \\"vue\\";

const show = ref(true);

function toggle() {
  show.value = !show.value;
}
</script>"
`;

exports[`Vue > svelte > Typescript Test > imports 1`] = `
"<template>
  <div>
    <button type=\\"button\\" :disabled=\\"disabled\\"><slot /></button>
  </div>
</template>

<script setup lang=\\"ts\\">
import { ref } from \\"vue\\";

import Button from \\"./Button.vue\\";

const disabled = ref(false);
</script>"
`;

exports[`Vue > svelte > Typescript Test > lifecycleHooks 1`] = `
"<template>
  <div></div>
</template>

<script setup lang=\\"ts\\">
import { onMounted, onUnmounted, onUpdated } from \\"vue\\";

onMounted(() => {
  console.log(\\"onMount\\");
});
onUnmounted(() => {
  console.log(\\"onDestroy\\");
});

onUpdated(() => console.log(\\"onAfterUpdate\\"));
</script>"
`;

exports[`Vue > svelte > Typescript Test > reactive 1`] = `
"<template>
  <div>
    <input />
    <div></div>
    <div></div>
  </div>
</template>

<script setup lang=\\"ts\\">
import { computed, ref } from \\"vue\\";

const name = ref(\\"Steve\\");

const lowercaseName = computed(() => {
  return name.value.toLowerCase();
});
</script>"
`;

exports[`Vue > svelte > Typescript Test > reactiveWithFn 1`] = `
"<template>
  <div>
    <input @input=\\"a = $event.target.value\\" /><input
      @input=\\"b = $event.target.value\\"
    />
    <div></div>
    <div></div>
  </div>
</template>

<script setup lang=\\"ts\\">
import { ref, watch } from \\"vue\\";

const a = ref(2);
const b = ref(5);
const result = ref(null);

watch(
  () => [a.value, b.value],
  ([a, b]) => {
    calculateResult(a, b);
  },
  { immediate: true }
);
function calculateResult(a_, b_) {
  result.value = a_ * b_;
}
</script>"
`;

exports[`Vue > svelte > Typescript Test > slots 1`] = `
"<template>
  <div>
    <slot><div></div></slot
    ><slot name=\\"test\\"
      ><div><div></div></div
    ></slot>
  </div>
</template>"
`;

exports[`Vue > svelte > Typescript Test > style 1`] = `
"<template>
  <input />
</template>



<style scoped>
input {
  color: red;
  font-size: 12px;
}

.form-input:focus {
  outline: 1px solid blue;
}
</style>"
`;

exports[`Vue > svelte > Typescript Test > textExpressions 1`] = `
"<template>
  <div>
    <div></div>
    <div></div>
    <br />
    <div></div>
    <div></div>
  </div>
</template>

<script setup lang=\\"ts\\">
import { ref } from \\"vue\\";

const a = ref(5);
const b = ref(12);
</script>"
`;
