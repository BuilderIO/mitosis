// Vitest Snapshot v1

exports[`Alpine.js > jsx > Javascript Test > AdvancedRef 1`] = `
"<style>
  .input {
    color: red;
  }
</style>
<div x-data=\\"myBasicRefComponent()\\">
  <div></div>
  <template x-if=\\"showInput\\">
    <div>
      <div></div>
      <input x-on:blur=\\"onBlur()\\" x-on:change=\\"name = $event.target.value\\" />
      <div></div>
      <label><div></div></label>
      <div></div>
      <select name=\\"cars\\">
        <div></div>
        <option><div></div></option>
        <div></div>
        <option><div></div></option>
        <div></div>
      </select>
      <div></div>
    </div>
  </template>
  <div></div>
  <div></div>
  <div></div>
</div>
<script>
  document.addEventListener(\\"alpine:init\\", () => {
    Alpine.data(\\"myBasicRefComponent\\", () => ({
      name: \\"PatrickJS\\",
      onBlur: function onBlur() {
        // Maintain focus
        inputRef.focus();
      },
      lowerCaseName: function lowerCaseName() {
        return this.name.toLowerCase();
      },
    }));
  });
</script>
"
`;

exports[`Alpine.js > jsx > Javascript Test > Basic 1`] = `
"<style>
  .div {
    padding: 10px;
  }
</style>
<div x-data=\\"myBasicComponent()\\">
  <div></div>
  <input x-on:change=\\"name = myEvent.target.value\\" />
  <div></div>
</div>
<script>
  document.addEventListener(\\"alpine:init\\", () => {
    Alpine.data(\\"myBasicComponent\\", () => ({
      name: \\"Steve\\",

      underscore_fn_name() {
        return \\"bar\\";
      },

      age: 1,
      sports: [\\"\\"],
    }));
  });
</script>
"
`;

exports[`Alpine.js > jsx > Javascript Test > Basic 2`] = `
"<div x-data=\\"myBasicForShowComponent()\\">
  <div></div>
  <template x-for=\\"person in names\\">
    <template x-if=\\"person === name\\">
      <div></div>
      <input x-on:change=\\"name = $event.target.value + ' and ' + person\\" />
      <div></div>
      <div></div>
      <div></div>
    </template>
  </template>
  <div></div>
</div>
<script>
  document.addEventListener(\\"alpine:init\\", () => {
    Alpine.data(\\"myBasicForShowComponent\\", () => ({
      name: \\"PatrickJS\\",
      names: [\\"Steve\\", \\"PatrickJS\\"],
    }));
  });
</script>
"
`;

exports[`Alpine.js > jsx > Javascript Test > Basic Context 1`] = `
"<div x-data=\\"myBasicComponent()\\">
  <div></div>
  <div></div>
  <div></div>
  <input x-on:change=\\"onChange\\" />
  <div></div>
</div>
<script>
  document.addEventListener(\\"alpine:init\\", () => {
    Alpine.data(\\"myBasicComponent\\", () => ({
      name: \\"PatrickJS\\",
      onChange: function onChange() {
        const change = myService.method(\\"change\\");
        console.log(change);
      },

      init() {
        const bye = myService.method(\\"hi\\");
        console.log(bye);
      },
    }));
  });
</script>
"
`;

exports[`Alpine.js > jsx > Javascript Test > Basic OnMount Update 1`] = `
"<div x-data=\\"myBasicOnMountUpdateComponent()\\">
  <div></div>
  <div></div>
</div>
<script>
  document.addEventListener(\\"alpine:init\\", () => {
    Alpine.data(\\"myBasicOnMountUpdateComponent\\", () => ({
      name: \\"PatrickJS\\",
      names: [\\"Steve\\", \\"PatrickJS\\"],

      init() {
        this.name = \\"PatrickJS onMount\\" + props.bye;
      },
    }));
  });
</script>
"
`;

exports[`Alpine.js > jsx > Javascript Test > Basic Outputs 1`] = `
"<div x-data=\\"myBasicOutputsComponent()\\"></div>
<script>
  document.addEventListener(\\"alpine:init\\", () => {
    Alpine.data(\\"myBasicOutputsComponent\\", () => ({
      name: \\"PatrickJS\\",

      init() {
        props.onMessage(this.name);
        props.onEvent(props.message);
      },
    }));
  });
</script>
"
`;

exports[`Alpine.js > jsx > Javascript Test > Basic Outputs Meta 1`] = `
"<div x-data=\\"myBasicOutputsComponent()\\"></div>
<script>
  document.addEventListener(\\"alpine:init\\", () => {
    Alpine.data(\\"myBasicOutputsComponent\\", () => ({
      name: \\"PatrickJS\\",

      init() {
        props.onMessage(this.name);
        props.onEvent(props.message);
      },
    }));
  });
</script>
"
`;

exports[`Alpine.js > jsx > Javascript Test > BasicAttribute 1`] = `
"<input x-data=\\"myComponent()\\" />
<script>
  document.addEventListener(\\"alpine:init\\", () => {
    Alpine.data(\\"myComponent\\", () => ({}));
  });
</script>
"
`;

exports[`Alpine.js > jsx > Javascript Test > BasicBooleanAttribute 1`] = `
"<div x-data=\\"myBooleanAttribute()\\">
  <div></div>
  <div></div>
  <div></div>
  <div></div>
  <div></div>
  <MyBooleanAttributeComponent
    x-bind:toggle=\\"true\\"
  ></MyBooleanAttributeComponent>
  <div></div>
  <MyBooleanAttributeComponent
    x-bind:toggle=\\"true\\"
  ></MyBooleanAttributeComponent>
  <div></div>
  <MyBooleanAttributeComponent x-bind:list=\\"null\\"></MyBooleanAttributeComponent>
  <div></div>
</div>
<script>
  document.addEventListener(\\"alpine:init\\", () => {
    Alpine.data(\\"myBooleanAttribute\\", () => ({}));
  });
</script>
"
`;

exports[`Alpine.js > jsx > Javascript Test > BasicChildComponent 1`] = `
"<div x-data=\\"myBasicChildComponent()\\">
  <div></div>
  <MyBasicComponent x-bind:id=\\"dev\\"></MyBasicComponent>
  <div></div>
  <div>
    <div></div>
    <MyBasicOnMountUpdateComponent
      x-bind:hi=\\"name\\"
      x-bind:bye=\\"dev\\"
    ></MyBasicOnMountUpdateComponent>
    <div></div>
  </div>
  <div></div>
</div>
<script>
  document.addEventListener(\\"alpine:init\\", () => {
    Alpine.data(\\"myBasicChildComponent\\", () => ({
      name: \\"Steve\\",
      dev: \\"PatrickJS\\",
    }));
  });
</script>
"
`;

exports[`Alpine.js > jsx > Javascript Test > BasicFor 1`] = `
"<div x-data=\\"myBasicForComponent()\\">
  <div></div>
  <template x-for=\\"person in names\\">
    <div>
      <div></div>
      <input x-on:change=\\"name = $event.target.value + ' and ' + person\\" />
      <div></div>
      <div></div>
      <div></div>
    </div>
  </template>
  <div></div>
</div>
<script>
  document.addEventListener(\\"alpine:init\\", () => {
    Alpine.data(\\"myBasicForComponent\\", () => ({
      name: \\"PatrickJS\\",
      names: [\\"Steve\\", \\"PatrickJS\\"],

      init() {
        console.log(\\"onMount code\\");
      },
    }));
  });
</script>
"
`;

exports[`Alpine.js > jsx > Javascript Test > BasicRef 1`] = `
"<style>
  .input {
    color: red;
  }
</style>
<div x-data=\\"myBasicRefComponent()\\">
  <div></div>
  <template x-if=\\"showInput\\">
    <div>
      <div></div>
      <input x-on:blur=\\"onBlur()\\" x-on:change=\\"name = $event.target.value\\" />
      <div></div>
      <label><div></div></label>
      <div></div>
      <select name=\\"cars\\">
        <div></div>
        <option><div></div></option>
        <div></div>
        <option><div></div></option>
        <div></div>
      </select>
      <div></div>
    </div>
  </template>
  <div></div>
  <div></div>
  <div></div>
</div>
<script>
  document.addEventListener(\\"alpine:init\\", () => {
    Alpine.data(\\"myBasicRefComponent\\", () => ({
      name: \\"PatrickJS\\",
      onBlur: function onBlur() {
        // Maintain focus
        inputRef.focus();
      },
      lowerCaseName: function lowerCaseName() {
        return this.name.toLowerCase();
      },
    }));
  });
</script>
"
`;

exports[`Alpine.js > jsx > Javascript Test > BasicRefAssignment 1`] = `
"<div x-data=\\"myBasicRefAssignmentComponent()\\">
  <div></div>
  <button x-on:click=\\"handlerClick(evt)\\"><div></div></button>
  <div></div>
</div>
<script>
  document.addEventListener(\\"alpine:init\\", () => {
    Alpine.data(\\"myBasicRefAssignmentComponent\\", () => ({
      handlerClick: function handlerClick(event) {
        event.preventDefault();
        console.log(\\"current value\\", holdValueRef);
        holdValueRef = holdValueRef + \\"JS\\";
      },
    }));
  });
</script>
"
`;

exports[`Alpine.js > jsx > Javascript Test > BasicRefPrevious 1`] = `
"<div x-data=\\"myPreviousComponent()\\">
  <div></div>
  <h1>
    <div></div>
    <div></div>
    <div></div>
    <div></div>
    <div></div>
  </h1>
  <div></div>
  <button x-on:click=\\"count += 1\\"><div></div></button>
  <div></div>
</div>
<script>
  document.addEventListener(\\"alpine:init\\", () => {
    Alpine.data(\\"myPreviousComponent\\", () => ({
      count: 0,

      init() {
        this.$watch(\\"count\\", (value, oldValue) => {
          prevCount = this.count;
        });
      },
    }));
  });
</script>
"
`;

exports[`Alpine.js > jsx > Javascript Test > Button 1`] = `
"<div x-data=\\"button()\\">
  <div></div>
  <template x-if=\\"link\\">
    <div></div>
    <a>
      <div></div>
      <div></div>
      <div></div>
    </a>
    <div></div>
  </template>
  <div></div>
  <template x-if=\\"!link\\">
    <div></div>
    <button>
      <div></div>
      <div></div>
      <div></div>
    </button>
    <div></div>
  </template>
  <div></div>
</div>
<script>
  document.addEventListener(\\"alpine:init\\", () => {
    Alpine.data(\\"button\\", () => ({}));
  });
</script>
"
`;

exports[`Alpine.js > jsx > Javascript Test > Columns 1`] = `
"<style>
  .div {
    display: flex;
    flex-direction: column;
    align-items: stretch;
    line-height: normal;
  }
  @media (max-width: 999px) {
    .div {
      flex-direction: row;
    }
  }
  @media (max-width: 639px) {
    .div {
      flex-direction: row-reverse;
    }
  }
  .div-2 {
    flex-grow: 1;
  }
</style>
<div x-data=\\"column()\\">
  <div></div>
  <template x-for=\\"column in columns\\">
    <div>
      <div></div>
      <div></div>
      <div></div>
      <div></div>
      <div></div>
    </div>
  </template>
  <div></div>
</div>
<script>
  document.addEventListener(\\"alpine:init\\", () => {
    Alpine.data(\\"column\\", () => ({
      getColumns() {
        return props.columns || [];
      },

      getGutterSize() {
        return typeof props.space === \\"number\\" ? props.space || 0 : 20;
      },

      getWidth(index) {
        const columns = this.getColumns();
        return (columns[index] && columns[index].width) || 100 / columns.length;
      },

      getColumnCssWidth(index) {
        const columns = this.getColumns();
        const gutterSize = this.getGutterSize();
        const subtractWidth =
          (gutterSize * (columns.length - 1)) / columns.length;
        return \`calc(\${this.getWidth(index)}% - \${subtractWidth}px)\`;
      },
    }));
  });
</script>
"
`;

exports[`Alpine.js > jsx > Javascript Test > ContentSlotHtml 1`] = `
"<div x-data=\\"contentSlotCode()\\">
  <div></div>
  <slot x-bind:name=\\"slotTesting\\"></slot>
  <div></div>
  <div>
    <div></div>
    <hr />
    <div></div>
  </div>
  <div></div>
  <div>
    <div></div>
    <slot></slot>
    <div></div>
  </div>
  <div></div>
</div>
<script>
  document.addEventListener(\\"alpine:init\\", () => {
    Alpine.data(\\"contentSlotCode\\", () => ({}));
  });
</script>
"
`;

exports[`Alpine.js > jsx > Javascript Test > ContentSlotJSX 1`] = `
"<template x-if=\\"slotReference\\">
  <div></div>
  <div x-bind:name=\\"slotContent ? 'name1' : 'name2'\\" x-on:click=\\"show()\\">
    <div></div>
    <template x-if=\\"showContent && slotContent\\">
      <div></div>
      <slot name=\\"content\\"><div></div></slot>
      <div></div>
    </template>
    <div></div>
    <div>
      <div></div>
      <hr />
      <div></div>
    </div>
    <div></div>
    <div><div></div></div>
    <div></div>
  </div>
  <div></div>
</template>
<script>
  document.addEventListener(\\"alpine:init\\", () => {
    Alpine.data(\\"contentSlotJsxCode\\", () => ({
      name: \\"king\\",
      showContent: false,

      get cls() {
        return props.slotContent && props.children
          ? \`\${this.name}-content\`
          : \\"\\";
      },

      show() {
        props.slotContent ? 1 : \\"\\";
      },
    }));
  });
</script>
"
`;

exports[`Alpine.js > jsx > Javascript Test > CustomCode 1`] = `
"<div x-data=\\"customCode()\\" x-bind:innerhtml=\\"code\\"></div>
<script>
  document.addEventListener(\\"alpine:init\\", () => {
    Alpine.data(\\"customCode\\", () => ({
      scriptsInserted: [],
      scriptsRun: [],

      findAndRunScripts() {
        // TODO: Move this function to standalone one in '@builder.io/utils'
        if (elem && typeof window !== \\"undefined\\") {
          /** @type {HTMLScriptElement[]} */
          const scripts = elem.getElementsByTagName(\\"script\\");

          for (let i = 0; i < scripts.length; i++) {
            const script = scripts[i];

            if (script.src) {
              if (this.scriptsInserted.includes(script.src)) {
                continue;
              }

              this.scriptsInserted.push(script.src);
              const newScript = document.createElement(\\"script\\");
              newScript.async = true;
              newScript.src = script.src;
              document.head.appendChild(newScript);
            } else if (
              !script.type ||
              [
                \\"text/javascript\\",
                \\"application/javascript\\",
                \\"application/ecmascript\\",
              ].includes(script.type)
            ) {
              if (this.scriptsRun.includes(script.innerText)) {
                continue;
              }

              try {
                this.scriptsRun.push(script.innerText);
                new Function(script.innerText)();
              } catch (error) {
                console.warn(\\"\`CustomCode\`: Error running script:\\", error);
              }
            }
          }
        }
      },

      init() {
        this.findAndRunScripts();
      },
    }));
  });
</script>
"
`;

exports[`Alpine.js > jsx > Javascript Test > Embed 1`] = `
"<div x-data=\\"customCode()\\" x-bind:innerhtml=\\"code\\"></div>
<script>
  document.addEventListener(\\"alpine:init\\", () => {
    Alpine.data(\\"customCode\\", () => ({
      scriptsInserted: [],
      scriptsRun: [],

      findAndRunScripts() {
        // TODO: Move this function to standalone one in '@builder.io/utils'
        if (elem && typeof window !== \\"undefined\\") {
          /** @type {HTMLScriptElement[]} */
          const scripts = elem.getElementsByTagName(\\"script\\");

          for (let i = 0; i < scripts.length; i++) {
            const script = scripts[i];

            if (script.src) {
              if (this.scriptsInserted.includes(script.src)) {
                continue;
              }

              this.scriptsInserted.push(script.src);
              const newScript = document.createElement(\\"script\\");
              newScript.async = true;
              newScript.src = script.src;
              document.head.appendChild(newScript);
            } else if (
              !script.type ||
              [
                \\"text/javascript\\",
                \\"application/javascript\\",
                \\"application/ecmascript\\",
              ].includes(script.type)
            ) {
              if (this.scriptsRun.includes(script.innerText)) {
                continue;
              }

              try {
                this.scriptsRun.push(script.innerText);
                new Function(script.innerText)();
              } catch (error) {
                console.warn(\\"\`CustomCode\`: Error running script:\\", error);
              }
            }
          }
        }
      },

      init() {
        this.findAndRunScripts();
      },
    }));
  });
</script>
"
`;

exports[`Alpine.js > jsx > Javascript Test > Form 1`] = `
"<style>
  .pre {
    padding: 10px;
    color: red;
    text-align: center;
  }
</style>
<form
  x-data=\\"formComponent()\\"
  x-bind:name=\\"name\\"
  x-on:submit=\\"onSubmit($event)\\"
>
  <div></div>
  <template x-if=\\"builderBlock && builderBlock.children\\">
    <div></div>
    <template x-for=\\"block in builderBlock?.children\\">
      <BuilderBlockComponent
        x-bind:key=\\"block.id\\"
        x-bind:block=\\"block\\"
        x-bind:index=\\"index\\"
      ></BuilderBlockComponent>
    </template>
    <div></div>
  </template>
  <div></div>
  <template x-if=\\"submissionState === 'error'\\">
    <div></div>
    <BuilderBlocks
      dataPath=\\"errorMessage\\"
      x-bind:blocks=\\"errorMessage\\"
    ></BuilderBlocks>
    <div></div>
  </template>
  <div></div>
  <template x-if=\\"submissionState === 'sending'\\">
    <div></div>
    <BuilderBlocks
      dataPath=\\"sendingMessage\\"
      x-bind:blocks=\\"sendingMessage\\"
    ></BuilderBlocks>
    <div></div>
  </template>
  <div></div>
  <template x-if=\\"submissionState === 'error' && responseData\\">
    <div></div>
    <pre><div ></div>
<div ></div>
<div ></div></pre>
    <div></div>
  </template>
  <div></div>
  <template x-if=\\"submissionState === 'success'\\">
    <div></div>
    <BuilderBlocks
      dataPath=\\"successMessage\\"
      x-bind:blocks=\\"successMessage\\"
    ></BuilderBlocks>
    <div></div>
  </template>
  <div></div>
</form>
<script>
  document.addEventListener(\\"alpine:init\\", () => {
    Alpine.data(\\"formComponent\\", () => ({
      formState: \\"unsubmitted\\",
      responseData: null,
      formErrorMessage: \\"\\",

      get submissionState() {
        return (Builder.isEditing && props.previewState) || this.formState;
      },

      onSubmit(event) {
        const sendWithJs =
          props.sendWithJs || props.sendSubmissionsTo === \\"email\\";

        if (props.sendSubmissionsTo === \\"zapier\\") {
          event.preventDefault();
        } else if (sendWithJs) {
          if (!(props.action || props.sendSubmissionsTo === \\"email\\")) {
            event.preventDefault();
            return;
          }

          event.preventDefault();
          const el = event.currentTarget;
          const headers = props.customHeaders || {};
          let body;
          const formData = new FormData(el); // TODO: maybe support null

          const formPairs = Array.from(
            event.currentTarget.querySelectorAll(\\"input,select,textarea\\")
          )
            .filter((el) => !!el.name)
            .map((el) => {
              let value;
              const key = el.name;

              if (el instanceof HTMLInputElement) {
                if (el.type === \\"radio\\") {
                  if (el.checked) {
                    value = el.name;
                    return {
                      key,
                      value,
                    };
                  }
                } else if (el.type === \\"checkbox\\") {
                  value = el.checked;
                } else if (el.type === \\"number\\" || el.type === \\"range\\") {
                  const num = el.valueAsNumber;

                  if (!isNaN(num)) {
                    value = num;
                  }
                } else if (el.type === \\"file\\") {
                  // TODO: one vs multiple files
                  value = el.files;
                } else {
                  value = el.value;
                }
              } else {
                value = el.value;
              }

              return {
                key,
                value,
              };
            });
          let contentType = props.contentType;

          if (props.sendSubmissionsTo === \\"email\\") {
            contentType = \\"multipart/form-data\\";
          }

          Array.from(formPairs).forEach(({ value }) => {
            if (
              value instanceof File ||
              (Array.isArray(value) && value[0] instanceof File) ||
              value instanceof FileList
            ) {
              contentType = \\"multipart/form-data\\";
            }
          }); // TODO: send as urlEncoded or multipart by default
          // because of ease of use and reliability in browser API
          // for encoding the form?

          if (contentType !== \\"application/json\\") {
            body = formData;
          } else {
            // Json
            const json = {};
            Array.from(formPairs).forEach(({ value, key }) => {
              set(json, key, value);
            });
            body = JSON.stringify(json);
          }

          if (contentType && contentType !== \\"multipart/form-data\\") {
            if (
              /* Zapier doesn't allow content-type header to be sent from browsers */
              !(sendWithJs && props.action?.includes(\\"zapier.com\\"))
            ) {
              headers[\\"content-type\\"] = contentType;
            }
          }

          const presubmitEvent = new CustomEvent(\\"presubmit\\", {
            detail: {
              body,
            },
          });

          if (formRef) {
            formRef.dispatchEvent(presubmitEvent);

            if (presubmitEvent.defaultPrevented) {
              return;
            }
          }

          this.formState = \\"sending\\";
          const formUrl = \`\${
            builder.env === \\"dev\\"
              ? \\"http://localhost:5000\\"
              : \\"https://builder.io\\"
          }/api/v1/form-submit?apiKey=\${builder.apiKey}&to=\${btoa(
            props.sendSubmissionsToEmail || \\"\\"
          )}&name=\${encodeURIComponent(props.name || \\"\\")}\`;
          fetch(
            props.sendSubmissionsTo === \\"email\\" ? formUrl : props.action,
            /* TODO: throw error if no action URL */
            {
              body,
              headers,
              method: props.method || \\"post\\",
            }
          ).then(
            async (res) => {
              let body;
              const contentType = res.headers.get(\\"content-type\\");

              if (
                contentType &&
                contentType.indexOf(\\"application/json\\") !== -1
              ) {
                body = await res.json();
              } else {
                body = await res.text();
              }

              if (!res.ok && props.errorMessagePath) {
                /* TODO: allow supplying an error formatter function */
                let message = get(body, props.errorMessagePath);

                if (message) {
                  if (typeof message !== \\"string\\") {
                    /* TODO: ideally convert json to yaml so it woul dbe like
                 error: - email has been taken */
                    message = JSON.stringify(message);
                  }

                  this.formErrorMessage = message;
                }
              }

              this.responseData = body;
              this.formState = res.ok ? \\"success\\" : \\"error\\";

              if (res.ok) {
                const submitSuccessEvent = new CustomEvent(\\"submit:success\\", {
                  detail: {
                    res,
                    body,
                  },
                });

                if (formRef) {
                  formRef.dispatchEvent(submitSuccessEvent);

                  if (submitSuccessEvent.defaultPrevented) {
                    return;
                  }
                  /* TODO: option to turn this on/off? */

                  if (props.resetFormOnSubmit !== false) {
                    formRef.reset();
                  }
                }
                /* TODO: client side route event first that can be preventDefaulted */

                if (props.successUrl) {
                  if (formRef) {
                    const event = new CustomEvent(\\"route\\", {
                      detail: {
                        url: props.successUrl,
                      },
                    });
                    formRef.dispatchEvent(event);

                    if (!event.defaultPrevented) {
                      location.href = props.successUrl;
                    }
                  } else {
                    location.href = props.successUrl;
                  }
                }
              }
            },
            (err) => {
              const submitErrorEvent = new CustomEvent(\\"submit:error\\", {
                detail: {
                  error: err,
                },
              });

              if (formRef) {
                formRef.dispatchEvent(submitErrorEvent);

                if (submitErrorEvent.defaultPrevented) {
                  return;
                }
              }

              this.responseData = err;
              this.formState = \\"error\\";
            }
          );
        }
      },
    }));
  });
</script>
"
`;

exports[`Alpine.js > jsx > Javascript Test > Image 1`] = `
"<style>
  .img {
    opacity: 1;
    transition: opacity 0.2s ease-in-out;
    object-fit: cover;
    object-position: center;
  }
</style>
<div x-data=\\"image()\\">
  <div></div>
  <picture>
    <div></div>
    <template x-if=\\"!useLazyLoading() || load\\">
      <div></div>
      <img
        x-bind:aria-role=\\"altText ? 'presentation' : undefined\\"
        x-on:load=\\"setLoaded()\\"
      />
      <div></div>
    </template>
    <div></div>
    <source />
    <div></div>
  </picture>
  <div></div>
  <div></div>
  <div></div>
</div>
<script>
  document.addEventListener(\\"alpine:init\\", () => {
    Alpine.data(\\"image\\", () => ({
      scrollListener: null,
      imageLoaded: false,

      setLoaded() {
        this.imageLoaded = true;
      },

      useLazyLoading() {
        // TODO: Add more checks here, like testing for real web browsers
        return !!props.lazy && isBrowser();
      },

      isBrowser: function isBrowser() {
        return (
          typeof window !== \\"undefined\\" &&
          window.navigator.product != \\"ReactNative\\"
        );
      },
      load: false,

      init() {
        if (this.useLazyLoading()) {
          // throttled scroll capture listener
          const listener = () => {
            if (pictureRef) {
              const rect = pictureRef.getBoundingClientRect();
              const buffer = window.innerHeight / 2;

              if (rect.top < window.innerHeight + buffer) {
                setLoad(true);
                this.scrollListener = null;
                window.removeEventListener(\\"scroll\\", listener);
              }
            }
          };

          this.scrollListener = listener;
          window.addEventListener(\\"scroll\\", listener, {
            capture: true,
            passive: true,
          });
          listener();
        }
      },
    }));
  });
</script>
"
`;

exports[`Alpine.js > jsx > Javascript Test > Image State 1`] = `
"<div x-data=\\"imgStateComponent()\\">
  <div></div>
  <template x-for=\\"item in images\\">
    <div>
      <div></div>
      <img />
      <div></div>
    </div>
  </template>
  <div></div>
</div>
<script>
  document.addEventListener(\\"alpine:init\\", () => {
    Alpine.data(\\"imgStateComponent\\", () => ({
      canShow: true,
      images: [\\"http://example.com/qwik.png\\"],
    }));
  });
</script>
"
`;

exports[`Alpine.js > jsx > Javascript Test > Img 1`] = `
"<img x-data=\\"imgComponent()\\" />
<script>
  document.addEventListener(\\"alpine:init\\", () => {
    Alpine.data(\\"imgComponent\\", () => ({}));
  });
</script>
"
`;

exports[`Alpine.js > jsx > Javascript Test > Input 1`] = `
"<input
  x-data=\\"formInputComponent()\\"
  x-bind:name=\\"name\\"
  x-bind:defaultvalue=\\"defaultValue\\"
/>
<script>
  document.addEventListener(\\"alpine:init\\", () => {
    Alpine.data(\\"formInputComponent\\", () => ({}));
  });
</script>
"
`;

exports[`Alpine.js > jsx > Javascript Test > RawText 1`] = `
"<span x-data=\\"rawText()\\" x-bind:innerhtml=\\"text || ''\\"></span>
<script>
  document.addEventListener(\\"alpine:init\\", () => {
    Alpine.data(\\"rawText\\", () => ({}));
  });
</script>
"
`;

exports[`Alpine.js > jsx > Javascript Test > Section 1`] = `
"<section x-data=\\"sectionComponent()\\">
  <div></div>
  <div></div>
  <div></div>
</section>
<script>
  document.addEventListener(\\"alpine:init\\", () => {
    Alpine.data(\\"sectionComponent\\", () => ({}));
  });
</script>
"
`;

exports[`Alpine.js > jsx > Javascript Test > Section 2`] = `
"<template x-if=\\"max\\">
  <div></div>
  <template x-for=\\"item in items\\">
    <section>
      <div></div>
      <div></div>
      <div></div>
    </section>
  </template>
  <div></div>
</template>
<script>
  document.addEventListener(\\"alpine:init\\", () => {
    Alpine.data(\\"sectionStateComponent\\", () => ({
      max: 42,
      items: [42],
    }));
  });
</script>
"
`;

exports[`Alpine.js > jsx > Javascript Test > Select 1`] = `
"<select
  x-data=\\"selectComponent()\\"
  x-bind:name=\\"name\\"
  x-bind:defaultvalue=\\"defaultValue\\"
>
  <div></div>
  <template x-for=\\"option in options\\">
    <option x-bind:data-index=\\"index\\">
      <div></div>
      <div></div>
      <div></div>
    </option>
  </template>
  <div></div>
</select>
<script>
  document.addEventListener(\\"alpine:init\\", () => {
    Alpine.data(\\"selectComponent\\", () => ({}));
  });
</script>
"
`;

exports[`Alpine.js > jsx > Javascript Test > SlotDefault 1`] = `
"<div x-data=\\"slotCode()\\">
  <div></div>
  <slot>
    <div></div>
    <div><div></div></div>
    <div></div>
  </slot>
  <div></div>
</div>
<script>
  document.addEventListener(\\"alpine:init\\", () => {
    Alpine.data(\\"slotCode\\", () => ({}));
  });
</script>
"
`;

exports[`Alpine.js > jsx > Javascript Test > SlotHtml 1`] = `
"<div x-data=\\"slotCode()\\">
  <div></div>
  <ContentSlotCode>
    <div></div>
    <slot x-bind:testing=\\"<div>Hello</div>\\"></slot>
    <div></div>
  </ContentSlotCode>
  <div></div>
</div>
<script>
  document.addEventListener(\\"alpine:init\\", () => {
    Alpine.data(\\"slotCode\\", () => ({}));
  });
</script>
"
`;

exports[`Alpine.js > jsx > Javascript Test > SlotJsx 1`] = `
"<div x-data=\\"slotCode()\\">
  <div></div>
  <ContentSlotCode x-bind:slotTesting=\\"<div>Hello</div>\\"></ContentSlotCode>
  <div></div>
</div>
<script>
  document.addEventListener(\\"alpine:init\\", () => {
    Alpine.data(\\"slotCode\\", () => ({}));
  });
</script>
"
`;

exports[`Alpine.js > jsx > Javascript Test > SlotNamed 1`] = `
"<div x-data=\\"slotCode()\\">
  <div></div>
  <slot name=\\"top\\"></slot>
  <div></div>
  <slot name=\\"left\\"><div></div></slot>
  <div></div>
  <slot><div></div></slot>
  <div></div>
</div>
<script>
  document.addEventListener(\\"alpine:init\\", () => {
    Alpine.data(\\"slotCode\\", () => ({}));
  });
</script>
"
`;

exports[`Alpine.js > jsx > Javascript Test > Stamped.io 1`] = `
"<style>
  .input {
    display: block;
  }
  .textarea {
    display: block;
  }
  .button {
    display: block;
  }
  .review {
    margin: 10px;
    padding: 10px;
    background: white;
    display: flex;
    border-radius: 5px;
    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
  }
  .img {
    height: 30px;
    width: 30px;
    margin-right: 10px;
  }
</style>
<div x-data=\\"smileReviews()\\" x-bind:data-user=\\"name\\">
  <div></div>
  <button x-on:click=\\"showReviewPrompt = true\\"><div></div></button>
  <div></div>
  <template x-if=\\"showReviewPrompt || 'asdf'\\">
    <div></div>
    <input />
    <div></div>
    <input />
    <div></div>
    <textarea></textarea>
    <div></div>
    <button
      x-on:click=\\"$event.preventDefault();
showReviewPrompt = false\\"
    >
      <div></div>
    </button>
    <div></div>
  </template>
  <div></div>
  <template x-for=\\"review in reviews\\">
    <div>
      <div></div>
      <img />
      <div></div>
      <div>
        <div></div>
        <div>
          <div></div>
          <div></div>
        </div>
        <div></div>
        <div><div></div></div>
        <div></div>
        <div><div></div></div>
        <div></div>
      </div>
      <div></div>
    </div>
  </template>
  <div></div>
</div>
<script>
  document.addEventListener(\\"alpine:init\\", () => {
    Alpine.data(\\"smileReviews\\", () => ({
      reviews: [],
      name: \\"test\\",
      showReviewPrompt: false,

      kebabCaseValue() {
        return kebabCase(\\"testThat\\");
      },

      snakeCaseValue() {
        return snakeCase(\\"testThis\\");
      },

      init() {
        fetch(
          \`https://stamped.io/api/widget/reviews?storeUrl=builder-io.myshopify.com&apiKey=\${
            props.apiKey || \\"pubkey-8bbDq7W6w4sB3OWeM1HUy2s47702hM\\"
          }&productId=\${props.productId || \\"2410511106127\\"}\`
        )
          .then((res) => res.json())
          .then((data) => {
            this.reviews = data.data;
          });
      },
    }));
  });
</script>
"
`;

exports[`Alpine.js > jsx > Javascript Test > Submit 1`] = `
"<button x-data=\\"submitButton()\\">
  <div></div>
  <div></div>
  <div></div>
</button>
<script>
  document.addEventListener(\\"alpine:init\\", () => {
    Alpine.data(\\"submitButton\\", () => ({}));
  });
</script>
"
`;

exports[`Alpine.js > jsx > Javascript Test > Text 1`] = `
"<div  x-data=\\"text()\\"  x-bind:data-name=\\"{
  test: name || 'any name'
}\\"  x-bind:contenteditable=\\"allowEditingText || undefined\\"  x-bind:innerhtml=\\"text || content || name || '<p class=\\"text-lg\\">my name</p>'\\" ></div><script>
          document.addEventListener('alpine:init', () => {
  Alpine.data('text', () => ({
    name: 'Decadef20'
  }));
});
        </script>"
`;

exports[`Alpine.js > jsx > Javascript Test > Textarea 1`] = `
"<textarea
  x-data=\\"textarea()\\"
  x-bind:name=\\"name\\"
  x-bind:defaultvalue=\\"defaultValue\\"
></textarea>
<script>
  document.addEventListener(\\"alpine:init\\", () => {
    Alpine.data(\\"textarea\\", () => ({}));
  });
</script>
"
`;

exports[`Alpine.js > jsx > Javascript Test > Video 1`] = `
"<video x-data=\\"video()\\"></video>
<script>
  document.addEventListener(\\"alpine:init\\", () => {
    Alpine.data(\\"video\\", () => ({}));
  });
</script>
"
`;

exports[`Alpine.js > jsx > Javascript Test > arrowFunctionInUseStore 1`] = `
"<div x-data=\\"myComponent()\\">
  <div></div>
  <div></div>
</div>
<script>
  document.addEventListener(\\"alpine:init\\", () => {
    Alpine.data(\\"myComponent\\", () => ({
      name: \\"steve\\",

      setName(value) {
        this.name = value;
      },

      updateNameWithArrowFn(value) {
        this.name = value;
      },
    }));
  });
</script>
"
`;

exports[`Alpine.js > jsx > Javascript Test > basicForwardRef 1`] = `
"<style>
  .input {
    color: red;
  }
</style>
<div x-data=\\"myBasicForwardRefComponent()\\">
  <div></div>
  <input x-on:change=\\"name = $event.target.value\\" />
  <div></div>
</div>
<script>
  document.addEventListener(\\"alpine:init\\", () => {
    Alpine.data(\\"myBasicForwardRefComponent\\", () => ({
      name: \\"PatrickJS\\",
    }));
  });
</script>
"
`;

exports[`Alpine.js > jsx > Javascript Test > basicForwardRefMetadata 1`] = `
"<style>
  .input {
    color: red;
  }
</style>
<div x-data=\\"myBasicForwardRefComponent()\\">
  <div></div>
  <input x-on:change=\\"name = $event.target.value\\" />
  <div></div>
</div>
<script>
  document.addEventListener(\\"alpine:init\\", () => {
    Alpine.data(\\"myBasicForwardRefComponent\\", () => ({
      name: \\"PatrickJS\\",
    }));
  });
</script>
"
`;

exports[`Alpine.js > jsx > Javascript Test > basicOnUpdateReturn 1`] = `
"<div x-data=\\"myBasicOnUpdateReturnComponent()\\">
  <div></div>
  <div></div>
</div>
<script>
  document.addEventListener(\\"alpine:init\\", () => {
    Alpine.data(\\"myBasicOnUpdateReturnComponent\\", () => ({
      name: \\"PatrickJS\\",

      init() {
        this.$watch(\\"name\\", (value, oldValue) => {
          const controller = new AbortController();
          const signal = controller.signal;
          fetch(\\"https://patrickjs.com/api/resource.json\\", {
            signal,
          })
            .then((response) => response.json())
            .then((data) => {
              this.name = data.name;
            });
          return () => {
            if (!signal.aborted) {
              controller.abort();
            }
          };
        });
      },
    }));
  });
</script>
"
`;

exports[`Alpine.js > jsx > Javascript Test > camelCasedAttributes 1`] = `
"<div x-data=\\"myComponent()\\">
  <div></div>
  <img srcset=\\"http://example.com\\" />
  <div></div>
</div>
<script>
  document.addEventListener(\\"alpine:init\\", () => {
    Alpine.data(\\"myComponent\\", () => ({
      name: \\"Steve\\",
    }));
  });
</script>
"
`;

exports[`Alpine.js > jsx > Javascript Test > class + ClassName + css 1`] = `
"<style>
  .div {
    padding: 10px;
  }
</style>
<div x-data=\\"myBasicComponent()\\"><div></div></div>
<script>
  document.addEventListener(\\"alpine:init\\", () => {
    Alpine.data(\\"myBasicComponent\\", () => ({}));
  });
</script>
"
`;

exports[`Alpine.js > jsx > Javascript Test > class + css 1`] = `
"<style>
  .div {
    padding: 10px;
  }
</style>
<div x-data=\\"myBasicComponent()\\"><div></div></div>
<script>
  document.addEventListener(\\"alpine:init\\", () => {
    Alpine.data(\\"myBasicComponent\\", () => ({}));
  });
</script>
"
`;

exports[`Alpine.js > jsx > Javascript Test > className + css 1`] = `
"<style>
  .div {
    padding: 10px;
  }
</style>
<div x-data=\\"myBasicComponent()\\"><div></div></div>
<script>
  document.addEventListener(\\"alpine:init\\", () => {
    Alpine.data(\\"myBasicComponent\\", () => ({}));
  });
</script>
"
`;

exports[`Alpine.js > jsx > Javascript Test > className 1`] = `
"<div x-data=\\"classNameCode()\\">
  <div></div>
  <div></div>
  <div><div></div></div>
  <div></div>
  <div></div>
  <div><div></div></div>
  <div></div>
</div>
<script>
  document.addEventListener(\\"alpine:init\\", () => {
    Alpine.data(\\"classNameCode\\", () => ({
      bindings: \\"a binding\\",
    }));
  });
</script>
"
`;

exports[`Alpine.js > jsx > Javascript Test > classState 1`] = `
"<style>
  .div {
    padding: 10px;
  }
</style>
<div x-data=\\"myBasicComponent()\\"><div></div></div>
<script>
  document.addEventListener(\\"alpine:init\\", () => {
    Alpine.data(\\"myBasicComponent\\", () => ({
      classState: \\"testClassName\\",
      styleState: {
        color: \\"red\\",
      },
    }));
  });
</script>
"
`;

exports[`Alpine.js > jsx > Javascript Test > componentWithContext 1`] = `
"<div x-data=\\"componentWithContext()\\">
  <div></div>
  <div><div></div></div>
  <div></div>
</div>
<script>
  document.addEventListener(\\"alpine:init\\", () => {
    Alpine.data(\\"componentWithContext\\", () => ({}));
  });
</script>
"
`;

exports[`Alpine.js > jsx > Javascript Test > componentWithContextMultiRoot 1`] = `
"<div x-data=\\"componentWithContext()\\">
  <div></div>
  <div><div></div></div>
  <div></div>
  <div><div></div></div>
  <div></div>
</div>
<script>
  document.addEventListener(\\"alpine:init\\", () => {
    Alpine.data(\\"componentWithContext\\", () => ({}));
  });
</script>
"
`;

exports[`Alpine.js > jsx > Javascript Test > contentState 1`] = `
"<div x-data=\\"renderContent()\\"><div></div></div>
<script>
  document.addEventListener(\\"alpine:init\\", () => {
    Alpine.data(\\"renderContent\\", () => ({}));
  });
</script>
"
`;

exports[`Alpine.js > jsx > Javascript Test > defaultProps 1`] = `
"<div x-data=\\"button()\\">
  <div></div>
  <template x-if=\\"link\\">
    <div></div>
    <a>
      <div></div>
      <div></div>
      <div></div>
    </a>
    <div></div>
  </template>
  <div></div>
  <template x-if=\\"!link\\">
    <div></div>
    <button x-on:click=\\"onClick($event)\\">
      <div></div>
      <div></div>
      <div></div>
    </button>
    <div></div>
  </template>
  <div></div>
</div>
<script>
  document.addEventListener(\\"alpine:init\\", () => {
    Alpine.data(\\"button\\", () => ({}));
  });
</script>
"
`;

exports[`Alpine.js > jsx > Javascript Test > defaultPropsOutsideComponent 1`] = `
"<div x-data=\\"button()\\">
  <div></div>
  <template x-if=\\"link\\">
    <div></div>
    <a>
      <div></div>
      <div></div>
      <div></div>
    </a>
    <div></div>
  </template>
  <div></div>
  <template x-if=\\"!link\\">
    <div></div>
    <button x-on:click=\\"onClick($event)\\">
      <div></div>
      <div></div>
      <div></div>
    </button>
    <div></div>
  </template>
  <div></div>
</div>
<script>
  document.addEventListener(\\"alpine:init\\", () => {
    Alpine.data(\\"button\\", () => ({}));
  });
</script>
"
`;

exports[`Alpine.js > jsx > Javascript Test > defaultValsWithTypes 1`] = `
"<div x-data=\\"componentWithTypes()\\">
  <div></div>
  <div></div>
</div>
<script>
  document.addEventListener(\\"alpine:init\\", () => {
    Alpine.data(\\"componentWithTypes\\", () => ({}));
  });
</script>
"
`;

exports[`Alpine.js > jsx > Javascript Test > expressionState 1`] = `
"<div x-data=\\"myComponent()\\"><div></div></div>
<script>
  document.addEventListener(\\"alpine:init\\", () => {
    Alpine.data(\\"myComponent\\", () => ({
      refToUse: !(props.componentRef instanceof Function)
        ? props.componentRef
        : null,
    }));
  });
</script>
"
`;

exports[`Alpine.js > jsx > Javascript Test > import types 1`] = `
"<RenderBlock
  x-data=\\"renderContent()\\"
  x-bind=\\"getRenderContentProps(renderContentProps.block, 0)\\"
></RenderBlock>
<script>
  document.addEventListener(\\"alpine:init\\", () => {
    Alpine.data(\\"renderContent\\", () => ({
      getRenderContentProps(block, index) {
        return {
          block: block,
          index: index,
        };
      },
    }));
  });
</script>
"
`;

exports[`Alpine.js > jsx > Javascript Test > multipleOnUpdate 1`] = `
"unknown: Unexpected token (2:54)

  1 | document.addEventListener('alpine:init', () => {
> 2 |               Alpine.data('multipleOnUpdate', () => ({,
    |                                                       ^
  3 | onUpdate() {
  4 |         console.log('Runs on every update/rerender');
  5 | console.log('Runs on every update/rerender as well');"
`;

exports[`Alpine.js > jsx > Javascript Test > multipleOnUpdateWithDeps 1`] = `
"<div x-data=\\"multipleOnUpdateWithDeps()\\"></div>
<script>
  document.addEventListener(\\"alpine:init\\", () => {
    Alpine.data(\\"multipleOnUpdateWithDeps\\", () => ({
      a: \\"a\\",
      b: \\"b\\",
      c: \\"c\\",
      d: \\"d\\",

      init() {
        this.$watch(\\"a\\", (value, oldValue) => {
          console.log(\\"Runs when a or b changes\\", this.a, this.b);

          if (this.a === \\"a\\") {
            this.a = \\"b\\";
          }
        });
        this.$watch(\\"b\\", (value, oldValue) => {
          console.log(\\"Runs when a or b changes\\", this.a, this.b);

          if (this.a === \\"a\\") {
            this.a = \\"b\\";
          }
        });
        this.$watch(\\"c\\", (value, oldValue) => {
          console.log(\\"Runs when c or d changes\\", this.c, this.d);

          if (this.a === \\"a\\") {
            this.a = \\"b\\";
          }
        });
        this.$watch(\\"d\\", (value, oldValue) => {
          console.log(\\"Runs when c or d changes\\", this.c, this.d);

          if (this.a === \\"a\\") {
            this.a = \\"b\\";
          }
        });
      },
    }));
  });
</script>
"
`;

exports[`Alpine.js > jsx > Javascript Test > multipleSpreads 1`] = `
"<input x-data=\\"myBasicComponent()\\" />
<script>
  document.addEventListener(\\"alpine:init\\", () => {
    Alpine.data(\\"myBasicComponent\\", () => ({
      attrs: {
        hello: \\"world\\",
      },
    }));
  });
</script>
"
`;

exports[`Alpine.js > jsx > Javascript Test > nestedShow 1`] = `
"<template x-if=\\"conditionA\\">
  <div></div>
  <template x-if=\\"!conditionB\\">
    <div></div>
    <div><div></div></div>
    <div></div>
  </template>
  <div></div>
</template>
<script>
  document.addEventListener(\\"alpine:init\\", () => {
    Alpine.data(\\"nestedShow\\", () => ({}));
  });
</script>
"
`;

exports[`Alpine.js > jsx > Javascript Test > nestedStyles 1`] = `
"<style>
  .div {
    display: flex;
    foo: var(--bar);
  }
  @media (max-width: env(--mobile)) {
    .div {
      display: block;
    }
  }
  .div:hover {
    display: flex;
  }
  .div .nested-selector {
    display: grid;
  }
</style>
<div x-data=\\"nestedStyles()\\"><div></div></div>
<script>
  document.addEventListener(\\"alpine:init\\", () => {
    Alpine.data(\\"nestedStyles\\", () => ({}));
  });
</script>
"
`;

exports[`Alpine.js > jsx > Javascript Test > onInit & onMount 1`] = `
"unknown: Unexpected token (2:44)

  1 | document.addEventListener('alpine:init', () => {
> 2 |               Alpine.data('onInit', () => ({, init() {
    |                                             ^
  3 |       
  4 |       console.log('onMount');
  5 |     }}))"
`;

exports[`Alpine.js > jsx > Javascript Test > onInit 1`] = `
"<div x-data=\\"onInit()\\">
  <div></div>
  <div></div>
</div>
<script>
  document.addEventListener(\\"alpine:init\\", () => {
    Alpine.data(\\"onInit\\", () => ({
      name: \\"\\",
    }));
  });
</script>
"
`;

exports[`Alpine.js > jsx > Javascript Test > onMount 1`] = `
"unknown: Unexpected token (2:42)

  1 | document.addEventListener('alpine:init', () => {
> 2 |               Alpine.data('comp', () => ({, init() {
    |                                           ^
  3 |       
  4 |       console.log('Runs on mount');
  5 |     }}))"
`;

exports[`Alpine.js > jsx > Javascript Test > onUpdate 1`] = `
"unknown: Unexpected token (2:46)

  1 | document.addEventListener('alpine:init', () => {
> 2 |               Alpine.data('onUpdate', () => ({,
    |                                               ^
  3 | onUpdate() {
  4 |         console.log('Runs on every update/rerender');
  5 |     }}))"
`;

exports[`Alpine.js > jsx > Javascript Test > onUpdateWithDeps 1`] = `
"<div x-data=\\"onUpdateWithDeps()\\"></div>
<script>
  document.addEventListener(\\"alpine:init\\", () => {
    Alpine.data(\\"onUpdateWithDeps\\", () => ({
      a: \\"a\\",
      b: \\"b\\",

      init() {
        this.$watch(\\"a\\", (value, oldValue) => {
          console.log(
            \\"Runs when a, b or size changes\\",
            this.a,
            this.b,
            props.size
          );
        });
        this.$watch(\\"b\\", (value, oldValue) => {
          console.log(
            \\"Runs when a, b or size changes\\",
            this.a,
            this.b,
            props.size
          );
        });
      },
    }));
  });
</script>
"
`;

exports[`Alpine.js > jsx > Javascript Test > preserveExportOrLocalStatement 1`] = `
"<div x-data=\\"myBasicComponent()\\"></div>
<script>
  document.addEventListener(\\"alpine:init\\", () => {
    Alpine.data(\\"myBasicComponent\\", () => ({}));
  });
</script>
"
`;

exports[`Alpine.js > jsx > Javascript Test > preserveTyping 1`] = `
"<div x-data=\\"myBasicComponent()\\">
  <div></div>
  <div></div>
</div>
<script>
  document.addEventListener(\\"alpine:init\\", () => {
    Alpine.data(\\"myBasicComponent\\", () => ({}));
  });
</script>
"
`;

exports[`Alpine.js > jsx > Javascript Test > propsDestructure 1`] = `
"<div x-data=\\"myBasicComponent()\\">
  <div></div>
  <div></div>
  <div></div>
  <div></div>
  <div></div>
</div>
<script>
  document.addEventListener(\\"alpine:init\\", () => {
    Alpine.data(\\"myBasicComponent\\", () => ({
      name: \\"Decadef20\\",
    }));
  });
</script>
"
`;

exports[`Alpine.js > jsx > Javascript Test > propsInterface 1`] = `
"<div x-data=\\"myBasicComponent()\\">
  <div></div>
  <div></div>
</div>
<script>
  document.addEventListener(\\"alpine:init\\", () => {
    Alpine.data(\\"myBasicComponent\\", () => ({}));
  });
</script>
"
`;

exports[`Alpine.js > jsx > Javascript Test > propsType 1`] = `
"<div x-data=\\"myBasicComponent()\\">
  <div></div>
  <div></div>
</div>
<script>
  document.addEventListener(\\"alpine:init\\", () => {
    Alpine.data(\\"myBasicComponent\\", () => ({}));
  });
</script>
"
`;

exports[`Alpine.js > jsx > Javascript Test > referencingFunInsideHook 1`] = `
"<div x-data=\\"onUpdate()\\" x-effect=\\"onUpdate\\"></div>
<script>
  document.addEventListener(\\"alpine:init\\", () => {
    Alpine.data(\\"onUpdate\\", () => ({
      foo: function foo(params) {},
      bar: function bar() {},
      zoo: function zoo() {
        const params = {
          cb: this.bar,
        };
      },

      onUpdate() {
        foo({
          someOption: bar,
        });
      },
    }));
  });
</script>
"
`;

exports[`Alpine.js > jsx > Javascript Test > renderBlock 1`] = `
"<template x-if=\\"shouldWrap\\">
  <div></div>
  <div></div>
  <template x-if=\\"isEmptyHtmlElement(tag)\\">
    <div></div>
    <state.tag></state.tag>
    <div></div>
  </template>
  <div></div>
  <template x-if=\\"!isEmptyHtmlElement(tag) && repeatItemData\\">
    <div></div>
    <template x-for=\\"data in repeatItemData\\">
      <RenderRepeatedBlock
        x-bind:key=\\"index\\"
        x-bind:repeatContext=\\"data.context\\"
        x-bind:block=\\"data.block\\"
      ></RenderRepeatedBlock>
    </template>
    <div></div>
  </template>
  <div></div>
  <template x-if=\\"!isEmptyHtmlElement(tag) && !repeatItemData\\">
    <div></div>
    <state.tag>
      <div></div>
      <state.renderComponentTag
        x-bind=\\"renderComponentProps\\"
      ></state.renderComponentTag>
      <div></div>
      <div></div>
      <template x-for=\\"child in childrenWithoutParentComponent\\">
        <RenderBlock
          x-bind:key=\\"'render-block-' + child.id\\"
          x-bind:block=\\"child\\"
          x-bind:context=\\"childrenContext\\"
        ></RenderBlock>
      </template>
      <div></div>
      <template x-for=\\"child in childrenWithoutParentComponent\\">
        <BlockStyles
          x-bind:key=\\"'block-style-' + child.id\\"
          x-bind:block=\\"child\\"
          x-bind:context=\\"childrenContext\\"
        ></BlockStyles>
      </template>
      <div></div>
    </state.tag>
    <div></div>
  </template>
  <div></div>
</template>
<script>
  document.addEventListener(\\"alpine:init\\", () => {
    Alpine.data(\\"renderBlock\\", () => ({
      get component() {
        const componentName = getProcessedBlock({
          block: props.block,
          state: props.context.state,
          context: props.context.context,
          shouldEvaluateBindings: false,
        }).component?.name;

        if (!componentName) {
          return null;
        }

        const ref = props.context.registeredComponents[componentName];

        if (!ref) {
          // TODO: Public doc page with more info about this message
          console.warn(\`
          Could not find a registered component named \\"\${componentName}\\". 
          If you registered it, is the file that registered it imported by the file that needs to render it?\`);
          return undefined;
        } else {
          return ref;
        }
      },

      get tag() {
        return getBlockTag(this.useBlock);
      },

      get useBlock() {
        return this.repeatItemData
          ? props.block
          : getProcessedBlock({
              block: props.block,
              state: props.context.state,
              context: props.context.context,
              shouldEvaluateBindings: true,
            });
      },

      get actions() {
        return getBlockActions({
          block: this.useBlock,
          state: props.context.state,
          context: props.context.context,
        });
      },

      get attributes() {
        const blockProperties = getBlockProperties(this.useBlock);
        return {
          ...blockProperties,
          ...(TARGET === \\"reactNative\\"
            ? {
                style: getReactNativeBlockStyles({
                  block: this.useBlock,
                  context: props.context,
                  blockStyles: blockProperties.style,
                }),
              }
            : {}),
        };
      },

      get shouldWrap() {
        return !this.component?.noWrap;
      },

      get renderComponentProps() {
        return {
          blockChildren: this.useChildren,
          componentRef: this.component?.component,
          componentOptions: {
            ...getBlockComponentOptions(this.useBlock),

            /**
             * These attributes are passed to the wrapper element when there is one. If \`noWrap\` is set to true, then
             * they are provided to the component itself directly.
             */
            ...(this.shouldWrap
              ? {}
              : {
                  attributes: { ...this.attributes, ...this.actions },
                }),
            customBreakpoints: this.childrenContext?.content?.meta?.breakpoints,
          },
          context: this.childrenContext,
        };
      },

      get useChildren() {
        // TO-DO: When should \`canHaveChildren\` dictate rendering?
        // This is currently commented out because some Builder components (e.g. Box) do not have \`canHaveChildren: true\`,
        // but still receive and need to render children.
        // return this.componentInfo?.canHaveChildren ? this.useBlock.children : [];
        return this.useBlock.children ?? [];
      },

      get childrenWithoutParentComponent() {
        /**
         * When there is no \`componentRef\`, there might still be children that need to be rendered. In this case,
         * we render them outside of \`componentRef\`.
         * NOTE: We make sure not to render this if \`repeatItemData\` is non-null, because that means we are rendering an array of
         * blocks, and the children will be repeated within those blocks.
         */
        const shouldRenderChildrenOutsideRef =
          !this.component?.component && !this.repeatItemData;
        return shouldRenderChildrenOutsideRef ? this.useChildren : [];
      },

      get repeatItemData() {
        /**
         * we don't use \`this.useBlock\` here because the processing done within its logic includes evaluating the block's bindings,
         * which will not work if there is a repeat.
         */
        const { repeat, ...blockWithoutRepeat } = props.block;

        if (!repeat?.collection) {
          return undefined;
        }

        const itemsArray = evaluate({
          code: repeat.collection,
          state: props.context.state,
          context: props.context.context,
        });

        if (!Array.isArray(itemsArray)) {
          return undefined;
        }

        const collectionName = repeat.collection.split(\\".\\").pop();
        const itemNameToUse =
          repeat.itemName ||
          (collectionName ? collectionName + \\"Item\\" : \\"item\\");
        const repeatArray = itemsArray.map((item, index) => ({
          context: {
            ...props.context,
            state: {
              ...props.context.state,
              $index: index,
              $item: item,
              [itemNameToUse]: item,
              [\`$\${itemNameToUse}Index\`]: index,
            },
          },
          block: blockWithoutRepeat,
        }));
        return repeatArray;
      },

      get inheritedTextStyles() {
        if (TARGET !== \\"reactNative\\") {
          return {};
        }

        const styles = getReactNativeBlockStyles({
          block: this.useBlock,
          context: props.context,
          blockStyles: this.attributes.style,
        });
        return extractTextStyles(styles);
      },

      get childrenContext() {
        return {
          apiKey: props.context.apiKey,
          state: props.context.state,
          content: props.context.content,
          context: props.context.context,
          registeredComponents: props.context.registeredComponents,
          inheritedStyles: this.inheritedTextStyles,
        };
      },

      get renderComponentTag() {
        if (TARGET === \\"reactNative\\") {
          return RenderComponentWithContext;
        } else if (TARGET === \\"vue3\\") {
          // vue3 expects a string for the component tag
          return \\"RenderComponent\\";
        } else {
          return RenderComponent;
        }
      },
    }));
  });
</script>
"
`;

exports[`Alpine.js > jsx > Javascript Test > renderContentExample 1`] = `
"unknown: Unexpected token (2:51)

  1 | document.addEventListener('alpine:init', () => {
> 2 |               Alpine.data('renderContent', () => ({, init() {
    |                                                    ^
  3 |       
  4 |       sendComponentsToVisualEditor(props.customComponents);
  5 |     }}))"
`;

exports[`Alpine.js > jsx > Javascript Test > rootFragmentMultiNode 1`] = `
"<div x-data=\\"button()\\">
  <div></div>
  <template x-if=\\"link\\">
    <div></div>
    <a>
      <div></div>
      <div></div>
      <div></div>
    </a>
    <div></div>
  </template>
  <div></div>
  <template x-if=\\"!link\\">
    <div></div>
    <button>
      <div></div>
      <div></div>
      <div></div>
    </button>
    <div></div>
  </template>
  <div></div>
</div>
<script>
  document.addEventListener(\\"alpine:init\\", () => {
    Alpine.data(\\"button\\", () => ({}));
  });
</script>
"
`;

exports[`Alpine.js > jsx > Javascript Test > rootShow 1`] = `
"<template x-if=\\"foo === 'bar'\\">
  <div></div>
  <div><div></div></div>
  <div></div>
</template>
<script>
  document.addEventListener(\\"alpine:init\\", () => {
    Alpine.data(\\"renderStyles\\", () => ({}));
  });
</script>
"
`;

exports[`Alpine.js > jsx > Javascript Test > self-referencing component 1`] = `
"<div x-data=\\"myComponent()\\">
  <div></div>
  <div></div>
  <div></div>
  <template x-if=\\"name === 'Batman'\\">
    <div></div>
    <MyComponent name=\\"Bruce Wayne\\"></MyComponent>
    <div></div>
  </template>
  <div></div>
</div>
<script>
  document.addEventListener(\\"alpine:init\\", () => {
    Alpine.data(\\"myComponent\\", () => ({}));
  });
</script>
"
`;

exports[`Alpine.js > jsx > Javascript Test > self-referencing component with children 1`] = `
"<div x-data=\\"myComponent()\\">
  <div></div>
  <div></div>
  <div></div>
  <div></div>
  <div></div>
  <template x-if=\\"name === 'Batman'\\">
    <div></div>
    <MyComponent name=\\"Bruce\\">
      <div></div>
      <div><div></div></div>
      <div></div>
    </MyComponent>
    <div></div>
  </template>
  <div></div>
</div>
<script>
  document.addEventListener(\\"alpine:init\\", () => {
    Alpine.data(\\"myComponent\\", () => ({}));
  });
</script>
"
`;

exports[`Alpine.js > jsx > Javascript Test > showWithFor 1`] = `
"<template x-if=\\"conditionA\\">
  <div></div>
  <template x-for=\\"item in items\\">
    <div><div></div></div>
  </template>
  <div></div>
</template>
<script>
  document.addEventListener(\\"alpine:init\\", () => {
    Alpine.data(\\"nestedShow\\", () => ({}));
  });
</script>
"
`;

exports[`Alpine.js > jsx > Javascript Test > spreadAttrs 1`] = `
"<input x-data=\\"myBasicComponent()\\" />
<script>
  document.addEventListener(\\"alpine:init\\", () => {
    Alpine.data(\\"myBasicComponent\\", () => ({}));
  });
</script>
"
`;

exports[`Alpine.js > jsx > Javascript Test > spreadNestedProps 1`] = `
"<input x-data=\\"myBasicComponent()\\" />
<script>
  document.addEventListener(\\"alpine:init\\", () => {
    Alpine.data(\\"myBasicComponent\\", () => ({}));
  });
</script>
"
`;

exports[`Alpine.js > jsx > Javascript Test > spreadProps 1`] = `
"<input x-data=\\"myBasicComponent()\\" />
<script>
  document.addEventListener(\\"alpine:init\\", () => {
    Alpine.data(\\"myBasicComponent\\", () => ({}));
  });
</script>
"
`;

exports[`Alpine.js > jsx > Javascript Test > styleClassAndCss 1`] = `
"<style>
  .div {
    display: flex;
    flex-direction: column;
    align-items: stretch;
  }
</style>
<div x-data=\\"myComponent()\\"></div>
<script>
  document.addEventListener(\\"alpine:init\\", () => {
    Alpine.data(\\"myComponent\\", () => ({}));
  });
</script>
"
`;

exports[`Alpine.js > jsx > Javascript Test > subComponent 1`] = `
"<Foo x-data=\\"subComponent()\\"></Foo>
<script>
  document.addEventListener(\\"alpine:init\\", () => {
    Alpine.data(\\"subComponent\\", () => ({}));
  });
</script>
"
`;

exports[`Alpine.js > jsx > Javascript Test > svgComponent 1`] = `
"<svg x-data=\\"svgComponent()\\" x-bind:viewbox=\\"'0 0 ' + 42 + ' ' + 42\\">
  <div></div>
  <defs>
    <div></div>
    <filter filterunits=\\"userSpaceOnUse\\">
      <div></div>
      <feFlood></feFlood>
      <div></div>
      <feBlend></feBlend>
      <div></div>
      <feGaussianBlur x-bind:stddeviation=\\"7\\"></feGaussianBlur>
      <div></div>
    </filter>
    <div></div>
  </defs>
  <div></div>
</svg>
<script>
  document.addEventListener(\\"alpine:init\\", () => {
    Alpine.data(\\"svgComponent\\", () => ({}));
  });
</script>
"
`;

exports[`Alpine.js > jsx > Javascript Test > typeDependency 1`] = `
"<div x-data=\\"typeDependency()\\"><div></div></div>
<script>
  document.addEventListener(\\"alpine:init\\", () => {
    Alpine.data(\\"typeDependency\\", () => ({}));
  });
</script>
"
`;

exports[`Alpine.js > jsx > Javascript Test > use-style 1`] = `
"<style>
  button {
    background: blue;
    color: white;
    font-size: 12px;
    outline: 1px solid black;
  }
</style>
<button x-data=\\"myComponent()\\"><div></div></button>
<script>
  document.addEventListener(\\"alpine:init\\", () => {
    Alpine.data(\\"myComponent\\", () => ({}));
  });
</script>
"
`;

exports[`Alpine.js > jsx > Javascript Test > use-style-and-css 1`] = `
"<style>
  .button {
    background: blue;
    color: white;
  }

  button {
    font-size: 12px;
    outline: 1px solid black;
  }
</style>
<button x-data=\\"myComponent()\\"><div></div></button>
<script>
  document.addEventListener(\\"alpine:init\\", () => {
    Alpine.data(\\"myComponent\\", () => ({}));
  });
</script>
"
`;

exports[`Alpine.js > jsx > Javascript Test > use-style-outside-component 1`] = `
"<style>
  button {
    background: blue;
    color: white;
    font-size: 12px;
    outline: 1px solid black;
  }
</style>
<button x-data=\\"myComponent()\\"><div></div></button>
<script>
  document.addEventListener(\\"alpine:init\\", () => {
    Alpine.data(\\"myComponent\\", () => ({}));
  });
</script>
"
`;

exports[`Alpine.js > jsx > Remove Internal mitosis package 1`] = `
"<div x-data=\\"myBasicComponent()\\">
  <div></div>
  <div></div>
  <div></div>
</div>
<script>
  document.addEventListener(\\"alpine:init\\", () => {
    Alpine.data(\\"myBasicComponent\\", () => ({
      name: \\"PatrickJS\\",
    }));
  });
</script>
"
`;

exports[`Alpine.js > jsx > Typescript Test > AdvancedRef 1`] = `
"<style>
  .input {
    color: red;
  }
</style>
<div x-data=\\"myBasicRefComponent()\\">
  <div></div>
  <template x-if=\\"showInput\\">
    <div>
      <div></div>
      <input x-on:blur=\\"onBlur()\\" x-on:change=\\"name = $event.target.value\\" />
      <div></div>
      <label><div></div></label>
      <div></div>
      <select name=\\"cars\\">
        <div></div>
        <option><div></div></option>
        <div></div>
        <option><div></div></option>
        <div></div>
      </select>
      <div></div>
    </div>
  </template>
  <div></div>
  <div></div>
  <div></div>
</div>
<script>
  document.addEventListener(\\"alpine:init\\", () => {
    Alpine.data(\\"myBasicRefComponent\\", () => ({
      name: \\"PatrickJS\\",
      onBlur: function onBlur() {
        // Maintain focus
        inputRef.focus();
      },
      lowerCaseName: function lowerCaseName() {
        return this.name.toLowerCase();
      },
    }));
  });
</script>
"
`;

exports[`Alpine.js > jsx > Typescript Test > Basic 1`] = `
"<style>
  .div {
    padding: 10px;
  }
</style>
<div x-data=\\"myBasicComponent()\\">
  <div></div>
  <input x-on:change=\\"name = myEvent.target.value\\" />
  <div></div>
</div>
<script>
  document.addEventListener(\\"alpine:init\\", () => {
    Alpine.data(\\"myBasicComponent\\", () => ({
      name: \\"Steve\\",

      underscore_fn_name() {
        return \\"bar\\";
      },

      age: 1,
      sports: [\\"\\"],
    }));
  });
</script>
"
`;

exports[`Alpine.js > jsx > Typescript Test > Basic 2`] = `
"<div x-data=\\"myBasicForShowComponent()\\">
  <div></div>
  <template x-for=\\"person in names\\">
    <template x-if=\\"person === name\\">
      <div></div>
      <input x-on:change=\\"name = $event.target.value + ' and ' + person\\" />
      <div></div>
      <div></div>
      <div></div>
    </template>
  </template>
  <div></div>
</div>
<script>
  document.addEventListener(\\"alpine:init\\", () => {
    Alpine.data(\\"myBasicForShowComponent\\", () => ({
      name: \\"PatrickJS\\",
      names: [\\"Steve\\", \\"PatrickJS\\"],
    }));
  });
</script>
"
`;

exports[`Alpine.js > jsx > Typescript Test > Basic Context 1`] = `
"<div x-data=\\"myBasicComponent()\\">
  <div></div>
  <div></div>
  <div></div>
  <input x-on:change=\\"onChange\\" />
  <div></div>
</div>
<script>
  document.addEventListener(\\"alpine:init\\", () => {
    Alpine.data(\\"myBasicComponent\\", () => ({
      name: \\"PatrickJS\\",
      onChange: function onChange() {
        const change = myService.method(\\"change\\");
        console.log(change);
      },

      init() {
        const bye = myService.method(\\"hi\\");
        console.log(bye);
      },
    }));
  });
</script>
"
`;

exports[`Alpine.js > jsx > Typescript Test > Basic OnMount Update 1`] = `
"<div x-data=\\"myBasicOnMountUpdateComponent()\\">
  <div></div>
  <div></div>
</div>
<script>
  document.addEventListener(\\"alpine:init\\", () => {
    Alpine.data(\\"myBasicOnMountUpdateComponent\\", () => ({
      name: \\"PatrickJS\\",
      names: [\\"Steve\\", \\"PatrickJS\\"],

      init() {
        this.name = \\"PatrickJS onMount\\" + props.bye;
      },
    }));
  });
</script>
"
`;

exports[`Alpine.js > jsx > Typescript Test > Basic Outputs 1`] = `
"<div x-data=\\"myBasicOutputsComponent()\\"></div>
<script>
  document.addEventListener(\\"alpine:init\\", () => {
    Alpine.data(\\"myBasicOutputsComponent\\", () => ({
      name: \\"PatrickJS\\",

      init() {
        props.onMessage(this.name);
        props.onEvent(props.message);
      },
    }));
  });
</script>
"
`;

exports[`Alpine.js > jsx > Typescript Test > Basic Outputs Meta 1`] = `
"<div x-data=\\"myBasicOutputsComponent()\\"></div>
<script>
  document.addEventListener(\\"alpine:init\\", () => {
    Alpine.data(\\"myBasicOutputsComponent\\", () => ({
      name: \\"PatrickJS\\",

      init() {
        props.onMessage(this.name);
        props.onEvent(props.message);
      },
    }));
  });
</script>
"
`;

exports[`Alpine.js > jsx > Typescript Test > BasicAttribute 1`] = `
"<input x-data=\\"myComponent()\\" />
<script>
  document.addEventListener(\\"alpine:init\\", () => {
    Alpine.data(\\"myComponent\\", () => ({}));
  });
</script>
"
`;

exports[`Alpine.js > jsx > Typescript Test > BasicBooleanAttribute 1`] = `
"<div x-data=\\"myBooleanAttribute()\\">
  <div></div>
  <div></div>
  <div></div>
  <div></div>
  <div></div>
  <MyBooleanAttributeComponent
    x-bind:toggle=\\"true\\"
  ></MyBooleanAttributeComponent>
  <div></div>
  <MyBooleanAttributeComponent
    x-bind:toggle=\\"true\\"
  ></MyBooleanAttributeComponent>
  <div></div>
  <MyBooleanAttributeComponent x-bind:list=\\"null\\"></MyBooleanAttributeComponent>
  <div></div>
</div>
<script>
  document.addEventListener(\\"alpine:init\\", () => {
    Alpine.data(\\"myBooleanAttribute\\", () => ({}));
  });
</script>
"
`;

exports[`Alpine.js > jsx > Typescript Test > BasicChildComponent 1`] = `
"<div x-data=\\"myBasicChildComponent()\\">
  <div></div>
  <MyBasicComponent x-bind:id=\\"dev\\"></MyBasicComponent>
  <div></div>
  <div>
    <div></div>
    <MyBasicOnMountUpdateComponent
      x-bind:hi=\\"name\\"
      x-bind:bye=\\"dev\\"
    ></MyBasicOnMountUpdateComponent>
    <div></div>
  </div>
  <div></div>
</div>
<script>
  document.addEventListener(\\"alpine:init\\", () => {
    Alpine.data(\\"myBasicChildComponent\\", () => ({
      name: \\"Steve\\",
      dev: \\"PatrickJS\\",
    }));
  });
</script>
"
`;

exports[`Alpine.js > jsx > Typescript Test > BasicFor 1`] = `
"<div x-data=\\"myBasicForComponent()\\">
  <div></div>
  <template x-for=\\"person in names\\">
    <div>
      <div></div>
      <input x-on:change=\\"name = $event.target.value + ' and ' + person\\" />
      <div></div>
      <div></div>
      <div></div>
    </div>
  </template>
  <div></div>
</div>
<script>
  document.addEventListener(\\"alpine:init\\", () => {
    Alpine.data(\\"myBasicForComponent\\", () => ({
      name: \\"PatrickJS\\",
      names: [\\"Steve\\", \\"PatrickJS\\"],

      init() {
        console.log(\\"onMount code\\");
      },
    }));
  });
</script>
"
`;

exports[`Alpine.js > jsx > Typescript Test > BasicRef 1`] = `
"<style>
  .input {
    color: red;
  }
</style>
<div x-data=\\"myBasicRefComponent()\\">
  <div></div>
  <template x-if=\\"showInput\\">
    <div>
      <div></div>
      <input x-on:blur=\\"onBlur()\\" x-on:change=\\"name = $event.target.value\\" />
      <div></div>
      <label><div></div></label>
      <div></div>
      <select name=\\"cars\\">
        <div></div>
        <option><div></div></option>
        <div></div>
        <option><div></div></option>
        <div></div>
      </select>
      <div></div>
    </div>
  </template>
  <div></div>
  <div></div>
  <div></div>
</div>
<script>
  document.addEventListener(\\"alpine:init\\", () => {
    Alpine.data(\\"myBasicRefComponent\\", () => ({
      name: \\"PatrickJS\\",
      onBlur: function onBlur() {
        // Maintain focus
        inputRef.focus();
      },
      lowerCaseName: function lowerCaseName() {
        return this.name.toLowerCase();
      },
    }));
  });
</script>
"
`;

exports[`Alpine.js > jsx > Typescript Test > BasicRefAssignment 1`] = `
"<div x-data=\\"myBasicRefAssignmentComponent()\\">
  <div></div>
  <button x-on:click=\\"handlerClick(evt)\\"><div></div></button>
  <div></div>
</div>
<script>
  document.addEventListener(\\"alpine:init\\", () => {
    Alpine.data(\\"myBasicRefAssignmentComponent\\", () => ({
      handlerClick: function handlerClick(event) {
        event.preventDefault();
        console.log(\\"current value\\", holdValueRef);
        holdValueRef = holdValueRef + \\"JS\\";
      },
    }));
  });
</script>
"
`;

exports[`Alpine.js > jsx > Typescript Test > BasicRefPrevious 1`] = `
"<div x-data=\\"myPreviousComponent()\\">
  <div></div>
  <h1>
    <div></div>
    <div></div>
    <div></div>
    <div></div>
    <div></div>
  </h1>
  <div></div>
  <button x-on:click=\\"count += 1\\"><div></div></button>
  <div></div>
</div>
<script>
  document.addEventListener(\\"alpine:init\\", () => {
    Alpine.data(\\"myPreviousComponent\\", () => ({
      count: 0,

      init() {
        this.$watch(\\"count\\", (value, oldValue) => {
          prevCount = this.count;
        });
      },
    }));
  });
</script>
"
`;

exports[`Alpine.js > jsx > Typescript Test > Button 1`] = `
"<div x-data=\\"button()\\">
  <div></div>
  <template x-if=\\"link\\">
    <div></div>
    <a>
      <div></div>
      <div></div>
      <div></div>
    </a>
    <div></div>
  </template>
  <div></div>
  <template x-if=\\"!link\\">
    <div></div>
    <button>
      <div></div>
      <div></div>
      <div></div>
    </button>
    <div></div>
  </template>
  <div></div>
</div>
<script>
  document.addEventListener(\\"alpine:init\\", () => {
    Alpine.data(\\"button\\", () => ({}));
  });
</script>
"
`;

exports[`Alpine.js > jsx > Typescript Test > Columns 1`] = `
"<style>
  .div {
    display: flex;
    flex-direction: column;
    align-items: stretch;
    line-height: normal;
  }
  @media (max-width: 999px) {
    .div {
      flex-direction: row;
    }
  }
  @media (max-width: 639px) {
    .div {
      flex-direction: row-reverse;
    }
  }
  .div-2 {
    flex-grow: 1;
  }
</style>
<div x-data=\\"column()\\">
  <div></div>
  <template x-for=\\"column in columns\\">
    <div>
      <div></div>
      <div></div>
      <div></div>
      <div></div>
      <div></div>
    </div>
  </template>
  <div></div>
</div>
<script>
  document.addEventListener(\\"alpine:init\\", () => {
    Alpine.data(\\"column\\", () => ({
      getColumns() {
        return props.columns || [];
      },

      getGutterSize() {
        return typeof props.space === \\"number\\" ? props.space || 0 : 20;
      },

      getWidth(index) {
        const columns = this.getColumns();
        return (columns[index] && columns[index].width) || 100 / columns.length;
      },

      getColumnCssWidth(index) {
        const columns = this.getColumns();
        const gutterSize = this.getGutterSize();
        const subtractWidth =
          (gutterSize * (columns.length - 1)) / columns.length;
        return \`calc(\${this.getWidth(index)}% - \${subtractWidth}px)\`;
      },
    }));
  });
</script>
"
`;

exports[`Alpine.js > jsx > Typescript Test > ContentSlotHtml 1`] = `
"<div x-data=\\"contentSlotCode()\\">
  <div></div>
  <slot x-bind:name=\\"slotTesting\\"></slot>
  <div></div>
  <div>
    <div></div>
    <hr />
    <div></div>
  </div>
  <div></div>
  <div>
    <div></div>
    <slot></slot>
    <div></div>
  </div>
  <div></div>
</div>
<script>
  document.addEventListener(\\"alpine:init\\", () => {
    Alpine.data(\\"contentSlotCode\\", () => ({}));
  });
</script>
"
`;

exports[`Alpine.js > jsx > Typescript Test > ContentSlotJSX 1`] = `
"<template x-if=\\"slotReference\\">
  <div></div>
  <div x-bind:name=\\"slotContent ? 'name1' : 'name2'\\" x-on:click=\\"show()\\">
    <div></div>
    <template x-if=\\"showContent && slotContent\\">
      <div></div>
      <slot name=\\"content\\"><div></div></slot>
      <div></div>
    </template>
    <div></div>
    <div>
      <div></div>
      <hr />
      <div></div>
    </div>
    <div></div>
    <div><div></div></div>
    <div></div>
  </div>
  <div></div>
</template>
<script>
  document.addEventListener(\\"alpine:init\\", () => {
    Alpine.data(\\"contentSlotJsxCode\\", () => ({
      name: \\"king\\",
      showContent: false,

      get cls() {
        return props.slotContent && props.children
          ? \`\${this.name}-content\`
          : \\"\\";
      },

      show() {
        props.slotContent ? 1 : \\"\\";
      },
    }));
  });
</script>
"
`;

exports[`Alpine.js > jsx > Typescript Test > CustomCode 1`] = `
"<div x-data=\\"customCode()\\" x-bind:innerhtml=\\"code\\"></div>
<script>
  document.addEventListener(\\"alpine:init\\", () => {
    Alpine.data(\\"customCode\\", () => ({
      scriptsInserted: [],
      scriptsRun: [],

      findAndRunScripts() {
        // TODO: Move this function to standalone one in '@builder.io/utils'
        if (elem && typeof window !== \\"undefined\\") {
          /** @type {HTMLScriptElement[]} */
          const scripts = elem.getElementsByTagName(\\"script\\");

          for (let i = 0; i < scripts.length; i++) {
            const script = scripts[i];

            if (script.src) {
              if (this.scriptsInserted.includes(script.src)) {
                continue;
              }

              this.scriptsInserted.push(script.src);
              const newScript = document.createElement(\\"script\\");
              newScript.async = true;
              newScript.src = script.src;
              document.head.appendChild(newScript);
            } else if (
              !script.type ||
              [
                \\"text/javascript\\",
                \\"application/javascript\\",
                \\"application/ecmascript\\",
              ].includes(script.type)
            ) {
              if (this.scriptsRun.includes(script.innerText)) {
                continue;
              }

              try {
                this.scriptsRun.push(script.innerText);
                new Function(script.innerText)();
              } catch (error) {
                console.warn(\\"\`CustomCode\`: Error running script:\\", error);
              }
            }
          }
        }
      },

      init() {
        this.findAndRunScripts();
      },
    }));
  });
</script>
"
`;

exports[`Alpine.js > jsx > Typescript Test > Embed 1`] = `
"<div x-data=\\"customCode()\\" x-bind:innerhtml=\\"code\\"></div>
<script>
  document.addEventListener(\\"alpine:init\\", () => {
    Alpine.data(\\"customCode\\", () => ({
      scriptsInserted: [],
      scriptsRun: [],

      findAndRunScripts() {
        // TODO: Move this function to standalone one in '@builder.io/utils'
        if (elem && typeof window !== \\"undefined\\") {
          /** @type {HTMLScriptElement[]} */
          const scripts = elem.getElementsByTagName(\\"script\\");

          for (let i = 0; i < scripts.length; i++) {
            const script = scripts[i];

            if (script.src) {
              if (this.scriptsInserted.includes(script.src)) {
                continue;
              }

              this.scriptsInserted.push(script.src);
              const newScript = document.createElement(\\"script\\");
              newScript.async = true;
              newScript.src = script.src;
              document.head.appendChild(newScript);
            } else if (
              !script.type ||
              [
                \\"text/javascript\\",
                \\"application/javascript\\",
                \\"application/ecmascript\\",
              ].includes(script.type)
            ) {
              if (this.scriptsRun.includes(script.innerText)) {
                continue;
              }

              try {
                this.scriptsRun.push(script.innerText);
                new Function(script.innerText)();
              } catch (error) {
                console.warn(\\"\`CustomCode\`: Error running script:\\", error);
              }
            }
          }
        }
      },

      init() {
        this.findAndRunScripts();
      },
    }));
  });
</script>
"
`;

exports[`Alpine.js > jsx > Typescript Test > Form 1`] = `
"<style>
  .pre {
    padding: 10px;
    color: red;
    text-align: center;
  }
</style>
<form
  x-data=\\"formComponent()\\"
  x-bind:name=\\"name\\"
  x-on:submit=\\"onSubmit($event)\\"
>
  <div></div>
  <template x-if=\\"builderBlock && builderBlock.children\\">
    <div></div>
    <template x-for=\\"block in builderBlock?.children\\">
      <BuilderBlockComponent
        x-bind:key=\\"block.id\\"
        x-bind:block=\\"block\\"
        x-bind:index=\\"index\\"
      ></BuilderBlockComponent>
    </template>
    <div></div>
  </template>
  <div></div>
  <template x-if=\\"submissionState === 'error'\\">
    <div></div>
    <BuilderBlocks
      dataPath=\\"errorMessage\\"
      x-bind:blocks=\\"errorMessage\\"
    ></BuilderBlocks>
    <div></div>
  </template>
  <div></div>
  <template x-if=\\"submissionState === 'sending'\\">
    <div></div>
    <BuilderBlocks
      dataPath=\\"sendingMessage\\"
      x-bind:blocks=\\"sendingMessage\\"
    ></BuilderBlocks>
    <div></div>
  </template>
  <div></div>
  <template x-if=\\"submissionState === 'error' && responseData\\">
    <div></div>
    <pre><div ></div>
<div ></div>
<div ></div></pre>
    <div></div>
  </template>
  <div></div>
  <template x-if=\\"submissionState === 'success'\\">
    <div></div>
    <BuilderBlocks
      dataPath=\\"successMessage\\"
      x-bind:blocks=\\"successMessage\\"
    ></BuilderBlocks>
    <div></div>
  </template>
  <div></div>
</form>
<script>
  document.addEventListener(\\"alpine:init\\", () => {
    Alpine.data(\\"formComponent\\", () => ({
      formState: \\"unsubmitted\\",
      responseData: null,
      formErrorMessage: \\"\\",

      get submissionState() {
        return (Builder.isEditing && props.previewState) || this.formState;
      },

      onSubmit(event) {
        const sendWithJs =
          props.sendWithJs || props.sendSubmissionsTo === \\"email\\";

        if (props.sendSubmissionsTo === \\"zapier\\") {
          event.preventDefault();
        } else if (sendWithJs) {
          if (!(props.action || props.sendSubmissionsTo === \\"email\\")) {
            event.preventDefault();
            return;
          }

          event.preventDefault();
          const el = event.currentTarget;
          const headers = props.customHeaders || {};
          let body;
          const formData = new FormData(el); // TODO: maybe support null

          const formPairs = Array.from(
            event.currentTarget.querySelectorAll(\\"input,select,textarea\\")
          )
            .filter((el) => !!el.name)
            .map((el) => {
              let value;
              const key = el.name;

              if (el instanceof HTMLInputElement) {
                if (el.type === \\"radio\\") {
                  if (el.checked) {
                    value = el.name;
                    return {
                      key,
                      value,
                    };
                  }
                } else if (el.type === \\"checkbox\\") {
                  value = el.checked;
                } else if (el.type === \\"number\\" || el.type === \\"range\\") {
                  const num = el.valueAsNumber;

                  if (!isNaN(num)) {
                    value = num;
                  }
                } else if (el.type === \\"file\\") {
                  // TODO: one vs multiple files
                  value = el.files;
                } else {
                  value = el.value;
                }
              } else {
                value = el.value;
              }

              return {
                key,
                value,
              };
            });
          let contentType = props.contentType;

          if (props.sendSubmissionsTo === \\"email\\") {
            contentType = \\"multipart/form-data\\";
          }

          Array.from(formPairs).forEach(({ value }) => {
            if (
              value instanceof File ||
              (Array.isArray(value) && value[0] instanceof File) ||
              value instanceof FileList
            ) {
              contentType = \\"multipart/form-data\\";
            }
          }); // TODO: send as urlEncoded or multipart by default
          // because of ease of use and reliability in browser API
          // for encoding the form?

          if (contentType !== \\"application/json\\") {
            body = formData;
          } else {
            // Json
            const json = {};
            Array.from(formPairs).forEach(({ value, key }) => {
              set(json, key, value);
            });
            body = JSON.stringify(json);
          }

          if (contentType && contentType !== \\"multipart/form-data\\") {
            if (
              /* Zapier doesn't allow content-type header to be sent from browsers */
              !(sendWithJs && props.action?.includes(\\"zapier.com\\"))
            ) {
              headers[\\"content-type\\"] = contentType;
            }
          }

          const presubmitEvent = new CustomEvent(\\"presubmit\\", {
            detail: {
              body,
            },
          });

          if (formRef) {
            formRef.dispatchEvent(presubmitEvent);

            if (presubmitEvent.defaultPrevented) {
              return;
            }
          }

          this.formState = \\"sending\\";
          const formUrl = \`\${
            builder.env === \\"dev\\"
              ? \\"http://localhost:5000\\"
              : \\"https://builder.io\\"
          }/api/v1/form-submit?apiKey=\${builder.apiKey}&to=\${btoa(
            props.sendSubmissionsToEmail || \\"\\"
          )}&name=\${encodeURIComponent(props.name || \\"\\")}\`;
          fetch(
            props.sendSubmissionsTo === \\"email\\" ? formUrl : props.action,
            /* TODO: throw error if no action URL */
            {
              body,
              headers,
              method: props.method || \\"post\\",
            }
          ).then(
            async (res) => {
              let body;
              const contentType = res.headers.get(\\"content-type\\");

              if (
                contentType &&
                contentType.indexOf(\\"application/json\\") !== -1
              ) {
                body = await res.json();
              } else {
                body = await res.text();
              }

              if (!res.ok && props.errorMessagePath) {
                /* TODO: allow supplying an error formatter function */
                let message = get(body, props.errorMessagePath);

                if (message) {
                  if (typeof message !== \\"string\\") {
                    /* TODO: ideally convert json to yaml so it woul dbe like
                 error: - email has been taken */
                    message = JSON.stringify(message);
                  }

                  this.formErrorMessage = message;
                }
              }

              this.responseData = body;
              this.formState = res.ok ? \\"success\\" : \\"error\\";

              if (res.ok) {
                const submitSuccessEvent = new CustomEvent(\\"submit:success\\", {
                  detail: {
                    res,
                    body,
                  },
                });

                if (formRef) {
                  formRef.dispatchEvent(submitSuccessEvent);

                  if (submitSuccessEvent.defaultPrevented) {
                    return;
                  }
                  /* TODO: option to turn this on/off? */

                  if (props.resetFormOnSubmit !== false) {
                    formRef.reset();
                  }
                }
                /* TODO: client side route event first that can be preventDefaulted */

                if (props.successUrl) {
                  if (formRef) {
                    const event = new CustomEvent(\\"route\\", {
                      detail: {
                        url: props.successUrl,
                      },
                    });
                    formRef.dispatchEvent(event);

                    if (!event.defaultPrevented) {
                      location.href = props.successUrl;
                    }
                  } else {
                    location.href = props.successUrl;
                  }
                }
              }
            },
            (err) => {
              const submitErrorEvent = new CustomEvent(\\"submit:error\\", {
                detail: {
                  error: err,
                },
              });

              if (formRef) {
                formRef.dispatchEvent(submitErrorEvent);

                if (submitErrorEvent.defaultPrevented) {
                  return;
                }
              }

              this.responseData = err;
              this.formState = \\"error\\";
            }
          );
        }
      },
    }));
  });
</script>
"
`;

exports[`Alpine.js > jsx > Typescript Test > Image 1`] = `
"<style>
  .img {
    opacity: 1;
    transition: opacity 0.2s ease-in-out;
    object-fit: cover;
    object-position: center;
  }
</style>
<div x-data=\\"image()\\">
  <div></div>
  <picture>
    <div></div>
    <template x-if=\\"!useLazyLoading() || load\\">
      <div></div>
      <img
        x-bind:aria-role=\\"altText ? 'presentation' : undefined\\"
        x-on:load=\\"setLoaded()\\"
      />
      <div></div>
    </template>
    <div></div>
    <source />
    <div></div>
  </picture>
  <div></div>
  <div></div>
  <div></div>
</div>
<script>
  document.addEventListener(\\"alpine:init\\", () => {
    Alpine.data(\\"image\\", () => ({
      scrollListener: null,
      imageLoaded: false,

      setLoaded() {
        this.imageLoaded = true;
      },

      useLazyLoading() {
        // TODO: Add more checks here, like testing for real web browsers
        return !!props.lazy && isBrowser();
      },

      isBrowser: function isBrowser() {
        return (
          typeof window !== \\"undefined\\" &&
          window.navigator.product != \\"ReactNative\\"
        );
      },
      load: false,

      init() {
        if (this.useLazyLoading()) {
          // throttled scroll capture listener
          const listener = () => {
            if (pictureRef) {
              const rect = pictureRef.getBoundingClientRect();
              const buffer = window.innerHeight / 2;

              if (rect.top < window.innerHeight + buffer) {
                setLoad(true);
                this.scrollListener = null;
                window.removeEventListener(\\"scroll\\", listener);
              }
            }
          };

          this.scrollListener = listener;
          window.addEventListener(\\"scroll\\", listener, {
            capture: true,
            passive: true,
          });
          listener();
        }
      },
    }));
  });
</script>
"
`;

exports[`Alpine.js > jsx > Typescript Test > Image State 1`] = `
"<div x-data=\\"imgStateComponent()\\">
  <div></div>
  <template x-for=\\"item in images\\">
    <div>
      <div></div>
      <img />
      <div></div>
    </div>
  </template>
  <div></div>
</div>
<script>
  document.addEventListener(\\"alpine:init\\", () => {
    Alpine.data(\\"imgStateComponent\\", () => ({
      canShow: true,
      images: [\\"http://example.com/qwik.png\\"],
    }));
  });
</script>
"
`;

exports[`Alpine.js > jsx > Typescript Test > Img 1`] = `
"<img x-data=\\"imgComponent()\\" />
<script>
  document.addEventListener(\\"alpine:init\\", () => {
    Alpine.data(\\"imgComponent\\", () => ({}));
  });
</script>
"
`;

exports[`Alpine.js > jsx > Typescript Test > Input 1`] = `
"<input
  x-data=\\"formInputComponent()\\"
  x-bind:name=\\"name\\"
  x-bind:defaultvalue=\\"defaultValue\\"
/>
<script>
  document.addEventListener(\\"alpine:init\\", () => {
    Alpine.data(\\"formInputComponent\\", () => ({}));
  });
</script>
"
`;

exports[`Alpine.js > jsx > Typescript Test > RawText 1`] = `
"<span x-data=\\"rawText()\\" x-bind:innerhtml=\\"text || ''\\"></span>
<script>
  document.addEventListener(\\"alpine:init\\", () => {
    Alpine.data(\\"rawText\\", () => ({}));
  });
</script>
"
`;

exports[`Alpine.js > jsx > Typescript Test > Section 1`] = `
"<section x-data=\\"sectionComponent()\\">
  <div></div>
  <div></div>
  <div></div>
</section>
<script>
  document.addEventListener(\\"alpine:init\\", () => {
    Alpine.data(\\"sectionComponent\\", () => ({}));
  });
</script>
"
`;

exports[`Alpine.js > jsx > Typescript Test > Section 2`] = `
"<template x-if=\\"max\\">
  <div></div>
  <template x-for=\\"item in items\\">
    <section>
      <div></div>
      <div></div>
      <div></div>
    </section>
  </template>
  <div></div>
</template>
<script>
  document.addEventListener(\\"alpine:init\\", () => {
    Alpine.data(\\"sectionStateComponent\\", () => ({
      max: 42,
      items: [42],
    }));
  });
</script>
"
`;

exports[`Alpine.js > jsx > Typescript Test > Select 1`] = `
"<select
  x-data=\\"selectComponent()\\"
  x-bind:name=\\"name\\"
  x-bind:defaultvalue=\\"defaultValue\\"
>
  <div></div>
  <template x-for=\\"option in options\\">
    <option x-bind:data-index=\\"index\\">
      <div></div>
      <div></div>
      <div></div>
    </option>
  </template>
  <div></div>
</select>
<script>
  document.addEventListener(\\"alpine:init\\", () => {
    Alpine.data(\\"selectComponent\\", () => ({}));
  });
</script>
"
`;

exports[`Alpine.js > jsx > Typescript Test > SlotDefault 1`] = `
"<div x-data=\\"slotCode()\\">
  <div></div>
  <slot>
    <div></div>
    <div><div></div></div>
    <div></div>
  </slot>
  <div></div>
</div>
<script>
  document.addEventListener(\\"alpine:init\\", () => {
    Alpine.data(\\"slotCode\\", () => ({}));
  });
</script>
"
`;

exports[`Alpine.js > jsx > Typescript Test > SlotHtml 1`] = `
"<div x-data=\\"slotCode()\\">
  <div></div>
  <ContentSlotCode>
    <div></div>
    <slot x-bind:testing=\\"<div>Hello</div>\\"></slot>
    <div></div>
  </ContentSlotCode>
  <div></div>
</div>
<script>
  document.addEventListener(\\"alpine:init\\", () => {
    Alpine.data(\\"slotCode\\", () => ({}));
  });
</script>
"
`;

exports[`Alpine.js > jsx > Typescript Test > SlotJsx 1`] = `
"<div x-data=\\"slotCode()\\">
  <div></div>
  <ContentSlotCode x-bind:slotTesting=\\"<div>Hello</div>\\"></ContentSlotCode>
  <div></div>
</div>
<script>
  document.addEventListener(\\"alpine:init\\", () => {
    Alpine.data(\\"slotCode\\", () => ({}));
  });
</script>
"
`;

exports[`Alpine.js > jsx > Typescript Test > SlotNamed 1`] = `
"<div x-data=\\"slotCode()\\">
  <div></div>
  <slot name=\\"top\\"></slot>
  <div></div>
  <slot name=\\"left\\"><div></div></slot>
  <div></div>
  <slot><div></div></slot>
  <div></div>
</div>
<script>
  document.addEventListener(\\"alpine:init\\", () => {
    Alpine.data(\\"slotCode\\", () => ({}));
  });
</script>
"
`;

exports[`Alpine.js > jsx > Typescript Test > Stamped.io 1`] = `
"<style>
  .input {
    display: block;
  }
  .textarea {
    display: block;
  }
  .button {
    display: block;
  }
  .review {
    margin: 10px;
    padding: 10px;
    background: white;
    display: flex;
    border-radius: 5px;
    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
  }
  .img {
    height: 30px;
    width: 30px;
    margin-right: 10px;
  }
</style>
<div x-data=\\"smileReviews()\\" x-bind:data-user=\\"name\\">
  <div></div>
  <button x-on:click=\\"showReviewPrompt = true\\"><div></div></button>
  <div></div>
  <template x-if=\\"showReviewPrompt || 'asdf'\\">
    <div></div>
    <input />
    <div></div>
    <input />
    <div></div>
    <textarea></textarea>
    <div></div>
    <button
      x-on:click=\\"$event.preventDefault();
showReviewPrompt = false\\"
    >
      <div></div>
    </button>
    <div></div>
  </template>
  <div></div>
  <template x-for=\\"review in reviews\\">
    <div>
      <div></div>
      <img />
      <div></div>
      <div>
        <div></div>
        <div>
          <div></div>
          <div></div>
        </div>
        <div></div>
        <div><div></div></div>
        <div></div>
        <div><div></div></div>
        <div></div>
      </div>
      <div></div>
    </div>
  </template>
  <div></div>
</div>
<script>
  document.addEventListener(\\"alpine:init\\", () => {
    Alpine.data(\\"smileReviews\\", () => ({
      reviews: [],
      name: \\"test\\",
      showReviewPrompt: false,

      kebabCaseValue() {
        return kebabCase(\\"testThat\\");
      },

      snakeCaseValue() {
        return snakeCase(\\"testThis\\");
      },

      init() {
        fetch(
          \`https://stamped.io/api/widget/reviews?storeUrl=builder-io.myshopify.com&apiKey=\${
            props.apiKey || \\"pubkey-8bbDq7W6w4sB3OWeM1HUy2s47702hM\\"
          }&productId=\${props.productId || \\"2410511106127\\"}\`
        )
          .then((res) => res.json())
          .then((data) => {
            this.reviews = data.data;
          });
      },
    }));
  });
</script>
"
`;

exports[`Alpine.js > jsx > Typescript Test > Submit 1`] = `
"<button x-data=\\"submitButton()\\">
  <div></div>
  <div></div>
  <div></div>
</button>
<script>
  document.addEventListener(\\"alpine:init\\", () => {
    Alpine.data(\\"submitButton\\", () => ({}));
  });
</script>
"
`;

exports[`Alpine.js > jsx > Typescript Test > Text 1`] = `
"<div  x-data=\\"text()\\"  x-bind:data-name=\\"{
  test: name || 'any name'
}\\"  x-bind:contenteditable=\\"allowEditingText || undefined\\"  x-bind:innerhtml=\\"text || content || name || '<p class=\\"text-lg\\">my name</p>'\\" ></div><script>
          document.addEventListener('alpine:init', () => {
  Alpine.data('text', () => ({
    name: 'Decadef20'
  }));
});
        </script>"
`;

exports[`Alpine.js > jsx > Typescript Test > Textarea 1`] = `
"<textarea
  x-data=\\"textarea()\\"
  x-bind:name=\\"name\\"
  x-bind:defaultvalue=\\"defaultValue\\"
></textarea>
<script>
  document.addEventListener(\\"alpine:init\\", () => {
    Alpine.data(\\"textarea\\", () => ({}));
  });
</script>
"
`;

exports[`Alpine.js > jsx > Typescript Test > Video 1`] = `
"<video x-data=\\"video()\\"></video>
<script>
  document.addEventListener(\\"alpine:init\\", () => {
    Alpine.data(\\"video\\", () => ({}));
  });
</script>
"
`;

exports[`Alpine.js > jsx > Typescript Test > arrowFunctionInUseStore 1`] = `
"<div x-data=\\"myComponent()\\">
  <div></div>
  <div></div>
</div>
<script>
  document.addEventListener(\\"alpine:init\\", () => {
    Alpine.data(\\"myComponent\\", () => ({
      name: \\"steve\\",

      setName(value) {
        this.name = value;
      },

      updateNameWithArrowFn(value) {
        this.name = value;
      },
    }));
  });
</script>
"
`;

exports[`Alpine.js > jsx > Typescript Test > basicForwardRef 1`] = `
"<style>
  .input {
    color: red;
  }
</style>
<div x-data=\\"myBasicForwardRefComponent()\\">
  <div></div>
  <input x-on:change=\\"name = $event.target.value\\" />
  <div></div>
</div>
<script>
  document.addEventListener(\\"alpine:init\\", () => {
    Alpine.data(\\"myBasicForwardRefComponent\\", () => ({
      name: \\"PatrickJS\\",
    }));
  });
</script>
"
`;

exports[`Alpine.js > jsx > Typescript Test > basicForwardRefMetadata 1`] = `
"<style>
  .input {
    color: red;
  }
</style>
<div x-data=\\"myBasicForwardRefComponent()\\">
  <div></div>
  <input x-on:change=\\"name = $event.target.value\\" />
  <div></div>
</div>
<script>
  document.addEventListener(\\"alpine:init\\", () => {
    Alpine.data(\\"myBasicForwardRefComponent\\", () => ({
      name: \\"PatrickJS\\",
    }));
  });
</script>
"
`;

exports[`Alpine.js > jsx > Typescript Test > basicOnUpdateReturn 1`] = `
"<div x-data=\\"myBasicOnUpdateReturnComponent()\\">
  <div></div>
  <div></div>
</div>
<script>
  document.addEventListener(\\"alpine:init\\", () => {
    Alpine.data(\\"myBasicOnUpdateReturnComponent\\", () => ({
      name: \\"PatrickJS\\",

      init() {
        this.$watch(\\"name\\", (value, oldValue) => {
          const controller = new AbortController();
          const signal = controller.signal;
          fetch(\\"https://patrickjs.com/api/resource.json\\", {
            signal,
          })
            .then((response) => response.json())
            .then((data) => {
              this.name = data.name;
            });
          return () => {
            if (!signal.aborted) {
              controller.abort();
            }
          };
        });
      },
    }));
  });
</script>
"
`;

exports[`Alpine.js > jsx > Typescript Test > camelCasedAttributes 1`] = `
"<div x-data=\\"myComponent()\\">
  <div></div>
  <img srcset=\\"http://example.com\\" />
  <div></div>
</div>
<script>
  document.addEventListener(\\"alpine:init\\", () => {
    Alpine.data(\\"myComponent\\", () => ({
      name: \\"Steve\\",
    }));
  });
</script>
"
`;

exports[`Alpine.js > jsx > Typescript Test > class + ClassName + css 1`] = `
"<style>
  .div {
    padding: 10px;
  }
</style>
<div x-data=\\"myBasicComponent()\\"><div></div></div>
<script>
  document.addEventListener(\\"alpine:init\\", () => {
    Alpine.data(\\"myBasicComponent\\", () => ({}));
  });
</script>
"
`;

exports[`Alpine.js > jsx > Typescript Test > class + css 1`] = `
"<style>
  .div {
    padding: 10px;
  }
</style>
<div x-data=\\"myBasicComponent()\\"><div></div></div>
<script>
  document.addEventListener(\\"alpine:init\\", () => {
    Alpine.data(\\"myBasicComponent\\", () => ({}));
  });
</script>
"
`;

exports[`Alpine.js > jsx > Typescript Test > className + css 1`] = `
"<style>
  .div {
    padding: 10px;
  }
</style>
<div x-data=\\"myBasicComponent()\\"><div></div></div>
<script>
  document.addEventListener(\\"alpine:init\\", () => {
    Alpine.data(\\"myBasicComponent\\", () => ({}));
  });
</script>
"
`;

exports[`Alpine.js > jsx > Typescript Test > className 1`] = `
"<div x-data=\\"classNameCode()\\">
  <div></div>
  <div></div>
  <div><div></div></div>
  <div></div>
  <div></div>
  <div><div></div></div>
  <div></div>
</div>
<script>
  document.addEventListener(\\"alpine:init\\", () => {
    Alpine.data(\\"classNameCode\\", () => ({
      bindings: \\"a binding\\",
    }));
  });
</script>
"
`;

exports[`Alpine.js > jsx > Typescript Test > classState 1`] = `
"<style>
  .div {
    padding: 10px;
  }
</style>
<div x-data=\\"myBasicComponent()\\"><div></div></div>
<script>
  document.addEventListener(\\"alpine:init\\", () => {
    Alpine.data(\\"myBasicComponent\\", () => ({
      classState: \\"testClassName\\",
      styleState: {
        color: \\"red\\",
      },
    }));
  });
</script>
"
`;

exports[`Alpine.js > jsx > Typescript Test > componentWithContext 1`] = `
"<div x-data=\\"componentWithContext()\\">
  <div></div>
  <div><div></div></div>
  <div></div>
</div>
<script>
  document.addEventListener(\\"alpine:init\\", () => {
    Alpine.data(\\"componentWithContext\\", () => ({}));
  });
</script>
"
`;

exports[`Alpine.js > jsx > Typescript Test > componentWithContextMultiRoot 1`] = `
"<div x-data=\\"componentWithContext()\\">
  <div></div>
  <div><div></div></div>
  <div></div>
  <div><div></div></div>
  <div></div>
</div>
<script>
  document.addEventListener(\\"alpine:init\\", () => {
    Alpine.data(\\"componentWithContext\\", () => ({}));
  });
</script>
"
`;

exports[`Alpine.js > jsx > Typescript Test > contentState 1`] = `
"<div x-data=\\"renderContent()\\"><div></div></div>
<script>
  document.addEventListener(\\"alpine:init\\", () => {
    Alpine.data(\\"renderContent\\", () => ({}));
  });
</script>
"
`;

exports[`Alpine.js > jsx > Typescript Test > defaultProps 1`] = `
"<div x-data=\\"button()\\">
  <div></div>
  <template x-if=\\"link\\">
    <div></div>
    <a>
      <div></div>
      <div></div>
      <div></div>
    </a>
    <div></div>
  </template>
  <div></div>
  <template x-if=\\"!link\\">
    <div></div>
    <button x-on:click=\\"onClick($event)\\">
      <div></div>
      <div></div>
      <div></div>
    </button>
    <div></div>
  </template>
  <div></div>
</div>
<script>
  document.addEventListener(\\"alpine:init\\", () => {
    Alpine.data(\\"button\\", () => ({}));
  });
</script>
"
`;

exports[`Alpine.js > jsx > Typescript Test > defaultPropsOutsideComponent 1`] = `
"<div x-data=\\"button()\\">
  <div></div>
  <template x-if=\\"link\\">
    <div></div>
    <a>
      <div></div>
      <div></div>
      <div></div>
    </a>
    <div></div>
  </template>
  <div></div>
  <template x-if=\\"!link\\">
    <div></div>
    <button x-on:click=\\"onClick($event)\\">
      <div></div>
      <div></div>
      <div></div>
    </button>
    <div></div>
  </template>
  <div></div>
</div>
<script>
  document.addEventListener(\\"alpine:init\\", () => {
    Alpine.data(\\"button\\", () => ({}));
  });
</script>
"
`;

exports[`Alpine.js > jsx > Typescript Test > defaultValsWithTypes 1`] = `
"<div x-data=\\"componentWithTypes()\\">
  <div></div>
  <div></div>
</div>
<script>
  document.addEventListener(\\"alpine:init\\", () => {
    Alpine.data(\\"componentWithTypes\\", () => ({}));
  });
</script>
"
`;

exports[`Alpine.js > jsx > Typescript Test > expressionState 1`] = `
"<div x-data=\\"myComponent()\\"><div></div></div>
<script>
  document.addEventListener(\\"alpine:init\\", () => {
    Alpine.data(\\"myComponent\\", () => ({
      refToUse: !(props.componentRef instanceof Function)
        ? props.componentRef
        : null,
    }));
  });
</script>
"
`;

exports[`Alpine.js > jsx > Typescript Test > import types 1`] = `
"<RenderBlock
  x-data=\\"renderContent()\\"
  x-bind=\\"getRenderContentProps(renderContentProps.block, 0)\\"
></RenderBlock>
<script>
  document.addEventListener(\\"alpine:init\\", () => {
    Alpine.data(\\"renderContent\\", () => ({
      getRenderContentProps(block, index) {
        return {
          block: block,
          index: index,
        };
      },
    }));
  });
</script>
"
`;

exports[`Alpine.js > jsx > Typescript Test > multipleOnUpdate 1`] = `
"unknown: Unexpected token (2:54)

  1 | document.addEventListener('alpine:init', () => {
> 2 |               Alpine.data('multipleOnUpdate', () => ({,
    |                                                       ^
  3 | onUpdate() {
  4 |         console.log('Runs on every update/rerender');
  5 | console.log('Runs on every update/rerender as well');"
`;

exports[`Alpine.js > jsx > Typescript Test > multipleOnUpdateWithDeps 1`] = `
"<div x-data=\\"multipleOnUpdateWithDeps()\\"></div>
<script>
  document.addEventListener(\\"alpine:init\\", () => {
    Alpine.data(\\"multipleOnUpdateWithDeps\\", () => ({
      a: \\"a\\",
      b: \\"b\\",
      c: \\"c\\",
      d: \\"d\\",

      init() {
        this.$watch(\\"a\\", (value, oldValue) => {
          console.log(\\"Runs when a or b changes\\", this.a, this.b);

          if (this.a === \\"a\\") {
            this.a = \\"b\\";
          }
        });
        this.$watch(\\"b\\", (value, oldValue) => {
          console.log(\\"Runs when a or b changes\\", this.a, this.b);

          if (this.a === \\"a\\") {
            this.a = \\"b\\";
          }
        });
        this.$watch(\\"c\\", (value, oldValue) => {
          console.log(\\"Runs when c or d changes\\", this.c, this.d);

          if (this.a === \\"a\\") {
            this.a = \\"b\\";
          }
        });
        this.$watch(\\"d\\", (value, oldValue) => {
          console.log(\\"Runs when c or d changes\\", this.c, this.d);

          if (this.a === \\"a\\") {
            this.a = \\"b\\";
          }
        });
      },
    }));
  });
</script>
"
`;

exports[`Alpine.js > jsx > Typescript Test > multipleSpreads 1`] = `
"<input x-data=\\"myBasicComponent()\\" />
<script>
  document.addEventListener(\\"alpine:init\\", () => {
    Alpine.data(\\"myBasicComponent\\", () => ({
      attrs: {
        hello: \\"world\\",
      },
    }));
  });
</script>
"
`;

exports[`Alpine.js > jsx > Typescript Test > nestedShow 1`] = `
"<template x-if=\\"conditionA\\">
  <div></div>
  <template x-if=\\"!conditionB\\">
    <div></div>
    <div><div></div></div>
    <div></div>
  </template>
  <div></div>
</template>
<script>
  document.addEventListener(\\"alpine:init\\", () => {
    Alpine.data(\\"nestedShow\\", () => ({}));
  });
</script>
"
`;

exports[`Alpine.js > jsx > Typescript Test > nestedStyles 1`] = `
"<style>
  .div {
    display: flex;
    foo: var(--bar);
  }
  @media (max-width: env(--mobile)) {
    .div {
      display: block;
    }
  }
  .div:hover {
    display: flex;
  }
  .div .nested-selector {
    display: grid;
  }
</style>
<div x-data=\\"nestedStyles()\\"><div></div></div>
<script>
  document.addEventListener(\\"alpine:init\\", () => {
    Alpine.data(\\"nestedStyles\\", () => ({}));
  });
</script>
"
`;

exports[`Alpine.js > jsx > Typescript Test > onInit & onMount 1`] = `
"unknown: Unexpected token (2:44)

  1 | document.addEventListener('alpine:init', () => {
> 2 |               Alpine.data('onInit', () => ({, init() {
    |                                             ^
  3 |       
  4 |       console.log('onMount');
  5 |     }}))"
`;

exports[`Alpine.js > jsx > Typescript Test > onInit 1`] = `
"<div x-data=\\"onInit()\\">
  <div></div>
  <div></div>
</div>
<script>
  document.addEventListener(\\"alpine:init\\", () => {
    Alpine.data(\\"onInit\\", () => ({
      name: \\"\\",
    }));
  });
</script>
"
`;

exports[`Alpine.js > jsx > Typescript Test > onMount 1`] = `
"unknown: Unexpected token (2:42)

  1 | document.addEventListener('alpine:init', () => {
> 2 |               Alpine.data('comp', () => ({, init() {
    |                                           ^
  3 |       
  4 |       console.log('Runs on mount');
  5 |     }}))"
`;

exports[`Alpine.js > jsx > Typescript Test > onUpdate 1`] = `
"unknown: Unexpected token (2:46)

  1 | document.addEventListener('alpine:init', () => {
> 2 |               Alpine.data('onUpdate', () => ({,
    |                                               ^
  3 | onUpdate() {
  4 |         console.log('Runs on every update/rerender');
  5 |     }}))"
`;

exports[`Alpine.js > jsx > Typescript Test > onUpdateWithDeps 1`] = `
"<div x-data=\\"onUpdateWithDeps()\\"></div>
<script>
  document.addEventListener(\\"alpine:init\\", () => {
    Alpine.data(\\"onUpdateWithDeps\\", () => ({
      a: \\"a\\",
      b: \\"b\\",

      init() {
        this.$watch(\\"a\\", (value, oldValue) => {
          console.log(
            \\"Runs when a, b or size changes\\",
            this.a,
            this.b,
            props.size
          );
        });
        this.$watch(\\"b\\", (value, oldValue) => {
          console.log(
            \\"Runs when a, b or size changes\\",
            this.a,
            this.b,
            props.size
          );
        });
      },
    }));
  });
</script>
"
`;

exports[`Alpine.js > jsx > Typescript Test > preserveExportOrLocalStatement 1`] = `
"<div x-data=\\"myBasicComponent()\\"></div>
<script>
  document.addEventListener(\\"alpine:init\\", () => {
    Alpine.data(\\"myBasicComponent\\", () => ({}));
  });
</script>
"
`;

exports[`Alpine.js > jsx > Typescript Test > preserveTyping 1`] = `
"<div x-data=\\"myBasicComponent()\\">
  <div></div>
  <div></div>
</div>
<script>
  document.addEventListener(\\"alpine:init\\", () => {
    Alpine.data(\\"myBasicComponent\\", () => ({}));
  });
</script>
"
`;

exports[`Alpine.js > jsx > Typescript Test > propsDestructure 1`] = `
"<div x-data=\\"myBasicComponent()\\">
  <div></div>
  <div></div>
  <div></div>
  <div></div>
  <div></div>
</div>
<script>
  document.addEventListener(\\"alpine:init\\", () => {
    Alpine.data(\\"myBasicComponent\\", () => ({
      name: \\"Decadef20\\",
    }));
  });
</script>
"
`;

exports[`Alpine.js > jsx > Typescript Test > propsInterface 1`] = `
"<div x-data=\\"myBasicComponent()\\">
  <div></div>
  <div></div>
</div>
<script>
  document.addEventListener(\\"alpine:init\\", () => {
    Alpine.data(\\"myBasicComponent\\", () => ({}));
  });
</script>
"
`;

exports[`Alpine.js > jsx > Typescript Test > propsType 1`] = `
"<div x-data=\\"myBasicComponent()\\">
  <div></div>
  <div></div>
</div>
<script>
  document.addEventListener(\\"alpine:init\\", () => {
    Alpine.data(\\"myBasicComponent\\", () => ({}));
  });
</script>
"
`;

exports[`Alpine.js > jsx > Typescript Test > referencingFunInsideHook 1`] = `
"<div x-data=\\"onUpdate()\\" x-effect=\\"onUpdate\\"></div>
<script>
  document.addEventListener(\\"alpine:init\\", () => {
    Alpine.data(\\"onUpdate\\", () => ({
      foo: function foo(params) {},
      bar: function bar() {},
      zoo: function zoo() {
        const params = {
          cb: this.bar,
        };
      },

      onUpdate() {
        foo({
          someOption: bar,
        });
      },
    }));
  });
</script>
"
`;

exports[`Alpine.js > jsx > Typescript Test > renderBlock 1`] = `
"<template x-if=\\"shouldWrap\\">
  <div></div>
  <div></div>
  <template x-if=\\"isEmptyHtmlElement(tag)\\">
    <div></div>
    <state.tag></state.tag>
    <div></div>
  </template>
  <div></div>
  <template x-if=\\"!isEmptyHtmlElement(tag) && repeatItemData\\">
    <div></div>
    <template x-for=\\"data in repeatItemData\\">
      <RenderRepeatedBlock
        x-bind:key=\\"index\\"
        x-bind:repeatContext=\\"data.context\\"
        x-bind:block=\\"data.block\\"
      ></RenderRepeatedBlock>
    </template>
    <div></div>
  </template>
  <div></div>
  <template x-if=\\"!isEmptyHtmlElement(tag) && !repeatItemData\\">
    <div></div>
    <state.tag>
      <div></div>
      <state.renderComponentTag
        x-bind=\\"renderComponentProps\\"
      ></state.renderComponentTag>
      <div></div>
      <div></div>
      <template x-for=\\"child in childrenWithoutParentComponent\\">
        <RenderBlock
          x-bind:key=\\"'render-block-' + child.id\\"
          x-bind:block=\\"child\\"
          x-bind:context=\\"childrenContext\\"
        ></RenderBlock>
      </template>
      <div></div>
      <template x-for=\\"child in childrenWithoutParentComponent\\">
        <BlockStyles
          x-bind:key=\\"'block-style-' + child.id\\"
          x-bind:block=\\"child\\"
          x-bind:context=\\"childrenContext\\"
        ></BlockStyles>
      </template>
      <div></div>
    </state.tag>
    <div></div>
  </template>
  <div></div>
</template>
<script>
  document.addEventListener(\\"alpine:init\\", () => {
    Alpine.data(\\"renderBlock\\", () => ({
      get component() {
        const componentName = getProcessedBlock({
          block: props.block,
          state: props.context.state,
          context: props.context.context,
          shouldEvaluateBindings: false,
        }).component?.name;

        if (!componentName) {
          return null;
        }

        const ref = props.context.registeredComponents[componentName];

        if (!ref) {
          // TODO: Public doc page with more info about this message
          console.warn(\`
          Could not find a registered component named \\"\${componentName}\\". 
          If you registered it, is the file that registered it imported by the file that needs to render it?\`);
          return undefined;
        } else {
          return ref;
        }
      },

      get tag() {
        return getBlockTag(this.useBlock);
      },

      get useBlock() {
        return this.repeatItemData
          ? props.block
          : getProcessedBlock({
              block: props.block,
              state: props.context.state,
              context: props.context.context,
              shouldEvaluateBindings: true,
            });
      },

      get actions() {
        return getBlockActions({
          block: this.useBlock,
          state: props.context.state,
          context: props.context.context,
        });
      },

      get attributes() {
        const blockProperties = getBlockProperties(this.useBlock);
        return {
          ...blockProperties,
          ...(TARGET === \\"reactNative\\"
            ? {
                style: getReactNativeBlockStyles({
                  block: this.useBlock,
                  context: props.context,
                  blockStyles: blockProperties.style,
                }),
              }
            : {}),
        };
      },

      get shouldWrap() {
        return !this.component?.noWrap;
      },

      get renderComponentProps() {
        return {
          blockChildren: this.useChildren,
          componentRef: this.component?.component,
          componentOptions: {
            ...getBlockComponentOptions(this.useBlock),

            /**
             * These attributes are passed to the wrapper element when there is one. If \`noWrap\` is set to true, then
             * they are provided to the component itself directly.
             */
            ...(this.shouldWrap
              ? {}
              : {
                  attributes: { ...this.attributes, ...this.actions },
                }),
            customBreakpoints: this.childrenContext?.content?.meta?.breakpoints,
          },
          context: this.childrenContext,
        };
      },

      get useChildren() {
        // TO-DO: When should \`canHaveChildren\` dictate rendering?
        // This is currently commented out because some Builder components (e.g. Box) do not have \`canHaveChildren: true\`,
        // but still receive and need to render children.
        // return this.componentInfo?.canHaveChildren ? this.useBlock.children : [];
        return this.useBlock.children ?? [];
      },

      get childrenWithoutParentComponent() {
        /**
         * When there is no \`componentRef\`, there might still be children that need to be rendered. In this case,
         * we render them outside of \`componentRef\`.
         * NOTE: We make sure not to render this if \`repeatItemData\` is non-null, because that means we are rendering an array of
         * blocks, and the children will be repeated within those blocks.
         */
        const shouldRenderChildrenOutsideRef =
          !this.component?.component && !this.repeatItemData;
        return shouldRenderChildrenOutsideRef ? this.useChildren : [];
      },

      get repeatItemData() {
        /**
         * we don't use \`this.useBlock\` here because the processing done within its logic includes evaluating the block's bindings,
         * which will not work if there is a repeat.
         */
        const { repeat, ...blockWithoutRepeat } = props.block;

        if (!repeat?.collection) {
          return undefined;
        }

        const itemsArray = evaluate({
          code: repeat.collection,
          state: props.context.state,
          context: props.context.context,
        });

        if (!Array.isArray(itemsArray)) {
          return undefined;
        }

        const collectionName = repeat.collection.split(\\".\\").pop();
        const itemNameToUse =
          repeat.itemName ||
          (collectionName ? collectionName + \\"Item\\" : \\"item\\");
        const repeatArray = itemsArray.map((item, index) => ({
          context: {
            ...props.context,
            state: {
              ...props.context.state,
              $index: index,
              $item: item,
              [itemNameToUse]: item,
              [\`$\${itemNameToUse}Index\`]: index,
            },
          },
          block: blockWithoutRepeat,
        }));
        return repeatArray;
      },

      get inheritedTextStyles() {
        if (TARGET !== \\"reactNative\\") {
          return {};
        }

        const styles = getReactNativeBlockStyles({
          block: this.useBlock,
          context: props.context,
          blockStyles: this.attributes.style,
        });
        return extractTextStyles(styles);
      },

      get childrenContext() {
        return {
          apiKey: props.context.apiKey,
          state: props.context.state,
          content: props.context.content,
          context: props.context.context,
          registeredComponents: props.context.registeredComponents,
          inheritedStyles: this.inheritedTextStyles,
        };
      },

      get renderComponentTag() {
        if (TARGET === \\"reactNative\\") {
          return RenderComponentWithContext;
        } else if (TARGET === \\"vue3\\") {
          // vue3 expects a string for the component tag
          return \\"RenderComponent\\";
        } else {
          return RenderComponent;
        }
      },
    }));
  });
</script>
"
`;

exports[`Alpine.js > jsx > Typescript Test > renderContentExample 1`] = `
"unknown: Unexpected token (2:51)

  1 | document.addEventListener('alpine:init', () => {
> 2 |               Alpine.data('renderContent', () => ({, init() {
    |                                                    ^
  3 |       
  4 |       sendComponentsToVisualEditor(props.customComponents);
  5 |     }}))"
`;

exports[`Alpine.js > jsx > Typescript Test > rootFragmentMultiNode 1`] = `
"<div x-data=\\"button()\\">
  <div></div>
  <template x-if=\\"link\\">
    <div></div>
    <a>
      <div></div>
      <div></div>
      <div></div>
    </a>
    <div></div>
  </template>
  <div></div>
  <template x-if=\\"!link\\">
    <div></div>
    <button>
      <div></div>
      <div></div>
      <div></div>
    </button>
    <div></div>
  </template>
  <div></div>
</div>
<script>
  document.addEventListener(\\"alpine:init\\", () => {
    Alpine.data(\\"button\\", () => ({}));
  });
</script>
"
`;

exports[`Alpine.js > jsx > Typescript Test > rootShow 1`] = `
"<template x-if=\\"foo === 'bar'\\">
  <div></div>
  <div><div></div></div>
  <div></div>
</template>
<script>
  document.addEventListener(\\"alpine:init\\", () => {
    Alpine.data(\\"renderStyles\\", () => ({}));
  });
</script>
"
`;

exports[`Alpine.js > jsx > Typescript Test > self-referencing component 1`] = `
"<div x-data=\\"myComponent()\\">
  <div></div>
  <div></div>
  <div></div>
  <template x-if=\\"name === 'Batman'\\">
    <div></div>
    <MyComponent name=\\"Bruce Wayne\\"></MyComponent>
    <div></div>
  </template>
  <div></div>
</div>
<script>
  document.addEventListener(\\"alpine:init\\", () => {
    Alpine.data(\\"myComponent\\", () => ({}));
  });
</script>
"
`;

exports[`Alpine.js > jsx > Typescript Test > self-referencing component with children 1`] = `
"<div x-data=\\"myComponent()\\">
  <div></div>
  <div></div>
  <div></div>
  <div></div>
  <div></div>
  <template x-if=\\"name === 'Batman'\\">
    <div></div>
    <MyComponent name=\\"Bruce\\">
      <div></div>
      <div><div></div></div>
      <div></div>
    </MyComponent>
    <div></div>
  </template>
  <div></div>
</div>
<script>
  document.addEventListener(\\"alpine:init\\", () => {
    Alpine.data(\\"myComponent\\", () => ({}));
  });
</script>
"
`;

exports[`Alpine.js > jsx > Typescript Test > showWithFor 1`] = `
"<template x-if=\\"conditionA\\">
  <div></div>
  <template x-for=\\"item in items\\">
    <div><div></div></div>
  </template>
  <div></div>
</template>
<script>
  document.addEventListener(\\"alpine:init\\", () => {
    Alpine.data(\\"nestedShow\\", () => ({}));
  });
</script>
"
`;

exports[`Alpine.js > jsx > Typescript Test > spreadAttrs 1`] = `
"<input x-data=\\"myBasicComponent()\\" />
<script>
  document.addEventListener(\\"alpine:init\\", () => {
    Alpine.data(\\"myBasicComponent\\", () => ({}));
  });
</script>
"
`;

exports[`Alpine.js > jsx > Typescript Test > spreadNestedProps 1`] = `
"<input x-data=\\"myBasicComponent()\\" />
<script>
  document.addEventListener(\\"alpine:init\\", () => {
    Alpine.data(\\"myBasicComponent\\", () => ({}));
  });
</script>
"
`;

exports[`Alpine.js > jsx > Typescript Test > spreadProps 1`] = `
"<input x-data=\\"myBasicComponent()\\" />
<script>
  document.addEventListener(\\"alpine:init\\", () => {
    Alpine.data(\\"myBasicComponent\\", () => ({}));
  });
</script>
"
`;

exports[`Alpine.js > jsx > Typescript Test > styleClassAndCss 1`] = `
"<style>
  .div {
    display: flex;
    flex-direction: column;
    align-items: stretch;
  }
</style>
<div x-data=\\"myComponent()\\"></div>
<script>
  document.addEventListener(\\"alpine:init\\", () => {
    Alpine.data(\\"myComponent\\", () => ({}));
  });
</script>
"
`;

exports[`Alpine.js > jsx > Typescript Test > subComponent 1`] = `
"<Foo x-data=\\"subComponent()\\"></Foo>
<script>
  document.addEventListener(\\"alpine:init\\", () => {
    Alpine.data(\\"subComponent\\", () => ({}));
  });
</script>
"
`;

exports[`Alpine.js > jsx > Typescript Test > svgComponent 1`] = `
"<svg x-data=\\"svgComponent()\\" x-bind:viewbox=\\"'0 0 ' + 42 + ' ' + 42\\">
  <div></div>
  <defs>
    <div></div>
    <filter filterunits=\\"userSpaceOnUse\\">
      <div></div>
      <feFlood></feFlood>
      <div></div>
      <feBlend></feBlend>
      <div></div>
      <feGaussianBlur x-bind:stddeviation=\\"7\\"></feGaussianBlur>
      <div></div>
    </filter>
    <div></div>
  </defs>
  <div></div>
</svg>
<script>
  document.addEventListener(\\"alpine:init\\", () => {
    Alpine.data(\\"svgComponent\\", () => ({}));
  });
</script>
"
`;

exports[`Alpine.js > jsx > Typescript Test > typeDependency 1`] = `
"<div x-data=\\"typeDependency()\\"><div></div></div>
<script>
  document.addEventListener(\\"alpine:init\\", () => {
    Alpine.data(\\"typeDependency\\", () => ({}));
  });
</script>
"
`;

exports[`Alpine.js > jsx > Typescript Test > use-style 1`] = `
"<style>
  button {
    background: blue;
    color: white;
    font-size: 12px;
    outline: 1px solid black;
  }
</style>
<button x-data=\\"myComponent()\\"><div></div></button>
<script>
  document.addEventListener(\\"alpine:init\\", () => {
    Alpine.data(\\"myComponent\\", () => ({}));
  });
</script>
"
`;

exports[`Alpine.js > jsx > Typescript Test > use-style-and-css 1`] = `
"<style>
  .button {
    background: blue;
    color: white;
  }

  button {
    font-size: 12px;
    outline: 1px solid black;
  }
</style>
<button x-data=\\"myComponent()\\"><div></div></button>
<script>
  document.addEventListener(\\"alpine:init\\", () => {
    Alpine.data(\\"myComponent\\", () => ({}));
  });
</script>
"
`;

exports[`Alpine.js > jsx > Typescript Test > use-style-outside-component 1`] = `
"<style>
  button {
    background: blue;
    color: white;
    font-size: 12px;
    outline: 1px solid black;
  }
</style>
<button x-data=\\"myComponent()\\"><div></div></button>
<script>
  document.addEventListener(\\"alpine:init\\", () => {
    Alpine.data(\\"myComponent\\", () => ({}));
  });
</script>
"
`;

exports[`Alpine.js > svelte > Javascript Test > basic 1`] = `
"<div x-data=\\"myComponent()\\">
  <input x-on:change=\\"name = $event.target.value\\" />
  <div></div>
</div>
<script>
  document.addEventListener(\\"alpine:init\\", () => {
    Alpine.data(\\"myComponent\\", () => ({
      name: \\"Steve\\",
    }));
  });
</script>
"
`;

exports[`Alpine.js > svelte > Javascript Test > bindGroup 1`] = `
"<div  x-data=\\"myComponent()\\" ><input  x-on:change=\\"tortilla = $event.target.value\\" />
<input  x-on:change=\\"tortilla = $event.target.value\\" />
<input  x-on:change=\\"tortilla = $event.target.value\\" />
<br  />
<br  />
<input  x-on:change=\\"fillings = $event.target.value\\" />
<input  x-on:change=\\"fillings = $event.target.value\\" />
<input  x-on:change=\\"fillings = $event.target.value\\" />
<input  x-on:change=\\"fillings = $event.target.value\\" />
<p ><div ></div>
<div ></div></p>
<p ><div ></div>
<div ></div></p></div><script>
          document.addEventListener('alpine:init', () => {
  Alpine.data('myComponent', () => ({
    tortilla: \\"Plain\\",
    fillings: []
  }));
});
        </script>"
`;

exports[`Alpine.js > svelte > Javascript Test > bindProperty 1`] = `
"<input x-data=\\"myComponent()\\" />
<script>
  document.addEventListener(\\"alpine:init\\", () => {
    Alpine.data(\\"myComponent\\", () => ({
      value: \\"hello\\",
    }));
  });
</script>
"
`;

exports[`Alpine.js > svelte > Javascript Test > classDirective 1`] = `
"<input x-data=\\"myComponent()\\" />
<script>
  document.addEventListener(\\"alpine:init\\", () => {
    Alpine.data(\\"myComponent\\", () => ({
      focus: true,
    }));
  });
</script>
"
`;

exports[`Alpine.js > svelte > Javascript Test > context 1`] = `
"<div x-data=\\"myComponent()\\"><div></div></div>
<script>
  document.addEventListener(\\"alpine:init\\", () => {
    Alpine.data(\\"myComponent\\", () => ({
      activeTab: 0,
    }));
  });
</script>
"
`;

exports[`Alpine.js > svelte > Javascript Test > each 1`] = `
"<ul x-data=\\"myComponent()\\">
  <template x-for=\\"num in numbers\\">
    <li><div></div></li>
  </template>
</ul>
<script>
  document.addEventListener(\\"alpine:init\\", () => {
    Alpine.data(\\"myComponent\\", () => ({
      numbers: [\\"one\\", \\"two\\", \\"three\\"],
    }));
  });
</script>
"
`;

exports[`Alpine.js > svelte > Javascript Test > eventHandlers 1`] = `
"<div x-data=\\"myComponent()\\">
  <button x-on:click=\\"log('hi')\\"><div></div></button>
  <button x-on:click=\\"log($event)\\"><div></div></button>
  <button x-on:click=\\"log($event)\\"><div></div></button>
</div>
<script>
  document.addEventListener(\\"alpine:init\\", () => {
    Alpine.data(\\"myComponent\\", () => ({
      log: function log(msg = \\"hello\\") {
        console.log(msg);
      },
    }));
  });
</script>
"
`;

exports[`Alpine.js > svelte > Javascript Test > html 1`] = `
"<div x-data=\\"myComponent()\\" x-bind:innerhtml=\\"html\\"></div>
<script>
  document.addEventListener(\\"alpine:init\\", () => {
    Alpine.data(\\"myComponent\\", () => ({
      html: \\"<b>bold</b>\\",
    }));
  });
</script>
"
`;

exports[`Alpine.js > svelte > Javascript Test > ifElse 1`] = `
"<template x-if=\\"show\\">
  <button x-on:click=\\"toggle($event)\\"><div></div></button>
</template>
<script>
  document.addEventListener(\\"alpine:init\\", () => {
    Alpine.data(\\"myComponent\\", () => ({
      show: true,
      toggle: function toggle() {
        this.show = !this.show;
      },
    }));
  });
</script>
"
`;

exports[`Alpine.js > svelte > Javascript Test > imports 1`] = `
"<div x-data=\\"myComponent()\\">
  <button type=\\"button\\" x-bind:disabled=\\"disabled\\"><slot></slot></button>
</div>
<script>
  document.addEventListener(\\"alpine:init\\", () => {
    Alpine.data(\\"myComponent\\", () => ({
      disabled: false,
    }));
  });
</script>
"
`;

exports[`Alpine.js > svelte > Javascript Test > lifecycleHooks 1`] = `
"unknown: Unexpected token (2:49)

  1 | document.addEventListener('alpine:init', () => {
> 2 |               Alpine.data('myComponent', () => ({, init() {
    |                                                  ^
  3 |       
  4 |       
  5 |   console.log('onMount');"
`;

exports[`Alpine.js > svelte > Javascript Test > reactive 1`] = `
"<div x-data=\\"myComponent()\\">
  <input />
  <div></div>
  <div></div>
</div>
<script>
  document.addEventListener(\\"alpine:init\\", () => {
    Alpine.data(\\"myComponent\\", () => ({
      name: \\"Steve\\",

      get lowercaseName() {
        return this.name.toLowerCase();
      },
    }));
  });
</script>
"
`;

exports[`Alpine.js > svelte > Javascript Test > reactiveWithFn 1`] = `
"<div x-data=\\"myComponent()\\">
  <input x-on:change=\\"a = $event.target.value\\" />
  <input x-on:change=\\"b = $event.target.value\\" />
  <div></div>
  <div></div>
</div>
<script>
  document.addEventListener(\\"alpine:init\\", () => {
    Alpine.data(\\"myComponent\\", () => ({
      a: 2,
      b: 5,
      result: null,
      calculateResult: function calculateResult(a_, b_) {
        this.result = a_ * b_;
      },

      init() {
        this.$watch(\\"a,this.b\\", (value, oldValue) => {
          this.calculateResult(this.a, this.b);
        });
      },
    }));
  });
</script>
"
`;

exports[`Alpine.js > svelte > Javascript Test > slots 1`] = `
"<div x-data=\\"myComponent()\\">
  <slot><div></div></slot>
  <slot name=\\"Test\\">
    <div><div></div></div>
  </slot>
</div>
<script>
  document.addEventListener(\\"alpine:init\\", () => {
    Alpine.data(\\"myComponent\\", () => ({}));
  });
</script>
"
`;

exports[`Alpine.js > svelte > Javascript Test > style 1`] = `
"<style>
  input {
    color: red;
    font-size: 12px;
  }

  .form-input:focus {
    outline: 1px solid blue;
  }
</style>
<input x-data=\\"myComponent()\\" />
<script>
  document.addEventListener(\\"alpine:init\\", () => {
    Alpine.data(\\"myComponent\\", () => ({}));
  });
</script>
"
`;

exports[`Alpine.js > svelte > Javascript Test > textExpressions 1`] = `
"<div x-data=\\"myComponent()\\">
  <div></div>
  <div></div>
  <br />
  <div></div>
  <div></div>
</div>
<script>
  document.addEventListener(\\"alpine:init\\", () => {
    Alpine.data(\\"myComponent\\", () => ({
      a: 5,
      b: 12,
    }));
  });
</script>
"
`;

exports[`Alpine.js > svelte > Typescript Test > basic 1`] = `
"<div x-data=\\"myComponent()\\">
  <input x-on:change=\\"name = $event.target.value\\" />
  <div></div>
</div>
<script>
  document.addEventListener(\\"alpine:init\\", () => {
    Alpine.data(\\"myComponent\\", () => ({
      name: \\"Steve\\",
    }));
  });
</script>
"
`;

exports[`Alpine.js > svelte > Typescript Test > bindGroup 1`] = `
"<div  x-data=\\"myComponent()\\" ><input  x-on:change=\\"tortilla = $event.target.value\\" />
<input  x-on:change=\\"tortilla = $event.target.value\\" />
<input  x-on:change=\\"tortilla = $event.target.value\\" />
<br  />
<br  />
<input  x-on:change=\\"fillings = $event.target.value\\" />
<input  x-on:change=\\"fillings = $event.target.value\\" />
<input  x-on:change=\\"fillings = $event.target.value\\" />
<input  x-on:change=\\"fillings = $event.target.value\\" />
<p ><div ></div>
<div ></div></p>
<p ><div ></div>
<div ></div></p></div><script>
          document.addEventListener('alpine:init', () => {
  Alpine.data('myComponent', () => ({
    tortilla: \\"Plain\\",
    fillings: []
  }));
});
        </script>"
`;

exports[`Alpine.js > svelte > Typescript Test > bindProperty 1`] = `
"<input x-data=\\"myComponent()\\" />
<script>
  document.addEventListener(\\"alpine:init\\", () => {
    Alpine.data(\\"myComponent\\", () => ({
      value: \\"hello\\",
    }));
  });
</script>
"
`;

exports[`Alpine.js > svelte > Typescript Test > classDirective 1`] = `
"<input x-data=\\"myComponent()\\" />
<script>
  document.addEventListener(\\"alpine:init\\", () => {
    Alpine.data(\\"myComponent\\", () => ({
      focus: true,
    }));
  });
</script>
"
`;

exports[`Alpine.js > svelte > Typescript Test > context 1`] = `
"<div x-data=\\"myComponent()\\"><div></div></div>
<script>
  document.addEventListener(\\"alpine:init\\", () => {
    Alpine.data(\\"myComponent\\", () => ({
      activeTab: 0,
    }));
  });
</script>
"
`;

exports[`Alpine.js > svelte > Typescript Test > each 1`] = `
"<ul x-data=\\"myComponent()\\">
  <template x-for=\\"num in numbers\\">
    <li><div></div></li>
  </template>
</ul>
<script>
  document.addEventListener(\\"alpine:init\\", () => {
    Alpine.data(\\"myComponent\\", () => ({
      numbers: [\\"one\\", \\"two\\", \\"three\\"],
    }));
  });
</script>
"
`;

exports[`Alpine.js > svelte > Typescript Test > eventHandlers 1`] = `
"<div x-data=\\"myComponent()\\">
  <button x-on:click=\\"log('hi')\\"><div></div></button>
  <button x-on:click=\\"log($event)\\"><div></div></button>
  <button x-on:click=\\"log($event)\\"><div></div></button>
</div>
<script>
  document.addEventListener(\\"alpine:init\\", () => {
    Alpine.data(\\"myComponent\\", () => ({
      log: function log(msg = \\"hello\\") {
        console.log(msg);
      },
    }));
  });
</script>
"
`;

exports[`Alpine.js > svelte > Typescript Test > html 1`] = `
"<div x-data=\\"myComponent()\\" x-bind:innerhtml=\\"html\\"></div>
<script>
  document.addEventListener(\\"alpine:init\\", () => {
    Alpine.data(\\"myComponent\\", () => ({
      html: \\"<b>bold</b>\\",
    }));
  });
</script>
"
`;

exports[`Alpine.js > svelte > Typescript Test > ifElse 1`] = `
"<template x-if=\\"show\\">
  <button x-on:click=\\"toggle($event)\\"><div></div></button>
</template>
<script>
  document.addEventListener(\\"alpine:init\\", () => {
    Alpine.data(\\"myComponent\\", () => ({
      show: true,
      toggle: function toggle() {
        this.show = !this.show;
      },
    }));
  });
</script>
"
`;

exports[`Alpine.js > svelte > Typescript Test > imports 1`] = `
"<div x-data=\\"myComponent()\\">
  <button type=\\"button\\" x-bind:disabled=\\"disabled\\"><slot></slot></button>
</div>
<script>
  document.addEventListener(\\"alpine:init\\", () => {
    Alpine.data(\\"myComponent\\", () => ({
      disabled: false,
    }));
  });
</script>
"
`;

exports[`Alpine.js > svelte > Typescript Test > lifecycleHooks 1`] = `
"unknown: Unexpected token (2:49)

  1 | document.addEventListener('alpine:init', () => {
> 2 |               Alpine.data('myComponent', () => ({, init() {
    |                                                  ^
  3 |       
  4 |       
  5 |   console.log('onMount');"
`;

exports[`Alpine.js > svelte > Typescript Test > reactive 1`] = `
"<div x-data=\\"myComponent()\\">
  <input />
  <div></div>
  <div></div>
</div>
<script>
  document.addEventListener(\\"alpine:init\\", () => {
    Alpine.data(\\"myComponent\\", () => ({
      name: \\"Steve\\",

      get lowercaseName() {
        return this.name.toLowerCase();
      },
    }));
  });
</script>
"
`;

exports[`Alpine.js > svelte > Typescript Test > reactiveWithFn 1`] = `
"<div x-data=\\"myComponent()\\">
  <input x-on:change=\\"a = $event.target.value\\" />
  <input x-on:change=\\"b = $event.target.value\\" />
  <div></div>
  <div></div>
</div>
<script>
  document.addEventListener(\\"alpine:init\\", () => {
    Alpine.data(\\"myComponent\\", () => ({
      a: 2,
      b: 5,
      result: null,
      calculateResult: function calculateResult(a_, b_) {
        this.result = a_ * b_;
      },

      init() {
        this.$watch(\\"a,this.b\\", (value, oldValue) => {
          this.calculateResult(this.a, this.b);
        });
      },
    }));
  });
</script>
"
`;

exports[`Alpine.js > svelte > Typescript Test > slots 1`] = `
"<div x-data=\\"myComponent()\\">
  <slot><div></div></slot>
  <slot name=\\"Test\\">
    <div><div></div></div>
  </slot>
</div>
<script>
  document.addEventListener(\\"alpine:init\\", () => {
    Alpine.data(\\"myComponent\\", () => ({}));
  });
</script>
"
`;

exports[`Alpine.js > svelte > Typescript Test > style 1`] = `
"<style>
  input {
    color: red;
    font-size: 12px;
  }

  .form-input:focus {
    outline: 1px solid blue;
  }
</style>
<input x-data=\\"myComponent()\\" />
<script>
  document.addEventListener(\\"alpine:init\\", () => {
    Alpine.data(\\"myComponent\\", () => ({}));
  });
</script>
"
`;

exports[`Alpine.js > svelte > Typescript Test > textExpressions 1`] = `
"<div x-data=\\"myComponent()\\">
  <div></div>
  <div></div>
  <br />
  <div></div>
  <div></div>
</div>
<script>
  document.addEventListener(\\"alpine:init\\", () => {
    Alpine.data(\\"myComponent\\", () => ({
      a: 5,
      b: 12,
    }));
  });
</script>
"
`;
