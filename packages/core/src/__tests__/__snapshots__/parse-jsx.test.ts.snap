// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`Parse JSX > Javascript > Advanced 1`] = `
{
  "@type": "@builder.io/mitosis/component",
  "children": [
    {
      "@type": "@builder.io/mitosis/node",
      "bindings": {},
      "children": [
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {
            "each": {
              "bindingType": "expression",
              "code": "state.names",
              "type": "single",
            },
          },
          "children": [
            {
              "@type": "@builder.io/mitosis/node",
              "bindings": {},
              "children": [
                {
                  "@type": "@builder.io/mitosis/node",
                  "bindings": {
                    "_text": {
                      "bindingType": "expression",
                      "code": "i",
                      "type": "single",
                    },
                  },
                  "children": [],
                  "meta": {},
                  "name": "div",
                  "properties": {},
                  "scope": {},
                },
                {
                  "@type": "@builder.io/mitosis/node",
                  "bindings": {},
                  "children": [],
                  "meta": {},
                  "name": "div",
                  "properties": {
                    "_text": ": ",
                  },
                  "scope": {},
                },
                {
                  "@type": "@builder.io/mitosis/node",
                  "bindings": {
                    "_text": {
                      "bindingType": "expression",
                      "code": "person",
                      "type": "single",
                    },
                  },
                  "children": [],
                  "meta": {},
                  "name": "div",
                  "properties": {},
                  "scope": {},
                },
              ],
              "meta": {},
              "name": "div",
              "properties": {},
              "scope": {},
            },
          ],
          "meta": {},
          "name": "For",
          "properties": {},
          "scope": {
            "forName": "person",
            "indexName": "i",
          },
        },
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {
            "each": {
              "bindingType": "expression",
              "code": "state.names",
              "type": "single",
            },
          },
          "children": [
            {
              "@type": "@builder.io/mitosis/node",
              "bindings": {},
              "children": [
                {
                  "@type": "@builder.io/mitosis/node",
                  "bindings": {
                    "_text": {
                      "bindingType": "expression",
                      "code": "person",
                      "type": "single",
                    },
                  },
                  "children": [],
                  "meta": {},
                  "name": "div",
                  "properties": {},
                  "scope": {},
                },
              ],
              "meta": {},
              "name": "span",
              "properties": {},
              "scope": {},
            },
          ],
          "meta": {},
          "name": "For",
          "properties": {},
          "scope": {
            "forName": "person",
          },
        },
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {
            "each": {
              "bindingType": "expression",
              "code": "state.names",
              "type": "single",
            },
          },
          "children": [
            {
              "@type": "@builder.io/mitosis/node",
              "bindings": {},
              "children": [],
              "meta": {},
              "name": "br",
              "properties": {},
              "scope": {},
            },
          ],
          "meta": {},
          "name": "For",
          "properties": {},
          "scope": {},
        },
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {
            "each": {
              "bindingType": "expression",
              "code": "Array.from({
  length: 10
})",
              "type": "single",
            },
          },
          "children": [
            {
              "@type": "@builder.io/mitosis/node",
              "bindings": {},
              "children": [
                {
                  "@type": "@builder.io/mitosis/node",
                  "bindings": {
                    "_text": {
                      "bindingType": "expression",
                      "code": "ee",
                      "type": "single",
                    },
                  },
                  "children": [],
                  "meta": {},
                  "name": "div",
                  "properties": {},
                  "scope": {},
                },
              ],
              "meta": {},
              "name": "pre",
              "properties": {},
              "scope": {},
            },
          ],
          "meta": {},
          "name": "For",
          "properties": {},
          "scope": {
            "forName": "_",
            "indexName": "ee",
          },
        },
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {
            "each": {
              "bindingType": "expression",
              "code": "Array.from({
  length: 10
})",
              "type": "single",
            },
          },
          "children": [
            {
              "@type": "@builder.io/mitosis/node",
              "bindings": {},
              "children": [
                {
                  "@type": "@builder.io/mitosis/node",
                  "bindings": {
                    "_text": {
                      "bindingType": "expression",
                      "code": "index",
                      "type": "single",
                    },
                  },
                  "children": [],
                  "meta": {},
                  "name": "div",
                  "properties": {},
                  "scope": {},
                },
              ],
              "meta": {},
              "name": "p",
              "properties": {},
              "scope": {},
            },
          ],
          "meta": {},
          "name": "For",
          "properties": {},
          "scope": {},
        },
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {
            "each": {
              "bindingType": "expression",
              "code": "state.names",
              "type": "single",
            },
          },
          "children": [
            {
              "@type": "@builder.io/mitosis/node",
              "bindings": {},
              "children": [
                {
                  "@type": "@builder.io/mitosis/node",
                  "bindings": {
                    "_text": {
                      "bindingType": "expression",
                      "code": "person",
                      "type": "single",
                    },
                  },
                  "children": [],
                  "meta": {},
                  "name": "div",
                  "properties": {},
                  "scope": {},
                },
                {
                  "@type": "@builder.io/mitosis/node",
                  "bindings": {
                    "_text": {
                      "bindingType": "expression",
                      "code": "index",
                      "type": "single",
                    },
                  },
                  "children": [],
                  "meta": {},
                  "name": "div",
                  "properties": {},
                  "scope": {},
                },
              ],
              "meta": {},
              "name": "span",
              "properties": {},
              "scope": {},
            },
          ],
          "meta": {},
          "name": "For",
          "properties": {},
          "scope": {
            "forName": "person",
            "indexName": "index",
          },
        },
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {
            "each": {
              "bindingType": "expression",
              "code": "Array.from({
  length: 10
})",
              "type": "single",
            },
          },
          "children": [
            {
              "@type": "@builder.io/mitosis/node",
              "bindings": {},
              "children": [
                {
                  "@type": "@builder.io/mitosis/node",
                  "bindings": {
                    "_text": {
                      "bindingType": "expression",
                      "code": "person",
                      "type": "single",
                    },
                  },
                  "children": [],
                  "meta": {},
                  "name": "div",
                  "properties": {},
                  "scope": {},
                },
                {
                  "@type": "@builder.io/mitosis/node",
                  "bindings": {
                    "_text": {
                      "bindingType": "expression",
                      "code": "count",
                      "type": "single",
                    },
                  },
                  "children": [],
                  "meta": {},
                  "name": "div",
                  "properties": {},
                  "scope": {},
                },
              ],
              "meta": {},
              "name": "span",
              "properties": {},
              "scope": {},
            },
          ],
          "meta": {},
          "name": "For",
          "properties": {},
          "scope": {
            "forName": "person",
            "indexName": "count",
          },
        },
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {
            "each": {
              "bindingType": "expression",
              "code": "state.names",
              "type": "single",
            },
          },
          "children": [
            {
              "@type": "@builder.io/mitosis/node",
              "bindings": {},
              "children": [
                {
                  "@type": "@builder.io/mitosis/node",
                  "bindings": {
                    "_text": {
                      "bindingType": "expression",
                      "code": "person",
                      "type": "single",
                    },
                  },
                  "children": [],
                  "meta": {},
                  "name": "div",
                  "properties": {},
                  "scope": {},
                },
                {
                  "@type": "@builder.io/mitosis/node",
                  "bindings": {
                    "_text": {
                      "bindingType": "expression",
                      "code": "i",
                      "type": "single",
                    },
                  },
                  "children": [],
                  "meta": {},
                  "name": "div",
                  "properties": {},
                  "scope": {},
                },
              ],
              "meta": {},
              "name": "span",
              "properties": {},
              "scope": {},
            },
          ],
          "meta": {},
          "name": "For",
          "properties": {},
          "scope": {
            "forName": "person",
            "indexName": "i",
          },
        },
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {
            "each": {
              "bindingType": "expression",
              "code": "Array.from({
  length: 10
})",
              "type": "single",
            },
          },
          "children": [
            {
              "@type": "@builder.io/mitosis/node",
              "bindings": {},
              "children": [
                {
                  "@type": "@builder.io/mitosis/node",
                  "bindings": {
                    "_text": {
                      "bindingType": "expression",
                      "code": "person",
                      "type": "single",
                    },
                  },
                  "children": [],
                  "meta": {},
                  "name": "div",
                  "properties": {},
                  "scope": {},
                },
                {
                  "@type": "@builder.io/mitosis/node",
                  "bindings": {
                    "_text": {
                      "bindingType": "expression",
                      "code": "index",
                      "type": "single",
                    },
                  },
                  "children": [],
                  "meta": {},
                  "name": "div",
                  "properties": {},
                  "scope": {},
                },
              ],
              "meta": {},
              "name": "span",
              "properties": {},
              "scope": {},
            },
          ],
          "meta": {},
          "name": "For",
          "properties": {},
          "scope": {
            "forName": "person",
            "indexName": "index",
          },
        },
      ],
      "meta": {},
      "name": "main",
      "properties": {},
      "scope": {},
    },
  ],
  "context": {
    "get": {},
    "set": {},
  },
  "exports": {},
  "hooks": {
    "onEvent": [],
    "onMount": [],
  },
  "imports": [],
  "inputs": [],
  "meta": {},
  "name": "MyBasicForShowComponent",
  "refs": {},
  "state": {
    "name": {
      "code": "'PatrickJS'",
      "propertyType": "normal",
      "type": "property",
    },
    "names": {
      "code": "['Steve', 'PatrickJS']",
      "propertyType": "normal",
      "type": "property",
    },
  },
  "subComponents": [],
}
`;

exports[`Parse JSX > Javascript > AdvancedRef 1`] = `
{
  "@type": "@builder.io/mitosis/component",
  "children": [
    {
      "@type": "@builder.io/mitosis/node",
      "bindings": {},
      "children": [
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {
            "when": {
              "bindingType": "expression",
              "code": "props.showInput",
              "type": "single",
            },
          },
          "children": [
            {
              "@type": "@builder.io/mitosis/node",
              "bindings": {},
              "children": [
                {
                  "@type": "@builder.io/mitosis/node",
                  "bindings": {
                    "css": {
                      "bindingType": "expression",
                      "code": "{
  color: 'red'
}",
                      "type": "single",
                    },
                    "onBlur": {
                      "arguments": [
                        "event",
                      ],
                      "bindingType": "function",
                      "code": "state.onBlur()",
                      "type": "single",
                    },
                    "onChange": {
                      "arguments": [
                        "event",
                      ],
                      "bindingType": "function",
                      "code": "state.name = event.target.value",
                      "type": "single",
                    },
                    "ref": {
                      "bindingType": "expression",
                      "code": "inputRef",
                      "type": "single",
                    },
                    "value": {
                      "bindingType": "expression",
                      "code": "state.name",
                      "type": "single",
                    },
                  },
                  "children": [],
                  "meta": {},
                  "name": "input",
                  "properties": {},
                  "scope": {},
                },
                {
                  "@type": "@builder.io/mitosis/node",
                  "bindings": {
                    "ref": {
                      "bindingType": "expression",
                      "code": "inputNoArgRef",
                      "type": "single",
                    },
                  },
                  "children": [
                    {
                      "@type": "@builder.io/mitosis/node",
                      "bindings": {},
                      "children": [],
                      "meta": {},
                      "name": "div",
                      "properties": {
                        "_text": "
            Choose a car:
          ",
                      },
                      "scope": {},
                    },
                  ],
                  "meta": {},
                  "name": "label",
                  "properties": {
                    "for": "cars",
                  },
                  "scope": {},
                },
                {
                  "@type": "@builder.io/mitosis/node",
                  "bindings": {},
                  "children": [
                    {
                      "@type": "@builder.io/mitosis/node",
                      "bindings": {},
                      "children": [
                        {
                          "@type": "@builder.io/mitosis/node",
                          "bindings": {},
                          "children": [],
                          "meta": {},
                          "name": "div",
                          "properties": {
                            "_text": "GR Supra",
                          },
                          "scope": {},
                        },
                      ],
                      "meta": {},
                      "name": "option",
                      "properties": {
                        "value": "supra",
                      },
                      "scope": {},
                    },
                    {
                      "@type": "@builder.io/mitosis/node",
                      "bindings": {},
                      "children": [
                        {
                          "@type": "@builder.io/mitosis/node",
                          "bindings": {},
                          "children": [],
                          "meta": {},
                          "name": "div",
                          "properties": {
                            "_text": "GR 86",
                          },
                          "scope": {},
                        },
                      ],
                      "meta": {},
                      "name": "option",
                      "properties": {
                        "value": "86",
                      },
                      "scope": {},
                    },
                  ],
                  "meta": {},
                  "name": "select",
                  "properties": {
                    "id": "cars",
                    "name": "cars",
                  },
                  "scope": {},
                },
              ],
              "meta": {},
              "name": "Fragment",
              "properties": {},
              "scope": {},
            },
          ],
          "meta": {},
          "name": "Show",
          "properties": {},
          "scope": {},
        },
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {},
          "children": [],
          "meta": {},
          "name": "div",
          "properties": {
            "_text": "
      Hello
      ",
          },
          "scope": {},
        },
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {
            "_text": {
              "bindingType": "expression",
              "code": "state.lowerCaseName()",
              "type": "single",
            },
          },
          "children": [],
          "meta": {},
          "name": "div",
          "properties": {},
          "scope": {},
        },
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {},
          "children": [],
          "meta": {},
          "name": "div",
          "properties": {
            "_text": "! I can run in React, Qwik, Vue, Solid, or Web Component!
    ",
          },
          "scope": {},
        },
      ],
      "meta": {},
      "name": "div",
      "properties": {},
      "scope": {},
    },
  ],
  "context": {
    "get": {},
    "set": {},
  },
  "exports": {},
  "hooks": {
    "onEvent": [],
    "onMount": [],
    "onUpdate": [
      {
        "code": "console.log('Received an update')",
        "deps": "[inputRef, inputNoArgRef]",
        "depsArray": [
          "inputRef",
          "inputNoArgRef",
        ],
      },
    ],
  },
  "imports": [],
  "inputs": [],
  "meta": {},
  "name": "MyBasicRefComponent",
  "refs": {
    "inputNoArgRef": {
      "argument": "null",
    },
    "inputRef": {
      "argument": "null",
    },
  },
  "state": {
    "lowerCaseName": {
      "code": "function lowerCaseName() {
  return state.name.toLowerCase();
}",
      "type": "function",
    },
    "name": {
      "code": "'PatrickJS'",
      "propertyType": "normal",
      "type": "property",
    },
    "onBlur": {
      "code": "function onBlur() {
  // Maintain focus
  inputRef.focus();
}",
      "type": "function",
    },
  },
  "subComponents": [],
}
`;

exports[`Parse JSX > Javascript > Basic 1`] = `
{
  "@type": "@builder.io/mitosis/component",
  "children": [
    {
      "@type": "@builder.io/mitosis/node",
      "bindings": {
        "css": {
          "bindingType": "expression",
          "code": "{
  padding: '10px'
}",
          "type": "single",
        },
      },
      "children": [
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {
            "onChange": {
              "arguments": [
                "myEvent",
              ],
              "bindingType": "function",
              "code": "state.name = myEvent.target.value",
              "type": "single",
            },
            "value": {
              "bindingType": "expression",
              "code": "DEFAULT_VALUES.name || state.name",
              "type": "single",
            },
          },
          "children": [],
          "meta": {},
          "name": "input",
          "properties": {},
          "scope": {},
        },
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {},
          "children": [],
          "meta": {},
          "name": "div",
          "properties": {
            "_text": "
      Hello! I can run in React, Vue, Solid, or Liquid! &gt;
    ",
          },
          "scope": {},
        },
      ],
      "meta": {},
      "name": "div",
      "properties": {
        "class": "test",
      },
      "scope": {},
    },
  ],
  "context": {
    "get": {},
    "set": {},
  },
  "exports": {
    "DEFAULT_VALUES": {
      "code": "export const DEFAULT_VALUES = {
  name: 'Steve'
};",
      "isFunction": false,
      "usedInLocal": true,
    },
  },
  "hooks": {
    "onEvent": [],
    "onMount": [],
  },
  "imports": [],
  "inputs": [],
  "meta": {},
  "name": "MyBasicComponent",
  "refs": {},
  "state": {
    "age": {
      "code": "1",
      "propertyType": "normal",
      "type": "property",
    },
    "name": {
      "code": "'Steve'",
      "propertyType": "normal",
      "type": "property",
    },
    "sports": {
      "code": "['']",
      "propertyType": "normal",
      "type": "property",
    },
    "underscore_fn_name": {
      "code": "underscore_fn_name() {
  return 'bar';
}",
      "type": "method",
    },
  },
  "subComponents": [],
}
`;

exports[`Parse JSX > Javascript > Basic 2`] = `
{
  "@type": "@builder.io/mitosis/component",
  "children": [
    {
      "@type": "@builder.io/mitosis/node",
      "bindings": {},
      "children": [
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {
            "each": {
              "bindingType": "expression",
              "code": "state.names",
              "type": "single",
            },
          },
          "children": [
            {
              "@type": "@builder.io/mitosis/node",
              "bindings": {
                "when": {
                  "bindingType": "expression",
                  "code": "person === state.name",
                  "type": "single",
                },
              },
              "children": [
                {
                  "@type": "@builder.io/mitosis/node",
                  "bindings": {
                    "onChange": {
                      "arguments": [
                        "event",
                      ],
                      "bindingType": "function",
                      "code": "{
  state.name = event.target.value + ' and ' + person;
}",
                      "type": "single",
                    },
                    "value": {
                      "bindingType": "expression",
                      "code": "state.name",
                      "type": "single",
                    },
                  },
                  "children": [],
                  "meta": {},
                  "name": "input",
                  "properties": {},
                  "scope": {},
                },
                {
                  "@type": "@builder.io/mitosis/node",
                  "bindings": {},
                  "children": [],
                  "meta": {},
                  "name": "div",
                  "properties": {
                    "_text": "
            Hello ",
                  },
                  "scope": {},
                },
                {
                  "@type": "@builder.io/mitosis/node",
                  "bindings": {
                    "_text": {
                      "bindingType": "expression",
                      "code": "person",
                      "type": "single",
                    },
                  },
                  "children": [],
                  "meta": {},
                  "name": "div",
                  "properties": {},
                  "scope": {},
                },
                {
                  "@type": "@builder.io/mitosis/node",
                  "bindings": {},
                  "children": [],
                  "meta": {},
                  "name": "div",
                  "properties": {
                    "_text": "! I can run in Qwik, Web Component, React, Vue, Solid, or Liquid!
          ",
                  },
                  "scope": {},
                },
              ],
              "meta": {},
              "name": "Show",
              "properties": {},
              "scope": {},
            },
          ],
          "meta": {},
          "name": "For",
          "properties": {},
          "scope": {
            "forName": "person",
          },
        },
      ],
      "meta": {},
      "name": "div",
      "properties": {},
      "scope": {},
    },
  ],
  "context": {
    "get": {},
    "set": {},
  },
  "exports": {},
  "hooks": {
    "onEvent": [],
    "onMount": [],
  },
  "imports": [],
  "inputs": [],
  "meta": {},
  "name": "MyBasicForShowComponent",
  "refs": {},
  "state": {
    "name": {
      "code": "'PatrickJS'",
      "propertyType": "normal",
      "type": "property",
    },
    "names": {
      "code": "['Steve', 'PatrickJS']",
      "propertyType": "normal",
      "type": "property",
    },
  },
  "subComponents": [],
}
`;

exports[`Parse JSX > Javascript > Basic Context 1`] = `
{
  "@type": "@builder.io/mitosis/component",
  "children": [
    {
      "@type": "@builder.io/mitosis/node",
      "bindings": {},
      "children": [
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {
            "_text": {
              "bindingType": "expression",
              "code": "myService.method('hello') + state.name",
              "type": "single",
            },
          },
          "children": [],
          "meta": {},
          "name": "div",
          "properties": {},
          "scope": {},
        },
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {},
          "children": [],
          "meta": {},
          "name": "div",
          "properties": {
            "_text": "
      Hello! I can run in React, Vue, Solid, or Liquid!
      ",
          },
          "scope": {},
        },
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {
            "onChange": {
              "bindingType": "function",
              "code": "state.onChange()",
              "type": "single",
            },
          },
          "children": [],
          "meta": {},
          "name": "input",
          "properties": {},
          "scope": {},
        },
      ],
      "meta": {},
      "name": "div",
      "properties": {},
      "scope": {},
    },
  ],
  "context": {
    "get": {
      "myService": {
        "name": "MyService",
        "path": "@dummy/injection-js:MyService",
      },
    },
    "set": {
      "@dummy/injection-js:Injector": {
        "name": "Injector",
        "ref": "createInjector()",
      },
    },
  },
  "exports": {},
  "hooks": {
    "onEvent": [],
    "onInit": {
      "code": "const hi = myService.method('hi');
console.log(hi)",
    },
    "onMount": [
      {
        "code": "const bye = myService.method('hi');
console.log(bye)",
        "onSSR": false,
      },
    ],
  },
  "imports": [
    {
      "importKind": "value",
      "imports": {
        "Injector": "Injector",
        "MyService": "MyService",
        "createInjector": "createInjector",
      },
      "path": "@dummy/injection-js",
    },
  ],
  "inputs": [],
  "meta": {},
  "name": "MyBasicComponent",
  "refs": {},
  "state": {
    "name": {
      "code": "'PatrickJS'",
      "propertyType": "normal",
      "type": "property",
    },
    "onChange": {
      "code": "function onChange() {
  const change = myService.method('change');
  console.log(change);
}",
      "type": "function",
    },
  },
  "subComponents": [],
}
`;

exports[`Parse JSX > Javascript > Basic OnMount Update 1`] = `
{
  "@type": "@builder.io/mitosis/component",
  "children": [
    {
      "@type": "@builder.io/mitosis/node",
      "bindings": {},
      "children": [
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {},
          "children": [],
          "meta": {},
          "name": "div",
          "properties": {
            "_text": "Hello ",
          },
          "scope": {},
        },
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {
            "_text": {
              "bindingType": "expression",
              "code": "state.name",
              "type": "single",
            },
          },
          "children": [],
          "meta": {},
          "name": "div",
          "properties": {},
          "scope": {},
        },
      ],
      "meta": {},
      "name": "div",
      "properties": {},
      "scope": {},
    },
  ],
  "context": {
    "get": {},
    "set": {},
  },
  "exports": {},
  "hooks": {
    "onEvent": [],
    "onInit": {
      "code": "state.name = 'PatrickJS onInit' + props.hi",
    },
    "onMount": [
      {
        "code": "state.name = 'PatrickJS onMount' + props.bye",
        "onSSR": false,
      },
    ],
  },
  "imports": [],
  "inputs": [],
  "meta": {},
  "name": "MyBasicOnMountUpdateComponent",
  "refs": {},
  "state": {
    "name": {
      "code": "'PatrickJS'",
      "propertyType": "normal",
      "type": "property",
    },
    "names": {
      "code": "['Steve', 'PatrickJS']",
      "propertyType": "normal",
      "type": "property",
    },
  },
  "subComponents": [],
}
`;

exports[`Parse JSX > Javascript > Basic Outputs 1`] = `
{
  "@type": "@builder.io/mitosis/component",
  "children": [
    {
      "@type": "@builder.io/mitosis/node",
      "bindings": {},
      "children": [],
      "meta": {},
      "name": "div",
      "properties": {},
      "scope": {},
    },
  ],
  "context": {
    "get": {},
    "set": {},
  },
  "exports": {},
  "hooks": {
    "onEvent": [],
    "onMount": [
      {
        "code": "props.onMessageChange(state.name);
props.onEvent(props.message)",
        "onSSR": false,
      },
    ],
  },
  "imports": [],
  "inputs": [],
  "meta": {},
  "name": "MyBasicOutputsComponent",
  "refs": {},
  "state": {
    "name": {
      "code": "'PatrickJS'",
      "propertyType": "normal",
      "type": "property",
    },
  },
  "subComponents": [],
}
`;

exports[`Parse JSX > Javascript > Basic Outputs Meta 1`] = `
{
  "@type": "@builder.io/mitosis/component",
  "children": [
    {
      "@type": "@builder.io/mitosis/node",
      "bindings": {},
      "children": [],
      "meta": {},
      "name": "div",
      "properties": {},
      "scope": {},
    },
  ],
  "context": {
    "get": {},
    "set": {},
  },
  "exports": {},
  "hooks": {
    "onEvent": [],
    "onMount": [
      {
        "code": "props.onMessageChange(state.name);
props.onEvent(props.message)",
        "onSSR": false,
      },
    ],
  },
  "imports": [],
  "inputs": [],
  "meta": {
    "useMetadata": {
      "baz": "metadata inside component",
      "outputs": [
        "onMessage",
        "onEvent",
      ],
    },
  },
  "name": "MyBasicOutputsComponent",
  "refs": {},
  "state": {
    "name": {
      "code": "'PatrickJS'",
      "propertyType": "normal",
      "type": "property",
    },
  },
  "subComponents": [],
}
`;

exports[`Parse JSX > Javascript > BasicAttribute 1`] = `
{
  "@type": "@builder.io/mitosis/component",
  "children": [
    {
      "@type": "@builder.io/mitosis/node",
      "bindings": {
        "spellcheck": {
          "bindingType": "expression",
          "code": "true",
          "type": "single",
        },
      },
      "children": [],
      "meta": {},
      "name": "input",
      "properties": {
        "autocapitalize": "on",
        "autocomplete": "on",
      },
      "scope": {},
    },
  ],
  "context": {
    "get": {},
    "set": {},
  },
  "exports": {},
  "hooks": {
    "onEvent": [],
    "onMount": [],
  },
  "imports": [],
  "inputs": [],
  "meta": {},
  "name": "MyComponent",
  "refs": {},
  "state": {},
  "subComponents": [],
}
`;

exports[`Parse JSX > Javascript > BasicBooleanAttribute 1`] = `
{
  "@type": "@builder.io/mitosis/component",
  "children": [
    {
      "@type": "@builder.io/mitosis/node",
      "bindings": {},
      "children": [
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {
            "when": {
              "bindingType": "expression",
              "code": "props.children",
              "type": "single",
            },
          },
          "children": [
            {
              "@type": "@builder.io/mitosis/node",
              "bindings": {
                "_text": {
                  "bindingType": "expression",
                  "code": "props.children",
                  "type": "single",
                },
              },
              "children": [],
              "meta": {},
              "name": "div",
              "properties": {},
              "scope": {},
            },
            {
              "@type": "@builder.io/mitosis/node",
              "bindings": {
                "_text": {
                  "bindingType": "expression",
                  "code": "props.type",
                  "type": "single",
                },
              },
              "children": [],
              "meta": {},
              "name": "div",
              "properties": {},
              "scope": {},
            },
          ],
          "meta": {},
          "name": "Show",
          "properties": {},
          "scope": {},
        },
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {
            "toggle": {
              "bindingType": "expression",
              "code": "true",
              "type": "single",
            },
          },
          "children": [],
          "meta": {},
          "name": "MyBooleanAttributeComponent",
          "properties": {},
          "scope": {},
        },
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {
            "toggle": {
              "bindingType": "expression",
              "code": "true",
              "type": "single",
            },
          },
          "children": [],
          "meta": {},
          "name": "MyBooleanAttributeComponent",
          "properties": {},
          "scope": {},
        },
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {
            "list": {
              "bindingType": "expression",
              "code": "null",
              "type": "single",
            },
          },
          "children": [],
          "meta": {},
          "name": "MyBooleanAttributeComponent",
          "properties": {},
          "scope": {},
        },
      ],
      "meta": {},
      "name": "div",
      "properties": {},
      "scope": {},
    },
  ],
  "context": {
    "get": {},
    "set": {},
  },
  "exports": {},
  "hooks": {
    "onEvent": [],
    "onMount": [],
  },
  "imports": [
    {
      "importKind": "value",
      "imports": {
        "MyBooleanAttributeComponent": "default",
      },
      "path": "./basic-boolean-attribute-component.raw",
    },
  ],
  "inputs": [],
  "meta": {},
  "name": "MyBooleanAttribute",
  "refs": {},
  "state": {},
  "subComponents": [],
}
`;

exports[`Parse JSX > Javascript > BasicChildComponent 1`] = `
{
  "@type": "@builder.io/mitosis/component",
  "children": [
    {
      "@type": "@builder.io/mitosis/node",
      "bindings": {},
      "children": [
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {
            "id": {
              "bindingType": "expression",
              "code": "state.dev",
              "type": "single",
            },
          },
          "children": [],
          "meta": {},
          "name": "MyBasicComponent",
          "properties": {},
          "scope": {},
        },
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {},
          "children": [
            {
              "@type": "@builder.io/mitosis/node",
              "bindings": {
                "bye": {
                  "bindingType": "expression",
                  "code": "state.dev",
                  "type": "single",
                },
                "hi": {
                  "bindingType": "expression",
                  "code": "state.name",
                  "type": "single",
                },
              },
              "children": [],
              "meta": {},
              "name": "MyBasicOnMountUpdateComponent",
              "properties": {},
              "scope": {},
            },
            {
              "@type": "@builder.io/mitosis/node",
              "bindings": {
                "onEvent": {
                  "bindingType": "function",
                  "code": "state.log('Test')",
                  "type": "single",
                },
                "onMessageChange": {
                  "arguments": [
                    "name",
                  ],
                  "bindingType": "function",
                  "code": "state.name = name",
                  "type": "single",
                },
              },
              "children": [],
              "meta": {},
              "name": "MyBasicOutputsComponent",
              "properties": {
                "message": "Test",
              },
              "scope": {},
            },
          ],
          "meta": {},
          "name": "div",
          "properties": {},
          "scope": {},
        },
      ],
      "meta": {},
      "name": "div",
      "properties": {},
      "scope": {},
    },
  ],
  "context": {
    "get": {},
    "set": {},
  },
  "exports": {},
  "hooks": {
    "onEvent": [],
    "onMount": [],
  },
  "imports": [
    {
      "importKind": "value",
      "imports": {
        "MyBasicOnMountUpdateComponent": "default",
      },
      "path": "./basic-onMount-update.raw",
    },
    {
      "importKind": "value",
      "imports": {
        "MyBasicOutputsComponent": "default",
      },
      "path": "./basic-outputs.raw",
    },
    {
      "importKind": "value",
      "imports": {
        "MyBasicComponent": "default",
      },
      "path": "./basic.raw",
    },
  ],
  "inputs": [],
  "meta": {},
  "name": "MyBasicChildComponent",
  "refs": {},
  "state": {
    "dev": {
      "code": "'PatrickJS'",
      "propertyType": "normal",
      "type": "property",
    },
    "log": {
      "code": "function log(message) {
  console.log(message);
}",
      "type": "function",
    },
    "name": {
      "code": "'Steve'",
      "propertyType": "normal",
      "type": "property",
    },
  },
  "subComponents": [],
}
`;

exports[`Parse JSX > Javascript > BasicFor 1`] = `
{
  "@type": "@builder.io/mitosis/component",
  "children": [
    {
      "@type": "@builder.io/mitosis/node",
      "bindings": {},
      "children": [
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {
            "each": {
              "bindingType": "expression",
              "code": "state.names",
              "type": "single",
            },
          },
          "children": [
            {
              "@type": "@builder.io/mitosis/node",
              "bindings": {},
              "children": [
                {
                  "@type": "@builder.io/mitosis/node",
                  "bindings": {
                    "onChange": {
                      "arguments": [
                        "event",
                      ],
                      "bindingType": "function",
                      "code": "{
  state.name = event.target.value + ' and ' + person;
}",
                      "type": "single",
                    },
                    "value": {
                      "bindingType": "expression",
                      "code": "state.name",
                      "type": "single",
                    },
                  },
                  "children": [],
                  "meta": {},
                  "name": "input",
                  "properties": {},
                  "scope": {},
                },
                {
                  "@type": "@builder.io/mitosis/node",
                  "bindings": {},
                  "children": [],
                  "meta": {},
                  "name": "div",
                  "properties": {
                    "_text": "
            Hello ",
                  },
                  "scope": {},
                },
                {
                  "@type": "@builder.io/mitosis/node",
                  "bindings": {
                    "_text": {
                      "bindingType": "expression",
                      "code": "person",
                      "type": "single",
                    },
                  },
                  "children": [],
                  "meta": {},
                  "name": "div",
                  "properties": {},
                  "scope": {},
                },
                {
                  "@type": "@builder.io/mitosis/node",
                  "bindings": {},
                  "children": [],
                  "meta": {},
                  "name": "div",
                  "properties": {
                    "_text": "! I can run in Qwik, Web Component, React, Vue, Solid, or Liquid!
          ",
                  },
                  "scope": {},
                },
              ],
              "meta": {},
              "name": "Fragment",
              "properties": {},
              "scope": {},
            },
          ],
          "meta": {},
          "name": "For",
          "properties": {},
          "scope": {
            "forName": "person",
          },
        },
      ],
      "meta": {},
      "name": "div",
      "properties": {},
      "scope": {},
    },
  ],
  "context": {
    "get": {},
    "set": {},
  },
  "exports": {},
  "hooks": {
    "onEvent": [],
    "onMount": [
      {
        "code": "console.log('onMount code')",
        "onSSR": false,
      },
    ],
  },
  "imports": [],
  "inputs": [],
  "meta": {},
  "name": "MyBasicForComponent",
  "refs": {},
  "state": {
    "name": {
      "code": "'PatrickJS'",
      "propertyType": "normal",
      "type": "property",
    },
    "names": {
      "code": "['Steve', 'PatrickJS']",
      "propertyType": "normal",
      "type": "property",
    },
  },
  "subComponents": [],
}
`;

exports[`Parse JSX > Javascript > BasicRef 1`] = `
{
  "@type": "@builder.io/mitosis/component",
  "children": [
    {
      "@type": "@builder.io/mitosis/node",
      "bindings": {},
      "children": [
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {
            "when": {
              "bindingType": "expression",
              "code": "props.showInput",
              "type": "single",
            },
          },
          "children": [
            {
              "@type": "@builder.io/mitosis/node",
              "bindings": {},
              "children": [
                {
                  "@type": "@builder.io/mitosis/node",
                  "bindings": {
                    "css": {
                      "bindingType": "expression",
                      "code": "{
  color: 'red'
}",
                      "type": "single",
                    },
                    "onBlur": {
                      "arguments": [
                        "event",
                      ],
                      "bindingType": "function",
                      "code": "state.onBlur()",
                      "type": "single",
                    },
                    "onChange": {
                      "arguments": [
                        "event",
                      ],
                      "bindingType": "function",
                      "code": "state.name = event.target.value",
                      "type": "single",
                    },
                    "ref": {
                      "bindingType": "expression",
                      "code": "inputRef",
                      "type": "single",
                    },
                    "value": {
                      "bindingType": "expression",
                      "code": "state.name",
                      "type": "single",
                    },
                  },
                  "children": [],
                  "meta": {},
                  "name": "input",
                  "properties": {},
                  "scope": {},
                },
                {
                  "@type": "@builder.io/mitosis/node",
                  "bindings": {
                    "ref": {
                      "bindingType": "expression",
                      "code": "inputNoArgRef",
                      "type": "single",
                    },
                  },
                  "children": [
                    {
                      "@type": "@builder.io/mitosis/node",
                      "bindings": {},
                      "children": [],
                      "meta": {},
                      "name": "div",
                      "properties": {
                        "_text": "
            Choose a car:
          ",
                      },
                      "scope": {},
                    },
                  ],
                  "meta": {},
                  "name": "label",
                  "properties": {
                    "for": "cars",
                  },
                  "scope": {},
                },
                {
                  "@type": "@builder.io/mitosis/node",
                  "bindings": {},
                  "children": [
                    {
                      "@type": "@builder.io/mitosis/node",
                      "bindings": {},
                      "children": [
                        {
                          "@type": "@builder.io/mitosis/node",
                          "bindings": {},
                          "children": [],
                          "meta": {},
                          "name": "div",
                          "properties": {
                            "_text": "GR Supra",
                          },
                          "scope": {},
                        },
                      ],
                      "meta": {},
                      "name": "option",
                      "properties": {
                        "value": "supra",
                      },
                      "scope": {},
                    },
                    {
                      "@type": "@builder.io/mitosis/node",
                      "bindings": {},
                      "children": [
                        {
                          "@type": "@builder.io/mitosis/node",
                          "bindings": {},
                          "children": [],
                          "meta": {},
                          "name": "div",
                          "properties": {
                            "_text": "GR 86",
                          },
                          "scope": {},
                        },
                      ],
                      "meta": {},
                      "name": "option",
                      "properties": {
                        "value": "86",
                      },
                      "scope": {},
                    },
                  ],
                  "meta": {},
                  "name": "select",
                  "properties": {
                    "id": "cars",
                    "name": "cars",
                  },
                  "scope": {},
                },
              ],
              "meta": {},
              "name": "Fragment",
              "properties": {},
              "scope": {},
            },
          ],
          "meta": {},
          "name": "Show",
          "properties": {},
          "scope": {},
        },
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {},
          "children": [],
          "meta": {},
          "name": "div",
          "properties": {
            "_text": "
      Hello
      ",
          },
          "scope": {},
        },
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {
            "_text": {
              "bindingType": "expression",
              "code": "state.lowerCaseName()",
              "type": "single",
            },
          },
          "children": [],
          "meta": {},
          "name": "div",
          "properties": {},
          "scope": {},
        },
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {},
          "children": [],
          "meta": {},
          "name": "div",
          "properties": {
            "_text": "! I can run in React, Qwik, Vue, Solid, or Web Component!
    ",
          },
          "scope": {},
        },
      ],
      "meta": {},
      "name": "div",
      "properties": {},
      "scope": {},
    },
  ],
  "context": {
    "get": {},
    "set": {},
  },
  "exports": {},
  "hooks": {
    "onEvent": [],
    "onMount": [],
  },
  "imports": [],
  "inputs": [],
  "meta": {},
  "name": "MyBasicRefComponent",
  "refs": {
    "inputNoArgRef": {
      "argument": "null",
    },
    "inputRef": {
      "argument": "null",
    },
  },
  "state": {
    "lowerCaseName": {
      "code": "function lowerCaseName() {
  return state.name.toLowerCase();
}",
      "type": "function",
    },
    "name": {
      "code": "'PatrickJS'",
      "propertyType": "normal",
      "type": "property",
    },
    "onBlur": {
      "code": "function onBlur() {
  // Maintain focus
  inputRef?.focus();
}",
      "type": "function",
    },
  },
  "subComponents": [],
}
`;

exports[`Parse JSX > Javascript > BasicRefAssignment 1`] = `
{
  "@type": "@builder.io/mitosis/component",
  "children": [
    {
      "@type": "@builder.io/mitosis/node",
      "bindings": {},
      "children": [
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {
            "onClick": {
              "arguments": [
                "evt",
              ],
              "async": true,
              "bindingType": "function",
              "code": "await state.handlerClick(evt)",
              "type": "single",
            },
          },
          "children": [
            {
              "@type": "@builder.io/mitosis/node",
              "bindings": {},
              "children": [],
              "meta": {},
              "name": "div",
              "properties": {
                "_text": "Click",
              },
              "scope": {},
            },
          ],
          "meta": {},
          "name": "button",
          "properties": {},
          "scope": {},
        },
      ],
      "meta": {},
      "name": "div",
      "properties": {},
      "scope": {},
    },
  ],
  "context": {
    "get": {},
    "set": {},
  },
  "exports": {},
  "hooks": {
    "onEvent": [],
    "onMount": [],
  },
  "imports": [],
  "inputs": [],
  "meta": {},
  "name": "MyBasicRefAssignmentComponent",
  "refs": {
    "holdValueRef": {
      "argument": "'Patrick'",
    },
  },
  "state": {
    "handlerClick": {
      "code": "function handlerClick(event) {
  event.preventDefault();
  console.log('current value', holdValueRef);
  holdValueRef = holdValueRef + 'JS';
}",
      "type": "function",
    },
  },
  "subComponents": [],
}
`;

exports[`Parse JSX > Javascript > BasicRefPrevious 1`] = `
{
  "@type": "@builder.io/mitosis/component",
  "children": [
    {
      "@type": "@builder.io/mitosis/node",
      "bindings": {},
      "children": [
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {},
          "children": [
            {
              "@type": "@builder.io/mitosis/node",
              "bindings": {},
              "children": [],
              "meta": {},
              "name": "div",
              "properties": {
                "_text": "
        Now: ",
              },
              "scope": {},
            },
            {
              "@type": "@builder.io/mitosis/node",
              "bindings": {
                "_text": {
                  "bindingType": "expression",
                  "code": "state.count",
                  "type": "single",
                },
              },
              "children": [],
              "meta": {},
              "name": "div",
              "properties": {},
              "scope": {},
            },
            {
              "@type": "@builder.io/mitosis/node",
              "bindings": {},
              "children": [],
              "meta": {},
              "name": "div",
              "properties": {
                "_text": ", before: ",
              },
              "scope": {},
            },
            {
              "@type": "@builder.io/mitosis/node",
              "bindings": {
                "_text": {
                  "bindingType": "expression",
                  "code": "prevCount",
                  "type": "single",
                },
              },
              "children": [],
              "meta": {},
              "name": "div",
              "properties": {},
              "scope": {},
            },
          ],
          "meta": {},
          "name": "h1",
          "properties": {},
          "scope": {},
        },
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {
            "onClick": {
              "bindingType": "function",
              "code": "state.count += 1",
              "type": "single",
            },
          },
          "children": [
            {
              "@type": "@builder.io/mitosis/node",
              "bindings": {},
              "children": [],
              "meta": {},
              "name": "div",
              "properties": {
                "_text": "Increment",
              },
              "scope": {},
            },
          ],
          "meta": {},
          "name": "button",
          "properties": {},
          "scope": {},
        },
      ],
      "meta": {},
      "name": "div",
      "properties": {},
      "scope": {},
    },
  ],
  "context": {
    "get": {},
    "set": {},
  },
  "exports": {
    "usePrevious": {
      "code": "export function usePrevious(value) {
  // The ref object is a generic container whose current property is mutable ...
  // ... and can hold any value, similar to an instance property on a class
  let ref = useRef(null); // Store current value in ref

  onUpdate(() => {
    ref = value;
  }, [value]); // Only re-run if value changes
  // Return previous value (happens before update in useEffect above)

  return ref;
}",
      "isFunction": true,
      "usedInLocal": false,
    },
  },
  "hooks": {
    "onEvent": [],
    "onMount": [],
    "onUpdate": [
      {
        "code": "prevCount = state.count",
        "deps": "[state.count]",
        "depsArray": [
          "state.count",
        ],
      },
    ],
  },
  "imports": [],
  "inputs": [],
  "meta": {},
  "name": "MyPreviousComponent",
  "refs": {
    "prevCount": {
      "argument": "state.count",
    },
  },
  "state": {
    "count": {
      "code": "0",
      "propertyType": "normal",
      "type": "property",
    },
  },
  "subComponents": [],
}
`;

exports[`Parse JSX > Javascript > Button 1`] = `
{
  "@type": "@builder.io/mitosis/component",
  "children": [
    {
      "@type": "@builder.io/mitosis/node",
      "bindings": {},
      "children": [
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {
            "when": {
              "bindingType": "expression",
              "code": "props.link",
              "type": "single",
            },
          },
          "children": [
            {
              "@type": "@builder.io/mitosis/node",
              "bindings": {
                "href": {
                  "bindingType": "expression",
                  "code": "props.link",
                  "type": "single",
                },
                "props.attributes": {
                  "code": "props.attributes",
                  "spreadType": "normal",
                  "type": "spread",
                },
                "target": {
                  "bindingType": "expression",
                  "code": "props.openLinkInNewTab ? '_blank' : undefined",
                  "type": "single",
                },
              },
              "children": [
                {
                  "@type": "@builder.io/mitosis/node",
                  "bindings": {
                    "_text": {
                      "bindingType": "expression",
                      "code": "props.text",
                      "type": "single",
                    },
                  },
                  "children": [],
                  "meta": {},
                  "name": "div",
                  "properties": {},
                  "scope": {},
                },
              ],
              "meta": {},
              "name": "a",
              "properties": {},
              "scope": {},
            },
          ],
          "meta": {},
          "name": "Show",
          "properties": {},
          "scope": {},
        },
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {
            "when": {
              "bindingType": "expression",
              "code": "!props.link",
              "type": "single",
            },
          },
          "children": [
            {
              "@type": "@builder.io/mitosis/node",
              "bindings": {
                "props.attributes": {
                  "code": "props.attributes",
                  "spreadType": "normal",
                  "type": "spread",
                },
              },
              "children": [
                {
                  "@type": "@builder.io/mitosis/node",
                  "bindings": {
                    "_text": {
                      "bindingType": "expression",
                      "code": "props.text",
                      "type": "single",
                    },
                  },
                  "children": [],
                  "meta": {},
                  "name": "div",
                  "properties": {},
                  "scope": {},
                },
              ],
              "meta": {},
              "name": "button",
              "properties": {
                "type": "button",
              },
              "scope": {},
            },
          ],
          "meta": {},
          "name": "Show",
          "properties": {},
          "scope": {},
        },
      ],
      "meta": {},
      "name": "div",
      "properties": {},
      "scope": {},
    },
  ],
  "context": {
    "get": {},
    "set": {},
  },
  "exports": {},
  "hooks": {
    "onEvent": [],
    "onMount": [],
  },
  "imports": [],
  "inputs": [],
  "meta": {},
  "name": "Button",
  "refs": {},
  "state": {},
  "subComponents": [],
}
`;

exports[`Parse JSX > Javascript > Columns 1`] = `
{
  "@type": "@builder.io/mitosis/component",
  "children": [
    {
      "@type": "@builder.io/mitosis/node",
      "bindings": {
        "css": {
          "bindingType": "expression",
          "code": "{
  display: 'flex',
  flexDirection: 'column',
  alignItems: 'stretch',
  lineHeight: 'normal',
  '@media (max-width: 999px)': {
    flexDirection: 'row'
  },
  '@media (max-width: 639px)': {
    flexDirection: 'row-reverse'
  }
}",
          "type": "single",
        },
      },
      "children": [
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {
            "each": {
              "bindingType": "expression",
              "code": "props.columns",
              "type": "single",
            },
          },
          "children": [
            {
              "@type": "@builder.io/mitosis/node",
              "bindings": {
                "css": {
                  "bindingType": "expression",
                  "code": "{
  flexGrow: '1'
}",
                  "type": "single",
                },
              },
              "children": [
                {
                  "@type": "@builder.io/mitosis/node",
                  "bindings": {
                    "_text": {
                      "bindingType": "expression",
                      "code": "column.content",
                      "type": "single",
                    },
                  },
                  "children": [],
                  "meta": {},
                  "name": "div",
                  "properties": {},
                  "scope": {},
                },
                {
                  "@type": "@builder.io/mitosis/node",
                  "bindings": {
                    "_text": {
                      "bindingType": "expression",
                      "code": "index",
                      "type": "single",
                    },
                  },
                  "children": [],
                  "meta": {},
                  "name": "div",
                  "properties": {},
                  "scope": {},
                },
              ],
              "meta": {},
              "name": "div",
              "properties": {
                "class": "builder-column",
              },
              "scope": {},
            },
          ],
          "meta": {},
          "name": "For",
          "properties": {},
          "scope": {
            "forName": "column",
            "indexName": "index",
          },
        },
      ],
      "meta": {},
      "name": "div",
      "properties": {
        "class": "builder-columns",
      },
      "scope": {},
    },
  ],
  "context": {
    "get": {},
    "set": {},
  },
  "exports": {},
  "hooks": {
    "onEvent": [],
    "onMount": [],
  },
  "imports": [],
  "inputs": [],
  "meta": {},
  "name": "Column",
  "refs": {},
  "state": {
    "getColumnCssWidth": {
      "code": "getColumnCssWidth(index) {
  const columns = state.getColumns();
  const gutterSize = state.getGutterSize();
  const subtractWidth = gutterSize * (columns.length - 1) / columns.length;
  return \`calc(\${state.getWidth(index)}% - \${subtractWidth}px)\`;
}",
      "type": "method",
    },
    "getColumns": {
      "code": "getColumns() {
  return props.columns || [];
}",
      "type": "method",
    },
    "getGutterSize": {
      "code": "getGutterSize() {
  return typeof props.space === 'number' ? props.space || 0 : 20;
}",
      "type": "method",
    },
    "getWidth": {
      "code": "getWidth(index) {
  const columns = state.getColumns();
  return columns[index] && columns[index].width || 100 / columns.length;
}",
      "type": "method",
    },
  },
  "subComponents": [],
}
`;

exports[`Parse JSX > Javascript > ContentSlotHtml 1`] = `
{
  "@type": "@builder.io/mitosis/component",
  "children": [
    {
      "@type": "@builder.io/mitosis/node",
      "bindings": {},
      "children": [
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {
            "name": {
              "bindingType": "expression",
              "code": "props.slotTesting",
              "type": "single",
            },
          },
          "children": [],
          "meta": {},
          "name": "Slot",
          "properties": {},
          "scope": {},
        },
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {},
          "children": [
            {
              "@type": "@builder.io/mitosis/node",
              "bindings": {},
              "children": [],
              "meta": {},
              "name": "hr",
              "properties": {},
              "scope": {},
            },
          ],
          "meta": {},
          "name": "div",
          "properties": {},
          "scope": {},
        },
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {},
          "children": [
            {
              "@type": "@builder.io/mitosis/node",
              "bindings": {},
              "children": [],
              "meta": {},
              "name": "Slot",
              "properties": {},
              "scope": {},
            },
          ],
          "meta": {},
          "name": "div",
          "properties": {},
          "scope": {},
        },
      ],
      "meta": {},
      "name": "div",
      "properties": {},
      "scope": {},
    },
  ],
  "context": {
    "get": {},
    "set": {},
  },
  "exports": {},
  "hooks": {
    "onEvent": [],
    "onMount": [],
  },
  "imports": [],
  "inputs": [],
  "meta": {},
  "name": "ContentSlotCode",
  "refs": {},
  "state": {},
  "subComponents": [],
}
`;

exports[`Parse JSX > Javascript > ContentSlotJSX 1`] = `
{
  "@type": "@builder.io/mitosis/component",
  "children": [
    {
      "@type": "@builder.io/mitosis/node",
      "bindings": {
        "when": {
          "bindingType": "expression",
          "code": "props.slotReference",
          "type": "single",
        },
      },
      "children": [
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {
            "class": {
              "bindingType": "expression",
              "code": "state.cls",
              "type": "single",
            },
            "name": {
              "bindingType": "expression",
              "code": "props.slotContent ? 'name1' : 'name2'",
              "type": "single",
            },
            "onClick": {
              "bindingType": "function",
              "code": "state.show()",
              "type": "single",
            },
            "props.attributes": {
              "code": "props.attributes",
              "spreadType": "normal",
              "type": "spread",
            },
            "title": {
              "bindingType": "expression",
              "code": "props.slotContent ? 'title1' : 'title2'",
              "type": "single",
            },
          },
          "children": [
            {
              "@type": "@builder.io/mitosis/node",
              "bindings": {
                "when": {
                  "bindingType": "expression",
                  "code": "state.showContent && props.slotContent",
                  "type": "single",
                },
              },
              "children": [
                {
                  "@type": "@builder.io/mitosis/node",
                  "bindings": {},
                  "children": [
                    {
                      "@type": "@builder.io/mitosis/node",
                      "bindings": {
                        "_text": {
                          "bindingType": "expression",
                          "code": "props.content",
                          "type": "single",
                        },
                      },
                      "children": [],
                      "meta": {},
                      "name": "div",
                      "properties": {},
                      "scope": {},
                    },
                  ],
                  "meta": {},
                  "name": "Slot",
                  "properties": {
                    "name": "content",
                  },
                  "scope": {},
                },
              ],
              "meta": {},
              "name": "Show",
              "properties": {},
              "scope": {},
            },
            {
              "@type": "@builder.io/mitosis/node",
              "bindings": {},
              "children": [
                {
                  "@type": "@builder.io/mitosis/node",
                  "bindings": {},
                  "children": [],
                  "meta": {},
                  "name": "hr",
                  "properties": {},
                  "scope": {},
                },
              ],
              "meta": {},
              "name": "div",
              "properties": {},
              "scope": {},
            },
            {
              "@type": "@builder.io/mitosis/node",
              "bindings": {},
              "children": [
                {
                  "@type": "@builder.io/mitosis/node",
                  "bindings": {
                    "_text": {
                      "bindingType": "expression",
                      "code": "props.children",
                      "type": "single",
                    },
                  },
                  "children": [],
                  "meta": {},
                  "name": "div",
                  "properties": {},
                  "scope": {},
                },
              ],
              "meta": {},
              "name": "div",
              "properties": {},
              "scope": {},
            },
          ],
          "meta": {},
          "name": "div",
          "properties": {},
          "scope": {},
        },
      ],
      "meta": {},
      "name": "Show",
      "properties": {},
      "scope": {},
    },
  ],
  "context": {
    "get": {},
    "set": {},
  },
  "defaultProps": {
    "content": {
      "code": "''",
      "propertyType": "normal",
      "type": "property",
    },
    "slotContent": {
      "code": "undefined",
      "propertyType": "normal",
      "type": "property",
    },
    "slotReference": {
      "code": "undefined",
      "propertyType": "normal",
      "type": "property",
    },
  },
  "exports": {},
  "hooks": {
    "onEvent": [],
    "onMount": [],
  },
  "imports": [],
  "inputs": [],
  "meta": {},
  "name": "ContentSlotJsxCode",
  "refs": {},
  "state": {
    "cls": {
      "code": "get cls() {
  return props.slotContent && props.children ? \`\${state.name}-content\` : '';
}",
      "type": "getter",
    },
    "name": {
      "code": "'king'",
      "propertyType": "normal",
      "type": "property",
    },
    "show": {
      "code": "show() {
  props.slotContent ? 1 : '';
}",
      "type": "method",
    },
    "showContent": {
      "code": "false",
      "propertyType": "normal",
      "type": "property",
    },
  },
  "subComponents": [],
}
`;

exports[`Parse JSX > Javascript > CustomCode 1`] = `
{
  "@type": "@builder.io/mitosis/component",
  "children": [
    {
      "@type": "@builder.io/mitosis/node",
      "bindings": {
        "class": {
          "bindingType": "expression",
          "code": "'builder-custom-code' + (props.replaceNodes ? ' replace-nodes' : '')",
          "type": "single",
        },
        "innerHTML": {
          "bindingType": "expression",
          "code": "props.code",
          "type": "single",
        },
        "ref": {
          "bindingType": "expression",
          "code": "elem",
          "type": "single",
        },
      },
      "children": [],
      "meta": {},
      "name": "div",
      "properties": {},
      "scope": {},
    },
  ],
  "context": {
    "get": {},
    "set": {},
  },
  "exports": {},
  "hooks": {
    "onEvent": [],
    "onMount": [
      {
        "code": "state.findAndRunScripts()",
        "onSSR": false,
      },
    ],
  },
  "imports": [],
  "inputs": [],
  "meta": {},
  "name": "CustomCode",
  "refs": {
    "elem": {
      "argument": "null",
    },
  },
  "state": {
    "findAndRunScripts": {
      "code": "findAndRunScripts() {
  // TODO: Move this function to standalone one in '@builder.io/utils'
  if (elem && typeof window !== 'undefined') {
    /** @type {HTMLScriptElement[]} */
    const scripts = elem.getElementsByTagName('script');

    for (let i = 0; i < scripts.length; i++) {
      const script = scripts[i];

      if (script.src) {
        if (state.scriptsInserted.includes(script.src)) {
          continue;
        }

        state.scriptsInserted.push(script.src);
        const newScript = document.createElement('script');
        newScript.async = true;
        newScript.src = script.src;
        document.head.appendChild(newScript);
      } else if (!script.type || ['text/javascript', 'application/javascript', 'application/ecmascript'].includes(script.type)) {
        if (state.scriptsRun.includes(script.innerText)) {
          continue;
        }

        try {
          state.scriptsRun.push(script.innerText);
          new Function(script.innerText)();
        } catch (error) {
          console.warn('\`CustomCode\`: Error running script:', error);
        }
      }
    }
  }
}",
      "type": "method",
    },
    "scriptsInserted": {
      "code": "[]",
      "propertyType": "normal",
      "type": "property",
    },
    "scriptsRun": {
      "code": "[]",
      "propertyType": "normal",
      "type": "property",
    },
  },
  "subComponents": [],
}
`;

exports[`Parse JSX > Javascript > Embed 1`] = `
{
  "@type": "@builder.io/mitosis/component",
  "children": [
    {
      "@type": "@builder.io/mitosis/node",
      "bindings": {
        "class": {
          "bindingType": "expression",
          "code": "'builder-custom-code' + (props.replaceNodes ? ' replace-nodes' : '')",
          "type": "single",
        },
        "innerHTML": {
          "bindingType": "expression",
          "code": "props.code",
          "type": "single",
        },
        "ref": {
          "bindingType": "expression",
          "code": "elem",
          "type": "single",
        },
      },
      "children": [],
      "meta": {},
      "name": "div",
      "properties": {},
      "scope": {},
    },
  ],
  "context": {
    "get": {},
    "set": {},
  },
  "exports": {},
  "hooks": {
    "onEvent": [],
    "onMount": [
      {
        "code": "state.findAndRunScripts()",
        "onSSR": false,
      },
    ],
  },
  "imports": [],
  "inputs": [],
  "meta": {},
  "name": "CustomCode",
  "refs": {
    "elem": {
      "argument": "null",
    },
  },
  "state": {
    "findAndRunScripts": {
      "code": "findAndRunScripts() {
  // TODO: Move this function to standalone one in '@builder.io/utils'
  if (elem && typeof window !== 'undefined') {
    /** @type {HTMLScriptElement[]} */
    const scripts = elem.getElementsByTagName('script');

    for (let i = 0; i < scripts.length; i++) {
      const script = scripts[i];

      if (script.src) {
        if (state.scriptsInserted.includes(script.src)) {
          continue;
        }

        state.scriptsInserted.push(script.src);
        const newScript = document.createElement('script');
        newScript.async = true;
        newScript.src = script.src;
        document.head.appendChild(newScript);
      } else if (!script.type || ['text/javascript', 'application/javascript', 'application/ecmascript'].includes(script.type)) {
        if (state.scriptsRun.includes(script.innerText)) {
          continue;
        }

        try {
          state.scriptsRun.push(script.innerText);
          new Function(script.innerText)();
        } catch (error) {
          console.warn('\`CustomCode\`: Error running script:', error);
        }
      }
    }
  }
}",
      "type": "method",
    },
    "scriptsInserted": {
      "code": "[]",
      "propertyType": "normal",
      "type": "property",
    },
    "scriptsRun": {
      "code": "[]",
      "propertyType": "normal",
      "type": "property",
    },
  },
  "subComponents": [],
}
`;

exports[`Parse JSX > Javascript > Form 1`] = `
{
  "@type": "@builder.io/mitosis/component",
  "children": [
    {
      "@type": "@builder.io/mitosis/node",
      "bindings": {
        "action": {
          "bindingType": "expression",
          "code": "!props.sendWithJs && props.action",
          "type": "single",
        },
        "method": {
          "bindingType": "expression",
          "code": "props.method",
          "type": "single",
        },
        "name": {
          "bindingType": "expression",
          "code": "props.name",
          "type": "single",
        },
        "onSubmit": {
          "arguments": [
            "event",
          ],
          "bindingType": "function",
          "code": "state.onSubmit(event)",
          "type": "single",
        },
        "props.attributes": {
          "code": "props.attributes",
          "spreadType": "normal",
          "type": "spread",
        },
        "ref": {
          "bindingType": "expression",
          "code": "formRef",
          "type": "single",
        },
        "validate": {
          "bindingType": "expression",
          "code": "props.validate",
          "type": "single",
        },
      },
      "children": [
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {
            "when": {
              "bindingType": "expression",
              "code": "props.builderBlock && props.builderBlock.children",
              "type": "single",
            },
          },
          "children": [
            {
              "@type": "@builder.io/mitosis/node",
              "bindings": {
                "each": {
                  "bindingType": "expression",
                  "code": "props.builderBlock?.children",
                  "type": "single",
                },
              },
              "children": [
                {
                  "@type": "@builder.io/mitosis/node",
                  "bindings": {
                    "block": {
                      "bindingType": "expression",
                      "code": "block",
                      "type": "single",
                    },
                    "index": {
                      "bindingType": "expression",
                      "code": "index",
                      "type": "single",
                    },
                    "key": {
                      "bindingType": "expression",
                      "code": "block.id",
                      "type": "single",
                    },
                  },
                  "children": [],
                  "meta": {},
                  "name": "BuilderBlockComponent",
                  "properties": {},
                  "scope": {},
                },
              ],
              "meta": {},
              "name": "For",
              "properties": {},
              "scope": {
                "forName": "block",
                "indexName": "index",
              },
            },
          ],
          "meta": {},
          "name": "Show",
          "properties": {},
          "scope": {},
        },
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {
            "when": {
              "bindingType": "expression",
              "code": "state.submissionState === 'error'",
              "type": "single",
            },
          },
          "children": [
            {
              "@type": "@builder.io/mitosis/node",
              "bindings": {
                "blocks": {
                  "bindingType": "expression",
                  "code": "props.errorMessage",
                  "type": "single",
                },
              },
              "children": [],
              "meta": {},
              "name": "BuilderBlocks",
              "properties": {
                "dataPath": "errorMessage",
              },
              "scope": {},
            },
          ],
          "meta": {},
          "name": "Show",
          "properties": {},
          "scope": {},
        },
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {
            "when": {
              "bindingType": "expression",
              "code": "state.submissionState === 'sending'",
              "type": "single",
            },
          },
          "children": [
            {
              "@type": "@builder.io/mitosis/node",
              "bindings": {
                "blocks": {
                  "bindingType": "expression",
                  "code": "props.sendingMessage",
                  "type": "single",
                },
              },
              "children": [],
              "meta": {},
              "name": "BuilderBlocks",
              "properties": {
                "dataPath": "sendingMessage",
              },
              "scope": {},
            },
          ],
          "meta": {},
          "name": "Show",
          "properties": {},
          "scope": {},
        },
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {
            "when": {
              "bindingType": "expression",
              "code": "state.submissionState === 'error' && state.responseData",
              "type": "single",
            },
          },
          "children": [
            {
              "@type": "@builder.io/mitosis/node",
              "bindings": {
                "css": {
                  "bindingType": "expression",
                  "code": "{
  padding: '10px',
  color: 'red',
  textAlign: 'center'
}",
                  "type": "single",
                },
              },
              "children": [
                {
                  "@type": "@builder.io/mitosis/node",
                  "bindings": {
                    "_text": {
                      "bindingType": "expression",
                      "code": "JSON.stringify(state.responseData, null, 2)",
                      "type": "single",
                    },
                  },
                  "children": [],
                  "meta": {},
                  "name": "div",
                  "properties": {},
                  "scope": {},
                },
              ],
              "meta": {},
              "name": "pre",
              "properties": {
                "class": "builder-form-error-text",
              },
              "scope": {},
            },
          ],
          "meta": {},
          "name": "Show",
          "properties": {},
          "scope": {},
        },
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {
            "when": {
              "bindingType": "expression",
              "code": "state.submissionState === 'success'",
              "type": "single",
            },
          },
          "children": [
            {
              "@type": "@builder.io/mitosis/node",
              "bindings": {
                "blocks": {
                  "bindingType": "expression",
                  "code": "props.successMessage",
                  "type": "single",
                },
              },
              "children": [],
              "meta": {},
              "name": "BuilderBlocks",
              "properties": {
                "dataPath": "successMessage",
              },
              "scope": {},
            },
          ],
          "meta": {},
          "name": "Show",
          "properties": {},
          "scope": {},
        },
      ],
      "meta": {},
      "name": "form",
      "properties": {},
      "scope": {},
    },
  ],
  "context": {
    "get": {},
    "set": {},
  },
  "exports": {},
  "hooks": {
    "onEvent": [],
    "onMount": [],
  },
  "imports": [
    {
      "importKind": "value",
      "imports": {
        "Builder": "Builder",
        "builder": "builder",
      },
      "path": "@builder.io/sdk",
    },
    {
      "importKind": "value",
      "imports": {
        "BuilderBlockComponent": "BuilderBlock",
        "BuilderBlocks": "BuilderBlocks",
        "get": "get",
        "set": "set",
      },
      "path": "@fake",
    },
  ],
  "inputs": [],
  "meta": {},
  "name": "FormComponent",
  "refs": {
    "formRef": {
      "argument": "null",
    },
  },
  "state": {
    "formErrorMessage": {
      "code": "''",
      "propertyType": "normal",
      "type": "property",
    },
    "formState": {
      "code": "'unsubmitted'",
      "propertyType": "normal",
      "type": "property",
    },
    "onSubmit": {
      "code": "onSubmit(event) {
  const sendWithJs = props.sendWithJs || props.sendSubmissionsTo === 'email';

  if (props.sendSubmissionsTo === 'zapier') {
    event.preventDefault();
  } else if (sendWithJs) {
    if (!(props.action || props.sendSubmissionsTo === 'email')) {
      event.preventDefault();
      return;
    }

    event.preventDefault();
    const el = event.currentTarget;
    const headers = props.customHeaders || {};
    let body;
    const formData = new FormData(el); // TODO: maybe support null

    const formPairs = Array.from(event.currentTarget.querySelectorAll('input,select,textarea')).filter(el => !!el.name).map(el => {
      let value;
      const key = el.name;

      if (el instanceof HTMLInputElement) {
        if (el.type === 'radio') {
          if (el.checked) {
            value = el.name;
            return {
              key,
              value
            };
          }
        } else if (el.type === 'checkbox') {
          value = el.checked;
        } else if (el.type === 'number' || el.type === 'range') {
          const num = el.valueAsNumber;

          if (!isNaN(num)) {
            value = num;
          }
        } else if (el.type === 'file') {
          // TODO: one vs multiple files
          value = el.files;
        } else {
          value = el.value;
        }
      } else {
        value = el.value;
      }

      return {
        key,
        value
      };
    });
    let contentType = props.contentType;

    if (props.sendSubmissionsTo === 'email') {
      contentType = 'multipart/form-data';
    }

    Array.from(formPairs).forEach(({
      value
    }) => {
      if (value instanceof File || Array.isArray(value) && value[0] instanceof File || value instanceof FileList) {
        contentType = 'multipart/form-data';
      }
    }); // TODO: send as urlEncoded or multipart by default
    // because of ease of use and reliability in browser API
    // for encoding the form?

    if (contentType !== 'application/json') {
      body = formData;
    } else {
      // Json
      const json = {};
      Array.from(formPairs).forEach(({
        value,
        key
      }) => {
        set(json, key, value);
      });
      body = JSON.stringify(json);
    }

    if (contentType && contentType !== 'multipart/form-data') {
      if (
      /* Zapier doesn't allow content-type header to be sent from browsers */
      !(sendWithJs && props.action?.includes('zapier.com'))) {
        headers['content-type'] = contentType;
      }
    }

    const presubmitEvent = new CustomEvent('presubmit', {
      detail: {
        body
      }
    });

    if (formRef) {
      formRef.dispatchEvent(presubmitEvent);

      if (presubmitEvent.defaultPrevented) {
        return;
      }
    }

    state.formState = 'sending';
    const formUrl = \`\${builder.env === 'dev' ? 'http://localhost:5000' : 'https://builder.io'}/api/v1/form-submit?apiKey=\${builder.apiKey}&to=\${btoa(props.sendSubmissionsToEmail || '')}&name=\${encodeURIComponent(props.name || '')}\`;
    fetch(props.sendSubmissionsTo === 'email' ? formUrl : props.action
    /* TODO: throw error if no action URL */
    , {
      body,
      headers,
      method: props.method || 'post'
    }).then(async res => {
      let body;
      const contentType = res.headers.get('content-type');

      if (contentType && contentType.indexOf('application/json') !== -1) {
        body = await res.json();
      } else {
        body = await res.text();
      }

      if (!res.ok && props.errorMessagePath) {
        /* TODO: allow supplying an error formatter function */
        let message = get(body, props.errorMessagePath);

        if (message) {
          if (typeof message !== 'string') {
            /* TODO: ideally convert json to yaml so it woul dbe like
             error: - email has been taken */
            message = JSON.stringify(message);
          }

          state.formErrorMessage = message;
        }
      }

      state.responseData = body;
      state.formState = res.ok ? 'success' : 'error';

      if (res.ok) {
        const submitSuccessEvent = new CustomEvent('submit:success', {
          detail: {
            res,
            body
          }
        });

        if (formRef) {
          formRef.dispatchEvent(submitSuccessEvent);

          if (submitSuccessEvent.defaultPrevented) {
            return;
          }
          /* TODO: option to turn this on/off? */


          if (props.resetFormOnSubmit !== false) {
            formRef.reset();
          }
        }
        /* TODO: client side route event first that can be preventDefaulted */


        if (props.successUrl) {
          if (formRef) {
            const event = new CustomEvent('route', {
              detail: {
                url: props.successUrl
              }
            });
            formRef.dispatchEvent(event);

            if (!event.defaultPrevented) {
              location.href = props.successUrl;
            }
          } else {
            location.href = props.successUrl;
          }
        }
      }
    }, err => {
      const submitErrorEvent = new CustomEvent('submit:error', {
        detail: {
          error: err
        }
      });

      if (formRef) {
        formRef.dispatchEvent(submitErrorEvent);

        if (submitErrorEvent.defaultPrevented) {
          return;
        }
      }

      state.responseData = err;
      state.formState = 'error';
    });
  }
}",
      "type": "method",
    },
    "responseData": {
      "code": "null",
      "propertyType": "normal",
      "type": "property",
    },
    "submissionState": {
      "code": "get submissionState() {
  return Builder.isEditing && props.previewState || state.formState;
}",
      "type": "getter",
    },
  },
  "subComponents": [],
}
`;

exports[`Parse JSX > Javascript > Image 1`] = `
{
  "@type": "@builder.io/mitosis/component",
  "children": [
    {
      "@type": "@builder.io/mitosis/node",
      "bindings": {},
      "children": [
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {
            "ref": {
              "bindingType": "expression",
              "code": "pictureRef",
              "type": "single",
            },
          },
          "children": [
            {
              "@type": "@builder.io/mitosis/node",
              "bindings": {
                "when": {
                  "bindingType": "expression",
                  "code": "!state.useLazyLoading() || state.load",
                  "type": "single",
                },
              },
              "children": [
                {
                  "@type": "@builder.io/mitosis/node",
                  "bindings": {
                    "alt": {
                      "bindingType": "expression",
                      "code": "props.altText",
                      "type": "single",
                    },
                    "aria-role": {
                      "bindingType": "expression",
                      "code": "props.altText ? 'presentation' : undefined",
                      "type": "single",
                    },
                    "class": {
                      "bindingType": "expression",
                      "code": "'builder-image' + (props._class ? ' ' + props._class : '')",
                      "type": "single",
                    },
                    "css": {
                      "bindingType": "expression",
                      "code": "{
  opacity: '1',
  transition: 'opacity 0.2s ease-in-out',
  objectFit: 'cover',
  objectPosition: 'center'
}",
                      "type": "single",
                    },
                    "onLoad": {
                      "bindingType": "function",
                      "code": "state.setLoaded()",
                      "type": "single",
                    },
                    "sizes": {
                      "bindingType": "expression",
                      "code": "props.sizes",
                      "type": "single",
                    },
                    "src": {
                      "bindingType": "expression",
                      "code": "props.image",
                      "type": "single",
                    },
                    "srcset": {
                      "bindingType": "expression",
                      "code": "props.srcset",
                      "type": "single",
                    },
                  },
                  "children": [],
                  "meta": {},
                  "name": "img",
                  "properties": {},
                  "scope": {},
                },
              ],
              "meta": {},
              "name": "Show",
              "properties": {},
              "scope": {},
            },
            {
              "@type": "@builder.io/mitosis/node",
              "bindings": {
                "srcset": {
                  "bindingType": "expression",
                  "code": "props.srcset",
                  "type": "single",
                },
              },
              "children": [],
              "meta": {},
              "name": "source",
              "properties": {},
              "scope": {},
            },
          ],
          "meta": {},
          "name": "picture",
          "properties": {},
          "scope": {},
        },
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {
            "_text": {
              "bindingType": "expression",
              "code": "props.children",
              "type": "single",
            },
          },
          "children": [],
          "meta": {},
          "name": "div",
          "properties": {},
          "scope": {},
        },
      ],
      "meta": {},
      "name": "div",
      "properties": {},
      "scope": {},
    },
  ],
  "context": {
    "get": {},
    "set": {},
  },
  "exports": {},
  "hooks": {
    "onEvent": [],
    "onMount": [
      {
        "code": "if (state.useLazyLoading()) {
  // throttled scroll capture listener
  const listener = () => {
    if (pictureRef) {
      const rect = pictureRef.getBoundingClientRect();
      const buffer = window.innerHeight / 2;

      if (rect.top < window.innerHeight + buffer) {
        state.load = true;
        state.scrollListener = null;
        window.removeEventListener('scroll', listener);
      }
    }
  };

  state.scrollListener = listener;
  window.addEventListener('scroll', listener, {
    capture: true,
    passive: true
  });
  listener();
}",
        "onSSR": false,
      },
    ],
    "onUnMount": {
      "code": "if (state.scrollListener) {
  window.removeEventListener('scroll', state.scrollListener);
}",
    },
  },
  "imports": [],
  "inputs": [],
  "meta": {},
  "name": "Image",
  "refs": {
    "pictureRef": {
      "argument": "",
    },
  },
  "state": {
    "imageLoaded": {
      "code": "false",
      "propertyType": "normal",
      "type": "property",
    },
    "isBrowser": {
      "code": "function isBrowser() {
  return typeof window !== 'undefined' && window.navigator.product != 'ReactNative';
}",
      "type": "function",
    },
    "load": {
      "code": "false",
      "propertyType": "normal",
      "type": "property",
    },
    "scrollListener": {
      "code": "null",
      "propertyType": "normal",
      "type": "property",
    },
    "setLoaded": {
      "code": "setLoaded() {
  state.imageLoaded = true;
}",
      "type": "method",
    },
    "useLazyLoading": {
      "code": "useLazyLoading() {
  // TODO: Add more checks here, like testing for real web browsers
  return !!props.lazy && state.isBrowser();
}",
      "type": "method",
    },
  },
  "subComponents": [],
}
`;

exports[`Parse JSX > Javascript > Image State 1`] = `
{
  "@type": "@builder.io/mitosis/component",
  "children": [
    {
      "@type": "@builder.io/mitosis/node",
      "bindings": {},
      "children": [
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {
            "each": {
              "bindingType": "expression",
              "code": "state.images",
              "type": "single",
            },
          },
          "children": [
            {
              "@type": "@builder.io/mitosis/node",
              "bindings": {},
              "children": [
                {
                  "@type": "@builder.io/mitosis/node",
                  "bindings": {
                    "key": {
                      "bindingType": "expression",
                      "code": "itemIndex",
                      "type": "single",
                    },
                    "src": {
                      "bindingType": "expression",
                      "code": "item",
                      "type": "single",
                    },
                  },
                  "children": [],
                  "meta": {},
                  "name": "img",
                  "properties": {
                    "class": "custom-class",
                  },
                  "scope": {},
                },
              ],
              "meta": {},
              "name": "Fragment",
              "properties": {},
              "scope": {},
            },
          ],
          "meta": {},
          "name": "For",
          "properties": {},
          "scope": {
            "forName": "item",
            "indexName": "itemIndex",
          },
        },
      ],
      "meta": {},
      "name": "div",
      "properties": {},
      "scope": {},
    },
  ],
  "context": {
    "get": {},
    "set": {},
  },
  "exports": {},
  "hooks": {
    "onEvent": [],
    "onMount": [],
  },
  "imports": [],
  "inputs": [],
  "meta": {},
  "name": "ImgStateComponent",
  "refs": {},
  "state": {
    "canShow": {
      "code": "true",
      "propertyType": "normal",
      "type": "property",
    },
    "images": {
      "code": "['http://example.com/qwik.png']",
      "propertyType": "normal",
      "type": "property",
    },
  },
  "subComponents": [],
}
`;

exports[`Parse JSX > Javascript > Img 1`] = `
{
  "@type": "@builder.io/mitosis/component",
  "children": [
    {
      "@type": "@builder.io/mitosis/node",
      "bindings": {
        "alt": {
          "bindingType": "expression",
          "code": "props.altText",
          "type": "single",
        },
        "key": {
          "bindingType": "expression",
          "code": "Builder.isEditing && props.imgSrc || 'default-key'",
          "type": "single",
        },
        "props.attributes": {
          "code": "props.attributes",
          "spreadType": "normal",
          "type": "spread",
        },
        "src": {
          "bindingType": "expression",
          "code": "props.imgSrc",
          "type": "single",
        },
        "style": {
          "bindingType": "expression",
          "code": "{
  objectFit: props.backgroundSize || 'cover',
  objectPosition: props.backgroundPosition || 'center'
}",
          "type": "single",
        },
      },
      "children": [],
      "meta": {},
      "name": "img",
      "properties": {},
      "scope": {},
    },
  ],
  "context": {
    "get": {},
    "set": {},
  },
  "exports": {},
  "hooks": {
    "onEvent": [],
    "onMount": [],
  },
  "imports": [
    {
      "importKind": "value",
      "imports": {
        "Builder": "Builder",
      },
      "path": "@builder.io/sdk",
    },
  ],
  "inputs": [],
  "meta": {},
  "name": "ImgComponent",
  "refs": {},
  "state": {},
  "subComponents": [],
}
`;

exports[`Parse JSX > Javascript > Input 1`] = `
{
  "@type": "@builder.io/mitosis/component",
  "children": [
    {
      "@type": "@builder.io/mitosis/node",
      "bindings": {
        "defaultValue": {
          "bindingType": "expression",
          "code": "props.defaultValue",
          "type": "single",
        },
        "key": {
          "bindingType": "expression",
          "code": "Builder.isEditing && props.defaultValue ? props.defaultValue : 'default-key'",
          "type": "single",
        },
        "name": {
          "bindingType": "expression",
          "code": "props.name",
          "type": "single",
        },
        "onChange": {
          "arguments": [
            "event",
          ],
          "bindingType": "function",
          "code": "props.onChange?.(event.target.value)",
          "type": "single",
        },
        "placeholder": {
          "bindingType": "expression",
          "code": "props.placeholder",
          "type": "single",
        },
        "props.attributes": {
          "code": "props.attributes",
          "spreadType": "normal",
          "type": "spread",
        },
        "required": {
          "bindingType": "expression",
          "code": "props.required",
          "type": "single",
        },
        "type": {
          "bindingType": "expression",
          "code": "props.type",
          "type": "single",
        },
        "value": {
          "bindingType": "expression",
          "code": "props.value",
          "type": "single",
        },
      },
      "children": [],
      "meta": {},
      "name": "input",
      "properties": {},
      "scope": {},
    },
  ],
  "context": {
    "get": {},
    "set": {},
  },
  "exports": {},
  "hooks": {
    "onEvent": [],
    "onMount": [],
  },
  "imports": [
    {
      "importKind": "value",
      "imports": {
        "Builder": "Builder",
      },
      "path": "@builder.io/sdk",
    },
  ],
  "inputs": [],
  "meta": {},
  "name": "FormInputComponent",
  "refs": {},
  "state": {},
  "subComponents": [],
}
`;

exports[`Parse JSX > Javascript > InputParent 1`] = `
{
  "@type": "@builder.io/mitosis/component",
  "children": [
    {
      "@type": "@builder.io/mitosis/node",
      "bindings": {
        "onChange": {
          "arguments": [
            "value",
          ],
          "bindingType": "function",
          "code": "state.handleChange(value)",
          "type": "single",
        },
      },
      "children": [],
      "meta": {},
      "name": "FormInputComponent",
      "properties": {
        "name": "kingzez",
        "type": "text",
      },
      "scope": {},
    },
  ],
  "context": {
    "get": {},
    "set": {},
  },
  "exports": {},
  "hooks": {
    "onEvent": [],
    "onMount": [],
  },
  "imports": [
    {
      "importKind": "value",
      "imports": {
        "FormInputComponent": "default",
      },
      "path": "./input.raw",
    },
  ],
  "inputs": [],
  "meta": {},
  "name": "Stepper",
  "refs": {},
  "state": {
    "handleChange": {
      "code": "handleChange(value) {
  console.log(value);
}",
      "type": "method",
    },
  },
  "subComponents": [],
}
`;

exports[`Parse JSX > Javascript > NestedStore 1`] = `
{
  "@type": "@builder.io/mitosis/component",
  "children": [
    {
      "@type": "@builder.io/mitosis/node",
      "bindings": {
        "id": {
          "bindingType": "expression",
          "code": "state._id",
          "type": "single",
        },
      },
      "children": [
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {},
          "children": [],
          "meta": {},
          "name": "div",
          "properties": {
            "_text": "
      Test
      ",
          },
          "scope": {},
        },
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {
            "id": {
              "bindingType": "expression",
              "code": "state._messageId",
              "type": "single",
            },
          },
          "children": [
            {
              "@type": "@builder.io/mitosis/node",
              "bindings": {},
              "children": [],
              "meta": {},
              "name": "div",
              "properties": {
                "_text": "Message",
              },
              "scope": {},
            },
          ],
          "meta": {},
          "name": "p",
          "properties": {},
          "scope": {},
        },
      ],
      "meta": {},
      "name": "div",
      "properties": {},
      "scope": {},
    },
  ],
  "context": {
    "get": {},
    "set": {},
  },
  "exports": {},
  "hooks": {
    "onEvent": [],
    "onMount": [],
  },
  "imports": [],
  "inputs": [],
  "meta": {},
  "name": "NestedStore",
  "refs": {},
  "state": {
    "_id": {
      "code": "\\"abc\\"",
      "propertyType": "normal",
      "type": "property",
    },
    "_messageId": {
      "code": "state._id + \\"-message\\"",
      "propertyType": "normal",
      "type": "property",
    },
  },
  "subComponents": [],
}
`;

exports[`Parse JSX > Javascript > RawText 1`] = `
{
  "@type": "@builder.io/mitosis/component",
  "children": [
    {
      "@type": "@builder.io/mitosis/node",
      "bindings": {
        "class": {
          "bindingType": "expression",
          "code": "props.attributes?.class || props.attributes?.className",
          "type": "single",
        },
        "innerHTML": {
          "bindingType": "expression",
          "code": "props.text || ''",
          "type": "single",
        },
      },
      "children": [],
      "meta": {},
      "name": "span",
      "properties": {},
      "scope": {},
    },
  ],
  "context": {
    "get": {},
    "set": {},
  },
  "exports": {},
  "hooks": {
    "onEvent": [],
    "onMount": [],
  },
  "imports": [],
  "inputs": [],
  "meta": {},
  "name": "RawText",
  "refs": {},
  "state": {},
  "subComponents": [],
}
`;

exports[`Parse JSX > Javascript > Section 1`] = `
{
  "@type": "@builder.io/mitosis/component",
  "children": [
    {
      "@type": "@builder.io/mitosis/node",
      "bindings": {
        "props.attributes": {
          "code": "props.attributes",
          "spreadType": "normal",
          "type": "spread",
        },
        "style": {
          "bindingType": "expression",
          "code": "props.maxWidth && typeof props.maxWidth === 'number' ? {
  maxWidth: props.maxWidth
} : undefined",
          "type": "single",
        },
      },
      "children": [
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {
            "_text": {
              "bindingType": "expression",
              "code": "props.children",
              "type": "single",
            },
          },
          "children": [],
          "meta": {},
          "name": "div",
          "properties": {},
          "scope": {},
        },
      ],
      "meta": {},
      "name": "section",
      "properties": {},
      "scope": {},
    },
  ],
  "context": {
    "get": {},
    "set": {},
  },
  "exports": {},
  "hooks": {
    "onEvent": [],
    "onMount": [],
  },
  "imports": [],
  "inputs": [],
  "meta": {},
  "name": "SectionComponent",
  "refs": {},
  "state": {},
  "subComponents": [],
}
`;

exports[`Parse JSX > Javascript > Section 2`] = `
{
  "@type": "@builder.io/mitosis/component",
  "children": [
    {
      "@type": "@builder.io/mitosis/node",
      "bindings": {
        "when": {
          "bindingType": "expression",
          "code": "state.max",
          "type": "single",
        },
      },
      "children": [
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {
            "each": {
              "bindingType": "expression",
              "code": "state.items",
              "type": "single",
            },
          },
          "children": [
            {
              "@type": "@builder.io/mitosis/node",
              "bindings": {
                "props.attributes": {
                  "code": "props.attributes",
                  "spreadType": "normal",
                  "type": "spread",
                },
                "style": {
                  "bindingType": "expression",
                  "code": "{
  maxWidth: item + state.max
}",
                  "type": "single",
                },
              },
              "children": [
                {
                  "@type": "@builder.io/mitosis/node",
                  "bindings": {
                    "_text": {
                      "bindingType": "expression",
                      "code": "props.children",
                      "type": "single",
                    },
                  },
                  "children": [],
                  "meta": {},
                  "name": "div",
                  "properties": {},
                  "scope": {},
                },
              ],
              "meta": {},
              "name": "section",
              "properties": {},
              "scope": {},
            },
          ],
          "meta": {},
          "name": "For",
          "properties": {},
          "scope": {
            "forName": "item",
          },
        },
      ],
      "meta": {},
      "name": "Show",
      "properties": {},
      "scope": {},
    },
  ],
  "context": {
    "get": {},
    "set": {},
  },
  "exports": {},
  "hooks": {
    "onEvent": [],
    "onMount": [],
  },
  "imports": [],
  "inputs": [],
  "meta": {},
  "name": "SectionStateComponent",
  "refs": {},
  "state": {
    "items": {
      "code": "[42]",
      "propertyType": "normal",
      "type": "property",
    },
    "max": {
      "code": "42",
      "propertyType": "normal",
      "type": "property",
    },
  },
  "subComponents": [],
}
`;

exports[`Parse JSX > Javascript > Select 1`] = `
{
  "@type": "@builder.io/mitosis/component",
  "children": [
    {
      "@type": "@builder.io/mitosis/node",
      "bindings": {
        "defaultValue": {
          "bindingType": "expression",
          "code": "props.defaultValue",
          "type": "single",
        },
        "key": {
          "bindingType": "expression",
          "code": "Builder.isEditing && props.defaultValue ? props.defaultValue : 'default-key'",
          "type": "single",
        },
        "name": {
          "bindingType": "expression",
          "code": "props.name",
          "type": "single",
        },
        "props.attributes": {
          "code": "props.attributes",
          "spreadType": "normal",
          "type": "spread",
        },
        "value": {
          "bindingType": "expression",
          "code": "props.value",
          "type": "single",
        },
      },
      "children": [
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {
            "each": {
              "bindingType": "expression",
              "code": "props.options",
              "type": "single",
            },
          },
          "children": [
            {
              "@type": "@builder.io/mitosis/node",
              "bindings": {
                "data-index": {
                  "bindingType": "expression",
                  "code": "index",
                  "type": "single",
                },
                "value": {
                  "bindingType": "expression",
                  "code": "option.value",
                  "type": "single",
                },
              },
              "children": [
                {
                  "@type": "@builder.io/mitosis/node",
                  "bindings": {
                    "_text": {
                      "bindingType": "expression",
                      "code": "option.name || option.value",
                      "type": "single",
                    },
                  },
                  "children": [],
                  "meta": {},
                  "name": "div",
                  "properties": {},
                  "scope": {},
                },
              ],
              "meta": {},
              "name": "option",
              "properties": {},
              "scope": {},
            },
          ],
          "meta": {},
          "name": "For",
          "properties": {},
          "scope": {
            "forName": "option",
            "indexName": "index",
          },
        },
      ],
      "meta": {},
      "name": "select",
      "properties": {},
      "scope": {},
    },
  ],
  "context": {
    "get": {},
    "set": {},
  },
  "exports": {},
  "hooks": {
    "onEvent": [],
    "onMount": [],
  },
  "imports": [
    {
      "importKind": "value",
      "imports": {
        "Builder": "Builder",
      },
      "path": "@builder.io/sdk",
    },
  ],
  "inputs": [],
  "meta": {},
  "name": "SelectComponent",
  "refs": {},
  "state": {},
  "subComponents": [],
}
`;

exports[`Parse JSX > Javascript > SlotDefault 1`] = `
{
  "@type": "@builder.io/mitosis/component",
  "children": [
    {
      "@type": "@builder.io/mitosis/node",
      "bindings": {},
      "children": [
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {},
          "children": [
            {
              "@type": "@builder.io/mitosis/node",
              "bindings": {},
              "children": [
                {
                  "@type": "@builder.io/mitosis/node",
                  "bindings": {},
                  "children": [],
                  "meta": {},
                  "name": "div",
                  "properties": {
                    "_text": "Default content",
                  },
                  "scope": {},
                },
              ],
              "meta": {},
              "name": "div",
              "properties": {
                "class": "default-slot",
              },
              "scope": {},
            },
          ],
          "meta": {},
          "name": "Slot",
          "properties": {},
          "scope": {},
        },
      ],
      "meta": {},
      "name": "div",
      "properties": {},
      "scope": {},
    },
  ],
  "context": {
    "get": {},
    "set": {},
  },
  "exports": {},
  "hooks": {
    "onEvent": [],
    "onMount": [],
  },
  "imports": [],
  "inputs": [],
  "meta": {},
  "name": "SlotCode",
  "refs": {},
  "state": {},
  "subComponents": [],
}
`;

exports[`Parse JSX > Javascript > SlotHtml 1`] = `
{
  "@type": "@builder.io/mitosis/component",
  "children": [
    {
      "@type": "@builder.io/mitosis/node",
      "bindings": {},
      "children": [
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {},
          "children": [
            {
              "@type": "@builder.io/mitosis/node",
              "bindings": {
                "testing": {
                  "bindingType": "expression",
                  "code": "<div>Hello</div>",
                  "type": "single",
                },
              },
              "children": [],
              "meta": {},
              "name": "Slot",
              "properties": {},
              "scope": {},
              "slots": {
                "testing": [
                  {
                    "@type": "@builder.io/mitosis/node",
                    "bindings": {},
                    "children": [
                      {
                        "@type": "@builder.io/mitosis/node",
                        "bindings": {},
                        "children": [],
                        "meta": {},
                        "name": "div",
                        "properties": {
                          "_text": "Hello",
                        },
                        "scope": {},
                      },
                    ],
                    "meta": {},
                    "name": "div",
                    "properties": {},
                    "scope": {},
                  },
                ],
              },
            },
          ],
          "meta": {},
          "name": "ContentSlotCode",
          "properties": {},
          "scope": {},
        },
      ],
      "meta": {},
      "name": "div",
      "properties": {},
      "scope": {},
    },
  ],
  "context": {
    "get": {},
    "set": {},
  },
  "exports": {},
  "hooks": {
    "onEvent": [],
    "onMount": [],
  },
  "imports": [
    {
      "importKind": "value",
      "imports": {
        "ContentSlotCode": "default",
      },
      "path": "./content-slot-jsx.raw",
    },
  ],
  "inputs": [],
  "meta": {},
  "name": "SlotCode",
  "refs": {},
  "state": {},
  "subComponents": [],
}
`;

exports[`Parse JSX > Javascript > SlotJsx 1`] = `
{
  "@type": "@builder.io/mitosis/component",
  "children": [
    {
      "@type": "@builder.io/mitosis/node",
      "bindings": {},
      "children": [
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {
            "slotTesting": {
              "bindingType": "expression",
              "code": "<div>Hello</div>",
              "type": "single",
            },
          },
          "children": [],
          "meta": {},
          "name": "ContentSlotCode",
          "properties": {},
          "scope": {},
          "slots": {
            "slotTesting": [
              {
                "@type": "@builder.io/mitosis/node",
                "bindings": {},
                "children": [
                  {
                    "@type": "@builder.io/mitosis/node",
                    "bindings": {},
                    "children": [],
                    "meta": {},
                    "name": "div",
                    "properties": {
                      "_text": "Hello",
                    },
                    "scope": {},
                  },
                ],
                "meta": {},
                "name": "div",
                "properties": {},
                "scope": {},
              },
            ],
          },
        },
      ],
      "meta": {},
      "name": "div",
      "properties": {},
      "scope": {},
    },
  ],
  "context": {
    "get": {},
    "set": {},
  },
  "exports": {},
  "hooks": {
    "onEvent": [],
    "onMount": [],
  },
  "imports": [
    {
      "importKind": "value",
      "imports": {
        "ContentSlotCode": "default",
      },
      "path": "./content-slot-jsx.raw",
    },
  ],
  "inputs": [],
  "meta": {},
  "name": "SlotCode",
  "refs": {},
  "state": {},
  "subComponents": [],
}
`;

exports[`Parse JSX > Javascript > SlotNamed 1`] = `
{
  "@type": "@builder.io/mitosis/component",
  "children": [
    {
      "@type": "@builder.io/mitosis/node",
      "bindings": {},
      "children": [
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {},
          "children": [],
          "meta": {},
          "name": "Slot",
          "properties": {
            "name": "myAwesomeSlot",
          },
          "scope": {},
        },
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {},
          "children": [],
          "meta": {},
          "name": "Slot",
          "properties": {
            "name": "top",
          },
          "scope": {},
        },
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {},
          "children": [
            {
              "@type": "@builder.io/mitosis/node",
              "bindings": {},
              "children": [],
              "meta": {},
              "name": "div",
              "properties": {
                "_text": "Default left",
              },
              "scope": {},
            },
          ],
          "meta": {},
          "name": "Slot",
          "properties": {
            "name": "left",
          },
          "scope": {},
        },
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {},
          "children": [
            {
              "@type": "@builder.io/mitosis/node",
              "bindings": {},
              "children": [],
              "meta": {},
              "name": "div",
              "properties": {
                "_text": "Default Child",
              },
              "scope": {},
            },
          ],
          "meta": {},
          "name": "Slot",
          "properties": {},
          "scope": {},
        },
      ],
      "meta": {},
      "name": "div",
      "properties": {},
      "scope": {},
    },
  ],
  "context": {
    "get": {},
    "set": {},
  },
  "exports": {},
  "hooks": {
    "onEvent": [],
    "onMount": [],
  },
  "imports": [],
  "inputs": [],
  "meta": {},
  "name": "SlotCode",
  "refs": {},
  "state": {},
  "subComponents": [],
}
`;

exports[`Parse JSX > Javascript > Stamped.io 1`] = `
{
  "@type": "@builder.io/mitosis/component",
  "children": [
    {
      "@type": "@builder.io/mitosis/node",
      "bindings": {
        "data-user": {
          "bindingType": "expression",
          "code": "state.name",
          "type": "single",
        },
      },
      "children": [
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {
            "onClick": {
              "bindingType": "function",
              "code": "state.showReviewPrompt = true",
              "type": "single",
            },
          },
          "children": [
            {
              "@type": "@builder.io/mitosis/node",
              "bindings": {},
              "children": [],
              "meta": {},
              "name": "div",
              "properties": {
                "_text": "Write a review",
              },
              "scope": {},
            },
          ],
          "meta": {},
          "name": "button",
          "properties": {},
          "scope": {},
        },
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {
            "when": {
              "bindingType": "expression",
              "code": "state.showReviewPrompt || 'asdf'",
              "type": "single",
            },
          },
          "children": [
            {
              "@type": "@builder.io/mitosis/node",
              "bindings": {},
              "children": [],
              "meta": {},
              "name": "input",
              "properties": {
                "placeholder": "Email",
              },
              "scope": {},
            },
            {
              "@type": "@builder.io/mitosis/node",
              "bindings": {
                "css": {
                  "bindingType": "expression",
                  "code": "{
  display: 'block'
}",
                  "type": "single",
                },
              },
              "children": [],
              "meta": {},
              "name": "input",
              "properties": {
                "placeholder": "Title",
              },
              "scope": {},
            },
            {
              "@type": "@builder.io/mitosis/node",
              "bindings": {
                "css": {
                  "bindingType": "expression",
                  "code": "{
  display: 'block'
}",
                  "type": "single",
                },
              },
              "children": [],
              "meta": {},
              "name": "textarea",
              "properties": {
                "placeholder": "How was your experience?",
              },
              "scope": {},
            },
            {
              "@type": "@builder.io/mitosis/node",
              "bindings": {
                "css": {
                  "bindingType": "expression",
                  "code": "{
  display: 'block'
}",
                  "type": "single",
                },
                "onClick": {
                  "arguments": [
                    "ev",
                  ],
                  "bindingType": "function",
                  "code": "{
  ev.preventDefault();
  state.showReviewPrompt = false;
}",
                  "type": "single",
                },
              },
              "children": [
                {
                  "@type": "@builder.io/mitosis/node",
                  "bindings": {},
                  "children": [],
                  "meta": {},
                  "name": "div",
                  "properties": {
                    "_text": "
          Submit
        ",
                  },
                  "scope": {},
                },
              ],
              "meta": {},
              "name": "button",
              "properties": {},
              "scope": {},
            },
          ],
          "meta": {},
          "name": "Show",
          "properties": {},
          "scope": {},
        },
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {
            "each": {
              "bindingType": "expression",
              "code": "state.reviews",
              "type": "single",
            },
          },
          "children": [
            {
              "@type": "@builder.io/mitosis/node",
              "bindings": {
                "css": {
                  "bindingType": "expression",
                  "code": "{
  margin: '10px',
  padding: '10px',
  background: 'white',
  display: 'flex',
  borderRadius: '5px',
  boxShadow: '0 2px 5px rgba(0, 0, 0, 0.1)',
  WebkitFontSmoothing: 'antialiased'
}",
                  "type": "single",
                },
                "key": {
                  "bindingType": "expression",
                  "code": "review.id",
                  "type": "single",
                },
              },
              "children": [
                {
                  "@type": "@builder.io/mitosis/node",
                  "bindings": {
                    "css": {
                      "bindingType": "expression",
                      "code": "{
  height: '30px',
  width: '30px',
  marginRight: '10px'
}",
                      "type": "single",
                    },
                    "src": {
                      "bindingType": "expression",
                      "code": "review.avatar",
                      "type": "single",
                    },
                  },
                  "children": [],
                  "meta": {},
                  "name": "img",
                  "properties": {},
                  "scope": {},
                },
                {
                  "@type": "@builder.io/mitosis/node",
                  "bindings": {
                    "class": {
                      "bindingType": "expression",
                      "code": "state.showReviewPrompt ? 'bg-primary' : 'bg-secondary'",
                      "type": "single",
                    },
                  },
                  "children": [
                    {
                      "@type": "@builder.io/mitosis/node",
                      "bindings": {},
                      "children": [
                        {
                          "@type": "@builder.io/mitosis/node",
                          "bindings": {},
                          "children": [],
                          "meta": {},
                          "name": "div",
                          "properties": {
                            "_text": "N: ",
                          },
                          "scope": {},
                        },
                        {
                          "@type": "@builder.io/mitosis/node",
                          "bindings": {
                            "_text": {
                              "bindingType": "expression",
                              "code": "index",
                              "type": "single",
                            },
                          },
                          "children": [],
                          "meta": {},
                          "name": "div",
                          "properties": {},
                          "scope": {},
                        },
                      ],
                      "meta": {},
                      "name": "div",
                      "properties": {},
                      "scope": {},
                    },
                    {
                      "@type": "@builder.io/mitosis/node",
                      "bindings": {},
                      "children": [
                        {
                          "@type": "@builder.io/mitosis/node",
                          "bindings": {
                            "_text": {
                              "bindingType": "expression",
                              "code": "review.author",
                              "type": "single",
                            },
                          },
                          "children": [],
                          "meta": {},
                          "name": "div",
                          "properties": {},
                          "scope": {},
                        },
                      ],
                      "meta": {},
                      "name": "div",
                      "properties": {},
                      "scope": {},
                    },
                    {
                      "@type": "@builder.io/mitosis/node",
                      "bindings": {},
                      "children": [
                        {
                          "@type": "@builder.io/mitosis/node",
                          "bindings": {
                            "_text": {
                              "bindingType": "expression",
                              "code": "review.reviewMessage",
                              "type": "single",
                            },
                          },
                          "children": [],
                          "meta": {},
                          "name": "div",
                          "properties": {},
                          "scope": {},
                        },
                      ],
                      "meta": {},
                      "name": "div",
                      "properties": {},
                      "scope": {},
                    },
                  ],
                  "meta": {},
                  "name": "div",
                  "properties": {},
                  "scope": {},
                },
              ],
              "meta": {},
              "name": "div",
              "properties": {
                "$name": "Review",
              },
              "scope": {},
            },
          ],
          "meta": {},
          "name": "For",
          "properties": {},
          "scope": {
            "forName": "review",
            "indexName": "index",
          },
        },
      ],
      "meta": {},
      "name": "div",
      "properties": {},
      "scope": {},
    },
  ],
  "context": {
    "get": {},
    "set": {},
  },
  "exports": {},
  "hooks": {
    "onEvent": [],
    "onMount": [
      {
        "code": "fetch(\`https://stamped.io/api/widget/reviews?storeUrl=builder-io.myshopify.com&apiKey=\${props.apiKey || 'pubkey-8bbDq7W6w4sB3OWeM1HUy2s47702hM'}&productId=\${props.productId || '2410511106127'}\`).then(res => res.json()).then(data => {
  state.reviews = data.data;
})",
        "onSSR": false,
      },
    ],
  },
  "imports": [
    {
      "importKind": "value",
      "imports": {
        "kebabCase": "kebabCase",
        "snakeCase": "snakeCase",
      },
      "path": "lodash",
    },
  ],
  "inputs": [],
  "meta": {},
  "name": "SmileReviews",
  "refs": {},
  "state": {
    "kebabCaseValue": {
      "code": "kebabCaseValue() {
  return kebabCase('testThat');
}",
      "type": "method",
    },
    "name": {
      "code": "'test'",
      "propertyType": "normal",
      "type": "property",
    },
    "reviews": {
      "code": "[]",
      "propertyType": "normal",
      "type": "property",
    },
    "showReviewPrompt": {
      "code": "false",
      "propertyType": "normal",
      "type": "property",
    },
    "snakeCaseValue": {
      "code": "snakeCaseValue() {
  return snakeCase('testThis');
}",
      "type": "method",
    },
  },
  "subComponents": [],
}
`;

exports[`Parse JSX > Javascript > StoreComment 1`] = `
{
  "@type": "@builder.io/mitosis/component",
  "children": [
    {
      "@type": "@builder.io/mitosis/node",
      "bindings": {},
      "children": [
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {
            "_text": {
              "bindingType": "expression",
              "code": "state.foo",
              "type": "single",
            },
          },
          "children": [],
          "meta": {},
          "name": "div",
          "properties": {},
          "scope": {},
        },
      ],
      "meta": {},
      "name": "Fragment",
      "properties": {},
      "scope": {},
    },
  ],
  "context": {
    "get": {},
    "set": {},
  },
  "exports": {},
  "hooks": {
    "onEvent": [],
    "onMount": [],
  },
  "imports": [],
  "inputs": [],
  "meta": {},
  "name": "StringLiteralStore",
  "refs": {},
  "state": {
    "bar": {
      "code": "bar() {}",
      "type": "method",
    },
    "foo": {
      "code": "true",
      "propertyType": "normal",
      "type": "property",
    },
  },
  "subComponents": [],
}
`;

exports[`Parse JSX > Javascript > StoreShadowVars 1`] = `
{
  "@type": "@builder.io/mitosis/component",
  "children": [
    {
      "@type": "@builder.io/mitosis/node",
      "bindings": {},
      "children": [
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {
            "_text": {
              "bindingType": "expression",
              "code": "state.foo(state.errors)",
              "type": "single",
            },
          },
          "children": [],
          "meta": {},
          "name": "div",
          "properties": {},
          "scope": {},
        },
      ],
      "meta": {},
      "name": "Fragment",
      "properties": {},
      "scope": {},
    },
  ],
  "context": {
    "get": {},
    "set": {},
  },
  "exports": {},
  "hooks": {
    "onEvent": [],
    "onMount": [],
  },
  "imports": [],
  "inputs": [],
  "meta": {},
  "name": "MyComponent",
  "refs": {},
  "state": {
    "errors": {
      "code": "{}",
      "propertyType": "normal",
      "type": "property",
    },
    "foo": {
      "code": "foo(errors) {
  return errors;
}",
      "type": "method",
    },
  },
  "subComponents": [],
}
`;

exports[`Parse JSX > Javascript > StoreWithState 1`] = `
{
  "@type": "@builder.io/mitosis/component",
  "children": [
    {
      "@type": "@builder.io/mitosis/node",
      "bindings": {},
      "children": [
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {
            "_text": {
              "bindingType": "expression",
              "code": "state.bar()",
              "type": "single",
            },
          },
          "children": [],
          "meta": {},
          "name": "div",
          "properties": {},
          "scope": {},
        },
      ],
      "meta": {},
      "name": "Fragment",
      "properties": {},
      "scope": {},
    },
  ],
  "context": {
    "get": {},
    "set": {},
  },
  "exports": {},
  "hooks": {
    "onEvent": [],
    "onMount": [],
  },
  "imports": [],
  "inputs": [],
  "meta": {},
  "name": "MyComponent",
  "refs": {},
  "state": {
    "bar": {
      "code": "bar() {
  return state.foo;
}",
      "type": "method",
    },
    "foo": {
      "code": "false",
      "propertyType": "normal",
      "type": "property",
    },
  },
  "subComponents": [],
}
`;

exports[`Parse JSX > Javascript > Submit 1`] = `
{
  "@type": "@builder.io/mitosis/component",
  "children": [
    {
      "@type": "@builder.io/mitosis/node",
      "bindings": {
        "props.attributes": {
          "code": "props.attributes",
          "spreadType": "normal",
          "type": "spread",
        },
      },
      "children": [
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {
            "_text": {
              "bindingType": "expression",
              "code": "props.text",
              "type": "single",
            },
          },
          "children": [],
          "meta": {},
          "name": "div",
          "properties": {},
          "scope": {},
        },
      ],
      "meta": {},
      "name": "button",
      "properties": {
        "type": "submit",
      },
      "scope": {},
    },
  ],
  "context": {
    "get": {},
    "set": {},
  },
  "exports": {},
  "hooks": {
    "onEvent": [],
    "onMount": [],
  },
  "imports": [],
  "inputs": [],
  "meta": {},
  "name": "SubmitButton",
  "refs": {},
  "state": {},
  "subComponents": [],
}
`;

exports[`Parse JSX > Javascript > Text 1`] = `
{
  "@type": "@builder.io/mitosis/component",
  "children": [
    {
      "@type": "@builder.io/mitosis/node",
      "bindings": {
        "contentEditable": {
          "bindingType": "expression",
          "code": "allowEditingText || undefined",
          "type": "single",
        },
        "data-name": {
          "bindingType": "expression",
          "code": "{
  test: state.name || 'any name'
}",
          "type": "single",
        },
        "innerHTML": {
          "bindingType": "expression",
          "code": "props.text || props.content || state.name || '<p class=\\"text-lg\\">my name</p>'",
          "type": "single",
        },
      },
      "children": [],
      "meta": {},
      "name": "div",
      "properties": {},
      "scope": {},
    },
  ],
  "context": {
    "get": {},
    "set": {},
  },
  "exports": {},
  "hooks": {
    "onEvent": [],
    "onMount": [],
  },
  "imports": [
    {
      "importKind": "value",
      "imports": {
        "Builder": "Builder",
      },
      "path": "@builder.io/sdk",
    },
  ],
  "inputs": [],
  "meta": {},
  "name": "Text",
  "refs": {},
  "state": {
    "name": {
      "code": "'Decadef20'",
      "propertyType": "normal",
      "type": "property",
    },
  },
  "subComponents": [],
}
`;

exports[`Parse JSX > Javascript > Textarea 1`] = `
{
  "@type": "@builder.io/mitosis/component",
  "children": [
    {
      "@type": "@builder.io/mitosis/node",
      "bindings": {
        "defaultValue": {
          "bindingType": "expression",
          "code": "props.defaultValue",
          "type": "single",
        },
        "name": {
          "bindingType": "expression",
          "code": "props.name",
          "type": "single",
        },
        "placeholder": {
          "bindingType": "expression",
          "code": "props.placeholder",
          "type": "single",
        },
        "props.attributes": {
          "code": "props.attributes",
          "spreadType": "normal",
          "type": "spread",
        },
        "value": {
          "bindingType": "expression",
          "code": "props.value",
          "type": "single",
        },
      },
      "children": [],
      "meta": {},
      "name": "textarea",
      "properties": {},
      "scope": {},
    },
  ],
  "context": {
    "get": {},
    "set": {},
  },
  "exports": {},
  "hooks": {
    "onEvent": [],
    "onMount": [],
  },
  "imports": [],
  "inputs": [],
  "meta": {},
  "name": "Textarea",
  "refs": {},
  "state": {},
  "subComponents": [],
}
`;

exports[`Parse JSX > Javascript > UseValueAndFnFromStore 1`] = `
{
  "@type": "@builder.io/mitosis/component",
  "children": [
    {
      "@type": "@builder.io/mitosis/node",
      "bindings": {},
      "children": [
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {},
          "children": [],
          "meta": {},
          "name": "div",
          "properties": {
            "_text": "Test",
          },
          "scope": {},
        },
      ],
      "meta": {},
      "name": "div",
      "properties": {},
      "scope": {},
    },
  ],
  "context": {
    "get": {},
    "set": {},
  },
  "exports": {},
  "hooks": {
    "onEvent": [],
    "onMount": [],
    "onUpdate": [
      {
        "code": "if (state._do) {
  state._do(state._id);
}",
        "deps": "",
        "depsArray": [],
      },
    ],
  },
  "imports": [],
  "inputs": [],
  "meta": {},
  "name": "UseValueAndFnFromStore",
  "refs": {},
  "state": {
    "_active": {
      "code": "false",
      "propertyType": "normal",
      "type": "property",
    },
    "_do": {
      "code": "_do(id) {
  state._active = !!id;

  if (props.onChange) {
    props.onChange(state._active);
  }
}",
      "type": "method",
    },
    "_id": {
      "code": "'abc'",
      "propertyType": "normal",
      "type": "property",
    },
  },
  "subComponents": [],
}
`;

exports[`Parse JSX > Javascript > Video 1`] = `
{
  "@type": "@builder.io/mitosis/component",
  "children": [
    {
      "@type": "@builder.io/mitosis/node",
      "bindings": {
        "autoplay": {
          "bindingType": "expression",
          "code": "props.autoPlay",
          "type": "single",
        },
        "controls": {
          "bindingType": "expression",
          "code": "props.controls",
          "type": "single",
        },
        "key": {
          "bindingType": "expression",
          "code": "props.video || 'no-src'",
          "type": "single",
        },
        "loop": {
          "bindingType": "expression",
          "code": "props.loop",
          "type": "single",
        },
        "muted": {
          "bindingType": "expression",
          "code": "props.muted",
          "type": "single",
        },
        "poster": {
          "bindingType": "expression",
          "code": "props.posterImage",
          "type": "single",
        },
        "props.attributes": {
          "code": "props.attributes",
          "spreadType": "normal",
          "type": "spread",
        },
        "style": {
          "bindingType": "expression",
          "code": "{
  width: '100%',
  height: '100%',
  ...props.attributes?.style,
  objectFit: props.fit,
  objectPosition: props.position,
  // Hack to get object fit to work as expected and
  // not have the video overflow
  borderRadius: 1
}",
          "type": "single",
        },
      },
      "children": [],
      "meta": {},
      "name": "video",
      "properties": {
        "preload": "none",
      },
      "scope": {},
    },
  ],
  "context": {
    "get": {},
    "set": {},
  },
  "exports": {},
  "hooks": {
    "onEvent": [],
    "onMount": [],
  },
  "imports": [],
  "inputs": [],
  "meta": {},
  "name": "Video",
  "refs": {},
  "state": {},
  "subComponents": [],
}
`;

exports[`Parse JSX > Javascript > arrowFunctionInUseStore 1`] = `
{
  "@type": "@builder.io/mitosis/component",
  "children": [
    {
      "@type": "@builder.io/mitosis/node",
      "bindings": {},
      "children": [
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {},
          "children": [],
          "meta": {},
          "name": "div",
          "properties": {
            "_text": "Hello ",
          },
          "scope": {},
        },
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {
            "_text": {
              "bindingType": "expression",
              "code": "state.name",
              "type": "single",
            },
          },
          "children": [],
          "meta": {},
          "name": "div",
          "properties": {},
          "scope": {},
        },
      ],
      "meta": {},
      "name": "div",
      "properties": {},
      "scope": {},
    },
  ],
  "context": {
    "get": {},
    "set": {},
  },
  "exports": {},
  "hooks": {
    "onEvent": [],
    "onMount": [],
  },
  "imports": [],
  "inputs": [],
  "meta": {},
  "name": "MyComponent",
  "refs": {},
  "state": {
    "name": {
      "code": "'steve'",
      "propertyType": "normal",
      "type": "property",
    },
    "setName": {
      "code": "setName(value) {
  state.name = value;
}",
      "type": "method",
    },
    "updateNameWithArrowFn": {
      "code": "updateNameWithArrowFn(value) {
  state.name = value;
}",
      "type": "method",
    },
  },
  "subComponents": [],
}
`;

exports[`Parse JSX > Javascript > basicForFragment 1`] = `
{
  "@type": "@builder.io/mitosis/component",
  "children": [
    {
      "@type": "@builder.io/mitosis/node",
      "bindings": {},
      "children": [
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {
            "each": {
              "bindingType": "expression",
              "code": "['a', 'b', 'c']",
              "type": "single",
            },
          },
          "children": [
            {
              "@type": "@builder.io/mitosis/node",
              "bindings": {
                "key": {
                  "bindingType": "expression",
                  "code": "\`key-\${option}\`",
                  "type": "single",
                },
              },
              "children": [
                {
                  "@type": "@builder.io/mitosis/node",
                  "bindings": {},
                  "children": [
                    {
                      "@type": "@builder.io/mitosis/node",
                      "bindings": {
                        "_text": {
                          "bindingType": "expression",
                          "code": "option",
                          "type": "single",
                        },
                      },
                      "children": [],
                      "meta": {},
                      "name": "div",
                      "properties": {},
                      "scope": {},
                    },
                  ],
                  "meta": {},
                  "name": "div",
                  "properties": {},
                  "scope": {},
                },
              ],
              "meta": {},
              "name": "Fragment",
              "properties": {},
              "scope": {},
            },
          ],
          "meta": {},
          "name": "For",
          "properties": {},
          "scope": {
            "forName": "option",
          },
        },
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {
            "each": {
              "bindingType": "expression",
              "code": "['a', 'b', 'c']",
              "type": "single",
            },
          },
          "children": [
            {
              "@type": "@builder.io/mitosis/node",
              "bindings": {
                "key": {
                  "bindingType": "expression",
                  "code": "\`\${state.id}-\${option}\`",
                  "type": "single",
                },
              },
              "children": [
                {
                  "@type": "@builder.io/mitosis/node",
                  "bindings": {},
                  "children": [
                    {
                      "@type": "@builder.io/mitosis/node",
                      "bindings": {
                        "_text": {
                          "bindingType": "expression",
                          "code": "option",
                          "type": "single",
                        },
                      },
                      "children": [],
                      "meta": {},
                      "name": "div",
                      "properties": {},
                      "scope": {},
                    },
                  ],
                  "meta": {},
                  "name": "div",
                  "properties": {},
                  "scope": {},
                },
              ],
              "meta": {},
              "name": "Fragment",
              "properties": {},
              "scope": {},
            },
          ],
          "meta": {},
          "name": "For",
          "properties": {},
          "scope": {
            "forName": "option",
          },
        },
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {},
          "children": [
            {
              "@type": "@builder.io/mitosis/node",
              "bindings": {
                "each": {
                  "bindingType": "expression",
                  "code": "['d', 'e', 'f']",
                  "type": "single",
                },
              },
              "children": [
                {
                  "@type": "@builder.io/mitosis/node",
                  "bindings": {
                    "key": {
                      "bindingType": "expression",
                      "code": "\`\${state.id}-\${option}\`",
                      "type": "single",
                    },
                    "value": {
                      "bindingType": "expression",
                      "code": "option",
                      "type": "single",
                    },
                  },
                  "children": [
                    {
                      "@type": "@builder.io/mitosis/node",
                      "bindings": {
                        "_text": {
                          "bindingType": "expression",
                          "code": "option",
                          "type": "single",
                        },
                      },
                      "children": [],
                      "meta": {},
                      "name": "div",
                      "properties": {},
                      "scope": {},
                    },
                  ],
                  "meta": {},
                  "name": "option",
                  "properties": {},
                  "scope": {},
                },
              ],
              "meta": {},
              "name": "For",
              "properties": {},
              "scope": {
                "forName": "option",
              },
            },
          ],
          "meta": {},
          "name": "select",
          "properties": {},
          "scope": {},
        },
      ],
      "meta": {},
      "name": "div",
      "properties": {},
      "scope": {},
    },
  ],
  "context": {
    "get": {},
    "set": {},
  },
  "exports": {},
  "hooks": {
    "onEvent": [],
    "onMount": [],
  },
  "imports": [],
  "inputs": [],
  "meta": {},
  "name": "BasicForFragment",
  "refs": {},
  "state": {
    "id": {
      "code": "'xyz'",
      "propertyType": "normal",
      "type": "property",
    },
  },
  "subComponents": [],
}
`;

exports[`Parse JSX > Javascript > basicForNoTagReference 1`] = `
{
  "@type": "@builder.io/mitosis/component",
  "children": [
    {
      "@type": "@builder.io/mitosis/node",
      "bindings": {},
      "children": [
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {},
          "children": [],
          "meta": {},
          "name": "div",
          "properties": {
            "_text": "
      Hello ",
          },
          "scope": {},
        },
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {},
          "children": [
            {
              "@type": "@builder.io/mitosis/node",
              "bindings": {
                "_text": {
                  "bindingType": "expression",
                  "code": "state.name",
                  "type": "single",
                },
              },
              "children": [],
              "meta": {},
              "name": "div",
              "properties": {},
              "scope": {},
            },
          ],
          "meta": {},
          "name": "state.tag",
          "properties": {},
          "scope": {},
        },
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {
            "each": {
              "bindingType": "expression",
              "code": "props.actions",
              "type": "single",
            },
          },
          "children": [
            {
              "@type": "@builder.io/mitosis/node",
              "bindings": {},
              "children": [
                {
                  "@type": "@builder.io/mitosis/node",
                  "bindings": {},
                  "children": [],
                  "meta": {},
                  "name": "action.icon",
                  "properties": {},
                  "scope": {},
                },
                {
                  "@type": "@builder.io/mitosis/node",
                  "bindings": {},
                  "children": [
                    {
                      "@type": "@builder.io/mitosis/node",
                      "bindings": {
                        "_text": {
                          "bindingType": "expression",
                          "code": "action.text",
                          "type": "single",
                        },
                      },
                      "children": [],
                      "meta": {},
                      "name": "div",
                      "properties": {},
                      "scope": {},
                    },
                  ],
                  "meta": {},
                  "name": "span",
                  "properties": {},
                  "scope": {},
                },
              ],
              "meta": {},
              "name": "state.TagName",
              "properties": {},
              "scope": {},
            },
          ],
          "meta": {},
          "name": "For",
          "properties": {},
          "scope": {
            "forName": "action",
          },
        },
      ],
      "meta": {},
      "name": "state.TagNameGetter",
      "properties": {},
      "scope": {},
    },
  ],
  "context": {
    "get": {},
    "set": {},
  },
  "exports": {},
  "hooks": {
    "onEvent": [],
    "onMount": [],
  },
  "imports": [],
  "inputs": [],
  "meta": {},
  "name": "MyBasicForNoTagRefComponent",
  "refs": {},
  "state": {
    "TagName": {
      "code": "'div'",
      "propertyType": "normal",
      "type": "property",
    },
    "TagNameGetter": {
      "code": "get TagNameGetter() {
  return 'span';
}",
      "type": "getter",
    },
    "name": {
      "code": "'VincentW'",
      "propertyType": "normal",
      "type": "property",
    },
    "tag": {
      "code": "'span'",
      "propertyType": "normal",
      "type": "property",
    },
  },
  "subComponents": [],
}
`;

exports[`Parse JSX > Javascript > basicForwardRef 1`] = `
{
  "@type": "@builder.io/mitosis/component",
  "children": [
    {
      "@type": "@builder.io/mitosis/node",
      "bindings": {},
      "children": [
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {
            "css": {
              "bindingType": "expression",
              "code": "{
  color: 'red'
}",
              "type": "single",
            },
            "onChange": {
              "arguments": [
                "event",
              ],
              "bindingType": "function",
              "code": "state.name = event.target.value",
              "type": "single",
            },
            "ref": {
              "bindingType": "expression",
              "code": "props.inputRef",
              "type": "single",
            },
            "value": {
              "bindingType": "expression",
              "code": "state.name",
              "type": "single",
            },
          },
          "children": [],
          "meta": {},
          "name": "input",
          "properties": {},
          "scope": {},
        },
      ],
      "meta": {},
      "name": "div",
      "properties": {},
      "scope": {},
    },
  ],
  "context": {
    "get": {},
    "set": {},
  },
  "exports": {},
  "hooks": {
    "onEvent": [],
    "onMount": [],
  },
  "imports": [],
  "inputs": [],
  "meta": {},
  "name": "MyBasicForwardRefComponent",
  "refs": {},
  "state": {
    "name": {
      "code": "'PatrickJS'",
      "propertyType": "normal",
      "type": "property",
    },
  },
  "subComponents": [],
}
`;

exports[`Parse JSX > Javascript > basicForwardRefMetadata 1`] = `
{
  "@type": "@builder.io/mitosis/component",
  "children": [
    {
      "@type": "@builder.io/mitosis/node",
      "bindings": {},
      "children": [
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {
            "css": {
              "bindingType": "expression",
              "code": "{
  color: 'red'
}",
              "type": "single",
            },
            "onChange": {
              "arguments": [
                "event",
              ],
              "bindingType": "function",
              "code": "state.name = event.target.value",
              "type": "single",
            },
            "ref": {
              "bindingType": "expression",
              "code": "props.inputRef",
              "type": "single",
            },
            "value": {
              "bindingType": "expression",
              "code": "state.name",
              "type": "single",
            },
          },
          "children": [],
          "meta": {},
          "name": "input",
          "properties": {},
          "scope": {},
        },
      ],
      "meta": {},
      "name": "div",
      "properties": {},
      "scope": {},
    },
  ],
  "context": {
    "get": {},
    "set": {},
  },
  "exports": {},
  "hooks": {
    "onEvent": [],
    "onMount": [],
  },
  "imports": [],
  "inputs": [],
  "meta": {
    "useMetadata": {
      "forwardRef": "inputRef",
    },
  },
  "name": "MyBasicForwardRefComponent",
  "refs": {},
  "state": {
    "name": {
      "code": "'PatrickJS'",
      "propertyType": "normal",
      "type": "property",
    },
  },
  "subComponents": [],
}
`;

exports[`Parse JSX > Javascript > basicOnUpdateReturn 1`] = `
{
  "@type": "@builder.io/mitosis/component",
  "children": [
    {
      "@type": "@builder.io/mitosis/node",
      "bindings": {},
      "children": [
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {},
          "children": [],
          "meta": {},
          "name": "div",
          "properties": {
            "_text": "Hello! ",
          },
          "scope": {},
        },
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {
            "_text": {
              "bindingType": "expression",
              "code": "state.name",
              "type": "single",
            },
          },
          "children": [],
          "meta": {},
          "name": "div",
          "properties": {},
          "scope": {},
        },
      ],
      "meta": {},
      "name": "div",
      "properties": {},
      "scope": {},
    },
  ],
  "context": {
    "get": {},
    "set": {},
  },
  "exports": {},
  "hooks": {
    "onEvent": [],
    "onMount": [],
    "onUpdate": [
      {
        "code": "const controller = new AbortController();
const signal = controller.signal;
fetch('https://patrickjs.com/api/resource.json', {
  signal
}).then(response => response.json()).then(data => {
  state.name = data.name;
});
return () => {
  if (!signal.aborted) {
    controller.abort();
  }
}",
        "deps": "[state.name]",
        "depsArray": [
          "state.name",
        ],
      },
    ],
  },
  "imports": [],
  "inputs": [],
  "meta": {},
  "name": "MyBasicOnUpdateReturnComponent",
  "refs": {},
  "state": {
    "name": {
      "code": "'PatrickJS'",
      "propertyType": "normal",
      "type": "property",
    },
  },
  "subComponents": [],
}
`;

exports[`Parse JSX > Javascript > basicRefAttributePassing 1`] = `
{
  "@type": "@builder.io/mitosis/component",
  "children": [
    {
      "@type": "@builder.io/mitosis/node",
      "bindings": {
        "ref": {
          "bindingType": "expression",
          "code": "buttonRef",
          "type": "single",
        },
      },
      "children": [
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {},
          "children": [],
          "meta": {},
          "name": "div",
          "properties": {
            "_text": "Attribute Passing",
          },
          "scope": {},
        },
      ],
      "meta": {},
      "name": "button",
      "properties": {},
      "scope": {},
    },
  ],
  "context": {
    "get": {},
    "set": {},
  },
  "exports": {},
  "hooks": {
    "onEvent": [],
    "onMount": [
      {
        "code": "console.log('onMount')",
        "onSSR": false,
      },
    ],
  },
  "imports": [],
  "inputs": [],
  "meta": {
    "useMetadata": {
      "attributePassing": {
        "enabled": true,
      },
    },
  },
  "name": "BasicRefAttributePassingComponent",
  "refs": {
    "buttonRef": {
      "argument": "null",
    },
  },
  "state": {},
  "subComponents": [],
}
`;

exports[`Parse JSX > Javascript > basicRefAttributePassingCustomRef 1`] = `
{
  "@type": "@builder.io/mitosis/component",
  "children": [
    {
      "@type": "@builder.io/mitosis/node",
      "bindings": {},
      "children": [
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {
            "ref": {
              "bindingType": "expression",
              "code": "buttonRef",
              "type": "single",
            },
          },
          "children": [
            {
              "@type": "@builder.io/mitosis/node",
              "bindings": {},
              "children": [],
              "meta": {},
              "name": "div",
              "properties": {
                "_text": "Attribute Passing",
              },
              "scope": {},
            },
          ],
          "meta": {},
          "name": "button",
          "properties": {},
          "scope": {},
        },
      ],
      "meta": {},
      "name": "div",
      "properties": {},
      "scope": {},
    },
  ],
  "context": {
    "get": {},
    "set": {},
  },
  "exports": {},
  "hooks": {
    "onEvent": [],
    "onMount": [],
  },
  "imports": [],
  "inputs": [],
  "meta": {
    "useMetadata": {
      "attributePassing": {
        "customRef": "buttonRef",
        "enabled": true,
      },
    },
  },
  "name": "BasicRefAttributePassingCustomRefComponent",
  "refs": {
    "buttonRef": {
      "argument": "null",
    },
  },
  "state": {},
  "subComponents": [],
}
`;

exports[`Parse JSX > Javascript > class + ClassName + css 1`] = `
{
  "@type": "@builder.io/mitosis/component",
  "children": [
    {
      "@type": "@builder.io/mitosis/node",
      "bindings": {},
      "children": [
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {},
          "children": [
            {
              "@type": "@builder.io/mitosis/node",
              "bindings": {},
              "children": [],
              "meta": {},
              "name": "div",
              "properties": {
                "_text": "
        Hello! I can run in React, Vue, Solid, or Liquid!
      ",
              },
              "scope": {},
            },
          ],
          "meta": {},
          "name": "MyComp",
          "properties": {
            "class": "test",
            "className": "test2",
          },
          "scope": {},
        },
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {
            "css": {
              "bindingType": "expression",
              "code": "{
  padding: '10px'
}",
              "type": "single",
            },
          },
          "children": [
            {
              "@type": "@builder.io/mitosis/node",
              "bindings": {},
              "children": [],
              "meta": {},
              "name": "div",
              "properties": {
                "_text": "
        Hello! I can run in React, Vue, Solid, or Liquid!
      ",
              },
              "scope": {},
            },
          ],
          "meta": {},
          "name": "div",
          "properties": {
            "class": "test2 test",
          },
          "scope": {},
        },
      ],
      "meta": {},
      "name": "div",
      "properties": {},
      "scope": {},
    },
  ],
  "context": {
    "get": {},
    "set": {},
  },
  "exports": {},
  "hooks": {
    "onEvent": [],
    "onMount": [],
  },
  "imports": [
    {
      "importKind": "value",
      "imports": {
        "MyComp": "default",
      },
      "path": "./my-component.lite",
    },
  ],
  "inputs": [],
  "meta": {},
  "name": "MyBasicComponent",
  "refs": {},
  "state": {},
  "subComponents": [],
}
`;

exports[`Parse JSX > Javascript > class + css 1`] = `
{
  "@type": "@builder.io/mitosis/component",
  "children": [
    {
      "@type": "@builder.io/mitosis/node",
      "bindings": {
        "css": {
          "bindingType": "expression",
          "code": "{
  padding: '10px'
}",
          "type": "single",
        },
      },
      "children": [
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {},
          "children": [],
          "meta": {},
          "name": "div",
          "properties": {
            "_text": "
      Hello! I can run in React, Vue, Solid, or Liquid!
    ",
          },
          "scope": {},
        },
      ],
      "meta": {},
      "name": "div",
      "properties": {
        "class": "test",
      },
      "scope": {},
    },
  ],
  "context": {
    "get": {},
    "set": {},
  },
  "exports": {},
  "hooks": {
    "onEvent": [],
    "onMount": [],
  },
  "imports": [],
  "inputs": [],
  "meta": {},
  "name": "MyBasicComponent",
  "refs": {},
  "state": {},
  "subComponents": [],
}
`;

exports[`Parse JSX > Javascript > className + css 1`] = `
{
  "@type": "@builder.io/mitosis/component",
  "children": [
    {
      "@type": "@builder.io/mitosis/node",
      "bindings": {
        "css": {
          "bindingType": "expression",
          "code": "{
  padding: '10px'
}",
          "type": "single",
        },
      },
      "children": [
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {},
          "children": [],
          "meta": {},
          "name": "div",
          "properties": {
            "_text": "
      Hello! I can run in React, Vue, Solid, or Liquid!
    ",
          },
          "scope": {},
        },
      ],
      "meta": {},
      "name": "div",
      "properties": {
        "class": "test",
      },
      "scope": {},
    },
  ],
  "context": {
    "get": {},
    "set": {},
  },
  "exports": {},
  "hooks": {
    "onEvent": [],
    "onMount": [],
  },
  "imports": [],
  "inputs": [],
  "meta": {},
  "name": "MyBasicComponent",
  "refs": {},
  "state": {},
  "subComponents": [],
}
`;

exports[`Parse JSX > Javascript > className 1`] = `
{
  "@type": "@builder.io/mitosis/component",
  "children": [
    {
      "@type": "@builder.io/mitosis/node",
      "bindings": {},
      "children": [
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {},
          "children": [
            {
              "@type": "@builder.io/mitosis/node",
              "bindings": {},
              "children": [],
              "meta": {},
              "name": "div",
              "properties": {
                "_text": "Without Binding",
              },
              "scope": {},
            },
          ],
          "meta": {},
          "name": "div",
          "properties": {
            "class": "no binding",
          },
          "scope": {},
        },
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {
            "class": {
              "bindingType": "expression",
              "code": "state.bindings",
              "type": "single",
            },
          },
          "children": [
            {
              "@type": "@builder.io/mitosis/node",
              "bindings": {},
              "children": [],
              "meta": {},
              "name": "div",
              "properties": {
                "_text": "With binding",
              },
              "scope": {},
            },
          ],
          "meta": {},
          "name": "div",
          "properties": {},
          "scope": {},
        },
      ],
      "meta": {},
      "name": "div",
      "properties": {},
      "scope": {},
    },
  ],
  "context": {
    "get": {},
    "set": {},
  },
  "exports": {},
  "hooks": {
    "onEvent": [],
    "onMount": [],
  },
  "imports": [],
  "inputs": [],
  "meta": {},
  "name": "ClassNameCode",
  "refs": {},
  "state": {
    "bindings": {
      "code": "'a binding'",
      "propertyType": "normal",
      "type": "property",
    },
  },
  "subComponents": [],
}
`;

exports[`Parse JSX > Javascript > classState 1`] = `
{
  "@type": "@builder.io/mitosis/component",
  "children": [
    {
      "@type": "@builder.io/mitosis/node",
      "bindings": {
        "class": {
          "bindingType": "expression",
          "code": "state.classState",
          "type": "single",
        },
        "css": {
          "bindingType": "expression",
          "code": "{
  padding: '10px'
}",
          "type": "single",
        },
        "style": {
          "bindingType": "expression",
          "code": "state.styleState",
          "type": "single",
        },
      },
      "children": [
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {},
          "children": [],
          "meta": {},
          "name": "div",
          "properties": {
            "_text": "
      Hello! I can run in React, Vue, Solid, or Liquid!
    ",
          },
          "scope": {},
        },
      ],
      "meta": {},
      "name": "div",
      "properties": {},
      "scope": {},
    },
  ],
  "context": {
    "get": {},
    "set": {},
  },
  "exports": {},
  "hooks": {
    "onEvent": [],
    "onMount": [],
  },
  "imports": [],
  "inputs": [],
  "meta": {},
  "name": "MyBasicComponent",
  "refs": {},
  "state": {
    "classState": {
      "code": "'testClassName'",
      "propertyType": "normal",
      "type": "property",
    },
    "styleState": {
      "code": "{
  color: 'red'
}",
      "propertyType": "normal",
      "type": "property",
    },
  },
  "subComponents": [],
}
`;

exports[`Parse JSX > Javascript > classnameProps 1`] = `
{
  "@type": "@builder.io/mitosis/component",
  "children": [
    {
      "@type": "@builder.io/mitosis/node",
      "bindings": {
        "class": {
          "bindingType": "expression",
          "code": "props.className",
          "type": "single",
        },
      },
      "children": [
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {
            "_text": {
              "bindingType": "expression",
              "code": "props.children",
              "type": "single",
            },
          },
          "children": [],
          "meta": {},
          "name": "div",
          "properties": {},
          "scope": {},
        },
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {
            "_text": {
              "bindingType": "expression",
              "code": "props.type",
              "type": "single",
            },
          },
          "children": [],
          "meta": {},
          "name": "div",
          "properties": {},
          "scope": {},
        },
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {},
          "children": [],
          "meta": {},
          "name": "div",
          "properties": {
            "_text": "
      Hello! I can run in React, Vue, Solid, or Liquid!
    ",
          },
          "scope": {},
        },
      ],
      "meta": {},
      "name": "div",
      "properties": {},
      "scope": {},
    },
  ],
  "context": {
    "get": {},
    "set": {},
  },
  "exports": {},
  "hooks": {
    "onEvent": [],
    "onMount": [],
  },
  "imports": [],
  "inputs": [],
  "meta": {
    "useMetadata": {
      "stencil": {
        "propOptions": {
          "className": {
            "attribute": "classname",
            "mutable": false,
            "reflect": false,
          },
        },
      },
    },
  },
  "name": "MyBasicComponent",
  "refs": {},
  "state": {},
  "subComponents": [],
}
`;

exports[`Parse JSX > Javascript > complexMeta 1`] = `
{
  "@type": "@builder.io/mitosis/component",
  "children": [
    {
      "@type": "@builder.io/mitosis/node",
      "bindings": {},
      "children": [],
      "meta": {},
      "name": "div",
      "properties": {},
      "scope": {},
    },
  ],
  "context": {
    "get": {},
    "set": {},
  },
  "exports": {},
  "hooks": {
    "onEvent": [],
    "onMount": [],
  },
  "imports": [],
  "inputs": [],
  "meta": {
    "useMetadata": {
      "asdf": {
        "booleanValue": true,
        "innerObject": {
          "booleanValue": false,
          "numberValue": 2,
          "stringValue": "inner",
        },
        "numberValue": 1,
        "spreadStringValue": "f",
        "stringValue": "d",
      },
      "x": "y",
    },
  },
  "name": "ComplexMetaRaw",
  "refs": {},
  "state": {},
  "subComponents": [],
}
`;

exports[`Parse JSX > Javascript > componentWithContext 1`] = `
{
  "@type": "@builder.io/mitosis/component",
  "children": [
    {
      "@type": "@builder.io/mitosis/node",
      "bindings": {},
      "children": [
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {},
          "children": [
            {
              "@type": "@builder.io/mitosis/node",
              "bindings": {
                "_text": {
                  "bindingType": "expression",
                  "code": "foo.value",
                  "type": "single",
                },
              },
              "children": [],
              "meta": {},
              "name": "div",
              "properties": {},
              "scope": {},
            },
          ],
          "meta": {},
          "name": "Fragment",
          "properties": {},
          "scope": {},
        },
      ],
      "meta": {},
      "name": "Fragment",
      "properties": {},
      "scope": {},
    },
  ],
  "context": {
    "get": {
      "foo": {
        "name": "Context1",
        "path": "@dummy/1:default",
      },
    },
    "set": {
      "@dummy/1:default": {
        "name": "Context1",
        "value": {
          "content": {
            "code": "content() {
  return props.content;
}",
            "type": "method",
          },
          "foo": {
            "code": "'bar'",
            "propertyType": "normal",
            "type": "property",
          },
        },
      },
      "@dummy/2:default": {
        "name": "Context2",
        "value": {
          "bar": {
            "code": "'baz'",
            "propertyType": "normal",
            "type": "property",
          },
        },
      },
    },
  },
  "exports": {},
  "hooks": {
    "onEvent": [],
    "onMount": [],
  },
  "imports": [
    {
      "importKind": "value",
      "imports": {
        "Context1": "default",
      },
      "path": "@dummy/1",
    },
    {
      "importKind": "value",
      "imports": {
        "Context2": "default",
      },
      "path": "@dummy/2",
    },
  ],
  "inputs": [],
  "meta": {},
  "name": "ComponentWithContext",
  "refs": {},
  "state": {},
  "subComponents": [],
}
`;

exports[`Parse JSX > Javascript > componentWithContextMultiRoot 1`] = `
{
  "@type": "@builder.io/mitosis/component",
  "children": [
    {
      "@type": "@builder.io/mitosis/node",
      "bindings": {},
      "children": [
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {},
          "children": [
            {
              "@type": "@builder.io/mitosis/node",
              "bindings": {
                "_text": {
                  "bindingType": "expression",
                  "code": "foo.value",
                  "type": "single",
                },
              },
              "children": [],
              "meta": {},
              "name": "div",
              "properties": {},
              "scope": {},
            },
          ],
          "meta": {},
          "name": "Fragment",
          "properties": {},
          "scope": {},
        },
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {},
          "children": [
            {
              "@type": "@builder.io/mitosis/node",
              "bindings": {},
              "children": [],
              "meta": {},
              "name": "div",
              "properties": {
                "_text": "other",
              },
              "scope": {},
            },
          ],
          "meta": {},
          "name": "div",
          "properties": {},
          "scope": {},
        },
      ],
      "meta": {},
      "name": "Fragment",
      "properties": {},
      "scope": {},
    },
  ],
  "context": {
    "get": {
      "foo": {
        "name": "Context1",
        "path": "@dummy/1:default",
      },
    },
    "set": {
      "@dummy/1:default": {
        "name": "Context1",
        "value": {
          "content": {
            "code": "content() {
  return props.content;
}",
            "type": "method",
          },
          "foo": {
            "code": "'bar'",
            "propertyType": "normal",
            "type": "property",
          },
        },
      },
      "@dummy/2:default": {
        "name": "Context2",
        "value": {
          "bar": {
            "code": "'baz'",
            "propertyType": "normal",
            "type": "property",
          },
        },
      },
    },
  },
  "exports": {},
  "hooks": {
    "onEvent": [],
    "onMount": [],
  },
  "imports": [
    {
      "importKind": "value",
      "imports": {
        "Context1": "default",
      },
      "path": "@dummy/1",
    },
    {
      "importKind": "value",
      "imports": {
        "Context2": "default",
      },
      "path": "@dummy/2",
    },
  ],
  "inputs": [],
  "meta": {},
  "name": "ComponentWithContext",
  "refs": {},
  "state": {},
  "subComponents": [],
}
`;

exports[`Parse JSX > Javascript > contentState 1`] = `
{
  "@type": "@builder.io/mitosis/component",
  "children": [
    {
      "@type": "@builder.io/mitosis/node",
      "bindings": {},
      "children": [
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {},
          "children": [],
          "meta": {},
          "name": "div",
          "properties": {
            "_text": "setting context",
          },
          "scope": {},
        },
      ],
      "meta": {},
      "name": "div",
      "properties": {},
      "scope": {},
    },
  ],
  "context": {
    "get": {},
    "set": {
      "@dummy/context.lite:default": {
        "name": "BuilderContext",
        "value": {
          "content": {
            "code": "props.content",
            "propertyType": "normal",
            "type": "property",
          },
          "registeredComponents": {
            "code": "props.customComponents",
            "propertyType": "normal",
            "type": "property",
          },
        },
      },
    },
  },
  "exports": {},
  "hooks": {
    "onEvent": [],
    "onMount": [],
  },
  "imports": [
    {
      "importKind": "value",
      "imports": {
        "BuilderContext": "default",
      },
      "path": "@dummy/context.lite",
    },
  ],
  "inputs": [],
  "meta": {},
  "name": "RenderContent",
  "refs": {},
  "state": {},
  "subComponents": [],
}
`;

exports[`Parse JSX > Javascript > defaultProps 1`] = `
{
  "@type": "@builder.io/mitosis/component",
  "children": [
    {
      "@type": "@builder.io/mitosis/node",
      "bindings": {},
      "children": [
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {
            "when": {
              "bindingType": "expression",
              "code": "props.link",
              "type": "single",
            },
          },
          "children": [
            {
              "@type": "@builder.io/mitosis/node",
              "bindings": {
                "href": {
                  "bindingType": "expression",
                  "code": "props.link",
                  "type": "single",
                },
                "props.attributes": {
                  "code": "props.attributes",
                  "spreadType": "normal",
                  "type": "spread",
                },
                "target": {
                  "bindingType": "expression",
                  "code": "props.openLinkInNewTab ? '_blank' : undefined",
                  "type": "single",
                },
              },
              "children": [
                {
                  "@type": "@builder.io/mitosis/node",
                  "bindings": {
                    "_text": {
                      "bindingType": "expression",
                      "code": "props.text",
                      "type": "single",
                    },
                  },
                  "children": [],
                  "meta": {},
                  "name": "div",
                  "properties": {},
                  "scope": {},
                },
              ],
              "meta": {},
              "name": "a",
              "properties": {},
              "scope": {},
            },
          ],
          "meta": {},
          "name": "Show",
          "properties": {},
          "scope": {},
        },
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {
            "when": {
              "bindingType": "expression",
              "code": "!props.link",
              "type": "single",
            },
          },
          "children": [
            {
              "@type": "@builder.io/mitosis/node",
              "bindings": {
                "onClick": {
                  "bindingType": "function",
                  "code": "props.onClick()",
                  "type": "single",
                },
                "props.attributes": {
                  "code": "props.attributes",
                  "spreadType": "normal",
                  "type": "spread",
                },
              },
              "children": [
                {
                  "@type": "@builder.io/mitosis/node",
                  "bindings": {
                    "_text": {
                      "bindingType": "expression",
                      "code": "props.buttonText",
                      "type": "single",
                    },
                  },
                  "children": [],
                  "meta": {},
                  "name": "div",
                  "properties": {},
                  "scope": {},
                },
              ],
              "meta": {},
              "name": "button",
              "properties": {
                "type": "button",
              },
              "scope": {},
            },
          ],
          "meta": {},
          "name": "Show",
          "properties": {},
          "scope": {},
        },
      ],
      "meta": {},
      "name": "div",
      "properties": {},
      "scope": {},
    },
  ],
  "context": {
    "get": {},
    "set": {},
  },
  "defaultProps": {
    "link": {
      "code": "'https://builder.io/'",
      "propertyType": "normal",
      "type": "property",
    },
    "onClick": {
      "code": "() => {
  console.log('hi');
}",
      "type": "method",
    },
    "openLinkInNewTab": {
      "code": "false",
      "propertyType": "normal",
      "type": "property",
    },
    "text": {
      "code": "'default text'",
      "propertyType": "normal",
      "type": "property",
    },
  },
  "exports": {},
  "hooks": {
    "onEvent": [],
    "onMount": [],
  },
  "imports": [],
  "inputs": [],
  "meta": {},
  "name": "Button",
  "refs": {},
  "state": {},
  "subComponents": [],
}
`;

exports[`Parse JSX > Javascript > defaultPropsOutsideComponent 1`] = `
{
  "@type": "@builder.io/mitosis/component",
  "children": [
    {
      "@type": "@builder.io/mitosis/node",
      "bindings": {},
      "children": [
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {
            "when": {
              "bindingType": "expression",
              "code": "props.link",
              "type": "single",
            },
          },
          "children": [
            {
              "@type": "@builder.io/mitosis/node",
              "bindings": {
                "href": {
                  "bindingType": "expression",
                  "code": "props.link",
                  "type": "single",
                },
                "props.attributes": {
                  "code": "props.attributes",
                  "spreadType": "normal",
                  "type": "spread",
                },
                "target": {
                  "bindingType": "expression",
                  "code": "props.openLinkInNewTab ? '_blank' : undefined",
                  "type": "single",
                },
              },
              "children": [
                {
                  "@type": "@builder.io/mitosis/node",
                  "bindings": {
                    "_text": {
                      "bindingType": "expression",
                      "code": "props.text",
                      "type": "single",
                    },
                  },
                  "children": [],
                  "meta": {},
                  "name": "div",
                  "properties": {},
                  "scope": {},
                },
              ],
              "meta": {},
              "name": "a",
              "properties": {},
              "scope": {},
            },
          ],
          "meta": {},
          "name": "Show",
          "properties": {},
          "scope": {},
        },
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {
            "when": {
              "bindingType": "expression",
              "code": "!props.link",
              "type": "single",
            },
          },
          "children": [
            {
              "@type": "@builder.io/mitosis/node",
              "bindings": {
                "onClick": {
                  "arguments": [
                    "event",
                  ],
                  "bindingType": "function",
                  "code": "props.onClick(event)",
                  "type": "single",
                },
                "props.attributes": {
                  "code": "props.attributes",
                  "spreadType": "normal",
                  "type": "spread",
                },
              },
              "children": [
                {
                  "@type": "@builder.io/mitosis/node",
                  "bindings": {
                    "_text": {
                      "bindingType": "expression",
                      "code": "props.text",
                      "type": "single",
                    },
                  },
                  "children": [],
                  "meta": {},
                  "name": "div",
                  "properties": {},
                  "scope": {},
                },
              ],
              "meta": {},
              "name": "button",
              "properties": {
                "type": "button",
              },
              "scope": {},
            },
          ],
          "meta": {},
          "name": "Show",
          "properties": {},
          "scope": {},
        },
      ],
      "meta": {},
      "name": "div",
      "properties": {},
      "scope": {},
    },
  ],
  "context": {
    "get": {},
    "set": {},
  },
  "defaultProps": {
    "link": {
      "code": "'https://builder.io/'",
      "propertyType": "normal",
      "type": "property",
    },
    "onClick": {
      "code": "() => {}",
      "type": "method",
    },
    "openLinkInNewTab": {
      "code": "false",
      "propertyType": "normal",
      "type": "property",
    },
    "text": {
      "code": "'default text'",
      "propertyType": "normal",
      "type": "property",
    },
  },
  "exports": {},
  "hooks": {
    "onEvent": [],
    "onMount": [],
  },
  "imports": [],
  "inputs": [],
  "meta": {},
  "name": "Button",
  "refs": {},
  "state": {},
  "subComponents": [],
}
`;

exports[`Parse JSX > Javascript > defaultValsWithTypes 1`] = `
{
  "@type": "@builder.io/mitosis/component",
  "children": [
    {
      "@type": "@builder.io/mitosis/node",
      "bindings": {},
      "children": [
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {},
          "children": [],
          "meta": {},
          "name": "div",
          "properties": {
            "_text": " Hello ",
          },
          "scope": {},
        },
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {
            "_text": {
              "bindingType": "expression",
              "code": "props.name || DEFAULT_VALUES.name",
              "type": "single",
            },
          },
          "children": [],
          "meta": {},
          "name": "div",
          "properties": {},
          "scope": {},
        },
      ],
      "meta": {},
      "name": "div",
      "properties": {},
      "scope": {},
    },
  ],
  "context": {
    "get": {},
    "set": {},
  },
  "exports": {
    "DEFAULT_VALUES": {
      "code": "const DEFAULT_VALUES = {
  name: 'Sami'
};",
      "isFunction": false,
      "usedInLocal": true,
    },
  },
  "hooks": {
    "onEvent": [],
    "onMount": [],
  },
  "imports": [],
  "inputs": [],
  "meta": {},
  "name": "ComponentWithTypes",
  "refs": {},
  "state": {},
  "subComponents": [],
}
`;

exports[`Parse JSX > Javascript > eventInputAndChange 1`] = `
{
  "@type": "@builder.io/mitosis/component",
  "children": [
    {
      "@type": "@builder.io/mitosis/node",
      "bindings": {},
      "children": [
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {
            "css": {
              "bindingType": "expression",
              "code": "{
  color: 'red'
}",
              "type": "single",
            },
            "onChange": {
              "arguments": [
                "event",
              ],
              "bindingType": "function",
              "code": "state.name = event.target.value",
              "type": "single",
            },
            "onInput": {
              "arguments": [
                "event",
              ],
              "bindingType": "function",
              "code": "state.name = event.target.value",
              "type": "single",
            },
            "value": {
              "bindingType": "expression",
              "code": "state.name",
              "type": "single",
            },
          },
          "children": [],
          "meta": {},
          "name": "input",
          "properties": {},
          "scope": {},
        },
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {},
          "children": [],
          "meta": {},
          "name": "div",
          "properties": {
            "_text": "
      Hello! I can run in React, Vue, Solid, or Liquid!
    ",
          },
          "scope": {},
        },
      ],
      "meta": {},
      "name": "div",
      "properties": {},
      "scope": {},
    },
  ],
  "context": {
    "get": {},
    "set": {},
  },
  "exports": {},
  "hooks": {
    "onEvent": [],
    "onMount": [],
  },
  "imports": [],
  "inputs": [],
  "meta": {},
  "name": "EventInputAndChange",
  "refs": {},
  "state": {
    "name": {
      "code": "'Steve'",
      "propertyType": "normal",
      "type": "property",
    },
  },
  "subComponents": [],
}
`;

exports[`Parse JSX > Javascript > eventProps 1`] = `
{
  "@type": "@builder.io/mitosis/component",
  "children": [
    {
      "@type": "@builder.io/mitosis/node",
      "bindings": {
        "onClick": {
          "bindingType": "function",
          "code": "state.handleClick()",
          "type": "single",
        },
      },
      "children": [
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {},
          "children": [],
          "meta": {},
          "name": "div",
          "properties": {
            "_text": "Test",
          },
          "scope": {},
        },
      ],
      "meta": {},
      "name": "button",
      "properties": {},
      "scope": {},
    },
  ],
  "context": {
    "get": {},
    "set": {},
  },
  "exports": {},
  "hooks": {
    "onEvent": [],
    "onMount": [],
  },
  "imports": [],
  "inputs": [],
  "meta": {},
  "name": "EventPropsComponent",
  "refs": {},
  "state": {
    "handleClick": {
      "code": "handleClick() {
  if (props.onGetVoid) {
    props.onGetVoid();
  }

  if (props.onEnter) {
    console.log(props.onEnter());
  }

  if (props.onPass) {
    props.onPass('test');
  }
}",
      "type": "method",
    },
  },
  "subComponents": [],
}
`;

exports[`Parse JSX > Javascript > expressionState 1`] = `
{
  "@type": "@builder.io/mitosis/component",
  "children": [
    {
      "@type": "@builder.io/mitosis/node",
      "bindings": {},
      "children": [
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {
            "_text": {
              "bindingType": "expression",
              "code": "state.refToUse",
              "type": "single",
            },
          },
          "children": [],
          "meta": {},
          "name": "div",
          "properties": {},
          "scope": {},
        },
      ],
      "meta": {},
      "name": "div",
      "properties": {},
      "scope": {},
    },
  ],
  "context": {
    "get": {},
    "set": {},
  },
  "exports": {},
  "hooks": {
    "onEvent": [],
    "onMount": [],
  },
  "imports": [],
  "inputs": [],
  "meta": {},
  "name": "MyComponent",
  "refs": {},
  "state": {
    "refToUse": {
      "code": "!(props.componentRef instanceof Function) ? props.componentRef : null",
      "propertyType": "normal",
      "type": "property",
    },
  },
  "subComponents": [],
}
`;

exports[`Parse JSX > Javascript > figmaMeta 1`] = `
{
  "@type": "@builder.io/mitosis/component",
  "children": [
    {
      "@type": "@builder.io/mitosis/node",
      "bindings": {
        "data-disabled": {
          "bindingType": "expression",
          "code": "props.interactiveState",
          "type": "single",
        },
        "data-icon": {
          "bindingType": "expression",
          "code": "props.icon",
          "type": "single",
        },
        "data-size": {
          "bindingType": "expression",
          "code": "props.size",
          "type": "single",
        },
        "data-width": {
          "bindingType": "expression",
          "code": "props.width",
          "type": "single",
        },
      },
      "children": [
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {
            "_text": {
              "bindingType": "expression",
              "code": "props.label",
              "type": "single",
            },
          },
          "children": [],
          "meta": {},
          "name": "div",
          "properties": {},
          "scope": {},
        },
      ],
      "meta": {},
      "name": "button",
      "properties": {},
      "scope": {},
    },
  ],
  "context": {
    "get": {},
    "set": {},
  },
  "exports": {},
  "hooks": {
    "onEvent": [],
    "onMount": [],
  },
  "imports": [],
  "inputs": [],
  "meta": {
    "useMetadata": {
      "figma": {
        "name": "def-button-beta-outlined",
        "props": {
          "icon": {
            "key": "👁️ Icon",
            "type": "boolean",
            "value": {
              "false": false,
              "true": "placeholder",
            },
          },
          "iconMedium": {
            "key": "📍 Icon Medium",
            "type": "instance",
          },
          "iconSmall": {
            "key": "📍 Icon Small",
            "type": "instance",
          },
          "interactiveState": {
            "key": "Interactive State",
            "type": "enum",
            "value": {
              "(Def) Enabled": false,
              "Disabled": "true",
              "Focused": false,
              "Hovered": false,
              "Pressed": false,
            },
          },
          "label": {
            "key": "✏️ Label",
            "type": "string",
          },
          "size": {
            "key": "Size",
            "type": "enum",
            "value": {
              "(Def) Medium": false,
              "Small": "small",
            },
          },
          "width": {
            "key": "Width",
            "type": "enum",
            "value": {
              "(Def) Auto Width": false,
              "Full Width": "full",
            },
          },
        },
        "url": "https://www.figma.com/xxx",
      },
    },
  },
  "name": "FigmaButton",
  "refs": {},
  "state": {},
  "subComponents": [],
}
`;

exports[`Parse JSX > Javascript > functionProps 1`] = `
{
  "@type": "@builder.io/mitosis/component",
  "children": [
    {
      "@type": "@builder.io/mitosis/node",
      "bindings": {
        "f": {
          "bindingType": "expression",
          "code": "() => x",
          "type": "single",
        },
        "f1": {
          "bindingType": "expression",
          "code": "x => x",
          "type": "single",
        },
        "f2": {
          "bindingType": "expression",
          "code": "x => {}",
          "type": "single",
        },
        "f3": {
          "bindingType": "expression",
          "code": "function () {
  return x;
}",
          "type": "single",
        },
        "f4": {
          "bindingType": "expression",
          "code": "function (x) {
  return x;
}",
          "type": "single",
        },
        "f5": {
          "bindingType": "expression",
          "code": "function (x) {
  return;
}",
          "type": "single",
        },
        "f6": {
          "bindingType": "expression",
          "code": "function () {
  return;
}",
          "type": "single",
        },
        "f7": {
          "bindingType": "expression",
          "code": "(a, b, c) => a + b + c",
          "type": "single",
        },
      },
      "children": [],
      "meta": {},
      "name": "p",
      "properties": {},
      "scope": {},
    },
  ],
  "context": {
    "get": {},
    "set": {},
  },
  "exports": {},
  "hooks": {
    "onEvent": [],
    "onMount": [],
  },
  "imports": [],
  "inputs": [],
  "meta": {},
  "name": "MyBasicComponent",
  "refs": {},
  "state": {},
  "subComponents": [],
}
`;

exports[`Parse JSX > Javascript > getterState 1`] = `
{
  "@type": "@builder.io/mitosis/component",
  "children": [
    {
      "@type": "@builder.io/mitosis/node",
      "bindings": {},
      "children": [
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {},
          "children": [
            {
              "@type": "@builder.io/mitosis/node",
              "bindings": {
                "_text": {
                  "bindingType": "expression",
                  "code": "state.foo2",
                  "type": "single",
                },
              },
              "children": [],
              "meta": {},
              "name": "div",
              "properties": {},
              "scope": {},
            },
          ],
          "meta": {},
          "name": "p",
          "properties": {},
          "scope": {},
        },
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {},
          "children": [
            {
              "@type": "@builder.io/mitosis/node",
              "bindings": {
                "_text": {
                  "bindingType": "expression",
                  "code": "state.bar",
                  "type": "single",
                },
              },
              "children": [],
              "meta": {},
              "name": "div",
              "properties": {},
              "scope": {},
            },
          ],
          "meta": {},
          "name": "p",
          "properties": {},
          "scope": {},
        },
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {},
          "children": [
            {
              "@type": "@builder.io/mitosis/node",
              "bindings": {
                "_text": {
                  "bindingType": "expression",
                  "code": "state.baz(1)",
                  "type": "single",
                },
              },
              "children": [],
              "meta": {},
              "name": "div",
              "properties": {},
              "scope": {},
            },
          ],
          "meta": {},
          "name": "p",
          "properties": {},
          "scope": {},
        },
      ],
      "meta": {},
      "name": "div",
      "properties": {},
      "scope": {},
    },
  ],
  "context": {
    "get": {},
    "set": {},
  },
  "exports": {},
  "hooks": {
    "onEvent": [],
    "onMount": [],
  },
  "imports": [],
  "inputs": [],
  "meta": {},
  "name": "Button",
  "refs": {},
  "state": {
    "bar": {
      "code": "get bar() {
  return 'bar';
}",
      "type": "getter",
    },
    "baz": {
      "code": "baz(i) {
  return i + state.foo2.length;
}",
      "type": "method",
    },
    "foo2": {
      "code": "get foo2() {
  return props.foo + 'foo';
}",
      "type": "getter",
    },
  },
  "subComponents": [],
}
`;

exports[`Parse JSX > Javascript > import types 1`] = `
{
  "@type": "@builder.io/mitosis/component",
  "children": [
    {
      "@type": "@builder.io/mitosis/node",
      "bindings": {
        "state.getRenderContentProps(props.renderContentProps.block,0)": {
          "code": "state.getRenderContentProps(props.renderContentProps.block, 0)",
          "spreadType": "normal",
          "type": "spread",
        },
      },
      "children": [],
      "meta": {},
      "name": "RenderBlock",
      "properties": {},
      "scope": {},
    },
  ],
  "context": {
    "get": {},
    "set": {},
  },
  "exports": {},
  "hooks": {
    "onEvent": [],
    "onMount": [],
  },
  "imports": [
    {
      "importKind": "value",
      "imports": {
        "RenderBlock": "default",
      },
      "path": "./builder-render-block.raw",
    },
  ],
  "inputs": [],
  "meta": {},
  "name": "RenderContent",
  "refs": {},
  "state": {
    "getRenderContentProps": {
      "code": "getRenderContentProps(block, index) {
  return {
    block: block,
    index: index
  };
}",
      "type": "method",
    },
  },
  "subComponents": [],
}
`;

exports[`Parse JSX > Javascript > layerName 1`] = `
{
  "@type": "@builder.io/mitosis/component",
  "children": [
    {
      "@type": "@builder.io/mitosis/node",
      "bindings": {},
      "children": [
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {
            "css": {
              "bindingType": "expression",
              "code": "{
  padding: '10px'
}",
              "type": "single",
            },
          },
          "children": [
            {
              "@type": "@builder.io/mitosis/node",
              "bindings": {},
              "children": [],
              "meta": {},
              "name": "div",
              "properties": {
                "_text": "
        Hello! I can run in React, Vue, Solid, or Liquid!
      ",
              },
              "scope": {},
            },
          ],
          "meta": {},
          "name": "div",
          "properties": {
            "$name": "🌟layer-name",
          },
          "scope": {},
        },
      ],
      "meta": {},
      "name": "section",
      "properties": {},
      "scope": {},
    },
  ],
  "context": {
    "get": {},
    "set": {},
  },
  "exports": {},
  "hooks": {
    "onEvent": [],
    "onMount": [],
  },
  "imports": [],
  "inputs": [],
  "meta": {},
  "name": "MyLayerNameComponent",
  "refs": {},
  "state": {},
  "subComponents": [],
}
`;

exports[`Parse JSX > Javascript > multipleOnUpdate 1`] = `
{
  "@type": "@builder.io/mitosis/component",
  "children": [
    {
      "@type": "@builder.io/mitosis/node",
      "bindings": {},
      "children": [],
      "meta": {},
      "name": "div",
      "properties": {},
      "scope": {},
    },
  ],
  "context": {
    "get": {},
    "set": {},
  },
  "exports": {},
  "hooks": {
    "onEvent": [],
    "onMount": [],
    "onUpdate": [
      {
        "code": "console.log('Runs on every update/rerender')",
        "deps": "",
        "depsArray": [],
      },
      {
        "code": "console.log('Runs on every update/rerender as well')",
        "deps": "",
        "depsArray": [],
      },
    ],
  },
  "imports": [],
  "inputs": [],
  "meta": {},
  "name": "MultipleOnUpdate",
  "refs": {},
  "state": {},
  "subComponents": [],
}
`;

exports[`Parse JSX > Javascript > multipleOnUpdateWithDeps 1`] = `
{
  "@type": "@builder.io/mitosis/component",
  "children": [
    {
      "@type": "@builder.io/mitosis/node",
      "bindings": {},
      "children": [],
      "meta": {},
      "name": "div",
      "properties": {},
      "scope": {},
    },
  ],
  "context": {
    "get": {},
    "set": {},
  },
  "exports": {},
  "hooks": {
    "onEvent": [],
    "onMount": [],
    "onUpdate": [
      {
        "code": "console.log('Runs when a or b changes', state.a, state.b);

if (state.a === 'a') {
  state.a = 'b';
}",
        "deps": "[state.a, state.b]",
        "depsArray": [
          "state.a",
          "state.b",
        ],
      },
      {
        "code": "console.log('Runs when c or d changes', state.c, state.d);

if (state.a === 'a') {
  state.a = 'b';
}",
        "deps": "[state.c, state.d]",
        "depsArray": [
          "state.c",
          "state.d",
        ],
      },
    ],
  },
  "imports": [],
  "inputs": [],
  "meta": {},
  "name": "MultipleOnUpdateWithDeps",
  "refs": {},
  "state": {
    "a": {
      "code": "'a'",
      "propertyType": "normal",
      "type": "property",
    },
    "b": {
      "code": "'b'",
      "propertyType": "normal",
      "type": "property",
    },
    "c": {
      "code": "'c'",
      "propertyType": "normal",
      "type": "property",
    },
    "d": {
      "code": "'d'",
      "propertyType": "normal",
      "type": "property",
    },
  },
  "subComponents": [],
}
`;

exports[`Parse JSX > Javascript > multipleSpreads 1`] = `
{
  "@type": "@builder.io/mitosis/component",
  "children": [
    {
      "@type": "@builder.io/mitosis/node",
      "bindings": {
        "attrs": {
          "code": "state.attrs",
          "spreadType": "normal",
          "type": "spread",
        },
        "props": {
          "code": "props",
          "spreadType": "normal",
          "type": "spread",
        },
      },
      "children": [],
      "meta": {},
      "name": "input",
      "properties": {},
      "scope": {},
    },
  ],
  "context": {
    "get": {},
    "set": {},
  },
  "exports": {},
  "hooks": {
    "onEvent": [],
    "onMount": [],
  },
  "imports": [],
  "inputs": [],
  "meta": {},
  "name": "MyBasicComponent",
  "refs": {},
  "state": {
    "attrs": {
      "code": "{
  hello: 'world'
}",
      "propertyType": "normal",
      "type": "property",
    },
  },
  "subComponents": [],
}
`;

exports[`Parse JSX > Javascript > nestedShow 1`] = `
{
  "@type": "@builder.io/mitosis/component",
  "children": [
    {
      "@type": "@builder.io/mitosis/node",
      "bindings": {
        "when": {
          "bindingType": "expression",
          "code": "props.conditionA",
          "type": "single",
        },
      },
      "children": [
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {
            "when": {
              "bindingType": "expression",
              "code": "!props.conditionB",
              "type": "single",
            },
          },
          "children": [
            {
              "@type": "@builder.io/mitosis/node",
              "bindings": {},
              "children": [
                {
                  "@type": "@builder.io/mitosis/node",
                  "bindings": {},
                  "children": [],
                  "meta": {},
                  "name": "div",
                  "properties": {
                    "_text": "if condition A and condition B",
                  },
                  "scope": {},
                },
              ],
              "meta": {},
              "name": "div",
              "properties": {},
              "scope": {},
            },
          ],
          "meta": {
            "else": {
              "@type": "@builder.io/mitosis/node",
              "bindings": {},
              "children": [
                {
                  "@type": "@builder.io/mitosis/node",
                  "bindings": {},
                  "children": [],
                  "meta": {},
                  "name": "div",
                  "properties": {
                    "_text": "else-condition-B",
                  },
                  "scope": {},
                },
              ],
              "meta": {},
              "name": "div",
              "properties": {},
              "scope": {},
            },
          },
          "name": "Show",
          "properties": {},
          "scope": {},
        },
      ],
      "meta": {
        "else": {
          "@type": "@builder.io/mitosis/node",
          "bindings": {},
          "children": [
            {
              "@type": "@builder.io/mitosis/node",
              "bindings": {},
              "children": [],
              "meta": {},
              "name": "div",
              "properties": {
                "_text": "else-condition-A",
              },
              "scope": {},
            },
          ],
          "meta": {},
          "name": "div",
          "properties": {},
          "scope": {},
        },
      },
      "name": "Show",
      "properties": {},
      "scope": {},
    },
  ],
  "context": {
    "get": {},
    "set": {},
  },
  "exports": {},
  "hooks": {
    "onEvent": [],
    "onMount": [],
  },
  "imports": [],
  "inputs": [],
  "meta": {},
  "name": "NestedShow",
  "refs": {},
  "state": {},
  "subComponents": [],
}
`;

exports[`Parse JSX > Javascript > nestedStyles 1`] = `
{
  "@type": "@builder.io/mitosis/component",
  "children": [
    {
      "@type": "@builder.io/mitosis/node",
      "bindings": {
        "css": {
          "bindingType": "expression",
          "code": "{
  display: 'flex',
  '--bar': 'red',
  color: 'var(--bar)',
  '@media (max-width: env(--mobile))': {
    display: 'block'
  },
  '&:hover': {
    display: 'flex'
  },
  ':active': {
    display: 'inline'
  },
  '.nested-selector': {
    display: 'grid'
  },
  '.nested-selector:hover': {
    display: 'block'
  },
  '&.nested-selector:active': {
    display: 'inline-block'
  }
}",
          "type": "single",
        },
      },
      "children": [
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {},
          "children": [],
          "meta": {},
          "name": "div",
          "properties": {
            "_text": "
      Hello world
    ",
          },
          "scope": {},
        },
      ],
      "meta": {},
      "name": "div",
      "properties": {},
      "scope": {},
    },
  ],
  "context": {
    "get": {},
    "set": {},
  },
  "exports": {},
  "hooks": {
    "onEvent": [],
    "onMount": [],
  },
  "imports": [],
  "inputs": [],
  "meta": {},
  "name": "NestedStyles",
  "refs": {},
  "state": {},
  "subComponents": [],
}
`;

exports[`Parse JSX > Javascript > normalizeLayerNames 1`] = `
{
  "@type": "@builder.io/mitosis/component",
  "children": [
    {
      "@type": "@builder.io/mitosis/node",
      "bindings": {},
      "children": [
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {},
          "children": [
            {
              "@type": "@builder.io/mitosis/node",
              "bindings": {},
              "children": [],
              "meta": {},
              "name": "div",
              "properties": {
                "_text": "Emoji",
              },
              "scope": {},
            },
          ],
          "meta": {},
          "name": "div",
          "properties": {
            "$name": "🌟layer-name",
          },
          "scope": {},
        },
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {},
          "children": [
            {
              "@type": "@builder.io/mitosis/node",
              "bindings": {},
              "children": [],
              "meta": {},
              "name": "div",
              "properties": {
                "_text": "Dashes",
              },
              "scope": {},
            },
          ],
          "meta": {},
          "name": "div",
          "properties": {
            "$name": "---",
          },
          "scope": {},
        },
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {},
          "children": [
            {
              "@type": "@builder.io/mitosis/node",
              "bindings": {},
              "children": [],
              "meta": {},
              "name": "div",
              "properties": {
                "_text": "CamelCase",
              },
              "scope": {},
            },
          ],
          "meta": {},
          "name": "div",
          "properties": {
            "$name": "CamelCase",
          },
          "scope": {},
        },
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {},
          "children": [
            {
              "@type": "@builder.io/mitosis/node",
              "bindings": {},
              "children": [],
              "meta": {},
              "name": "div",
              "properties": {
                "_text": "Special chars",
              },
              "scope": {},
            },
          ],
          "meta": {},
          "name": "div",
          "properties": {
            "$name": "123my@Class-Name!",
          },
          "scope": {},
        },
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {},
          "children": [
            {
              "@type": "@builder.io/mitosis/node",
              "bindings": {},
              "children": [],
              "meta": {},
              "name": "div",
              "properties": {
                "_text": "Special chars with dashes",
              },
              "scope": {},
            },
          ],
          "meta": {},
          "name": "div",
          "properties": {
            "$name": "--my--@custom--name--",
          },
          "scope": {},
        },
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {
            "css": {
              "bindingType": "expression",
              "code": "{
  margin: '10px'
}",
              "type": "single",
            },
          },
          "children": [
            {
              "@type": "@builder.io/mitosis/node",
              "bindings": {},
              "children": [],
              "meta": {},
              "name": "div",
              "properties": {
                "_text": "
        Single Number
      ",
              },
              "scope": {},
            },
          ],
          "meta": {},
          "name": "div",
          "properties": {
            "$name": "0",
          },
          "scope": {},
        },
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {
            "css": {
              "bindingType": "expression",
              "code": "{
  padding: '10px'
}",
              "type": "single",
            },
          },
          "children": [
            {
              "@type": "@builder.io/mitosis/node",
              "bindings": {},
              "children": [],
              "meta": {},
              "name": "div",
              "properties": {
                "_text": "
        Multiple Numbers
      ",
              },
              "scope": {},
            },
          ],
          "meta": {},
          "name": "div",
          "properties": {
            "$name": "123",
          },
          "scope": {},
        },
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {
            "css": {
              "bindingType": "expression",
              "code": "{
  border: '1px solid'
}",
              "type": "single",
            },
          },
          "children": [
            {
              "@type": "@builder.io/mitosis/node",
              "bindings": {},
              "children": [],
              "meta": {},
              "name": "div",
              "properties": {
                "_text": "
        Chars with numbers at end
      ",
              },
              "scope": {},
            },
          ],
          "meta": {},
          "name": "div",
          "properties": {
            "$name": "name123",
          },
          "scope": {},
        },
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {
            "css": {
              "bindingType": "expression",
              "code": "{
  color: 'red'
}",
              "type": "single",
            },
          },
          "children": [
            {
              "@type": "@builder.io/mitosis/node",
              "bindings": {},
              "children": [],
              "meta": {},
              "name": "div",
              "properties": {
                "_text": "
        Chars with numbers at start
      ",
              },
              "scope": {},
            },
          ],
          "meta": {},
          "name": "div",
          "properties": {
            "$name": "456name",
          },
          "scope": {},
        },
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {
            "css": {
              "bindingType": "expression",
              "code": "{
  background: 'blue'
}",
              "type": "single",
            },
          },
          "children": [
            {
              "@type": "@builder.io/mitosis/node",
              "bindings": {},
              "children": [],
              "meta": {},
              "name": "div",
              "properties": {
                "_text": "
        Numnbers separated by dash
      ",
              },
              "scope": {},
            },
          ],
          "meta": {},
          "name": "div",
          "properties": {
            "$name": "name-789",
          },
          "scope": {},
        },
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {},
          "children": [
            {
              "@type": "@builder.io/mitosis/node",
              "bindings": {},
              "children": [],
              "meta": {},
              "name": "div",
              "properties": {
                "_text": "Emoji",
              },
              "scope": {},
            },
          ],
          "meta": {},
          "name": "div",
          "properties": {
            "$name": "🚀",
          },
          "scope": {},
        },
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {
            "css": {
              "bindingType": "expression",
              "code": "{
  background: 'blue'
}",
              "type": "single",
            },
          },
          "children": [
            {
              "@type": "@builder.io/mitosis/node",
              "bindings": {},
              "children": [],
              "meta": {},
              "name": "div",
              "properties": {
                "_text": "
        Number
      ",
              },
              "scope": {},
            },
          ],
          "meta": {},
          "name": "div",
          "properties": {
            "data-name": "1",
          },
          "scope": {},
        },
      ],
      "meta": {},
      "name": "section",
      "properties": {},
      "scope": {},
    },
  ],
  "context": {
    "get": {},
    "set": {},
  },
  "exports": {},
  "hooks": {
    "onEvent": [],
    "onMount": [],
  },
  "imports": [],
  "inputs": [],
  "meta": {},
  "name": "MyNormalizedLayerNamesComponent",
  "refs": {},
  "state": {},
  "subComponents": [],
}
`;

exports[`Parse JSX > Javascript > onEvent 1`] = `
{
  "@type": "@builder.io/mitosis/component",
  "children": [
    {
      "@type": "@builder.io/mitosis/node",
      "bindings": {
        "ref": {
          "bindingType": "expression",
          "code": "elem",
          "type": "single",
        },
      },
      "children": [
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {},
          "children": [
            {
              "@type": "@builder.io/mitosis/node",
              "bindings": {},
              "children": [],
              "meta": {},
              "name": "div",
              "properties": {
                "_text": "Test",
              },
              "scope": {},
            },
          ],
          "meta": {},
          "name": "div",
          "properties": {},
          "scope": {},
        },
      ],
      "meta": {},
      "name": "div",
      "properties": {
        "class": "builder-embed",
      },
      "scope": {},
    },
  ],
  "context": {
    "get": {},
    "set": {},
  },
  "exports": {},
  "hooks": {
    "onEvent": [
      {
        "code": "console.log('test');
state.foo(event)",
        "elementArgName": "element",
        "eventArgName": "event",
        "eventName": "initEditingBldr",
        "isRoot": true,
        "refName": "elem",
      },
    ],
    "onMount": [
      {
        "code": "elem.dispatchEvent(new CustomEvent('initEditingBldr'))",
        "onSSR": false,
      },
    ],
  },
  "imports": [],
  "inputs": [],
  "meta": {},
  "name": "Embed",
  "refs": {
    "elem": {
      "argument": "null",
    },
  },
  "state": {
    "foo": {
      "code": "foo(event) {
  console.log('test2');
}",
      "type": "method",
    },
  },
  "subComponents": [],
}
`;

exports[`Parse JSX > Javascript > onInit & onMount 1`] = `
{
  "@type": "@builder.io/mitosis/component",
  "children": [
    {
      "@type": "@builder.io/mitosis/node",
      "bindings": {},
      "children": [],
      "meta": {},
      "name": "div",
      "properties": {},
      "scope": {},
    },
  ],
  "context": {
    "get": {},
    "set": {},
  },
  "exports": {},
  "hooks": {
    "onEvent": [],
    "onInit": {
      "code": "console.log('onInit')",
    },
    "onMount": [
      {
        "code": "console.log('onMount')",
        "onSSR": false,
      },
    ],
  },
  "imports": [],
  "inputs": [],
  "meta": {},
  "name": "OnInit",
  "refs": {},
  "state": {},
  "subComponents": [],
}
`;

exports[`Parse JSX > Javascript > onInit 1`] = `
{
  "@type": "@builder.io/mitosis/component",
  "children": [
    {
      "@type": "@builder.io/mitosis/node",
      "bindings": {},
      "children": [
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {},
          "children": [],
          "meta": {},
          "name": "div",
          "properties": {
            "_text": "Default name defined by parent ",
          },
          "scope": {},
        },
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {
            "_text": {
              "bindingType": "expression",
              "code": "state.name",
              "type": "single",
            },
          },
          "children": [],
          "meta": {},
          "name": "div",
          "properties": {},
          "scope": {},
        },
      ],
      "meta": {},
      "name": "div",
      "properties": {},
      "scope": {},
    },
  ],
  "context": {
    "get": {},
    "set": {},
  },
  "exports": {
    "defaultValues": {
      "code": "export const defaultValues = {
  name: 'PatrickJS'
};",
      "isFunction": false,
      "usedInLocal": false,
    },
  },
  "hooks": {
    "onEvent": [],
    "onInit": {
      "code": "state.name = defaultValues.name || props.name;
console.log('set defaults with props')",
    },
    "onMount": [],
  },
  "imports": [],
  "inputs": [],
  "meta": {},
  "name": "OnInit",
  "refs": {},
  "state": {
    "name": {
      "code": "''",
      "propertyType": "normal",
      "type": "property",
    },
  },
  "subComponents": [],
}
`;

exports[`Parse JSX > Javascript > onInitPlain 1`] = `
{
  "@type": "@builder.io/mitosis/component",
  "children": [
    {
      "@type": "@builder.io/mitosis/node",
      "bindings": {},
      "children": [],
      "meta": {},
      "name": "div",
      "properties": {},
      "scope": {},
    },
  ],
  "context": {
    "get": {},
    "set": {},
  },
  "exports": {},
  "hooks": {
    "onEvent": [],
    "onInit": {
      "code": "console.log('onInit')",
    },
    "onMount": [],
  },
  "imports": [],
  "inputs": [],
  "meta": {},
  "name": "OnInitPlain",
  "refs": {},
  "state": {},
  "subComponents": [],
}
`;

exports[`Parse JSX > Javascript > onMount 1`] = `
{
  "@type": "@builder.io/mitosis/component",
  "children": [
    {
      "@type": "@builder.io/mitosis/node",
      "bindings": {},
      "children": [],
      "meta": {},
      "name": "div",
      "properties": {},
      "scope": {},
    },
  ],
  "context": {
    "get": {},
    "set": {},
  },
  "exports": {},
  "hooks": {
    "onEvent": [],
    "onMount": [
      {
        "code": "console.log('Runs on mount')",
        "onSSR": false,
      },
    ],
    "onUnMount": {
      "code": "console.log('Runs on unMount')",
    },
  },
  "imports": [],
  "inputs": [],
  "meta": {},
  "name": "Comp",
  "refs": {},
  "state": {},
  "subComponents": [],
}
`;

exports[`Parse JSX > Javascript > onMountMultiple 1`] = `
{
  "@type": "@builder.io/mitosis/component",
  "children": [
    {
      "@type": "@builder.io/mitosis/node",
      "bindings": {},
      "children": [],
      "meta": {},
      "name": "div",
      "properties": {},
      "scope": {},
    },
  ],
  "context": {
    "get": {},
    "set": {},
  },
  "exports": {},
  "hooks": {
    "onEvent": [],
    "onMount": [
      {
        "code": "console.log('Runs on mount')",
        "onSSR": false,
      },
      {
        "code": "console.log('Another one runs on Mount')",
        "onSSR": false,
      },
      {
        "code": "console.log('SSR runs on Mount')",
        "onSSR": true,
      },
    ],
  },
  "imports": [],
  "inputs": [],
  "meta": {},
  "name": "Comp",
  "refs": {},
  "state": {},
  "subComponents": [],
}
`;

exports[`Parse JSX > Javascript > onUpdate 1`] = `
{
  "@type": "@builder.io/mitosis/component",
  "children": [
    {
      "@type": "@builder.io/mitosis/node",
      "bindings": {},
      "children": [],
      "meta": {},
      "name": "div",
      "properties": {},
      "scope": {},
    },
  ],
  "context": {
    "get": {},
    "set": {},
  },
  "exports": {},
  "hooks": {
    "onEvent": [],
    "onMount": [],
    "onUpdate": [
      {
        "code": "console.log('Runs on every update/rerender')",
        "deps": "",
        "depsArray": [],
      },
    ],
  },
  "imports": [],
  "inputs": [],
  "meta": {},
  "name": "OnUpdate",
  "refs": {},
  "state": {},
  "subComponents": [],
}
`;

exports[`Parse JSX > Javascript > onUpdateWithDeps 1`] = `
{
  "@type": "@builder.io/mitosis/component",
  "children": [
    {
      "@type": "@builder.io/mitosis/node",
      "bindings": {},
      "children": [],
      "meta": {},
      "name": "div",
      "properties": {},
      "scope": {},
    },
  ],
  "context": {
    "get": {},
    "set": {},
  },
  "exports": {},
  "hooks": {
    "onEvent": [],
    "onMount": [],
    "onUpdate": [
      {
        "code": "console.log('Runs when a, b or size changes', state.a, state.b, props.size)",
        "deps": "[state.a, state.b, props.size]",
        "depsArray": [
          "state.a",
          "state.b",
          "props.size",
        ],
      },
    ],
  },
  "imports": [],
  "inputs": [],
  "meta": {},
  "name": "OnUpdateWithDeps",
  "refs": {},
  "state": {
    "a": {
      "code": "'a'",
      "propertyType": "normal",
      "type": "property",
    },
    "b": {
      "code": "'b'",
      "propertyType": "normal",
      "type": "property",
    },
  },
  "subComponents": [],
}
`;

exports[`Parse JSX > Javascript > preserveExportOrLocalStatement 1`] = `
{
  "@type": "@builder.io/mitosis/component",
  "children": [
    {
      "@type": "@builder.io/mitosis/node",
      "bindings": {},
      "children": [],
      "meta": {},
      "name": "div",
      "properties": {},
      "scope": {},
    },
  ],
  "context": {
    "get": {},
    "set": {},
  },
  "exports": {
    "a": {
      "code": "export const a = 3;",
      "isFunction": false,
      "usedInLocal": false,
    },
    "b": {
      "code": "const b = 3;",
      "isFunction": false,
      "usedInLocal": false,
    },
    "bar": {
      "code": "export const bar = () => {};",
      "isFunction": true,
      "usedInLocal": false,
    },
    "foo": {
      "code": "const foo = () => {};",
      "isFunction": true,
      "usedInLocal": false,
    },
    "run": {
      "code": "export function run(value) {}",
      "isFunction": true,
      "usedInLocal": false,
    },
  },
  "hooks": {
    "onEvent": [],
    "onMount": [],
  },
  "imports": [],
  "inputs": [],
  "meta": {},
  "name": "MyBasicComponent",
  "refs": {},
  "state": {},
  "subComponents": [],
}
`;

exports[`Parse JSX > Javascript > preserveTyping 1`] = `
{
  "@type": "@builder.io/mitosis/component",
  "children": [
    {
      "@type": "@builder.io/mitosis/node",
      "bindings": {},
      "children": [
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {},
          "children": [],
          "meta": {},
          "name": "div",
          "properties": {
            "_text": "Hello! I can run in React, Vue, Solid, or Liquid! ",
          },
          "scope": {},
        },
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {
            "_text": {
              "bindingType": "expression",
              "code": "props.name",
              "type": "single",
            },
          },
          "children": [],
          "meta": {},
          "name": "div",
          "properties": {},
          "scope": {},
        },
      ],
      "meta": {},
      "name": "div",
      "properties": {},
      "scope": {},
    },
  ],
  "context": {
    "get": {},
    "set": {},
  },
  "exports": {},
  "hooks": {
    "onEvent": [],
    "onMount": [],
  },
  "imports": [],
  "inputs": [],
  "meta": {},
  "name": "MyBasicComponent",
  "refs": {},
  "state": {},
  "subComponents": [],
}
`;

exports[`Parse JSX > Javascript > propsDestructure 1`] = `
{
  "@type": "@builder.io/mitosis/component",
  "children": [
    {
      "@type": "@builder.io/mitosis/node",
      "bindings": {},
      "children": [
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {
            "_text": {
              "bindingType": "expression",
              "code": "props.children",
              "type": "single",
            },
          },
          "children": [],
          "meta": {},
          "name": "div",
          "properties": {},
          "scope": {},
        },
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {
            "_text": {
              "bindingType": "expression",
              "code": "props.type",
              "type": "single",
            },
          },
          "children": [],
          "meta": {},
          "name": "div",
          "properties": {},
          "scope": {},
        },
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {},
          "children": [],
          "meta": {},
          "name": "div",
          "properties": {
            "_text": "
      Hello! I can run in React, Vue, Solid, or Liquid!
    ",
          },
          "scope": {},
        },
      ],
      "meta": {},
      "name": "div",
      "properties": {},
      "scope": {},
    },
  ],
  "context": {
    "get": {},
    "set": {},
  },
  "exports": {},
  "hooks": {
    "onEvent": [],
    "onMount": [],
  },
  "imports": [],
  "inputs": [],
  "meta": {},
  "name": "MyBasicComponent",
  "refs": {},
  "state": {
    "name": {
      "code": "'Decadef20'",
      "propertyType": "normal",
      "type": "property",
    },
  },
  "subComponents": [],
}
`;

exports[`Parse JSX > Javascript > propsInterface 1`] = `
{
  "@type": "@builder.io/mitosis/component",
  "children": [
    {
      "@type": "@builder.io/mitosis/node",
      "bindings": {},
      "children": [
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {},
          "children": [],
          "meta": {},
          "name": "div",
          "properties": {
            "_text": "Hello! I can run in React, Vue, Solid, or Liquid! ",
          },
          "scope": {},
        },
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {
            "_text": {
              "bindingType": "expression",
              "code": "props.name",
              "type": "single",
            },
          },
          "children": [],
          "meta": {},
          "name": "div",
          "properties": {},
          "scope": {},
        },
      ],
      "meta": {},
      "name": "div",
      "properties": {},
      "scope": {},
    },
  ],
  "context": {
    "get": {},
    "set": {},
  },
  "exports": {},
  "hooks": {
    "onEvent": [],
    "onMount": [],
  },
  "imports": [],
  "inputs": [],
  "meta": {},
  "name": "MyBasicComponent",
  "refs": {},
  "state": {},
  "subComponents": [],
}
`;

exports[`Parse JSX > Javascript > propsType 1`] = `
{
  "@type": "@builder.io/mitosis/component",
  "children": [
    {
      "@type": "@builder.io/mitosis/node",
      "bindings": {},
      "children": [
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {},
          "children": [],
          "meta": {},
          "name": "div",
          "properties": {
            "_text": "Hello! I can run in React, Vue, Solid, or Liquid! ",
          },
          "scope": {},
        },
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {
            "_text": {
              "bindingType": "expression",
              "code": "props.name",
              "type": "single",
            },
          },
          "children": [],
          "meta": {},
          "name": "div",
          "properties": {},
          "scope": {},
        },
      ],
      "meta": {},
      "name": "div",
      "properties": {},
      "scope": {},
    },
  ],
  "context": {
    "get": {},
    "set": {},
  },
  "exports": {},
  "hooks": {
    "onEvent": [],
    "onMount": [],
  },
  "imports": [],
  "inputs": [],
  "meta": {},
  "name": "MyBasicComponent",
  "refs": {},
  "state": {},
  "subComponents": [],
}
`;

exports[`Parse JSX > Javascript > referencingFunInsideHook 1`] = `
{
  "@type": "@builder.io/mitosis/component",
  "children": [
    {
      "@type": "@builder.io/mitosis/node",
      "bindings": {},
      "children": [],
      "meta": {},
      "name": "div",
      "properties": {},
      "scope": {},
    },
  ],
  "context": {
    "get": {},
    "set": {},
  },
  "exports": {},
  "hooks": {
    "onEvent": [],
    "onMount": [],
    "onUpdate": [
      {
        "code": "state.foo({
  someOption: state.bar
})",
        "deps": "",
        "depsArray": [],
      },
    ],
  },
  "imports": [],
  "inputs": [],
  "meta": {},
  "name": "OnUpdate",
  "refs": {},
  "state": {
    "bar": {
      "code": "function bar() {}",
      "type": "function",
    },
    "foo": {
      "code": "function foo(params) {}",
      "type": "function",
    },
    "zoo": {
      "code": "function zoo() {
  const params = {
    cb: state.bar
  };
}",
      "type": "function",
    },
  },
  "subComponents": [],
}
`;

exports[`Parse JSX > Javascript > renderBlock 1`] = `
{
  "@type": "@builder.io/mitosis/component",
  "children": [
    {
      "@type": "@builder.io/mitosis/node",
      "bindings": {
        "when": {
          "bindingType": "expression",
          "code": "state.shouldWrap",
          "type": "single",
        },
      },
      "children": [
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {
            "when": {
              "bindingType": "expression",
              "code": "isEmptyHtmlElement(state.tag)",
              "type": "single",
            },
          },
          "children": [
            {
              "@type": "@builder.io/mitosis/node",
              "bindings": {
                "state.actions": {
                  "code": "state.actions",
                  "spreadType": "normal",
                  "type": "spread",
                },
                "state.attributes": {
                  "code": "state.attributes",
                  "spreadType": "normal",
                  "type": "spread",
                },
              },
              "children": [],
              "meta": {},
              "name": "state.tag",
              "properties": {},
              "scope": {},
            },
          ],
          "meta": {},
          "name": "Show",
          "properties": {},
          "scope": {},
        },
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {
            "when": {
              "bindingType": "expression",
              "code": "!isEmptyHtmlElement(state.tag) && state.repeatItemData",
              "type": "single",
            },
          },
          "children": [
            {
              "@type": "@builder.io/mitosis/node",
              "bindings": {
                "each": {
                  "bindingType": "expression",
                  "code": "state.repeatItemData",
                  "type": "single",
                },
              },
              "children": [
                {
                  "@type": "@builder.io/mitosis/node",
                  "bindings": {
                    "block": {
                      "bindingType": "expression",
                      "code": "data.block",
                      "type": "single",
                    },
                    "key": {
                      "bindingType": "expression",
                      "code": "index",
                      "type": "single",
                    },
                    "repeatContext": {
                      "bindingType": "expression",
                      "code": "data.context",
                      "type": "single",
                    },
                  },
                  "children": [],
                  "meta": {},
                  "name": "RenderRepeatedBlock",
                  "properties": {},
                  "scope": {},
                },
              ],
              "meta": {},
              "name": "For",
              "properties": {},
              "scope": {
                "forName": "data",
                "indexName": "index",
              },
            },
          ],
          "meta": {},
          "name": "Show",
          "properties": {},
          "scope": {},
        },
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {
            "when": {
              "bindingType": "expression",
              "code": "!isEmptyHtmlElement(state.tag) && !state.repeatItemData",
              "type": "single",
            },
          },
          "children": [
            {
              "@type": "@builder.io/mitosis/node",
              "bindings": {
                "state.actions": {
                  "code": "state.actions",
                  "spreadType": "normal",
                  "type": "spread",
                },
                "state.attributes": {
                  "code": "state.attributes",
                  "spreadType": "normal",
                  "type": "spread",
                },
              },
              "children": [
                {
                  "@type": "@builder.io/mitosis/node",
                  "bindings": {
                    "state.renderComponentProps": {
                      "code": "state.renderComponentProps",
                      "spreadType": "normal",
                      "type": "spread",
                    },
                  },
                  "children": [],
                  "meta": {},
                  "name": "state.renderComponentTag",
                  "properties": {},
                  "scope": {},
                },
                {
                  "@type": "@builder.io/mitosis/node",
                  "bindings": {
                    "each": {
                      "bindingType": "expression",
                      "code": "state.childrenWithoutParentComponent",
                      "type": "single",
                    },
                  },
                  "children": [
                    {
                      "@type": "@builder.io/mitosis/node",
                      "bindings": {
                        "block": {
                          "bindingType": "expression",
                          "code": "child",
                          "type": "single",
                        },
                        "context": {
                          "bindingType": "expression",
                          "code": "state.childrenContext",
                          "type": "single",
                        },
                        "key": {
                          "bindingType": "expression",
                          "code": "'render-block-' + child.id",
                          "type": "single",
                        },
                      },
                      "children": [],
                      "meta": {},
                      "name": "RenderBlock",
                      "properties": {},
                      "scope": {},
                    },
                  ],
                  "meta": {},
                  "name": "For",
                  "properties": {},
                  "scope": {
                    "forName": "child",
                  },
                },
                {
                  "@type": "@builder.io/mitosis/node",
                  "bindings": {
                    "each": {
                      "bindingType": "expression",
                      "code": "state.childrenWithoutParentComponent",
                      "type": "single",
                    },
                  },
                  "children": [
                    {
                      "@type": "@builder.io/mitosis/node",
                      "bindings": {
                        "block": {
                          "bindingType": "expression",
                          "code": "child",
                          "type": "single",
                        },
                        "context": {
                          "bindingType": "expression",
                          "code": "state.childrenContext",
                          "type": "single",
                        },
                        "key": {
                          "bindingType": "expression",
                          "code": "'block-style-' + child.id",
                          "type": "single",
                        },
                      },
                      "children": [],
                      "meta": {},
                      "name": "BlockStyles",
                      "properties": {},
                      "scope": {},
                    },
                  ],
                  "meta": {},
                  "name": "For",
                  "properties": {},
                  "scope": {
                    "forName": "child",
                  },
                },
              ],
              "meta": {},
              "name": "state.tag",
              "properties": {},
              "scope": {},
            },
          ],
          "meta": {},
          "name": "Show",
          "properties": {},
          "scope": {},
        },
      ],
      "meta": {
        "else": {
          "@type": "@builder.io/mitosis/node",
          "bindings": {
            "state.renderComponentProps": {
              "code": "state.renderComponentProps",
              "spreadType": "normal",
              "type": "spread",
            },
          },
          "children": [],
          "meta": {},
          "name": "state.renderComponentTag",
          "properties": {},
          "scope": {},
        },
      },
      "name": "Show",
      "properties": {},
      "scope": {},
    },
  ],
  "context": {
    "get": {},
    "set": {},
  },
  "exports": {},
  "hooks": {
    "onEvent": [],
    "onMount": [],
  },
  "imports": [
    {
      "importKind": "value",
      "imports": {
        "TARGET": "TARGET",
      },
      "path": "../../constants/target.js",
    },
    {
      "importKind": "value",
      "imports": {
        "evaluate": "evaluate",
      },
      "path": "../../functions/evaluate.js",
    },
    {
      "importKind": "value",
      "imports": {
        "extractTextStyles": "extractTextStyles",
      },
      "path": "../../functions/extract-text-styles.js",
    },
    {
      "importKind": "value",
      "imports": {
        "getBlockActions": "getBlockActions",
      },
      "path": "../../functions/get-block-actions.js",
    },
    {
      "importKind": "value",
      "imports": {
        "getBlockComponentOptions": "getBlockComponentOptions",
      },
      "path": "../../functions/get-block-component-options.js",
    },
    {
      "importKind": "value",
      "imports": {
        "getBlockProperties": "getBlockProperties",
      },
      "path": "../../functions/get-block-properties.js",
    },
    {
      "importKind": "value",
      "imports": {
        "getBlockTag": "getBlockTag",
      },
      "path": "../../functions/get-block-tag.js",
    },
    {
      "importKind": "value",
      "imports": {
        "getProcessedBlock": "getProcessedBlock",
      },
      "path": "../../functions/get-processed-block.js",
    },
    {
      "importKind": "value",
      "imports": {
        "getReactNativeBlockStyles": "getReactNativeBlockStyles",
      },
      "path": "../../functions/get-react-native-block-styles.js",
    },
    {
      "importKind": "value",
      "imports": {
        "BlockStyles": "default",
      },
      "path": "./block-styles.lite",
    },
    {
      "importKind": "value",
      "imports": {
        "isEmptyHtmlElement": "isEmptyHtmlElement",
      },
      "path": "./render-block.helpers.js",
    },
    {
      "importKind": "value",
      "imports": {
        "RenderComponentWithContext": "default",
      },
      "path": "./render-component-with-context.lite",
    },
    {
      "importKind": "value",
      "imports": {
        "RenderComponent": "default",
      },
      "path": "./render-component.lite",
    },
    {
      "importKind": "value",
      "imports": {
        "RenderRepeatedBlock": "default",
      },
      "path": "./render-repeated-block.lite",
    },
  ],
  "inputs": [],
  "meta": {},
  "name": "RenderBlock",
  "refs": {},
  "state": {
    "actions": {
      "code": "get actions() {
  return getBlockActions({
    block: state.useBlock,
    state: props.context.state,
    context: props.context.context
  });
}",
      "type": "getter",
    },
    "attributes": {
      "code": "get attributes() {
  const blockProperties = getBlockProperties(state.useBlock);
  return { ...blockProperties,
    ...(TARGET === 'reactNative' ? {
      style: getReactNativeBlockStyles({
        block: state.useBlock,
        context: props.context,
        blockStyles: blockProperties.style
      })
    } : {})
  };
}",
      "type": "getter",
    },
    "childrenContext": {
      "code": "get childrenContext() {
  return {
    apiKey: props.context.apiKey,
    state: props.context.state,
    content: props.context.content,
    context: props.context.context,
    registeredComponents: props.context.registeredComponents,
    inheritedStyles: state.inheritedTextStyles
  };
}",
      "type": "getter",
    },
    "childrenWithoutParentComponent": {
      "code": "get childrenWithoutParentComponent() {
  /**
   * When there is no \`componentRef\`, there might still be children that need to be rendered. In this case,
   * we render them outside of \`componentRef\`.
   * NOTE: We make sure not to render this if \`repeatItemData\` is non-null, because that means we are rendering an array of
   * blocks, and the children will be repeated within those blocks.
   */
  const shouldRenderChildrenOutsideRef = !state.component?.component && !state.repeatItemData;
  return shouldRenderChildrenOutsideRef ? state.useChildren : [];
}",
      "type": "getter",
    },
    "component": {
      "code": "get component() {
  const componentName = getProcessedBlock({
    block: props.block,
    state: props.context.state,
    context: props.context.context,
    shouldEvaluateBindings: false
  }).component?.name;

  if (!componentName) {
    return null;
  }

  const ref = props.context.registeredComponents[componentName];

  if (!ref) {
    // TODO: Public doc page with more info about this message
    console.warn(\`
          Could not find a registered component named \\"\${componentName}\\". 
          If you registered it, is the file that registered it imported by the file that needs to render it?\`);
    return undefined;
  } else {
    return ref;
  }
}",
      "type": "getter",
    },
    "inheritedTextStyles": {
      "code": "get inheritedTextStyles() {
  if (TARGET !== 'reactNative') {
    return {};
  }

  const styles = getReactNativeBlockStyles({
    block: state.useBlock,
    context: props.context,
    blockStyles: state.attributes.style
  });
  return extractTextStyles(styles);
}",
      "type": "getter",
    },
    "renderComponentProps": {
      "code": "get renderComponentProps() {
  return {
    blockChildren: state.useChildren,
    componentRef: state.component?.component,
    componentOptions: { ...getBlockComponentOptions(state.useBlock),

      /**
       * These attributes are passed to the wrapper element when there is one. If \`noWrap\` is set to true, then
       * they are provided to the component itself directly.
       */
      ...(state.shouldWrap ? {} : {
        attributes: { ...state.attributes,
          ...state.actions
        }
      }),
      customBreakpoints: state.childrenContext?.content?.meta?.breakpoints
    },
    context: state.childrenContext
  };
}",
      "type": "getter",
    },
    "renderComponentTag": {
      "code": "get renderComponentTag() {
  if (TARGET === 'reactNative') {
    return RenderComponentWithContext;
  } else if (TARGET === 'vue3') {
    // vue3 expects a string for the component tag
    return 'RenderComponent';
  } else {
    return RenderComponent;
  }
}",
      "type": "getter",
    },
    "repeatItemData": {
      "code": "get repeatItemData() {
  /**
   * we don't use \`state.useBlock\` here because the processing done within its logic includes evaluating the block's bindings,
   * which will not work if there is a repeat.
   */
  const {
    repeat,
    ...blockWithoutRepeat
  } = props.block;

  if (!repeat?.collection) {
    return undefined;
  }

  const itemsArray = evaluate({
    code: repeat.collection,
    state: props.context.state,
    context: props.context.context
  });

  if (!Array.isArray(itemsArray)) {
    return undefined;
  }

  const collectionName = repeat.collection.split('.').pop();
  const itemNameToUse = repeat.itemName || (collectionName ? collectionName + 'Item' : 'item');
  const repeatArray = itemsArray.map((item, index) => ({
    context: { ...props.context,
      state: { ...props.context.state,
        $index: index,
        $item: item,
        [itemNameToUse]: item,
        [\`$\${itemNameToUse}Index\`]: index
      }
    },
    block: blockWithoutRepeat
  }));
  return repeatArray;
}",
      "type": "getter",
    },
    "shouldWrap": {
      "code": "get shouldWrap() {
  return !state.component?.noWrap;
}",
      "type": "getter",
    },
    "tag": {
      "code": "get tag() {
  return getBlockTag(state.useBlock);
}",
      "type": "getter",
    },
    "useBlock": {
      "code": "get useBlock() {
  return state.repeatItemData ? props.block : getProcessedBlock({
    block: props.block,
    state: props.context.state,
    context: props.context.context,
    shouldEvaluateBindings: true
  });
}",
      "type": "getter",
    },
    "useChildren": {
      "code": "get useChildren() {
  // TO-DO: When should \`canHaveChildren\` dictate rendering?
  // This is currently commented out because some Builder components (e.g. Box) do not have \`canHaveChildren: true\`,
  // but still receive and need to render children.
  // return state.componentInfo?.canHaveChildren ? state.useBlock.children : [];
  return state.useBlock.children ?? [];
}",
      "type": "getter",
    },
  },
  "subComponents": [],
}
`;

exports[`Parse JSX > Javascript > renderContentExample 1`] = `
{
  "@type": "@builder.io/mitosis/component",
  "children": [
    {
      "@type": "@builder.io/mitosis/node",
      "bindings": {
        "css": {
          "bindingType": "expression",
          "code": "{
  display: 'flex',
  flexDirection: 'columns'
}",
          "type": "single",
        },
        "onClick": {
          "bindingType": "function",
          "code": "trackClick(props.content.id)",
          "type": "single",
        },
      },
      "children": [
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {
            "blocks": {
              "bindingType": "expression",
              "code": "props.content.blocks",
              "type": "single",
            },
          },
          "children": [],
          "meta": {},
          "name": "RenderBlocks",
          "properties": {},
          "scope": {},
        },
      ],
      "meta": {},
      "name": "div",
      "properties": {},
      "scope": {},
    },
  ],
  "context": {
    "get": {},
    "set": {
      "@dummy/context.lite:default": {
        "name": "BuilderContext",
        "value": {
          "content": {
            "code": "get content() {
  return 3;
}",
            "type": "getter",
          },
          "registeredComponents": {
            "code": "get registeredComponents() {
  return 4;
}",
            "type": "getter",
          },
        },
      },
    },
  },
  "exports": {},
  "hooks": {
    "onEvent": [],
    "onMount": [
      {
        "code": "sendComponentsToVisualEditor(props.customComponents)",
        "onSSR": false,
      },
    ],
    "onUpdate": [
      {
        "code": "dispatchNewContentToVisualEditor(props.content)",
        "deps": "[props.content]",
        "depsArray": [
          "props.content",
        ],
      },
    ],
  },
  "imports": [
    {
      "importKind": "value",
      "imports": {
        "BuilderContext": "default",
      },
      "path": "@dummy/context.lite",
    },
    {
      "importKind": "value",
      "imports": {
        "dispatchNewContentToVisualEditor": "dispatchNewContentToVisualEditor",
        "sendComponentsToVisualEditor": "sendComponentsToVisualEditor",
        "trackClick": "trackClick",
      },
      "path": "@dummy/injection-js",
    },
    {
      "importKind": "value",
      "imports": {
        "RenderBlocks": "default",
      },
      "path": "@dummy/RenderBlocks.lite.tsx",
    },
  ],
  "inputs": [],
  "meta": {},
  "name": "RenderContent",
  "refs": {},
  "state": {},
  "subComponents": [],
}
`;

exports[`Parse JSX > Javascript > rootFragmentMultiNode 1`] = `
{
  "@type": "@builder.io/mitosis/component",
  "children": [
    {
      "@type": "@builder.io/mitosis/node",
      "bindings": {},
      "children": [
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {
            "when": {
              "bindingType": "expression",
              "code": "props.link",
              "type": "single",
            },
          },
          "children": [
            {
              "@type": "@builder.io/mitosis/node",
              "bindings": {
                "href": {
                  "bindingType": "expression",
                  "code": "props.link",
                  "type": "single",
                },
                "props.attributes": {
                  "code": "props.attributes",
                  "spreadType": "normal",
                  "type": "spread",
                },
                "target": {
                  "bindingType": "expression",
                  "code": "props.openLinkInNewTab ? '_blank' : undefined",
                  "type": "single",
                },
              },
              "children": [
                {
                  "@type": "@builder.io/mitosis/node",
                  "bindings": {
                    "_text": {
                      "bindingType": "expression",
                      "code": "props.text",
                      "type": "single",
                    },
                  },
                  "children": [],
                  "meta": {},
                  "name": "div",
                  "properties": {},
                  "scope": {},
                },
              ],
              "meta": {},
              "name": "a",
              "properties": {},
              "scope": {},
            },
          ],
          "meta": {},
          "name": "Show",
          "properties": {},
          "scope": {},
        },
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {
            "when": {
              "bindingType": "expression",
              "code": "!props.link",
              "type": "single",
            },
          },
          "children": [
            {
              "@type": "@builder.io/mitosis/node",
              "bindings": {
                "props.attributes": {
                  "code": "props.attributes",
                  "spreadType": "normal",
                  "type": "spread",
                },
              },
              "children": [
                {
                  "@type": "@builder.io/mitosis/node",
                  "bindings": {
                    "_text": {
                      "bindingType": "expression",
                      "code": "props.text",
                      "type": "single",
                    },
                  },
                  "children": [],
                  "meta": {},
                  "name": "div",
                  "properties": {},
                  "scope": {},
                },
              ],
              "meta": {},
              "name": "button",
              "properties": {
                "type": "button",
              },
              "scope": {},
            },
          ],
          "meta": {},
          "name": "Show",
          "properties": {},
          "scope": {},
        },
      ],
      "meta": {},
      "name": "Fragment",
      "properties": {},
      "scope": {},
    },
  ],
  "context": {
    "get": {},
    "set": {},
  },
  "exports": {},
  "hooks": {
    "onEvent": [],
    "onMount": [],
  },
  "imports": [],
  "inputs": [],
  "meta": {},
  "name": "Button",
  "refs": {},
  "state": {},
  "subComponents": [],
}
`;

exports[`Parse JSX > Javascript > rootShow 1`] = `
{
  "@type": "@builder.io/mitosis/component",
  "children": [
    {
      "@type": "@builder.io/mitosis/node",
      "bindings": {
        "when": {
          "bindingType": "expression",
          "code": "props.foo === 'bar'",
          "type": "single",
        },
      },
      "children": [
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {},
          "children": [
            {
              "@type": "@builder.io/mitosis/node",
              "bindings": {},
              "children": [],
              "meta": {},
              "name": "div",
              "properties": {
                "_text": "Bar",
              },
              "scope": {},
            },
          ],
          "meta": {},
          "name": "div",
          "properties": {},
          "scope": {},
        },
      ],
      "meta": {
        "else": {
          "@type": "@builder.io/mitosis/node",
          "bindings": {},
          "children": [
            {
              "@type": "@builder.io/mitosis/node",
              "bindings": {},
              "children": [],
              "meta": {},
              "name": "div",
              "properties": {
                "_text": "Foo",
              },
              "scope": {},
            },
          ],
          "meta": {},
          "name": "div",
          "properties": {},
          "scope": {},
        },
      },
      "name": "Show",
      "properties": {},
      "scope": {},
    },
  ],
  "context": {
    "get": {},
    "set": {},
  },
  "exports": {},
  "hooks": {
    "onEvent": [],
    "onMount": [],
  },
  "imports": [],
  "inputs": [],
  "meta": {},
  "name": "RenderStyles",
  "refs": {},
  "state": {},
  "subComponents": [],
}
`;

exports[`Parse JSX > Javascript > self-referencing component 1`] = `
{
  "@type": "@builder.io/mitosis/component",
  "children": [
    {
      "@type": "@builder.io/mitosis/node",
      "bindings": {},
      "children": [
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {
            "_text": {
              "bindingType": "expression",
              "code": "props.name",
              "type": "single",
            },
          },
          "children": [],
          "meta": {},
          "name": "div",
          "properties": {},
          "scope": {},
        },
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {
            "when": {
              "bindingType": "expression",
              "code": "props.name === 'Batman'",
              "type": "single",
            },
          },
          "children": [
            {
              "@type": "@builder.io/mitosis/node",
              "bindings": {},
              "children": [],
              "meta": {},
              "name": "MyComponent",
              "properties": {
                "name": "Bruce Wayne",
              },
              "scope": {},
            },
          ],
          "meta": {},
          "name": "Show",
          "properties": {},
          "scope": {},
        },
      ],
      "meta": {},
      "name": "div",
      "properties": {},
      "scope": {},
    },
  ],
  "context": {
    "get": {},
    "set": {},
  },
  "exports": {},
  "hooks": {
    "onEvent": [],
    "onMount": [],
  },
  "imports": [],
  "inputs": [],
  "meta": {},
  "name": "MyComponent",
  "refs": {},
  "state": {},
  "subComponents": [],
}
`;

exports[`Parse JSX > Javascript > self-referencing component with children 1`] = `
{
  "@type": "@builder.io/mitosis/component",
  "children": [
    {
      "@type": "@builder.io/mitosis/node",
      "bindings": {},
      "children": [
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {
            "_text": {
              "bindingType": "expression",
              "code": "props.name",
              "type": "single",
            },
          },
          "children": [],
          "meta": {},
          "name": "div",
          "properties": {},
          "scope": {},
        },
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {
            "_text": {
              "bindingType": "expression",
              "code": "props.children",
              "type": "single",
            },
          },
          "children": [],
          "meta": {},
          "name": "div",
          "properties": {},
          "scope": {},
        },
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {
            "when": {
              "bindingType": "expression",
              "code": "props.name === 'Batman'",
              "type": "single",
            },
          },
          "children": [
            {
              "@type": "@builder.io/mitosis/node",
              "bindings": {},
              "children": [
                {
                  "@type": "@builder.io/mitosis/node",
                  "bindings": {},
                  "children": [
                    {
                      "@type": "@builder.io/mitosis/node",
                      "bindings": {},
                      "children": [],
                      "meta": {},
                      "name": "div",
                      "properties": {
                        "_text": "Wayne",
                      },
                      "scope": {},
                    },
                  ],
                  "meta": {},
                  "name": "div",
                  "properties": {},
                  "scope": {},
                },
              ],
              "meta": {},
              "name": "MyComponent",
              "properties": {
                "name": "Bruce",
              },
              "scope": {},
            },
          ],
          "meta": {},
          "name": "Show",
          "properties": {},
          "scope": {},
        },
      ],
      "meta": {},
      "name": "div",
      "properties": {},
      "scope": {},
    },
  ],
  "context": {
    "get": {},
    "set": {},
  },
  "exports": {},
  "hooks": {
    "onEvent": [],
    "onMount": [],
  },
  "imports": [],
  "inputs": [],
  "meta": {},
  "name": "MyComponent",
  "refs": {},
  "state": {},
  "subComponents": [],
}
`;

exports[`Parse JSX > Javascript > setState 1`] = `
{
  "@type": "@builder.io/mitosis/component",
  "children": [
    {
      "@type": "@builder.io/mitosis/node",
      "bindings": {},
      "children": [
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {
            "onClick": {
              "bindingType": "function",
              "code": "state.someFn()",
              "type": "single",
            },
          },
          "children": [
            {
              "@type": "@builder.io/mitosis/node",
              "bindings": {},
              "children": [],
              "meta": {},
              "name": "div",
              "properties": {
                "_text": "Click me",
              },
              "scope": {},
            },
          ],
          "meta": {},
          "name": "button",
          "properties": {},
          "scope": {},
        },
      ],
      "meta": {},
      "name": "div",
      "properties": {},
      "scope": {},
    },
  ],
  "context": {
    "get": {},
    "set": {},
  },
  "exports": {},
  "hooks": {
    "onEvent": [],
    "onMount": [],
  },
  "imports": [],
  "inputs": [],
  "meta": {},
  "name": "SetState",
  "refs": {},
  "state": {
    "n": {
      "code": "['123']",
      "propertyType": "reactive",
      "type": "property",
    },
    "someFn": {
      "code": "someFn() {
  state.n.value[0] = '123';
}",
      "type": "method",
    },
  },
  "subComponents": [],
}
`;

exports[`Parse JSX > Javascript > showExpressions 1`] = `
{
  "@type": "@builder.io/mitosis/component",
  "children": [
    {
      "@type": "@builder.io/mitosis/node",
      "bindings": {},
      "children": [
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {
            "when": {
              "bindingType": "expression",
              "code": "props.conditionA",
              "type": "single",
            },
          },
          "children": [
            {
              "@type": "@builder.io/mitosis/node",
              "bindings": {},
              "children": [],
              "meta": {},
              "name": "div",
              "properties": {
                "_text": "Content0",
              },
              "scope": {},
            },
          ],
          "meta": {
            "else": {
              "@type": "@builder.io/mitosis/node",
              "bindings": {},
              "children": [],
              "meta": {},
              "name": "div",
              "properties": {
                "_text": "ContentA",
              },
              "scope": {},
            },
          },
          "name": "Show",
          "properties": {},
          "scope": {},
        },
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {
            "when": {
              "bindingType": "expression",
              "code": "props.conditionA",
              "type": "single",
            },
          },
          "children": [
            {
              "@type": "@builder.io/mitosis/node",
              "bindings": {},
              "children": [],
              "meta": {},
              "name": "div",
              "properties": {
                "_text": "ContentA",
              },
              "scope": {},
            },
          ],
          "meta": {},
          "name": "Show",
          "properties": {},
          "scope": {},
        },
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {
            "when": {
              "bindingType": "expression",
              "code": "props.conditionA",
              "type": "single",
            },
          },
          "children": [],
          "meta": {
            "else": {
              "@type": "@builder.io/mitosis/node",
              "bindings": {},
              "children": [],
              "meta": {},
              "name": "div",
              "properties": {
                "_text": "ContentA",
              },
              "scope": {},
            },
          },
          "name": "Show",
          "properties": {},
          "scope": {},
        },
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {
            "when": {
              "bindingType": "expression",
              "code": "props.conditionA",
              "type": "single",
            },
          },
          "children": [
            {
              "@type": "@builder.io/mitosis/node",
              "bindings": {},
              "children": [],
              "meta": {},
              "name": "div",
              "properties": {
                "_text": "ContentB",
              },
              "scope": {},
            },
          ],
          "meta": {
            "else": {
              "@type": "@builder.io/mitosis/node",
              "bindings": {
                "_text": {
                  "bindingType": "expression",
                  "code": "undefined",
                  "type": "single",
                },
              },
              "children": [],
              "meta": {},
              "name": "div",
              "properties": {},
              "scope": {},
            },
          },
          "name": "Show",
          "properties": {},
          "scope": {},
        },
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {
            "when": {
              "bindingType": "expression",
              "code": "props.conditionA",
              "type": "single",
            },
          },
          "children": [
            {
              "@type": "@builder.io/mitosis/node",
              "bindings": {
                "_text": {
                  "bindingType": "expression",
                  "code": "undefined",
                  "type": "single",
                },
              },
              "children": [],
              "meta": {},
              "name": "div",
              "properties": {},
              "scope": {},
            },
          ],
          "meta": {
            "else": {
              "@type": "@builder.io/mitosis/node",
              "bindings": {},
              "children": [],
              "meta": {},
              "name": "div",
              "properties": {
                "_text": "ContentB",
              },
              "scope": {},
            },
          },
          "name": "Show",
          "properties": {},
          "scope": {},
        },
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {
            "when": {
              "bindingType": "expression",
              "code": "props.conditionA",
              "type": "single",
            },
          },
          "children": [
            {
              "@type": "@builder.io/mitosis/node",
              "bindings": {},
              "children": [],
              "meta": {},
              "name": "div",
              "properties": {
                "_text": "ContentC",
              },
              "scope": {},
            },
          ],
          "meta": {},
          "name": "Show",
          "properties": {},
          "scope": {},
        },
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {
            "when": {
              "bindingType": "expression",
              "code": "props.conditionA",
              "type": "single",
            },
          },
          "children": [],
          "meta": {
            "else": {
              "@type": "@builder.io/mitosis/node",
              "bindings": {},
              "children": [],
              "meta": {},
              "name": "div",
              "properties": {
                "_text": "ContentC",
              },
              "scope": {},
            },
          },
          "name": "Show",
          "properties": {},
          "scope": {},
        },
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {
            "when": {
              "bindingType": "expression",
              "code": "props.conditionA",
              "type": "single",
            },
          },
          "children": [
            {
              "@type": "@builder.io/mitosis/node",
              "bindings": {},
              "children": [],
              "meta": {},
              "name": "div",
              "properties": {
                "_text": "ContentD",
              },
              "scope": {},
            },
          ],
          "meta": {},
          "name": "Show",
          "properties": {},
          "scope": {},
        },
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {
            "when": {
              "bindingType": "expression",
              "code": "props.conditionA",
              "type": "single",
            },
          },
          "children": [],
          "meta": {
            "else": {
              "@type": "@builder.io/mitosis/node",
              "bindings": {},
              "children": [],
              "meta": {},
              "name": "div",
              "properties": {
                "_text": "ContentD",
              },
              "scope": {},
            },
          },
          "name": "Show",
          "properties": {},
          "scope": {},
        },
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {
            "when": {
              "bindingType": "expression",
              "code": "props.conditionA",
              "type": "single",
            },
          },
          "children": [
            {
              "@type": "@builder.io/mitosis/node",
              "bindings": {},
              "children": [],
              "meta": {},
              "name": "div",
              "properties": {
                "_text": "ContentE",
              },
              "scope": {},
            },
          ],
          "meta": {
            "else": {
              "@type": "@builder.io/mitosis/node",
              "bindings": {},
              "children": [],
              "meta": {},
              "name": "div",
              "properties": {
                "_text": "hello",
              },
              "scope": {},
            },
          },
          "name": "Show",
          "properties": {},
          "scope": {},
        },
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {
            "when": {
              "bindingType": "expression",
              "code": "props.conditionA",
              "type": "single",
            },
          },
          "children": [
            {
              "@type": "@builder.io/mitosis/node",
              "bindings": {},
              "children": [],
              "meta": {},
              "name": "div",
              "properties": {
                "_text": "hello",
              },
              "scope": {},
            },
          ],
          "meta": {
            "else": {
              "@type": "@builder.io/mitosis/node",
              "bindings": {},
              "children": [],
              "meta": {},
              "name": "div",
              "properties": {
                "_text": "ContentE",
              },
              "scope": {},
            },
          },
          "name": "Show",
          "properties": {},
          "scope": {},
        },
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {
            "when": {
              "bindingType": "expression",
              "code": "props.conditionA",
              "type": "single",
            },
          },
          "children": [
            {
              "@type": "@builder.io/mitosis/node",
              "bindings": {},
              "children": [],
              "meta": {},
              "name": "div",
              "properties": {
                "_text": "ContentF",
              },
              "scope": {},
            },
          ],
          "meta": {
            "else": {
              "@type": "@builder.io/mitosis/node",
              "bindings": {},
              "children": [],
              "meta": {},
              "name": "div",
              "properties": {
                "_text": "123",
              },
              "scope": {},
            },
          },
          "name": "Show",
          "properties": {},
          "scope": {},
        },
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {
            "when": {
              "bindingType": "expression",
              "code": "props.conditionA",
              "type": "single",
            },
          },
          "children": [
            {
              "@type": "@builder.io/mitosis/node",
              "bindings": {},
              "children": [],
              "meta": {},
              "name": "div",
              "properties": {
                "_text": "123",
              },
              "scope": {},
            },
          ],
          "meta": {
            "else": {
              "@type": "@builder.io/mitosis/node",
              "bindings": {},
              "children": [],
              "meta": {},
              "name": "div",
              "properties": {
                "_text": "ContentF",
              },
              "scope": {},
            },
          },
          "name": "Show",
          "properties": {},
          "scope": {},
        },
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {
            "when": {
              "bindingType": "expression",
              "code": "props.conditionA === 'Default'",
              "type": "single",
            },
          },
          "children": [
            {
              "@type": "@builder.io/mitosis/node",
              "bindings": {},
              "children": [],
              "meta": {},
              "name": "div",
              "properties": {
                "_text": "4mb",
              },
              "scope": {},
            },
          ],
          "meta": {
            "else": {
              "@type": "@builder.io/mitosis/node",
              "bindings": {
                "when": {
                  "bindingType": "expression",
                  "code": "props.conditionB === 'Complete'",
                  "type": "single",
                },
              },
              "children": [
                {
                  "@type": "@builder.io/mitosis/node",
                  "bindings": {},
                  "children": [],
                  "meta": {},
                  "name": "div",
                  "properties": {
                    "_text": "20mb",
                  },
                  "scope": {},
                },
              ],
              "meta": {
                "else": {
                  "@type": "@builder.io/mitosis/node",
                  "bindings": {},
                  "children": [],
                  "meta": {},
                  "name": "div",
                  "properties": {
                    "_text": "9mb",
                  },
                  "scope": {},
                },
              },
              "name": "Show",
              "properties": {},
              "scope": {},
            },
          },
          "name": "Show",
          "properties": {},
          "scope": {},
        },
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {
            "when": {
              "bindingType": "expression",
              "code": "props.conditionA === 'Default'",
              "type": "single",
            },
          },
          "children": [
            {
              "@type": "@builder.io/mitosis/node",
              "bindings": {
                "when": {
                  "bindingType": "expression",
                  "code": "props.conditionB === 'Complete'",
                  "type": "single",
                },
              },
              "children": [
                {
                  "@type": "@builder.io/mitosis/node",
                  "bindings": {},
                  "children": [],
                  "meta": {},
                  "name": "div",
                  "properties": {
                    "_text": "20mb",
                  },
                  "scope": {},
                },
              ],
              "meta": {
                "else": {
                  "@type": "@builder.io/mitosis/node",
                  "bindings": {},
                  "children": [],
                  "meta": {},
                  "name": "div",
                  "properties": {
                    "_text": "9mb",
                  },
                  "scope": {},
                },
              },
              "name": "Show",
              "properties": {},
              "scope": {},
            },
          ],
          "meta": {
            "else": {
              "@type": "@builder.io/mitosis/node",
              "bindings": {},
              "children": [],
              "meta": {},
              "name": "div",
              "properties": {
                "_text": "4mb",
              },
              "scope": {},
            },
          },
          "name": "Show",
          "properties": {},
          "scope": {},
        },
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {
            "when": {
              "bindingType": "expression",
              "code": "props.conditionA === 'Default'",
              "type": "single",
            },
          },
          "children": [
            {
              "@type": "@builder.io/mitosis/node",
              "bindings": {
                "when": {
                  "bindingType": "expression",
                  "code": "props.conditionB === 'Complete'",
                  "type": "single",
                },
              },
              "children": [
                {
                  "@type": "@builder.io/mitosis/node",
                  "bindings": {},
                  "children": [
                    {
                      "@type": "@builder.io/mitosis/node",
                      "bindings": {},
                      "children": [],
                      "meta": {},
                      "name": "div",
                      "properties": {
                        "_text": "complete",
                      },
                      "scope": {},
                    },
                  ],
                  "meta": {},
                  "name": "div",
                  "properties": {},
                  "scope": {},
                },
              ],
              "meta": {
                "else": {
                  "@type": "@builder.io/mitosis/node",
                  "bindings": {},
                  "children": [],
                  "meta": {},
                  "name": "div",
                  "properties": {
                    "_text": "9mb",
                  },
                  "scope": {},
                },
              },
              "name": "Show",
              "properties": {},
              "scope": {},
            },
          ],
          "meta": {
            "else": {
              "@type": "@builder.io/mitosis/node",
              "bindings": {
                "when": {
                  "bindingType": "expression",
                  "code": "props.conditionC === 'Complete'",
                  "type": "single",
                },
              },
              "children": [
                {
                  "@type": "@builder.io/mitosis/node",
                  "bindings": {},
                  "children": [],
                  "meta": {},
                  "name": "div",
                  "properties": {
                    "_text": "dff",
                  },
                  "scope": {},
                },
              ],
              "meta": {
                "else": {
                  "@type": "@builder.io/mitosis/node",
                  "bindings": {},
                  "children": [
                    {
                      "@type": "@builder.io/mitosis/node",
                      "bindings": {},
                      "children": [],
                      "meta": {},
                      "name": "div",
                      "properties": {
                        "_text": "complete else",
                      },
                      "scope": {},
                    },
                  ],
                  "meta": {},
                  "name": "div",
                  "properties": {},
                  "scope": {},
                },
              },
              "name": "Show",
              "properties": {},
              "scope": {},
            },
          },
          "name": "Show",
          "properties": {},
          "scope": {},
        },
      ],
      "meta": {},
      "name": "div",
      "properties": {},
      "scope": {},
    },
  ],
  "context": {
    "get": {},
    "set": {},
  },
  "exports": {},
  "hooks": {
    "onEvent": [],
    "onMount": [],
  },
  "imports": [],
  "inputs": [],
  "meta": {},
  "name": "ShowWithOtherValues",
  "refs": {},
  "state": {},
  "subComponents": [],
}
`;

exports[`Parse JSX > Javascript > showWithFor 1`] = `
{
  "@type": "@builder.io/mitosis/component",
  "children": [
    {
      "@type": "@builder.io/mitosis/node",
      "bindings": {
        "when": {
          "bindingType": "expression",
          "code": "props.conditionA",
          "type": "single",
        },
      },
      "children": [
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {
            "each": {
              "bindingType": "expression",
              "code": "props.items",
              "type": "single",
            },
          },
          "children": [
            {
              "@type": "@builder.io/mitosis/node",
              "bindings": {
                "key": {
                  "bindingType": "expression",
                  "code": "idx",
                  "type": "single",
                },
              },
              "children": [
                {
                  "@type": "@builder.io/mitosis/node",
                  "bindings": {
                    "_text": {
                      "bindingType": "expression",
                      "code": "item",
                      "type": "single",
                    },
                  },
                  "children": [],
                  "meta": {},
                  "name": "div",
                  "properties": {},
                  "scope": {},
                },
              ],
              "meta": {},
              "name": "div",
              "properties": {},
              "scope": {},
            },
          ],
          "meta": {},
          "name": "For",
          "properties": {},
          "scope": {
            "forName": "item",
            "indexName": "idx",
          },
        },
      ],
      "meta": {
        "else": {
          "@type": "@builder.io/mitosis/node",
          "bindings": {},
          "children": [
            {
              "@type": "@builder.io/mitosis/node",
              "bindings": {},
              "children": [],
              "meta": {},
              "name": "div",
              "properties": {
                "_text": "else-condition-A",
              },
              "scope": {},
            },
          ],
          "meta": {},
          "name": "div",
          "properties": {},
          "scope": {},
        },
      },
      "name": "Show",
      "properties": {},
      "scope": {},
    },
  ],
  "context": {
    "get": {},
    "set": {},
  },
  "exports": {},
  "hooks": {
    "onEvent": [],
    "onMount": [],
  },
  "imports": [],
  "inputs": [],
  "meta": {},
  "name": "NestedShow",
  "refs": {},
  "state": {},
  "subComponents": [],
}
`;

exports[`Parse JSX > Javascript > showWithOtherValues 1`] = `
{
  "@type": "@builder.io/mitosis/component",
  "children": [
    {
      "@type": "@builder.io/mitosis/node",
      "bindings": {},
      "children": [
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {
            "when": {
              "bindingType": "expression",
              "code": "props.conditionA",
              "type": "single",
            },
          },
          "children": [
            {
              "@type": "@builder.io/mitosis/node",
              "bindings": {},
              "children": [],
              "meta": {},
              "name": "div",
              "properties": {
                "_text": "
        ContentA
      ",
              },
              "scope": {},
            },
          ],
          "meta": {},
          "name": "Show",
          "properties": {},
          "scope": {},
        },
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {
            "when": {
              "bindingType": "expression",
              "code": "props.conditionA",
              "type": "single",
            },
          },
          "children": [
            {
              "@type": "@builder.io/mitosis/node",
              "bindings": {},
              "children": [],
              "meta": {},
              "name": "div",
              "properties": {
                "_text": "
        ContentB
      ",
              },
              "scope": {},
            },
          ],
          "meta": {
            "else": {
              "@type": "@builder.io/mitosis/node",
              "bindings": {
                "_text": {
                  "bindingType": "expression",
                  "code": "undefined",
                  "type": "single",
                },
              },
              "children": [],
              "meta": {},
              "name": "div",
              "properties": {},
              "scope": {},
            },
          },
          "name": "Show",
          "properties": {},
          "scope": {},
        },
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {
            "when": {
              "bindingType": "expression",
              "code": "props.conditionA",
              "type": "single",
            },
          },
          "children": [
            {
              "@type": "@builder.io/mitosis/node",
              "bindings": {},
              "children": [],
              "meta": {},
              "name": "div",
              "properties": {
                "_text": "
        ContentC
      ",
              },
              "scope": {},
            },
          ],
          "meta": {},
          "name": "Show",
          "properties": {},
          "scope": {},
        },
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {
            "when": {
              "bindingType": "expression",
              "code": "props.conditionA",
              "type": "single",
            },
          },
          "children": [
            {
              "@type": "@builder.io/mitosis/node",
              "bindings": {},
              "children": [],
              "meta": {},
              "name": "div",
              "properties": {
                "_text": "
        ContentD
      ",
              },
              "scope": {},
            },
          ],
          "meta": {},
          "name": "Show",
          "properties": {},
          "scope": {},
        },
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {
            "when": {
              "bindingType": "expression",
              "code": "props.conditionA",
              "type": "single",
            },
          },
          "children": [
            {
              "@type": "@builder.io/mitosis/node",
              "bindings": {},
              "children": [],
              "meta": {},
              "name": "div",
              "properties": {
                "_text": "
        ContentE
      ",
              },
              "scope": {},
            },
          ],
          "meta": {
            "else": {
              "@type": "@builder.io/mitosis/node",
              "bindings": {},
              "children": [],
              "meta": {},
              "name": "div",
              "properties": {
                "_text": "hello",
              },
              "scope": {},
            },
          },
          "name": "Show",
          "properties": {},
          "scope": {},
        },
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {
            "when": {
              "bindingType": "expression",
              "code": "props.conditionA",
              "type": "single",
            },
          },
          "children": [
            {
              "@type": "@builder.io/mitosis/node",
              "bindings": {},
              "children": [],
              "meta": {},
              "name": "div",
              "properties": {
                "_text": "
        ContentF
      ",
              },
              "scope": {},
            },
          ],
          "meta": {
            "else": {
              "@type": "@builder.io/mitosis/node",
              "bindings": {},
              "children": [],
              "meta": {},
              "name": "div",
              "properties": {
                "_text": "123",
              },
              "scope": {},
            },
          },
          "name": "Show",
          "properties": {},
          "scope": {},
        },
      ],
      "meta": {},
      "name": "div",
      "properties": {},
      "scope": {},
    },
  ],
  "context": {
    "get": {},
    "set": {},
  },
  "exports": {},
  "hooks": {
    "onEvent": [],
    "onMount": [],
  },
  "imports": [],
  "inputs": [],
  "meta": {},
  "name": "ShowWithOtherValues",
  "refs": {},
  "state": {},
  "subComponents": [],
}
`;

exports[`Parse JSX > Javascript > showWithRootText 1`] = `
{
  "@type": "@builder.io/mitosis/component",
  "children": [
    {
      "@type": "@builder.io/mitosis/node",
      "bindings": {
        "when": {
          "bindingType": "expression",
          "code": "props.conditionA",
          "type": "single",
        },
      },
      "children": [
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {},
          "children": [],
          "meta": {},
          "name": "div",
          "properties": {
            "_text": "
      ContentA
    ",
          },
          "scope": {},
        },
      ],
      "meta": {
        "else": {
          "@type": "@builder.io/mitosis/node",
          "bindings": {},
          "children": [
            {
              "@type": "@builder.io/mitosis/node",
              "bindings": {},
              "children": [],
              "meta": {},
              "name": "div",
              "properties": {
                "_text": "else-condition-A",
              },
              "scope": {},
            },
          ],
          "meta": {},
          "name": "div",
          "properties": {},
          "scope": {},
        },
      },
      "name": "Show",
      "properties": {},
      "scope": {},
    },
  ],
  "context": {
    "get": {},
    "set": {},
  },
  "exports": {},
  "hooks": {
    "onEvent": [],
    "onMount": [],
  },
  "imports": [],
  "inputs": [],
  "meta": {},
  "name": "ShowRootText",
  "refs": {},
  "state": {},
  "subComponents": [],
}
`;

exports[`Parse JSX > Javascript > signalsOnUpdate 1`] = `
{
  "@type": "@builder.io/mitosis/component",
  "children": [
    {
      "@type": "@builder.io/mitosis/node",
      "bindings": {
        "css": {
          "bindingType": "expression",
          "code": "{
  padding: '10px'
}",
          "type": "single",
        },
      },
      "children": [
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {
            "_text": {
              "bindingType": "expression",
              "code": "props.id",
              "type": "single",
            },
          },
          "children": [],
          "meta": {},
          "name": "div",
          "properties": {},
          "scope": {},
        },
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {
            "_text": {
              "bindingType": "expression",
              "code": "props.foo.value.bar.baz",
              "type": "single",
            },
          },
          "children": [],
          "meta": {},
          "name": "div",
          "properties": {},
          "scope": {},
        },
      ],
      "meta": {},
      "name": "div",
      "properties": {
        "class": "test",
      },
      "scope": {},
    },
  ],
  "context": {
    "get": {},
    "set": {},
  },
  "exports": {},
  "hooks": {
    "onEvent": [],
    "onMount": [],
    "onUpdate": [
      {
        "code": "console.log('props.id changed', props.id);
console.log('props.foo.value.bar.baz changed', props.foo.value.bar.baz)",
        "deps": "[props.id, props.foo.value.bar.baz]",
        "depsArray": [
          "props.id",
        ],
      },
    ],
  },
  "imports": [],
  "inputs": [],
  "meta": {},
  "name": "MyBasicComponent",
  "refs": {},
  "state": {},
  "subComponents": [],
}
`;

exports[`Parse JSX > Javascript > spreadAttrs 1`] = `
{
  "@type": "@builder.io/mitosis/component",
  "children": [
    {
      "@type": "@builder.io/mitosis/node",
      "bindings": {
        "attrs": {
          "code": "attrs",
          "spreadType": "normal",
          "type": "spread",
        },
      },
      "children": [],
      "meta": {},
      "name": "input",
      "properties": {},
      "scope": {},
    },
  ],
  "context": {
    "get": {},
    "set": {},
  },
  "exports": {},
  "hooks": {
    "onEvent": [],
    "onMount": [],
  },
  "imports": [],
  "inputs": [],
  "meta": {},
  "name": "MyBasicComponent",
  "refs": {},
  "state": {},
  "subComponents": [],
}
`;

exports[`Parse JSX > Javascript > spreadNestedProps 1`] = `
{
  "@type": "@builder.io/mitosis/component",
  "children": [
    {
      "@type": "@builder.io/mitosis/node",
      "bindings": {
        "props.nested": {
          "code": "props.nested",
          "spreadType": "normal",
          "type": "spread",
        },
      },
      "children": [],
      "meta": {},
      "name": "input",
      "properties": {},
      "scope": {},
    },
  ],
  "context": {
    "get": {},
    "set": {},
  },
  "exports": {},
  "hooks": {
    "onEvent": [],
    "onMount": [],
  },
  "imports": [],
  "inputs": [],
  "meta": {},
  "name": "MyBasicComponent",
  "refs": {},
  "state": {},
  "subComponents": [],
}
`;

exports[`Parse JSX > Javascript > spreadProps 1`] = `
{
  "@type": "@builder.io/mitosis/component",
  "children": [
    {
      "@type": "@builder.io/mitosis/node",
      "bindings": {
        "props": {
          "code": "props",
          "spreadType": "normal",
          "type": "spread",
        },
      },
      "children": [],
      "meta": {},
      "name": "input",
      "properties": {},
      "scope": {},
    },
  ],
  "context": {
    "get": {},
    "set": {},
  },
  "exports": {},
  "hooks": {
    "onEvent": [],
    "onMount": [],
  },
  "imports": [],
  "inputs": [],
  "meta": {},
  "name": "MyBasicComponent",
  "refs": {},
  "state": {},
  "subComponents": [],
}
`;

exports[`Parse JSX > Javascript > store-async-function 1`] = `
{
  "@type": "@builder.io/mitosis/component",
  "children": [
    {
      "@type": "@builder.io/mitosis/node",
      "bindings": {},
      "children": [],
      "meta": {},
      "name": "div",
      "properties": {},
      "scope": {},
    },
  ],
  "context": {
    "get": {},
    "set": {},
  },
  "exports": {},
  "hooks": {
    "onEvent": [],
    "onMount": [],
  },
  "imports": [],
  "inputs": [],
  "meta": {},
  "name": "StringLiteralStore",
  "refs": {},
  "state": {
    "arrowFunction": {
      "code": "async function arrowFunction() {
  return Promise.resolve();
}",
      "type": "function",
    },
    "fetchUsers": {
      "code": "async function fetchUsers() {
  return Promise.resolve();
}",
      "type": "function",
    },
    "namedFunction": {
      "code": "async function namedFunction() {
  return Promise.resolve();
}",
      "type": "function",
    },
  },
  "subComponents": [],
}
`;

exports[`Parse JSX > Javascript > string-literal-store 1`] = `
{
  "@type": "@builder.io/mitosis/component",
  "children": [
    {
      "@type": "@builder.io/mitosis/node",
      "bindings": {},
      "children": [
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {
            "_text": {
              "bindingType": "expression",
              "code": "state.foo",
              "type": "single",
            },
          },
          "children": [],
          "meta": {},
          "name": "div",
          "properties": {},
          "scope": {},
        },
      ],
      "meta": {},
      "name": "div",
      "properties": {},
      "scope": {},
    },
  ],
  "context": {
    "get": {},
    "set": {},
  },
  "exports": {},
  "hooks": {
    "onEvent": [],
    "onMount": [],
  },
  "imports": [],
  "inputs": [],
  "meta": {},
  "name": "StringLiteralStore",
  "refs": {},
  "state": {
    "foo": {
      "code": "123",
      "propertyType": "normal",
      "type": "property",
    },
  },
  "subComponents": [],
}
`;

exports[`Parse JSX > Javascript > string-literal-store-kebab 1`] = `
{
  "@type": "@builder.io/mitosis/component",
  "children": [
    {
      "@type": "@builder.io/mitosis/node",
      "bindings": {},
      "children": [
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {
            "_text": {
              "bindingType": "expression",
              "code": "state['foo-bar']",
              "type": "single",
            },
          },
          "children": [],
          "meta": {},
          "name": "div",
          "properties": {},
          "scope": {},
        },
      ],
      "meta": {},
      "name": "div",
      "properties": {},
      "scope": {},
    },
  ],
  "context": {
    "get": {},
    "set": {},
  },
  "exports": {},
  "hooks": {
    "onEvent": [],
    "onMount": [],
  },
  "imports": [],
  "inputs": [],
  "meta": {},
  "name": "StringLiteralStore",
  "refs": {},
  "state": {
    "foo-bar": {
      "code": "123",
      "propertyType": "normal",
      "type": "property",
    },
  },
  "subComponents": [],
}
`;

exports[`Parse JSX > Javascript > styleClassAndCss 1`] = `
{
  "@type": "@builder.io/mitosis/component",
  "children": [
    {
      "@type": "@builder.io/mitosis/node",
      "bindings": {
        "css": {
          "bindingType": "expression",
          "code": "{
  display: 'flex',
  flexDirection: 'column',
  alignItems: 'stretch'
}",
          "type": "single",
        },
        "style": {
          "bindingType": "expression",
          "code": "{
  width: '100%'
}",
          "type": "single",
        },
      },
      "children": [],
      "meta": {},
      "name": "div",
      "properties": {
        "class": "builder-column",
      },
      "scope": {},
    },
  ],
  "context": {
    "get": {},
    "set": {},
  },
  "exports": {},
  "hooks": {
    "onEvent": [],
    "onMount": [],
  },
  "imports": [],
  "inputs": [],
  "meta": {},
  "name": "MyComponent",
  "refs": {},
  "state": {},
  "subComponents": [],
}
`;

exports[`Parse JSX > Javascript > stylePropClassAndCss 1`] = `
{
  "@type": "@builder.io/mitosis/component",
  "children": [
    {
      "@type": "@builder.io/mitosis/node",
      "bindings": {
        "css": {
          "bindingType": "expression",
          "code": "{
  display: 'flex',
  flexDirection: 'column',
  alignItems: 'stretch'
}",
          "type": "single",
        },
        "style": {
          "bindingType": "expression",
          "code": "props.attributes.style",
          "type": "single",
        },
      },
      "children": [],
      "meta": {},
      "name": "div",
      "properties": {
        "class": "USE_TARGET_BLOCK_1",
      },
      "scope": {},
    },
  ],
  "context": {
    "get": {},
    "set": {},
  },
  "exports": {},
  "hooks": {
    "onEvent": [],
    "onMount": [],
  },
  "imports": [],
  "inputs": [],
  "meta": {},
  "name": "StylePropClassAndCss",
  "refs": {},
  "state": {},
  "subComponents": [],
  "targetBlocks": {
    "1": {
      "default": {
        "code": "props.attributes.class",
      },
      "settings": {
        "requiresDefault": true,
      },
      "svelte": {
        "code": "props.attributes.classfdsa",
      },
      "vue": {
        "code": "props.attributes.className",
      },
    },
  },
}
`;

exports[`Parse JSX > Javascript > subComponent 1`] = `
{
  "@type": "@builder.io/mitosis/component",
  "children": [
    {
      "@type": "@builder.io/mitosis/node",
      "bindings": {},
      "children": [],
      "meta": {},
      "name": "Foo",
      "properties": {},
      "scope": {},
    },
  ],
  "context": {
    "get": {},
    "set": {},
  },
  "exports": {},
  "hooks": {
    "onEvent": [],
    "onMount": [],
  },
  "imports": [
    {
      "importKind": "value",
      "imports": {
        "Foo": "default",
      },
      "path": "./foo-sub-component.lite",
    },
  ],
  "inputs": [],
  "meta": {},
  "name": "SubComponent",
  "refs": {},
  "state": {},
  "subComponents": [],
}
`;

exports[`Parse JSX > Javascript > svgComponent 1`] = `
{
  "@type": "@builder.io/mitosis/component",
  "children": [
    {
      "@type": "@builder.io/mitosis/node",
      "bindings": {
        "height": {
          "bindingType": "expression",
          "code": "42",
          "type": "single",
        },
        "viewBox": {
          "bindingType": "expression",
          "code": "'0 0 ' + 42 + ' ' + 42",
          "type": "single",
        },
        "width": {
          "bindingType": "expression",
          "code": "42",
          "type": "single",
        },
      },
      "children": [
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {},
          "children": [
            {
              "@type": "@builder.io/mitosis/node",
              "bindings": {},
              "children": [
                {
                  "@type": "@builder.io/mitosis/node",
                  "bindings": {},
                  "children": [],
                  "meta": {},
                  "name": "feFlood",
                  "properties": {
                    "result": "BackgroundImageFix",
                  },
                  "scope": {},
                },
                {
                  "@type": "@builder.io/mitosis/node",
                  "bindings": {},
                  "children": [],
                  "meta": {},
                  "name": "feBlend",
                  "properties": {
                    "in": "SourceGraphic",
                    "in2": "BackgroundImageFix",
                    "result": "shape",
                  },
                  "scope": {},
                },
                {
                  "@type": "@builder.io/mitosis/node",
                  "bindings": {
                    "stdDeviation": {
                      "bindingType": "expression",
                      "code": "7",
                      "type": "single",
                    },
                  },
                  "children": [],
                  "meta": {},
                  "name": "feGaussianBlur",
                  "properties": {
                    "result": "effect1_foregroundBlur",
                  },
                  "scope": {},
                },
              ],
              "meta": {},
              "name": "filter",
              "properties": {
                "filterUnits": "userSpaceOnUse",
                "id": "prefix__filter0_f",
              },
              "scope": {},
            },
          ],
          "meta": {},
          "name": "defs",
          "properties": {},
          "scope": {},
        },
      ],
      "meta": {},
      "name": "svg",
      "properties": {
        "fill": "none",
        "role": "img",
      },
      "scope": {},
    },
  ],
  "context": {
    "get": {},
    "set": {},
  },
  "exports": {},
  "hooks": {
    "onEvent": [],
    "onMount": [],
  },
  "imports": [],
  "inputs": [],
  "meta": {},
  "name": "SvgComponent",
  "refs": {},
  "state": {},
  "subComponents": [],
}
`;

exports[`Parse JSX > Javascript > typeDependency 1`] = `
{
  "@type": "@builder.io/mitosis/component",
  "children": [
    {
      "@type": "@builder.io/mitosis/node",
      "bindings": {},
      "children": [
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {
            "_text": {
              "bindingType": "expression",
              "code": "props.foo",
              "type": "single",
            },
          },
          "children": [],
          "meta": {},
          "name": "div",
          "properties": {},
          "scope": {},
        },
      ],
      "meta": {},
      "name": "div",
      "properties": {},
      "scope": {},
    },
  ],
  "context": {
    "get": {},
    "set": {},
  },
  "exports": {},
  "hooks": {
    "onEvent": [],
    "onMount": [],
  },
  "imports": [],
  "inputs": [],
  "meta": {},
  "name": "TypeDependency",
  "refs": {},
  "state": {},
  "subComponents": [],
}
`;

exports[`Parse JSX > Javascript > typeExternalProps 1`] = `
{
  "@type": "@builder.io/mitosis/component",
  "children": [
    {
      "@type": "@builder.io/mitosis/node",
      "bindings": {},
      "children": [
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {},
          "children": [],
          "meta": {},
          "name": "div",
          "properties": {
            "_text": "Hello ",
          },
          "scope": {},
        },
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {
            "_text": {
              "bindingType": "expression",
              "code": "props.name",
              "type": "single",
            },
          },
          "children": [],
          "meta": {},
          "name": "div",
          "properties": {},
          "scope": {},
        },
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {},
          "children": [],
          "meta": {},
          "name": "div",
          "properties": {
            "_text": "! ",
          },
          "scope": {},
        },
      ],
      "meta": {},
      "name": "div",
      "properties": {},
      "scope": {},
    },
  ],
  "context": {
    "get": {},
    "set": {},
  },
  "exports": {},
  "hooks": {
    "onEvent": [],
    "onMount": [],
  },
  "imports": [],
  "inputs": [],
  "meta": {},
  "name": "TypeExternalProps",
  "refs": {},
  "state": {},
  "subComponents": [],
}
`;

exports[`Parse JSX > Javascript > typeExternalStore 1`] = `
{
  "@type": "@builder.io/mitosis/component",
  "children": [
    {
      "@type": "@builder.io/mitosis/node",
      "bindings": {},
      "children": [
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {},
          "children": [],
          "meta": {},
          "name": "div",
          "properties": {
            "_text": "Hello ",
          },
          "scope": {},
        },
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {
            "_text": {
              "bindingType": "expression",
              "code": "state._name",
              "type": "single",
            },
          },
          "children": [],
          "meta": {},
          "name": "div",
          "properties": {},
          "scope": {},
        },
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {},
          "children": [],
          "meta": {},
          "name": "div",
          "properties": {
            "_text": "! ",
          },
          "scope": {},
        },
      ],
      "meta": {},
      "name": "div",
      "properties": {},
      "scope": {},
    },
  ],
  "context": {
    "get": {},
    "set": {},
  },
  "exports": {},
  "hooks": {
    "onEvent": [],
    "onMount": [],
  },
  "imports": [],
  "inputs": [],
  "meta": {},
  "name": "TypeExternalStore",
  "refs": {},
  "state": {
    "_name": {
      "code": "'test'",
      "propertyType": "normal",
      "type": "property",
    },
  },
  "subComponents": [],
}
`;

exports[`Parse JSX > Javascript > typeGetterStore 1`] = `
{
  "@type": "@builder.io/mitosis/component",
  "children": [
    {
      "@type": "@builder.io/mitosis/node",
      "bindings": {},
      "children": [
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {},
          "children": [],
          "meta": {},
          "name": "div",
          "properties": {
            "_text": "Hello ",
          },
          "scope": {},
        },
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {
            "_text": {
              "bindingType": "expression",
              "code": "state.name",
              "type": "single",
            },
          },
          "children": [],
          "meta": {},
          "name": "div",
          "properties": {},
          "scope": {},
        },
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {},
          "children": [],
          "meta": {},
          "name": "div",
          "properties": {
            "_text": "! ",
          },
          "scope": {},
        },
      ],
      "meta": {},
      "name": "div",
      "properties": {},
      "scope": {},
    },
  ],
  "context": {
    "get": {},
    "set": {},
  },
  "exports": {},
  "hooks": {
    "onEvent": [],
    "onMount": [],
  },
  "imports": [],
  "inputs": [],
  "meta": {},
  "name": "TypeGetterStore",
  "refs": {},
  "state": {
    "getName": {
      "code": "getName() {
  if (state.name === 'a') {
    return 'b';
  }

  return state.name;
}",
      "type": "method",
    },
    "name": {
      "code": "'test'",
      "propertyType": "normal",
      "type": "property",
    },
    "test": {
      "code": "get test() {
  return 'test';
}",
      "type": "getter",
    },
  },
  "subComponents": [],
}
`;

exports[`Parse JSX > Javascript > use-style 1`] = `
{
  "@type": "@builder.io/mitosis/component",
  "children": [
    {
      "@type": "@builder.io/mitosis/node",
      "bindings": {},
      "children": [
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {},
          "children": [],
          "meta": {},
          "name": "div",
          "properties": {
            "_text": "Button",
          },
          "scope": {},
        },
      ],
      "meta": {},
      "name": "button",
      "properties": {
        "type": "button",
      },
      "scope": {},
    },
  ],
  "context": {
    "get": {},
    "set": {},
  },
  "exports": {},
  "hooks": {
    "onEvent": [],
    "onMount": [],
  },
  "imports": [],
  "inputs": [],
  "meta": {},
  "name": "MyComponent",
  "refs": {},
  "state": {},
  "style": "
        button {
            background: blue;
            color: white;
            font-size: 12px;
            outline: 1px solid black;
        }
    ",
  "subComponents": [],
}
`;

exports[`Parse JSX > Javascript > use-style-and-css 1`] = `
{
  "@type": "@builder.io/mitosis/component",
  "children": [
    {
      "@type": "@builder.io/mitosis/node",
      "bindings": {
        "css": {
          "bindingType": "expression",
          "code": "{
  background: 'blue',
  color: 'white'
}",
          "type": "single",
        },
      },
      "children": [
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {},
          "children": [],
          "meta": {},
          "name": "div",
          "properties": {
            "_text": "
      Button
    ",
          },
          "scope": {},
        },
      ],
      "meta": {},
      "name": "button",
      "properties": {
        "type": "button",
      },
      "scope": {},
    },
  ],
  "context": {
    "get": {},
    "set": {},
  },
  "exports": {},
  "hooks": {
    "onEvent": [],
    "onMount": [],
  },
  "imports": [],
  "inputs": [],
  "meta": {},
  "name": "MyComponent",
  "refs": {},
  "state": {},
  "style": "
        button {
            font-size: 12px;
            outline: 1px solid black;
        }
    ",
  "subComponents": [],
}
`;

exports[`Parse JSX > Javascript > use-style-outside-component 1`] = `
{
  "@type": "@builder.io/mitosis/component",
  "children": [
    {
      "@type": "@builder.io/mitosis/node",
      "bindings": {},
      "children": [
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {},
          "children": [],
          "meta": {},
          "name": "div",
          "properties": {
            "_text": "Button",
          },
          "scope": {},
        },
      ],
      "meta": {},
      "name": "button",
      "properties": {
        "type": "button",
      },
      "scope": {},
    },
  ],
  "context": {
    "get": {},
    "set": {},
  },
  "exports": {},
  "hooks": {
    "onEvent": [],
    "onMount": [],
  },
  "imports": [],
  "inputs": [],
  "meta": {},
  "name": "MyComponent",
  "refs": {},
  "state": {},
  "style": "
  button {
      background: blue;
      color: white;
      font-size: 12px;
      outline: 1px solid black;
  }
",
  "subComponents": [],
}
`;

exports[`Parse JSX > Javascript > useTarget 1`] = `
{
  "@type": "@builder.io/mitosis/component",
  "children": [
    {
      "@type": "@builder.io/mitosis/node",
      "bindings": {},
      "children": [
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {
            "_text": {
              "bindingType": "expression",
              "code": "state.name",
              "type": "single",
            },
          },
          "children": [],
          "meta": {},
          "name": "div",
          "properties": {},
          "scope": {},
        },
      ],
      "meta": {},
      "name": "div",
      "properties": {},
      "scope": {},
    },
  ],
  "context": {
    "get": {},
    "set": {},
  },
  "exports": {},
  "hooks": {
    "onEvent": [],
    "onMount": [
      {
        "code": "console.log(state.foo);
state.foo = 'bar';
\\"USE_TARGET_BLOCK_2\\"",
        "onSSR": false,
      },
    ],
  },
  "imports": [],
  "inputs": [],
  "meta": {},
  "name": "UseTargetComponent",
  "refs": {},
  "state": {
    "foo": {
      "code": "'bar'",
      "propertyType": "normal",
      "type": "property",
    },
    "lastName": {
      "code": "'bar'",
      "propertyType": "normal",
      "type": "property",
    },
    "name": {
      "code": "get name() {
  const prefix = \\"USE_TARGET_BLOCK_1\\";
  return prefix + 'foo';
}",
      "type": "getter",
    },
  },
  "subComponents": [],
  "targetBlocks": {
    "1": {
      "alpine": {
        "code": "'a'",
      },
      "angular": {
        "code": "true",
      },
      "customElement": {
        "code": "'c'",
      },
      "default": {
        "code": "'Default str'",
      },
      "html": {
        "code": "'h'",
      },
      "liquid": {
        "code": "'l'",
      },
      "lit": {
        "code": "'li'",
      },
      "marko": {
        "code": "'m'",
      },
      "mitosis": {
        "code": "'mi'",
      },
      "preact": {
        "code": "'p'",
      },
      "qwik": {
        "code": "'q'",
      },
      "react": {
        "code": "123",
      },
      "reactNative": {
        "code": "'rn'",
      },
      "rsc": {
        "code": "'rsc'",
      },
      "settings": {
        "requiresDefault": true,
      },
      "solid": {
        "code": "'so'",
      },
      "stencil": {
        "code": "'st'",
      },
      "svelte": {
        "code": "'s'",
      },
      "swift": {
        "code": "'sw'",
      },
      "taro": {
        "code": "'t'",
      },
      "template": {
        "code": "'te'",
      },
      "vue": {
        "code": "'v'",
      },
      "webcomponent": {
        "code": "'wc'",
      },
    },
    "2": {
      "qwik": {
        "code": "console.log('qwik');
state.lastName = 'baz';
console.log(state.foo);
state.foo = 'baz'",
      },
      "react": {
        "code": "console.log('react');
state.lastName = 'baz';
console.log(state.foo);
state.foo = 'baz'",
      },
      "settings": {
        "requiresDefault": false,
      },
    },
  },
}
`;

exports[`Parse JSX > Javascript > webComponent 1`] = `
{
  "@type": "@builder.io/mitosis/component",
  "children": [
    {
      "@type": "@builder.io/mitosis/node",
      "bindings": {},
      "children": [
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {},
          "children": [
            {
              "@type": "@builder.io/mitosis/node",
              "bindings": {},
              "children": [],
              "meta": {},
              "name": "div",
              "properties": {
                "_text": "Slide 1",
              },
              "scope": {},
            },
          ],
          "meta": {},
          "name": "swiper-slide",
          "properties": {},
          "scope": {},
        },
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {},
          "children": [
            {
              "@type": "@builder.io/mitosis/node",
              "bindings": {},
              "children": [],
              "meta": {},
              "name": "div",
              "properties": {
                "_text": "Slide 2",
              },
              "scope": {},
            },
          ],
          "meta": {},
          "name": "swiper-slide",
          "properties": {},
          "scope": {},
        },
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {},
          "children": [
            {
              "@type": "@builder.io/mitosis/node",
              "bindings": {},
              "children": [],
              "meta": {},
              "name": "div",
              "properties": {
                "_text": "Slide 3",
              },
              "scope": {},
            },
          ],
          "meta": {},
          "name": "swiper-slide",
          "properties": {},
          "scope": {},
        },
      ],
      "meta": {},
      "name": "swiper-container",
      "properties": {
        "navigation": "true",
        "pagination": "true",
        "slides-per-view": "3",
      },
      "scope": {},
    },
  ],
  "context": {
    "get": {},
    "set": {},
  },
  "exports": {},
  "hooks": {
    "onEvent": [],
    "onInit": {
      "code": "register()",
    },
    "onMount": [],
  },
  "imports": [
    {
      "importKind": "value",
      "imports": {
        "register": "register",
      },
      "path": "swiper/element/bundle",
    },
  ],
  "inputs": [],
  "meta": {},
  "name": "MyBasicWebComponent",
  "refs": {},
  "state": {},
  "subComponents": [],
}
`;

exports[`Parse JSX > Remove Internal mitosis package 1`] = `
{
  "@type": "@builder.io/mitosis/component",
  "children": [
    {
      "@type": "@builder.io/mitosis/node",
      "bindings": {},
      "children": [
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {},
          "children": [],
          "meta": {},
          "name": "div",
          "properties": {
            "_text": "Hello ",
          },
          "scope": {},
        },
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {
            "_text": {
              "bindingType": "expression",
              "code": "state.name",
              "type": "single",
            },
          },
          "children": [],
          "meta": {},
          "name": "div",
          "properties": {},
          "scope": {},
        },
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {},
          "children": [],
          "meta": {},
          "name": "div",
          "properties": {
            "_text": "! I can run in React, Qwik, Vue, Solid, or Liquid!",
          },
          "scope": {},
        },
      ],
      "meta": {},
      "name": "div",
      "properties": {},
      "scope": {},
    },
  ],
  "context": {
    "get": {},
    "set": {},
  },
  "exports": {},
  "hooks": {
    "onEvent": [],
    "onMount": [],
  },
  "imports": [],
  "inputs": [],
  "meta": {},
  "name": "MyBasicComponent",
  "refs": {},
  "state": {
    "name": {
      "code": "'PatrickJS'",
      "propertyType": "normal",
      "type": "property",
    },
  },
  "subComponents": [],
}
`;

exports[`Parse JSX > Typescript > Advanced 1`] = `
{
  "@type": "@builder.io/mitosis/component",
  "children": [
    {
      "@type": "@builder.io/mitosis/node",
      "bindings": {},
      "children": [
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {
            "each": {
              "bindingType": "expression",
              "code": "state.names",
              "type": "single",
            },
          },
          "children": [
            {
              "@type": "@builder.io/mitosis/node",
              "bindings": {},
              "children": [
                {
                  "@type": "@builder.io/mitosis/node",
                  "bindings": {
                    "_text": {
                      "bindingType": "expression",
                      "code": "i",
                      "type": "single",
                    },
                  },
                  "children": [],
                  "meta": {},
                  "name": "div",
                  "properties": {},
                  "scope": {},
                },
                {
                  "@type": "@builder.io/mitosis/node",
                  "bindings": {},
                  "children": [],
                  "meta": {},
                  "name": "div",
                  "properties": {
                    "_text": ": ",
                  },
                  "scope": {},
                },
                {
                  "@type": "@builder.io/mitosis/node",
                  "bindings": {
                    "_text": {
                      "bindingType": "expression",
                      "code": "person",
                      "type": "single",
                    },
                  },
                  "children": [],
                  "meta": {},
                  "name": "div",
                  "properties": {},
                  "scope": {},
                },
              ],
              "meta": {},
              "name": "div",
              "properties": {},
              "scope": {},
            },
          ],
          "meta": {},
          "name": "For",
          "properties": {},
          "scope": {
            "forName": "person",
            "indexName": "i",
          },
        },
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {
            "each": {
              "bindingType": "expression",
              "code": "state.names",
              "type": "single",
            },
          },
          "children": [
            {
              "@type": "@builder.io/mitosis/node",
              "bindings": {},
              "children": [
                {
                  "@type": "@builder.io/mitosis/node",
                  "bindings": {
                    "_text": {
                      "bindingType": "expression",
                      "code": "person",
                      "type": "single",
                    },
                  },
                  "children": [],
                  "meta": {},
                  "name": "div",
                  "properties": {},
                  "scope": {},
                },
              ],
              "meta": {},
              "name": "span",
              "properties": {},
              "scope": {},
            },
          ],
          "meta": {},
          "name": "For",
          "properties": {},
          "scope": {
            "forName": "person",
          },
        },
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {
            "each": {
              "bindingType": "expression",
              "code": "state.names",
              "type": "single",
            },
          },
          "children": [
            {
              "@type": "@builder.io/mitosis/node",
              "bindings": {},
              "children": [],
              "meta": {},
              "name": "br",
              "properties": {},
              "scope": {},
            },
          ],
          "meta": {},
          "name": "For",
          "properties": {},
          "scope": {},
        },
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {
            "each": {
              "bindingType": "expression",
              "code": "Array.from({
  length: 10
})",
              "type": "single",
            },
          },
          "children": [
            {
              "@type": "@builder.io/mitosis/node",
              "bindings": {},
              "children": [
                {
                  "@type": "@builder.io/mitosis/node",
                  "bindings": {
                    "_text": {
                      "bindingType": "expression",
                      "code": "ee",
                      "type": "single",
                    },
                  },
                  "children": [],
                  "meta": {},
                  "name": "div",
                  "properties": {},
                  "scope": {},
                },
              ],
              "meta": {},
              "name": "pre",
              "properties": {},
              "scope": {},
            },
          ],
          "meta": {},
          "name": "For",
          "properties": {},
          "scope": {
            "forName": "_",
            "indexName": "ee",
          },
        },
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {
            "each": {
              "bindingType": "expression",
              "code": "Array.from({
  length: 10
})",
              "type": "single",
            },
          },
          "children": [
            {
              "@type": "@builder.io/mitosis/node",
              "bindings": {},
              "children": [
                {
                  "@type": "@builder.io/mitosis/node",
                  "bindings": {
                    "_text": {
                      "bindingType": "expression",
                      "code": "index",
                      "type": "single",
                    },
                  },
                  "children": [],
                  "meta": {},
                  "name": "div",
                  "properties": {},
                  "scope": {},
                },
              ],
              "meta": {},
              "name": "p",
              "properties": {},
              "scope": {},
            },
          ],
          "meta": {},
          "name": "For",
          "properties": {},
          "scope": {},
        },
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {
            "each": {
              "bindingType": "expression",
              "code": "state.names",
              "type": "single",
            },
          },
          "children": [
            {
              "@type": "@builder.io/mitosis/node",
              "bindings": {},
              "children": [
                {
                  "@type": "@builder.io/mitosis/node",
                  "bindings": {
                    "_text": {
                      "bindingType": "expression",
                      "code": "person",
                      "type": "single",
                    },
                  },
                  "children": [],
                  "meta": {},
                  "name": "div",
                  "properties": {},
                  "scope": {},
                },
                {
                  "@type": "@builder.io/mitosis/node",
                  "bindings": {
                    "_text": {
                      "bindingType": "expression",
                      "code": "index",
                      "type": "single",
                    },
                  },
                  "children": [],
                  "meta": {},
                  "name": "div",
                  "properties": {},
                  "scope": {},
                },
              ],
              "meta": {},
              "name": "span",
              "properties": {},
              "scope": {},
            },
          ],
          "meta": {},
          "name": "For",
          "properties": {},
          "scope": {
            "forName": "person",
            "indexName": "index",
          },
        },
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {
            "each": {
              "bindingType": "expression",
              "code": "Array.from({
  length: 10
})",
              "type": "single",
            },
          },
          "children": [
            {
              "@type": "@builder.io/mitosis/node",
              "bindings": {},
              "children": [
                {
                  "@type": "@builder.io/mitosis/node",
                  "bindings": {
                    "_text": {
                      "bindingType": "expression",
                      "code": "person",
                      "type": "single",
                    },
                  },
                  "children": [],
                  "meta": {},
                  "name": "div",
                  "properties": {},
                  "scope": {},
                },
                {
                  "@type": "@builder.io/mitosis/node",
                  "bindings": {
                    "_text": {
                      "bindingType": "expression",
                      "code": "count",
                      "type": "single",
                    },
                  },
                  "children": [],
                  "meta": {},
                  "name": "div",
                  "properties": {},
                  "scope": {},
                },
              ],
              "meta": {},
              "name": "span",
              "properties": {},
              "scope": {},
            },
          ],
          "meta": {},
          "name": "For",
          "properties": {},
          "scope": {
            "forName": "person",
            "indexName": "count",
          },
        },
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {
            "each": {
              "bindingType": "expression",
              "code": "state.names",
              "type": "single",
            },
          },
          "children": [
            {
              "@type": "@builder.io/mitosis/node",
              "bindings": {},
              "children": [
                {
                  "@type": "@builder.io/mitosis/node",
                  "bindings": {
                    "_text": {
                      "bindingType": "expression",
                      "code": "person",
                      "type": "single",
                    },
                  },
                  "children": [],
                  "meta": {},
                  "name": "div",
                  "properties": {},
                  "scope": {},
                },
                {
                  "@type": "@builder.io/mitosis/node",
                  "bindings": {
                    "_text": {
                      "bindingType": "expression",
                      "code": "i",
                      "type": "single",
                    },
                  },
                  "children": [],
                  "meta": {},
                  "name": "div",
                  "properties": {},
                  "scope": {},
                },
              ],
              "meta": {},
              "name": "span",
              "properties": {},
              "scope": {},
            },
          ],
          "meta": {},
          "name": "For",
          "properties": {},
          "scope": {
            "forName": "person",
            "indexName": "i",
          },
        },
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {
            "each": {
              "bindingType": "expression",
              "code": "Array.from({
  length: 10
})",
              "type": "single",
            },
          },
          "children": [
            {
              "@type": "@builder.io/mitosis/node",
              "bindings": {},
              "children": [
                {
                  "@type": "@builder.io/mitosis/node",
                  "bindings": {
                    "_text": {
                      "bindingType": "expression",
                      "code": "person",
                      "type": "single",
                    },
                  },
                  "children": [],
                  "meta": {},
                  "name": "div",
                  "properties": {},
                  "scope": {},
                },
                {
                  "@type": "@builder.io/mitosis/node",
                  "bindings": {
                    "_text": {
                      "bindingType": "expression",
                      "code": "index",
                      "type": "single",
                    },
                  },
                  "children": [],
                  "meta": {},
                  "name": "div",
                  "properties": {},
                  "scope": {},
                },
              ],
              "meta": {},
              "name": "span",
              "properties": {},
              "scope": {},
            },
          ],
          "meta": {},
          "name": "For",
          "properties": {},
          "scope": {
            "forName": "person",
            "indexName": "index",
          },
        },
      ],
      "meta": {},
      "name": "main",
      "properties": {},
      "scope": {},
    },
  ],
  "context": {
    "get": {},
    "set": {},
  },
  "exports": {},
  "hooks": {
    "onEvent": [],
    "onMount": [],
  },
  "imports": [],
  "inputs": [],
  "meta": {},
  "name": "MyBasicForShowComponent",
  "refs": {},
  "state": {
    "name": {
      "code": "'PatrickJS'",
      "propertyType": "normal",
      "type": "property",
    },
    "names": {
      "code": "['Steve', 'PatrickJS']",
      "propertyType": "normal",
      "type": "property",
    },
  },
  "subComponents": [],
}
`;

exports[`Parse JSX > Typescript > AdvancedRef 1`] = `
{
  "@type": "@builder.io/mitosis/component",
  "children": [
    {
      "@type": "@builder.io/mitosis/node",
      "bindings": {},
      "children": [
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {
            "when": {
              "bindingType": "expression",
              "code": "props.showInput",
              "type": "single",
            },
          },
          "children": [
            {
              "@type": "@builder.io/mitosis/node",
              "bindings": {},
              "children": [
                {
                  "@type": "@builder.io/mitosis/node",
                  "bindings": {
                    "css": {
                      "bindingType": "expression",
                      "code": "{
  color: 'red'
}",
                      "type": "single",
                    },
                    "onBlur": {
                      "arguments": [
                        "event",
                      ],
                      "bindingType": "function",
                      "code": "state.onBlur()",
                      "type": "single",
                    },
                    "onChange": {
                      "arguments": [
                        "event",
                      ],
                      "bindingType": "function",
                      "code": "state.name = event.target.value",
                      "type": "single",
                    },
                    "ref": {
                      "bindingType": "expression",
                      "code": "inputRef",
                      "type": "single",
                    },
                    "value": {
                      "bindingType": "expression",
                      "code": "state.name",
                      "type": "single",
                    },
                  },
                  "children": [],
                  "meta": {},
                  "name": "input",
                  "properties": {},
                  "scope": {},
                },
                {
                  "@type": "@builder.io/mitosis/node",
                  "bindings": {
                    "ref": {
                      "bindingType": "expression",
                      "code": "inputNoArgRef",
                      "type": "single",
                    },
                  },
                  "children": [
                    {
                      "@type": "@builder.io/mitosis/node",
                      "bindings": {},
                      "children": [],
                      "meta": {},
                      "name": "div",
                      "properties": {
                        "_text": "
            Choose a car:
          ",
                      },
                      "scope": {},
                    },
                  ],
                  "meta": {},
                  "name": "label",
                  "properties": {
                    "for": "cars",
                  },
                  "scope": {},
                },
                {
                  "@type": "@builder.io/mitosis/node",
                  "bindings": {},
                  "children": [
                    {
                      "@type": "@builder.io/mitosis/node",
                      "bindings": {},
                      "children": [
                        {
                          "@type": "@builder.io/mitosis/node",
                          "bindings": {},
                          "children": [],
                          "meta": {},
                          "name": "div",
                          "properties": {
                            "_text": "GR Supra",
                          },
                          "scope": {},
                        },
                      ],
                      "meta": {},
                      "name": "option",
                      "properties": {
                        "value": "supra",
                      },
                      "scope": {},
                    },
                    {
                      "@type": "@builder.io/mitosis/node",
                      "bindings": {},
                      "children": [
                        {
                          "@type": "@builder.io/mitosis/node",
                          "bindings": {},
                          "children": [],
                          "meta": {},
                          "name": "div",
                          "properties": {
                            "_text": "GR 86",
                          },
                          "scope": {},
                        },
                      ],
                      "meta": {},
                      "name": "option",
                      "properties": {
                        "value": "86",
                      },
                      "scope": {},
                    },
                  ],
                  "meta": {},
                  "name": "select",
                  "properties": {
                    "id": "cars",
                    "name": "cars",
                  },
                  "scope": {},
                },
              ],
              "meta": {},
              "name": "Fragment",
              "properties": {},
              "scope": {},
            },
          ],
          "meta": {},
          "name": "Show",
          "properties": {},
          "scope": {},
        },
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {},
          "children": [],
          "meta": {},
          "name": "div",
          "properties": {
            "_text": "
      Hello
      ",
          },
          "scope": {},
        },
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {
            "_text": {
              "bindingType": "expression",
              "code": "state.lowerCaseName()",
              "type": "single",
            },
          },
          "children": [],
          "meta": {},
          "name": "div",
          "properties": {},
          "scope": {},
        },
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {},
          "children": [],
          "meta": {},
          "name": "div",
          "properties": {
            "_text": "! I can run in React, Qwik, Vue, Solid, or Web Component!
    ",
          },
          "scope": {},
        },
      ],
      "meta": {},
      "name": "div",
      "properties": {},
      "scope": {},
    },
  ],
  "context": {
    "get": {},
    "set": {},
  },
  "exports": {},
  "hooks": {
    "onEvent": [],
    "onMount": [],
    "onUpdate": [
      {
        "code": "console.log('Received an update')",
        "deps": "[inputRef, inputNoArgRef]",
        "depsArray": [
          "inputRef",
          "inputNoArgRef",
        ],
      },
    ],
  },
  "imports": [],
  "inputs": [],
  "meta": {},
  "name": "MyBasicRefComponent",
  "propsTypeRef": "Props",
  "refs": {
    "inputNoArgRef": {
      "argument": "null",
      "typeParameter": "HTMLLabelElement",
    },
    "inputRef": {
      "argument": "null",
      "typeParameter": "HTMLInputElement",
    },
  },
  "state": {
    "lowerCaseName": {
      "code": "function lowerCaseName() {
  return state.name.toLowerCase();
}",
      "type": "function",
    },
    "name": {
      "code": "'PatrickJS'",
      "propertyType": "normal",
      "type": "property",
    },
    "onBlur": {
      "code": "function onBlur() {
  // Maintain focus
  inputRef.focus();
}",
      "type": "function",
    },
  },
  "subComponents": [],
  "types": [
    "export interface Props {
  showInput: boolean;
}",
  ],
}
`;

exports[`Parse JSX > Typescript > Basic 1`] = `
{
  "@type": "@builder.io/mitosis/component",
  "children": [
    {
      "@type": "@builder.io/mitosis/node",
      "bindings": {
        "css": {
          "bindingType": "expression",
          "code": "{
  padding: '10px'
}",
          "type": "single",
        },
      },
      "children": [
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {
            "onChange": {
              "arguments": [
                "myEvent",
              ],
              "bindingType": "function",
              "code": "state.name = myEvent.target.value",
              "type": "single",
            },
            "value": {
              "bindingType": "expression",
              "code": "DEFAULT_VALUES.name || state.name",
              "type": "single",
            },
          },
          "children": [],
          "meta": {},
          "name": "input",
          "properties": {},
          "scope": {},
        },
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {},
          "children": [],
          "meta": {},
          "name": "div",
          "properties": {
            "_text": "
      Hello! I can run in React, Vue, Solid, or Liquid! &gt;
    ",
          },
          "scope": {},
        },
      ],
      "meta": {},
      "name": "div",
      "properties": {
        "class": "test",
      },
      "scope": {},
    },
  ],
  "context": {
    "get": {},
    "set": {},
  },
  "exports": {
    "DEFAULT_VALUES": {
      "code": "export const DEFAULT_VALUES = {
  name: 'Steve'
};",
      "isFunction": false,
      "usedInLocal": true,
    },
  },
  "hooks": {
    "onEvent": [],
    "onMount": [],
  },
  "imports": [],
  "inputs": [],
  "meta": {},
  "name": "MyBasicComponent",
  "propsTypeRef": "MyBasicComponentProps",
  "refs": {},
  "state": {
    "age": {
      "code": "1",
      "propertyType": "normal",
      "type": "property",
      "typeParameter": "number",
    },
    "name": {
      "code": "'Steve'",
      "propertyType": "normal",
      "type": "property",
    },
    "sports": {
      "code": "['']",
      "propertyType": "normal",
      "type": "property",
      "typeParameter": "Array<string>",
    },
    "underscore_fn_name": {
      "code": "underscore_fn_name() {
  return 'bar';
}",
      "type": "method",
    },
  },
  "subComponents": [],
  "types": [
    "export interface MyBasicComponentProps {
  id: string;
}",
  ],
}
`;

exports[`Parse JSX > Typescript > Basic 2`] = `
{
  "@type": "@builder.io/mitosis/component",
  "children": [
    {
      "@type": "@builder.io/mitosis/node",
      "bindings": {},
      "children": [
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {
            "each": {
              "bindingType": "expression",
              "code": "state.names",
              "type": "single",
            },
          },
          "children": [
            {
              "@type": "@builder.io/mitosis/node",
              "bindings": {
                "when": {
                  "bindingType": "expression",
                  "code": "person === state.name",
                  "type": "single",
                },
              },
              "children": [
                {
                  "@type": "@builder.io/mitosis/node",
                  "bindings": {
                    "onChange": {
                      "arguments": [
                        "event",
                      ],
                      "bindingType": "function",
                      "code": "{
  state.name = event.target.value + ' and ' + person;
}",
                      "type": "single",
                    },
                    "value": {
                      "bindingType": "expression",
                      "code": "state.name",
                      "type": "single",
                    },
                  },
                  "children": [],
                  "meta": {},
                  "name": "input",
                  "properties": {},
                  "scope": {},
                },
                {
                  "@type": "@builder.io/mitosis/node",
                  "bindings": {},
                  "children": [],
                  "meta": {},
                  "name": "div",
                  "properties": {
                    "_text": "
            Hello ",
                  },
                  "scope": {},
                },
                {
                  "@type": "@builder.io/mitosis/node",
                  "bindings": {
                    "_text": {
                      "bindingType": "expression",
                      "code": "person",
                      "type": "single",
                    },
                  },
                  "children": [],
                  "meta": {},
                  "name": "div",
                  "properties": {},
                  "scope": {},
                },
                {
                  "@type": "@builder.io/mitosis/node",
                  "bindings": {},
                  "children": [],
                  "meta": {},
                  "name": "div",
                  "properties": {
                    "_text": "! I can run in Qwik, Web Component, React, Vue, Solid, or Liquid!
          ",
                  },
                  "scope": {},
                },
              ],
              "meta": {},
              "name": "Show",
              "properties": {},
              "scope": {},
            },
          ],
          "meta": {},
          "name": "For",
          "properties": {},
          "scope": {
            "forName": "person",
          },
        },
      ],
      "meta": {},
      "name": "div",
      "properties": {},
      "scope": {},
    },
  ],
  "context": {
    "get": {},
    "set": {},
  },
  "exports": {},
  "hooks": {
    "onEvent": [],
    "onMount": [],
  },
  "imports": [],
  "inputs": [],
  "meta": {},
  "name": "MyBasicForShowComponent",
  "refs": {},
  "state": {
    "name": {
      "code": "'PatrickJS'",
      "propertyType": "normal",
      "type": "property",
    },
    "names": {
      "code": "['Steve', 'PatrickJS']",
      "propertyType": "normal",
      "type": "property",
    },
  },
  "subComponents": [],
}
`;

exports[`Parse JSX > Typescript > Basic Context 1`] = `
{
  "@type": "@builder.io/mitosis/component",
  "children": [
    {
      "@type": "@builder.io/mitosis/node",
      "bindings": {},
      "children": [
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {
            "_text": {
              "bindingType": "expression",
              "code": "myService.method('hello') + state.name",
              "type": "single",
            },
          },
          "children": [],
          "meta": {},
          "name": "div",
          "properties": {},
          "scope": {},
        },
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {},
          "children": [],
          "meta": {},
          "name": "div",
          "properties": {
            "_text": "
      Hello! I can run in React, Vue, Solid, or Liquid!
      ",
          },
          "scope": {},
        },
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {
            "onChange": {
              "bindingType": "function",
              "code": "state.onChange()",
              "type": "single",
            },
          },
          "children": [],
          "meta": {},
          "name": "input",
          "properties": {},
          "scope": {},
        },
      ],
      "meta": {},
      "name": "div",
      "properties": {},
      "scope": {},
    },
  ],
  "context": {
    "get": {
      "myService": {
        "name": "MyService",
        "path": "@dummy/injection-js:MyService",
      },
    },
    "set": {
      "@dummy/injection-js:Injector": {
        "name": "Injector",
        "ref": "createInjector()",
      },
    },
  },
  "exports": {},
  "hooks": {
    "onEvent": [],
    "onInit": {
      "code": "const hi = myService.method('hi');
console.log(hi)",
    },
    "onMount": [
      {
        "code": "const bye = myService.method('hi');
console.log(bye)",
        "onSSR": false,
      },
    ],
  },
  "imports": [
    {
      "importKind": "value",
      "imports": {
        "Injector": "Injector",
        "MyService": "MyService",
        "createInjector": "createInjector",
      },
      "path": "@dummy/injection-js",
    },
  ],
  "inputs": [],
  "meta": {},
  "name": "MyBasicComponent",
  "refs": {},
  "state": {
    "name": {
      "code": "'PatrickJS'",
      "propertyType": "normal",
      "type": "property",
    },
    "onChange": {
      "code": "function onChange() {
  const change = myService.method('change');
  console.log(change);
}",
      "type": "function",
    },
  },
  "subComponents": [],
}
`;

exports[`Parse JSX > Typescript > Basic OnMount Update 1`] = `
{
  "@type": "@builder.io/mitosis/component",
  "children": [
    {
      "@type": "@builder.io/mitosis/node",
      "bindings": {},
      "children": [
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {},
          "children": [],
          "meta": {},
          "name": "div",
          "properties": {
            "_text": "Hello ",
          },
          "scope": {},
        },
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {
            "_text": {
              "bindingType": "expression",
              "code": "state.name",
              "type": "single",
            },
          },
          "children": [],
          "meta": {},
          "name": "div",
          "properties": {},
          "scope": {},
        },
      ],
      "meta": {},
      "name": "div",
      "properties": {},
      "scope": {},
    },
  ],
  "context": {
    "get": {},
    "set": {},
  },
  "exports": {},
  "hooks": {
    "onEvent": [],
    "onInit": {
      "code": "state.name = 'PatrickJS onInit' + props.hi",
    },
    "onMount": [
      {
        "code": "state.name = 'PatrickJS onMount' + props.bye",
        "onSSR": false,
      },
    ],
  },
  "imports": [],
  "inputs": [],
  "meta": {},
  "name": "MyBasicOnMountUpdateComponent",
  "propsTypeRef": "Props",
  "refs": {},
  "state": {
    "name": {
      "code": "'PatrickJS'",
      "propertyType": "normal",
      "type": "property",
    },
    "names": {
      "code": "['Steve', 'PatrickJS']",
      "propertyType": "normal",
      "type": "property",
    },
  },
  "subComponents": [],
  "types": [
    "export interface Props {
  hi: string;
  bye: string;
}",
  ],
}
`;

exports[`Parse JSX > Typescript > Basic Outputs 1`] = `
{
  "@type": "@builder.io/mitosis/component",
  "children": [
    {
      "@type": "@builder.io/mitosis/node",
      "bindings": {},
      "children": [],
      "meta": {},
      "name": "div",
      "properties": {},
      "scope": {},
    },
  ],
  "context": {
    "get": {},
    "set": {},
  },
  "exports": {},
  "hooks": {
    "onEvent": [],
    "onMount": [
      {
        "code": "props.onMessageChange(state.name);
props.onEvent(props.message)",
        "onSSR": false,
      },
    ],
  },
  "imports": [],
  "inputs": [],
  "meta": {},
  "name": "MyBasicOutputsComponent",
  "propsTypeRef": "any",
  "refs": {},
  "state": {
    "name": {
      "code": "'PatrickJS'",
      "propertyType": "normal",
      "type": "property",
    },
  },
  "subComponents": [],
}
`;

exports[`Parse JSX > Typescript > Basic Outputs Meta 1`] = `
{
  "@type": "@builder.io/mitosis/component",
  "children": [
    {
      "@type": "@builder.io/mitosis/node",
      "bindings": {},
      "children": [],
      "meta": {},
      "name": "div",
      "properties": {},
      "scope": {},
    },
  ],
  "context": {
    "get": {},
    "set": {},
  },
  "exports": {},
  "hooks": {
    "onEvent": [],
    "onMount": [
      {
        "code": "props.onMessageChange(state.name);
props.onEvent(props.message)",
        "onSSR": false,
      },
    ],
  },
  "imports": [],
  "inputs": [],
  "meta": {
    "useMetadata": {
      "baz": "metadata inside component",
      "outputs": [
        "onMessage",
        "onEvent",
      ],
    },
  },
  "name": "MyBasicOutputsComponent",
  "propsTypeRef": "any",
  "refs": {},
  "state": {
    "name": {
      "code": "'PatrickJS'",
      "propertyType": "normal",
      "type": "property",
    },
  },
  "subComponents": [],
}
`;

exports[`Parse JSX > Typescript > BasicAttribute 1`] = `
{
  "@type": "@builder.io/mitosis/component",
  "children": [
    {
      "@type": "@builder.io/mitosis/node",
      "bindings": {
        "spellcheck": {
          "bindingType": "expression",
          "code": "true",
          "type": "single",
        },
      },
      "children": [],
      "meta": {},
      "name": "input",
      "properties": {
        "autocapitalize": "on",
        "autocomplete": "on",
      },
      "scope": {},
    },
  ],
  "context": {
    "get": {},
    "set": {},
  },
  "exports": {},
  "hooks": {
    "onEvent": [],
    "onMount": [],
  },
  "imports": [],
  "inputs": [],
  "meta": {},
  "name": "MyComponent",
  "refs": {},
  "state": {},
  "subComponents": [],
}
`;

exports[`Parse JSX > Typescript > BasicBooleanAttribute 1`] = `
{
  "@type": "@builder.io/mitosis/component",
  "children": [
    {
      "@type": "@builder.io/mitosis/node",
      "bindings": {},
      "children": [
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {
            "when": {
              "bindingType": "expression",
              "code": "props.children",
              "type": "single",
            },
          },
          "children": [
            {
              "@type": "@builder.io/mitosis/node",
              "bindings": {
                "_text": {
                  "bindingType": "expression",
                  "code": "props.children",
                  "type": "single",
                },
              },
              "children": [],
              "meta": {},
              "name": "div",
              "properties": {},
              "scope": {},
            },
            {
              "@type": "@builder.io/mitosis/node",
              "bindings": {
                "_text": {
                  "bindingType": "expression",
                  "code": "props.type",
                  "type": "single",
                },
              },
              "children": [],
              "meta": {},
              "name": "div",
              "properties": {},
              "scope": {},
            },
          ],
          "meta": {},
          "name": "Show",
          "properties": {},
          "scope": {},
        },
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {
            "toggle": {
              "bindingType": "expression",
              "code": "true",
              "type": "single",
            },
          },
          "children": [],
          "meta": {},
          "name": "MyBooleanAttributeComponent",
          "properties": {},
          "scope": {},
        },
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {
            "toggle": {
              "bindingType": "expression",
              "code": "true",
              "type": "single",
            },
          },
          "children": [],
          "meta": {},
          "name": "MyBooleanAttributeComponent",
          "properties": {},
          "scope": {},
        },
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {
            "list": {
              "bindingType": "expression",
              "code": "null",
              "type": "single",
            },
          },
          "children": [],
          "meta": {},
          "name": "MyBooleanAttributeComponent",
          "properties": {},
          "scope": {},
        },
      ],
      "meta": {},
      "name": "div",
      "properties": {},
      "scope": {},
    },
  ],
  "context": {
    "get": {},
    "set": {},
  },
  "exports": {},
  "hooks": {
    "onEvent": [],
    "onMount": [],
  },
  "imports": [
    {
      "importKind": "value",
      "imports": {
        "MyBooleanAttributeComponent": "default",
      },
      "path": "./basic-boolean-attribute-component.raw",
    },
  ],
  "inputs": [],
  "meta": {},
  "name": "MyBooleanAttribute",
  "propsTypeRef": "Props",
  "refs": {},
  "state": {},
  "subComponents": [],
  "types": [
    "type Props = {
  children: any;
  type: string;
}",
  ],
}
`;

exports[`Parse JSX > Typescript > BasicChildComponent 1`] = `
{
  "@type": "@builder.io/mitosis/component",
  "children": [
    {
      "@type": "@builder.io/mitosis/node",
      "bindings": {},
      "children": [
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {
            "id": {
              "bindingType": "expression",
              "code": "state.dev",
              "type": "single",
            },
          },
          "children": [],
          "meta": {},
          "name": "MyBasicComponent",
          "properties": {},
          "scope": {},
        },
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {},
          "children": [
            {
              "@type": "@builder.io/mitosis/node",
              "bindings": {
                "bye": {
                  "bindingType": "expression",
                  "code": "state.dev",
                  "type": "single",
                },
                "hi": {
                  "bindingType": "expression",
                  "code": "state.name",
                  "type": "single",
                },
              },
              "children": [],
              "meta": {},
              "name": "MyBasicOnMountUpdateComponent",
              "properties": {},
              "scope": {},
            },
            {
              "@type": "@builder.io/mitosis/node",
              "bindings": {
                "onEvent": {
                  "bindingType": "function",
                  "code": "state.log('Test')",
                  "type": "single",
                },
                "onMessageChange": {
                  "arguments": [
                    "name",
                  ],
                  "bindingType": "function",
                  "code": "state.name = name",
                  "type": "single",
                },
              },
              "children": [],
              "meta": {},
              "name": "MyBasicOutputsComponent",
              "properties": {
                "message": "Test",
              },
              "scope": {},
            },
          ],
          "meta": {},
          "name": "div",
          "properties": {},
          "scope": {},
        },
      ],
      "meta": {},
      "name": "div",
      "properties": {},
      "scope": {},
    },
  ],
  "context": {
    "get": {},
    "set": {},
  },
  "exports": {},
  "hooks": {
    "onEvent": [],
    "onMount": [],
  },
  "imports": [
    {
      "importKind": "value",
      "imports": {
        "MyBasicOnMountUpdateComponent": "default",
      },
      "path": "./basic-onMount-update.raw",
    },
    {
      "importKind": "value",
      "imports": {
        "MyBasicOutputsComponent": "default",
      },
      "path": "./basic-outputs.raw",
    },
    {
      "importKind": "value",
      "imports": {
        "MyBasicComponent": "default",
      },
      "path": "./basic.raw",
    },
  ],
  "inputs": [],
  "meta": {},
  "name": "MyBasicChildComponent",
  "refs": {},
  "state": {
    "dev": {
      "code": "'PatrickJS'",
      "propertyType": "normal",
      "type": "property",
    },
    "log": {
      "code": "function log(message: string) {
  console.log(message);
}",
      "type": "function",
    },
    "name": {
      "code": "'Steve'",
      "propertyType": "normal",
      "type": "property",
    },
  },
  "subComponents": [],
}
`;

exports[`Parse JSX > Typescript > BasicFor 1`] = `
{
  "@type": "@builder.io/mitosis/component",
  "children": [
    {
      "@type": "@builder.io/mitosis/node",
      "bindings": {},
      "children": [
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {
            "each": {
              "bindingType": "expression",
              "code": "state.names",
              "type": "single",
            },
          },
          "children": [
            {
              "@type": "@builder.io/mitosis/node",
              "bindings": {},
              "children": [
                {
                  "@type": "@builder.io/mitosis/node",
                  "bindings": {
                    "onChange": {
                      "arguments": [
                        "event",
                      ],
                      "bindingType": "function",
                      "code": "{
  state.name = event.target.value + ' and ' + person;
}",
                      "type": "single",
                    },
                    "value": {
                      "bindingType": "expression",
                      "code": "state.name",
                      "type": "single",
                    },
                  },
                  "children": [],
                  "meta": {},
                  "name": "input",
                  "properties": {},
                  "scope": {},
                },
                {
                  "@type": "@builder.io/mitosis/node",
                  "bindings": {},
                  "children": [],
                  "meta": {},
                  "name": "div",
                  "properties": {
                    "_text": "
            Hello ",
                  },
                  "scope": {},
                },
                {
                  "@type": "@builder.io/mitosis/node",
                  "bindings": {
                    "_text": {
                      "bindingType": "expression",
                      "code": "person",
                      "type": "single",
                    },
                  },
                  "children": [],
                  "meta": {},
                  "name": "div",
                  "properties": {},
                  "scope": {},
                },
                {
                  "@type": "@builder.io/mitosis/node",
                  "bindings": {},
                  "children": [],
                  "meta": {},
                  "name": "div",
                  "properties": {
                    "_text": "! I can run in Qwik, Web Component, React, Vue, Solid, or Liquid!
          ",
                  },
                  "scope": {},
                },
              ],
              "meta": {},
              "name": "Fragment",
              "properties": {},
              "scope": {},
            },
          ],
          "meta": {},
          "name": "For",
          "properties": {},
          "scope": {
            "forName": "person",
          },
        },
      ],
      "meta": {},
      "name": "div",
      "properties": {},
      "scope": {},
    },
  ],
  "context": {
    "get": {},
    "set": {},
  },
  "exports": {},
  "hooks": {
    "onEvent": [],
    "onMount": [
      {
        "code": "console.log('onMount code')",
        "onSSR": false,
      },
    ],
  },
  "imports": [],
  "inputs": [],
  "meta": {},
  "name": "MyBasicForComponent",
  "refs": {},
  "state": {
    "name": {
      "code": "'PatrickJS'",
      "propertyType": "normal",
      "type": "property",
    },
    "names": {
      "code": "['Steve', 'PatrickJS']",
      "propertyType": "normal",
      "type": "property",
    },
  },
  "subComponents": [],
}
`;

exports[`Parse JSX > Typescript > BasicRef 1`] = `
{
  "@type": "@builder.io/mitosis/component",
  "children": [
    {
      "@type": "@builder.io/mitosis/node",
      "bindings": {},
      "children": [
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {
            "when": {
              "bindingType": "expression",
              "code": "props.showInput",
              "type": "single",
            },
          },
          "children": [
            {
              "@type": "@builder.io/mitosis/node",
              "bindings": {},
              "children": [
                {
                  "@type": "@builder.io/mitosis/node",
                  "bindings": {
                    "css": {
                      "bindingType": "expression",
                      "code": "{
  color: 'red'
}",
                      "type": "single",
                    },
                    "onBlur": {
                      "arguments": [
                        "event",
                      ],
                      "bindingType": "function",
                      "code": "state.onBlur()",
                      "type": "single",
                    },
                    "onChange": {
                      "arguments": [
                        "event",
                      ],
                      "bindingType": "function",
                      "code": "state.name = event.target.value",
                      "type": "single",
                    },
                    "ref": {
                      "bindingType": "expression",
                      "code": "inputRef",
                      "type": "single",
                    },
                    "value": {
                      "bindingType": "expression",
                      "code": "state.name",
                      "type": "single",
                    },
                  },
                  "children": [],
                  "meta": {},
                  "name": "input",
                  "properties": {},
                  "scope": {},
                },
                {
                  "@type": "@builder.io/mitosis/node",
                  "bindings": {
                    "ref": {
                      "bindingType": "expression",
                      "code": "inputNoArgRef",
                      "type": "single",
                    },
                  },
                  "children": [
                    {
                      "@type": "@builder.io/mitosis/node",
                      "bindings": {},
                      "children": [],
                      "meta": {},
                      "name": "div",
                      "properties": {
                        "_text": "
            Choose a car:
          ",
                      },
                      "scope": {},
                    },
                  ],
                  "meta": {},
                  "name": "label",
                  "properties": {
                    "for": "cars",
                  },
                  "scope": {},
                },
                {
                  "@type": "@builder.io/mitosis/node",
                  "bindings": {},
                  "children": [
                    {
                      "@type": "@builder.io/mitosis/node",
                      "bindings": {},
                      "children": [
                        {
                          "@type": "@builder.io/mitosis/node",
                          "bindings": {},
                          "children": [],
                          "meta": {},
                          "name": "div",
                          "properties": {
                            "_text": "GR Supra",
                          },
                          "scope": {},
                        },
                      ],
                      "meta": {},
                      "name": "option",
                      "properties": {
                        "value": "supra",
                      },
                      "scope": {},
                    },
                    {
                      "@type": "@builder.io/mitosis/node",
                      "bindings": {},
                      "children": [
                        {
                          "@type": "@builder.io/mitosis/node",
                          "bindings": {},
                          "children": [],
                          "meta": {},
                          "name": "div",
                          "properties": {
                            "_text": "GR 86",
                          },
                          "scope": {},
                        },
                      ],
                      "meta": {},
                      "name": "option",
                      "properties": {
                        "value": "86",
                      },
                      "scope": {},
                    },
                  ],
                  "meta": {},
                  "name": "select",
                  "properties": {
                    "id": "cars",
                    "name": "cars",
                  },
                  "scope": {},
                },
              ],
              "meta": {},
              "name": "Fragment",
              "properties": {},
              "scope": {},
            },
          ],
          "meta": {},
          "name": "Show",
          "properties": {},
          "scope": {},
        },
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {},
          "children": [],
          "meta": {},
          "name": "div",
          "properties": {
            "_text": "
      Hello
      ",
          },
          "scope": {},
        },
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {
            "_text": {
              "bindingType": "expression",
              "code": "state.lowerCaseName()",
              "type": "single",
            },
          },
          "children": [],
          "meta": {},
          "name": "div",
          "properties": {},
          "scope": {},
        },
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {},
          "children": [],
          "meta": {},
          "name": "div",
          "properties": {
            "_text": "! I can run in React, Qwik, Vue, Solid, or Web Component!
    ",
          },
          "scope": {},
        },
      ],
      "meta": {},
      "name": "div",
      "properties": {},
      "scope": {},
    },
  ],
  "context": {
    "get": {},
    "set": {},
  },
  "exports": {},
  "hooks": {
    "onEvent": [],
    "onMount": [],
  },
  "imports": [],
  "inputs": [],
  "meta": {},
  "name": "MyBasicRefComponent",
  "propsTypeRef": "Props",
  "refs": {
    "inputNoArgRef": {
      "argument": "null",
      "typeParameter": "HTMLLabelElement | null",
    },
    "inputRef": {
      "argument": "null",
      "typeParameter": "HTMLInputElement | null",
    },
  },
  "state": {
    "lowerCaseName": {
      "code": "function lowerCaseName() {
  return state.name.toLowerCase();
}",
      "type": "function",
    },
    "name": {
      "code": "'PatrickJS'",
      "propertyType": "normal",
      "type": "property",
    },
    "onBlur": {
      "code": "function onBlur() {
  // Maintain focus
  inputRef?.focus();
}",
      "type": "function",
    },
  },
  "subComponents": [],
  "types": [
    "export interface Props {
  showInput: boolean;
}",
  ],
}
`;

exports[`Parse JSX > Typescript > BasicRefAssignment 1`] = `
{
  "@type": "@builder.io/mitosis/component",
  "children": [
    {
      "@type": "@builder.io/mitosis/node",
      "bindings": {},
      "children": [
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {
            "onClick": {
              "arguments": [
                "evt",
              ],
              "async": true,
              "bindingType": "function",
              "code": "await state.handlerClick(evt)",
              "type": "single",
            },
          },
          "children": [
            {
              "@type": "@builder.io/mitosis/node",
              "bindings": {},
              "children": [],
              "meta": {},
              "name": "div",
              "properties": {
                "_text": "Click",
              },
              "scope": {},
            },
          ],
          "meta": {},
          "name": "button",
          "properties": {},
          "scope": {},
        },
      ],
      "meta": {},
      "name": "div",
      "properties": {},
      "scope": {},
    },
  ],
  "context": {
    "get": {},
    "set": {},
  },
  "exports": {},
  "hooks": {
    "onEvent": [],
    "onMount": [],
  },
  "imports": [],
  "inputs": [],
  "meta": {},
  "name": "MyBasicRefAssignmentComponent",
  "propsTypeRef": "Props",
  "refs": {
    "holdValueRef": {
      "argument": "'Patrick'",
    },
  },
  "state": {
    "handlerClick": {
      "code": "function handlerClick(event: Event) {
  event.preventDefault();
  console.log('current value', holdValueRef);
  holdValueRef = holdValueRef + 'JS';
}",
      "type": "function",
    },
  },
  "subComponents": [],
  "types": [
    "export interface Props {
  showInput: boolean;
}",
  ],
}
`;

exports[`Parse JSX > Typescript > BasicRefPrevious 1`] = `
{
  "@type": "@builder.io/mitosis/component",
  "children": [
    {
      "@type": "@builder.io/mitosis/node",
      "bindings": {},
      "children": [
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {},
          "children": [
            {
              "@type": "@builder.io/mitosis/node",
              "bindings": {},
              "children": [],
              "meta": {},
              "name": "div",
              "properties": {
                "_text": "
        Now: ",
              },
              "scope": {},
            },
            {
              "@type": "@builder.io/mitosis/node",
              "bindings": {
                "_text": {
                  "bindingType": "expression",
                  "code": "state.count",
                  "type": "single",
                },
              },
              "children": [],
              "meta": {},
              "name": "div",
              "properties": {},
              "scope": {},
            },
            {
              "@type": "@builder.io/mitosis/node",
              "bindings": {},
              "children": [],
              "meta": {},
              "name": "div",
              "properties": {
                "_text": ", before: ",
              },
              "scope": {},
            },
            {
              "@type": "@builder.io/mitosis/node",
              "bindings": {
                "_text": {
                  "bindingType": "expression",
                  "code": "prevCount",
                  "type": "single",
                },
              },
              "children": [],
              "meta": {},
              "name": "div",
              "properties": {},
              "scope": {},
            },
          ],
          "meta": {},
          "name": "h1",
          "properties": {},
          "scope": {},
        },
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {
            "onClick": {
              "bindingType": "function",
              "code": "state.count += 1",
              "type": "single",
            },
          },
          "children": [
            {
              "@type": "@builder.io/mitosis/node",
              "bindings": {},
              "children": [],
              "meta": {},
              "name": "div",
              "properties": {
                "_text": "Increment",
              },
              "scope": {},
            },
          ],
          "meta": {},
          "name": "button",
          "properties": {},
          "scope": {},
        },
      ],
      "meta": {},
      "name": "div",
      "properties": {},
      "scope": {},
    },
  ],
  "context": {
    "get": {},
    "set": {},
  },
  "exports": {
    "usePrevious": {
      "code": "export function usePrevious<T>(value: T) {
  // The ref object is a generic container whose current property is mutable ...
  // ... and can hold any value, similar to an instance property on a class
  let ref = useRef<T>(null); // Store current value in ref

  onUpdate(() => {
    ref = value;
  }, [value]); // Only re-run if value changes
  // Return previous value (happens before update in useEffect above)

  return ref;
}",
      "isFunction": true,
      "usedInLocal": false,
    },
  },
  "hooks": {
    "onEvent": [],
    "onMount": [],
    "onUpdate": [
      {
        "code": "prevCount = state.count",
        "deps": "[state.count]",
        "depsArray": [
          "state.count",
        ],
      },
    ],
  },
  "imports": [],
  "inputs": [],
  "meta": {},
  "name": "MyPreviousComponent",
  "propsTypeRef": "Props",
  "refs": {
    "prevCount": {
      "argument": "state.count",
    },
  },
  "state": {
    "count": {
      "code": "0",
      "propertyType": "normal",
      "type": "property",
    },
  },
  "subComponents": [],
  "types": [
    "export interface Props {
  showInput: boolean;
}",
  ],
}
`;

exports[`Parse JSX > Typescript > Button 1`] = `
{
  "@type": "@builder.io/mitosis/component",
  "children": [
    {
      "@type": "@builder.io/mitosis/node",
      "bindings": {},
      "children": [
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {
            "when": {
              "bindingType": "expression",
              "code": "props.link",
              "type": "single",
            },
          },
          "children": [
            {
              "@type": "@builder.io/mitosis/node",
              "bindings": {
                "href": {
                  "bindingType": "expression",
                  "code": "props.link",
                  "type": "single",
                },
                "props.attributes": {
                  "code": "props.attributes",
                  "spreadType": "normal",
                  "type": "spread",
                },
                "target": {
                  "bindingType": "expression",
                  "code": "props.openLinkInNewTab ? '_blank' : undefined",
                  "type": "single",
                },
              },
              "children": [
                {
                  "@type": "@builder.io/mitosis/node",
                  "bindings": {
                    "_text": {
                      "bindingType": "expression",
                      "code": "props.text",
                      "type": "single",
                    },
                  },
                  "children": [],
                  "meta": {},
                  "name": "div",
                  "properties": {},
                  "scope": {},
                },
              ],
              "meta": {},
              "name": "a",
              "properties": {},
              "scope": {},
            },
          ],
          "meta": {},
          "name": "Show",
          "properties": {},
          "scope": {},
        },
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {
            "when": {
              "bindingType": "expression",
              "code": "!props.link",
              "type": "single",
            },
          },
          "children": [
            {
              "@type": "@builder.io/mitosis/node",
              "bindings": {
                "props.attributes": {
                  "code": "props.attributes",
                  "spreadType": "normal",
                  "type": "spread",
                },
              },
              "children": [
                {
                  "@type": "@builder.io/mitosis/node",
                  "bindings": {
                    "_text": {
                      "bindingType": "expression",
                      "code": "props.text",
                      "type": "single",
                    },
                  },
                  "children": [],
                  "meta": {},
                  "name": "div",
                  "properties": {},
                  "scope": {},
                },
              ],
              "meta": {},
              "name": "button",
              "properties": {
                "type": "button",
              },
              "scope": {},
            },
          ],
          "meta": {},
          "name": "Show",
          "properties": {},
          "scope": {},
        },
      ],
      "meta": {},
      "name": "div",
      "properties": {},
      "scope": {},
    },
  ],
  "context": {
    "get": {},
    "set": {},
  },
  "exports": {},
  "hooks": {
    "onEvent": [],
    "onMount": [],
  },
  "imports": [],
  "inputs": [],
  "meta": {},
  "name": "Button",
  "propsTypeRef": "ButtonProps",
  "refs": {},
  "state": {},
  "subComponents": [],
  "types": [
    "export interface ButtonProps {
  attributes?: any;
  text?: string;
  link?: string;
  openLinkInNewTab?: boolean;
}",
  ],
}
`;

exports[`Parse JSX > Typescript > Columns 1`] = `
{
  "@type": "@builder.io/mitosis/component",
  "children": [
    {
      "@type": "@builder.io/mitosis/node",
      "bindings": {
        "css": {
          "bindingType": "expression",
          "code": "{
  display: 'flex',
  flexDirection: 'column',
  alignItems: 'stretch',
  lineHeight: 'normal',
  '@media (max-width: 999px)': {
    flexDirection: 'row'
  },
  '@media (max-width: 639px)': {
    flexDirection: 'row-reverse'
  }
}",
          "type": "single",
        },
      },
      "children": [
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {
            "each": {
              "bindingType": "expression",
              "code": "props.columns",
              "type": "single",
            },
          },
          "children": [
            {
              "@type": "@builder.io/mitosis/node",
              "bindings": {
                "css": {
                  "bindingType": "expression",
                  "code": "{
  flexGrow: '1'
}",
                  "type": "single",
                },
              },
              "children": [
                {
                  "@type": "@builder.io/mitosis/node",
                  "bindings": {
                    "_text": {
                      "bindingType": "expression",
                      "code": "column.content",
                      "type": "single",
                    },
                  },
                  "children": [],
                  "meta": {},
                  "name": "div",
                  "properties": {},
                  "scope": {},
                },
                {
                  "@type": "@builder.io/mitosis/node",
                  "bindings": {
                    "_text": {
                      "bindingType": "expression",
                      "code": "index",
                      "type": "single",
                    },
                  },
                  "children": [],
                  "meta": {},
                  "name": "div",
                  "properties": {},
                  "scope": {},
                },
              ],
              "meta": {},
              "name": "div",
              "properties": {
                "class": "builder-column",
              },
              "scope": {},
            },
          ],
          "meta": {},
          "name": "For",
          "properties": {},
          "scope": {
            "forName": "column",
            "indexName": "index",
          },
        },
      ],
      "meta": {},
      "name": "div",
      "properties": {
        "class": "builder-columns",
      },
      "scope": {},
    },
  ],
  "context": {
    "get": {},
    "set": {},
  },
  "exports": {},
  "hooks": {
    "onEvent": [],
    "onMount": [],
  },
  "imports": [],
  "inputs": [],
  "meta": {},
  "name": "Column",
  "propsTypeRef": "ColumnProps",
  "refs": {},
  "state": {
    "getColumnCssWidth": {
      "code": "getColumnCssWidth(index: number) {
  const columns = state.getColumns();
  const gutterSize = state.getGutterSize();
  const subtractWidth = gutterSize * (columns.length - 1) / columns.length;
  return \`calc(\${state.getWidth(index)}% - \${subtractWidth}px)\`;
}",
      "type": "method",
    },
    "getColumns": {
      "code": "getColumns() {
  return props.columns || [];
}",
      "type": "method",
    },
    "getGutterSize": {
      "code": "getGutterSize() {
  return typeof props.space === 'number' ? props.space || 0 : 20;
}",
      "type": "method",
    },
    "getWidth": {
      "code": "getWidth(index: number) {
  const columns = state.getColumns();
  return columns[index] && columns[index].width || 100 / columns.length;
}",
      "type": "method",
    },
  },
  "subComponents": [],
  "types": [
    "type Column = {
  content: any; // TODO: Implement this when support for dynamic CSS lands

  width?: number;
}",
    "export interface ColumnProps {
  columns?: Column[]; // TODO: Implement this when support for dynamic CSS lands

  space?: number; // TODO: Implement this when support for dynamic CSS lands

  stackColumnsAt?: 'tablet' | 'mobile' | 'never'; // TODO: Implement this when support for dynamic CSS lands

  reverseColumnsWhenStacked?: boolean;
}",
  ],
}
`;

exports[`Parse JSX > Typescript > ContentSlotHtml 1`] = `
{
  "@type": "@builder.io/mitosis/component",
  "children": [
    {
      "@type": "@builder.io/mitosis/node",
      "bindings": {},
      "children": [
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {
            "name": {
              "bindingType": "expression",
              "code": "props.slotTesting",
              "type": "single",
            },
          },
          "children": [],
          "meta": {},
          "name": "Slot",
          "properties": {},
          "scope": {},
        },
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {},
          "children": [
            {
              "@type": "@builder.io/mitosis/node",
              "bindings": {},
              "children": [],
              "meta": {},
              "name": "hr",
              "properties": {},
              "scope": {},
            },
          ],
          "meta": {},
          "name": "div",
          "properties": {},
          "scope": {},
        },
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {},
          "children": [
            {
              "@type": "@builder.io/mitosis/node",
              "bindings": {},
              "children": [],
              "meta": {},
              "name": "Slot",
              "properties": {},
              "scope": {},
            },
          ],
          "meta": {},
          "name": "div",
          "properties": {},
          "scope": {},
        },
      ],
      "meta": {},
      "name": "div",
      "properties": {},
      "scope": {},
    },
  ],
  "context": {
    "get": {},
    "set": {},
  },
  "exports": {},
  "hooks": {
    "onEvent": [],
    "onMount": [],
  },
  "imports": [
    {
      "importKind": "type",
      "imports": {
        "JSX": "JSX",
      },
      "path": "../../../../jsx-runtime",
    },
  ],
  "inputs": [],
  "meta": {},
  "name": "ContentSlotCode",
  "propsTypeRef": "Props",
  "refs": {},
  "state": {},
  "subComponents": [],
  "types": [
    "type Props = {
  [key: string]: string | JSX.Element;
  slotTesting: JSX.Element;
}",
  ],
}
`;

exports[`Parse JSX > Typescript > ContentSlotJSX 1`] = `
{
  "@type": "@builder.io/mitosis/component",
  "children": [
    {
      "@type": "@builder.io/mitosis/node",
      "bindings": {
        "when": {
          "bindingType": "expression",
          "code": "props.slotReference",
          "type": "single",
        },
      },
      "children": [
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {
            "class": {
              "bindingType": "expression",
              "code": "state.cls",
              "type": "single",
            },
            "name": {
              "bindingType": "expression",
              "code": "props.slotContent ? 'name1' : 'name2'",
              "type": "single",
            },
            "onClick": {
              "bindingType": "function",
              "code": "state.show()",
              "type": "single",
            },
            "props.attributes": {
              "code": "props.attributes",
              "spreadType": "normal",
              "type": "spread",
            },
            "title": {
              "bindingType": "expression",
              "code": "props.slotContent ? 'title1' : 'title2'",
              "type": "single",
            },
          },
          "children": [
            {
              "@type": "@builder.io/mitosis/node",
              "bindings": {
                "when": {
                  "bindingType": "expression",
                  "code": "state.showContent && props.slotContent",
                  "type": "single",
                },
              },
              "children": [
                {
                  "@type": "@builder.io/mitosis/node",
                  "bindings": {},
                  "children": [
                    {
                      "@type": "@builder.io/mitosis/node",
                      "bindings": {
                        "_text": {
                          "bindingType": "expression",
                          "code": "props.content",
                          "type": "single",
                        },
                      },
                      "children": [],
                      "meta": {},
                      "name": "div",
                      "properties": {},
                      "scope": {},
                    },
                  ],
                  "meta": {},
                  "name": "Slot",
                  "properties": {
                    "name": "content",
                  },
                  "scope": {},
                },
              ],
              "meta": {},
              "name": "Show",
              "properties": {},
              "scope": {},
            },
            {
              "@type": "@builder.io/mitosis/node",
              "bindings": {},
              "children": [
                {
                  "@type": "@builder.io/mitosis/node",
                  "bindings": {},
                  "children": [],
                  "meta": {},
                  "name": "hr",
                  "properties": {},
                  "scope": {},
                },
              ],
              "meta": {},
              "name": "div",
              "properties": {},
              "scope": {},
            },
            {
              "@type": "@builder.io/mitosis/node",
              "bindings": {},
              "children": [
                {
                  "@type": "@builder.io/mitosis/node",
                  "bindings": {
                    "_text": {
                      "bindingType": "expression",
                      "code": "props.children",
                      "type": "single",
                    },
                  },
                  "children": [],
                  "meta": {},
                  "name": "div",
                  "properties": {},
                  "scope": {},
                },
              ],
              "meta": {},
              "name": "div",
              "properties": {},
              "scope": {},
            },
          ],
          "meta": {},
          "name": "div",
          "properties": {},
          "scope": {},
        },
      ],
      "meta": {},
      "name": "Show",
      "properties": {},
      "scope": {},
    },
  ],
  "context": {
    "get": {},
    "set": {},
  },
  "defaultProps": {
    "content": {
      "code": "''",
      "propertyType": "normal",
      "type": "property",
    },
    "slotContent": {
      "code": "undefined",
      "propertyType": "normal",
      "type": "property",
    },
    "slotReference": {
      "code": "undefined",
      "propertyType": "normal",
      "type": "property",
    },
  },
  "exports": {},
  "hooks": {
    "onEvent": [],
    "onMount": [],
  },
  "imports": [
    {
      "importKind": "type",
      "imports": {
        "JSX": "JSX",
      },
      "path": "../../../../jsx-runtime",
    },
  ],
  "inputs": [],
  "meta": {},
  "name": "ContentSlotJsxCode",
  "propsTypeRef": "Props",
  "refs": {},
  "state": {
    "cls": {
      "code": "get cls() {
  return props.slotContent && props.children ? \`\${state.name}-content\` : '';
}",
      "type": "getter",
    },
    "name": {
      "code": "'king'",
      "propertyType": "normal",
      "type": "property",
    },
    "show": {
      "code": "show() {
  props.slotContent ? 1 : '';
}",
      "type": "method",
    },
    "showContent": {
      "code": "false",
      "propertyType": "normal",
      "type": "property",
    },
  },
  "subComponents": [],
  "types": [
    "type Props = {
  [key: string]: string | JSX.Element;
}",
  ],
}
`;

exports[`Parse JSX > Typescript > CustomCode 1`] = `
{
  "@type": "@builder.io/mitosis/component",
  "children": [
    {
      "@type": "@builder.io/mitosis/node",
      "bindings": {
        "class": {
          "bindingType": "expression",
          "code": "'builder-custom-code' + (props.replaceNodes ? ' replace-nodes' : '')",
          "type": "single",
        },
        "innerHTML": {
          "bindingType": "expression",
          "code": "props.code",
          "type": "single",
        },
        "ref": {
          "bindingType": "expression",
          "code": "elem",
          "type": "single",
        },
      },
      "children": [],
      "meta": {},
      "name": "div",
      "properties": {},
      "scope": {},
    },
  ],
  "context": {
    "get": {},
    "set": {},
  },
  "exports": {},
  "hooks": {
    "onEvent": [],
    "onMount": [
      {
        "code": "state.findAndRunScripts()",
        "onSSR": false,
      },
    ],
  },
  "imports": [],
  "inputs": [],
  "meta": {},
  "name": "CustomCode",
  "propsTypeRef": "CustomCodeProps",
  "refs": {
    "elem": {
      "argument": "null",
      "typeParameter": "HTMLDivElement",
    },
  },
  "state": {
    "findAndRunScripts": {
      "code": "findAndRunScripts() {
  // TODO: Move this function to standalone one in '@builder.io/utils'
  if (elem && typeof window !== 'undefined') {
    /** @type {HTMLScriptElement[]} */
    const scripts = elem.getElementsByTagName('script');

    for (let i = 0; i < scripts.length; i++) {
      const script = scripts[i];

      if (script.src) {
        if (state.scriptsInserted.includes(script.src)) {
          continue;
        }

        state.scriptsInserted.push(script.src);
        const newScript = document.createElement('script');
        newScript.async = true;
        newScript.src = script.src;
        document.head.appendChild(newScript);
      } else if (!script.type || ['text/javascript', 'application/javascript', 'application/ecmascript'].includes(script.type)) {
        if (state.scriptsRun.includes(script.innerText)) {
          continue;
        }

        try {
          state.scriptsRun.push(script.innerText);
          new Function(script.innerText)();
        } catch (error) {
          console.warn('\`CustomCode\`: Error running script:', error);
        }
      }
    }
  }
}",
      "type": "method",
    },
    "scriptsInserted": {
      "code": "[]",
      "propertyType": "normal",
      "type": "property",
    },
    "scriptsRun": {
      "code": "[]",
      "propertyType": "normal",
      "type": "property",
    },
  },
  "subComponents": [],
  "types": [
    "export interface CustomCodeProps {
  code: string;
  replaceNodes?: boolean;
}",
  ],
}
`;

exports[`Parse JSX > Typescript > Embed 1`] = `
{
  "@type": "@builder.io/mitosis/component",
  "children": [
    {
      "@type": "@builder.io/mitosis/node",
      "bindings": {
        "class": {
          "bindingType": "expression",
          "code": "'builder-custom-code' + (props.replaceNodes ? ' replace-nodes' : '')",
          "type": "single",
        },
        "innerHTML": {
          "bindingType": "expression",
          "code": "props.code",
          "type": "single",
        },
        "ref": {
          "bindingType": "expression",
          "code": "elem",
          "type": "single",
        },
      },
      "children": [],
      "meta": {},
      "name": "div",
      "properties": {},
      "scope": {},
    },
  ],
  "context": {
    "get": {},
    "set": {},
  },
  "exports": {},
  "hooks": {
    "onEvent": [],
    "onMount": [
      {
        "code": "state.findAndRunScripts()",
        "onSSR": false,
      },
    ],
  },
  "imports": [],
  "inputs": [],
  "meta": {},
  "name": "CustomCode",
  "propsTypeRef": "CustomCodeProps",
  "refs": {
    "elem": {
      "argument": "null",
      "typeParameter": "HTMLDivElement",
    },
  },
  "state": {
    "findAndRunScripts": {
      "code": "findAndRunScripts() {
  // TODO: Move this function to standalone one in '@builder.io/utils'
  if (elem && typeof window !== 'undefined') {
    /** @type {HTMLScriptElement[]} */
    const scripts = elem.getElementsByTagName('script');

    for (let i = 0; i < scripts.length; i++) {
      const script = scripts[i];

      if (script.src) {
        if (state.scriptsInserted.includes(script.src)) {
          continue;
        }

        state.scriptsInserted.push(script.src);
        const newScript = document.createElement('script');
        newScript.async = true;
        newScript.src = script.src;
        document.head.appendChild(newScript);
      } else if (!script.type || ['text/javascript', 'application/javascript', 'application/ecmascript'].includes(script.type)) {
        if (state.scriptsRun.includes(script.innerText)) {
          continue;
        }

        try {
          state.scriptsRun.push(script.innerText);
          new Function(script.innerText)();
        } catch (error) {
          console.warn('\`CustomCode\`: Error running script:', error);
        }
      }
    }
  }
}",
      "type": "method",
    },
    "scriptsInserted": {
      "code": "[]",
      "propertyType": "normal",
      "type": "property",
    },
    "scriptsRun": {
      "code": "[]",
      "propertyType": "normal",
      "type": "property",
    },
  },
  "subComponents": [],
  "types": [
    "export interface CustomCodeProps {
  code: string;
  replaceNodes?: boolean;
}",
  ],
}
`;

exports[`Parse JSX > Typescript > Form 1`] = `
{
  "@type": "@builder.io/mitosis/component",
  "children": [
    {
      "@type": "@builder.io/mitosis/node",
      "bindings": {
        "action": {
          "bindingType": "expression",
          "code": "!props.sendWithJs && props.action",
          "type": "single",
        },
        "method": {
          "bindingType": "expression",
          "code": "props.method",
          "type": "single",
        },
        "name": {
          "bindingType": "expression",
          "code": "props.name",
          "type": "single",
        },
        "onSubmit": {
          "arguments": [
            "event",
          ],
          "bindingType": "function",
          "code": "state.onSubmit(event)",
          "type": "single",
        },
        "props.attributes": {
          "code": "props.attributes",
          "spreadType": "normal",
          "type": "spread",
        },
        "ref": {
          "bindingType": "expression",
          "code": "formRef",
          "type": "single",
        },
        "validate": {
          "bindingType": "expression",
          "code": "props.validate",
          "type": "single",
        },
      },
      "children": [
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {
            "when": {
              "bindingType": "expression",
              "code": "props.builderBlock && props.builderBlock.children",
              "type": "single",
            },
          },
          "children": [
            {
              "@type": "@builder.io/mitosis/node",
              "bindings": {
                "each": {
                  "bindingType": "expression",
                  "code": "props.builderBlock?.children",
                  "type": "single",
                },
              },
              "children": [
                {
                  "@type": "@builder.io/mitosis/node",
                  "bindings": {
                    "block": {
                      "bindingType": "expression",
                      "code": "block",
                      "type": "single",
                    },
                    "index": {
                      "bindingType": "expression",
                      "code": "index",
                      "type": "single",
                    },
                    "key": {
                      "bindingType": "expression",
                      "code": "block.id",
                      "type": "single",
                    },
                  },
                  "children": [],
                  "meta": {},
                  "name": "BuilderBlockComponent",
                  "properties": {},
                  "scope": {},
                },
              ],
              "meta": {},
              "name": "For",
              "properties": {},
              "scope": {
                "forName": "block",
                "indexName": "index",
              },
            },
          ],
          "meta": {},
          "name": "Show",
          "properties": {},
          "scope": {},
        },
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {
            "when": {
              "bindingType": "expression",
              "code": "state.submissionState === 'error'",
              "type": "single",
            },
          },
          "children": [
            {
              "@type": "@builder.io/mitosis/node",
              "bindings": {
                "blocks": {
                  "bindingType": "expression",
                  "code": "props.errorMessage!",
                  "type": "single",
                },
              },
              "children": [],
              "meta": {},
              "name": "BuilderBlocks",
              "properties": {
                "dataPath": "errorMessage",
              },
              "scope": {},
            },
          ],
          "meta": {},
          "name": "Show",
          "properties": {},
          "scope": {},
        },
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {
            "when": {
              "bindingType": "expression",
              "code": "state.submissionState === 'sending'",
              "type": "single",
            },
          },
          "children": [
            {
              "@type": "@builder.io/mitosis/node",
              "bindings": {
                "blocks": {
                  "bindingType": "expression",
                  "code": "props.sendingMessage!",
                  "type": "single",
                },
              },
              "children": [],
              "meta": {},
              "name": "BuilderBlocks",
              "properties": {
                "dataPath": "sendingMessage",
              },
              "scope": {},
            },
          ],
          "meta": {},
          "name": "Show",
          "properties": {},
          "scope": {},
        },
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {
            "when": {
              "bindingType": "expression",
              "code": "state.submissionState === 'error' && state.responseData",
              "type": "single",
            },
          },
          "children": [
            {
              "@type": "@builder.io/mitosis/node",
              "bindings": {
                "css": {
                  "bindingType": "expression",
                  "code": "{
  padding: '10px',
  color: 'red',
  textAlign: 'center'
}",
                  "type": "single",
                },
              },
              "children": [
                {
                  "@type": "@builder.io/mitosis/node",
                  "bindings": {
                    "_text": {
                      "bindingType": "expression",
                      "code": "JSON.stringify(state.responseData, null, 2)",
                      "type": "single",
                    },
                  },
                  "children": [],
                  "meta": {},
                  "name": "div",
                  "properties": {},
                  "scope": {},
                },
              ],
              "meta": {},
              "name": "pre",
              "properties": {
                "class": "builder-form-error-text",
              },
              "scope": {},
            },
          ],
          "meta": {},
          "name": "Show",
          "properties": {},
          "scope": {},
        },
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {
            "when": {
              "bindingType": "expression",
              "code": "state.submissionState === 'success'",
              "type": "single",
            },
          },
          "children": [
            {
              "@type": "@builder.io/mitosis/node",
              "bindings": {
                "blocks": {
                  "bindingType": "expression",
                  "code": "props.successMessage!",
                  "type": "single",
                },
              },
              "children": [],
              "meta": {},
              "name": "BuilderBlocks",
              "properties": {
                "dataPath": "successMessage",
              },
              "scope": {},
            },
          ],
          "meta": {},
          "name": "Show",
          "properties": {},
          "scope": {},
        },
      ],
      "meta": {},
      "name": "form",
      "properties": {},
      "scope": {},
    },
  ],
  "context": {
    "get": {},
    "set": {},
  },
  "exports": {},
  "hooks": {
    "onEvent": [],
    "onMount": [],
  },
  "imports": [
    {
      "importKind": "value",
      "imports": {
        "Builder": "Builder",
        "BuilderElement": "BuilderElement",
        "builder": "builder",
      },
      "path": "@builder.io/sdk",
    },
    {
      "importKind": "value",
      "imports": {
        "BuilderBlockComponent": "BuilderBlock",
        "BuilderBlocks": "BuilderBlocks",
        "get": "get",
        "set": "set",
      },
      "path": "@fake",
    },
  ],
  "inputs": [],
  "meta": {},
  "name": "FormComponent",
  "propsTypeRef": "FormProps",
  "refs": {
    "formRef": {
      "argument": "null",
      "typeParameter": "HTMLFormElement",
    },
  },
  "state": {
    "formErrorMessage": {
      "code": "''",
      "propertyType": "normal",
      "type": "property",
    },
    "formState": {
      "code": "'unsubmitted'",
      "propertyType": "normal",
      "type": "property",
    },
    "onSubmit": {
      "code": "onSubmit(event: Event & {
  currentTarget: HTMLFormElement;
}) {
  const sendWithJs = props.sendWithJs || props.sendSubmissionsTo === 'email';

  if (props.sendSubmissionsTo === 'zapier') {
    event.preventDefault();
  } else if (sendWithJs) {
    if (!(props.action || props.sendSubmissionsTo === 'email')) {
      event.preventDefault();
      return;
    }

    event.preventDefault();
    const el = event.currentTarget;
    const headers = props.customHeaders || {};
    let body: any;
    const formData = new FormData(el); // TODO: maybe support null

    const formPairs: {
      key: string;
      value: File | boolean | number | string | FileList;
    }[] = Array.from(event.currentTarget.querySelectorAll('input,select,textarea')).filter(el => !!(el as HTMLInputElement).name).map(el => {
      let value: any;
      const key = (el as HTMLImageElement).name;

      if (el instanceof HTMLInputElement) {
        if (el.type === 'radio') {
          if (el.checked) {
            value = el.name;
            return {
              key,
              value
            };
          }
        } else if (el.type === 'checkbox') {
          value = el.checked;
        } else if (el.type === 'number' || el.type === 'range') {
          const num = el.valueAsNumber;

          if (!isNaN(num)) {
            value = num;
          }
        } else if (el.type === 'file') {
          // TODO: one vs multiple files
          value = el.files;
        } else {
          value = el.value;
        }
      } else {
        value = (el as HTMLInputElement).value;
      }

      return {
        key,
        value
      };
    });
    let contentType = props.contentType;

    if (props.sendSubmissionsTo === 'email') {
      contentType = 'multipart/form-data';
    }

    Array.from(formPairs).forEach(({
      value
    }) => {
      if (value instanceof File || Array.isArray(value) && value[0] instanceof File || value instanceof FileList) {
        contentType = 'multipart/form-data';
      }
    }); // TODO: send as urlEncoded or multipart by default
    // because of ease of use and reliability in browser API
    // for encoding the form?

    if (contentType !== 'application/json') {
      body = formData;
    } else {
      // Json
      const json = {};
      Array.from(formPairs).forEach(({
        value,
        key
      }) => {
        set(json, key, value);
      });
      body = JSON.stringify(json);
    }

    if (contentType && contentType !== 'multipart/form-data') {
      if (
      /* Zapier doesn't allow content-type header to be sent from browsers */
      !(sendWithJs && props.action?.includes('zapier.com'))) {
        headers['content-type'] = contentType;
      }
    }

    const presubmitEvent = new CustomEvent('presubmit', {
      detail: {
        body
      }
    });

    if (formRef) {
      formRef.dispatchEvent(presubmitEvent);

      if (presubmitEvent.defaultPrevented) {
        return;
      }
    }

    state.formState = 'sending';
    const formUrl = \`\${builder.env === 'dev' ? 'http://localhost:5000' : 'https://builder.io'}/api/v1/form-submit?apiKey=\${builder.apiKey}&to=\${btoa(props.sendSubmissionsToEmail || '')}&name=\${encodeURIComponent(props.name || '')}\`;
    fetch(props.sendSubmissionsTo === 'email' ? formUrl : props.action!
    /* TODO: throw error if no action URL */
    , {
      body,
      headers,
      method: props.method || 'post'
    }).then(async res => {
      let body;
      const contentType = res.headers.get('content-type');

      if (contentType && contentType.indexOf('application/json') !== -1) {
        body = await res.json();
      } else {
        body = await res.text();
      }

      if (!res.ok && props.errorMessagePath) {
        /* TODO: allow supplying an error formatter function */
        let message = get(body, props.errorMessagePath);

        if (message) {
          if (typeof message !== 'string') {
            /* TODO: ideally convert json to yaml so it woul dbe like
             error: - email has been taken */
            message = JSON.stringify(message);
          }

          state.formErrorMessage = message;
        }
      }

      state.responseData = body;
      state.formState = res.ok ? 'success' : 'error';

      if (res.ok) {
        const submitSuccessEvent = new CustomEvent('submit:success', {
          detail: {
            res,
            body
          }
        });

        if (formRef) {
          formRef.dispatchEvent(submitSuccessEvent);

          if (submitSuccessEvent.defaultPrevented) {
            return;
          }
          /* TODO: option to turn this on/off? */


          if (props.resetFormOnSubmit !== false) {
            formRef.reset();
          }
        }
        /* TODO: client side route event first that can be preventDefaulted */


        if (props.successUrl) {
          if (formRef) {
            const event = new CustomEvent('route', {
              detail: {
                url: props.successUrl
              }
            });
            formRef.dispatchEvent(event);

            if (!event.defaultPrevented) {
              location.href = props.successUrl;
            }
          } else {
            location.href = props.successUrl;
          }
        }
      }
    }, err => {
      const submitErrorEvent = new CustomEvent('submit:error', {
        detail: {
          error: err
        }
      });

      if (formRef) {
        formRef.dispatchEvent(submitErrorEvent);

        if (submitErrorEvent.defaultPrevented) {
          return;
        }
      }

      state.responseData = err;
      state.formState = 'error';
    });
  }
}",
      "type": "method",
    },
    "responseData": {
      "code": "null",
      "propertyType": "normal",
      "type": "property",
    },
    "submissionState": {
      "code": "get submissionState() {
  return Builder.isEditing && props.previewState || state.formState;
}",
      "type": "getter",
    },
  },
  "subComponents": [],
  "types": [
    "export interface FormProps {
  attributes?: any;
  name?: string;
  action?: string;
  validate?: boolean;
  method?: string;
  builderBlock?: BuilderElement;
  sendSubmissionsTo?: string;
  sendSubmissionsToEmail?: string;
  sendWithJs?: boolean;
  contentType?: string;
  customHeaders?: {
    [key: string]: string;
  };
  successUrl?: string;
  previewState?: FormState;
  successMessage?: BuilderElement[];
  errorMessage?: BuilderElement[];
  sendingMessage?: BuilderElement[];
  resetFormOnSubmit?: boolean;
  errorMessagePath?: string;
}",
    "export type FormState = 'unsubmitted' | 'sending' | 'success' | 'error'",
  ],
}
`;

exports[`Parse JSX > Typescript > Image 1`] = `
{
  "@type": "@builder.io/mitosis/component",
  "children": [
    {
      "@type": "@builder.io/mitosis/node",
      "bindings": {},
      "children": [
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {
            "ref": {
              "bindingType": "expression",
              "code": "pictureRef",
              "type": "single",
            },
          },
          "children": [
            {
              "@type": "@builder.io/mitosis/node",
              "bindings": {
                "when": {
                  "bindingType": "expression",
                  "code": "!state.useLazyLoading() || state.load",
                  "type": "single",
                },
              },
              "children": [
                {
                  "@type": "@builder.io/mitosis/node",
                  "bindings": {
                    "alt": {
                      "bindingType": "expression",
                      "code": "props.altText",
                      "type": "single",
                    },
                    "aria-role": {
                      "bindingType": "expression",
                      "code": "props.altText ? 'presentation' : undefined",
                      "type": "single",
                    },
                    "class": {
                      "bindingType": "expression",
                      "code": "'builder-image' + (props._class ? ' ' + props._class : '')",
                      "type": "single",
                    },
                    "css": {
                      "bindingType": "expression",
                      "code": "{
  opacity: '1',
  transition: 'opacity 0.2s ease-in-out',
  objectFit: 'cover',
  objectPosition: 'center'
}",
                      "type": "single",
                    },
                    "onLoad": {
                      "bindingType": "function",
                      "code": "state.setLoaded()",
                      "type": "single",
                    },
                    "sizes": {
                      "bindingType": "expression",
                      "code": "props.sizes",
                      "type": "single",
                    },
                    "src": {
                      "bindingType": "expression",
                      "code": "props.image",
                      "type": "single",
                    },
                    "srcset": {
                      "bindingType": "expression",
                      "code": "props.srcset",
                      "type": "single",
                    },
                  },
                  "children": [],
                  "meta": {},
                  "name": "img",
                  "properties": {},
                  "scope": {},
                },
              ],
              "meta": {},
              "name": "Show",
              "properties": {},
              "scope": {},
            },
            {
              "@type": "@builder.io/mitosis/node",
              "bindings": {
                "srcset": {
                  "bindingType": "expression",
                  "code": "props.srcset",
                  "type": "single",
                },
              },
              "children": [],
              "meta": {},
              "name": "source",
              "properties": {},
              "scope": {},
            },
          ],
          "meta": {},
          "name": "picture",
          "properties": {},
          "scope": {},
        },
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {
            "_text": {
              "bindingType": "expression",
              "code": "props.children",
              "type": "single",
            },
          },
          "children": [],
          "meta": {},
          "name": "div",
          "properties": {},
          "scope": {},
        },
      ],
      "meta": {},
      "name": "div",
      "properties": {},
      "scope": {},
    },
  ],
  "context": {
    "get": {},
    "set": {},
  },
  "exports": {},
  "hooks": {
    "onEvent": [],
    "onMount": [
      {
        "code": "if (state.useLazyLoading()) {
  // throttled scroll capture listener
  const listener = () => {
    if (pictureRef) {
      const rect = pictureRef.getBoundingClientRect();
      const buffer = window.innerHeight / 2;

      if (rect.top < window.innerHeight + buffer) {
        state.load = true;
        state.scrollListener = null;
        window.removeEventListener('scroll', listener);
      }
    }
  };

  state.scrollListener = listener;
  window.addEventListener('scroll', listener, {
    capture: true,
    passive: true
  });
  listener();
}",
        "onSSR": false,
      },
    ],
    "onUnMount": {
      "code": "if (state.scrollListener) {
  window.removeEventListener('scroll', state.scrollListener);
}",
    },
  },
  "imports": [],
  "inputs": [],
  "meta": {},
  "name": "Image",
  "propsTypeRef": "ImageProps",
  "refs": {
    "pictureRef": {
      "argument": "",
      "typeParameter": "HTMLElement",
    },
  },
  "state": {
    "imageLoaded": {
      "code": "false",
      "propertyType": "normal",
      "type": "property",
    },
    "isBrowser": {
      "code": "function isBrowser() {
  return typeof window !== 'undefined' && window.navigator.product != 'ReactNative';
}",
      "type": "function",
    },
    "load": {
      "code": "false",
      "propertyType": "normal",
      "type": "property",
    },
    "scrollListener": {
      "code": "null",
      "propertyType": "normal",
      "type": "property",
    },
    "setLoaded": {
      "code": "setLoaded() {
  state.imageLoaded = true;
}",
      "type": "method",
    },
    "useLazyLoading": {
      "code": "useLazyLoading() {
  // TODO: Add more checks here, like testing for real web browsers
  return !!props.lazy && state.isBrowser();
}",
      "type": "method",
    },
  },
  "subComponents": [],
  "types": [
    "// TODO: AMP Support?
export interface ImageProps {
  _class?: string;
  image: string;
  sizes?: string;
  lazy?: boolean;
  height?: number;
  width?: number;
  altText?: string;
  backgroundSize?: string;
  backgroundPosition?: string; // TODO: Support generating Builder.io and or Shopify \`srcset\`s when needed

  srcset?: string; // TODO: Implement support for custom aspect ratios

  aspectRatio?: number; // TODO: This might not work as expected in terms of positioning

  children?: any;
}",
  ],
}
`;

exports[`Parse JSX > Typescript > Image State 1`] = `
{
  "@type": "@builder.io/mitosis/component",
  "children": [
    {
      "@type": "@builder.io/mitosis/node",
      "bindings": {},
      "children": [
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {
            "each": {
              "bindingType": "expression",
              "code": "state.images",
              "type": "single",
            },
          },
          "children": [
            {
              "@type": "@builder.io/mitosis/node",
              "bindings": {},
              "children": [
                {
                  "@type": "@builder.io/mitosis/node",
                  "bindings": {
                    "key": {
                      "bindingType": "expression",
                      "code": "itemIndex",
                      "type": "single",
                    },
                    "src": {
                      "bindingType": "expression",
                      "code": "item",
                      "type": "single",
                    },
                  },
                  "children": [],
                  "meta": {},
                  "name": "img",
                  "properties": {
                    "class": "custom-class",
                  },
                  "scope": {},
                },
              ],
              "meta": {},
              "name": "Fragment",
              "properties": {},
              "scope": {},
            },
          ],
          "meta": {},
          "name": "For",
          "properties": {},
          "scope": {
            "forName": "item",
            "indexName": "itemIndex",
          },
        },
      ],
      "meta": {},
      "name": "div",
      "properties": {},
      "scope": {},
    },
  ],
  "context": {
    "get": {},
    "set": {},
  },
  "exports": {},
  "hooks": {
    "onEvent": [],
    "onMount": [],
  },
  "imports": [],
  "inputs": [],
  "meta": {},
  "name": "ImgStateComponent",
  "refs": {},
  "state": {
    "canShow": {
      "code": "true",
      "propertyType": "normal",
      "type": "property",
    },
    "images": {
      "code": "['http://example.com/qwik.png']",
      "propertyType": "normal",
      "type": "property",
    },
  },
  "subComponents": [],
}
`;

exports[`Parse JSX > Typescript > Img 1`] = `
{
  "@type": "@builder.io/mitosis/component",
  "children": [
    {
      "@type": "@builder.io/mitosis/node",
      "bindings": {
        "alt": {
          "bindingType": "expression",
          "code": "props.altText",
          "type": "single",
        },
        "key": {
          "bindingType": "expression",
          "code": "Builder.isEditing && props.imgSrc || 'default-key'",
          "type": "single",
        },
        "props.attributes": {
          "code": "props.attributes",
          "spreadType": "normal",
          "type": "spread",
        },
        "src": {
          "bindingType": "expression",
          "code": "props.imgSrc",
          "type": "single",
        },
        "style": {
          "bindingType": "expression",
          "code": "{
  objectFit: props.backgroundSize || 'cover',
  objectPosition: props.backgroundPosition || 'center'
}",
          "type": "single",
        },
      },
      "children": [],
      "meta": {},
      "name": "img",
      "properties": {},
      "scope": {},
    },
  ],
  "context": {
    "get": {},
    "set": {},
  },
  "exports": {},
  "hooks": {
    "onEvent": [],
    "onMount": [],
  },
  "imports": [
    {
      "importKind": "value",
      "imports": {
        "Builder": "Builder",
      },
      "path": "@builder.io/sdk",
    },
  ],
  "inputs": [],
  "meta": {},
  "name": "ImgComponent",
  "propsTypeRef": "ImgProps",
  "refs": {},
  "state": {},
  "subComponents": [],
  "types": [
    "export interface ImgProps {
  attributes?: any;
  imgSrc?: string;
  altText?: string;
  backgroundSize?: 'cover' | 'contain';
  backgroundPosition?: 'center' | 'top' | 'left' | 'right' | 'bottom' | 'top left' | 'top right' | 'bottom left' | 'bottom right';
}",
  ],
}
`;

exports[`Parse JSX > Typescript > Input 1`] = `
{
  "@type": "@builder.io/mitosis/component",
  "children": [
    {
      "@type": "@builder.io/mitosis/node",
      "bindings": {
        "defaultValue": {
          "bindingType": "expression",
          "code": "props.defaultValue",
          "type": "single",
        },
        "key": {
          "bindingType": "expression",
          "code": "Builder.isEditing && props.defaultValue ? props.defaultValue : 'default-key'",
          "type": "single",
        },
        "name": {
          "bindingType": "expression",
          "code": "props.name",
          "type": "single",
        },
        "onChange": {
          "arguments": [
            "event",
          ],
          "bindingType": "function",
          "code": "props.onChange?.(event.target.value)",
          "type": "single",
        },
        "placeholder": {
          "bindingType": "expression",
          "code": "props.placeholder",
          "type": "single",
        },
        "props.attributes": {
          "code": "props.attributes",
          "spreadType": "normal",
          "type": "spread",
        },
        "required": {
          "bindingType": "expression",
          "code": "props.required",
          "type": "single",
        },
        "type": {
          "bindingType": "expression",
          "code": "props.type",
          "type": "single",
        },
        "value": {
          "bindingType": "expression",
          "code": "props.value",
          "type": "single",
        },
      },
      "children": [],
      "meta": {},
      "name": "input",
      "properties": {},
      "scope": {},
    },
  ],
  "context": {
    "get": {},
    "set": {},
  },
  "exports": {},
  "hooks": {
    "onEvent": [],
    "onMount": [],
  },
  "imports": [
    {
      "importKind": "value",
      "imports": {
        "Builder": "Builder",
      },
      "path": "@builder.io/sdk",
    },
  ],
  "inputs": [],
  "meta": {},
  "name": "FormInputComponent",
  "propsTypeRef": "FormInputProps",
  "refs": {},
  "state": {},
  "subComponents": [],
  "types": [
    "export interface FormInputProps {
  type?: string;
  attributes?: any;
  name?: string;
  value?: string;
  placeholder?: string;
  defaultValue?: string;
  required?: boolean;
  onChange?: (value: string) => void;
}",
  ],
}
`;

exports[`Parse JSX > Typescript > InputParent 1`] = `
{
  "@type": "@builder.io/mitosis/component",
  "children": [
    {
      "@type": "@builder.io/mitosis/node",
      "bindings": {
        "onChange": {
          "arguments": [
            "value",
          ],
          "bindingType": "function",
          "code": "state.handleChange(value)",
          "type": "single",
        },
      },
      "children": [],
      "meta": {},
      "name": "FormInputComponent",
      "properties": {
        "name": "kingzez",
        "type": "text",
      },
      "scope": {},
    },
  ],
  "context": {
    "get": {},
    "set": {},
  },
  "exports": {},
  "hooks": {
    "onEvent": [],
    "onMount": [],
  },
  "imports": [
    {
      "importKind": "value",
      "imports": {
        "FormInputComponent": "default",
      },
      "path": "./input.raw",
    },
  ],
  "inputs": [],
  "meta": {},
  "name": "Stepper",
  "refs": {},
  "state": {
    "handleChange": {
      "code": "handleChange(value: string) {
  console.log(value);
}",
      "type": "method",
    },
  },
  "subComponents": [],
}
`;

exports[`Parse JSX > Typescript > NestedStore 1`] = `
{
  "@type": "@builder.io/mitosis/component",
  "children": [
    {
      "@type": "@builder.io/mitosis/node",
      "bindings": {
        "id": {
          "bindingType": "expression",
          "code": "state._id",
          "type": "single",
        },
      },
      "children": [
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {},
          "children": [],
          "meta": {},
          "name": "div",
          "properties": {
            "_text": "
      Test
      ",
          },
          "scope": {},
        },
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {
            "id": {
              "bindingType": "expression",
              "code": "state._messageId",
              "type": "single",
            },
          },
          "children": [
            {
              "@type": "@builder.io/mitosis/node",
              "bindings": {},
              "children": [],
              "meta": {},
              "name": "div",
              "properties": {
                "_text": "Message",
              },
              "scope": {},
            },
          ],
          "meta": {},
          "name": "p",
          "properties": {},
          "scope": {},
        },
      ],
      "meta": {},
      "name": "div",
      "properties": {},
      "scope": {},
    },
  ],
  "context": {
    "get": {},
    "set": {},
  },
  "exports": {},
  "hooks": {
    "onEvent": [],
    "onMount": [],
  },
  "imports": [],
  "inputs": [],
  "meta": {},
  "name": "NestedStore",
  "refs": {},
  "state": {
    "_id": {
      "code": "\\"abc\\"",
      "propertyType": "normal",
      "type": "property",
      "typeParameter": "MyStore[\\"_id\\"]",
    },
    "_messageId": {
      "code": "state._id + \\"-message\\"",
      "propertyType": "normal",
      "type": "property",
      "typeParameter": "MyStore[\\"_messageId\\"]",
    },
  },
  "subComponents": [],
  "types": [
    "type MyStore = {
  _id?: string;
  _messageId?: string;
}",
  ],
}
`;

exports[`Parse JSX > Typescript > RawText 1`] = `
{
  "@type": "@builder.io/mitosis/component",
  "children": [
    {
      "@type": "@builder.io/mitosis/node",
      "bindings": {
        "class": {
          "bindingType": "expression",
          "code": "props.attributes?.class || props.attributes?.className",
          "type": "single",
        },
        "innerHTML": {
          "bindingType": "expression",
          "code": "props.text || ''",
          "type": "single",
        },
      },
      "children": [],
      "meta": {},
      "name": "span",
      "properties": {},
      "scope": {},
    },
  ],
  "context": {
    "get": {},
    "set": {},
  },
  "exports": {},
  "hooks": {
    "onEvent": [],
    "onMount": [],
  },
  "imports": [],
  "inputs": [],
  "meta": {},
  "name": "RawText",
  "propsTypeRef": "RawTextProps",
  "refs": {},
  "state": {},
  "subComponents": [],
  "types": [
    "export interface RawTextProps {
  attributes?: any;
  text?: string; // builderBlock?: any;

}",
  ],
}
`;

exports[`Parse JSX > Typescript > Section 1`] = `
{
  "@type": "@builder.io/mitosis/component",
  "children": [
    {
      "@type": "@builder.io/mitosis/node",
      "bindings": {
        "props.attributes": {
          "code": "props.attributes",
          "spreadType": "normal",
          "type": "spread",
        },
        "style": {
          "bindingType": "expression",
          "code": "props.maxWidth && typeof props.maxWidth === 'number' ? {
  maxWidth: props.maxWidth
} : undefined",
          "type": "single",
        },
      },
      "children": [
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {
            "_text": {
              "bindingType": "expression",
              "code": "props.children",
              "type": "single",
            },
          },
          "children": [],
          "meta": {},
          "name": "div",
          "properties": {},
          "scope": {},
        },
      ],
      "meta": {},
      "name": "section",
      "properties": {},
      "scope": {},
    },
  ],
  "context": {
    "get": {},
    "set": {},
  },
  "exports": {},
  "hooks": {
    "onEvent": [],
    "onMount": [],
  },
  "imports": [],
  "inputs": [],
  "meta": {},
  "name": "SectionComponent",
  "propsTypeRef": "SectionProps",
  "refs": {},
  "state": {},
  "subComponents": [],
  "types": [
    "export interface SectionProps {
  maxWidth?: number;
  attributes?: any;
  children?: any;
}",
  ],
}
`;

exports[`Parse JSX > Typescript > Section 2`] = `
{
  "@type": "@builder.io/mitosis/component",
  "children": [
    {
      "@type": "@builder.io/mitosis/node",
      "bindings": {
        "when": {
          "bindingType": "expression",
          "code": "state.max",
          "type": "single",
        },
      },
      "children": [
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {
            "each": {
              "bindingType": "expression",
              "code": "state.items",
              "type": "single",
            },
          },
          "children": [
            {
              "@type": "@builder.io/mitosis/node",
              "bindings": {
                "props.attributes": {
                  "code": "props.attributes",
                  "spreadType": "normal",
                  "type": "spread",
                },
                "style": {
                  "bindingType": "expression",
                  "code": "{
  maxWidth: item + state.max
}",
                  "type": "single",
                },
              },
              "children": [
                {
                  "@type": "@builder.io/mitosis/node",
                  "bindings": {
                    "_text": {
                      "bindingType": "expression",
                      "code": "props.children",
                      "type": "single",
                    },
                  },
                  "children": [],
                  "meta": {},
                  "name": "div",
                  "properties": {},
                  "scope": {},
                },
              ],
              "meta": {},
              "name": "section",
              "properties": {},
              "scope": {},
            },
          ],
          "meta": {},
          "name": "For",
          "properties": {},
          "scope": {
            "forName": "item",
          },
        },
      ],
      "meta": {},
      "name": "Show",
      "properties": {},
      "scope": {},
    },
  ],
  "context": {
    "get": {},
    "set": {},
  },
  "exports": {},
  "hooks": {
    "onEvent": [],
    "onMount": [],
  },
  "imports": [],
  "inputs": [],
  "meta": {},
  "name": "SectionStateComponent",
  "propsTypeRef": "SectionProps",
  "refs": {},
  "state": {
    "items": {
      "code": "[42]",
      "propertyType": "normal",
      "type": "property",
    },
    "max": {
      "code": "42",
      "propertyType": "normal",
      "type": "property",
    },
  },
  "subComponents": [],
  "types": [
    "export interface SectionProps {
  maxWidth?: number;
  attributes?: any;
  children?: any;
}",
  ],
}
`;

exports[`Parse JSX > Typescript > Select 1`] = `
{
  "@type": "@builder.io/mitosis/component",
  "children": [
    {
      "@type": "@builder.io/mitosis/node",
      "bindings": {
        "defaultValue": {
          "bindingType": "expression",
          "code": "props.defaultValue",
          "type": "single",
        },
        "key": {
          "bindingType": "expression",
          "code": "Builder.isEditing && props.defaultValue ? props.defaultValue : 'default-key'",
          "type": "single",
        },
        "name": {
          "bindingType": "expression",
          "code": "props.name",
          "type": "single",
        },
        "props.attributes": {
          "code": "props.attributes",
          "spreadType": "normal",
          "type": "spread",
        },
        "value": {
          "bindingType": "expression",
          "code": "props.value",
          "type": "single",
        },
      },
      "children": [
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {
            "each": {
              "bindingType": "expression",
              "code": "props.options",
              "type": "single",
            },
          },
          "children": [
            {
              "@type": "@builder.io/mitosis/node",
              "bindings": {
                "data-index": {
                  "bindingType": "expression",
                  "code": "index",
                  "type": "single",
                },
                "value": {
                  "bindingType": "expression",
                  "code": "option.value",
                  "type": "single",
                },
              },
              "children": [
                {
                  "@type": "@builder.io/mitosis/node",
                  "bindings": {
                    "_text": {
                      "bindingType": "expression",
                      "code": "option.name || option.value",
                      "type": "single",
                    },
                  },
                  "children": [],
                  "meta": {},
                  "name": "div",
                  "properties": {},
                  "scope": {},
                },
              ],
              "meta": {},
              "name": "option",
              "properties": {},
              "scope": {},
            },
          ],
          "meta": {},
          "name": "For",
          "properties": {},
          "scope": {
            "forName": "option",
            "indexName": "index",
          },
        },
      ],
      "meta": {},
      "name": "select",
      "properties": {},
      "scope": {},
    },
  ],
  "context": {
    "get": {},
    "set": {},
  },
  "exports": {},
  "hooks": {
    "onEvent": [],
    "onMount": [],
  },
  "imports": [
    {
      "importKind": "value",
      "imports": {
        "Builder": "Builder",
      },
      "path": "@builder.io/sdk",
    },
  ],
  "inputs": [],
  "meta": {},
  "name": "SelectComponent",
  "propsTypeRef": "FormSelectProps",
  "refs": {},
  "state": {},
  "subComponents": [],
  "types": [
    "export interface FormSelectProps {
  options?: {
    name?: string;
    value: string;
  }[];
  attributes?: any;
  name?: string;
  value?: string;
  defaultValue?: string;
}",
  ],
}
`;

exports[`Parse JSX > Typescript > SlotDefault 1`] = `
{
  "@type": "@builder.io/mitosis/component",
  "children": [
    {
      "@type": "@builder.io/mitosis/node",
      "bindings": {},
      "children": [
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {},
          "children": [
            {
              "@type": "@builder.io/mitosis/node",
              "bindings": {},
              "children": [
                {
                  "@type": "@builder.io/mitosis/node",
                  "bindings": {},
                  "children": [],
                  "meta": {},
                  "name": "div",
                  "properties": {
                    "_text": "Default content",
                  },
                  "scope": {},
                },
              ],
              "meta": {},
              "name": "div",
              "properties": {
                "class": "default-slot",
              },
              "scope": {},
            },
          ],
          "meta": {},
          "name": "Slot",
          "properties": {},
          "scope": {},
        },
      ],
      "meta": {},
      "name": "div",
      "properties": {},
      "scope": {},
    },
  ],
  "context": {
    "get": {},
    "set": {},
  },
  "exports": {},
  "hooks": {
    "onEvent": [],
    "onMount": [],
  },
  "imports": [],
  "inputs": [],
  "meta": {},
  "name": "SlotCode",
  "propsTypeRef": "Props",
  "refs": {},
  "state": {},
  "subComponents": [],
  "types": [
    "type Props = {
  [key: string]: string;
}",
  ],
}
`;

exports[`Parse JSX > Typescript > SlotHtml 1`] = `
{
  "@type": "@builder.io/mitosis/component",
  "children": [
    {
      "@type": "@builder.io/mitosis/node",
      "bindings": {},
      "children": [
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {},
          "children": [
            {
              "@type": "@builder.io/mitosis/node",
              "bindings": {
                "testing": {
                  "bindingType": "expression",
                  "code": "<div>Hello</div>",
                  "type": "single",
                },
              },
              "children": [],
              "meta": {},
              "name": "Slot",
              "properties": {},
              "scope": {},
              "slots": {
                "testing": [
                  {
                    "@type": "@builder.io/mitosis/node",
                    "bindings": {},
                    "children": [
                      {
                        "@type": "@builder.io/mitosis/node",
                        "bindings": {},
                        "children": [],
                        "meta": {},
                        "name": "div",
                        "properties": {
                          "_text": "Hello",
                        },
                        "scope": {},
                      },
                    ],
                    "meta": {},
                    "name": "div",
                    "properties": {},
                    "scope": {},
                  },
                ],
              },
            },
          ],
          "meta": {},
          "name": "ContentSlotCode",
          "properties": {},
          "scope": {},
        },
      ],
      "meta": {},
      "name": "div",
      "properties": {},
      "scope": {},
    },
  ],
  "context": {
    "get": {},
    "set": {},
  },
  "exports": {},
  "hooks": {
    "onEvent": [],
    "onMount": [],
  },
  "imports": [
    {
      "importKind": "value",
      "imports": {
        "ContentSlotCode": "default",
      },
      "path": "./content-slot-jsx.raw",
    },
  ],
  "inputs": [],
  "meta": {},
  "name": "SlotCode",
  "propsTypeRef": "Props",
  "refs": {},
  "state": {},
  "subComponents": [],
  "types": [
    "type Props = {
  [key: string]: string;
}",
  ],
}
`;

exports[`Parse JSX > Typescript > SlotJsx 1`] = `
{
  "@type": "@builder.io/mitosis/component",
  "children": [
    {
      "@type": "@builder.io/mitosis/node",
      "bindings": {},
      "children": [
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {
            "slotTesting": {
              "bindingType": "expression",
              "code": "<div>Hello</div>",
              "type": "single",
            },
          },
          "children": [],
          "meta": {},
          "name": "ContentSlotCode",
          "properties": {},
          "scope": {},
          "slots": {
            "slotTesting": [
              {
                "@type": "@builder.io/mitosis/node",
                "bindings": {},
                "children": [
                  {
                    "@type": "@builder.io/mitosis/node",
                    "bindings": {},
                    "children": [],
                    "meta": {},
                    "name": "div",
                    "properties": {
                      "_text": "Hello",
                    },
                    "scope": {},
                  },
                ],
                "meta": {},
                "name": "div",
                "properties": {},
                "scope": {},
              },
            ],
          },
        },
      ],
      "meta": {},
      "name": "div",
      "properties": {},
      "scope": {},
    },
  ],
  "context": {
    "get": {},
    "set": {},
  },
  "exports": {},
  "hooks": {
    "onEvent": [],
    "onMount": [],
  },
  "imports": [
    {
      "importKind": "value",
      "imports": {
        "ContentSlotCode": "default",
      },
      "path": "./content-slot-jsx.raw",
    },
  ],
  "inputs": [],
  "meta": {},
  "name": "SlotCode",
  "propsTypeRef": "Props",
  "refs": {},
  "state": {},
  "subComponents": [],
  "types": [
    "type Props = {
  [key: string]: string;
}",
  ],
}
`;

exports[`Parse JSX > Typescript > SlotNamed 1`] = `
{
  "@type": "@builder.io/mitosis/component",
  "children": [
    {
      "@type": "@builder.io/mitosis/node",
      "bindings": {},
      "children": [
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {},
          "children": [],
          "meta": {},
          "name": "Slot",
          "properties": {
            "name": "myAwesomeSlot",
          },
          "scope": {},
        },
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {},
          "children": [],
          "meta": {},
          "name": "Slot",
          "properties": {
            "name": "top",
          },
          "scope": {},
        },
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {},
          "children": [
            {
              "@type": "@builder.io/mitosis/node",
              "bindings": {},
              "children": [],
              "meta": {},
              "name": "div",
              "properties": {
                "_text": "Default left",
              },
              "scope": {},
            },
          ],
          "meta": {},
          "name": "Slot",
          "properties": {
            "name": "left",
          },
          "scope": {},
        },
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {},
          "children": [
            {
              "@type": "@builder.io/mitosis/node",
              "bindings": {},
              "children": [],
              "meta": {},
              "name": "div",
              "properties": {
                "_text": "Default Child",
              },
              "scope": {},
            },
          ],
          "meta": {},
          "name": "Slot",
          "properties": {},
          "scope": {},
        },
      ],
      "meta": {},
      "name": "div",
      "properties": {},
      "scope": {},
    },
  ],
  "context": {
    "get": {},
    "set": {},
  },
  "exports": {},
  "hooks": {
    "onEvent": [],
    "onMount": [],
  },
  "imports": [],
  "inputs": [],
  "meta": {},
  "name": "SlotCode",
  "propsTypeRef": "Props",
  "refs": {},
  "state": {},
  "subComponents": [],
  "types": [
    "type Props = {
  [key: string]: string;
}",
  ],
}
`;

exports[`Parse JSX > Typescript > Stamped.io 1`] = `
{
  "@type": "@builder.io/mitosis/component",
  "children": [
    {
      "@type": "@builder.io/mitosis/node",
      "bindings": {
        "data-user": {
          "bindingType": "expression",
          "code": "state.name",
          "type": "single",
        },
      },
      "children": [
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {
            "onClick": {
              "bindingType": "function",
              "code": "state.showReviewPrompt = true",
              "type": "single",
            },
          },
          "children": [
            {
              "@type": "@builder.io/mitosis/node",
              "bindings": {},
              "children": [],
              "meta": {},
              "name": "div",
              "properties": {
                "_text": "Write a review",
              },
              "scope": {},
            },
          ],
          "meta": {},
          "name": "button",
          "properties": {},
          "scope": {},
        },
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {
            "when": {
              "bindingType": "expression",
              "code": "state.showReviewPrompt || 'asdf'",
              "type": "single",
            },
          },
          "children": [
            {
              "@type": "@builder.io/mitosis/node",
              "bindings": {},
              "children": [],
              "meta": {},
              "name": "input",
              "properties": {
                "placeholder": "Email",
              },
              "scope": {},
            },
            {
              "@type": "@builder.io/mitosis/node",
              "bindings": {
                "css": {
                  "bindingType": "expression",
                  "code": "{
  display: 'block'
}",
                  "type": "single",
                },
              },
              "children": [],
              "meta": {},
              "name": "input",
              "properties": {
                "placeholder": "Title",
              },
              "scope": {},
            },
            {
              "@type": "@builder.io/mitosis/node",
              "bindings": {
                "css": {
                  "bindingType": "expression",
                  "code": "{
  display: 'block'
}",
                  "type": "single",
                },
              },
              "children": [],
              "meta": {},
              "name": "textarea",
              "properties": {
                "placeholder": "How was your experience?",
              },
              "scope": {},
            },
            {
              "@type": "@builder.io/mitosis/node",
              "bindings": {
                "css": {
                  "bindingType": "expression",
                  "code": "{
  display: 'block'
}",
                  "type": "single",
                },
                "onClick": {
                  "arguments": [
                    "ev",
                  ],
                  "bindingType": "function",
                  "code": "{
  ev.preventDefault();
  state.showReviewPrompt = false;
}",
                  "type": "single",
                },
              },
              "children": [
                {
                  "@type": "@builder.io/mitosis/node",
                  "bindings": {},
                  "children": [],
                  "meta": {},
                  "name": "div",
                  "properties": {
                    "_text": "
          Submit
        ",
                  },
                  "scope": {},
                },
              ],
              "meta": {},
              "name": "button",
              "properties": {},
              "scope": {},
            },
          ],
          "meta": {},
          "name": "Show",
          "properties": {},
          "scope": {},
        },
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {
            "each": {
              "bindingType": "expression",
              "code": "state.reviews",
              "type": "single",
            },
          },
          "children": [
            {
              "@type": "@builder.io/mitosis/node",
              "bindings": {
                "css": {
                  "bindingType": "expression",
                  "code": "{
  margin: '10px',
  padding: '10px',
  background: 'white',
  display: 'flex',
  borderRadius: '5px',
  boxShadow: '0 2px 5px rgba(0, 0, 0, 0.1)',
  WebkitFontSmoothing: 'antialiased'
}",
                  "type": "single",
                },
                "key": {
                  "bindingType": "expression",
                  "code": "review.id",
                  "type": "single",
                },
              },
              "children": [
                {
                  "@type": "@builder.io/mitosis/node",
                  "bindings": {
                    "css": {
                      "bindingType": "expression",
                      "code": "{
  height: '30px',
  width: '30px',
  marginRight: '10px'
}",
                      "type": "single",
                    },
                    "src": {
                      "bindingType": "expression",
                      "code": "review.avatar",
                      "type": "single",
                    },
                  },
                  "children": [],
                  "meta": {},
                  "name": "img",
                  "properties": {},
                  "scope": {},
                },
                {
                  "@type": "@builder.io/mitosis/node",
                  "bindings": {
                    "class": {
                      "bindingType": "expression",
                      "code": "state.showReviewPrompt ? 'bg-primary' : 'bg-secondary'",
                      "type": "single",
                    },
                  },
                  "children": [
                    {
                      "@type": "@builder.io/mitosis/node",
                      "bindings": {},
                      "children": [
                        {
                          "@type": "@builder.io/mitosis/node",
                          "bindings": {},
                          "children": [],
                          "meta": {},
                          "name": "div",
                          "properties": {
                            "_text": "N: ",
                          },
                          "scope": {},
                        },
                        {
                          "@type": "@builder.io/mitosis/node",
                          "bindings": {
                            "_text": {
                              "bindingType": "expression",
                              "code": "index",
                              "type": "single",
                            },
                          },
                          "children": [],
                          "meta": {},
                          "name": "div",
                          "properties": {},
                          "scope": {},
                        },
                      ],
                      "meta": {},
                      "name": "div",
                      "properties": {},
                      "scope": {},
                    },
                    {
                      "@type": "@builder.io/mitosis/node",
                      "bindings": {},
                      "children": [
                        {
                          "@type": "@builder.io/mitosis/node",
                          "bindings": {
                            "_text": {
                              "bindingType": "expression",
                              "code": "review.author",
                              "type": "single",
                            },
                          },
                          "children": [],
                          "meta": {},
                          "name": "div",
                          "properties": {},
                          "scope": {},
                        },
                      ],
                      "meta": {},
                      "name": "div",
                      "properties": {},
                      "scope": {},
                    },
                    {
                      "@type": "@builder.io/mitosis/node",
                      "bindings": {},
                      "children": [
                        {
                          "@type": "@builder.io/mitosis/node",
                          "bindings": {
                            "_text": {
                              "bindingType": "expression",
                              "code": "review.reviewMessage",
                              "type": "single",
                            },
                          },
                          "children": [],
                          "meta": {},
                          "name": "div",
                          "properties": {},
                          "scope": {},
                        },
                      ],
                      "meta": {},
                      "name": "div",
                      "properties": {},
                      "scope": {},
                    },
                  ],
                  "meta": {},
                  "name": "div",
                  "properties": {},
                  "scope": {},
                },
              ],
              "meta": {},
              "name": "div",
              "properties": {
                "$name": "Review",
              },
              "scope": {},
            },
          ],
          "meta": {},
          "name": "For",
          "properties": {},
          "scope": {
            "forName": "review",
            "indexName": "index",
          },
        },
      ],
      "meta": {},
      "name": "div",
      "properties": {},
      "scope": {},
    },
  ],
  "context": {
    "get": {},
    "set": {},
  },
  "exports": {},
  "hooks": {
    "onEvent": [],
    "onMount": [
      {
        "code": "fetch(\`https://stamped.io/api/widget/reviews?storeUrl=builder-io.myshopify.com&apiKey=\${props.apiKey || 'pubkey-8bbDq7W6w4sB3OWeM1HUy2s47702hM'}&productId=\${props.productId || '2410511106127'}\`).then(res => res.json()).then(data => {
  state.reviews = data.data;
})",
        "onSSR": false,
      },
    ],
  },
  "imports": [
    {
      "importKind": "value",
      "imports": {
        "kebabCase": "kebabCase",
        "snakeCase": "snakeCase",
      },
      "path": "lodash",
    },
  ],
  "inputs": [],
  "meta": {},
  "name": "SmileReviews",
  "propsTypeRef": "SmileReviewsProps",
  "refs": {},
  "state": {
    "kebabCaseValue": {
      "code": "kebabCaseValue() {
  return kebabCase('testThat');
}",
      "type": "method",
    },
    "name": {
      "code": "'test'",
      "propertyType": "normal",
      "type": "property",
    },
    "reviews": {
      "code": "[]",
      "propertyType": "normal",
      "type": "property",
    },
    "showReviewPrompt": {
      "code": "false",
      "propertyType": "normal",
      "type": "property",
    },
    "snakeCaseValue": {
      "code": "snakeCaseValue() {
  return snakeCase('testThis');
}",
      "type": "method",
    },
  },
  "subComponents": [],
  "types": [
    "type SmileReviewsProps = {
  productId: string;
  apiKey: string;
}",
  ],
}
`;

exports[`Parse JSX > Typescript > StoreComment 1`] = `
{
  "@type": "@builder.io/mitosis/component",
  "children": [
    {
      "@type": "@builder.io/mitosis/node",
      "bindings": {},
      "children": [
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {
            "_text": {
              "bindingType": "expression",
              "code": "state.foo",
              "type": "single",
            },
          },
          "children": [],
          "meta": {},
          "name": "div",
          "properties": {},
          "scope": {},
        },
      ],
      "meta": {},
      "name": "Fragment",
      "properties": {},
      "scope": {},
    },
  ],
  "context": {
    "get": {},
    "set": {},
  },
  "exports": {},
  "hooks": {
    "onEvent": [],
    "onMount": [],
  },
  "imports": [],
  "inputs": [],
  "meta": {},
  "name": "StringLiteralStore",
  "refs": {},
  "state": {
    "bar": {
      "code": "bar() {}",
      "type": "method",
    },
    "foo": {
      "code": "true",
      "propertyType": "normal",
      "type": "property",
    },
  },
  "subComponents": [],
}
`;

exports[`Parse JSX > Typescript > StoreShadowVars 1`] = `
{
  "@type": "@builder.io/mitosis/component",
  "children": [
    {
      "@type": "@builder.io/mitosis/node",
      "bindings": {},
      "children": [
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {
            "_text": {
              "bindingType": "expression",
              "code": "state.foo(state.errors)",
              "type": "single",
            },
          },
          "children": [],
          "meta": {},
          "name": "div",
          "properties": {},
          "scope": {},
        },
      ],
      "meta": {},
      "name": "Fragment",
      "properties": {},
      "scope": {},
    },
  ],
  "context": {
    "get": {},
    "set": {},
  },
  "exports": {},
  "hooks": {
    "onEvent": [],
    "onMount": [],
  },
  "imports": [],
  "inputs": [],
  "meta": {},
  "name": "MyComponent",
  "refs": {},
  "state": {
    "errors": {
      "code": "{}",
      "propertyType": "normal",
      "type": "property",
    },
    "foo": {
      "code": "foo(errors) {
  return errors;
}",
      "type": "method",
    },
  },
  "subComponents": [],
}
`;

exports[`Parse JSX > Typescript > StoreWithState 1`] = `
{
  "@type": "@builder.io/mitosis/component",
  "children": [
    {
      "@type": "@builder.io/mitosis/node",
      "bindings": {},
      "children": [
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {
            "_text": {
              "bindingType": "expression",
              "code": "state.bar()",
              "type": "single",
            },
          },
          "children": [],
          "meta": {},
          "name": "div",
          "properties": {},
          "scope": {},
        },
      ],
      "meta": {},
      "name": "Fragment",
      "properties": {},
      "scope": {},
    },
  ],
  "context": {
    "get": {},
    "set": {},
  },
  "exports": {},
  "hooks": {
    "onEvent": [],
    "onMount": [],
  },
  "imports": [],
  "inputs": [],
  "meta": {},
  "name": "MyComponent",
  "refs": {},
  "state": {
    "bar": {
      "code": "bar() {
  return state.foo;
}",
      "type": "method",
    },
    "foo": {
      "code": "false",
      "propertyType": "normal",
      "type": "property",
    },
  },
  "subComponents": [],
}
`;

exports[`Parse JSX > Typescript > Submit 1`] = `
{
  "@type": "@builder.io/mitosis/component",
  "children": [
    {
      "@type": "@builder.io/mitosis/node",
      "bindings": {
        "props.attributes": {
          "code": "props.attributes",
          "spreadType": "normal",
          "type": "spread",
        },
      },
      "children": [
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {
            "_text": {
              "bindingType": "expression",
              "code": "props.text",
              "type": "single",
            },
          },
          "children": [],
          "meta": {},
          "name": "div",
          "properties": {},
          "scope": {},
        },
      ],
      "meta": {},
      "name": "button",
      "properties": {
        "type": "submit",
      },
      "scope": {},
    },
  ],
  "context": {
    "get": {},
    "set": {},
  },
  "exports": {},
  "hooks": {
    "onEvent": [],
    "onMount": [],
  },
  "imports": [],
  "inputs": [],
  "meta": {},
  "name": "SubmitButton",
  "propsTypeRef": "ButtonProps",
  "refs": {},
  "state": {},
  "subComponents": [],
  "types": [
    "export interface ButtonProps {
  attributes?: any;
  text?: string;
}",
  ],
}
`;

exports[`Parse JSX > Typescript > Text 1`] = `
{
  "@type": "@builder.io/mitosis/component",
  "children": [
    {
      "@type": "@builder.io/mitosis/node",
      "bindings": {
        "contentEditable": {
          "bindingType": "expression",
          "code": "allowEditingText || undefined",
          "type": "single",
        },
        "data-name": {
          "bindingType": "expression",
          "code": "{
  test: state.name || 'any name'
}",
          "type": "single",
        },
        "innerHTML": {
          "bindingType": "expression",
          "code": "props.text || props.content || state.name || '<p class=\\"text-lg\\">my name</p>'",
          "type": "single",
        },
      },
      "children": [],
      "meta": {},
      "name": "div",
      "properties": {},
      "scope": {},
    },
  ],
  "context": {
    "get": {},
    "set": {},
  },
  "exports": {},
  "hooks": {
    "onEvent": [],
    "onMount": [],
  },
  "imports": [
    {
      "importKind": "value",
      "imports": {
        "Builder": "Builder",
      },
      "path": "@builder.io/sdk",
    },
  ],
  "inputs": [],
  "meta": {},
  "name": "Text",
  "propsTypeRef": "TextProps",
  "refs": {},
  "state": {
    "name": {
      "code": "'Decadef20'",
      "propertyType": "normal",
      "type": "property",
    },
  },
  "subComponents": [],
  "types": [
    "export interface TextProps {
  attributes?: any;
  rtlMode: boolean;
  text?: string;
  content?: string;
  builderBlock?: any;
}",
  ],
}
`;

exports[`Parse JSX > Typescript > Textarea 1`] = `
{
  "@type": "@builder.io/mitosis/component",
  "children": [
    {
      "@type": "@builder.io/mitosis/node",
      "bindings": {
        "defaultValue": {
          "bindingType": "expression",
          "code": "props.defaultValue",
          "type": "single",
        },
        "name": {
          "bindingType": "expression",
          "code": "props.name",
          "type": "single",
        },
        "placeholder": {
          "bindingType": "expression",
          "code": "props.placeholder",
          "type": "single",
        },
        "props.attributes": {
          "code": "props.attributes",
          "spreadType": "normal",
          "type": "spread",
        },
        "value": {
          "bindingType": "expression",
          "code": "props.value",
          "type": "single",
        },
      },
      "children": [],
      "meta": {},
      "name": "textarea",
      "properties": {},
      "scope": {},
    },
  ],
  "context": {
    "get": {},
    "set": {},
  },
  "exports": {},
  "hooks": {
    "onEvent": [],
    "onMount": [],
  },
  "imports": [],
  "inputs": [],
  "meta": {},
  "name": "Textarea",
  "propsTypeRef": "TextareaProps",
  "refs": {},
  "state": {},
  "subComponents": [],
  "types": [
    "export interface TextareaProps {
  attributes?: any;
  name?: string;
  value?: string;
  defaultValue?: string;
  placeholder?: string;
}",
  ],
}
`;

exports[`Parse JSX > Typescript > UseValueAndFnFromStore 1`] = `
{
  "@type": "@builder.io/mitosis/component",
  "children": [
    {
      "@type": "@builder.io/mitosis/node",
      "bindings": {},
      "children": [
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {},
          "children": [],
          "meta": {},
          "name": "div",
          "properties": {
            "_text": "Test",
          },
          "scope": {},
        },
      ],
      "meta": {},
      "name": "div",
      "properties": {},
      "scope": {},
    },
  ],
  "context": {
    "get": {},
    "set": {},
  },
  "exports": {},
  "hooks": {
    "onEvent": [],
    "onMount": [],
    "onUpdate": [
      {
        "code": "if (state._do) {
  state._do(state._id);
}",
        "deps": "",
        "depsArray": [],
      },
    ],
  },
  "imports": [],
  "inputs": [],
  "meta": {},
  "name": "UseValueAndFnFromStore",
  "propsTypeRef": "MyProps",
  "refs": {},
  "state": {
    "_active": {
      "code": "false",
      "propertyType": "normal",
      "type": "property",
      "typeParameter": "MyStore[\\"_active\\"]",
    },
    "_do": {
      "code": "_do(id?: string) {
  state._active = !!id;

  if (props.onChange) {
    props.onChange(state._active);
  }
}",
      "type": "method",
      "typeParameter": "MyStore[\\"_do\\"]",
    },
    "_id": {
      "code": "'abc'",
      "propertyType": "normal",
      "type": "property",
      "typeParameter": "MyStore[\\"_id\\"]",
    },
  },
  "subComponents": [],
  "types": [
    "type MyProps = {
  onChange?: (active: boolean) => void;
}",
    "type MyStore = {
  _id?: string;
  _active?: boolean;
  _do?: (id?: string) => void;
}",
  ],
}
`;

exports[`Parse JSX > Typescript > Video 1`] = `
{
  "@type": "@builder.io/mitosis/component",
  "children": [
    {
      "@type": "@builder.io/mitosis/node",
      "bindings": {
        "autoplay": {
          "bindingType": "expression",
          "code": "props.autoPlay",
          "type": "single",
        },
        "controls": {
          "bindingType": "expression",
          "code": "props.controls",
          "type": "single",
        },
        "key": {
          "bindingType": "expression",
          "code": "props.video || 'no-src'",
          "type": "single",
        },
        "loop": {
          "bindingType": "expression",
          "code": "props.loop",
          "type": "single",
        },
        "muted": {
          "bindingType": "expression",
          "code": "props.muted",
          "type": "single",
        },
        "poster": {
          "bindingType": "expression",
          "code": "props.posterImage",
          "type": "single",
        },
        "props.attributes": {
          "code": "props.attributes",
          "spreadType": "normal",
          "type": "spread",
        },
        "style": {
          "bindingType": "expression",
          "code": "{
  width: '100%',
  height: '100%',
  ...props.attributes?.style,
  objectFit: props.fit,
  objectPosition: props.position,
  // Hack to get object fit to work as expected and
  // not have the video overflow
  borderRadius: 1
}",
          "type": "single",
        },
      },
      "children": [],
      "meta": {},
      "name": "video",
      "properties": {
        "preload": "none",
      },
      "scope": {},
    },
  ],
  "context": {
    "get": {},
    "set": {},
  },
  "exports": {},
  "hooks": {
    "onEvent": [],
    "onMount": [],
  },
  "imports": [],
  "inputs": [],
  "meta": {},
  "name": "Video",
  "propsTypeRef": "VideoProps",
  "refs": {},
  "state": {},
  "subComponents": [],
  "types": [
    "export interface VideoProps {
  attributes?: any;
  video?: string;
  autoPlay?: boolean;
  controls?: boolean;
  muted?: boolean;
  loop?: boolean;
  playsInline?: boolean;
  aspectRatio?: number;
  width?: number;
  height?: number;
  fit?: 'contain' | 'cover' | 'fill';
  position?: 'center' | 'top' | 'left' | 'right' | 'bottom' | 'top left' | 'top right' | 'bottom left' | 'bottom right';
  posterImage?: string;
  lazyLoad?: boolean;
}",
  ],
}
`;

exports[`Parse JSX > Typescript > arrowFunctionInUseStore 1`] = `
{
  "@type": "@builder.io/mitosis/component",
  "children": [
    {
      "@type": "@builder.io/mitosis/node",
      "bindings": {},
      "children": [
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {},
          "children": [],
          "meta": {},
          "name": "div",
          "properties": {
            "_text": "Hello ",
          },
          "scope": {},
        },
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {
            "_text": {
              "bindingType": "expression",
              "code": "state.name",
              "type": "single",
            },
          },
          "children": [],
          "meta": {},
          "name": "div",
          "properties": {},
          "scope": {},
        },
      ],
      "meta": {},
      "name": "div",
      "properties": {},
      "scope": {},
    },
  ],
  "context": {
    "get": {},
    "set": {},
  },
  "exports": {},
  "hooks": {
    "onEvent": [],
    "onMount": [],
  },
  "imports": [],
  "inputs": [],
  "meta": {},
  "name": "MyComponent",
  "refs": {},
  "state": {
    "name": {
      "code": "'steve'",
      "propertyType": "normal",
      "type": "property",
    },
    "setName": {
      "code": "setName(value) {
  state.name = value;
}",
      "type": "method",
    },
    "updateNameWithArrowFn": {
      "code": "updateNameWithArrowFn(value) {
  state.name = value;
}",
      "type": "method",
    },
  },
  "subComponents": [],
}
`;

exports[`Parse JSX > Typescript > basicForFragment 1`] = `
{
  "@type": "@builder.io/mitosis/component",
  "children": [
    {
      "@type": "@builder.io/mitosis/node",
      "bindings": {},
      "children": [
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {
            "each": {
              "bindingType": "expression",
              "code": "['a', 'b', 'c']",
              "type": "single",
            },
          },
          "children": [
            {
              "@type": "@builder.io/mitosis/node",
              "bindings": {
                "key": {
                  "bindingType": "expression",
                  "code": "\`key-\${option}\`",
                  "type": "single",
                },
              },
              "children": [
                {
                  "@type": "@builder.io/mitosis/node",
                  "bindings": {},
                  "children": [
                    {
                      "@type": "@builder.io/mitosis/node",
                      "bindings": {
                        "_text": {
                          "bindingType": "expression",
                          "code": "option",
                          "type": "single",
                        },
                      },
                      "children": [],
                      "meta": {},
                      "name": "div",
                      "properties": {},
                      "scope": {},
                    },
                  ],
                  "meta": {},
                  "name": "div",
                  "properties": {},
                  "scope": {},
                },
              ],
              "meta": {},
              "name": "Fragment",
              "properties": {},
              "scope": {},
            },
          ],
          "meta": {},
          "name": "For",
          "properties": {},
          "scope": {
            "forName": "option",
          },
        },
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {
            "each": {
              "bindingType": "expression",
              "code": "['a', 'b', 'c']",
              "type": "single",
            },
          },
          "children": [
            {
              "@type": "@builder.io/mitosis/node",
              "bindings": {
                "key": {
                  "bindingType": "expression",
                  "code": "\`\${state.id}-\${option}\`",
                  "type": "single",
                },
              },
              "children": [
                {
                  "@type": "@builder.io/mitosis/node",
                  "bindings": {},
                  "children": [
                    {
                      "@type": "@builder.io/mitosis/node",
                      "bindings": {
                        "_text": {
                          "bindingType": "expression",
                          "code": "option",
                          "type": "single",
                        },
                      },
                      "children": [],
                      "meta": {},
                      "name": "div",
                      "properties": {},
                      "scope": {},
                    },
                  ],
                  "meta": {},
                  "name": "div",
                  "properties": {},
                  "scope": {},
                },
              ],
              "meta": {},
              "name": "Fragment",
              "properties": {},
              "scope": {},
            },
          ],
          "meta": {},
          "name": "For",
          "properties": {},
          "scope": {
            "forName": "option",
          },
        },
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {},
          "children": [
            {
              "@type": "@builder.io/mitosis/node",
              "bindings": {
                "each": {
                  "bindingType": "expression",
                  "code": "['d', 'e', 'f']",
                  "type": "single",
                },
              },
              "children": [
                {
                  "@type": "@builder.io/mitosis/node",
                  "bindings": {
                    "key": {
                      "bindingType": "expression",
                      "code": "\`\${state.id}-\${option}\`",
                      "type": "single",
                    },
                    "value": {
                      "bindingType": "expression",
                      "code": "option",
                      "type": "single",
                    },
                  },
                  "children": [
                    {
                      "@type": "@builder.io/mitosis/node",
                      "bindings": {
                        "_text": {
                          "bindingType": "expression",
                          "code": "option",
                          "type": "single",
                        },
                      },
                      "children": [],
                      "meta": {},
                      "name": "div",
                      "properties": {},
                      "scope": {},
                    },
                  ],
                  "meta": {},
                  "name": "option",
                  "properties": {},
                  "scope": {},
                },
              ],
              "meta": {},
              "name": "For",
              "properties": {},
              "scope": {
                "forName": "option",
              },
            },
          ],
          "meta": {},
          "name": "select",
          "properties": {},
          "scope": {},
        },
      ],
      "meta": {},
      "name": "div",
      "properties": {},
      "scope": {},
    },
  ],
  "context": {
    "get": {},
    "set": {},
  },
  "exports": {},
  "hooks": {
    "onEvent": [],
    "onMount": [],
  },
  "imports": [],
  "inputs": [],
  "meta": {},
  "name": "BasicForFragment",
  "refs": {},
  "state": {
    "id": {
      "code": "'xyz'",
      "propertyType": "normal",
      "type": "property",
    },
  },
  "subComponents": [],
}
`;

exports[`Parse JSX > Typescript > basicForNoTagReference 1`] = `
{
  "@type": "@builder.io/mitosis/component",
  "children": [
    {
      "@type": "@builder.io/mitosis/node",
      "bindings": {},
      "children": [
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {},
          "children": [],
          "meta": {},
          "name": "div",
          "properties": {
            "_text": "
      Hello ",
          },
          "scope": {},
        },
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {},
          "children": [
            {
              "@type": "@builder.io/mitosis/node",
              "bindings": {
                "_text": {
                  "bindingType": "expression",
                  "code": "state.name",
                  "type": "single",
                },
              },
              "children": [],
              "meta": {},
              "name": "div",
              "properties": {},
              "scope": {},
            },
          ],
          "meta": {},
          "name": "state.tag",
          "properties": {},
          "scope": {},
        },
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {
            "each": {
              "bindingType": "expression",
              "code": "props.actions",
              "type": "single",
            },
          },
          "children": [
            {
              "@type": "@builder.io/mitosis/node",
              "bindings": {},
              "children": [
                {
                  "@type": "@builder.io/mitosis/node",
                  "bindings": {},
                  "children": [],
                  "meta": {},
                  "name": "action.icon",
                  "properties": {},
                  "scope": {},
                },
                {
                  "@type": "@builder.io/mitosis/node",
                  "bindings": {},
                  "children": [
                    {
                      "@type": "@builder.io/mitosis/node",
                      "bindings": {
                        "_text": {
                          "bindingType": "expression",
                          "code": "action.text",
                          "type": "single",
                        },
                      },
                      "children": [],
                      "meta": {},
                      "name": "div",
                      "properties": {},
                      "scope": {},
                    },
                  ],
                  "meta": {},
                  "name": "span",
                  "properties": {},
                  "scope": {},
                },
              ],
              "meta": {},
              "name": "state.TagName",
              "properties": {},
              "scope": {},
            },
          ],
          "meta": {},
          "name": "For",
          "properties": {},
          "scope": {
            "forName": "action",
          },
        },
      ],
      "meta": {},
      "name": "state.TagNameGetter",
      "properties": {},
      "scope": {},
    },
  ],
  "context": {
    "get": {},
    "set": {},
  },
  "exports": {},
  "hooks": {
    "onEvent": [],
    "onMount": [],
  },
  "imports": [],
  "inputs": [],
  "meta": {},
  "name": "MyBasicForNoTagRefComponent",
  "refs": {},
  "state": {
    "TagName": {
      "code": "'div'",
      "propertyType": "normal",
      "type": "property",
    },
    "TagNameGetter": {
      "code": "get TagNameGetter() {
  return 'span';
}",
      "type": "getter",
    },
    "name": {
      "code": "'VincentW'",
      "propertyType": "normal",
      "type": "property",
    },
    "tag": {
      "code": "'span'",
      "propertyType": "normal",
      "type": "property",
    },
  },
  "subComponents": [],
}
`;

exports[`Parse JSX > Typescript > basicForwardRef 1`] = `
{
  "@type": "@builder.io/mitosis/component",
  "children": [
    {
      "@type": "@builder.io/mitosis/node",
      "bindings": {},
      "children": [
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {
            "css": {
              "bindingType": "expression",
              "code": "{
  color: 'red'
}",
              "type": "single",
            },
            "onChange": {
              "arguments": [
                "event",
              ],
              "bindingType": "function",
              "code": "state.name = event.target.value",
              "type": "single",
            },
            "ref": {
              "bindingType": "expression",
              "code": "props.inputRef",
              "type": "single",
            },
            "value": {
              "bindingType": "expression",
              "code": "state.name",
              "type": "single",
            },
          },
          "children": [],
          "meta": {},
          "name": "input",
          "properties": {},
          "scope": {},
        },
      ],
      "meta": {},
      "name": "div",
      "properties": {},
      "scope": {},
    },
  ],
  "context": {
    "get": {},
    "set": {},
  },
  "exports": {},
  "hooks": {
    "onEvent": [],
    "onMount": [],
  },
  "imports": [],
  "inputs": [],
  "meta": {},
  "name": "MyBasicForwardRefComponent",
  "propsTypeRef": "Props",
  "refs": {},
  "state": {
    "name": {
      "code": "'PatrickJS'",
      "propertyType": "normal",
      "type": "property",
    },
  },
  "subComponents": [],
  "types": [
    "export interface Props {
  showInput: boolean;
  inputRef: HTMLInputElement;
}",
  ],
}
`;

exports[`Parse JSX > Typescript > basicForwardRefMetadata 1`] = `
{
  "@type": "@builder.io/mitosis/component",
  "children": [
    {
      "@type": "@builder.io/mitosis/node",
      "bindings": {},
      "children": [
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {
            "css": {
              "bindingType": "expression",
              "code": "{
  color: 'red'
}",
              "type": "single",
            },
            "onChange": {
              "arguments": [
                "event",
              ],
              "bindingType": "function",
              "code": "state.name = event.target.value",
              "type": "single",
            },
            "ref": {
              "bindingType": "expression",
              "code": "props.inputRef",
              "type": "single",
            },
            "value": {
              "bindingType": "expression",
              "code": "state.name",
              "type": "single",
            },
          },
          "children": [],
          "meta": {},
          "name": "input",
          "properties": {},
          "scope": {},
        },
      ],
      "meta": {},
      "name": "div",
      "properties": {},
      "scope": {},
    },
  ],
  "context": {
    "get": {},
    "set": {},
  },
  "exports": {},
  "hooks": {
    "onEvent": [],
    "onMount": [],
  },
  "imports": [],
  "inputs": [],
  "meta": {
    "useMetadata": {
      "forwardRef": "inputRef",
    },
  },
  "name": "MyBasicForwardRefComponent",
  "propsTypeRef": "Props",
  "refs": {},
  "state": {
    "name": {
      "code": "'PatrickJS'",
      "propertyType": "normal",
      "type": "property",
    },
  },
  "subComponents": [],
  "types": [
    "export interface Props {
  showInput: boolean;
  inputRef: HTMLInputElement;
}",
  ],
}
`;

exports[`Parse JSX > Typescript > basicOnUpdateReturn 1`] = `
{
  "@type": "@builder.io/mitosis/component",
  "children": [
    {
      "@type": "@builder.io/mitosis/node",
      "bindings": {},
      "children": [
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {},
          "children": [],
          "meta": {},
          "name": "div",
          "properties": {
            "_text": "Hello! ",
          },
          "scope": {},
        },
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {
            "_text": {
              "bindingType": "expression",
              "code": "state.name",
              "type": "single",
            },
          },
          "children": [],
          "meta": {},
          "name": "div",
          "properties": {},
          "scope": {},
        },
      ],
      "meta": {},
      "name": "div",
      "properties": {},
      "scope": {},
    },
  ],
  "context": {
    "get": {},
    "set": {},
  },
  "exports": {},
  "hooks": {
    "onEvent": [],
    "onMount": [],
    "onUpdate": [
      {
        "code": "const controller = new AbortController();
const signal = controller.signal;
fetch('https://patrickjs.com/api/resource.json', {
  signal
}).then(response => response.json()).then(data => {
  state.name = data.name;
});
return () => {
  if (!signal.aborted) {
    controller.abort();
  }
}",
        "deps": "[state.name]",
        "depsArray": [
          "state.name",
        ],
      },
    ],
  },
  "imports": [],
  "inputs": [],
  "meta": {},
  "name": "MyBasicOnUpdateReturnComponent",
  "refs": {},
  "state": {
    "name": {
      "code": "'PatrickJS'",
      "propertyType": "normal",
      "type": "property",
    },
  },
  "subComponents": [],
}
`;

exports[`Parse JSX > Typescript > basicRefAttributePassing 1`] = `
{
  "@type": "@builder.io/mitosis/component",
  "children": [
    {
      "@type": "@builder.io/mitosis/node",
      "bindings": {
        "ref": {
          "bindingType": "expression",
          "code": "buttonRef",
          "type": "single",
        },
      },
      "children": [
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {},
          "children": [],
          "meta": {},
          "name": "div",
          "properties": {
            "_text": "Attribute Passing",
          },
          "scope": {},
        },
      ],
      "meta": {},
      "name": "button",
      "properties": {},
      "scope": {},
    },
  ],
  "context": {
    "get": {},
    "set": {},
  },
  "exports": {},
  "hooks": {
    "onEvent": [],
    "onMount": [
      {
        "code": "console.log('onMount')",
        "onSSR": false,
      },
    ],
  },
  "imports": [],
  "inputs": [],
  "meta": {
    "useMetadata": {
      "attributePassing": {
        "enabled": true,
      },
    },
  },
  "name": "BasicRefAttributePassingComponent",
  "refs": {
    "buttonRef": {
      "argument": "null",
      "typeParameter": "HTMLButtonElement | null",
    },
  },
  "state": {},
  "subComponents": [],
}
`;

exports[`Parse JSX > Typescript > basicRefAttributePassingCustomRef 1`] = `
{
  "@type": "@builder.io/mitosis/component",
  "children": [
    {
      "@type": "@builder.io/mitosis/node",
      "bindings": {},
      "children": [
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {
            "ref": {
              "bindingType": "expression",
              "code": "buttonRef",
              "type": "single",
            },
          },
          "children": [
            {
              "@type": "@builder.io/mitosis/node",
              "bindings": {},
              "children": [],
              "meta": {},
              "name": "div",
              "properties": {
                "_text": "Attribute Passing",
              },
              "scope": {},
            },
          ],
          "meta": {},
          "name": "button",
          "properties": {},
          "scope": {},
        },
      ],
      "meta": {},
      "name": "div",
      "properties": {},
      "scope": {},
    },
  ],
  "context": {
    "get": {},
    "set": {},
  },
  "exports": {},
  "hooks": {
    "onEvent": [],
    "onMount": [],
  },
  "imports": [],
  "inputs": [],
  "meta": {
    "useMetadata": {
      "attributePassing": {
        "customRef": "buttonRef",
        "enabled": true,
      },
    },
  },
  "name": "BasicRefAttributePassingCustomRefComponent",
  "refs": {
    "buttonRef": {
      "argument": "null",
      "typeParameter": "HTMLButtonElement | null",
    },
  },
  "state": {},
  "subComponents": [],
}
`;

exports[`Parse JSX > Typescript > class + ClassName + css 1`] = `
{
  "@type": "@builder.io/mitosis/component",
  "children": [
    {
      "@type": "@builder.io/mitosis/node",
      "bindings": {},
      "children": [
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {},
          "children": [
            {
              "@type": "@builder.io/mitosis/node",
              "bindings": {},
              "children": [],
              "meta": {},
              "name": "div",
              "properties": {
                "_text": "
        Hello! I can run in React, Vue, Solid, or Liquid!
      ",
              },
              "scope": {},
            },
          ],
          "meta": {},
          "name": "MyComp",
          "properties": {
            "class": "test",
            "className": "test2",
          },
          "scope": {},
        },
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {
            "css": {
              "bindingType": "expression",
              "code": "{
  padding: '10px'
}",
              "type": "single",
            },
          },
          "children": [
            {
              "@type": "@builder.io/mitosis/node",
              "bindings": {},
              "children": [],
              "meta": {},
              "name": "div",
              "properties": {
                "_text": "
        Hello! I can run in React, Vue, Solid, or Liquid!
      ",
              },
              "scope": {},
            },
          ],
          "meta": {},
          "name": "div",
          "properties": {
            "class": "test2 test",
          },
          "scope": {},
        },
      ],
      "meta": {},
      "name": "div",
      "properties": {},
      "scope": {},
    },
  ],
  "context": {
    "get": {},
    "set": {},
  },
  "exports": {},
  "hooks": {
    "onEvent": [],
    "onMount": [],
  },
  "imports": [
    {
      "importKind": "value",
      "imports": {
        "MyComp": "default",
      },
      "path": "./my-component.lite",
    },
  ],
  "inputs": [],
  "meta": {},
  "name": "MyBasicComponent",
  "refs": {},
  "state": {},
  "subComponents": [],
}
`;

exports[`Parse JSX > Typescript > class + css 1`] = `
{
  "@type": "@builder.io/mitosis/component",
  "children": [
    {
      "@type": "@builder.io/mitosis/node",
      "bindings": {
        "css": {
          "bindingType": "expression",
          "code": "{
  padding: '10px'
}",
          "type": "single",
        },
      },
      "children": [
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {},
          "children": [],
          "meta": {},
          "name": "div",
          "properties": {
            "_text": "
      Hello! I can run in React, Vue, Solid, or Liquid!
    ",
          },
          "scope": {},
        },
      ],
      "meta": {},
      "name": "div",
      "properties": {
        "class": "test",
      },
      "scope": {},
    },
  ],
  "context": {
    "get": {},
    "set": {},
  },
  "exports": {},
  "hooks": {
    "onEvent": [],
    "onMount": [],
  },
  "imports": [],
  "inputs": [],
  "meta": {},
  "name": "MyBasicComponent",
  "refs": {},
  "state": {},
  "subComponents": [],
}
`;

exports[`Parse JSX > Typescript > className + css 1`] = `
{
  "@type": "@builder.io/mitosis/component",
  "children": [
    {
      "@type": "@builder.io/mitosis/node",
      "bindings": {
        "css": {
          "bindingType": "expression",
          "code": "{
  padding: '10px'
}",
          "type": "single",
        },
      },
      "children": [
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {},
          "children": [],
          "meta": {},
          "name": "div",
          "properties": {
            "_text": "
      Hello! I can run in React, Vue, Solid, or Liquid!
    ",
          },
          "scope": {},
        },
      ],
      "meta": {},
      "name": "div",
      "properties": {
        "class": "test",
      },
      "scope": {},
    },
  ],
  "context": {
    "get": {},
    "set": {},
  },
  "exports": {},
  "hooks": {
    "onEvent": [],
    "onMount": [],
  },
  "imports": [],
  "inputs": [],
  "meta": {},
  "name": "MyBasicComponent",
  "refs": {},
  "state": {},
  "subComponents": [],
}
`;

exports[`Parse JSX > Typescript > className 1`] = `
{
  "@type": "@builder.io/mitosis/component",
  "children": [
    {
      "@type": "@builder.io/mitosis/node",
      "bindings": {},
      "children": [
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {},
          "children": [
            {
              "@type": "@builder.io/mitosis/node",
              "bindings": {},
              "children": [],
              "meta": {},
              "name": "div",
              "properties": {
                "_text": "Without Binding",
              },
              "scope": {},
            },
          ],
          "meta": {},
          "name": "div",
          "properties": {
            "class": "no binding",
          },
          "scope": {},
        },
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {
            "class": {
              "bindingType": "expression",
              "code": "state.bindings",
              "type": "single",
            },
          },
          "children": [
            {
              "@type": "@builder.io/mitosis/node",
              "bindings": {},
              "children": [],
              "meta": {},
              "name": "div",
              "properties": {
                "_text": "With binding",
              },
              "scope": {},
            },
          ],
          "meta": {},
          "name": "div",
          "properties": {},
          "scope": {},
        },
      ],
      "meta": {},
      "name": "div",
      "properties": {},
      "scope": {},
    },
  ],
  "context": {
    "get": {},
    "set": {},
  },
  "exports": {},
  "hooks": {
    "onEvent": [],
    "onMount": [],
  },
  "imports": [
    {
      "importKind": "type",
      "imports": {
        "JSX": "JSX",
      },
      "path": "../../../../jsx-runtime",
    },
  ],
  "inputs": [],
  "meta": {},
  "name": "ClassNameCode",
  "propsTypeRef": "Props",
  "refs": {},
  "state": {
    "bindings": {
      "code": "'a binding'",
      "propertyType": "normal",
      "type": "property",
    },
  },
  "subComponents": [],
  "types": [
    "type Props = {
  [key: string]: string | JSX.Element;
  slotTesting: JSX.Element;
}",
  ],
}
`;

exports[`Parse JSX > Typescript > classState 1`] = `
{
  "@type": "@builder.io/mitosis/component",
  "children": [
    {
      "@type": "@builder.io/mitosis/node",
      "bindings": {
        "class": {
          "bindingType": "expression",
          "code": "state.classState",
          "type": "single",
        },
        "css": {
          "bindingType": "expression",
          "code": "{
  padding: '10px'
}",
          "type": "single",
        },
        "style": {
          "bindingType": "expression",
          "code": "state.styleState",
          "type": "single",
        },
      },
      "children": [
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {},
          "children": [],
          "meta": {},
          "name": "div",
          "properties": {
            "_text": "
      Hello! I can run in React, Vue, Solid, or Liquid!
    ",
          },
          "scope": {},
        },
      ],
      "meta": {},
      "name": "div",
      "properties": {},
      "scope": {},
    },
  ],
  "context": {
    "get": {},
    "set": {},
  },
  "exports": {},
  "hooks": {
    "onEvent": [],
    "onMount": [],
  },
  "imports": [],
  "inputs": [],
  "meta": {},
  "name": "MyBasicComponent",
  "refs": {},
  "state": {
    "classState": {
      "code": "'testClassName'",
      "propertyType": "normal",
      "type": "property",
    },
    "styleState": {
      "code": "{
  color: 'red'
}",
      "propertyType": "normal",
      "type": "property",
    },
  },
  "subComponents": [],
}
`;

exports[`Parse JSX > Typescript > classnameProps 1`] = `
{
  "@type": "@builder.io/mitosis/component",
  "children": [
    {
      "@type": "@builder.io/mitosis/node",
      "bindings": {
        "class": {
          "bindingType": "expression",
          "code": "props.className",
          "type": "single",
        },
      },
      "children": [
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {
            "_text": {
              "bindingType": "expression",
              "code": "props.children",
              "type": "single",
            },
          },
          "children": [],
          "meta": {},
          "name": "div",
          "properties": {},
          "scope": {},
        },
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {
            "_text": {
              "bindingType": "expression",
              "code": "props.type",
              "type": "single",
            },
          },
          "children": [],
          "meta": {},
          "name": "div",
          "properties": {},
          "scope": {},
        },
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {},
          "children": [],
          "meta": {},
          "name": "div",
          "properties": {
            "_text": "
      Hello! I can run in React, Vue, Solid, or Liquid!
    ",
          },
          "scope": {},
        },
      ],
      "meta": {},
      "name": "div",
      "properties": {},
      "scope": {},
    },
  ],
  "context": {
    "get": {},
    "set": {},
  },
  "exports": {},
  "hooks": {
    "onEvent": [],
    "onMount": [],
  },
  "imports": [],
  "inputs": [],
  "meta": {
    "useMetadata": {
      "stencil": {
        "propOptions": {
          "className": {
            "attribute": "classname",
            "mutable": false,
            "reflect": false,
          },
        },
      },
    },
  },
  "name": "MyBasicComponent",
  "propsTypeRef": "Props",
  "refs": {},
  "state": {},
  "subComponents": [],
  "types": [
    "type Props = {
  children: any;
  className: string;
  type: string;
}",
  ],
}
`;

exports[`Parse JSX > Typescript > complexMeta 1`] = `
{
  "@type": "@builder.io/mitosis/component",
  "children": [
    {
      "@type": "@builder.io/mitosis/node",
      "bindings": {},
      "children": [],
      "meta": {},
      "name": "div",
      "properties": {},
      "scope": {},
    },
  ],
  "context": {
    "get": {},
    "set": {},
  },
  "exports": {},
  "hooks": {
    "onEvent": [],
    "onMount": [],
  },
  "imports": [],
  "inputs": [],
  "meta": {
    "useMetadata": {
      "asdf": {
        "booleanValue": true,
        "innerObject": {
          "booleanValue": false,
          "numberValue": 2,
          "stringValue": "inner",
        },
        "numberValue": 1,
        "spreadStringValue": "f",
        "stringValue": "d",
      },
      "x": "y",
    },
  },
  "name": "ComplexMetaRaw",
  "refs": {},
  "state": {},
  "subComponents": [],
}
`;

exports[`Parse JSX > Typescript > componentWithContext 1`] = `
{
  "@type": "@builder.io/mitosis/component",
  "children": [
    {
      "@type": "@builder.io/mitosis/node",
      "bindings": {},
      "children": [
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {},
          "children": [
            {
              "@type": "@builder.io/mitosis/node",
              "bindings": {
                "_text": {
                  "bindingType": "expression",
                  "code": "foo.value",
                  "type": "single",
                },
              },
              "children": [],
              "meta": {},
              "name": "div",
              "properties": {},
              "scope": {},
            },
          ],
          "meta": {},
          "name": "Fragment",
          "properties": {},
          "scope": {},
        },
      ],
      "meta": {},
      "name": "Fragment",
      "properties": {},
      "scope": {},
    },
  ],
  "context": {
    "get": {
      "foo": {
        "name": "Context1",
        "path": "@dummy/1:default",
      },
    },
    "set": {
      "@dummy/1:default": {
        "name": "Context1",
        "value": {
          "content": {
            "code": "content() {
  return props.content;
}",
            "type": "method",
          },
          "foo": {
            "code": "'bar'",
            "propertyType": "normal",
            "type": "property",
          },
        },
      },
      "@dummy/2:default": {
        "name": "Context2",
        "value": {
          "bar": {
            "code": "'baz'",
            "propertyType": "normal",
            "type": "property",
          },
        },
      },
    },
  },
  "exports": {},
  "hooks": {
    "onEvent": [],
    "onMount": [],
  },
  "imports": [
    {
      "importKind": "value",
      "imports": {
        "Context1": "default",
      },
      "path": "@dummy/1",
    },
    {
      "importKind": "value",
      "imports": {
        "Context2": "default",
      },
      "path": "@dummy/2",
    },
  ],
  "inputs": [],
  "meta": {},
  "name": "ComponentWithContext",
  "propsTypeRef": "ComponentWithContextProps",
  "refs": {},
  "state": {},
  "subComponents": [],
  "types": [
    "export interface ComponentWithContextProps {
  content: string;
}",
  ],
}
`;

exports[`Parse JSX > Typescript > componentWithContextMultiRoot 1`] = `
{
  "@type": "@builder.io/mitosis/component",
  "children": [
    {
      "@type": "@builder.io/mitosis/node",
      "bindings": {},
      "children": [
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {},
          "children": [
            {
              "@type": "@builder.io/mitosis/node",
              "bindings": {
                "_text": {
                  "bindingType": "expression",
                  "code": "foo.value",
                  "type": "single",
                },
              },
              "children": [],
              "meta": {},
              "name": "div",
              "properties": {},
              "scope": {},
            },
          ],
          "meta": {},
          "name": "Fragment",
          "properties": {},
          "scope": {},
        },
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {},
          "children": [
            {
              "@type": "@builder.io/mitosis/node",
              "bindings": {},
              "children": [],
              "meta": {},
              "name": "div",
              "properties": {
                "_text": "other",
              },
              "scope": {},
            },
          ],
          "meta": {},
          "name": "div",
          "properties": {},
          "scope": {},
        },
      ],
      "meta": {},
      "name": "Fragment",
      "properties": {},
      "scope": {},
    },
  ],
  "context": {
    "get": {
      "foo": {
        "name": "Context1",
        "path": "@dummy/1:default",
      },
    },
    "set": {
      "@dummy/1:default": {
        "name": "Context1",
        "value": {
          "content": {
            "code": "content() {
  return props.content;
}",
            "type": "method",
          },
          "foo": {
            "code": "'bar'",
            "propertyType": "normal",
            "type": "property",
          },
        },
      },
      "@dummy/2:default": {
        "name": "Context2",
        "value": {
          "bar": {
            "code": "'baz'",
            "propertyType": "normal",
            "type": "property",
          },
        },
      },
    },
  },
  "exports": {},
  "hooks": {
    "onEvent": [],
    "onMount": [],
  },
  "imports": [
    {
      "importKind": "value",
      "imports": {
        "Context1": "default",
      },
      "path": "@dummy/1",
    },
    {
      "importKind": "value",
      "imports": {
        "Context2": "default",
      },
      "path": "@dummy/2",
    },
  ],
  "inputs": [],
  "meta": {},
  "name": "ComponentWithContext",
  "propsTypeRef": "ComponentWithContextProps",
  "refs": {},
  "state": {},
  "subComponents": [],
  "types": [
    "export interface ComponentWithContextProps {
  content: string;
}",
  ],
}
`;

exports[`Parse JSX > Typescript > contentState 1`] = `
{
  "@type": "@builder.io/mitosis/component",
  "children": [
    {
      "@type": "@builder.io/mitosis/node",
      "bindings": {},
      "children": [
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {},
          "children": [],
          "meta": {},
          "name": "div",
          "properties": {
            "_text": "setting context",
          },
          "scope": {},
        },
      ],
      "meta": {},
      "name": "div",
      "properties": {},
      "scope": {},
    },
  ],
  "context": {
    "get": {},
    "set": {
      "@dummy/context.lite:default": {
        "name": "BuilderContext",
        "value": {
          "content": {
            "code": "props.content",
            "propertyType": "normal",
            "type": "property",
          },
          "registeredComponents": {
            "code": "props.customComponents",
            "propertyType": "normal",
            "type": "property",
          },
        },
      },
    },
  },
  "exports": {},
  "hooks": {
    "onEvent": [],
    "onMount": [],
  },
  "imports": [
    {
      "importKind": "value",
      "imports": {
        "BuilderContext": "default",
      },
      "path": "@dummy/context.lite",
    },
  ],
  "inputs": [],
  "meta": {},
  "name": "RenderContent",
  "refs": {},
  "state": {},
  "subComponents": [],
}
`;

exports[`Parse JSX > Typescript > defaultProps 1`] = `
{
  "@type": "@builder.io/mitosis/component",
  "children": [
    {
      "@type": "@builder.io/mitosis/node",
      "bindings": {},
      "children": [
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {
            "when": {
              "bindingType": "expression",
              "code": "props.link",
              "type": "single",
            },
          },
          "children": [
            {
              "@type": "@builder.io/mitosis/node",
              "bindings": {
                "href": {
                  "bindingType": "expression",
                  "code": "props.link",
                  "type": "single",
                },
                "props.attributes": {
                  "code": "props.attributes",
                  "spreadType": "normal",
                  "type": "spread",
                },
                "target": {
                  "bindingType": "expression",
                  "code": "props.openLinkInNewTab ? '_blank' : undefined",
                  "type": "single",
                },
              },
              "children": [
                {
                  "@type": "@builder.io/mitosis/node",
                  "bindings": {
                    "_text": {
                      "bindingType": "expression",
                      "code": "props.text",
                      "type": "single",
                    },
                  },
                  "children": [],
                  "meta": {},
                  "name": "div",
                  "properties": {},
                  "scope": {},
                },
              ],
              "meta": {},
              "name": "a",
              "properties": {},
              "scope": {},
            },
          ],
          "meta": {},
          "name": "Show",
          "properties": {},
          "scope": {},
        },
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {
            "when": {
              "bindingType": "expression",
              "code": "!props.link",
              "type": "single",
            },
          },
          "children": [
            {
              "@type": "@builder.io/mitosis/node",
              "bindings": {
                "onClick": {
                  "bindingType": "function",
                  "code": "props.onClick()",
                  "type": "single",
                },
                "props.attributes": {
                  "code": "props.attributes",
                  "spreadType": "normal",
                  "type": "spread",
                },
              },
              "children": [
                {
                  "@type": "@builder.io/mitosis/node",
                  "bindings": {
                    "_text": {
                      "bindingType": "expression",
                      "code": "props.buttonText",
                      "type": "single",
                    },
                  },
                  "children": [],
                  "meta": {},
                  "name": "div",
                  "properties": {},
                  "scope": {},
                },
              ],
              "meta": {},
              "name": "button",
              "properties": {
                "type": "button",
              },
              "scope": {},
            },
          ],
          "meta": {},
          "name": "Show",
          "properties": {},
          "scope": {},
        },
      ],
      "meta": {},
      "name": "div",
      "properties": {},
      "scope": {},
    },
  ],
  "context": {
    "get": {},
    "set": {},
  },
  "defaultProps": {
    "link": {
      "code": "'https://builder.io/'",
      "propertyType": "normal",
      "type": "property",
    },
    "onClick": {
      "code": "() => {
  console.log('hi');
}",
      "type": "method",
    },
    "openLinkInNewTab": {
      "code": "false",
      "propertyType": "normal",
      "type": "property",
    },
    "text": {
      "code": "'default text'",
      "propertyType": "normal",
      "type": "property",
    },
  },
  "exports": {},
  "hooks": {
    "onEvent": [],
    "onMount": [],
  },
  "imports": [],
  "inputs": [],
  "meta": {},
  "name": "Button",
  "propsTypeRef": "ButtonProps",
  "refs": {},
  "state": {},
  "subComponents": [],
  "types": [
    "export interface ButtonProps {
  attributes?: any;
  text?: string;
  buttonText?: string; // no default value

  link?: string;
  openLinkInNewTab?: boolean;
  onClick?: () => void;
}",
  ],
}
`;

exports[`Parse JSX > Typescript > defaultPropsOutsideComponent 1`] = `
{
  "@type": "@builder.io/mitosis/component",
  "children": [
    {
      "@type": "@builder.io/mitosis/node",
      "bindings": {},
      "children": [
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {
            "when": {
              "bindingType": "expression",
              "code": "props.link",
              "type": "single",
            },
          },
          "children": [
            {
              "@type": "@builder.io/mitosis/node",
              "bindings": {
                "href": {
                  "bindingType": "expression",
                  "code": "props.link",
                  "type": "single",
                },
                "props.attributes": {
                  "code": "props.attributes",
                  "spreadType": "normal",
                  "type": "spread",
                },
                "target": {
                  "bindingType": "expression",
                  "code": "props.openLinkInNewTab ? '_blank' : undefined",
                  "type": "single",
                },
              },
              "children": [
                {
                  "@type": "@builder.io/mitosis/node",
                  "bindings": {
                    "_text": {
                      "bindingType": "expression",
                      "code": "props.text",
                      "type": "single",
                    },
                  },
                  "children": [],
                  "meta": {},
                  "name": "div",
                  "properties": {},
                  "scope": {},
                },
              ],
              "meta": {},
              "name": "a",
              "properties": {},
              "scope": {},
            },
          ],
          "meta": {},
          "name": "Show",
          "properties": {},
          "scope": {},
        },
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {
            "when": {
              "bindingType": "expression",
              "code": "!props.link",
              "type": "single",
            },
          },
          "children": [
            {
              "@type": "@builder.io/mitosis/node",
              "bindings": {
                "onClick": {
                  "arguments": [
                    "event",
                  ],
                  "bindingType": "function",
                  "code": "props.onClick(event)",
                  "type": "single",
                },
                "props.attributes": {
                  "code": "props.attributes",
                  "spreadType": "normal",
                  "type": "spread",
                },
              },
              "children": [
                {
                  "@type": "@builder.io/mitosis/node",
                  "bindings": {
                    "_text": {
                      "bindingType": "expression",
                      "code": "props.text",
                      "type": "single",
                    },
                  },
                  "children": [],
                  "meta": {},
                  "name": "div",
                  "properties": {},
                  "scope": {},
                },
              ],
              "meta": {},
              "name": "button",
              "properties": {
                "type": "button",
              },
              "scope": {},
            },
          ],
          "meta": {},
          "name": "Show",
          "properties": {},
          "scope": {},
        },
      ],
      "meta": {},
      "name": "div",
      "properties": {},
      "scope": {},
    },
  ],
  "context": {
    "get": {},
    "set": {},
  },
  "defaultProps": {
    "link": {
      "code": "'https://builder.io/'",
      "propertyType": "normal",
      "type": "property",
    },
    "onClick": {
      "code": "() => {}",
      "type": "method",
    },
    "openLinkInNewTab": {
      "code": "false",
      "propertyType": "normal",
      "type": "property",
    },
    "text": {
      "code": "'default text'",
      "propertyType": "normal",
      "type": "property",
    },
  },
  "exports": {},
  "hooks": {
    "onEvent": [],
    "onMount": [],
  },
  "imports": [],
  "inputs": [],
  "meta": {},
  "name": "Button",
  "propsTypeRef": "ButtonProps",
  "refs": {},
  "state": {},
  "subComponents": [],
  "types": [
    "export interface ButtonProps {
  attributes?: any;
  text?: string;
  link?: string;
  openLinkInNewTab?: boolean;
  onClick: () => void;
}",
  ],
}
`;

exports[`Parse JSX > Typescript > defaultValsWithTypes 1`] = `
{
  "@type": "@builder.io/mitosis/component",
  "children": [
    {
      "@type": "@builder.io/mitosis/node",
      "bindings": {},
      "children": [
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {},
          "children": [],
          "meta": {},
          "name": "div",
          "properties": {
            "_text": " Hello ",
          },
          "scope": {},
        },
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {
            "_text": {
              "bindingType": "expression",
              "code": "props.name || DEFAULT_VALUES.name",
              "type": "single",
            },
          },
          "children": [],
          "meta": {},
          "name": "div",
          "properties": {},
          "scope": {},
        },
      ],
      "meta": {},
      "name": "div",
      "properties": {},
      "scope": {},
    },
  ],
  "context": {
    "get": {},
    "set": {},
  },
  "exports": {
    "DEFAULT_VALUES": {
      "code": "const DEFAULT_VALUES: Props = {
  name: 'Sami'
};",
      "isFunction": false,
      "usedInLocal": true,
    },
  },
  "hooks": {
    "onEvent": [],
    "onMount": [],
  },
  "imports": [],
  "inputs": [],
  "meta": {},
  "name": "ComponentWithTypes",
  "propsTypeRef": "Props",
  "refs": {},
  "state": {},
  "subComponents": [],
  "types": [
    "type Props = {
  name: string;
}",
  ],
}
`;

exports[`Parse JSX > Typescript > eventInputAndChange 1`] = `
{
  "@type": "@builder.io/mitosis/component",
  "children": [
    {
      "@type": "@builder.io/mitosis/node",
      "bindings": {},
      "children": [
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {
            "css": {
              "bindingType": "expression",
              "code": "{
  color: 'red'
}",
              "type": "single",
            },
            "onChange": {
              "arguments": [
                "event",
              ],
              "bindingType": "function",
              "code": "state.name = event.target.value",
              "type": "single",
            },
            "onInput": {
              "arguments": [
                "event",
              ],
              "bindingType": "function",
              "code": "state.name = event.target.value",
              "type": "single",
            },
            "value": {
              "bindingType": "expression",
              "code": "state.name",
              "type": "single",
            },
          },
          "children": [],
          "meta": {},
          "name": "input",
          "properties": {},
          "scope": {},
        },
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {},
          "children": [],
          "meta": {},
          "name": "div",
          "properties": {
            "_text": "
      Hello! I can run in React, Vue, Solid, or Liquid!
    ",
          },
          "scope": {},
        },
      ],
      "meta": {},
      "name": "div",
      "properties": {},
      "scope": {},
    },
  ],
  "context": {
    "get": {},
    "set": {},
  },
  "exports": {},
  "hooks": {
    "onEvent": [],
    "onMount": [],
  },
  "imports": [],
  "inputs": [],
  "meta": {},
  "name": "EventInputAndChange",
  "refs": {},
  "state": {
    "name": {
      "code": "'Steve'",
      "propertyType": "normal",
      "type": "property",
    },
  },
  "subComponents": [],
}
`;

exports[`Parse JSX > Typescript > eventProps 1`] = `
{
  "@type": "@builder.io/mitosis/component",
  "children": [
    {
      "@type": "@builder.io/mitosis/node",
      "bindings": {
        "onClick": {
          "bindingType": "function",
          "code": "state.handleClick()",
          "type": "single",
        },
      },
      "children": [
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {},
          "children": [],
          "meta": {},
          "name": "div",
          "properties": {
            "_text": "Test",
          },
          "scope": {},
        },
      ],
      "meta": {},
      "name": "button",
      "properties": {},
      "scope": {},
    },
  ],
  "context": {
    "get": {},
    "set": {},
  },
  "exports": {},
  "hooks": {
    "onEvent": [],
    "onMount": [],
  },
  "imports": [
    {
      "importKind": "value",
      "imports": {
        "EventProps": "EventProps",
        "EventState": "EventState",
      },
      "path": "./event-props.type",
    },
  ],
  "inputs": [],
  "meta": {},
  "name": "EventPropsComponent",
  "propsTypeRef": "EventProps",
  "refs": {},
  "state": {
    "handleClick": {
      "code": "handleClick() {
  if (props.onGetVoid) {
    props.onGetVoid();
  }

  if (props.onEnter) {
    console.log(props.onEnter());
  }

  if (props.onPass) {
    props.onPass('test');
  }
}",
      "type": "method",
      "typeParameter": "EventState[\\"handleClick\\"]",
    },
  },
  "subComponents": [],
}
`;

exports[`Parse JSX > Typescript > expressionState 1`] = `
{
  "@type": "@builder.io/mitosis/component",
  "children": [
    {
      "@type": "@builder.io/mitosis/node",
      "bindings": {},
      "children": [
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {
            "_text": {
              "bindingType": "expression",
              "code": "state.refToUse",
              "type": "single",
            },
          },
          "children": [],
          "meta": {},
          "name": "div",
          "properties": {},
          "scope": {},
        },
      ],
      "meta": {},
      "name": "div",
      "properties": {},
      "scope": {},
    },
  ],
  "context": {
    "get": {},
    "set": {},
  },
  "exports": {},
  "hooks": {
    "onEvent": [],
    "onMount": [],
  },
  "imports": [],
  "inputs": [],
  "meta": {},
  "name": "MyComponent",
  "refs": {},
  "state": {
    "refToUse": {
      "code": "!(props.componentRef instanceof Function) ? props.componentRef : null",
      "propertyType": "normal",
      "type": "property",
    },
  },
  "subComponents": [],
}
`;

exports[`Parse JSX > Typescript > figmaMeta 1`] = `
{
  "@type": "@builder.io/mitosis/component",
  "children": [
    {
      "@type": "@builder.io/mitosis/node",
      "bindings": {
        "data-disabled": {
          "bindingType": "expression",
          "code": "props.interactiveState",
          "type": "single",
        },
        "data-icon": {
          "bindingType": "expression",
          "code": "props.icon",
          "type": "single",
        },
        "data-size": {
          "bindingType": "expression",
          "code": "props.size",
          "type": "single",
        },
        "data-width": {
          "bindingType": "expression",
          "code": "props.width",
          "type": "single",
        },
      },
      "children": [
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {
            "_text": {
              "bindingType": "expression",
              "code": "props.label",
              "type": "single",
            },
          },
          "children": [],
          "meta": {},
          "name": "div",
          "properties": {},
          "scope": {},
        },
      ],
      "meta": {},
      "name": "button",
      "properties": {},
      "scope": {},
    },
  ],
  "context": {
    "get": {},
    "set": {},
  },
  "exports": {},
  "hooks": {
    "onEvent": [],
    "onMount": [],
  },
  "imports": [],
  "inputs": [],
  "meta": {
    "useMetadata": {
      "figma": {
        "name": "def-button-beta-outlined",
        "props": {
          "icon": {
            "key": "👁️ Icon",
            "type": "boolean",
            "value": {
              "false": false,
              "true": "placeholder",
            },
          },
          "iconMedium": {
            "key": "📍 Icon Medium",
            "type": "instance",
          },
          "iconSmall": {
            "key": "📍 Icon Small",
            "type": "instance",
          },
          "interactiveState": {
            "key": "Interactive State",
            "type": "enum",
            "value": {
              "(Def) Enabled": false,
              "Disabled": "true",
              "Focused": false,
              "Hovered": false,
              "Pressed": false,
            },
          },
          "label": {
            "key": "✏️ Label",
            "type": "string",
          },
          "size": {
            "key": "Size",
            "type": "enum",
            "value": {
              "(Def) Medium": false,
              "Small": "small",
            },
          },
          "width": {
            "key": "Width",
            "type": "enum",
            "value": {
              "(Def) Auto Width": false,
              "Full Width": "full",
            },
          },
        },
        "url": "https://www.figma.com/xxx",
      },
    },
  },
  "name": "FigmaButton",
  "propsTypeRef": "any",
  "refs": {},
  "state": {},
  "subComponents": [],
}
`;

exports[`Parse JSX > Typescript > functionProps 1`] = `
{
  "@type": "@builder.io/mitosis/component",
  "children": [
    {
      "@type": "@builder.io/mitosis/node",
      "bindings": {
        "f": {
          "bindingType": "expression",
          "code": "() => x",
          "type": "single",
        },
        "f1": {
          "bindingType": "expression",
          "code": "x => x",
          "type": "single",
        },
        "f2": {
          "bindingType": "expression",
          "code": "x => {}",
          "type": "single",
        },
        "f3": {
          "bindingType": "expression",
          "code": "function () {
  return x;
}",
          "type": "single",
        },
        "f4": {
          "bindingType": "expression",
          "code": "function (x) {
  return x;
}",
          "type": "single",
        },
        "f5": {
          "bindingType": "expression",
          "code": "function (x) {
  return;
}",
          "type": "single",
        },
        "f6": {
          "bindingType": "expression",
          "code": "function () {
  return;
}",
          "type": "single",
        },
        "f7": {
          "bindingType": "expression",
          "code": "(a, b, c) => a + b + c",
          "type": "single",
        },
      },
      "children": [],
      "meta": {},
      "name": "p",
      "properties": {},
      "scope": {},
    },
  ],
  "context": {
    "get": {},
    "set": {},
  },
  "exports": {},
  "hooks": {
    "onEvent": [],
    "onMount": [],
  },
  "imports": [],
  "inputs": [],
  "meta": {},
  "name": "MyBasicComponent",
  "propsTypeRef": "MyBasicComponentProps",
  "refs": {},
  "state": {},
  "subComponents": [],
  "types": [
    "export interface MyBasicComponentProps {
  id: string;
}",
  ],
}
`;

exports[`Parse JSX > Typescript > getterState 1`] = `
{
  "@type": "@builder.io/mitosis/component",
  "children": [
    {
      "@type": "@builder.io/mitosis/node",
      "bindings": {},
      "children": [
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {},
          "children": [
            {
              "@type": "@builder.io/mitosis/node",
              "bindings": {
                "_text": {
                  "bindingType": "expression",
                  "code": "state.foo2",
                  "type": "single",
                },
              },
              "children": [],
              "meta": {},
              "name": "div",
              "properties": {},
              "scope": {},
            },
          ],
          "meta": {},
          "name": "p",
          "properties": {},
          "scope": {},
        },
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {},
          "children": [
            {
              "@type": "@builder.io/mitosis/node",
              "bindings": {
                "_text": {
                  "bindingType": "expression",
                  "code": "state.bar",
                  "type": "single",
                },
              },
              "children": [],
              "meta": {},
              "name": "div",
              "properties": {},
              "scope": {},
            },
          ],
          "meta": {},
          "name": "p",
          "properties": {},
          "scope": {},
        },
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {},
          "children": [
            {
              "@type": "@builder.io/mitosis/node",
              "bindings": {
                "_text": {
                  "bindingType": "expression",
                  "code": "state.baz(1)",
                  "type": "single",
                },
              },
              "children": [],
              "meta": {},
              "name": "div",
              "properties": {},
              "scope": {},
            },
          ],
          "meta": {},
          "name": "p",
          "properties": {},
          "scope": {},
        },
      ],
      "meta": {},
      "name": "div",
      "properties": {},
      "scope": {},
    },
  ],
  "context": {
    "get": {},
    "set": {},
  },
  "exports": {},
  "hooks": {
    "onEvent": [],
    "onMount": [],
  },
  "imports": [],
  "inputs": [],
  "meta": {},
  "name": "Button",
  "propsTypeRef": "ButtonProps",
  "refs": {},
  "state": {
    "bar": {
      "code": "get bar() {
  return 'bar';
}",
      "type": "getter",
    },
    "baz": {
      "code": "baz(i: number) {
  return i + state.foo2.length;
}",
      "type": "method",
    },
    "foo2": {
      "code": "get foo2() {
  return props.foo + 'foo';
}",
      "type": "getter",
    },
  },
  "subComponents": [],
  "types": [
    "export interface ButtonProps {
  foo: string;
}",
  ],
}
`;

exports[`Parse JSX > Typescript > import types 1`] = `
{
  "@type": "@builder.io/mitosis/component",
  "children": [
    {
      "@type": "@builder.io/mitosis/node",
      "bindings": {
        "state.getRenderContentProps(props.renderContentProps.block,0)": {
          "code": "state.getRenderContentProps(props.renderContentProps.block, 0)",
          "spreadType": "normal",
          "type": "spread",
        },
      },
      "children": [],
      "meta": {},
      "name": "RenderBlock",
      "properties": {},
      "scope": {},
    },
  ],
  "context": {
    "get": {},
    "set": {},
  },
  "exports": {},
  "hooks": {
    "onEvent": [],
    "onMount": [],
  },
  "imports": [
    {
      "importKind": "value",
      "imports": {
        "BuilderContent": "BuilderContent",
        "GetContentOptions": "GetContentOptions",
      },
      "path": "@builder.io/sdk",
    },
    {
      "importKind": "value",
      "imports": {
        "RenderBlock": "default",
        "RenderBlockProps": "RenderBlockProps",
      },
      "path": "./builder-render-block.raw",
    },
  ],
  "inputs": [],
  "meta": {},
  "name": "RenderContent",
  "propsTypeRef": "RenderContentProps",
  "refs": {},
  "state": {
    "getRenderContentProps": {
      "code": "getRenderContentProps(block, index) {
  return {
    block: block,
    index: index
  };
}",
      "type": "method",
    },
  },
  "subComponents": [],
  "types": [
    "type RenderContentProps = {
  options?: GetContentOptions;
  content: BuilderContent;
  renderContentProps: RenderBlockProps;
}",
  ],
}
`;

exports[`Parse JSX > Typescript > layerName 1`] = `
{
  "@type": "@builder.io/mitosis/component",
  "children": [
    {
      "@type": "@builder.io/mitosis/node",
      "bindings": {},
      "children": [
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {
            "css": {
              "bindingType": "expression",
              "code": "{
  padding: '10px'
}",
              "type": "single",
            },
          },
          "children": [
            {
              "@type": "@builder.io/mitosis/node",
              "bindings": {},
              "children": [],
              "meta": {},
              "name": "div",
              "properties": {
                "_text": "
        Hello! I can run in React, Vue, Solid, or Liquid!
      ",
              },
              "scope": {},
            },
          ],
          "meta": {},
          "name": "div",
          "properties": {
            "$name": "🌟layer-name",
          },
          "scope": {},
        },
      ],
      "meta": {},
      "name": "section",
      "properties": {},
      "scope": {},
    },
  ],
  "context": {
    "get": {},
    "set": {},
  },
  "exports": {},
  "hooks": {
    "onEvent": [],
    "onMount": [],
  },
  "imports": [],
  "inputs": [],
  "meta": {},
  "name": "MyLayerNameComponent",
  "refs": {},
  "state": {},
  "subComponents": [],
}
`;

exports[`Parse JSX > Typescript > multipleOnUpdate 1`] = `
{
  "@type": "@builder.io/mitosis/component",
  "children": [
    {
      "@type": "@builder.io/mitosis/node",
      "bindings": {},
      "children": [],
      "meta": {},
      "name": "div",
      "properties": {},
      "scope": {},
    },
  ],
  "context": {
    "get": {},
    "set": {},
  },
  "exports": {},
  "hooks": {
    "onEvent": [],
    "onMount": [],
    "onUpdate": [
      {
        "code": "console.log('Runs on every update/rerender')",
        "deps": "",
        "depsArray": [],
      },
      {
        "code": "console.log('Runs on every update/rerender as well')",
        "deps": "",
        "depsArray": [],
      },
    ],
  },
  "imports": [],
  "inputs": [],
  "meta": {},
  "name": "MultipleOnUpdate",
  "refs": {},
  "state": {},
  "subComponents": [],
}
`;

exports[`Parse JSX > Typescript > multipleOnUpdateWithDeps 1`] = `
{
  "@type": "@builder.io/mitosis/component",
  "children": [
    {
      "@type": "@builder.io/mitosis/node",
      "bindings": {},
      "children": [],
      "meta": {},
      "name": "div",
      "properties": {},
      "scope": {},
    },
  ],
  "context": {
    "get": {},
    "set": {},
  },
  "exports": {},
  "hooks": {
    "onEvent": [],
    "onMount": [],
    "onUpdate": [
      {
        "code": "console.log('Runs when a or b changes', state.a, state.b);

if (state.a === 'a') {
  state.a = 'b';
}",
        "deps": "[state.a, state.b]",
        "depsArray": [
          "state.a",
          "state.b",
        ],
      },
      {
        "code": "console.log('Runs when c or d changes', state.c, state.d);

if (state.a === 'a') {
  state.a = 'b';
}",
        "deps": "[state.c, state.d]",
        "depsArray": [
          "state.c",
          "state.d",
        ],
      },
    ],
  },
  "imports": [],
  "inputs": [],
  "meta": {},
  "name": "MultipleOnUpdateWithDeps",
  "refs": {},
  "state": {
    "a": {
      "code": "'a'",
      "propertyType": "normal",
      "type": "property",
    },
    "b": {
      "code": "'b'",
      "propertyType": "normal",
      "type": "property",
    },
    "c": {
      "code": "'c'",
      "propertyType": "normal",
      "type": "property",
    },
    "d": {
      "code": "'d'",
      "propertyType": "normal",
      "type": "property",
    },
  },
  "subComponents": [],
}
`;

exports[`Parse JSX > Typescript > multipleSpreads 1`] = `
{
  "@type": "@builder.io/mitosis/component",
  "children": [
    {
      "@type": "@builder.io/mitosis/node",
      "bindings": {
        "attrs": {
          "code": "state.attrs",
          "spreadType": "normal",
          "type": "spread",
        },
        "props": {
          "code": "props",
          "spreadType": "normal",
          "type": "spread",
        },
      },
      "children": [],
      "meta": {},
      "name": "input",
      "properties": {},
      "scope": {},
    },
  ],
  "context": {
    "get": {},
    "set": {},
  },
  "exports": {},
  "hooks": {
    "onEvent": [],
    "onMount": [],
  },
  "imports": [],
  "inputs": [],
  "meta": {},
  "name": "MyBasicComponent",
  "propsTypeRef": "any",
  "refs": {},
  "state": {
    "attrs": {
      "code": "{
  hello: 'world'
}",
      "propertyType": "normal",
      "type": "property",
    },
  },
  "subComponents": [],
}
`;

exports[`Parse JSX > Typescript > nestedShow 1`] = `
{
  "@type": "@builder.io/mitosis/component",
  "children": [
    {
      "@type": "@builder.io/mitosis/node",
      "bindings": {
        "when": {
          "bindingType": "expression",
          "code": "props.conditionA",
          "type": "single",
        },
      },
      "children": [
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {
            "when": {
              "bindingType": "expression",
              "code": "!props.conditionB",
              "type": "single",
            },
          },
          "children": [
            {
              "@type": "@builder.io/mitosis/node",
              "bindings": {},
              "children": [
                {
                  "@type": "@builder.io/mitosis/node",
                  "bindings": {},
                  "children": [],
                  "meta": {},
                  "name": "div",
                  "properties": {
                    "_text": "if condition A and condition B",
                  },
                  "scope": {},
                },
              ],
              "meta": {},
              "name": "div",
              "properties": {},
              "scope": {},
            },
          ],
          "meta": {
            "else": {
              "@type": "@builder.io/mitosis/node",
              "bindings": {},
              "children": [
                {
                  "@type": "@builder.io/mitosis/node",
                  "bindings": {},
                  "children": [],
                  "meta": {},
                  "name": "div",
                  "properties": {
                    "_text": "else-condition-B",
                  },
                  "scope": {},
                },
              ],
              "meta": {},
              "name": "div",
              "properties": {},
              "scope": {},
            },
          },
          "name": "Show",
          "properties": {},
          "scope": {},
        },
      ],
      "meta": {
        "else": {
          "@type": "@builder.io/mitosis/node",
          "bindings": {},
          "children": [
            {
              "@type": "@builder.io/mitosis/node",
              "bindings": {},
              "children": [],
              "meta": {},
              "name": "div",
              "properties": {
                "_text": "else-condition-A",
              },
              "scope": {},
            },
          ],
          "meta": {},
          "name": "div",
          "properties": {},
          "scope": {},
        },
      },
      "name": "Show",
      "properties": {},
      "scope": {},
    },
  ],
  "context": {
    "get": {},
    "set": {},
  },
  "exports": {},
  "hooks": {
    "onEvent": [],
    "onMount": [],
  },
  "imports": [],
  "inputs": [],
  "meta": {},
  "name": "NestedShow",
  "propsTypeRef": "Props",
  "refs": {},
  "state": {},
  "subComponents": [],
  "types": [
    "interface Props {
  conditionA: boolean;
  conditionB: boolean;
}",
  ],
}
`;

exports[`Parse JSX > Typescript > nestedStyles 1`] = `
{
  "@type": "@builder.io/mitosis/component",
  "children": [
    {
      "@type": "@builder.io/mitosis/node",
      "bindings": {
        "css": {
          "bindingType": "expression",
          "code": "{
  display: 'flex',
  '--bar': 'red',
  color: 'var(--bar)',
  '@media (max-width: env(--mobile))': {
    display: 'block'
  },
  '&:hover': {
    display: 'flex'
  },
  ':active': {
    display: 'inline'
  },
  '.nested-selector': {
    display: 'grid'
  },
  '.nested-selector:hover': {
    display: 'block'
  },
  '&.nested-selector:active': {
    display: 'inline-block'
  }
}",
          "type": "single",
        },
      },
      "children": [
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {},
          "children": [],
          "meta": {},
          "name": "div",
          "properties": {
            "_text": "
      Hello world
    ",
          },
          "scope": {},
        },
      ],
      "meta": {},
      "name": "div",
      "properties": {},
      "scope": {},
    },
  ],
  "context": {
    "get": {},
    "set": {},
  },
  "exports": {},
  "hooks": {
    "onEvent": [],
    "onMount": [],
  },
  "imports": [],
  "inputs": [],
  "meta": {},
  "name": "NestedStyles",
  "refs": {},
  "state": {},
  "subComponents": [],
}
`;

exports[`Parse JSX > Typescript > normalizeLayerNames 1`] = `
{
  "@type": "@builder.io/mitosis/component",
  "children": [
    {
      "@type": "@builder.io/mitosis/node",
      "bindings": {},
      "children": [
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {},
          "children": [
            {
              "@type": "@builder.io/mitosis/node",
              "bindings": {},
              "children": [],
              "meta": {},
              "name": "div",
              "properties": {
                "_text": "Emoji",
              },
              "scope": {},
            },
          ],
          "meta": {},
          "name": "div",
          "properties": {
            "$name": "🌟layer-name",
          },
          "scope": {},
        },
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {},
          "children": [
            {
              "@type": "@builder.io/mitosis/node",
              "bindings": {},
              "children": [],
              "meta": {},
              "name": "div",
              "properties": {
                "_text": "Dashes",
              },
              "scope": {},
            },
          ],
          "meta": {},
          "name": "div",
          "properties": {
            "$name": "---",
          },
          "scope": {},
        },
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {},
          "children": [
            {
              "@type": "@builder.io/mitosis/node",
              "bindings": {},
              "children": [],
              "meta": {},
              "name": "div",
              "properties": {
                "_text": "CamelCase",
              },
              "scope": {},
            },
          ],
          "meta": {},
          "name": "div",
          "properties": {
            "$name": "CamelCase",
          },
          "scope": {},
        },
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {},
          "children": [
            {
              "@type": "@builder.io/mitosis/node",
              "bindings": {},
              "children": [],
              "meta": {},
              "name": "div",
              "properties": {
                "_text": "Special chars",
              },
              "scope": {},
            },
          ],
          "meta": {},
          "name": "div",
          "properties": {
            "$name": "123my@Class-Name!",
          },
          "scope": {},
        },
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {},
          "children": [
            {
              "@type": "@builder.io/mitosis/node",
              "bindings": {},
              "children": [],
              "meta": {},
              "name": "div",
              "properties": {
                "_text": "Special chars with dashes",
              },
              "scope": {},
            },
          ],
          "meta": {},
          "name": "div",
          "properties": {
            "$name": "--my--@custom--name--",
          },
          "scope": {},
        },
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {
            "css": {
              "bindingType": "expression",
              "code": "{
  margin: '10px'
}",
              "type": "single",
            },
          },
          "children": [
            {
              "@type": "@builder.io/mitosis/node",
              "bindings": {},
              "children": [],
              "meta": {},
              "name": "div",
              "properties": {
                "_text": "
        Single Number
      ",
              },
              "scope": {},
            },
          ],
          "meta": {},
          "name": "div",
          "properties": {
            "$name": "0",
          },
          "scope": {},
        },
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {
            "css": {
              "bindingType": "expression",
              "code": "{
  padding: '10px'
}",
              "type": "single",
            },
          },
          "children": [
            {
              "@type": "@builder.io/mitosis/node",
              "bindings": {},
              "children": [],
              "meta": {},
              "name": "div",
              "properties": {
                "_text": "
        Multiple Numbers
      ",
              },
              "scope": {},
            },
          ],
          "meta": {},
          "name": "div",
          "properties": {
            "$name": "123",
          },
          "scope": {},
        },
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {
            "css": {
              "bindingType": "expression",
              "code": "{
  border: '1px solid'
}",
              "type": "single",
            },
          },
          "children": [
            {
              "@type": "@builder.io/mitosis/node",
              "bindings": {},
              "children": [],
              "meta": {},
              "name": "div",
              "properties": {
                "_text": "
        Chars with numbers at end
      ",
              },
              "scope": {},
            },
          ],
          "meta": {},
          "name": "div",
          "properties": {
            "$name": "name123",
          },
          "scope": {},
        },
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {
            "css": {
              "bindingType": "expression",
              "code": "{
  color: 'red'
}",
              "type": "single",
            },
          },
          "children": [
            {
              "@type": "@builder.io/mitosis/node",
              "bindings": {},
              "children": [],
              "meta": {},
              "name": "div",
              "properties": {
                "_text": "
        Chars with numbers at start
      ",
              },
              "scope": {},
            },
          ],
          "meta": {},
          "name": "div",
          "properties": {
            "$name": "456name",
          },
          "scope": {},
        },
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {
            "css": {
              "bindingType": "expression",
              "code": "{
  background: 'blue'
}",
              "type": "single",
            },
          },
          "children": [
            {
              "@type": "@builder.io/mitosis/node",
              "bindings": {},
              "children": [],
              "meta": {},
              "name": "div",
              "properties": {
                "_text": "
        Numnbers separated by dash
      ",
              },
              "scope": {},
            },
          ],
          "meta": {},
          "name": "div",
          "properties": {
            "$name": "name-789",
          },
          "scope": {},
        },
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {},
          "children": [
            {
              "@type": "@builder.io/mitosis/node",
              "bindings": {},
              "children": [],
              "meta": {},
              "name": "div",
              "properties": {
                "_text": "Emoji",
              },
              "scope": {},
            },
          ],
          "meta": {},
          "name": "div",
          "properties": {
            "$name": "🚀",
          },
          "scope": {},
        },
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {
            "css": {
              "bindingType": "expression",
              "code": "{
  background: 'blue'
}",
              "type": "single",
            },
          },
          "children": [
            {
              "@type": "@builder.io/mitosis/node",
              "bindings": {},
              "children": [],
              "meta": {},
              "name": "div",
              "properties": {
                "_text": "
        Number
      ",
              },
              "scope": {},
            },
          ],
          "meta": {},
          "name": "div",
          "properties": {
            "data-name": "1",
          },
          "scope": {},
        },
      ],
      "meta": {},
      "name": "section",
      "properties": {},
      "scope": {},
    },
  ],
  "context": {
    "get": {},
    "set": {},
  },
  "exports": {},
  "hooks": {
    "onEvent": [],
    "onMount": [],
  },
  "imports": [],
  "inputs": [],
  "meta": {},
  "name": "MyNormalizedLayerNamesComponent",
  "propsTypeRef": "MyNormalizedLayerNamesComponentProps",
  "refs": {},
  "state": {},
  "subComponents": [],
  "types": [
    "export interface MyNormalizedLayerNamesComponentProps {
  id: string;
}",
  ],
}
`;

exports[`Parse JSX > Typescript > onEvent 1`] = `
{
  "@type": "@builder.io/mitosis/component",
  "children": [
    {
      "@type": "@builder.io/mitosis/node",
      "bindings": {
        "ref": {
          "bindingType": "expression",
          "code": "elem",
          "type": "single",
        },
      },
      "children": [
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {},
          "children": [
            {
              "@type": "@builder.io/mitosis/node",
              "bindings": {},
              "children": [],
              "meta": {},
              "name": "div",
              "properties": {
                "_text": "Test",
              },
              "scope": {},
            },
          ],
          "meta": {},
          "name": "div",
          "properties": {},
          "scope": {},
        },
      ],
      "meta": {},
      "name": "div",
      "properties": {
        "class": "builder-embed",
      },
      "scope": {},
    },
  ],
  "context": {
    "get": {},
    "set": {},
  },
  "exports": {},
  "hooks": {
    "onEvent": [
      {
        "code": "console.log('test');
state.foo(event)",
        "elementArgName": "element",
        "eventArgName": "event",
        "eventName": "initEditingBldr",
        "isRoot": true,
        "refName": "elem",
      },
    ],
    "onMount": [
      {
        "code": "elem.dispatchEvent(new CustomEvent('initEditingBldr'))",
        "onSSR": false,
      },
    ],
  },
  "imports": [],
  "inputs": [],
  "meta": {},
  "name": "Embed",
  "refs": {
    "elem": {
      "argument": "null",
      "typeParameter": "HTMLDivElement",
    },
  },
  "state": {
    "foo": {
      "code": "foo(event) {
  console.log('test2');
}",
      "type": "method",
    },
  },
  "subComponents": [],
}
`;

exports[`Parse JSX > Typescript > onInit & onMount 1`] = `
{
  "@type": "@builder.io/mitosis/component",
  "children": [
    {
      "@type": "@builder.io/mitosis/node",
      "bindings": {},
      "children": [],
      "meta": {},
      "name": "div",
      "properties": {},
      "scope": {},
    },
  ],
  "context": {
    "get": {},
    "set": {},
  },
  "exports": {},
  "hooks": {
    "onEvent": [],
    "onInit": {
      "code": "console.log('onInit')",
    },
    "onMount": [
      {
        "code": "console.log('onMount')",
        "onSSR": false,
      },
    ],
  },
  "imports": [],
  "inputs": [],
  "meta": {},
  "name": "OnInit",
  "refs": {},
  "state": {},
  "subComponents": [],
}
`;

exports[`Parse JSX > Typescript > onInit 1`] = `
{
  "@type": "@builder.io/mitosis/component",
  "children": [
    {
      "@type": "@builder.io/mitosis/node",
      "bindings": {},
      "children": [
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {},
          "children": [],
          "meta": {},
          "name": "div",
          "properties": {
            "_text": "Default name defined by parent ",
          },
          "scope": {},
        },
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {
            "_text": {
              "bindingType": "expression",
              "code": "state.name",
              "type": "single",
            },
          },
          "children": [],
          "meta": {},
          "name": "div",
          "properties": {},
          "scope": {},
        },
      ],
      "meta": {},
      "name": "div",
      "properties": {},
      "scope": {},
    },
  ],
  "context": {
    "get": {},
    "set": {},
  },
  "exports": {
    "defaultValues": {
      "code": "export const defaultValues = {
  name: 'PatrickJS'
};",
      "isFunction": false,
      "usedInLocal": false,
    },
  },
  "hooks": {
    "onEvent": [],
    "onInit": {
      "code": "state.name = defaultValues.name || props.name;
console.log('set defaults with props')",
    },
    "onMount": [],
  },
  "imports": [],
  "inputs": [],
  "meta": {},
  "name": "OnInit",
  "propsTypeRef": "Props",
  "refs": {},
  "state": {
    "name": {
      "code": "''",
      "propertyType": "normal",
      "type": "property",
    },
  },
  "subComponents": [],
  "types": [
    "type Props = {
  name: string;
}",
  ],
}
`;

exports[`Parse JSX > Typescript > onInitPlain 1`] = `
{
  "@type": "@builder.io/mitosis/component",
  "children": [
    {
      "@type": "@builder.io/mitosis/node",
      "bindings": {},
      "children": [],
      "meta": {},
      "name": "div",
      "properties": {},
      "scope": {},
    },
  ],
  "context": {
    "get": {},
    "set": {},
  },
  "exports": {},
  "hooks": {
    "onEvent": [],
    "onInit": {
      "code": "console.log('onInit')",
    },
    "onMount": [],
  },
  "imports": [],
  "inputs": [],
  "meta": {},
  "name": "OnInitPlain",
  "refs": {},
  "state": {},
  "subComponents": [],
}
`;

exports[`Parse JSX > Typescript > onMount 1`] = `
{
  "@type": "@builder.io/mitosis/component",
  "children": [
    {
      "@type": "@builder.io/mitosis/node",
      "bindings": {},
      "children": [],
      "meta": {},
      "name": "div",
      "properties": {},
      "scope": {},
    },
  ],
  "context": {
    "get": {},
    "set": {},
  },
  "exports": {},
  "hooks": {
    "onEvent": [],
    "onMount": [
      {
        "code": "console.log('Runs on mount')",
        "onSSR": false,
      },
    ],
    "onUnMount": {
      "code": "console.log('Runs on unMount')",
    },
  },
  "imports": [],
  "inputs": [],
  "meta": {},
  "name": "Comp",
  "refs": {},
  "state": {},
  "subComponents": [],
}
`;

exports[`Parse JSX > Typescript > onMountMultiple 1`] = `
{
  "@type": "@builder.io/mitosis/component",
  "children": [
    {
      "@type": "@builder.io/mitosis/node",
      "bindings": {},
      "children": [],
      "meta": {},
      "name": "div",
      "properties": {},
      "scope": {},
    },
  ],
  "context": {
    "get": {},
    "set": {},
  },
  "exports": {},
  "hooks": {
    "onEvent": [],
    "onMount": [
      {
        "code": "console.log('Runs on mount')",
        "onSSR": false,
      },
      {
        "code": "console.log('Another one runs on Mount')",
        "onSSR": false,
      },
      {
        "code": "console.log('SSR runs on Mount')",
        "onSSR": true,
      },
    ],
  },
  "imports": [],
  "inputs": [],
  "meta": {},
  "name": "Comp",
  "refs": {},
  "state": {},
  "subComponents": [],
}
`;

exports[`Parse JSX > Typescript > onUpdate 1`] = `
{
  "@type": "@builder.io/mitosis/component",
  "children": [
    {
      "@type": "@builder.io/mitosis/node",
      "bindings": {},
      "children": [],
      "meta": {},
      "name": "div",
      "properties": {},
      "scope": {},
    },
  ],
  "context": {
    "get": {},
    "set": {},
  },
  "exports": {},
  "hooks": {
    "onEvent": [],
    "onMount": [],
    "onUpdate": [
      {
        "code": "console.log('Runs on every update/rerender')",
        "deps": "",
        "depsArray": [],
      },
    ],
  },
  "imports": [],
  "inputs": [],
  "meta": {},
  "name": "OnUpdate",
  "refs": {},
  "state": {},
  "subComponents": [],
}
`;

exports[`Parse JSX > Typescript > onUpdateWithDeps 1`] = `
{
  "@type": "@builder.io/mitosis/component",
  "children": [
    {
      "@type": "@builder.io/mitosis/node",
      "bindings": {},
      "children": [],
      "meta": {},
      "name": "div",
      "properties": {},
      "scope": {},
    },
  ],
  "context": {
    "get": {},
    "set": {},
  },
  "exports": {},
  "hooks": {
    "onEvent": [],
    "onMount": [],
    "onUpdate": [
      {
        "code": "console.log('Runs when a, b or size changes', state.a, state.b, props.size)",
        "deps": "[state.a, state.b, props.size]",
        "depsArray": [
          "state.a",
          "state.b",
          "props.size",
        ],
      },
    ],
  },
  "imports": [],
  "inputs": [],
  "meta": {},
  "name": "OnUpdateWithDeps",
  "propsTypeRef": "Props",
  "refs": {},
  "state": {
    "a": {
      "code": "'a'",
      "propertyType": "normal",
      "type": "property",
    },
    "b": {
      "code": "'b'",
      "propertyType": "normal",
      "type": "property",
    },
  },
  "subComponents": [],
  "types": [
    "type Props = {
  size: string;
}",
  ],
}
`;

exports[`Parse JSX > Typescript > preserveExportOrLocalStatement 1`] = `
{
  "@type": "@builder.io/mitosis/component",
  "children": [
    {
      "@type": "@builder.io/mitosis/node",
      "bindings": {},
      "children": [],
      "meta": {},
      "name": "div",
      "properties": {},
      "scope": {},
    },
  ],
  "context": {
    "get": {},
    "set": {},
  },
  "exports": {
    "a": {
      "code": "export const a = 3;",
      "isFunction": false,
      "usedInLocal": false,
    },
    "b": {
      "code": "const b = 3;",
      "isFunction": false,
      "usedInLocal": false,
    },
    "bar": {
      "code": "export const bar = () => {};",
      "isFunction": true,
      "usedInLocal": false,
    },
    "foo": {
      "code": "const foo = () => {};",
      "isFunction": true,
      "usedInLocal": false,
    },
    "run": {
      "code": "export function run<T>(value: T) {}",
      "isFunction": true,
      "usedInLocal": false,
    },
  },
  "hooks": {
    "onEvent": [],
    "onMount": [],
  },
  "imports": [],
  "inputs": [],
  "meta": {},
  "name": "MyBasicComponent",
  "propsTypeRef": "MyBasicComponentProps",
  "refs": {},
  "state": {},
  "subComponents": [],
  "types": [
    "type Types = {
  s: any[];
}",
    "interface IPost {
  len: number;
}",
    "export interface MyBasicComponentProps {
  id: string;
}",
  ],
}
`;

exports[`Parse JSX > Typescript > preserveTyping 1`] = `
{
  "@type": "@builder.io/mitosis/component",
  "children": [
    {
      "@type": "@builder.io/mitosis/node",
      "bindings": {},
      "children": [
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {},
          "children": [],
          "meta": {},
          "name": "div",
          "properties": {
            "_text": "Hello! I can run in React, Vue, Solid, or Liquid! ",
          },
          "scope": {},
        },
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {
            "_text": {
              "bindingType": "expression",
              "code": "props.name",
              "type": "single",
            },
          },
          "children": [],
          "meta": {},
          "name": "div",
          "properties": {},
          "scope": {},
        },
      ],
      "meta": {},
      "name": "div",
      "properties": {},
      "scope": {},
    },
  ],
  "context": {
    "get": {},
    "set": {},
  },
  "exports": {},
  "hooks": {
    "onEvent": [],
    "onMount": [],
  },
  "imports": [],
  "inputs": [],
  "meta": {},
  "name": "MyBasicComponent",
  "propsTypeRef": "MyBasicComponentProps",
  "refs": {},
  "state": {},
  "subComponents": [],
  "types": [
    "export type A = 'test'",
    "export interface C {
  n: 'test';
}",
    "type B = 'test2'",
    "interface D {
  n: 'test';
}",
    "export interface MyBasicComponentProps {
  name: string;
  age?: number;
}",
  ],
}
`;

exports[`Parse JSX > Typescript > propsDestructure 1`] = `
{
  "@type": "@builder.io/mitosis/component",
  "children": [
    {
      "@type": "@builder.io/mitosis/node",
      "bindings": {},
      "children": [
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {
            "_text": {
              "bindingType": "expression",
              "code": "props.children",
              "type": "single",
            },
          },
          "children": [],
          "meta": {},
          "name": "div",
          "properties": {},
          "scope": {},
        },
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {
            "_text": {
              "bindingType": "expression",
              "code": "props.type",
              "type": "single",
            },
          },
          "children": [],
          "meta": {},
          "name": "div",
          "properties": {},
          "scope": {},
        },
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {},
          "children": [],
          "meta": {},
          "name": "div",
          "properties": {
            "_text": "
      Hello! I can run in React, Vue, Solid, or Liquid!
    ",
          },
          "scope": {},
        },
      ],
      "meta": {},
      "name": "div",
      "properties": {},
      "scope": {},
    },
  ],
  "context": {
    "get": {},
    "set": {},
  },
  "exports": {},
  "hooks": {
    "onEvent": [],
    "onMount": [],
  },
  "imports": [],
  "inputs": [],
  "meta": {},
  "name": "MyBasicComponent",
  "propsTypeRef": "Props",
  "refs": {},
  "state": {
    "name": {
      "code": "'Decadef20'",
      "propertyType": "normal",
      "type": "property",
    },
  },
  "subComponents": [],
  "types": [
    "type Props = {
  children: any;
  type: string;
}",
  ],
}
`;

exports[`Parse JSX > Typescript > propsInterface 1`] = `
{
  "@type": "@builder.io/mitosis/component",
  "children": [
    {
      "@type": "@builder.io/mitosis/node",
      "bindings": {},
      "children": [
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {},
          "children": [],
          "meta": {},
          "name": "div",
          "properties": {
            "_text": "Hello! I can run in React, Vue, Solid, or Liquid! ",
          },
          "scope": {},
        },
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {
            "_text": {
              "bindingType": "expression",
              "code": "props.name",
              "type": "single",
            },
          },
          "children": [],
          "meta": {},
          "name": "div",
          "properties": {},
          "scope": {},
        },
      ],
      "meta": {},
      "name": "div",
      "properties": {},
      "scope": {},
    },
  ],
  "context": {
    "get": {},
    "set": {},
  },
  "exports": {},
  "hooks": {
    "onEvent": [],
    "onMount": [],
  },
  "imports": [],
  "inputs": [],
  "meta": {},
  "name": "MyBasicComponent",
  "propsTypeRef": "Person | never",
  "refs": {},
  "state": {},
  "subComponents": [],
  "types": [
    "interface Person {
  name: string;
  age?: number;
}",
  ],
}
`;

exports[`Parse JSX > Typescript > propsType 1`] = `
{
  "@type": "@builder.io/mitosis/component",
  "children": [
    {
      "@type": "@builder.io/mitosis/node",
      "bindings": {},
      "children": [
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {},
          "children": [],
          "meta": {},
          "name": "div",
          "properties": {
            "_text": "Hello! I can run in React, Vue, Solid, or Liquid! ",
          },
          "scope": {},
        },
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {
            "_text": {
              "bindingType": "expression",
              "code": "props.name",
              "type": "single",
            },
          },
          "children": [],
          "meta": {},
          "name": "div",
          "properties": {},
          "scope": {},
        },
      ],
      "meta": {},
      "name": "div",
      "properties": {},
      "scope": {},
    },
  ],
  "context": {
    "get": {},
    "set": {},
  },
  "exports": {},
  "hooks": {
    "onEvent": [],
    "onMount": [],
  },
  "imports": [],
  "inputs": [],
  "meta": {},
  "name": "MyBasicComponent",
  "propsTypeRef": "Person",
  "refs": {},
  "state": {},
  "subComponents": [],
  "types": [
    "type Person = {
  name: string;
  age?: number;
}",
  ],
}
`;

exports[`Parse JSX > Typescript > referencingFunInsideHook 1`] = `
{
  "@type": "@builder.io/mitosis/component",
  "children": [
    {
      "@type": "@builder.io/mitosis/node",
      "bindings": {},
      "children": [],
      "meta": {},
      "name": "div",
      "properties": {},
      "scope": {},
    },
  ],
  "context": {
    "get": {},
    "set": {},
  },
  "exports": {},
  "hooks": {
    "onEvent": [],
    "onMount": [],
    "onUpdate": [
      {
        "code": "state.foo({
  someOption: state.bar
})",
        "deps": "",
        "depsArray": [],
      },
    ],
  },
  "imports": [],
  "inputs": [],
  "meta": {},
  "name": "OnUpdate",
  "refs": {},
  "state": {
    "bar": {
      "code": "function bar() {}",
      "type": "function",
    },
    "foo": {
      "code": "function foo(params) {}",
      "type": "function",
    },
    "zoo": {
      "code": "function zoo() {
  const params = {
    cb: state.bar
  };
}",
      "type": "function",
    },
  },
  "subComponents": [],
}
`;

exports[`Parse JSX > Typescript > renderBlock 1`] = `
{
  "@type": "@builder.io/mitosis/component",
  "children": [
    {
      "@type": "@builder.io/mitosis/node",
      "bindings": {
        "when": {
          "bindingType": "expression",
          "code": "state.shouldWrap",
          "type": "single",
        },
      },
      "children": [
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {
            "when": {
              "bindingType": "expression",
              "code": "isEmptyHtmlElement(state.tag)",
              "type": "single",
            },
          },
          "children": [
            {
              "@type": "@builder.io/mitosis/node",
              "bindings": {
                "state.actions": {
                  "code": "state.actions",
                  "spreadType": "normal",
                  "type": "spread",
                },
                "state.attributes": {
                  "code": "state.attributes",
                  "spreadType": "normal",
                  "type": "spread",
                },
              },
              "children": [],
              "meta": {},
              "name": "state.tag",
              "properties": {},
              "scope": {},
            },
          ],
          "meta": {},
          "name": "Show",
          "properties": {},
          "scope": {},
        },
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {
            "when": {
              "bindingType": "expression",
              "code": "!isEmptyHtmlElement(state.tag) && state.repeatItemData",
              "type": "single",
            },
          },
          "children": [
            {
              "@type": "@builder.io/mitosis/node",
              "bindings": {
                "each": {
                  "bindingType": "expression",
                  "code": "state.repeatItemData",
                  "type": "single",
                },
              },
              "children": [
                {
                  "@type": "@builder.io/mitosis/node",
                  "bindings": {
                    "block": {
                      "bindingType": "expression",
                      "code": "data.block",
                      "type": "single",
                    },
                    "key": {
                      "bindingType": "expression",
                      "code": "index",
                      "type": "single",
                    },
                    "repeatContext": {
                      "bindingType": "expression",
                      "code": "data.context",
                      "type": "single",
                    },
                  },
                  "children": [],
                  "meta": {},
                  "name": "RenderRepeatedBlock",
                  "properties": {},
                  "scope": {},
                },
              ],
              "meta": {},
              "name": "For",
              "properties": {},
              "scope": {
                "forName": "data",
                "indexName": "index",
              },
            },
          ],
          "meta": {},
          "name": "Show",
          "properties": {},
          "scope": {},
        },
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {
            "when": {
              "bindingType": "expression",
              "code": "!isEmptyHtmlElement(state.tag) && !state.repeatItemData",
              "type": "single",
            },
          },
          "children": [
            {
              "@type": "@builder.io/mitosis/node",
              "bindings": {
                "state.actions": {
                  "code": "state.actions",
                  "spreadType": "normal",
                  "type": "spread",
                },
                "state.attributes": {
                  "code": "state.attributes",
                  "spreadType": "normal",
                  "type": "spread",
                },
              },
              "children": [
                {
                  "@type": "@builder.io/mitosis/node",
                  "bindings": {
                    "state.renderComponentProps": {
                      "code": "state.renderComponentProps",
                      "spreadType": "normal",
                      "type": "spread",
                    },
                  },
                  "children": [],
                  "meta": {},
                  "name": "state.renderComponentTag",
                  "properties": {},
                  "scope": {},
                },
                {
                  "@type": "@builder.io/mitosis/node",
                  "bindings": {
                    "each": {
                      "bindingType": "expression",
                      "code": "state.childrenWithoutParentComponent",
                      "type": "single",
                    },
                  },
                  "children": [
                    {
                      "@type": "@builder.io/mitosis/node",
                      "bindings": {
                        "block": {
                          "bindingType": "expression",
                          "code": "child",
                          "type": "single",
                        },
                        "context": {
                          "bindingType": "expression",
                          "code": "state.childrenContext",
                          "type": "single",
                        },
                        "key": {
                          "bindingType": "expression",
                          "code": "'render-block-' + child.id",
                          "type": "single",
                        },
                      },
                      "children": [],
                      "meta": {},
                      "name": "RenderBlock",
                      "properties": {},
                      "scope": {},
                    },
                  ],
                  "meta": {},
                  "name": "For",
                  "properties": {},
                  "scope": {
                    "forName": "child",
                  },
                },
                {
                  "@type": "@builder.io/mitosis/node",
                  "bindings": {
                    "each": {
                      "bindingType": "expression",
                      "code": "state.childrenWithoutParentComponent",
                      "type": "single",
                    },
                  },
                  "children": [
                    {
                      "@type": "@builder.io/mitosis/node",
                      "bindings": {
                        "block": {
                          "bindingType": "expression",
                          "code": "child",
                          "type": "single",
                        },
                        "context": {
                          "bindingType": "expression",
                          "code": "state.childrenContext",
                          "type": "single",
                        },
                        "key": {
                          "bindingType": "expression",
                          "code": "'block-style-' + child.id",
                          "type": "single",
                        },
                      },
                      "children": [],
                      "meta": {},
                      "name": "BlockStyles",
                      "properties": {},
                      "scope": {},
                    },
                  ],
                  "meta": {},
                  "name": "For",
                  "properties": {},
                  "scope": {
                    "forName": "child",
                  },
                },
              ],
              "meta": {},
              "name": "state.tag",
              "properties": {},
              "scope": {},
            },
          ],
          "meta": {},
          "name": "Show",
          "properties": {},
          "scope": {},
        },
      ],
      "meta": {
        "else": {
          "@type": "@builder.io/mitosis/node",
          "bindings": {
            "state.renderComponentProps": {
              "code": "state.renderComponentProps",
              "spreadType": "normal",
              "type": "spread",
            },
          },
          "children": [],
          "meta": {},
          "name": "state.renderComponentTag",
          "properties": {},
          "scope": {},
        },
      },
      "name": "Show",
      "properties": {},
      "scope": {},
    },
  ],
  "context": {
    "get": {},
    "set": {},
  },
  "exports": {},
  "hooks": {
    "onEvent": [],
    "onMount": [],
  },
  "imports": [
    {
      "importKind": "value",
      "imports": {
        "TARGET": "TARGET",
      },
      "path": "../../constants/target.js",
    },
    {
      "importKind": "type",
      "imports": {
        "BuilderContextInterface": "BuilderContextInterface",
        "RegisteredComponent": "RegisteredComponent",
      },
      "path": "../../context/types.js",
    },
    {
      "importKind": "value",
      "imports": {
        "evaluate": "evaluate",
      },
      "path": "../../functions/evaluate.js",
    },
    {
      "importKind": "value",
      "imports": {
        "extractTextStyles": "extractTextStyles",
      },
      "path": "../../functions/extract-text-styles.js",
    },
    {
      "importKind": "value",
      "imports": {
        "getBlockActions": "getBlockActions",
      },
      "path": "../../functions/get-block-actions.js",
    },
    {
      "importKind": "value",
      "imports": {
        "getBlockComponentOptions": "getBlockComponentOptions",
      },
      "path": "../../functions/get-block-component-options.js",
    },
    {
      "importKind": "value",
      "imports": {
        "getBlockProperties": "getBlockProperties",
      },
      "path": "../../functions/get-block-properties.js",
    },
    {
      "importKind": "value",
      "imports": {
        "getBlockTag": "getBlockTag",
      },
      "path": "../../functions/get-block-tag.js",
    },
    {
      "importKind": "value",
      "imports": {
        "getProcessedBlock": "getProcessedBlock",
      },
      "path": "../../functions/get-processed-block.js",
    },
    {
      "importKind": "value",
      "imports": {
        "getReactNativeBlockStyles": "getReactNativeBlockStyles",
      },
      "path": "../../functions/get-react-native-block-styles.js",
    },
    {
      "importKind": "type",
      "imports": {
        "BuilderBlock": "BuilderBlock",
      },
      "path": "../../types/builder-block.js",
    },
    {
      "importKind": "type",
      "imports": {
        "Nullable": "Nullable",
      },
      "path": "../../types/typescript.js",
    },
    {
      "importKind": "value",
      "imports": {
        "BlockStyles": "default",
      },
      "path": "./block-styles.lite",
    },
    {
      "importKind": "value",
      "imports": {
        "isEmptyHtmlElement": "isEmptyHtmlElement",
      },
      "path": "./render-block.helpers.js",
    },
    {
      "importKind": "value",
      "imports": {
        "RenderComponentWithContext": "default",
      },
      "path": "./render-component-with-context.lite",
    },
    {
      "importKind": "type",
      "imports": {
        "RenderComponentProps": "RenderComponentProps",
      },
      "path": "./render-component.lite",
    },
    {
      "importKind": "value",
      "imports": {
        "RenderComponent": "default",
      },
      "path": "./render-component.lite",
    },
    {
      "importKind": "value",
      "imports": {
        "RenderRepeatedBlock": "default",
      },
      "path": "./render-repeated-block.lite",
    },
    {
      "importKind": "type",
      "imports": {
        "RepeatData": "RepeatData",
      },
      "path": "./types.js",
    },
  ],
  "inputs": [],
  "meta": {},
  "name": "RenderBlock",
  "propsTypeRef": "RenderBlockProps",
  "refs": {},
  "state": {
    "actions": {
      "code": "get actions() {
  return getBlockActions({
    block: state.useBlock,
    state: props.context.state,
    context: props.context.context
  });
}",
      "type": "getter",
    },
    "attributes": {
      "code": "get attributes() {
  const blockProperties = getBlockProperties(state.useBlock);
  return { ...blockProperties,
    ...(TARGET === 'reactNative' ? {
      style: getReactNativeBlockStyles({
        block: state.useBlock,
        context: props.context,
        blockStyles: blockProperties.style
      })
    } : {})
  };
}",
      "type": "getter",
    },
    "childrenContext": {
      "code": "get childrenContext() {
  return {
    apiKey: props.context.apiKey,
    state: props.context.state,
    content: props.context.content,
    context: props.context.context,
    registeredComponents: props.context.registeredComponents,
    inheritedStyles: state.inheritedTextStyles
  };
}",
      "type": "getter",
    },
    "childrenWithoutParentComponent": {
      "code": "get childrenWithoutParentComponent() {
  /**
   * When there is no \`componentRef\`, there might still be children that need to be rendered. In this case,
   * we render them outside of \`componentRef\`.
   * NOTE: We make sure not to render this if \`repeatItemData\` is non-null, because that means we are rendering an array of
   * blocks, and the children will be repeated within those blocks.
   */
  const shouldRenderChildrenOutsideRef = !state.component?.component && !state.repeatItemData;
  return shouldRenderChildrenOutsideRef ? state.useChildren : [];
}",
      "type": "getter",
    },
    "component": {
      "code": "get component() {
  const componentName = getProcessedBlock({
    block: props.block,
    state: props.context.state,
    context: props.context.context,
    shouldEvaluateBindings: false
  }).component?.name;

  if (!componentName) {
    return null;
  }

  const ref = props.context.registeredComponents[componentName];

  if (!ref) {
    // TODO: Public doc page with more info about this message
    console.warn(\`
          Could not find a registered component named \\"\${componentName}\\". 
          If you registered it, is the file that registered it imported by the file that needs to render it?\`);
    return undefined;
  } else {
    return ref;
  }
}",
      "type": "getter",
    },
    "inheritedTextStyles": {
      "code": "get inheritedTextStyles() {
  if (TARGET !== 'reactNative') {
    return {};
  }

  const styles = getReactNativeBlockStyles({
    block: state.useBlock,
    context: props.context,
    blockStyles: state.attributes.style
  });
  return extractTextStyles(styles);
}",
      "type": "getter",
    },
    "renderComponentProps": {
      "code": "get renderComponentProps() {
  return {
    blockChildren: state.useChildren,
    componentRef: state.component?.component,
    componentOptions: { ...getBlockComponentOptions(state.useBlock),

      /**
       * These attributes are passed to the wrapper element when there is one. If \`noWrap\` is set to true, then
       * they are provided to the component itself directly.
       */
      ...(state.shouldWrap ? {} : {
        attributes: { ...state.attributes,
          ...state.actions
        }
      }),
      customBreakpoints: state.childrenContext?.content?.meta?.breakpoints
    },
    context: state.childrenContext
  };
}",
      "type": "getter",
    },
    "renderComponentTag": {
      "code": "get renderComponentTag() {
  if (TARGET === 'reactNative') {
    return RenderComponentWithContext;
  } else if (TARGET === 'vue3') {
    // vue3 expects a string for the component tag
    return 'RenderComponent';
  } else {
    return RenderComponent;
  }
}",
      "type": "getter",
    },
    "repeatItemData": {
      "code": "get repeatItemData() {
  /**
   * we don't use \`state.useBlock\` here because the processing done within its logic includes evaluating the block's bindings,
   * which will not work if there is a repeat.
   */
  const {
    repeat,
    ...blockWithoutRepeat
  } = props.block;

  if (!repeat?.collection) {
    return undefined;
  }

  const itemsArray = evaluate({
    code: repeat.collection,
    state: props.context.state,
    context: props.context.context
  });

  if (!Array.isArray(itemsArray)) {
    return undefined;
  }

  const collectionName = repeat.collection.split('.').pop();
  const itemNameToUse = repeat.itemName || (collectionName ? collectionName + 'Item' : 'item');
  const repeatArray = itemsArray.map<RepeatData>((item, index) => ({
    context: { ...props.context,
      state: { ...props.context.state,
        $index: index,
        $item: item,
        [itemNameToUse]: item,
        [\`$\${itemNameToUse}Index\`]: index
      }
    },
    block: blockWithoutRepeat
  }));
  return repeatArray;
}",
      "type": "getter",
    },
    "shouldWrap": {
      "code": "get shouldWrap() {
  return !state.component?.noWrap;
}",
      "type": "getter",
    },
    "tag": {
      "code": "get tag() {
  return getBlockTag(state.useBlock);
}",
      "type": "getter",
    },
    "useBlock": {
      "code": "get useBlock() {
  return state.repeatItemData ? props.block : getProcessedBlock({
    block: props.block,
    state: props.context.state,
    context: props.context.context,
    shouldEvaluateBindings: true
  });
}",
      "type": "getter",
    },
    "useChildren": {
      "code": "get useChildren() {
  // TO-DO: When should \`canHaveChildren\` dictate rendering?
  // This is currently commented out because some Builder components (e.g. Box) do not have \`canHaveChildren: true\`,
  // but still receive and need to render children.
  // return state.componentInfo?.canHaveChildren ? state.useBlock.children : [];
  return state.useBlock.children ?? [];
}",
      "type": "getter",
    },
  },
  "subComponents": [],
  "types": [
    "export type RenderBlockProps = {
  block: BuilderBlock;
  context: BuilderContextInterface;
}",
  ],
}
`;

exports[`Parse JSX > Typescript > renderContentExample 1`] = `
{
  "@type": "@builder.io/mitosis/component",
  "children": [
    {
      "@type": "@builder.io/mitosis/node",
      "bindings": {
        "css": {
          "bindingType": "expression",
          "code": "{
  display: 'flex',
  flexDirection: 'columns'
}",
          "type": "single",
        },
        "onClick": {
          "bindingType": "function",
          "code": "trackClick(props.content.id)",
          "type": "single",
        },
      },
      "children": [
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {
            "blocks": {
              "bindingType": "expression",
              "code": "props.content.blocks",
              "type": "single",
            },
          },
          "children": [],
          "meta": {},
          "name": "RenderBlocks",
          "properties": {},
          "scope": {},
        },
      ],
      "meta": {},
      "name": "div",
      "properties": {},
      "scope": {},
    },
  ],
  "context": {
    "get": {},
    "set": {
      "@dummy/context.lite:default": {
        "name": "BuilderContext",
        "value": {
          "content": {
            "code": "get content() {
  return 3;
}",
            "type": "getter",
          },
          "registeredComponents": {
            "code": "get registeredComponents() {
  return 4;
}",
            "type": "getter",
          },
        },
      },
    },
  },
  "exports": {},
  "hooks": {
    "onEvent": [],
    "onMount": [
      {
        "code": "sendComponentsToVisualEditor(props.customComponents)",
        "onSSR": false,
      },
    ],
    "onUpdate": [
      {
        "code": "dispatchNewContentToVisualEditor(props.content)",
        "deps": "[props.content]",
        "depsArray": [
          "props.content",
        ],
      },
    ],
  },
  "imports": [
    {
      "importKind": "value",
      "imports": {
        "BuilderContext": "default",
      },
      "path": "@dummy/context.lite",
    },
    {
      "importKind": "value",
      "imports": {
        "dispatchNewContentToVisualEditor": "dispatchNewContentToVisualEditor",
        "sendComponentsToVisualEditor": "sendComponentsToVisualEditor",
        "trackClick": "trackClick",
      },
      "path": "@dummy/injection-js",
    },
    {
      "importKind": "value",
      "imports": {
        "RenderBlocks": "default",
      },
      "path": "@dummy/RenderBlocks.lite.tsx",
    },
  ],
  "inputs": [],
  "meta": {},
  "name": "RenderContent",
  "propsTypeRef": "Props",
  "refs": {},
  "state": {},
  "subComponents": [],
  "types": [
    "type Props = {
  customComponents: string[];
  content: {
    blocks: any[];
    id: string;
  };
}",
  ],
}
`;

exports[`Parse JSX > Typescript > rootFragmentMultiNode 1`] = `
{
  "@type": "@builder.io/mitosis/component",
  "children": [
    {
      "@type": "@builder.io/mitosis/node",
      "bindings": {},
      "children": [
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {
            "when": {
              "bindingType": "expression",
              "code": "props.link",
              "type": "single",
            },
          },
          "children": [
            {
              "@type": "@builder.io/mitosis/node",
              "bindings": {
                "href": {
                  "bindingType": "expression",
                  "code": "props.link",
                  "type": "single",
                },
                "props.attributes": {
                  "code": "props.attributes",
                  "spreadType": "normal",
                  "type": "spread",
                },
                "target": {
                  "bindingType": "expression",
                  "code": "props.openLinkInNewTab ? '_blank' : undefined",
                  "type": "single",
                },
              },
              "children": [
                {
                  "@type": "@builder.io/mitosis/node",
                  "bindings": {
                    "_text": {
                      "bindingType": "expression",
                      "code": "props.text",
                      "type": "single",
                    },
                  },
                  "children": [],
                  "meta": {},
                  "name": "div",
                  "properties": {},
                  "scope": {},
                },
              ],
              "meta": {},
              "name": "a",
              "properties": {},
              "scope": {},
            },
          ],
          "meta": {},
          "name": "Show",
          "properties": {},
          "scope": {},
        },
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {
            "when": {
              "bindingType": "expression",
              "code": "!props.link",
              "type": "single",
            },
          },
          "children": [
            {
              "@type": "@builder.io/mitosis/node",
              "bindings": {
                "props.attributes": {
                  "code": "props.attributes",
                  "spreadType": "normal",
                  "type": "spread",
                },
              },
              "children": [
                {
                  "@type": "@builder.io/mitosis/node",
                  "bindings": {
                    "_text": {
                      "bindingType": "expression",
                      "code": "props.text",
                      "type": "single",
                    },
                  },
                  "children": [],
                  "meta": {},
                  "name": "div",
                  "properties": {},
                  "scope": {},
                },
              ],
              "meta": {},
              "name": "button",
              "properties": {
                "type": "button",
              },
              "scope": {},
            },
          ],
          "meta": {},
          "name": "Show",
          "properties": {},
          "scope": {},
        },
      ],
      "meta": {},
      "name": "Fragment",
      "properties": {},
      "scope": {},
    },
  ],
  "context": {
    "get": {},
    "set": {},
  },
  "exports": {},
  "hooks": {
    "onEvent": [],
    "onMount": [],
  },
  "imports": [],
  "inputs": [],
  "meta": {},
  "name": "Button",
  "propsTypeRef": "ButtonProps",
  "refs": {},
  "state": {},
  "subComponents": [],
  "types": [
    "export interface ButtonProps {
  attributes?: any;
  text?: string;
  link?: string;
  openLinkInNewTab?: boolean;
}",
  ],
}
`;

exports[`Parse JSX > Typescript > rootShow 1`] = `
{
  "@type": "@builder.io/mitosis/component",
  "children": [
    {
      "@type": "@builder.io/mitosis/node",
      "bindings": {
        "when": {
          "bindingType": "expression",
          "code": "props.foo === 'bar'",
          "type": "single",
        },
      },
      "children": [
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {},
          "children": [
            {
              "@type": "@builder.io/mitosis/node",
              "bindings": {},
              "children": [],
              "meta": {},
              "name": "div",
              "properties": {
                "_text": "Bar",
              },
              "scope": {},
            },
          ],
          "meta": {},
          "name": "div",
          "properties": {},
          "scope": {},
        },
      ],
      "meta": {
        "else": {
          "@type": "@builder.io/mitosis/node",
          "bindings": {},
          "children": [
            {
              "@type": "@builder.io/mitosis/node",
              "bindings": {},
              "children": [],
              "meta": {},
              "name": "div",
              "properties": {
                "_text": "Foo",
              },
              "scope": {},
            },
          ],
          "meta": {},
          "name": "div",
          "properties": {},
          "scope": {},
        },
      },
      "name": "Show",
      "properties": {},
      "scope": {},
    },
  ],
  "context": {
    "get": {},
    "set": {},
  },
  "exports": {},
  "hooks": {
    "onEvent": [],
    "onMount": [],
  },
  "imports": [],
  "inputs": [],
  "meta": {},
  "name": "RenderStyles",
  "propsTypeRef": "RenderStylesProps",
  "refs": {},
  "state": {},
  "subComponents": [],
  "types": [
    "export interface RenderStylesProps {
  foo: string;
}",
  ],
}
`;

exports[`Parse JSX > Typescript > self-referencing component 1`] = `
{
  "@type": "@builder.io/mitosis/component",
  "children": [
    {
      "@type": "@builder.io/mitosis/node",
      "bindings": {},
      "children": [
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {
            "_text": {
              "bindingType": "expression",
              "code": "props.name",
              "type": "single",
            },
          },
          "children": [],
          "meta": {},
          "name": "div",
          "properties": {},
          "scope": {},
        },
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {
            "when": {
              "bindingType": "expression",
              "code": "props.name === 'Batman'",
              "type": "single",
            },
          },
          "children": [
            {
              "@type": "@builder.io/mitosis/node",
              "bindings": {},
              "children": [],
              "meta": {},
              "name": "MyComponent",
              "properties": {
                "name": "Bruce Wayne",
              },
              "scope": {},
            },
          ],
          "meta": {},
          "name": "Show",
          "properties": {},
          "scope": {},
        },
      ],
      "meta": {},
      "name": "div",
      "properties": {},
      "scope": {},
    },
  ],
  "context": {
    "get": {},
    "set": {},
  },
  "exports": {},
  "hooks": {
    "onEvent": [],
    "onMount": [],
  },
  "imports": [],
  "inputs": [],
  "meta": {},
  "name": "MyComponent",
  "propsTypeRef": "any",
  "refs": {},
  "state": {},
  "subComponents": [],
}
`;

exports[`Parse JSX > Typescript > self-referencing component with children 1`] = `
{
  "@type": "@builder.io/mitosis/component",
  "children": [
    {
      "@type": "@builder.io/mitosis/node",
      "bindings": {},
      "children": [
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {
            "_text": {
              "bindingType": "expression",
              "code": "props.name",
              "type": "single",
            },
          },
          "children": [],
          "meta": {},
          "name": "div",
          "properties": {},
          "scope": {},
        },
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {
            "_text": {
              "bindingType": "expression",
              "code": "props.children",
              "type": "single",
            },
          },
          "children": [],
          "meta": {},
          "name": "div",
          "properties": {},
          "scope": {},
        },
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {
            "when": {
              "bindingType": "expression",
              "code": "props.name === 'Batman'",
              "type": "single",
            },
          },
          "children": [
            {
              "@type": "@builder.io/mitosis/node",
              "bindings": {},
              "children": [
                {
                  "@type": "@builder.io/mitosis/node",
                  "bindings": {},
                  "children": [
                    {
                      "@type": "@builder.io/mitosis/node",
                      "bindings": {},
                      "children": [],
                      "meta": {},
                      "name": "div",
                      "properties": {
                        "_text": "Wayne",
                      },
                      "scope": {},
                    },
                  ],
                  "meta": {},
                  "name": "div",
                  "properties": {},
                  "scope": {},
                },
              ],
              "meta": {},
              "name": "MyComponent",
              "properties": {
                "name": "Bruce",
              },
              "scope": {},
            },
          ],
          "meta": {},
          "name": "Show",
          "properties": {},
          "scope": {},
        },
      ],
      "meta": {},
      "name": "div",
      "properties": {},
      "scope": {},
    },
  ],
  "context": {
    "get": {},
    "set": {},
  },
  "exports": {},
  "hooks": {
    "onEvent": [],
    "onMount": [],
  },
  "imports": [],
  "inputs": [],
  "meta": {},
  "name": "MyComponent",
  "propsTypeRef": "any",
  "refs": {},
  "state": {},
  "subComponents": [],
}
`;

exports[`Parse JSX > Typescript > setState 1`] = `
{
  "@type": "@builder.io/mitosis/component",
  "children": [
    {
      "@type": "@builder.io/mitosis/node",
      "bindings": {},
      "children": [
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {
            "onClick": {
              "bindingType": "function",
              "code": "state.someFn()",
              "type": "single",
            },
          },
          "children": [
            {
              "@type": "@builder.io/mitosis/node",
              "bindings": {},
              "children": [],
              "meta": {},
              "name": "div",
              "properties": {
                "_text": "Click me",
              },
              "scope": {},
            },
          ],
          "meta": {},
          "name": "button",
          "properties": {},
          "scope": {},
        },
      ],
      "meta": {},
      "name": "div",
      "properties": {},
      "scope": {},
    },
  ],
  "context": {
    "get": {},
    "set": {},
  },
  "exports": {},
  "hooks": {
    "onEvent": [],
    "onMount": [],
  },
  "imports": [],
  "inputs": [],
  "meta": {},
  "name": "SetState",
  "refs": {},
  "state": {
    "n": {
      "code": "['123']",
      "propertyType": "reactive",
      "type": "property",
    },
    "someFn": {
      "code": "someFn() {
  state.n.value[0] = '123';
}",
      "type": "method",
    },
  },
  "subComponents": [],
}
`;

exports[`Parse JSX > Typescript > showExpressions 1`] = `
{
  "@type": "@builder.io/mitosis/component",
  "children": [
    {
      "@type": "@builder.io/mitosis/node",
      "bindings": {},
      "children": [
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {
            "when": {
              "bindingType": "expression",
              "code": "props.conditionA",
              "type": "single",
            },
          },
          "children": [
            {
              "@type": "@builder.io/mitosis/node",
              "bindings": {},
              "children": [],
              "meta": {},
              "name": "div",
              "properties": {
                "_text": "Content0",
              },
              "scope": {},
            },
          ],
          "meta": {
            "else": {
              "@type": "@builder.io/mitosis/node",
              "bindings": {},
              "children": [],
              "meta": {},
              "name": "div",
              "properties": {
                "_text": "ContentA",
              },
              "scope": {},
            },
          },
          "name": "Show",
          "properties": {},
          "scope": {},
        },
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {
            "when": {
              "bindingType": "expression",
              "code": "props.conditionA",
              "type": "single",
            },
          },
          "children": [
            {
              "@type": "@builder.io/mitosis/node",
              "bindings": {},
              "children": [],
              "meta": {},
              "name": "div",
              "properties": {
                "_text": "ContentA",
              },
              "scope": {},
            },
          ],
          "meta": {},
          "name": "Show",
          "properties": {},
          "scope": {},
        },
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {
            "when": {
              "bindingType": "expression",
              "code": "props.conditionA",
              "type": "single",
            },
          },
          "children": [],
          "meta": {
            "else": {
              "@type": "@builder.io/mitosis/node",
              "bindings": {},
              "children": [],
              "meta": {},
              "name": "div",
              "properties": {
                "_text": "ContentA",
              },
              "scope": {},
            },
          },
          "name": "Show",
          "properties": {},
          "scope": {},
        },
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {
            "when": {
              "bindingType": "expression",
              "code": "props.conditionA",
              "type": "single",
            },
          },
          "children": [
            {
              "@type": "@builder.io/mitosis/node",
              "bindings": {},
              "children": [],
              "meta": {},
              "name": "div",
              "properties": {
                "_text": "ContentB",
              },
              "scope": {},
            },
          ],
          "meta": {
            "else": {
              "@type": "@builder.io/mitosis/node",
              "bindings": {
                "_text": {
                  "bindingType": "expression",
                  "code": "undefined",
                  "type": "single",
                },
              },
              "children": [],
              "meta": {},
              "name": "div",
              "properties": {},
              "scope": {},
            },
          },
          "name": "Show",
          "properties": {},
          "scope": {},
        },
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {
            "when": {
              "bindingType": "expression",
              "code": "props.conditionA",
              "type": "single",
            },
          },
          "children": [
            {
              "@type": "@builder.io/mitosis/node",
              "bindings": {
                "_text": {
                  "bindingType": "expression",
                  "code": "undefined",
                  "type": "single",
                },
              },
              "children": [],
              "meta": {},
              "name": "div",
              "properties": {},
              "scope": {},
            },
          ],
          "meta": {
            "else": {
              "@type": "@builder.io/mitosis/node",
              "bindings": {},
              "children": [],
              "meta": {},
              "name": "div",
              "properties": {
                "_text": "ContentB",
              },
              "scope": {},
            },
          },
          "name": "Show",
          "properties": {},
          "scope": {},
        },
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {
            "when": {
              "bindingType": "expression",
              "code": "props.conditionA",
              "type": "single",
            },
          },
          "children": [
            {
              "@type": "@builder.io/mitosis/node",
              "bindings": {},
              "children": [],
              "meta": {},
              "name": "div",
              "properties": {
                "_text": "ContentC",
              },
              "scope": {},
            },
          ],
          "meta": {},
          "name": "Show",
          "properties": {},
          "scope": {},
        },
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {
            "when": {
              "bindingType": "expression",
              "code": "props.conditionA",
              "type": "single",
            },
          },
          "children": [],
          "meta": {
            "else": {
              "@type": "@builder.io/mitosis/node",
              "bindings": {},
              "children": [],
              "meta": {},
              "name": "div",
              "properties": {
                "_text": "ContentC",
              },
              "scope": {},
            },
          },
          "name": "Show",
          "properties": {},
          "scope": {},
        },
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {
            "when": {
              "bindingType": "expression",
              "code": "props.conditionA",
              "type": "single",
            },
          },
          "children": [
            {
              "@type": "@builder.io/mitosis/node",
              "bindings": {},
              "children": [],
              "meta": {},
              "name": "div",
              "properties": {
                "_text": "ContentD",
              },
              "scope": {},
            },
          ],
          "meta": {},
          "name": "Show",
          "properties": {},
          "scope": {},
        },
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {
            "when": {
              "bindingType": "expression",
              "code": "props.conditionA",
              "type": "single",
            },
          },
          "children": [],
          "meta": {
            "else": {
              "@type": "@builder.io/mitosis/node",
              "bindings": {},
              "children": [],
              "meta": {},
              "name": "div",
              "properties": {
                "_text": "ContentD",
              },
              "scope": {},
            },
          },
          "name": "Show",
          "properties": {},
          "scope": {},
        },
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {
            "when": {
              "bindingType": "expression",
              "code": "props.conditionA",
              "type": "single",
            },
          },
          "children": [
            {
              "@type": "@builder.io/mitosis/node",
              "bindings": {},
              "children": [],
              "meta": {},
              "name": "div",
              "properties": {
                "_text": "ContentE",
              },
              "scope": {},
            },
          ],
          "meta": {
            "else": {
              "@type": "@builder.io/mitosis/node",
              "bindings": {},
              "children": [],
              "meta": {},
              "name": "div",
              "properties": {
                "_text": "hello",
              },
              "scope": {},
            },
          },
          "name": "Show",
          "properties": {},
          "scope": {},
        },
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {
            "when": {
              "bindingType": "expression",
              "code": "props.conditionA",
              "type": "single",
            },
          },
          "children": [
            {
              "@type": "@builder.io/mitosis/node",
              "bindings": {},
              "children": [],
              "meta": {},
              "name": "div",
              "properties": {
                "_text": "hello",
              },
              "scope": {},
            },
          ],
          "meta": {
            "else": {
              "@type": "@builder.io/mitosis/node",
              "bindings": {},
              "children": [],
              "meta": {},
              "name": "div",
              "properties": {
                "_text": "ContentE",
              },
              "scope": {},
            },
          },
          "name": "Show",
          "properties": {},
          "scope": {},
        },
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {
            "when": {
              "bindingType": "expression",
              "code": "props.conditionA",
              "type": "single",
            },
          },
          "children": [
            {
              "@type": "@builder.io/mitosis/node",
              "bindings": {},
              "children": [],
              "meta": {},
              "name": "div",
              "properties": {
                "_text": "ContentF",
              },
              "scope": {},
            },
          ],
          "meta": {
            "else": {
              "@type": "@builder.io/mitosis/node",
              "bindings": {},
              "children": [],
              "meta": {},
              "name": "div",
              "properties": {
                "_text": "123",
              },
              "scope": {},
            },
          },
          "name": "Show",
          "properties": {},
          "scope": {},
        },
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {
            "when": {
              "bindingType": "expression",
              "code": "props.conditionA",
              "type": "single",
            },
          },
          "children": [
            {
              "@type": "@builder.io/mitosis/node",
              "bindings": {},
              "children": [],
              "meta": {},
              "name": "div",
              "properties": {
                "_text": "123",
              },
              "scope": {},
            },
          ],
          "meta": {
            "else": {
              "@type": "@builder.io/mitosis/node",
              "bindings": {},
              "children": [],
              "meta": {},
              "name": "div",
              "properties": {
                "_text": "ContentF",
              },
              "scope": {},
            },
          },
          "name": "Show",
          "properties": {},
          "scope": {},
        },
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {
            "when": {
              "bindingType": "expression",
              "code": "props.conditionA === 'Default'",
              "type": "single",
            },
          },
          "children": [
            {
              "@type": "@builder.io/mitosis/node",
              "bindings": {},
              "children": [],
              "meta": {},
              "name": "div",
              "properties": {
                "_text": "4mb",
              },
              "scope": {},
            },
          ],
          "meta": {
            "else": {
              "@type": "@builder.io/mitosis/node",
              "bindings": {
                "when": {
                  "bindingType": "expression",
                  "code": "props.conditionB === 'Complete'",
                  "type": "single",
                },
              },
              "children": [
                {
                  "@type": "@builder.io/mitosis/node",
                  "bindings": {},
                  "children": [],
                  "meta": {},
                  "name": "div",
                  "properties": {
                    "_text": "20mb",
                  },
                  "scope": {},
                },
              ],
              "meta": {
                "else": {
                  "@type": "@builder.io/mitosis/node",
                  "bindings": {},
                  "children": [],
                  "meta": {},
                  "name": "div",
                  "properties": {
                    "_text": "9mb",
                  },
                  "scope": {},
                },
              },
              "name": "Show",
              "properties": {},
              "scope": {},
            },
          },
          "name": "Show",
          "properties": {},
          "scope": {},
        },
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {
            "when": {
              "bindingType": "expression",
              "code": "props.conditionA === 'Default'",
              "type": "single",
            },
          },
          "children": [
            {
              "@type": "@builder.io/mitosis/node",
              "bindings": {
                "when": {
                  "bindingType": "expression",
                  "code": "props.conditionB === 'Complete'",
                  "type": "single",
                },
              },
              "children": [
                {
                  "@type": "@builder.io/mitosis/node",
                  "bindings": {},
                  "children": [],
                  "meta": {},
                  "name": "div",
                  "properties": {
                    "_text": "20mb",
                  },
                  "scope": {},
                },
              ],
              "meta": {
                "else": {
                  "@type": "@builder.io/mitosis/node",
                  "bindings": {},
                  "children": [],
                  "meta": {},
                  "name": "div",
                  "properties": {
                    "_text": "9mb",
                  },
                  "scope": {},
                },
              },
              "name": "Show",
              "properties": {},
              "scope": {},
            },
          ],
          "meta": {
            "else": {
              "@type": "@builder.io/mitosis/node",
              "bindings": {},
              "children": [],
              "meta": {},
              "name": "div",
              "properties": {
                "_text": "4mb",
              },
              "scope": {},
            },
          },
          "name": "Show",
          "properties": {},
          "scope": {},
        },
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {
            "when": {
              "bindingType": "expression",
              "code": "props.conditionA === 'Default'",
              "type": "single",
            },
          },
          "children": [
            {
              "@type": "@builder.io/mitosis/node",
              "bindings": {
                "when": {
                  "bindingType": "expression",
                  "code": "props.conditionB === 'Complete'",
                  "type": "single",
                },
              },
              "children": [
                {
                  "@type": "@builder.io/mitosis/node",
                  "bindings": {},
                  "children": [
                    {
                      "@type": "@builder.io/mitosis/node",
                      "bindings": {},
                      "children": [],
                      "meta": {},
                      "name": "div",
                      "properties": {
                        "_text": "complete",
                      },
                      "scope": {},
                    },
                  ],
                  "meta": {},
                  "name": "div",
                  "properties": {},
                  "scope": {},
                },
              ],
              "meta": {
                "else": {
                  "@type": "@builder.io/mitosis/node",
                  "bindings": {},
                  "children": [],
                  "meta": {},
                  "name": "div",
                  "properties": {
                    "_text": "9mb",
                  },
                  "scope": {},
                },
              },
              "name": "Show",
              "properties": {},
              "scope": {},
            },
          ],
          "meta": {
            "else": {
              "@type": "@builder.io/mitosis/node",
              "bindings": {
                "when": {
                  "bindingType": "expression",
                  "code": "props.conditionC === 'Complete'",
                  "type": "single",
                },
              },
              "children": [
                {
                  "@type": "@builder.io/mitosis/node",
                  "bindings": {},
                  "children": [],
                  "meta": {},
                  "name": "div",
                  "properties": {
                    "_text": "dff",
                  },
                  "scope": {},
                },
              ],
              "meta": {
                "else": {
                  "@type": "@builder.io/mitosis/node",
                  "bindings": {},
                  "children": [
                    {
                      "@type": "@builder.io/mitosis/node",
                      "bindings": {},
                      "children": [],
                      "meta": {},
                      "name": "div",
                      "properties": {
                        "_text": "complete else",
                      },
                      "scope": {},
                    },
                  ],
                  "meta": {},
                  "name": "div",
                  "properties": {},
                  "scope": {},
                },
              },
              "name": "Show",
              "properties": {},
              "scope": {},
            },
          },
          "name": "Show",
          "properties": {},
          "scope": {},
        },
      ],
      "meta": {},
      "name": "div",
      "properties": {},
      "scope": {},
    },
  ],
  "context": {
    "get": {},
    "set": {},
  },
  "exports": {},
  "hooks": {
    "onEvent": [],
    "onMount": [],
  },
  "imports": [],
  "inputs": [],
  "meta": {},
  "name": "ShowWithOtherValues",
  "propsTypeRef": "Props",
  "refs": {},
  "state": {},
  "subComponents": [],
  "types": [
    "interface Props {
  conditionA: boolean;
  conditionB: boolean;
}",
  ],
}
`;

exports[`Parse JSX > Typescript > showWithFor 1`] = `
{
  "@type": "@builder.io/mitosis/component",
  "children": [
    {
      "@type": "@builder.io/mitosis/node",
      "bindings": {
        "when": {
          "bindingType": "expression",
          "code": "props.conditionA",
          "type": "single",
        },
      },
      "children": [
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {
            "each": {
              "bindingType": "expression",
              "code": "props.items",
              "type": "single",
            },
          },
          "children": [
            {
              "@type": "@builder.io/mitosis/node",
              "bindings": {
                "key": {
                  "bindingType": "expression",
                  "code": "idx",
                  "type": "single",
                },
              },
              "children": [
                {
                  "@type": "@builder.io/mitosis/node",
                  "bindings": {
                    "_text": {
                      "bindingType": "expression",
                      "code": "item",
                      "type": "single",
                    },
                  },
                  "children": [],
                  "meta": {},
                  "name": "div",
                  "properties": {},
                  "scope": {},
                },
              ],
              "meta": {},
              "name": "div",
              "properties": {},
              "scope": {},
            },
          ],
          "meta": {},
          "name": "For",
          "properties": {},
          "scope": {
            "forName": "item",
            "indexName": "idx",
          },
        },
      ],
      "meta": {
        "else": {
          "@type": "@builder.io/mitosis/node",
          "bindings": {},
          "children": [
            {
              "@type": "@builder.io/mitosis/node",
              "bindings": {},
              "children": [],
              "meta": {},
              "name": "div",
              "properties": {
                "_text": "else-condition-A",
              },
              "scope": {},
            },
          ],
          "meta": {},
          "name": "div",
          "properties": {},
          "scope": {},
        },
      },
      "name": "Show",
      "properties": {},
      "scope": {},
    },
  ],
  "context": {
    "get": {},
    "set": {},
  },
  "exports": {},
  "hooks": {
    "onEvent": [],
    "onMount": [],
  },
  "imports": [],
  "inputs": [],
  "meta": {},
  "name": "NestedShow",
  "propsTypeRef": "Props",
  "refs": {},
  "state": {},
  "subComponents": [],
  "types": [
    "interface Props {
  conditionA: boolean;
  items: string[];
}",
  ],
}
`;

exports[`Parse JSX > Typescript > showWithOtherValues 1`] = `
{
  "@type": "@builder.io/mitosis/component",
  "children": [
    {
      "@type": "@builder.io/mitosis/node",
      "bindings": {},
      "children": [
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {
            "when": {
              "bindingType": "expression",
              "code": "props.conditionA",
              "type": "single",
            },
          },
          "children": [
            {
              "@type": "@builder.io/mitosis/node",
              "bindings": {},
              "children": [],
              "meta": {},
              "name": "div",
              "properties": {
                "_text": "
        ContentA
      ",
              },
              "scope": {},
            },
          ],
          "meta": {},
          "name": "Show",
          "properties": {},
          "scope": {},
        },
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {
            "when": {
              "bindingType": "expression",
              "code": "props.conditionA",
              "type": "single",
            },
          },
          "children": [
            {
              "@type": "@builder.io/mitosis/node",
              "bindings": {},
              "children": [],
              "meta": {},
              "name": "div",
              "properties": {
                "_text": "
        ContentB
      ",
              },
              "scope": {},
            },
          ],
          "meta": {
            "else": {
              "@type": "@builder.io/mitosis/node",
              "bindings": {
                "_text": {
                  "bindingType": "expression",
                  "code": "undefined",
                  "type": "single",
                },
              },
              "children": [],
              "meta": {},
              "name": "div",
              "properties": {},
              "scope": {},
            },
          },
          "name": "Show",
          "properties": {},
          "scope": {},
        },
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {
            "when": {
              "bindingType": "expression",
              "code": "props.conditionA",
              "type": "single",
            },
          },
          "children": [
            {
              "@type": "@builder.io/mitosis/node",
              "bindings": {},
              "children": [],
              "meta": {},
              "name": "div",
              "properties": {
                "_text": "
        ContentC
      ",
              },
              "scope": {},
            },
          ],
          "meta": {},
          "name": "Show",
          "properties": {},
          "scope": {},
        },
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {
            "when": {
              "bindingType": "expression",
              "code": "props.conditionA",
              "type": "single",
            },
          },
          "children": [
            {
              "@type": "@builder.io/mitosis/node",
              "bindings": {},
              "children": [],
              "meta": {},
              "name": "div",
              "properties": {
                "_text": "
        ContentD
      ",
              },
              "scope": {},
            },
          ],
          "meta": {},
          "name": "Show",
          "properties": {},
          "scope": {},
        },
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {
            "when": {
              "bindingType": "expression",
              "code": "props.conditionA",
              "type": "single",
            },
          },
          "children": [
            {
              "@type": "@builder.io/mitosis/node",
              "bindings": {},
              "children": [],
              "meta": {},
              "name": "div",
              "properties": {
                "_text": "
        ContentE
      ",
              },
              "scope": {},
            },
          ],
          "meta": {
            "else": {
              "@type": "@builder.io/mitosis/node",
              "bindings": {},
              "children": [],
              "meta": {},
              "name": "div",
              "properties": {
                "_text": "hello",
              },
              "scope": {},
            },
          },
          "name": "Show",
          "properties": {},
          "scope": {},
        },
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {
            "when": {
              "bindingType": "expression",
              "code": "props.conditionA",
              "type": "single",
            },
          },
          "children": [
            {
              "@type": "@builder.io/mitosis/node",
              "bindings": {},
              "children": [],
              "meta": {},
              "name": "div",
              "properties": {
                "_text": "
        ContentF
      ",
              },
              "scope": {},
            },
          ],
          "meta": {
            "else": {
              "@type": "@builder.io/mitosis/node",
              "bindings": {},
              "children": [],
              "meta": {},
              "name": "div",
              "properties": {
                "_text": "123",
              },
              "scope": {},
            },
          },
          "name": "Show",
          "properties": {},
          "scope": {},
        },
      ],
      "meta": {},
      "name": "div",
      "properties": {},
      "scope": {},
    },
  ],
  "context": {
    "get": {},
    "set": {},
  },
  "exports": {},
  "hooks": {
    "onEvent": [],
    "onMount": [],
  },
  "imports": [],
  "inputs": [],
  "meta": {},
  "name": "ShowWithOtherValues",
  "propsTypeRef": "Props",
  "refs": {},
  "state": {},
  "subComponents": [],
  "types": [
    "interface Props {
  conditionA: boolean;
}",
  ],
}
`;

exports[`Parse JSX > Typescript > showWithRootText 1`] = `
{
  "@type": "@builder.io/mitosis/component",
  "children": [
    {
      "@type": "@builder.io/mitosis/node",
      "bindings": {
        "when": {
          "bindingType": "expression",
          "code": "props.conditionA",
          "type": "single",
        },
      },
      "children": [
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {},
          "children": [],
          "meta": {},
          "name": "div",
          "properties": {
            "_text": "
      ContentA
    ",
          },
          "scope": {},
        },
      ],
      "meta": {
        "else": {
          "@type": "@builder.io/mitosis/node",
          "bindings": {},
          "children": [
            {
              "@type": "@builder.io/mitosis/node",
              "bindings": {},
              "children": [],
              "meta": {},
              "name": "div",
              "properties": {
                "_text": "else-condition-A",
              },
              "scope": {},
            },
          ],
          "meta": {},
          "name": "div",
          "properties": {},
          "scope": {},
        },
      },
      "name": "Show",
      "properties": {},
      "scope": {},
    },
  ],
  "context": {
    "get": {},
    "set": {},
  },
  "exports": {},
  "hooks": {
    "onEvent": [],
    "onMount": [],
  },
  "imports": [],
  "inputs": [],
  "meta": {},
  "name": "ShowRootText",
  "propsTypeRef": "Props",
  "refs": {},
  "state": {},
  "subComponents": [],
  "types": [
    "interface Props {
  conditionA: boolean;
}",
  ],
}
`;

exports[`Parse JSX > Typescript > signalsOnUpdate 1`] = `
{
  "@type": "@builder.io/mitosis/component",
  "children": [
    {
      "@type": "@builder.io/mitosis/node",
      "bindings": {
        "css": {
          "bindingType": "expression",
          "code": "{
  padding: '10px'
}",
          "type": "single",
        },
      },
      "children": [
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {
            "_text": {
              "bindingType": "expression",
              "code": "props.id",
              "type": "single",
            },
          },
          "children": [],
          "meta": {},
          "name": "div",
          "properties": {},
          "scope": {},
        },
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {
            "_text": {
              "bindingType": "expression",
              "code": "props.foo.value.bar.baz",
              "type": "single",
            },
          },
          "children": [],
          "meta": {},
          "name": "div",
          "properties": {},
          "scope": {},
        },
      ],
      "meta": {},
      "name": "div",
      "properties": {
        "class": "test",
      },
      "scope": {},
    },
  ],
  "context": {
    "get": {},
    "set": {},
  },
  "exports": {},
  "hooks": {
    "onEvent": [],
    "onMount": [],
    "onUpdate": [
      {
        "code": "console.log('props.id changed', props.id);
console.log('props.foo.value.bar.baz changed', props.foo.value.bar.baz)",
        "deps": "[props.id, props.foo.value.bar.baz]",
        "depsArray": [
          "props.id",
        ],
      },
    ],
  },
  "imports": [],
  "inputs": [],
  "meta": {},
  "name": "MyBasicComponent",
  "propsTypeRef": "Props",
  "refs": {},
  "signals": {
    "signalTypeImportName": "Signal",
  },
  "state": {},
  "subComponents": [],
  "types": [
    "type Props = {
  id: Signal<string>;
  foo: Signal<{
    bar: {
      baz: number;
    };
  }>;
}",
  ],
}
`;

exports[`Parse JSX > Typescript > spreadAttrs 1`] = `
{
  "@type": "@builder.io/mitosis/component",
  "children": [
    {
      "@type": "@builder.io/mitosis/node",
      "bindings": {
        "attrs": {
          "code": "attrs",
          "spreadType": "normal",
          "type": "spread",
        },
      },
      "children": [],
      "meta": {},
      "name": "input",
      "properties": {},
      "scope": {},
    },
  ],
  "context": {
    "get": {},
    "set": {},
  },
  "exports": {},
  "hooks": {
    "onEvent": [],
    "onMount": [],
  },
  "imports": [],
  "inputs": [],
  "meta": {},
  "name": "MyBasicComponent",
  "refs": {},
  "state": {},
  "subComponents": [],
}
`;

exports[`Parse JSX > Typescript > spreadNestedProps 1`] = `
{
  "@type": "@builder.io/mitosis/component",
  "children": [
    {
      "@type": "@builder.io/mitosis/node",
      "bindings": {
        "props.nested": {
          "code": "props.nested",
          "spreadType": "normal",
          "type": "spread",
        },
      },
      "children": [],
      "meta": {},
      "name": "input",
      "properties": {},
      "scope": {},
    },
  ],
  "context": {
    "get": {},
    "set": {},
  },
  "exports": {},
  "hooks": {
    "onEvent": [],
    "onMount": [],
  },
  "imports": [],
  "inputs": [],
  "meta": {},
  "name": "MyBasicComponent",
  "refs": {},
  "state": {},
  "subComponents": [],
}
`;

exports[`Parse JSX > Typescript > spreadProps 1`] = `
{
  "@type": "@builder.io/mitosis/component",
  "children": [
    {
      "@type": "@builder.io/mitosis/node",
      "bindings": {
        "props": {
          "code": "props",
          "spreadType": "normal",
          "type": "spread",
        },
      },
      "children": [],
      "meta": {},
      "name": "input",
      "properties": {},
      "scope": {},
    },
  ],
  "context": {
    "get": {},
    "set": {},
  },
  "exports": {},
  "hooks": {
    "onEvent": [],
    "onMount": [],
  },
  "imports": [],
  "inputs": [],
  "meta": {},
  "name": "MyBasicComponent",
  "refs": {},
  "state": {},
  "subComponents": [],
}
`;

exports[`Parse JSX > Typescript > store-async-function 1`] = `
{
  "@type": "@builder.io/mitosis/component",
  "children": [
    {
      "@type": "@builder.io/mitosis/node",
      "bindings": {},
      "children": [],
      "meta": {},
      "name": "div",
      "properties": {},
      "scope": {},
    },
  ],
  "context": {
    "get": {},
    "set": {},
  },
  "exports": {},
  "hooks": {
    "onEvent": [],
    "onMount": [],
  },
  "imports": [],
  "inputs": [],
  "meta": {},
  "name": "StringLiteralStore",
  "refs": {},
  "state": {
    "arrowFunction": {
      "code": "async function arrowFunction() {
  return Promise.resolve();
}",
      "type": "function",
    },
    "fetchUsers": {
      "code": "async function fetchUsers() {
  return Promise.resolve();
}",
      "type": "function",
    },
    "namedFunction": {
      "code": "async function namedFunction() {
  return Promise.resolve();
}",
      "type": "function",
    },
  },
  "subComponents": [],
}
`;

exports[`Parse JSX > Typescript > string-literal-store 1`] = `
{
  "@type": "@builder.io/mitosis/component",
  "children": [
    {
      "@type": "@builder.io/mitosis/node",
      "bindings": {},
      "children": [
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {
            "_text": {
              "bindingType": "expression",
              "code": "state.foo",
              "type": "single",
            },
          },
          "children": [],
          "meta": {},
          "name": "div",
          "properties": {},
          "scope": {},
        },
      ],
      "meta": {},
      "name": "div",
      "properties": {},
      "scope": {},
    },
  ],
  "context": {
    "get": {},
    "set": {},
  },
  "exports": {},
  "hooks": {
    "onEvent": [],
    "onMount": [],
  },
  "imports": [],
  "inputs": [],
  "meta": {},
  "name": "StringLiteralStore",
  "refs": {},
  "state": {
    "foo": {
      "code": "123",
      "propertyType": "normal",
      "type": "property",
    },
  },
  "subComponents": [],
}
`;

exports[`Parse JSX > Typescript > string-literal-store-kebab 1`] = `
{
  "@type": "@builder.io/mitosis/component",
  "children": [
    {
      "@type": "@builder.io/mitosis/node",
      "bindings": {},
      "children": [
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {
            "_text": {
              "bindingType": "expression",
              "code": "state['foo-bar']",
              "type": "single",
            },
          },
          "children": [],
          "meta": {},
          "name": "div",
          "properties": {},
          "scope": {},
        },
      ],
      "meta": {},
      "name": "div",
      "properties": {},
      "scope": {},
    },
  ],
  "context": {
    "get": {},
    "set": {},
  },
  "exports": {},
  "hooks": {
    "onEvent": [],
    "onMount": [],
  },
  "imports": [],
  "inputs": [],
  "meta": {},
  "name": "StringLiteralStore",
  "refs": {},
  "state": {
    "foo-bar": {
      "code": "123",
      "propertyType": "normal",
      "type": "property",
    },
  },
  "subComponents": [],
}
`;

exports[`Parse JSX > Typescript > styleClassAndCss 1`] = `
{
  "@type": "@builder.io/mitosis/component",
  "children": [
    {
      "@type": "@builder.io/mitosis/node",
      "bindings": {
        "css": {
          "bindingType": "expression",
          "code": "{
  display: 'flex',
  flexDirection: 'column',
  alignItems: 'stretch'
}",
          "type": "single",
        },
        "style": {
          "bindingType": "expression",
          "code": "{
  width: '100%'
}",
          "type": "single",
        },
      },
      "children": [],
      "meta": {},
      "name": "div",
      "properties": {
        "class": "builder-column",
      },
      "scope": {},
    },
  ],
  "context": {
    "get": {},
    "set": {},
  },
  "exports": {},
  "hooks": {
    "onEvent": [],
    "onMount": [],
  },
  "imports": [],
  "inputs": [],
  "meta": {},
  "name": "MyComponent",
  "refs": {},
  "state": {},
  "subComponents": [],
}
`;

exports[`Parse JSX > Typescript > stylePropClassAndCss 1`] = `
{
  "@type": "@builder.io/mitosis/component",
  "children": [
    {
      "@type": "@builder.io/mitosis/node",
      "bindings": {
        "css": {
          "bindingType": "expression",
          "code": "{
  display: 'flex',
  flexDirection: 'column',
  alignItems: 'stretch'
}",
          "type": "single",
        },
        "style": {
          "bindingType": "expression",
          "code": "props.attributes.style",
          "type": "single",
        },
      },
      "children": [],
      "meta": {},
      "name": "div",
      "properties": {
        "class": "USE_TARGET_BLOCK_1",
      },
      "scope": {},
    },
  ],
  "context": {
    "get": {},
    "set": {},
  },
  "exports": {},
  "hooks": {
    "onEvent": [],
    "onMount": [],
  },
  "imports": [],
  "inputs": [],
  "meta": {},
  "name": "StylePropClassAndCss",
  "refs": {},
  "state": {},
  "subComponents": [],
  "targetBlocks": {
    "1": {
      "default": {
        "code": "props.attributes.class",
      },
      "settings": {
        "requiresDefault": true,
      },
      "svelte": {
        "code": "props.attributes.classfdsa",
      },
      "vue": {
        "code": "props.attributes.className",
      },
    },
  },
}
`;

exports[`Parse JSX > Typescript > subComponent 1`] = `
{
  "@type": "@builder.io/mitosis/component",
  "children": [
    {
      "@type": "@builder.io/mitosis/node",
      "bindings": {},
      "children": [],
      "meta": {},
      "name": "Foo",
      "properties": {},
      "scope": {},
    },
  ],
  "context": {
    "get": {},
    "set": {},
  },
  "exports": {},
  "hooks": {
    "onEvent": [],
    "onMount": [],
  },
  "imports": [
    {
      "importKind": "value",
      "imports": {
        "Foo": "default",
      },
      "path": "./foo-sub-component.lite",
    },
  ],
  "inputs": [],
  "meta": {},
  "name": "SubComponent",
  "refs": {},
  "state": {},
  "subComponents": [],
}
`;

exports[`Parse JSX > Typescript > svgComponent 1`] = `
{
  "@type": "@builder.io/mitosis/component",
  "children": [
    {
      "@type": "@builder.io/mitosis/node",
      "bindings": {
        "height": {
          "bindingType": "expression",
          "code": "42",
          "type": "single",
        },
        "viewBox": {
          "bindingType": "expression",
          "code": "'0 0 ' + 42 + ' ' + 42",
          "type": "single",
        },
        "width": {
          "bindingType": "expression",
          "code": "42",
          "type": "single",
        },
      },
      "children": [
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {},
          "children": [
            {
              "@type": "@builder.io/mitosis/node",
              "bindings": {},
              "children": [
                {
                  "@type": "@builder.io/mitosis/node",
                  "bindings": {},
                  "children": [],
                  "meta": {},
                  "name": "feFlood",
                  "properties": {
                    "result": "BackgroundImageFix",
                  },
                  "scope": {},
                },
                {
                  "@type": "@builder.io/mitosis/node",
                  "bindings": {},
                  "children": [],
                  "meta": {},
                  "name": "feBlend",
                  "properties": {
                    "in": "SourceGraphic",
                    "in2": "BackgroundImageFix",
                    "result": "shape",
                  },
                  "scope": {},
                },
                {
                  "@type": "@builder.io/mitosis/node",
                  "bindings": {
                    "stdDeviation": {
                      "bindingType": "expression",
                      "code": "7",
                      "type": "single",
                    },
                  },
                  "children": [],
                  "meta": {},
                  "name": "feGaussianBlur",
                  "properties": {
                    "result": "effect1_foregroundBlur",
                  },
                  "scope": {},
                },
              ],
              "meta": {},
              "name": "filter",
              "properties": {
                "filterUnits": "userSpaceOnUse",
                "id": "prefix__filter0_f",
              },
              "scope": {},
            },
          ],
          "meta": {},
          "name": "defs",
          "properties": {},
          "scope": {},
        },
      ],
      "meta": {},
      "name": "svg",
      "properties": {
        "fill": "none",
        "role": "img",
      },
      "scope": {},
    },
  ],
  "context": {
    "get": {},
    "set": {},
  },
  "exports": {},
  "hooks": {
    "onEvent": [],
    "onMount": [],
  },
  "imports": [],
  "inputs": [],
  "meta": {},
  "name": "SvgComponent",
  "refs": {},
  "state": {},
  "subComponents": [],
}
`;

exports[`Parse JSX > Typescript > typeDependency 1`] = `
{
  "@type": "@builder.io/mitosis/component",
  "children": [
    {
      "@type": "@builder.io/mitosis/node",
      "bindings": {},
      "children": [
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {
            "_text": {
              "bindingType": "expression",
              "code": "props.foo",
              "type": "single",
            },
          },
          "children": [],
          "meta": {},
          "name": "div",
          "properties": {},
          "scope": {},
        },
      ],
      "meta": {},
      "name": "div",
      "properties": {},
      "scope": {},
    },
  ],
  "context": {
    "get": {},
    "set": {},
  },
  "exports": {},
  "hooks": {
    "onEvent": [],
    "onMount": [],
  },
  "imports": [
    {
      "importKind": "type",
      "imports": {
        "Foo": "Foo",
      },
      "path": "./foo-type",
    },
    {
      "importKind": "type",
      "imports": {
        "Foo2": "Foo",
      },
      "path": "./type-export.lite",
    },
  ],
  "inputs": [],
  "meta": {},
  "name": "TypeDependency",
  "propsTypeRef": "TypeDependencyProps",
  "refs": {},
  "state": {},
  "subComponents": [],
  "types": [
    "export type TypeDependencyProps = {
  foo: Foo;
  foo2: Foo2;
}",
  ],
}
`;

exports[`Parse JSX > Typescript > typeExternalProps 1`] = `
{
  "@type": "@builder.io/mitosis/component",
  "children": [
    {
      "@type": "@builder.io/mitosis/node",
      "bindings": {},
      "children": [
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {},
          "children": [],
          "meta": {},
          "name": "div",
          "properties": {
            "_text": "Hello ",
          },
          "scope": {},
        },
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {
            "_text": {
              "bindingType": "expression",
              "code": "props.name",
              "type": "single",
            },
          },
          "children": [],
          "meta": {},
          "name": "div",
          "properties": {},
          "scope": {},
        },
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {},
          "children": [],
          "meta": {},
          "name": "div",
          "properties": {
            "_text": "! ",
          },
          "scope": {},
        },
      ],
      "meta": {},
      "name": "div",
      "properties": {},
      "scope": {},
    },
  ],
  "context": {
    "get": {},
    "set": {},
  },
  "exports": {},
  "hooks": {
    "onEvent": [],
    "onMount": [],
  },
  "imports": [
    {
      "importKind": "value",
      "imports": {
        "FooProps": "FooProps",
      },
      "path": "./foo-props",
    },
  ],
  "inputs": [],
  "meta": {},
  "name": "TypeExternalProps",
  "propsTypeRef": "FooProps",
  "refs": {},
  "state": {},
  "subComponents": [],
}
`;

exports[`Parse JSX > Typescript > typeExternalStore 1`] = `
{
  "@type": "@builder.io/mitosis/component",
  "children": [
    {
      "@type": "@builder.io/mitosis/node",
      "bindings": {},
      "children": [
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {},
          "children": [],
          "meta": {},
          "name": "div",
          "properties": {
            "_text": "Hello ",
          },
          "scope": {},
        },
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {
            "_text": {
              "bindingType": "expression",
              "code": "state._name",
              "type": "single",
            },
          },
          "children": [],
          "meta": {},
          "name": "div",
          "properties": {},
          "scope": {},
        },
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {},
          "children": [],
          "meta": {},
          "name": "div",
          "properties": {
            "_text": "! ",
          },
          "scope": {},
        },
      ],
      "meta": {},
      "name": "div",
      "properties": {},
      "scope": {},
    },
  ],
  "context": {
    "get": {},
    "set": {},
  },
  "exports": {},
  "hooks": {
    "onEvent": [],
    "onMount": [],
  },
  "imports": [
    {
      "importKind": "value",
      "imports": {
        "FooStore": "FooStore",
      },
      "path": "./foo-store",
    },
  ],
  "inputs": [],
  "meta": {},
  "name": "TypeExternalStore",
  "refs": {},
  "state": {
    "_name": {
      "code": "'test'",
      "propertyType": "normal",
      "type": "property",
      "typeParameter": "FooStore[\\"_name\\"]",
    },
  },
  "subComponents": [],
}
`;

exports[`Parse JSX > Typescript > typeGetterStore 1`] = `
{
  "@type": "@builder.io/mitosis/component",
  "children": [
    {
      "@type": "@builder.io/mitosis/node",
      "bindings": {},
      "children": [
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {},
          "children": [],
          "meta": {},
          "name": "div",
          "properties": {
            "_text": "Hello ",
          },
          "scope": {},
        },
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {
            "_text": {
              "bindingType": "expression",
              "code": "state.name",
              "type": "single",
            },
          },
          "children": [],
          "meta": {},
          "name": "div",
          "properties": {},
          "scope": {},
        },
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {},
          "children": [],
          "meta": {},
          "name": "div",
          "properties": {
            "_text": "! ",
          },
          "scope": {},
        },
      ],
      "meta": {},
      "name": "div",
      "properties": {},
      "scope": {},
    },
  ],
  "context": {
    "get": {},
    "set": {},
  },
  "exports": {},
  "hooks": {
    "onEvent": [],
    "onMount": [],
  },
  "imports": [],
  "inputs": [],
  "meta": {},
  "name": "TypeGetterStore",
  "refs": {},
  "state": {
    "getName": {
      "code": "getName() {
  if (state.name === 'a') {
    return 'b';
  }

  return state.name;
}",
      "type": "method",
      "typeParameter": "GetterStore[\\"getName\\"]",
    },
    "name": {
      "code": "'test'",
      "propertyType": "normal",
      "type": "property",
      "typeParameter": "GetterStore[\\"name\\"]",
    },
    "test": {
      "code": "get test() {
  return 'test';
}",
      "type": "getter",
      "typeParameter": "GetterStore[\\"test\\"]",
    },
  },
  "subComponents": [],
  "types": [
    "type GetterStore = {
  getName: () => string;
  name: string;
  get test(): string;
}",
  ],
}
`;

exports[`Parse JSX > Typescript > use-style 1`] = `
{
  "@type": "@builder.io/mitosis/component",
  "children": [
    {
      "@type": "@builder.io/mitosis/node",
      "bindings": {},
      "children": [
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {},
          "children": [],
          "meta": {},
          "name": "div",
          "properties": {
            "_text": "Button",
          },
          "scope": {},
        },
      ],
      "meta": {},
      "name": "button",
      "properties": {
        "type": "button",
      },
      "scope": {},
    },
  ],
  "context": {
    "get": {},
    "set": {},
  },
  "exports": {},
  "hooks": {
    "onEvent": [],
    "onMount": [],
  },
  "imports": [],
  "inputs": [],
  "meta": {},
  "name": "MyComponent",
  "refs": {},
  "state": {},
  "style": "
        button {
            background: blue;
            color: white;
            font-size: 12px;
            outline: 1px solid black;
        }
    ",
  "subComponents": [],
}
`;

exports[`Parse JSX > Typescript > use-style-and-css 1`] = `
{
  "@type": "@builder.io/mitosis/component",
  "children": [
    {
      "@type": "@builder.io/mitosis/node",
      "bindings": {
        "css": {
          "bindingType": "expression",
          "code": "{
  background: 'blue',
  color: 'white'
}",
          "type": "single",
        },
      },
      "children": [
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {},
          "children": [],
          "meta": {},
          "name": "div",
          "properties": {
            "_text": "
      Button
    ",
          },
          "scope": {},
        },
      ],
      "meta": {},
      "name": "button",
      "properties": {
        "type": "button",
      },
      "scope": {},
    },
  ],
  "context": {
    "get": {},
    "set": {},
  },
  "exports": {},
  "hooks": {
    "onEvent": [],
    "onMount": [],
  },
  "imports": [],
  "inputs": [],
  "meta": {},
  "name": "MyComponent",
  "refs": {},
  "state": {},
  "style": "
        button {
            font-size: 12px;
            outline: 1px solid black;
        }
    ",
  "subComponents": [],
}
`;

exports[`Parse JSX > Typescript > use-style-outside-component 1`] = `
{
  "@type": "@builder.io/mitosis/component",
  "children": [
    {
      "@type": "@builder.io/mitosis/node",
      "bindings": {},
      "children": [
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {},
          "children": [],
          "meta": {},
          "name": "div",
          "properties": {
            "_text": "Button",
          },
          "scope": {},
        },
      ],
      "meta": {},
      "name": "button",
      "properties": {
        "type": "button",
      },
      "scope": {},
    },
  ],
  "context": {
    "get": {},
    "set": {},
  },
  "exports": {},
  "hooks": {
    "onEvent": [],
    "onMount": [],
  },
  "imports": [],
  "inputs": [],
  "meta": {},
  "name": "MyComponent",
  "refs": {},
  "state": {},
  "style": "
  button {
      background: blue;
      color: white;
      font-size: 12px;
      outline: 1px solid black;
  }
",
  "subComponents": [],
}
`;

exports[`Parse JSX > Typescript > useTarget 1`] = `
{
  "@type": "@builder.io/mitosis/component",
  "children": [
    {
      "@type": "@builder.io/mitosis/node",
      "bindings": {},
      "children": [
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {
            "_text": {
              "bindingType": "expression",
              "code": "state.name",
              "type": "single",
            },
          },
          "children": [],
          "meta": {},
          "name": "div",
          "properties": {},
          "scope": {},
        },
      ],
      "meta": {},
      "name": "div",
      "properties": {},
      "scope": {},
    },
  ],
  "context": {
    "get": {},
    "set": {},
  },
  "exports": {},
  "hooks": {
    "onEvent": [],
    "onMount": [
      {
        "code": "console.log(state.foo);
state.foo = 'bar';
\\"USE_TARGET_BLOCK_2\\"",
        "onSSR": false,
      },
    ],
  },
  "imports": [],
  "inputs": [],
  "meta": {},
  "name": "UseTargetComponent",
  "refs": {},
  "state": {
    "foo": {
      "code": "'bar'",
      "propertyType": "normal",
      "type": "property",
    },
    "lastName": {
      "code": "'bar'",
      "propertyType": "normal",
      "type": "property",
    },
    "name": {
      "code": "get name() {
  const prefix = \\"USE_TARGET_BLOCK_1\\";
  return prefix + 'foo';
}",
      "type": "getter",
    },
  },
  "subComponents": [],
  "targetBlocks": {
    "1": {
      "alpine": {
        "code": "'a'",
      },
      "angular": {
        "code": "true",
      },
      "customElement": {
        "code": "'c'",
      },
      "default": {
        "code": "'Default str'",
      },
      "html": {
        "code": "'h'",
      },
      "liquid": {
        "code": "'l'",
      },
      "lit": {
        "code": "'li'",
      },
      "marko": {
        "code": "'m'",
      },
      "mitosis": {
        "code": "'mi'",
      },
      "preact": {
        "code": "'p'",
      },
      "qwik": {
        "code": "'q'",
      },
      "react": {
        "code": "123",
      },
      "reactNative": {
        "code": "'rn'",
      },
      "rsc": {
        "code": "'rsc'",
      },
      "settings": {
        "requiresDefault": true,
      },
      "solid": {
        "code": "'so'",
      },
      "stencil": {
        "code": "'st'",
      },
      "svelte": {
        "code": "'s'",
      },
      "swift": {
        "code": "'sw'",
      },
      "taro": {
        "code": "'t'",
      },
      "template": {
        "code": "'te'",
      },
      "vue": {
        "code": "'v'",
      },
      "webcomponent": {
        "code": "'wc'",
      },
    },
    "2": {
      "qwik": {
        "code": "console.log('qwik');
state.lastName = 'baz';
console.log(state.foo);
state.foo = 'baz'",
      },
      "react": {
        "code": "console.log('react');
state.lastName = 'baz';
console.log(state.foo);
state.foo = 'baz'",
      },
      "settings": {
        "requiresDefault": false,
      },
    },
  },
}
`;

exports[`Parse JSX > Typescript > webComponent 1`] = `
{
  "@type": "@builder.io/mitosis/component",
  "children": [
    {
      "@type": "@builder.io/mitosis/node",
      "bindings": {},
      "children": [
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {},
          "children": [
            {
              "@type": "@builder.io/mitosis/node",
              "bindings": {},
              "children": [],
              "meta": {},
              "name": "div",
              "properties": {
                "_text": "Slide 1",
              },
              "scope": {},
            },
          ],
          "meta": {},
          "name": "swiper-slide",
          "properties": {},
          "scope": {},
        },
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {},
          "children": [
            {
              "@type": "@builder.io/mitosis/node",
              "bindings": {},
              "children": [],
              "meta": {},
              "name": "div",
              "properties": {
                "_text": "Slide 2",
              },
              "scope": {},
            },
          ],
          "meta": {},
          "name": "swiper-slide",
          "properties": {},
          "scope": {},
        },
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {},
          "children": [
            {
              "@type": "@builder.io/mitosis/node",
              "bindings": {},
              "children": [],
              "meta": {},
              "name": "div",
              "properties": {
                "_text": "Slide 3",
              },
              "scope": {},
            },
          ],
          "meta": {},
          "name": "swiper-slide",
          "properties": {},
          "scope": {},
        },
      ],
      "meta": {},
      "name": "swiper-container",
      "properties": {
        "navigation": "true",
        "pagination": "true",
        "slides-per-view": "3",
      },
      "scope": {},
    },
  ],
  "context": {
    "get": {},
    "set": {},
  },
  "exports": {},
  "hooks": {
    "onEvent": [],
    "onInit": {
      "code": "register()",
    },
    "onMount": [],
  },
  "imports": [
    {
      "importKind": "value",
      "imports": {
        "register": "register",
      },
      "path": "swiper/element/bundle",
    },
  ],
  "inputs": [],
  "meta": {},
  "name": "MyBasicWebComponent",
  "refs": {},
  "state": {},
  "subComponents": [],
}
`;

exports[`Parse JSX > boolean attribute 1`] = `
{
  "@type": "@builder.io/mitosis/component",
  "children": [
    {
      "@type": "@builder.io/mitosis/node",
      "bindings": {},
      "children": [
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {
            "when": {
              "bindingType": "expression",
              "code": "props.children",
              "type": "single",
            },
          },
          "children": [
            {
              "@type": "@builder.io/mitosis/node",
              "bindings": {
                "_text": {
                  "bindingType": "expression",
                  "code": "props.children",
                  "type": "single",
                },
              },
              "children": [],
              "meta": {},
              "name": "div",
              "properties": {},
              "scope": {},
            },
            {
              "@type": "@builder.io/mitosis/node",
              "bindings": {
                "_text": {
                  "bindingType": "expression",
                  "code": "props.type",
                  "type": "single",
                },
              },
              "children": [],
              "meta": {},
              "name": "div",
              "properties": {},
              "scope": {},
            },
          ],
          "meta": {},
          "name": "Show",
          "properties": {},
          "scope": {},
        },
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {
            "toggle": {
              "bindingType": "expression",
              "code": "true",
              "type": "single",
            },
          },
          "children": [],
          "meta": {},
          "name": "MyBooleanAttributeComponent",
          "properties": {},
          "scope": {},
        },
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {
            "toggle": {
              "bindingType": "expression",
              "code": "true",
              "type": "single",
            },
          },
          "children": [],
          "meta": {},
          "name": "MyBooleanAttributeComponent",
          "properties": {},
          "scope": {},
        },
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {
            "list": {
              "bindingType": "expression",
              "code": "null",
              "type": "single",
            },
          },
          "children": [],
          "meta": {},
          "name": "MyBooleanAttributeComponent",
          "properties": {},
          "scope": {},
        },
      ],
      "meta": {},
      "name": "div",
      "properties": {},
      "scope": {},
    },
  ],
  "context": {
    "get": {},
    "set": {},
  },
  "exports": {},
  "hooks": {
    "onEvent": [],
    "onMount": [],
  },
  "imports": [
    {
      "importKind": "value",
      "imports": {
        "MyBooleanAttributeComponent": "default",
      },
      "path": "./basic-boolean-attribute-component.raw",
    },
  ],
  "inputs": [],
  "meta": {},
  "name": "MyBooleanAttribute",
  "refs": {},
  "state": {},
  "subComponents": [],
}
`;

exports[`Parse JSX > metadata 1`] = `
{
  "@type": "@builder.io/mitosis/component",
  "children": [
    {
      "@type": "@builder.io/mitosis/node",
      "bindings": {},
      "children": [
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {
            "when": {
              "bindingType": "expression",
              "code": "props.link",
              "type": "single",
            },
          },
          "children": [
            {
              "@type": "@builder.io/mitosis/node",
              "bindings": {
                "href": {
                  "bindingType": "expression",
                  "code": "props.link",
                  "type": "single",
                },
                "props.attributes": {
                  "code": "props.attributes",
                  "spreadType": "normal",
                  "type": "spread",
                },
                "target": {
                  "bindingType": "expression",
                  "code": "props.openLinkInNewTab ? '_blank' : undefined",
                  "type": "single",
                },
              },
              "children": [
                {
                  "@type": "@builder.io/mitosis/node",
                  "bindings": {
                    "_text": {
                      "bindingType": "expression",
                      "code": "props.text",
                      "type": "single",
                    },
                  },
                  "children": [],
                  "meta": {},
                  "name": "div",
                  "properties": {},
                  "scope": {},
                },
              ],
              "meta": {},
              "name": "a",
              "properties": {},
              "scope": {},
            },
          ],
          "meta": {},
          "name": "Show",
          "properties": {},
          "scope": {},
        },
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {
            "when": {
              "bindingType": "expression",
              "code": "!props.link",
              "type": "single",
            },
          },
          "children": [
            {
              "@type": "@builder.io/mitosis/node",
              "bindings": {
                "props.attributes": {
                  "code": "props.attributes",
                  "spreadType": "normal",
                  "type": "spread",
                },
              },
              "children": [
                {
                  "@type": "@builder.io/mitosis/node",
                  "bindings": {
                    "_text": {
                      "bindingType": "expression",
                      "code": "props.text",
                      "type": "single",
                    },
                  },
                  "children": [],
                  "meta": {},
                  "name": "div",
                  "properties": {},
                  "scope": {},
                },
              ],
              "meta": {},
              "name": "button",
              "properties": {
                "type": "button",
              },
              "scope": {},
            },
          ],
          "meta": {},
          "name": "Show",
          "properties": {},
          "scope": {},
        },
      ],
      "meta": {},
      "name": "Fragment",
      "properties": {},
      "scope": {},
    },
  ],
  "context": {
    "get": {},
    "set": {},
  },
  "exports": {},
  "hooks": {
    "onEvent": [],
    "onMount": [],
  },
  "imports": [],
  "inputs": [],
  "meta": {
    "useMetadata": {
      "foo": {
        "bar": "baz",
      },
      "fun": "more metadata",
    },
  },
  "name": "Button",
  "refs": {},
  "state": {},
  "subComponents": [],
}
`;

exports[`Parse JSX > parseStateObject 1`] = `
{
  "allRegisteredComponents": {
    "code": "get allRegisteredComponents() {
  const allComponentsArray = [...getDefaultRegisteredComponents(), // While this \`components\` object is deprecated, we must maintain support for it.
  // Since users are able to override our default components, we need to make sure that we do not break such
  // existing usage.
  // This is why we spread \`components\` after the default Builder.io components, but before the \`props.customComponents\`,
  // which is the new standard way of providing custom components, and must therefore take precedence.
  ...components, ...(props.customComponents || [])];
  const allComponents = allComponentsArray.reduce((acc, curr) => ({ ...acc,
    [curr.name]: curr
  }), ({} as RegisteredComponents));
  return allComponents;
}",
    "type": "getter",
  },
  "canTrackToUse": {
    "code": "get canTrackToUse() {
  return props.canTrack || true;
}",
    "type": "getter",
  },
  "contentState": {
    "code": "get contentState() {
  return { ...props.content?.data?.state,
    ...props.data,
    ...state.overrideState
  };
}",
    "type": "getter",
  },
  "contextContext": {
    "code": "get contextContext() {
  return props.context || {};
}",
    "type": "getter",
  },
  "emitStateUpdate": {
    "code": "emitStateUpdate() {
  if (isEditing()) {
    window.dispatchEvent(new CustomEvent<BuilderComponentStateChange>('builder:component:stateChange', {
      detail: {
        state: state.contentState,
        ref: {
          name: props.model
        }
      }
    }));
  }
}",
    "type": "method",
  },
  "evalExpression": {
    "code": "evalExpression(expression: string) {
  return expression.replace(/{{([^}]+)}}/g, (_match, group) => evaluate({
    code: group,
    context: state.contextContext,
    state: state.contentState
  }));
}",
    "type": "method",
  },
  "evaluateJsCode": {
    "code": "evaluateJsCode() {
  // run any dynamic JS code attached to content
  const jsCode = state.useContent?.data?.jsCode;

  if (jsCode) {
    evaluate({
      code: jsCode,
      context: state.contextContext,
      state: state.contentState
    });
  }
}",
    "type": "method",
  },
  "forceReRenderCount": {
    "code": "0",
    "propertyType": "normal",
    "type": "property",
  },
  "handleRequest": {
    "code": "handleRequest({
  url,
  key
}: {
  key: string;
  url: string;
}) {
  const fetchAndSetState = async () => {
    const fetch = await getFetch();
    const response = await fetch(url);
    const json = await response.json();
    const newOverrideState = { ...state.overrideState,
      [key]: json
    };
    state.overrideState = newOverrideState;
  };

  fetchAndSetState();
}",
    "type": "method",
  },
  "httpReqsData": {
    "code": "get httpReqsData() {
  return {};
}",
    "type": "getter",
  },
  "onClick": {
    "code": "onClick(_event: MouseEvent) {
  if (state.useContent) {
    track({
      type: 'click',
      canTrack: state.canTrackToUse,
      contentId: state.useContent.id,
      orgId: props.apiKey
    });
  }
}",
    "type": "method",
  },
  "overrideContent": {
    "code": "null",
    "propertyType": "normal",
    "type": "property",
  },
  "overrideState": {
    "code": "{}",
    "propertyType": "normal",
    "type": "property",
  },
  "processMessage": {
    "code": "processMessage(event: MessageEvent) {
  const {
    data
  } = event;

  if (data) {
    switch (data.type) {
      case 'builder.contentUpdate':
        {
          const messageContent = data.data;
          const key = messageContent.key || messageContent.alias || messageContent.entry || messageContent.modelName;
          const contentData = messageContent.data;

          if (key === props.model) {
            state.overrideContent = contentData;
          }

          break;
        }

      case 'builder.patchUpdates':
        {
          // TODO
          break;
        }
    }
  }
}",
    "type": "method",
  },
  "runHttpRequests": {
    "code": "runHttpRequests() {
  const requests = state.useContent?.data?.httpRequests ?? {};
  Object.entries(requests).forEach(([key, url]) => {
    if (url && (!state.httpReqsData[key] || isEditing())) {
      const evaluatedUrl = state.evalExpression(url);
      state.handleRequest({
        url: evaluatedUrl,
        key
      });
    }
  });
}",
    "type": "method",
  },
  "shouldRenderContentStyles": {
    "code": "get shouldRenderContentStyles() {
  return Boolean((state.useContent?.data?.cssCode || state.useContent?.data?.customFonts?.length) && TARGET !== 'reactNative');
}",
    "type": "getter",
  },
  "update": {
    "code": "0",
    "propertyType": "normal",
    "type": "property",
  },
  "useContent": {
    "code": "get useContent() {
  const mergedContent: BuilderContent = { ...props.content,
    ...state.overrideContent,
    data: { ...props.content?.data,
      ...props.data,
      ...state.overrideContent?.data
    }
  };
  return mergedContent;
}",
    "type": "getter",
  },
}
`;
