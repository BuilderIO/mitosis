// Vitest Snapshot v1

exports[`Stencil > jsx > Javascript Test > AdvancedRef 1`] = `
"import { Component, Prop, h, State, Fragment } from \\"@stencil/core\\";

@Component({
  tag: \\"my-basic-ref-component\\",
  styles: \`
       .input {
         color: red;
       }
\`,
})
export default class MyBasicRefComponent {
  @Prop() showInput: any;

  @State() name = \\"PatrickJS\\";

  onBlur = function onBlur() {
    // Maintain focus
    inputRef.focus();
  };
  lowerCaseName = function lowerCaseName() {
    return this.name.toLowerCase();
  };

  componentDidUpdate() {
    console.log(\\"Received an update\\");
  }

  render() {
    return (
      <div>
        <div></div>
        {this.showInput ? (
          <Fragment>
            <div></div>
            <input
              onblur={(event) => this.onBlur()}
              onchange={(event) => (this.name = event.target.value)}
            />
            <div></div>
            <label>
              <div></div>
            </label>
            <div></div>
            <select name=\\"cars\\">
              <div></div>
              <option>
                <div></div>
              </option>
              <div></div>
              <option>
                <div></div>
              </option>
              <div></div>
            </select>
            <div></div>
          </Fragment>
        ) : null}
        <div></div>
        <div></div>
        <div></div>
      </div>
    );
  }
}
"
`;

exports[`Stencil > jsx > Javascript Test > Basic 1`] = `
"export const DEFAULT_VALUES = {
  name: \\"Steve\\",
};

import { Component, Prop, h, State, Fragment } from \\"@stencil/core\\";

@Component({
  tag: \\"my-basic-component\\",
  styles: \`
      .div {
        padding: 10px;
      }
\`,
})
export default class MyBasicComponent {
  @State() name = \\"Steve\\";
  @State() age = 1;
  @State() sports = [\\"\\"];

  underscore_fn_name() {
    return \\"bar\\";
  }

  render() {
    return (
      <div>
        <div></div>
        <input onchange={(myEvent) => (this.name = myEvent.target.value)} />
        <div></div>
      </div>
    );
  }
}
"
`;

exports[`Stencil > jsx > Javascript Test > Basic Context 1`] = `
"import { Injector, createInjector, MyService } from \\"@dummy/injection-js\\";

import { Component, Prop, h, State, Fragment } from \\"@stencil/core\\";

@Component({
  tag: \\"my-basic-component\\",
})
export default class MyBasicComponent {
  @State() name = \\"PatrickJS\\";

  onChange = function onChange() {
    const change = myService.method(\\"change\\");
    console.log(change);
  };

  componentDidLoad() {
    const bye = myService.method(\\"hi\\");
    console.log(bye);
  }

  render() {
    return (
      <div>
        <div></div>
        <div></div>
        <div></div>
        <input onchange={(event) => this.onChange} />
        <div></div>
      </div>
    );
  }
}
"
`;

exports[`Stencil > jsx > Javascript Test > Basic OnMount Update 1`] = `
"import { Component, Prop, h, State, Fragment } from \\"@stencil/core\\";

@Component({
  tag: \\"my-basic-on-mount-update-component\\",
})
export default class MyBasicOnMountUpdateComponent {
  @Prop() hi: any;
  @Prop() bye: any;

  @State() name = \\"PatrickJS\\";
  @State() names = [\\"Steve\\", \\"PatrickJS\\"];

  componentDidLoad() {
    this.name = \\"PatrickJS onMount\\" + this.bye;
  }

  render() {
    return (
      <div>
        <div></div>
        <div></div>
      </div>
    );
  }
}
"
`;

exports[`Stencil > jsx > Javascript Test > Basic Outputs 1`] = `
"import { Component, Prop, h, State, Fragment } from \\"@stencil/core\\";

@Component({
  tag: \\"my-basic-outputs-component\\",
})
export default class MyBasicOutputsComponent {
  @Prop() onMessage: any;
  @Prop() onEvent: any;
  @Prop() message: any;

  @State() name = \\"PatrickJS\\";

  componentDidLoad() {
    this.onMessage(this.name);
    this.onEvent(this.message);
  }

  render() {
    return <div></div>;
  }
}
"
`;

exports[`Stencil > jsx > Javascript Test > Basic Outputs Meta 1`] = `
"import { Component, Prop, h, State, Fragment } from \\"@stencil/core\\";

@Component({
  tag: \\"my-basic-outputs-component\\",
})
export default class MyBasicOutputsComponent {
  @Prop() onMessage: any;
  @Prop() onEvent: any;
  @Prop() message: any;

  @State() name = \\"PatrickJS\\";

  componentDidLoad() {
    this.onMessage(this.name);
    this.onEvent(this.message);
  }

  render() {
    return <div></div>;
  }
}
"
`;

exports[`Stencil > jsx > Javascript Test > BasicAttribute 1`] = `
"import { Component, Prop, h, State, Fragment } from \\"@stencil/core\\";

@Component({
  tag: \\"my-component\\",
})
export default class MyComponent {
  render() {
    return <input />;
  }
}
"
`;

exports[`Stencil > jsx > Javascript Test > BasicBooleanAttribute 1`] = `
"import MyBooleanAttributeComponent from \\"./basic-boolean-attribute-component.raw\\";

import { Component, Prop, h, State, Fragment } from \\"@stencil/core\\";

@Component({
  tag: \\"my-boolean-attribute\\",
})
export default class MyBooleanAttribute {
  @Prop() children: any;
  @Prop() type: any;

  render() {
    return (
      <div>
        <div></div>
        <div></div>
        <div></div>
        <div></div>
        <div></div>
        <MyBooleanAttributeComponent
          toggle={true}
        ></MyBooleanAttributeComponent>
        <div></div>
        <MyBooleanAttributeComponent
          toggle={true}
        ></MyBooleanAttributeComponent>
        <div></div>
        <MyBooleanAttributeComponent list={null}></MyBooleanAttributeComponent>
        <div></div>
      </div>
    );
  }
}
"
`;

exports[`Stencil > jsx > Javascript Test > BasicChildComponent 1`] = `
"import MyBasicComponent from \\"./basic.raw\\";
import MyBasicOnMountUpdateComponent from \\"./basic-onMount-update.raw\\";

import { Component, Prop, h, State, Fragment } from \\"@stencil/core\\";

@Component({
  tag: \\"my-basic-child-component\\",
})
export default class MyBasicChildComponent {
  @State() name = \\"Steve\\";
  @State() dev = \\"PatrickJS\\";

  render() {
    return (
      <div>
        <div></div>
        <MyBasicComponent id={this.dev}></MyBasicComponent>
        <div></div>
        <div>
          <div></div>
          <MyBasicOnMountUpdateComponent
            hi={this.name}
            bye={this.dev}
          ></MyBasicOnMountUpdateComponent>
          <div></div>
        </div>
        <div></div>
      </div>
    );
  }
}
"
`;

exports[`Stencil > jsx > Javascript Test > BasicFor 1`] = `
"import { Component, Prop, h, State, Fragment } from \\"@stencil/core\\";

@Component({
  tag: \\"my-basic-for-component\\",
})
export default class MyBasicForComponent {
  @State() name = \\"PatrickJS\\";
  @State() names = [\\"Steve\\", \\"PatrickJS\\"];

  componentDidLoad() {
    console.log(\\"onMount code\\");
  }

  render() {
    return (
      <div>
        <div></div>
        {this.names?.map((person) => (
          <Fragment>
            <div></div>
            <input
              onchange={(event) => {
                this.name = event.target.value + \\" and \\" + person;
              }}
            />
            <div></div>
            <div></div>
            <div></div>
          </Fragment>
        ))}
        <div></div>
      </div>
    );
  }
}
"
`;

exports[`Stencil > jsx > Javascript Test > BasicRef 1`] = `
"import { Component, Prop, h, State, Fragment } from \\"@stencil/core\\";

@Component({
  tag: \\"my-basic-ref-component\\",
  styles: \`
       .input {
         color: red;
       }
\`,
})
export default class MyBasicRefComponent {
  @Prop() showInput: any;

  @State() name = \\"PatrickJS\\";

  onBlur = function onBlur() {
    // Maintain focus
    inputRef.focus();
  };
  lowerCaseName = function lowerCaseName() {
    return this.name.toLowerCase();
  };

  render() {
    return (
      <div>
        <div></div>
        {this.showInput ? (
          <Fragment>
            <div></div>
            <input
              onblur={(event) => this.onBlur()}
              onchange={(event) => (this.name = event.target.value)}
            />
            <div></div>
            <label>
              <div></div>
            </label>
            <div></div>
            <select name=\\"cars\\">
              <div></div>
              <option>
                <div></div>
              </option>
              <div></div>
              <option>
                <div></div>
              </option>
              <div></div>
            </select>
            <div></div>
          </Fragment>
        ) : null}
        <div></div>
        <div></div>
        <div></div>
      </div>
    );
  }
}
"
`;

exports[`Stencil > jsx > Javascript Test > BasicRefAssignment 1`] = `
"import { Component, Prop, h, State, Fragment } from \\"@stencil/core\\";

@Component({
  tag: \\"my-basic-ref-assignment-component\\",
})
export default class MyBasicRefAssignmentComponent {
  handlerClick = function handlerClick(event) {
    event.preventDefault();
    console.log(\\"current value\\", holdValueRef);
    holdValueRef = holdValueRef + \\"JS\\";
  };

  render() {
    return (
      <div>
        <div></div>
        <button onclick={(evt) => this.handlerClick(evt)}>
          <div></div>
        </button>
        <div></div>
      </div>
    );
  }
}
"
`;

exports[`Stencil > jsx > Javascript Test > BasicRefPrevious 1`] = `
"export function usePrevious<T>(value: T) {
  // The ref object is a generic container whose current property is mutable ...
  // ... and can hold any value, similar to an instance property on a class
  let ref = useRef<T>(null); // Store current value in ref

  onUpdate(() => {
    ref = value;
  }, [value]); // Only re-run if value changes
  // Return previous value (happens before update in useEffect above)

  return ref;
}

import { Component, Prop, h, State, Fragment } from \\"@stencil/core\\";

@Component({
  tag: \\"my-previous-component\\",
})
export default class MyPreviousComponent {
  @State() count = 0;

  componentDidUpdate() {
    prevCount = this.count;
  }

  render() {
    return (
      <div>
        <div></div>
        <h1>
          <div></div>
          <div></div>
          <div></div>
          <div></div>
          <div></div>
        </h1>
        <div></div>
        <button onclick={(event) => (this.count += 1)}>
          <div></div>
        </button>
        <div></div>
      </div>
    );
  }
}
"
`;

exports[`Stencil > jsx > Javascript Test > Button 1`] = `
"import { Component, Prop, h, State, Fragment } from \\"@stencil/core\\";

@Component({
  tag: \\"button\\",
})
export default class Button {
  @Prop() link: any;
  @Prop() attributes: any;
  @Prop() openLinkInNewTab: any;
  @Prop() text: any;

  render() {
    return (
      <div>
        <div></div>
        {this.link ? (
          <>
            <div></div>
            <a>
              <div></div>
              <div></div>
              <div></div>
            </a>
            <div></div>
          </>
        ) : null}
        <div></div>
        {!this.link ? (
          <>
            <div></div>
            <button>
              <div></div>
              <div></div>
              <div></div>
            </button>
            <div></div>
          </>
        ) : null}
        <div></div>
      </div>
    );
  }
}
"
`;

exports[`Stencil > jsx > Javascript Test > Columns 1`] = `
"import { Component, Prop, h, State, Fragment } from \\"@stencil/core\\";

@Component({
  tag: \\"column\\",
  styles: \`
       .div {
         display: flex;
         flex-direction: column;
         align-items: stretch;
         line-height: normal;
       }
       @media (max-width: 999px) {
         .div {
           flex-direction: row;
         }
       }
       @media (max-width: 639px) {
         .div {
           flex-direction: row-reverse;
         }
       }
       .div-2 {
         flex-grow: 1;
       }
\`,
})
export default class Column {
  @Prop() columns: any;
  @Prop() space: any;

  getColumns() {
    return this.columns || [];
  }
  getGutterSize() {
    return typeof this.space === \\"number\\" ? this.space || 0 : 20;
  }
  getWidth(index) {
    const columns = this.getColumns();
    return (columns[index] && columns[index].width) || 100 / columns.length;
  }
  getColumnCssWidth(index) {
    const columns = this.getColumns();
    const gutterSize = this.getGutterSize();
    const subtractWidth = (gutterSize * (columns.length - 1)) / columns.length;
    return \`calc(\${this.getWidth(index)}% - \${subtractWidth}px)\`;
  }

  render() {
    return (
      <div>
        <div></div>
        {this.columns?.map((column, index) => (
          <div>
            <div></div>
            <div></div>
            <div></div>
            <div></div>
            <div></div>
          </div>
        ))}
        <div></div>
      </div>
    );
  }
}
"
`;

exports[`Stencil > jsx > Javascript Test > ContentSlotHtml 1`] = `
"import { Component, Prop, h, State, Fragment } from \\"@stencil/core\\";

@Component({
  tag: \\"content-slot-code\\",
})
export default class ContentSlotCode {
  @Prop() slotTesting: any;

  render() {
    return (
      <div>
        <div></div>
        <Slot name={this.slotTesting}></Slot>
        <div></div>
        <div>
          <div></div>
          <hr />
          <div></div>
        </div>
        <div></div>
        <div>
          <div></div>
          <Slot></Slot>
          <div></div>
        </div>
        <div></div>
      </div>
    );
  }
}
"
`;

exports[`Stencil > jsx > Javascript Test > ContentSlotJSX 1`] = `
"':' expected. (33:15)
  31 |        return (
  32 |        
> 33 |          {this.slotReference ? (
     |               ^
  34 |      <><div ></div>
  35 | <div  name={this.slotContent ? 'name1' : 'name2'}  onclick={event => this.show()} ><div ></div>
  36 | {this.showContent && this.slotContent ? ("
`;

exports[`Stencil > jsx > Javascript Test > CustomCode 1`] = `
"import { Component, Prop, h, State, Fragment } from \\"@stencil/core\\";

@Component({
  tag: \\"custom-code\\",
})
export default class CustomCode {
  @Prop() replaceNodes: any;
  @Prop() code: any;

  @State() scriptsInserted = [];
  @State() scriptsRun = [];

  findAndRunScripts() {
    // TODO: Move this function to standalone one in '@builder.io/utils'
    if (elem && typeof window !== \\"undefined\\") {
      /** @type {HTMLScriptElement[]} */
      const scripts = elem.getElementsByTagName(\\"script\\");

      for (let i = 0; i < scripts.length; i++) {
        const script = scripts[i];

        if (script.src) {
          if (this.scriptsInserted.includes(script.src)) {
            continue;
          }

          this.scriptsInserted.push(script.src);
          const newScript = document.createElement(\\"script\\");
          newScript.async = true;
          newScript.src = script.src;
          document.head.appendChild(newScript);
        } else if (
          !script.type ||
          [
            \\"text/javascript\\",
            \\"application/javascript\\",
            \\"application/ecmascript\\",
          ].includes(script.type)
        ) {
          if (this.scriptsRun.includes(script.innerText)) {
            continue;
          }

          try {
            this.scriptsRun.push(script.innerText);
            new Function(script.innerText)();
          } catch (error) {
            console.warn(\\"\`CustomCode\`: Error running script:\\", error);
          }
        }
      }
    }
  }

  componentDidLoad() {
    this.findAndRunScripts();
  }

  render() {
    return <div innerhtml={this.code}></div>;
  }
}
"
`;

exports[`Stencil > jsx > Javascript Test > Embed 1`] = `
"import { Component, Prop, h, State, Fragment } from \\"@stencil/core\\";

@Component({
  tag: \\"custom-code\\",
})
export default class CustomCode {
  @Prop() replaceNodes: any;
  @Prop() code: any;

  @State() scriptsInserted = [];
  @State() scriptsRun = [];

  findAndRunScripts() {
    // TODO: Move this function to standalone one in '@builder.io/utils'
    if (elem && typeof window !== \\"undefined\\") {
      /** @type {HTMLScriptElement[]} */
      const scripts = elem.getElementsByTagName(\\"script\\");

      for (let i = 0; i < scripts.length; i++) {
        const script = scripts[i];

        if (script.src) {
          if (this.scriptsInserted.includes(script.src)) {
            continue;
          }

          this.scriptsInserted.push(script.src);
          const newScript = document.createElement(\\"script\\");
          newScript.async = true;
          newScript.src = script.src;
          document.head.appendChild(newScript);
        } else if (
          !script.type ||
          [
            \\"text/javascript\\",
            \\"application/javascript\\",
            \\"application/ecmascript\\",
          ].includes(script.type)
        ) {
          if (this.scriptsRun.includes(script.innerText)) {
            continue;
          }

          try {
            this.scriptsRun.push(script.innerText);
            new Function(script.innerText)();
          } catch (error) {
            console.warn(\\"\`CustomCode\`: Error running script:\\", error);
          }
        }
      }
    }
  }

  componentDidLoad() {
    this.findAndRunScripts();
  }

  render() {
    return <div innerhtml={this.code}></div>;
  }
}
"
`;

exports[`Stencil > jsx > Javascript Test > Form 1`] = `
"import { BuilderBlock as BuilderBlockComponent } from \\"@fake\\";
import { Builder, builder } from \\"@builder.io/sdk\\";
import { BuilderBlocks } from \\"@fake\\";
import { set } from \\"@fake\\";
import { get } from \\"@fake\\";

import { Component, Prop, h, State, Fragment } from \\"@stencil/core\\";

@Component({
  tag: \\"form-component\\",
  styles: \`
       .pre {
         padding: 10px;
         color: red;
         text-align: center;
       }
\`,
})
export default class FormComponent {
  @Prop() previewState: any;
  @Prop() sendWithJs: any;
  @Prop() sendSubmissionsTo: any;
  @Prop() action: any;
  @Prop() customHeaders: any;
  @Prop() contentType: any;
  @Prop() sendSubmissionsToEmail: any;
  @Prop() name: any;
  @Prop() method: any;
  @Prop() errorMessagePath: any;
  @Prop() resetFormOnSubmit: any;
  @Prop() successUrl: any;
  @Prop() validate: any;
  @Prop() attributes: any;
  @Prop() builderBlock: any;
  @Prop() errorMessage: any;
  @Prop() sendingMessage: any;
  @Prop() successMessage: any;

  @State() formState = \\"unsubmitted\\";
  @State() responseData = null;
  @State() formErrorMessage = \\"\\";

  get submissionState() {
    return (Builder.isEditing && this.previewState) || this.formState;
  }
  onSubmit(event) {
    const sendWithJs = this.sendWithJs || this.sendSubmissionsTo === \\"email\\";

    if (this.sendSubmissionsTo === \\"zapier\\") {
      event.preventDefault();
    } else if (sendWithJs) {
      if (!(this.action || this.sendSubmissionsTo === \\"email\\")) {
        event.preventDefault();
        return;
      }

      event.preventDefault();
      const el = event.currentTarget;
      const headers = this.customHeaders || {};
      let body;
      const formData = new FormData(el); // TODO: maybe support null

      const formPairs = Array.from(
        event.currentTarget.querySelectorAll(\\"input,select,textarea\\")
      )
        .filter((el) => !!el.name)
        .map((el) => {
          let value;
          const key = el.name;

          if (el instanceof HTMLInputElement) {
            if (el.type === \\"radio\\") {
              if (el.checked) {
                value = el.name;
                return {
                  key,
                  value,
                };
              }
            } else if (el.type === \\"checkbox\\") {
              value = el.checked;
            } else if (el.type === \\"number\\" || el.type === \\"range\\") {
              const num = el.valueAsNumber;

              if (!isNaN(num)) {
                value = num;
              }
            } else if (el.type === \\"file\\") {
              // TODO: one vs multiple files
              value = el.files;
            } else {
              value = el.value;
            }
          } else {
            value = el.value;
          }

          return {
            key,
            value,
          };
        });
      let contentType = this.contentType;

      if (this.sendSubmissionsTo === \\"email\\") {
        contentType = \\"multipart/form-data\\";
      }

      Array.from(formPairs).forEach(({ value }) => {
        if (
          value instanceof File ||
          (Array.isArray(value) && value[0] instanceof File) ||
          value instanceof FileList
        ) {
          contentType = \\"multipart/form-data\\";
        }
      }); // TODO: send as urlEncoded or multipart by default
      // because of ease of use and reliability in browser API
      // for encoding the form?

      if (contentType !== \\"application/json\\") {
        body = formData;
      } else {
        // Json
        const json = {};
        Array.from(formPairs).forEach(({ value, key }) => {
          set(json, key, value);
        });
        body = JSON.stringify(json);
      }

      if (contentType && contentType !== \\"multipart/form-data\\") {
        if (
          /* Zapier doesn't allow content-type header to be sent from browsers */
          !(sendWithJs && this.action?.includes(\\"zapier.com\\"))
        ) {
          headers[\\"content-type\\"] = contentType;
        }
      }

      const presubmitEvent = new CustomEvent(\\"presubmit\\", {
        detail: {
          body,
        },
      });

      if (formRef) {
        formRef.dispatchEvent(presubmitEvent);

        if (presubmitEvent.defaultPrevented) {
          return;
        }
      }

      this.formState = \\"sending\\";
      const formUrl = \`\${
        builder.env === \\"dev\\" ? \\"http://localhost:5000\\" : \\"https://builder.io\\"
      }/api/v1/form-submit?apiKey=\${builder.apiKey}&to=\${btoa(
        this.sendSubmissionsToEmail || \\"\\"
      )}&name=\${encodeURIComponent(this.name || \\"\\")}\`;
      fetch(
        this.sendSubmissionsTo === \\"email\\" ? formUrl : this.action,
        /* TODO: throw error if no action URL */
        {
          body,
          headers,
          method: this.method || \\"post\\",
        }
      ).then(
        async (res) => {
          let body;
          const contentType = res.headers.get(\\"content-type\\");

          if (contentType && contentType.indexOf(\\"application/json\\") !== -1) {
            body = await res.json();
          } else {
            body = await res.text();
          }

          if (!res.ok && this.errorMessagePath) {
            /* TODO: allow supplying an error formatter function */
            let message = get(body, this.errorMessagePath);

            if (message) {
              if (typeof message !== \\"string\\") {
                /* TODO: ideally convert json to yaml so it woul dbe like
            error: - email has been taken */
                message = JSON.stringify(message);
              }

              this.formErrorMessage = message;
            }
          }

          this.responseData = body;
          this.formState = res.ok ? \\"success\\" : \\"error\\";

          if (res.ok) {
            const submitSuccessEvent = new CustomEvent(\\"submit:success\\", {
              detail: {
                res,
                body,
              },
            });

            if (formRef) {
              formRef.dispatchEvent(submitSuccessEvent);

              if (submitSuccessEvent.defaultPrevented) {
                return;
              }
              /* TODO: option to turn this on/off? */

              if (this.resetFormOnSubmit !== false) {
                formRef.reset();
              }
            }
            /* TODO: client side route event first that can be preventDefaulted */

            if (this.successUrl) {
              if (formRef) {
                const event = new CustomEvent(\\"route\\", {
                  detail: {
                    url: this.successUrl,
                  },
                });
                formRef.dispatchEvent(event);

                if (!event.defaultPrevented) {
                  location.href = this.successUrl;
                }
              } else {
                location.href = this.successUrl;
              }
            }
          }
        },
        (err) => {
          const submitErrorEvent = new CustomEvent(\\"submit:error\\", {
            detail: {
              error: err,
            },
          });

          if (formRef) {
            formRef.dispatchEvent(submitErrorEvent);

            if (submitErrorEvent.defaultPrevented) {
              return;
            }
          }

          this.responseData = err;
          this.formState = \\"error\\";
        }
      );
    }
  }

  render() {
    return (
      <form name={this.name} onsubmit={(event) => this.onSubmit(event)}>
        <div></div>
        {this.builderBlock && this.builderBlock.children ? (
          <>
            <div></div>
            {this.builderBlock?.children?.map((block, index) => (
              <BuilderBlockComponent
                key={block.id}
                block={block}
                index={index}
              ></BuilderBlockComponent>
            ))}
            <div></div>
          </>
        ) : null}
        <div></div>
        {this.submissionState === \\"error\\" ? (
          <>
            <div></div>
            <BuilderBlocks
              dataPath=\\"errorMessage\\"
              blocks={this.errorMessage}
            ></BuilderBlocks>
            <div></div>
          </>
        ) : null}
        <div></div>
        {this.submissionState === \\"sending\\" ? (
          <>
            <div></div>
            <BuilderBlocks
              dataPath=\\"sendingMessage\\"
              blocks={this.sendingMessage}
            ></BuilderBlocks>
            <div></div>
          </>
        ) : null}
        <div></div>
        {this.submissionState === \\"error\\" && this.responseData ? (
          <>
            <div></div>
            <pre>
              <div></div>
              <div></div>
              <div></div>
            </pre>
            <div></div>
          </>
        ) : null}
        <div></div>
        {this.submissionState === \\"success\\" ? (
          <>
            <div></div>
            <BuilderBlocks
              dataPath=\\"successMessage\\"
              blocks={this.successMessage}
            ></BuilderBlocks>
            <div></div>
          </>
        ) : null}
        <div></div>
      </form>
    );
  }
}
"
`;

exports[`Stencil > jsx > Javascript Test > Image 1`] = `
"import { Component, Prop, h, State, Fragment } from \\"@stencil/core\\";

@Component({
  tag: \\"image\\",
  styles: \`
       .img {
         opacity: 1;
         transition: opacity 0.2s ease-in-out;
         object-fit: cover;
         object-position: center;
       }
\`,
})
export default class Image {
  @Prop() lazy: any;
  @Prop() altText: any;
  @Prop() _class: any;
  @Prop() image: any;
  @Prop() srcset: any;
  @Prop() sizes: any;
  @Prop() children: any;

  @State() scrollListener = null;
  @State() imageLoaded = false;
  @State() load = false;

  setLoaded() {
    this.imageLoaded = true;
  }
  useLazyLoading() {
    // TODO: Add more checks here, like testing for real web browsers
    return !!this.lazy && isBrowser();
  }
  isBrowser = function isBrowser() {
    return (
      typeof window !== \\"undefined\\" && window.navigator.product != \\"ReactNative\\"
    );
  };

  componentDidLoad() {
    if (this.useLazyLoading()) {
      // throttled scroll capture listener
      const listener = () => {
        if (pictureRef) {
          const rect = pictureRef.getBoundingClientRect();
          const buffer = window.innerHeight / 2;

          if (rect.top < window.innerHeight + buffer) {
            setLoad(true);
            this.scrollListener = null;
            window.removeEventListener(\\"scroll\\", listener);
          }
        }
      };

      this.scrollListener = listener;
      window.addEventListener(\\"scroll\\", listener, {
        capture: true,
        passive: true,
      });
      listener();
    }
  }
  disconnectedCallback() {
    if (this.scrollListener) {
      window.removeEventListener(\\"scroll\\", this.scrollListener);
    }
  }

  render() {
    return (
      <div>
        <div></div>
        <picture>
          <div></div>
          {!this.useLazyLoading() || this.load ? (
            <>
              <div></div>
              <img
                aria-role={this.altText ? \\"presentation\\" : undefined}
                onload={(event) => this.setLoaded()}
              />
              <div></div>
            </>
          ) : null}
          <div></div>
          <source />
          <div></div>
        </picture>
        <div></div>
        <div></div>
        <div></div>
      </div>
    );
  }
}
"
`;

exports[`Stencil > jsx > Javascript Test > Image State 1`] = `
"import { Component, Prop, h, State, Fragment } from \\"@stencil/core\\";

@Component({
  tag: \\"img-state-component\\",
})
export default class ImgStateComponent {
  @State() canShow = true;
  @State() images = [\\"http://example.com/qwik.png\\"];

  render() {
    return (
      <div>
        <div></div>
        {this.images?.map((item, itemIndex) => (
          <Fragment>
            <div></div>
            <img />
            <div></div>
          </Fragment>
        ))}
        <div></div>
      </div>
    );
  }
}
"
`;

exports[`Stencil > jsx > Javascript Test > Img 1`] = `
"import { Builder } from \\"@builder.io/sdk\\";

import { Component, Prop, h, State, Fragment } from \\"@stencil/core\\";

@Component({
  tag: \\"img-component\\",
})
export default class ImgComponent {
  @Prop() backgroundSize: any;
  @Prop() backgroundPosition: any;
  @Prop() attributes: any;
  @Prop() imgSrc: any;
  @Prop() altText: any;

  render() {
    return <img />;
  }
}
"
`;

exports[`Stencil > jsx > Javascript Test > Input 1`] = `
"import { Builder } from \\"@builder.io/sdk\\";

import { Component, Prop, h, State, Fragment } from \\"@stencil/core\\";

@Component({
  tag: \\"form-input-component\\",
})
export default class FormInputComponent {
  @Prop() attributes: any;
  @Prop() defaultValue: any;
  @Prop() placeholder: any;
  @Prop() type: any;
  @Prop() name: any;
  @Prop() value: any;
  @Prop() required: any;

  render() {
    return <input name={this.name} defaultvalue={this.defaultValue} />;
  }
}
"
`;

exports[`Stencil > jsx > Javascript Test > RawText 1`] = `
"import { Component, Prop, h, State, Fragment } from \\"@stencil/core\\";

@Component({
  tag: \\"raw-text\\",
})
export default class RawText {
  @Prop() attributes: any;
  @Prop() text: any;

  render() {
    return <span innerhtml={this.text || \\"\\"}></span>;
  }
}
"
`;

exports[`Stencil > jsx > Javascript Test > Section 1`] = `
"import { Component, Prop, h, State, Fragment } from \\"@stencil/core\\";

@Component({
  tag: \\"section-component\\",
})
export default class SectionComponent {
  @Prop() attributes: any;
  @Prop() maxWidth: any;
  @Prop() children: any;

  render() {
    return (
      <section>
        <div></div>
        <div></div>
        <div></div>
      </section>
    );
  }
}
"
`;

exports[`Stencil > jsx > Javascript Test > Select 1`] = `
"import { Builder } from \\"@builder.io/sdk\\";

import { Component, Prop, h, State, Fragment } from \\"@stencil/core\\";

@Component({
  tag: \\"select-component\\",
})
export default class SelectComponent {
  @Prop() attributes: any;
  @Prop() value: any;
  @Prop() defaultValue: any;
  @Prop() name: any;
  @Prop() options: any;

  render() {
    return (
      <select name={this.name} defaultvalue={this.defaultValue}>
        <div></div>
        {this.options?.map((option, index) => (
          <option data-index={index}>
            <div></div>
            <div></div>
            <div></div>
          </option>
        ))}
        <div></div>
      </select>
    );
  }
}
"
`;

exports[`Stencil > jsx > Javascript Test > SlotDefault 1`] = `
"import { Component, Prop, h, State, Fragment } from \\"@stencil/core\\";

@Component({
  tag: \\"slot-code\\",
})
export default class SlotCode {
  render() {
    return (
      <div>
        <div></div>
        <Slot>
          <div></div>
          <div>
            <div></div>
          </div>
          <div></div>
        </Slot>
        <div></div>
      </div>
    );
  }
}
"
`;

exports[`Stencil > jsx > Javascript Test > SlotHtml 1`] = `
"import ContentSlotCode from \\"./content-slot-jsx.raw\\";

import { Component, Prop, h, State, Fragment } from \\"@stencil/core\\";

@Component({
  tag: \\"slot-code\\",
})
export default class SlotCode {
  render() {
    return (
      <div>
        <div></div>
        <ContentSlotCode>
          <div></div>
          <Slot testing={<div>Hello</div>}></Slot>
          <div></div>
        </ContentSlotCode>
        <div></div>
      </div>
    );
  }
}
"
`;

exports[`Stencil > jsx > Javascript Test > SlotJsx 1`] = `
"import ContentSlotCode from \\"./content-slot-jsx.raw\\";

import { Component, Prop, h, State, Fragment } from \\"@stencil/core\\";

@Component({
  tag: \\"slot-code\\",
})
export default class SlotCode {
  render() {
    return (
      <div>
        <div></div>
        <ContentSlotCode slotTesting={<div>Hello</div>}></ContentSlotCode>
        <div></div>
      </div>
    );
  }
}
"
`;

exports[`Stencil > jsx > Javascript Test > SlotNamed 1`] = `
"import { Component, Prop, h, State, Fragment } from \\"@stencil/core\\";

@Component({
  tag: \\"slot-code\\",
})
export default class SlotCode {
  render() {
    return (
      <div>
        <div></div>
        <Slot name=\\"top\\"></Slot>
        <div></div>
        <Slot name=\\"left\\">
          <div></div>
        </Slot>
        <div></div>
        <Slot>
          <div></div>
        </Slot>
        <div></div>
      </div>
    );
  }
}
"
`;

exports[`Stencil > jsx > Javascript Test > Stamped.io 1`] = `
"import { kebabCase } from \\"lodash\\";
import { snakeCase } from \\"lodash\\";

import { Component, Prop, h, State, Fragment } from \\"@stencil/core\\";

@Component({
  tag: \\"smile-reviews\\",
  styles: \`
       .input {
         display: block;
       }
       .textarea {
         display: block;
       }
       .button {
         display: block;
       }
       .review {
         margin: 10px;
         padding: 10px;
         background: white;
         display: flex;
         border-radius: 5px;
         box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
       }
       .img {
         height: 30px;
         width: 30px;
         margin-right: 10px;
       }
\`,
})
export default class SmileReviews {
  @Prop() apiKey: any;
  @Prop() productId: any;

  @State() reviews = [];
  @State() name = \\"test\\";
  @State() showReviewPrompt = false;

  kebabCaseValue() {
    return kebabCase(\\"testThat\\");
  }
  snakeCaseValue() {
    return snakeCase(\\"testThis\\");
  }

  componentDidLoad() {
    fetch(
      \`https://stamped.io/api/widget/reviews?storeUrl=builder-io.myshopify.com&apiKey=\${
        this.apiKey || \\"pubkey-8bbDq7W6w4sB3OWeM1HUy2s47702hM\\"
      }&productId=\${this.productId || \\"2410511106127\\"}\`
    )
      .then((res) => res.json())
      .then((data) => {
        this.reviews = data.data;
      });
  }

  render() {
    return (
      <div data-user={this.name}>
        <div></div>
        <button onclick={(event) => (this.showReviewPrompt = true)}>
          <div></div>
        </button>
        <div></div>
        {this.showReviewPrompt || \\"asdf\\" ? (
          <>
            <div></div>
            <input />
            <div></div>
            <input />
            <div></div>
            <textarea></textarea>
            <div></div>
            <button
              onclick={(event) => {
                event.preventDefault();
                this.showReviewPrompt = false;
              }}
            >
              <div></div>
            </button>
            <div></div>
          </>
        ) : null}
        <div></div>
        {this.reviews?.map((review, index) => (
          <div>
            <div></div>
            <img />
            <div></div>
            <div>
              <div></div>
              <div>
                <div></div>
                <div></div>
              </div>
              <div></div>
              <div>
                <div></div>
              </div>
              <div></div>
              <div>
                <div></div>
              </div>
              <div></div>
            </div>
            <div></div>
          </div>
        ))}
        <div></div>
      </div>
    );
  }
}
"
`;

exports[`Stencil > jsx > Javascript Test > Submit 1`] = `
"import { Component, Prop, h, State, Fragment } from \\"@stencil/core\\";

@Component({
  tag: \\"submit-button\\",
})
export default class SubmitButton {
  @Prop() attributes: any;
  @Prop() text: any;

  render() {
    return (
      <button>
        <div></div>
        <div></div>
        <div></div>
      </button>
    );
  }
}
"
`;

exports[`Stencil > jsx > Javascript Test > Text 1`] = `
"import { Builder } from \\"@builder.io/sdk\\";

import { Component, Prop, h, State, Fragment } from \\"@stencil/core\\";

@Component({
  tag: \\"text\\",
})
export default class Text {
  @Prop() text: any;
  @Prop() content: any;

  @State() name = \\"Decadef20\\";

  render() {
    return (
      <div
        data-name={{
          test: this.name || \\"any name\\",
        }}
        contenteditable={allowEditingText || undefined}
        innerhtml={
          this.text ||
          this.content ||
          this.name ||
          '<p class=\\"text-lg\\">my name</p>'
        }
      ></div>
    );
  }
}
"
`;

exports[`Stencil > jsx > Javascript Test > Textarea 1`] = `
"import { Component, Prop, h, State, Fragment } from \\"@stencil/core\\";

@Component({
  tag: \\"textarea\\",
})
export default class Textarea {
  @Prop() attributes: any;
  @Prop() placeholder: any;
  @Prop() name: any;
  @Prop() value: any;
  @Prop() defaultValue: any;

  render() {
    return (
      <textarea name={this.name} defaultvalue={this.defaultValue}></textarea>
    );
  }
}
"
`;

exports[`Stencil > jsx > Javascript Test > Video 1`] = `
"import { Component, Prop, h, State, Fragment } from \\"@stencil/core\\";

@Component({
  tag: \\"video\\",
})
export default class Video {
  @Prop() attributes: any;
  @Prop() fit: any;
  @Prop() position: any;
  @Prop() video: any;
  @Prop() posterImage: any;
  @Prop() autoPlay: any;
  @Prop() muted: any;
  @Prop() controls: any;
  @Prop() loop: any;

  render() {
    return <video></video>;
  }
}
"
`;

exports[`Stencil > jsx > Javascript Test > arrowFunctionInUseStore 1`] = `
"import { Component, Prop, h, State, Fragment } from \\"@stencil/core\\";

@Component({
  tag: \\"my-component\\",
})
export default class MyComponent {
  @State() name = \\"steve\\";

  setName(value) {
    this.name = value;
  }
  updateNameWithArrowFn(value) {
    this.name = value;
  }

  render() {
    return (
      <div>
        <div></div>
        <div></div>
      </div>
    );
  }
}
"
`;

exports[`Stencil > jsx > Javascript Test > basicForwardRef 1`] = `
"import { Component, Prop, h, State, Fragment } from \\"@stencil/core\\";

@Component({
  tag: \\"my-basic-forward-ref-component\\",
  styles: \`
    .input {
      color: red;
    }
\`,
})
export default class MyBasicForwardRefComponent {
  @Prop() inputRef: any;

  @State() name = \\"PatrickJS\\";

  render() {
    return (
      <div>
        <div></div>
        <input onchange={(event) => (this.name = event.target.value)} />
        <div></div>
      </div>
    );
  }
}
"
`;

exports[`Stencil > jsx > Javascript Test > basicForwardRefMetadata 1`] = `
"import { Component, Prop, h, State, Fragment } from \\"@stencil/core\\";

@Component({
  tag: \\"my-basic-forward-ref-component\\",
  styles: \`
    .input {
      color: red;
    }
\`,
})
export default class MyBasicForwardRefComponent {
  @Prop() inputRef: any;

  @State() name = \\"PatrickJS\\";

  render() {
    return (
      <div>
        <div></div>
        <input onchange={(event) => (this.name = event.target.value)} />
        <div></div>
      </div>
    );
  }
}
"
`;

exports[`Stencil > jsx > Javascript Test > basicOnUpdateReturn 1`] = `
"import { Component, Prop, h, State, Fragment } from \\"@stencil/core\\";

@Component({
  tag: \\"my-basic-on-update-return-component\\",
})
export default class MyBasicOnUpdateReturnComponent {
  @State() name = \\"PatrickJS\\";

  componentDidUpdate() {
    const controller = new AbortController();
    const signal = controller.signal;
    fetch(\\"https://patrickjs.com/api/resource.json\\", {
      signal,
    })
      .then((response) => response.json())
      .then((data) => {
        this.name = data.name;
      });
    return () => {
      if (!signal.aborted) {
        controller.abort();
      }
    };
  }

  render() {
    return (
      <div>
        <div></div>
        <div></div>
      </div>
    );
  }
}
"
`;

exports[`Stencil > jsx > Javascript Test > camelCasedAttributes 1`] = `
"import React from \\"@builder.io/react\\";

import { Component, Prop, h, State, Fragment } from \\"@stencil/core\\";

@Component({
  tag: \\"my-component\\",
})
export default class MyComponent {
  @State() name = \\"Steve\\";

  render() {
    return (
      <div>
        <div></div>
        <img srcset=\\"http://example.com\\" />
        <div></div>
      </div>
    );
  }
}
"
`;

exports[`Stencil > jsx > Javascript Test > class + ClassName + css 1`] = `
"import { Component, Prop, h, State, Fragment } from \\"@stencil/core\\";

@Component({
  tag: \\"my-basic-component\\",
  styles: \`
    .div {
      padding: 10px;
    }
\`,
})
export default class MyBasicComponent {
  render() {
    return (
      <div>
        <div></div>
      </div>
    );
  }
}
"
`;

exports[`Stencil > jsx > Javascript Test > class + css 1`] = `
"import { Component, Prop, h, State, Fragment } from \\"@stencil/core\\";

@Component({
  tag: \\"my-basic-component\\",
  styles: \`
    .div {
      padding: 10px;
    }
\`,
})
export default class MyBasicComponent {
  render() {
    return (
      <div>
        <div></div>
      </div>
    );
  }
}
"
`;

exports[`Stencil > jsx > Javascript Test > className + css 1`] = `
"import { Component, Prop, h, State, Fragment } from \\"@stencil/core\\";

@Component({
  tag: \\"my-basic-component\\",
  styles: \`
    .div {
      padding: 10px;
    }
\`,
})
export default class MyBasicComponent {
  render() {
    return (
      <div>
        <div></div>
      </div>
    );
  }
}
"
`;

exports[`Stencil > jsx > Javascript Test > className 1`] = `
"import { Component, Prop, h, State, Fragment } from \\"@stencil/core\\";

@Component({
  tag: \\"class-name-code\\",
})
export default class ClassNameCode {
  @State() bindings = \\"a binding\\";

  render() {
    return (
      <div>
        <div></div>
        <div></div>
        <div>
          <div></div>
        </div>
        <div></div>
        <div></div>
        <div>
          <div></div>
        </div>
        <div></div>
      </div>
    );
  }
}
"
`;

exports[`Stencil > jsx > Javascript Test > classState 1`] = `
"import { Component, Prop, h, State, Fragment } from \\"@stencil/core\\";

@Component({
  tag: \\"my-basic-component\\",
  styles: \`
      .div {
        padding: 10px;
      }
\`,
})
export default class MyBasicComponent {
  @State() classState = \\"testClassName\\";
  @State() styleState = {
    color: \\"red\\",
  };

  render() {
    return (
      <div>
        <div></div>
      </div>
    );
  }
}
"
`;

exports[`Stencil > jsx > Javascript Test > componentWithContext 1`] = `
"import Context1 from \\"@dummy/1\\";
import Context2 from \\"@dummy/2\\";

import { Component, Prop, h, State, Fragment } from \\"@stencil/core\\";

@Component({
  tag: \\"component-with-context\\",
})
export default class ComponentWithContext {
  @Prop() content: any;

  render() {
    return (
      <Fragment>
        <div></div>
        <Fragment>
          <div></div>
        </Fragment>
        <div></div>
      </Fragment>
    );
  }
}
"
`;

exports[`Stencil > jsx > Javascript Test > componentWithContextMultiRoot 1`] = `
"import Context1 from \\"@dummy/1\\";
import Context2 from \\"@dummy/2\\";

import { Component, Prop, h, State, Fragment } from \\"@stencil/core\\";

@Component({
  tag: \\"component-with-context\\",
})
export default class ComponentWithContext {
  @Prop() content: any;

  render() {
    return (
      <Fragment>
        <div></div>
        <Fragment>
          <div></div>
        </Fragment>
        <div></div>
        <div>
          <div></div>
        </div>
        <div></div>
      </Fragment>
    );
  }
}
"
`;

exports[`Stencil > jsx > Javascript Test > contentState 1`] = `
"import BuilderContext from \\"@dummy/context.lite\\";

import { Component, Prop, h, State, Fragment } from \\"@stencil/core\\";

@Component({
  tag: \\"render-content\\",
})
export default class RenderContent {
  @Prop() content: any;
  @Prop() customComponents: any;

  render() {
    return (
      <div>
        <div></div>
      </div>
    );
  }
}
"
`;

exports[`Stencil > jsx > Javascript Test > defaultProps 1`] = `
"import { Component, Prop, h, State, Fragment } from \\"@stencil/core\\";

@Component({
  tag: \\"button\\",
})
export default class Button {
  @Prop() link: any;
  @Prop() attributes: any;
  @Prop() openLinkInNewTab: any;
  @Prop() text: any;
  @Prop() onClick: any;
  @Prop() buttonText: any;

  render() {
    return (
      <div>
        <div></div>
        {this.link ? (
          <>
            <div></div>
            <a>
              <div></div>
              <div></div>
              <div></div>
            </a>
            <div></div>
          </>
        ) : null}
        <div></div>
        {!this.link ? (
          <>
            <div></div>
            <button onclick={(event) => this.onClick(event)}>
              <div></div>
              <div></div>
              <div></div>
            </button>
            <div></div>
          </>
        ) : null}
        <div></div>
      </div>
    );
  }
}
"
`;

exports[`Stencil > jsx > Javascript Test > defaultPropsOutsideComponent 1`] = `
"import { Component, Prop, h, State, Fragment } from \\"@stencil/core\\";

@Component({
  tag: \\"button\\",
})
export default class Button {
  @Prop() link: any;
  @Prop() attributes: any;
  @Prop() openLinkInNewTab: any;
  @Prop() text: any;
  @Prop() onClick: any;

  render() {
    return (
      <div>
        <div></div>
        {this.link ? (
          <>
            <div></div>
            <a>
              <div></div>
              <div></div>
              <div></div>
            </a>
            <div></div>
          </>
        ) : null}
        <div></div>
        {!this.link ? (
          <>
            <div></div>
            <button onclick={(event) => this.onClick(event)}>
              <div></div>
              <div></div>
              <div></div>
            </button>
            <div></div>
          </>
        ) : null}
        <div></div>
      </div>
    );
  }
}
"
`;

exports[`Stencil > jsx > Javascript Test > defaultValsWithTypes 1`] = `
"const DEFAULT_VALUES: Props = {
  name: \\"Sami\\",
};

import { Component, Prop, h, State, Fragment } from \\"@stencil/core\\";

@Component({
  tag: \\"component-with-types\\",
})
export default class ComponentWithTypes {
  @Prop() name: any;

  render() {
    return (
      <div>
        <div></div>
        <div></div>
      </div>
    );
  }
}
"
`;

exports[`Stencil > jsx > Javascript Test > expressionState 1`] = `
"import { Component, Prop, h, State, Fragment } from \\"@stencil/core\\";

@Component({
  tag: \\"my-component\\",
})
export default class MyComponent {
  @Prop() componentRef: any;

  @State() refToUse = !(this.componentRef instanceof Function)
    ? this.componentRef
    : null;

  render() {
    return (
      <div>
        <div></div>
      </div>
    );
  }
}
"
`;

exports[`Stencil > jsx > Javascript Test > import types 1`] = `
"import RenderBlock from \\"./builder-render-block.raw\\";

import { Component, Prop, h, State, Fragment } from \\"@stencil/core\\";

@Component({
  tag: \\"render-content\\",
})
export default class RenderContent {
  @Prop() renderContentProps: any;

  getRenderContentProps(block, index) {
    return {
      block: block,
      index: index,
    };
  }

  render() {
    return (
      <RenderBlock
        {...state.getRenderContentProps(props.renderContentProps.block, 0)}
      ></RenderBlock>
    );
  }
}
"
`;

exports[`Stencil > jsx > Javascript Test > multipleSpreads 1`] = `
"import { Component, Prop, h, State, Fragment } from \\"@stencil/core\\";

@Component({
  tag: \\"my-basic-component\\",
})
export default class MyBasicComponent {
  @State() attrs = {
    hello: \\"world\\",
  };

  render() {
    return <input />;
  }
}
"
`;

exports[`Stencil > jsx > Javascript Test > nestedStyles 1`] = `
"import { Component, Prop, h, State, Fragment } from \\"@stencil/core\\";

@Component({
  tag: \\"nested-styles\\",
  styles: \`
    .div {
      display: flex;
      foo: var(--bar);
    }
    @media (max-width: env(--mobile)) {
      .div {
        display: block;
      }
    }
    .div:hover {
      display: flex;
    }
    .div .nested-selector {
      display: grid;
    }
\`,
})
export default class NestedStyles {
  render() {
    return (
      <div>
        <div></div>
      </div>
    );
  }
}
"
`;

exports[`Stencil > jsx > Javascript Test > onInit & onMount 1`] = `
"import { Component, Prop, h, State, Fragment } from \\"@stencil/core\\";

@Component({
  tag: \\"on-init\\",
})
export default class OnInit {
  componentDidLoad() {
    console.log(\\"onMount\\");
  }

  render() {
    return <div></div>;
  }
}
"
`;

exports[`Stencil > jsx > Javascript Test > onInit 1`] = `
"export const defaultValues = {
  name: \\"PatrickJS\\",
};

import { Component, Prop, h, State, Fragment } from \\"@stencil/core\\";

@Component({
  tag: \\"on-init\\",
})
export default class OnInit {
  @Prop() name: any;

  @State() name = \\"\\";

  render() {
    return (
      <div>
        <div></div>
        <div></div>
      </div>
    );
  }
}
"
`;

exports[`Stencil > jsx > Javascript Test > onMount 1`] = `
"import { Component, Prop, h, State, Fragment } from \\"@stencil/core\\";

@Component({
  tag: \\"comp\\",
})
export default class Comp {
  componentDidLoad() {
    console.log(\\"Runs on mount\\");
  }
  disconnectedCallback() {
    console.log(\\"Runs on unMount\\");
  }

  render() {
    return <div></div>;
  }
}
"
`;

exports[`Stencil > jsx > Javascript Test > onUpdate 1`] = `
"import { Component, Prop, h, State, Fragment } from \\"@stencil/core\\";

@Component({
  tag: \\"on-update\\",
})
export default class OnUpdate {
  componentDidUpdate() {
    console.log(\\"Runs on every update/rerender\\");
  }

  render() {
    return <div></div>;
  }
}
"
`;

exports[`Stencil > jsx > Javascript Test > onUpdateWithDeps 1`] = `
"import { Component, Prop, h, State, Fragment } from \\"@stencil/core\\";

@Component({
  tag: \\"on-update-with-deps\\",
})
export default class OnUpdateWithDeps {
  @Prop() size: any;

  @State() a = \\"a\\";
  @State() b = \\"b\\";

  componentDidUpdate() {
    console.log(\\"Runs when a, b or size changes\\", this.a, this.b, this.size);
  }

  render() {
    return <div></div>;
  }
}
"
`;

exports[`Stencil > jsx > Javascript Test > preserveExportOrLocalStatement 1`] = `
"const b = 3;
const foo = () => {};
export const a = 3;
export const bar = () => {};
export function run<T>(value: T) {}

import { Component, Prop, h, State, Fragment } from \\"@stencil/core\\";

@Component({
  tag: \\"my-basic-component\\",
})
export default class MyBasicComponent {
  render() {
    return <div></div>;
  }
}
"
`;

exports[`Stencil > jsx > Javascript Test > preserveTyping 1`] = `
"import { Component, Prop, h, State, Fragment } from \\"@stencil/core\\";

@Component({
  tag: \\"my-basic-component\\",
})
export default class MyBasicComponent {
  @Prop() name: any;

  render() {
    return (
      <div>
        <div></div>
        <div></div>
      </div>
    );
  }
}
"
`;

exports[`Stencil > jsx > Javascript Test > propsDestructure 1`] = `
"import { Component, Prop, h, State, Fragment } from \\"@stencil/core\\";

@Component({
  tag: \\"my-basic-component\\",
})
export default class MyBasicComponent {
  @Prop() children: any;
  @Prop() type: any;

  @State() name = \\"Decadef20\\";

  render() {
    return (
      <div>
        <div></div>
        <div></div>
        <div></div>
        <div></div>
        <div></div>
      </div>
    );
  }
}
"
`;

exports[`Stencil > jsx > Javascript Test > propsInterface 1`] = `
"import { Component, Prop, h, State, Fragment } from \\"@stencil/core\\";

@Component({
  tag: \\"my-basic-component\\",
})
export default class MyBasicComponent {
  @Prop() name: any;

  render() {
    return (
      <div>
        <div></div>
        <div></div>
      </div>
    );
  }
}
"
`;

exports[`Stencil > jsx > Javascript Test > propsType 1`] = `
"import { Component, Prop, h, State, Fragment } from \\"@stencil/core\\";

@Component({
  tag: \\"my-basic-component\\",
})
export default class MyBasicComponent {
  @Prop() name: any;

  render() {
    return (
      <div>
        <div></div>
        <div></div>
      </div>
    );
  }
}
"
`;

exports[`Stencil > jsx > Javascript Test > referencingFunInsideHook 1`] = `
"import { Component, Prop, h, State, Fragment } from \\"@stencil/core\\";

@Component({
  tag: \\"on-update\\",
})
export default class OnUpdate {
  foo = function foo(params) {};
  bar = function bar() {};
  zoo = function zoo() {
    const params = {
      cb: this.bar,
    };
  };

  componentDidUpdate() {
    foo({
      someOption: bar,
    });
  }

  render() {
    return <div></div>;
  }
}
"
`;

exports[`Stencil > jsx > Javascript Test > renderBlock 1`] = `
"':' expected. (205:15)
  203 |        return (
  204 |        
> 205 |          {this.shouldWrap ? (
      |               ^
  206 |      <><div ></div>
  207 | <div ></div>
  208 | {isEmptyHtmlElement(this.tag) ? ("
`;

exports[`Stencil > jsx > Javascript Test > renderContentExample 1`] = `
"import {
  sendComponentsToVisualEditor,
  dispatchNewContentToVisualEditor,
  trackClick,
} from \\"@dummy/injection-js\\";
import BuilderContext from \\"@dummy/context.lite\\";
import RenderBlocks from \\"@dummy/RenderBlocks.lite.tsx\\";

import { Component, Prop, h, State, Fragment } from \\"@stencil/core\\";

@Component({
  tag: \\"render-content\\",
  styles: \`
    .div {
      display: flex;
      flex-direction: columns;
    }
\`,
})
export default class RenderContent {
  @Prop() content: any;
  @Prop() customComponents: any;

  componentDidLoad() {
    sendComponentsToVisualEditor(this.customComponents);
  }

  componentDidUpdate() {
    dispatchNewContentToVisualEditor(this.content);
  }

  render() {
    return (
      <div onclick={(event) => trackClick(this.content.id)}>
        <div></div>
        <RenderBlocks blocks={this.content.blocks}></RenderBlocks>
        <div></div>
      </div>
    );
  }
}
"
`;

exports[`Stencil > jsx > Javascript Test > rootFragmentMultiNode 1`] = `
"import { Component, Prop, h, State, Fragment } from \\"@stencil/core\\";

@Component({
  tag: \\"button\\",
})
export default class Button {
  @Prop() link: any;
  @Prop() attributes: any;
  @Prop() openLinkInNewTab: any;
  @Prop() text: any;

  render() {
    return (
      <Fragment>
        <div></div>
        {this.link ? (
          <>
            <div></div>
            <a>
              <div></div>
              <div></div>
              <div></div>
            </a>
            <div></div>
          </>
        ) : null}
        <div></div>
        {!this.link ? (
          <>
            <div></div>
            <button>
              <div></div>
              <div></div>
              <div></div>
            </button>
            <div></div>
          </>
        ) : null}
        <div></div>
      </Fragment>
    );
  }
}
"
`;

exports[`Stencil > jsx > Javascript Test > self-referencing component 1`] = `
"import { Component, Prop, h, State, Fragment } from \\"@stencil/core\\";

@Component({
  tag: \\"my-component\\",
})
export default class MyComponent {
  @Prop() name: any;

  render() {
    return (
      <div>
        <div></div>
        <div></div>
        <div></div>
        {this.name === \\"Batman\\" ? (
          <>
            <div></div>
            <MyComponent name=\\"Bruce Wayne\\"></MyComponent>
            <div></div>
          </>
        ) : null}
        <div></div>
      </div>
    );
  }
}
"
`;

exports[`Stencil > jsx > Javascript Test > self-referencing component with children 1`] = `
"import { Component, Prop, h, State, Fragment } from \\"@stencil/core\\";

@Component({
  tag: \\"my-component\\",
})
export default class MyComponent {
  @Prop() name: any;
  @Prop() children: any;

  render() {
    return (
      <div>
        <div></div>
        <div></div>
        <div></div>
        <div></div>
        <div></div>
        {this.name === \\"Batman\\" ? (
          <>
            <div></div>
            <MyComponent name=\\"Bruce\\">
              <div></div>
              <div>
                <div></div>
              </div>
              <div></div>
            </MyComponent>
            <div></div>
          </>
        ) : null}
        <div></div>
      </div>
    );
  }
}
"
`;

exports[`Stencil > jsx > Javascript Test > spreadAttrs 1`] = `
"import { Component, Prop, h, State, Fragment } from \\"@stencil/core\\";

@Component({
  tag: \\"my-basic-component\\",
})
export default class MyBasicComponent {
  render() {
    return <input />;
  }
}
"
`;

exports[`Stencil > jsx > Javascript Test > spreadNestedProps 1`] = `
"import { Component, Prop, h, State, Fragment } from \\"@stencil/core\\";

@Component({
  tag: \\"my-basic-component\\",
})
export default class MyBasicComponent {
  @Prop() nested: any;

  render() {
    return <input />;
  }
}
"
`;

exports[`Stencil > jsx > Javascript Test > spreadProps 1`] = `
"import { Component, Prop, h, State, Fragment } from \\"@stencil/core\\";

@Component({
  tag: \\"my-basic-component\\",
})
export default class MyBasicComponent {
  render() {
    return <input />;
  }
}
"
`;

exports[`Stencil > jsx > Javascript Test > styleClassAndCss 1`] = `
"import { Component, Prop, h, State, Fragment } from \\"@stencil/core\\";

@Component({
  tag: \\"my-component\\",
  styles: \`
    .div {
      display: flex;
      flex-direction: column;
      align-items: stretch;
    }
\`,
})
export default class MyComponent {
  render() {
    return <div></div>;
  }
}
"
`;

exports[`Stencil > jsx > Javascript Test > subComponent 1`] = `
"import Foo from \\"./foo-sub-component.lite\\";

import { Component, Prop, h, State, Fragment } from \\"@stencil/core\\";

@Component({
  tag: \\"sub-component\\",
})
export default class SubComponent {
  render() {
    return <Foo></Foo>;
  }
}
"
`;

exports[`Stencil > jsx > Javascript Test > svgComponent 1`] = `
"import { Component, Prop, h, State, Fragment } from \\"@stencil/core\\";

@Component({
  tag: \\"svg-component\\",
})
export default class SvgComponent {
  render() {
    return (
      <svg viewbox={\\"0 0 \\" + 42 + \\" \\" + 42}>
        <div></div>
        <defs>
          <div></div>
          <filter filterunits=\\"userSpaceOnUse\\">
            <div></div>
            <feFlood></feFlood>
            <div></div>
            <feBlend></feBlend>
            <div></div>
            <feGaussianBlur stddeviation={7}></feGaussianBlur>
            <div></div>
          </filter>
          <div></div>
        </defs>
        <div></div>
      </svg>
    );
  }
}
"
`;

exports[`Stencil > jsx > Javascript Test > typeDependency 1`] = `
"import { Component, Prop, h, State, Fragment } from \\"@stencil/core\\";

@Component({
  tag: \\"type-dependency\\",
})
export default class TypeDependency {
  @Prop() foo: any;

  render() {
    return (
      <div>
        <div></div>
      </div>
    );
  }
}
"
`;

exports[`Stencil > jsx > Javascript Test > use-style 1`] = `
"import { Component, Prop, h, State, Fragment } from \\"@stencil/core\\";

@Component({
  tag: \\"my-component\\",
  styles: \`
    button {
      background: blue;
      color: white;
      font-size: 12px;
      outline: 1px solid black;
    }
\`,
})
export default class MyComponent {
  render() {
    return (
      <button>
        <div></div>
      </button>
    );
  }
}
"
`;

exports[`Stencil > jsx > Javascript Test > use-style-and-css 1`] = `
"import { Component, Prop, h, State, Fragment } from \\"@stencil/core\\";

@Component({
  tag: \\"my-component\\",
  styles: \`
    .button {
      background: blue;
      color: white;
    }

    button {
      font-size: 12px;
      outline: 1px solid black;
    }
\`,
})
export default class MyComponent {
  render() {
    return (
      <button>
        <div></div>
      </button>
    );
  }
}
"
`;

exports[`Stencil > jsx > Javascript Test > use-style-outside-component 1`] = `
"import { Component, Prop, h, State, Fragment } from \\"@stencil/core\\";

@Component({
  tag: \\"my-component\\",
  styles: \`
    button {
      background: blue;
      color: white;
      font-size: 12px;
      outline: 1px solid black;
    }
\`,
})
export default class MyComponent {
  render() {
    return (
      <button>
        <div></div>
      </button>
    );
  }
}
"
`;

exports[`Stencil > jsx > Remove Internal mitosis package 1`] = `
"import { Component, Prop, h, State, Fragment } from \\"@stencil/core\\";

@Component({
  tag: \\"my-basic-component\\",
})
export default class MyBasicComponent {
  @State() name = \\"PatrickJS\\";

  render() {
    return (
      <div>
        <div></div>
        <div></div>
        <div></div>
      </div>
    );
  }
}
"
`;

exports[`Stencil > jsx > Typescript Test > AdvancedRef 1`] = `
"import { Component, Prop, h, State, Fragment } from \\"@stencil/core\\";

@Component({
  tag: \\"my-basic-ref-component\\",
  styles: \`
       .input {
         color: red;
       }
\`,
})
export default class MyBasicRefComponent {
  @Prop() showInput: any;

  @State() name = \\"PatrickJS\\";

  onBlur = function onBlur() {
    // Maintain focus
    inputRef.focus();
  };
  lowerCaseName = function lowerCaseName() {
    return this.name.toLowerCase();
  };

  componentDidUpdate() {
    console.log(\\"Received an update\\");
  }

  render() {
    return (
      <div>
        <div></div>
        {this.showInput ? (
          <Fragment>
            <div></div>
            <input
              onblur={(event) => this.onBlur()}
              onchange={(event) => (this.name = event.target.value)}
            />
            <div></div>
            <label>
              <div></div>
            </label>
            <div></div>
            <select name=\\"cars\\">
              <div></div>
              <option>
                <div></div>
              </option>
              <div></div>
              <option>
                <div></div>
              </option>
              <div></div>
            </select>
            <div></div>
          </Fragment>
        ) : null}
        <div></div>
        <div></div>
        <div></div>
      </div>
    );
  }
}
"
`;

exports[`Stencil > jsx > Typescript Test > Basic 1`] = `
"export const DEFAULT_VALUES = {
  name: \\"Steve\\",
};

import { Component, Prop, h, State, Fragment } from \\"@stencil/core\\";

@Component({
  tag: \\"my-basic-component\\",
  styles: \`
      .div {
        padding: 10px;
      }
\`,
})
export default class MyBasicComponent {
  @State() name = \\"Steve\\";
  @State() age = 1;
  @State() sports = [\\"\\"];

  underscore_fn_name() {
    return \\"bar\\";
  }

  render() {
    return (
      <div>
        <div></div>
        <input onchange={(myEvent) => (this.name = myEvent.target.value)} />
        <div></div>
      </div>
    );
  }
}
"
`;

exports[`Stencil > jsx > Typescript Test > Basic Context 1`] = `
"import { Injector, createInjector, MyService } from \\"@dummy/injection-js\\";

import { Component, Prop, h, State, Fragment } from \\"@stencil/core\\";

@Component({
  tag: \\"my-basic-component\\",
})
export default class MyBasicComponent {
  @State() name = \\"PatrickJS\\";

  onChange = function onChange() {
    const change = myService.method(\\"change\\");
    console.log(change);
  };

  componentDidLoad() {
    const bye = myService.method(\\"hi\\");
    console.log(bye);
  }

  render() {
    return (
      <div>
        <div></div>
        <div></div>
        <div></div>
        <input onchange={(event) => this.onChange} />
        <div></div>
      </div>
    );
  }
}
"
`;

exports[`Stencil > jsx > Typescript Test > Basic OnMount Update 1`] = `
"import { Component, Prop, h, State, Fragment } from \\"@stencil/core\\";

@Component({
  tag: \\"my-basic-on-mount-update-component\\",
})
export default class MyBasicOnMountUpdateComponent {
  @Prop() hi: any;
  @Prop() bye: any;

  @State() name = \\"PatrickJS\\";
  @State() names = [\\"Steve\\", \\"PatrickJS\\"];

  componentDidLoad() {
    this.name = \\"PatrickJS onMount\\" + this.bye;
  }

  render() {
    return (
      <div>
        <div></div>
        <div></div>
      </div>
    );
  }
}
"
`;

exports[`Stencil > jsx > Typescript Test > Basic Outputs 1`] = `
"import { Component, Prop, h, State, Fragment } from \\"@stencil/core\\";

@Component({
  tag: \\"my-basic-outputs-component\\",
})
export default class MyBasicOutputsComponent {
  @Prop() onMessage: any;
  @Prop() onEvent: any;
  @Prop() message: any;

  @State() name = \\"PatrickJS\\";

  componentDidLoad() {
    this.onMessage(this.name);
    this.onEvent(this.message);
  }

  render() {
    return <div></div>;
  }
}
"
`;

exports[`Stencil > jsx > Typescript Test > Basic Outputs Meta 1`] = `
"import { Component, Prop, h, State, Fragment } from \\"@stencil/core\\";

@Component({
  tag: \\"my-basic-outputs-component\\",
})
export default class MyBasicOutputsComponent {
  @Prop() onMessage: any;
  @Prop() onEvent: any;
  @Prop() message: any;

  @State() name = \\"PatrickJS\\";

  componentDidLoad() {
    this.onMessage(this.name);
    this.onEvent(this.message);
  }

  render() {
    return <div></div>;
  }
}
"
`;

exports[`Stencil > jsx > Typescript Test > BasicAttribute 1`] = `
"import { Component, Prop, h, State, Fragment } from \\"@stencil/core\\";

@Component({
  tag: \\"my-component\\",
})
export default class MyComponent {
  render() {
    return <input />;
  }
}
"
`;

exports[`Stencil > jsx > Typescript Test > BasicBooleanAttribute 1`] = `
"import MyBooleanAttributeComponent from \\"./basic-boolean-attribute-component.raw\\";

import { Component, Prop, h, State, Fragment } from \\"@stencil/core\\";

@Component({
  tag: \\"my-boolean-attribute\\",
})
export default class MyBooleanAttribute {
  @Prop() children: any;
  @Prop() type: any;

  render() {
    return (
      <div>
        <div></div>
        <div></div>
        <div></div>
        <div></div>
        <div></div>
        <MyBooleanAttributeComponent
          toggle={true}
        ></MyBooleanAttributeComponent>
        <div></div>
        <MyBooleanAttributeComponent
          toggle={true}
        ></MyBooleanAttributeComponent>
        <div></div>
        <MyBooleanAttributeComponent list={null}></MyBooleanAttributeComponent>
        <div></div>
      </div>
    );
  }
}
"
`;

exports[`Stencil > jsx > Typescript Test > BasicChildComponent 1`] = `
"import MyBasicComponent from \\"./basic.raw\\";
import MyBasicOnMountUpdateComponent from \\"./basic-onMount-update.raw\\";

import { Component, Prop, h, State, Fragment } from \\"@stencil/core\\";

@Component({
  tag: \\"my-basic-child-component\\",
})
export default class MyBasicChildComponent {
  @State() name = \\"Steve\\";
  @State() dev = \\"PatrickJS\\";

  render() {
    return (
      <div>
        <div></div>
        <MyBasicComponent id={this.dev}></MyBasicComponent>
        <div></div>
        <div>
          <div></div>
          <MyBasicOnMountUpdateComponent
            hi={this.name}
            bye={this.dev}
          ></MyBasicOnMountUpdateComponent>
          <div></div>
        </div>
        <div></div>
      </div>
    );
  }
}
"
`;

exports[`Stencil > jsx > Typescript Test > BasicFor 1`] = `
"import { Component, Prop, h, State, Fragment } from \\"@stencil/core\\";

@Component({
  tag: \\"my-basic-for-component\\",
})
export default class MyBasicForComponent {
  @State() name = \\"PatrickJS\\";
  @State() names = [\\"Steve\\", \\"PatrickJS\\"];

  componentDidLoad() {
    console.log(\\"onMount code\\");
  }

  render() {
    return (
      <div>
        <div></div>
        {this.names?.map((person) => (
          <Fragment>
            <div></div>
            <input
              onchange={(event) => {
                this.name = event.target.value + \\" and \\" + person;
              }}
            />
            <div></div>
            <div></div>
            <div></div>
          </Fragment>
        ))}
        <div></div>
      </div>
    );
  }
}
"
`;

exports[`Stencil > jsx > Typescript Test > BasicRef 1`] = `
"import { Component, Prop, h, State, Fragment } from \\"@stencil/core\\";

@Component({
  tag: \\"my-basic-ref-component\\",
  styles: \`
       .input {
         color: red;
       }
\`,
})
export default class MyBasicRefComponent {
  @Prop() showInput: any;

  @State() name = \\"PatrickJS\\";

  onBlur = function onBlur() {
    // Maintain focus
    inputRef.focus();
  };
  lowerCaseName = function lowerCaseName() {
    return this.name.toLowerCase();
  };

  render() {
    return (
      <div>
        <div></div>
        {this.showInput ? (
          <Fragment>
            <div></div>
            <input
              onblur={(event) => this.onBlur()}
              onchange={(event) => (this.name = event.target.value)}
            />
            <div></div>
            <label>
              <div></div>
            </label>
            <div></div>
            <select name=\\"cars\\">
              <div></div>
              <option>
                <div></div>
              </option>
              <div></div>
              <option>
                <div></div>
              </option>
              <div></div>
            </select>
            <div></div>
          </Fragment>
        ) : null}
        <div></div>
        <div></div>
        <div></div>
      </div>
    );
  }
}
"
`;

exports[`Stencil > jsx > Typescript Test > BasicRefAssignment 1`] = `
"import { Component, Prop, h, State, Fragment } from \\"@stencil/core\\";

@Component({
  tag: \\"my-basic-ref-assignment-component\\",
})
export default class MyBasicRefAssignmentComponent {
  handlerClick = function handlerClick(event) {
    event.preventDefault();
    console.log(\\"current value\\", holdValueRef);
    holdValueRef = holdValueRef + \\"JS\\";
  };

  render() {
    return (
      <div>
        <div></div>
        <button onclick={(evt) => this.handlerClick(evt)}>
          <div></div>
        </button>
        <div></div>
      </div>
    );
  }
}
"
`;

exports[`Stencil > jsx > Typescript Test > BasicRefPrevious 1`] = `
"export function usePrevious<T>(value: T) {
  // The ref object is a generic container whose current property is mutable ...
  // ... and can hold any value, similar to an instance property on a class
  let ref = useRef<T>(null); // Store current value in ref

  onUpdate(() => {
    ref = value;
  }, [value]); // Only re-run if value changes
  // Return previous value (happens before update in useEffect above)

  return ref;
}

import { Component, Prop, h, State, Fragment } from \\"@stencil/core\\";

@Component({
  tag: \\"my-previous-component\\",
})
export default class MyPreviousComponent {
  @State() count = 0;

  componentDidUpdate() {
    prevCount = this.count;
  }

  render() {
    return (
      <div>
        <div></div>
        <h1>
          <div></div>
          <div></div>
          <div></div>
          <div></div>
          <div></div>
        </h1>
        <div></div>
        <button onclick={(event) => (this.count += 1)}>
          <div></div>
        </button>
        <div></div>
      </div>
    );
  }
}
"
`;

exports[`Stencil > jsx > Typescript Test > Button 1`] = `
"import { Component, Prop, h, State, Fragment } from \\"@stencil/core\\";

@Component({
  tag: \\"button\\",
})
export default class Button {
  @Prop() link: any;
  @Prop() attributes: any;
  @Prop() openLinkInNewTab: any;
  @Prop() text: any;

  render() {
    return (
      <div>
        <div></div>
        {this.link ? (
          <>
            <div></div>
            <a>
              <div></div>
              <div></div>
              <div></div>
            </a>
            <div></div>
          </>
        ) : null}
        <div></div>
        {!this.link ? (
          <>
            <div></div>
            <button>
              <div></div>
              <div></div>
              <div></div>
            </button>
            <div></div>
          </>
        ) : null}
        <div></div>
      </div>
    );
  }
}
"
`;

exports[`Stencil > jsx > Typescript Test > Columns 1`] = `
"import { Component, Prop, h, State, Fragment } from \\"@stencil/core\\";

@Component({
  tag: \\"column\\",
  styles: \`
       .div {
         display: flex;
         flex-direction: column;
         align-items: stretch;
         line-height: normal;
       }
       @media (max-width: 999px) {
         .div {
           flex-direction: row;
         }
       }
       @media (max-width: 639px) {
         .div {
           flex-direction: row-reverse;
         }
       }
       .div-2 {
         flex-grow: 1;
       }
\`,
})
export default class Column {
  @Prop() columns: any;
  @Prop() space: any;

  getColumns() {
    return this.columns || [];
  }
  getGutterSize() {
    return typeof this.space === \\"number\\" ? this.space || 0 : 20;
  }
  getWidth(index) {
    const columns = this.getColumns();
    return (columns[index] && columns[index].width) || 100 / columns.length;
  }
  getColumnCssWidth(index) {
    const columns = this.getColumns();
    const gutterSize = this.getGutterSize();
    const subtractWidth = (gutterSize * (columns.length - 1)) / columns.length;
    return \`calc(\${this.getWidth(index)}% - \${subtractWidth}px)\`;
  }

  render() {
    return (
      <div>
        <div></div>
        {this.columns?.map((column, index) => (
          <div>
            <div></div>
            <div></div>
            <div></div>
            <div></div>
            <div></div>
          </div>
        ))}
        <div></div>
      </div>
    );
  }
}
"
`;

exports[`Stencil > jsx > Typescript Test > ContentSlotHtml 1`] = `
"import { Component, Prop, h, State, Fragment } from \\"@stencil/core\\";

@Component({
  tag: \\"content-slot-code\\",
})
export default class ContentSlotCode {
  @Prop() slotTesting: any;

  render() {
    return (
      <div>
        <div></div>
        <Slot name={this.slotTesting}></Slot>
        <div></div>
        <div>
          <div></div>
          <hr />
          <div></div>
        </div>
        <div></div>
        <div>
          <div></div>
          <Slot></Slot>
          <div></div>
        </div>
        <div></div>
      </div>
    );
  }
}
"
`;

exports[`Stencil > jsx > Typescript Test > ContentSlotJSX 1`] = `
"':' expected. (33:15)
  31 |        return (
  32 |        
> 33 |          {this.slotReference ? (
     |               ^
  34 |      <><div ></div>
  35 | <div  name={this.slotContent ? 'name1' : 'name2'}  onclick={event => this.show()} ><div ></div>
  36 | {this.showContent && this.slotContent ? ("
`;

exports[`Stencil > jsx > Typescript Test > CustomCode 1`] = `
"import { Component, Prop, h, State, Fragment } from \\"@stencil/core\\";

@Component({
  tag: \\"custom-code\\",
})
export default class CustomCode {
  @Prop() replaceNodes: any;
  @Prop() code: any;

  @State() scriptsInserted = [];
  @State() scriptsRun = [];

  findAndRunScripts() {
    // TODO: Move this function to standalone one in '@builder.io/utils'
    if (elem && typeof window !== \\"undefined\\") {
      /** @type {HTMLScriptElement[]} */
      const scripts = elem.getElementsByTagName(\\"script\\");

      for (let i = 0; i < scripts.length; i++) {
        const script = scripts[i];

        if (script.src) {
          if (this.scriptsInserted.includes(script.src)) {
            continue;
          }

          this.scriptsInserted.push(script.src);
          const newScript = document.createElement(\\"script\\");
          newScript.async = true;
          newScript.src = script.src;
          document.head.appendChild(newScript);
        } else if (
          !script.type ||
          [
            \\"text/javascript\\",
            \\"application/javascript\\",
            \\"application/ecmascript\\",
          ].includes(script.type)
        ) {
          if (this.scriptsRun.includes(script.innerText)) {
            continue;
          }

          try {
            this.scriptsRun.push(script.innerText);
            new Function(script.innerText)();
          } catch (error) {
            console.warn(\\"\`CustomCode\`: Error running script:\\", error);
          }
        }
      }
    }
  }

  componentDidLoad() {
    this.findAndRunScripts();
  }

  render() {
    return <div innerhtml={this.code}></div>;
  }
}
"
`;

exports[`Stencil > jsx > Typescript Test > Embed 1`] = `
"import { Component, Prop, h, State, Fragment } from \\"@stencil/core\\";

@Component({
  tag: \\"custom-code\\",
})
export default class CustomCode {
  @Prop() replaceNodes: any;
  @Prop() code: any;

  @State() scriptsInserted = [];
  @State() scriptsRun = [];

  findAndRunScripts() {
    // TODO: Move this function to standalone one in '@builder.io/utils'
    if (elem && typeof window !== \\"undefined\\") {
      /** @type {HTMLScriptElement[]} */
      const scripts = elem.getElementsByTagName(\\"script\\");

      for (let i = 0; i < scripts.length; i++) {
        const script = scripts[i];

        if (script.src) {
          if (this.scriptsInserted.includes(script.src)) {
            continue;
          }

          this.scriptsInserted.push(script.src);
          const newScript = document.createElement(\\"script\\");
          newScript.async = true;
          newScript.src = script.src;
          document.head.appendChild(newScript);
        } else if (
          !script.type ||
          [
            \\"text/javascript\\",
            \\"application/javascript\\",
            \\"application/ecmascript\\",
          ].includes(script.type)
        ) {
          if (this.scriptsRun.includes(script.innerText)) {
            continue;
          }

          try {
            this.scriptsRun.push(script.innerText);
            new Function(script.innerText)();
          } catch (error) {
            console.warn(\\"\`CustomCode\`: Error running script:\\", error);
          }
        }
      }
    }
  }

  componentDidLoad() {
    this.findAndRunScripts();
  }

  render() {
    return <div innerhtml={this.code}></div>;
  }
}
"
`;

exports[`Stencil > jsx > Typescript Test > Form 1`] = `
"import { BuilderBlock as BuilderBlockComponent } from \\"@fake\\";
import { Builder, builder } from \\"@builder.io/sdk\\";
import { BuilderBlocks } from \\"@fake\\";
import { set } from \\"@fake\\";
import { get } from \\"@fake\\";

import { Component, Prop, h, State, Fragment } from \\"@stencil/core\\";

@Component({
  tag: \\"form-component\\",
  styles: \`
       .pre {
         padding: 10px;
         color: red;
         text-align: center;
       }
\`,
})
export default class FormComponent {
  @Prop() previewState: any;
  @Prop() sendWithJs: any;
  @Prop() sendSubmissionsTo: any;
  @Prop() action: any;
  @Prop() customHeaders: any;
  @Prop() contentType: any;
  @Prop() sendSubmissionsToEmail: any;
  @Prop() name: any;
  @Prop() method: any;
  @Prop() errorMessagePath: any;
  @Prop() resetFormOnSubmit: any;
  @Prop() successUrl: any;
  @Prop() validate: any;
  @Prop() attributes: any;
  @Prop() builderBlock: any;
  @Prop() errorMessage: any;
  @Prop() sendingMessage: any;
  @Prop() successMessage: any;

  @State() formState = \\"unsubmitted\\";
  @State() responseData = null;
  @State() formErrorMessage = \\"\\";

  get submissionState() {
    return (Builder.isEditing && this.previewState) || this.formState;
  }
  onSubmit(event) {
    const sendWithJs = this.sendWithJs || this.sendSubmissionsTo === \\"email\\";

    if (this.sendSubmissionsTo === \\"zapier\\") {
      event.preventDefault();
    } else if (sendWithJs) {
      if (!(this.action || this.sendSubmissionsTo === \\"email\\")) {
        event.preventDefault();
        return;
      }

      event.preventDefault();
      const el = event.currentTarget;
      const headers = this.customHeaders || {};
      let body;
      const formData = new FormData(el); // TODO: maybe support null

      const formPairs = Array.from(
        event.currentTarget.querySelectorAll(\\"input,select,textarea\\")
      )
        .filter((el) => !!el.name)
        .map((el) => {
          let value;
          const key = el.name;

          if (el instanceof HTMLInputElement) {
            if (el.type === \\"radio\\") {
              if (el.checked) {
                value = el.name;
                return {
                  key,
                  value,
                };
              }
            } else if (el.type === \\"checkbox\\") {
              value = el.checked;
            } else if (el.type === \\"number\\" || el.type === \\"range\\") {
              const num = el.valueAsNumber;

              if (!isNaN(num)) {
                value = num;
              }
            } else if (el.type === \\"file\\") {
              // TODO: one vs multiple files
              value = el.files;
            } else {
              value = el.value;
            }
          } else {
            value = el.value;
          }

          return {
            key,
            value,
          };
        });
      let contentType = this.contentType;

      if (this.sendSubmissionsTo === \\"email\\") {
        contentType = \\"multipart/form-data\\";
      }

      Array.from(formPairs).forEach(({ value }) => {
        if (
          value instanceof File ||
          (Array.isArray(value) && value[0] instanceof File) ||
          value instanceof FileList
        ) {
          contentType = \\"multipart/form-data\\";
        }
      }); // TODO: send as urlEncoded or multipart by default
      // because of ease of use and reliability in browser API
      // for encoding the form?

      if (contentType !== \\"application/json\\") {
        body = formData;
      } else {
        // Json
        const json = {};
        Array.from(formPairs).forEach(({ value, key }) => {
          set(json, key, value);
        });
        body = JSON.stringify(json);
      }

      if (contentType && contentType !== \\"multipart/form-data\\") {
        if (
          /* Zapier doesn't allow content-type header to be sent from browsers */
          !(sendWithJs && this.action?.includes(\\"zapier.com\\"))
        ) {
          headers[\\"content-type\\"] = contentType;
        }
      }

      const presubmitEvent = new CustomEvent(\\"presubmit\\", {
        detail: {
          body,
        },
      });

      if (formRef) {
        formRef.dispatchEvent(presubmitEvent);

        if (presubmitEvent.defaultPrevented) {
          return;
        }
      }

      this.formState = \\"sending\\";
      const formUrl = \`\${
        builder.env === \\"dev\\" ? \\"http://localhost:5000\\" : \\"https://builder.io\\"
      }/api/v1/form-submit?apiKey=\${builder.apiKey}&to=\${btoa(
        this.sendSubmissionsToEmail || \\"\\"
      )}&name=\${encodeURIComponent(this.name || \\"\\")}\`;
      fetch(
        this.sendSubmissionsTo === \\"email\\" ? formUrl : this.action,
        /* TODO: throw error if no action URL */
        {
          body,
          headers,
          method: this.method || \\"post\\",
        }
      ).then(
        async (res) => {
          let body;
          const contentType = res.headers.get(\\"content-type\\");

          if (contentType && contentType.indexOf(\\"application/json\\") !== -1) {
            body = await res.json();
          } else {
            body = await res.text();
          }

          if (!res.ok && this.errorMessagePath) {
            /* TODO: allow supplying an error formatter function */
            let message = get(body, this.errorMessagePath);

            if (message) {
              if (typeof message !== \\"string\\") {
                /* TODO: ideally convert json to yaml so it woul dbe like
            error: - email has been taken */
                message = JSON.stringify(message);
              }

              this.formErrorMessage = message;
            }
          }

          this.responseData = body;
          this.formState = res.ok ? \\"success\\" : \\"error\\";

          if (res.ok) {
            const submitSuccessEvent = new CustomEvent(\\"submit:success\\", {
              detail: {
                res,
                body,
              },
            });

            if (formRef) {
              formRef.dispatchEvent(submitSuccessEvent);

              if (submitSuccessEvent.defaultPrevented) {
                return;
              }
              /* TODO: option to turn this on/off? */

              if (this.resetFormOnSubmit !== false) {
                formRef.reset();
              }
            }
            /* TODO: client side route event first that can be preventDefaulted */

            if (this.successUrl) {
              if (formRef) {
                const event = new CustomEvent(\\"route\\", {
                  detail: {
                    url: this.successUrl,
                  },
                });
                formRef.dispatchEvent(event);

                if (!event.defaultPrevented) {
                  location.href = this.successUrl;
                }
              } else {
                location.href = this.successUrl;
              }
            }
          }
        },
        (err) => {
          const submitErrorEvent = new CustomEvent(\\"submit:error\\", {
            detail: {
              error: err,
            },
          });

          if (formRef) {
            formRef.dispatchEvent(submitErrorEvent);

            if (submitErrorEvent.defaultPrevented) {
              return;
            }
          }

          this.responseData = err;
          this.formState = \\"error\\";
        }
      );
    }
  }

  render() {
    return (
      <form name={this.name} onsubmit={(event) => this.onSubmit(event)}>
        <div></div>
        {this.builderBlock && this.builderBlock.children ? (
          <>
            <div></div>
            {this.builderBlock?.children?.map((block, index) => (
              <BuilderBlockComponent
                key={block.id}
                block={block}
                index={index}
              ></BuilderBlockComponent>
            ))}
            <div></div>
          </>
        ) : null}
        <div></div>
        {this.submissionState === \\"error\\" ? (
          <>
            <div></div>
            <BuilderBlocks
              dataPath=\\"errorMessage\\"
              blocks={this.errorMessage}
            ></BuilderBlocks>
            <div></div>
          </>
        ) : null}
        <div></div>
        {this.submissionState === \\"sending\\" ? (
          <>
            <div></div>
            <BuilderBlocks
              dataPath=\\"sendingMessage\\"
              blocks={this.sendingMessage}
            ></BuilderBlocks>
            <div></div>
          </>
        ) : null}
        <div></div>
        {this.submissionState === \\"error\\" && this.responseData ? (
          <>
            <div></div>
            <pre>
              <div></div>
              <div></div>
              <div></div>
            </pre>
            <div></div>
          </>
        ) : null}
        <div></div>
        {this.submissionState === \\"success\\" ? (
          <>
            <div></div>
            <BuilderBlocks
              dataPath=\\"successMessage\\"
              blocks={this.successMessage}
            ></BuilderBlocks>
            <div></div>
          </>
        ) : null}
        <div></div>
      </form>
    );
  }
}
"
`;

exports[`Stencil > jsx > Typescript Test > Image 1`] = `
"import { Component, Prop, h, State, Fragment } from \\"@stencil/core\\";

@Component({
  tag: \\"image\\",
  styles: \`
       .img {
         opacity: 1;
         transition: opacity 0.2s ease-in-out;
         object-fit: cover;
         object-position: center;
       }
\`,
})
export default class Image {
  @Prop() lazy: any;
  @Prop() altText: any;
  @Prop() _class: any;
  @Prop() image: any;
  @Prop() srcset: any;
  @Prop() sizes: any;
  @Prop() children: any;

  @State() scrollListener = null;
  @State() imageLoaded = false;
  @State() load = false;

  setLoaded() {
    this.imageLoaded = true;
  }
  useLazyLoading() {
    // TODO: Add more checks here, like testing for real web browsers
    return !!this.lazy && isBrowser();
  }
  isBrowser = function isBrowser() {
    return (
      typeof window !== \\"undefined\\" && window.navigator.product != \\"ReactNative\\"
    );
  };

  componentDidLoad() {
    if (this.useLazyLoading()) {
      // throttled scroll capture listener
      const listener = () => {
        if (pictureRef) {
          const rect = pictureRef.getBoundingClientRect();
          const buffer = window.innerHeight / 2;

          if (rect.top < window.innerHeight + buffer) {
            setLoad(true);
            this.scrollListener = null;
            window.removeEventListener(\\"scroll\\", listener);
          }
        }
      };

      this.scrollListener = listener;
      window.addEventListener(\\"scroll\\", listener, {
        capture: true,
        passive: true,
      });
      listener();
    }
  }
  disconnectedCallback() {
    if (this.scrollListener) {
      window.removeEventListener(\\"scroll\\", this.scrollListener);
    }
  }

  render() {
    return (
      <div>
        <div></div>
        <picture>
          <div></div>
          {!this.useLazyLoading() || this.load ? (
            <>
              <div></div>
              <img
                aria-role={this.altText ? \\"presentation\\" : undefined}
                onload={(event) => this.setLoaded()}
              />
              <div></div>
            </>
          ) : null}
          <div></div>
          <source />
          <div></div>
        </picture>
        <div></div>
        <div></div>
        <div></div>
      </div>
    );
  }
}
"
`;

exports[`Stencil > jsx > Typescript Test > Image State 1`] = `
"import { Component, Prop, h, State, Fragment } from \\"@stencil/core\\";

@Component({
  tag: \\"img-state-component\\",
})
export default class ImgStateComponent {
  @State() canShow = true;
  @State() images = [\\"http://example.com/qwik.png\\"];

  render() {
    return (
      <div>
        <div></div>
        {this.images?.map((item, itemIndex) => (
          <Fragment>
            <div></div>
            <img />
            <div></div>
          </Fragment>
        ))}
        <div></div>
      </div>
    );
  }
}
"
`;

exports[`Stencil > jsx > Typescript Test > Img 1`] = `
"import { Builder } from \\"@builder.io/sdk\\";

import { Component, Prop, h, State, Fragment } from \\"@stencil/core\\";

@Component({
  tag: \\"img-component\\",
})
export default class ImgComponent {
  @Prop() backgroundSize: any;
  @Prop() backgroundPosition: any;
  @Prop() attributes: any;
  @Prop() imgSrc: any;
  @Prop() altText: any;

  render() {
    return <img />;
  }
}
"
`;

exports[`Stencil > jsx > Typescript Test > Input 1`] = `
"import { Builder } from \\"@builder.io/sdk\\";

import { Component, Prop, h, State, Fragment } from \\"@stencil/core\\";

@Component({
  tag: \\"form-input-component\\",
})
export default class FormInputComponent {
  @Prop() attributes: any;
  @Prop() defaultValue: any;
  @Prop() placeholder: any;
  @Prop() type: any;
  @Prop() name: any;
  @Prop() value: any;
  @Prop() required: any;

  render() {
    return <input name={this.name} defaultvalue={this.defaultValue} />;
  }
}
"
`;

exports[`Stencil > jsx > Typescript Test > RawText 1`] = `
"import { Component, Prop, h, State, Fragment } from \\"@stencil/core\\";

@Component({
  tag: \\"raw-text\\",
})
export default class RawText {
  @Prop() attributes: any;
  @Prop() text: any;

  render() {
    return <span innerhtml={this.text || \\"\\"}></span>;
  }
}
"
`;

exports[`Stencil > jsx > Typescript Test > Section 1`] = `
"import { Component, Prop, h, State, Fragment } from \\"@stencil/core\\";

@Component({
  tag: \\"section-component\\",
})
export default class SectionComponent {
  @Prop() attributes: any;
  @Prop() maxWidth: any;
  @Prop() children: any;

  render() {
    return (
      <section>
        <div></div>
        <div></div>
        <div></div>
      </section>
    );
  }
}
"
`;

exports[`Stencil > jsx > Typescript Test > Select 1`] = `
"import { Builder } from \\"@builder.io/sdk\\";

import { Component, Prop, h, State, Fragment } from \\"@stencil/core\\";

@Component({
  tag: \\"select-component\\",
})
export default class SelectComponent {
  @Prop() attributes: any;
  @Prop() value: any;
  @Prop() defaultValue: any;
  @Prop() name: any;
  @Prop() options: any;

  render() {
    return (
      <select name={this.name} defaultvalue={this.defaultValue}>
        <div></div>
        {this.options?.map((option, index) => (
          <option data-index={index}>
            <div></div>
            <div></div>
            <div></div>
          </option>
        ))}
        <div></div>
      </select>
    );
  }
}
"
`;

exports[`Stencil > jsx > Typescript Test > SlotDefault 1`] = `
"import { Component, Prop, h, State, Fragment } from \\"@stencil/core\\";

@Component({
  tag: \\"slot-code\\",
})
export default class SlotCode {
  render() {
    return (
      <div>
        <div></div>
        <Slot>
          <div></div>
          <div>
            <div></div>
          </div>
          <div></div>
        </Slot>
        <div></div>
      </div>
    );
  }
}
"
`;

exports[`Stencil > jsx > Typescript Test > SlotHtml 1`] = `
"import ContentSlotCode from \\"./content-slot-jsx.raw\\";

import { Component, Prop, h, State, Fragment } from \\"@stencil/core\\";

@Component({
  tag: \\"slot-code\\",
})
export default class SlotCode {
  render() {
    return (
      <div>
        <div></div>
        <ContentSlotCode>
          <div></div>
          <Slot testing={<div>Hello</div>}></Slot>
          <div></div>
        </ContentSlotCode>
        <div></div>
      </div>
    );
  }
}
"
`;

exports[`Stencil > jsx > Typescript Test > SlotJsx 1`] = `
"import ContentSlotCode from \\"./content-slot-jsx.raw\\";

import { Component, Prop, h, State, Fragment } from \\"@stencil/core\\";

@Component({
  tag: \\"slot-code\\",
})
export default class SlotCode {
  render() {
    return (
      <div>
        <div></div>
        <ContentSlotCode slotTesting={<div>Hello</div>}></ContentSlotCode>
        <div></div>
      </div>
    );
  }
}
"
`;

exports[`Stencil > jsx > Typescript Test > SlotNamed 1`] = `
"import { Component, Prop, h, State, Fragment } from \\"@stencil/core\\";

@Component({
  tag: \\"slot-code\\",
})
export default class SlotCode {
  render() {
    return (
      <div>
        <div></div>
        <Slot name=\\"top\\"></Slot>
        <div></div>
        <Slot name=\\"left\\">
          <div></div>
        </Slot>
        <div></div>
        <Slot>
          <div></div>
        </Slot>
        <div></div>
      </div>
    );
  }
}
"
`;

exports[`Stencil > jsx > Typescript Test > Stamped.io 1`] = `
"import { kebabCase } from \\"lodash\\";
import { snakeCase } from \\"lodash\\";

import { Component, Prop, h, State, Fragment } from \\"@stencil/core\\";

@Component({
  tag: \\"smile-reviews\\",
  styles: \`
       .input {
         display: block;
       }
       .textarea {
         display: block;
       }
       .button {
         display: block;
       }
       .review {
         margin: 10px;
         padding: 10px;
         background: white;
         display: flex;
         border-radius: 5px;
         box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
       }
       .img {
         height: 30px;
         width: 30px;
         margin-right: 10px;
       }
\`,
})
export default class SmileReviews {
  @Prop() apiKey: any;
  @Prop() productId: any;

  @State() reviews = [];
  @State() name = \\"test\\";
  @State() showReviewPrompt = false;

  kebabCaseValue() {
    return kebabCase(\\"testThat\\");
  }
  snakeCaseValue() {
    return snakeCase(\\"testThis\\");
  }

  componentDidLoad() {
    fetch(
      \`https://stamped.io/api/widget/reviews?storeUrl=builder-io.myshopify.com&apiKey=\${
        this.apiKey || \\"pubkey-8bbDq7W6w4sB3OWeM1HUy2s47702hM\\"
      }&productId=\${this.productId || \\"2410511106127\\"}\`
    )
      .then((res) => res.json())
      .then((data) => {
        this.reviews = data.data;
      });
  }

  render() {
    return (
      <div data-user={this.name}>
        <div></div>
        <button onclick={(event) => (this.showReviewPrompt = true)}>
          <div></div>
        </button>
        <div></div>
        {this.showReviewPrompt || \\"asdf\\" ? (
          <>
            <div></div>
            <input />
            <div></div>
            <input />
            <div></div>
            <textarea></textarea>
            <div></div>
            <button
              onclick={(event) => {
                event.preventDefault();
                this.showReviewPrompt = false;
              }}
            >
              <div></div>
            </button>
            <div></div>
          </>
        ) : null}
        <div></div>
        {this.reviews?.map((review, index) => (
          <div>
            <div></div>
            <img />
            <div></div>
            <div>
              <div></div>
              <div>
                <div></div>
                <div></div>
              </div>
              <div></div>
              <div>
                <div></div>
              </div>
              <div></div>
              <div>
                <div></div>
              </div>
              <div></div>
            </div>
            <div></div>
          </div>
        ))}
        <div></div>
      </div>
    );
  }
}
"
`;

exports[`Stencil > jsx > Typescript Test > Submit 1`] = `
"import { Component, Prop, h, State, Fragment } from \\"@stencil/core\\";

@Component({
  tag: \\"submit-button\\",
})
export default class SubmitButton {
  @Prop() attributes: any;
  @Prop() text: any;

  render() {
    return (
      <button>
        <div></div>
        <div></div>
        <div></div>
      </button>
    );
  }
}
"
`;

exports[`Stencil > jsx > Typescript Test > Text 1`] = `
"import { Builder } from \\"@builder.io/sdk\\";

import { Component, Prop, h, State, Fragment } from \\"@stencil/core\\";

@Component({
  tag: \\"text\\",
})
export default class Text {
  @Prop() text: any;
  @Prop() content: any;

  @State() name = \\"Decadef20\\";

  render() {
    return (
      <div
        data-name={{
          test: this.name || \\"any name\\",
        }}
        contenteditable={allowEditingText || undefined}
        innerhtml={
          this.text ||
          this.content ||
          this.name ||
          '<p class=\\"text-lg\\">my name</p>'
        }
      ></div>
    );
  }
}
"
`;

exports[`Stencil > jsx > Typescript Test > Textarea 1`] = `
"import { Component, Prop, h, State, Fragment } from \\"@stencil/core\\";

@Component({
  tag: \\"textarea\\",
})
export default class Textarea {
  @Prop() attributes: any;
  @Prop() placeholder: any;
  @Prop() name: any;
  @Prop() value: any;
  @Prop() defaultValue: any;

  render() {
    return (
      <textarea name={this.name} defaultvalue={this.defaultValue}></textarea>
    );
  }
}
"
`;

exports[`Stencil > jsx > Typescript Test > Video 1`] = `
"import { Component, Prop, h, State, Fragment } from \\"@stencil/core\\";

@Component({
  tag: \\"video\\",
})
export default class Video {
  @Prop() attributes: any;
  @Prop() fit: any;
  @Prop() position: any;
  @Prop() video: any;
  @Prop() posterImage: any;
  @Prop() autoPlay: any;
  @Prop() muted: any;
  @Prop() controls: any;
  @Prop() loop: any;

  render() {
    return <video></video>;
  }
}
"
`;

exports[`Stencil > jsx > Typescript Test > arrowFunctionInUseStore 1`] = `
"import { Component, Prop, h, State, Fragment } from \\"@stencil/core\\";

@Component({
  tag: \\"my-component\\",
})
export default class MyComponent {
  @State() name = \\"steve\\";

  setName(value) {
    this.name = value;
  }
  updateNameWithArrowFn(value) {
    this.name = value;
  }

  render() {
    return (
      <div>
        <div></div>
        <div></div>
      </div>
    );
  }
}
"
`;

exports[`Stencil > jsx > Typescript Test > basicForwardRef 1`] = `
"import { Component, Prop, h, State, Fragment } from \\"@stencil/core\\";

@Component({
  tag: \\"my-basic-forward-ref-component\\",
  styles: \`
    .input {
      color: red;
    }
\`,
})
export default class MyBasicForwardRefComponent {
  @Prop() inputRef: any;

  @State() name = \\"PatrickJS\\";

  render() {
    return (
      <div>
        <div></div>
        <input onchange={(event) => (this.name = event.target.value)} />
        <div></div>
      </div>
    );
  }
}
"
`;

exports[`Stencil > jsx > Typescript Test > basicForwardRefMetadata 1`] = `
"import { Component, Prop, h, State, Fragment } from \\"@stencil/core\\";

@Component({
  tag: \\"my-basic-forward-ref-component\\",
  styles: \`
    .input {
      color: red;
    }
\`,
})
export default class MyBasicForwardRefComponent {
  @Prop() inputRef: any;

  @State() name = \\"PatrickJS\\";

  render() {
    return (
      <div>
        <div></div>
        <input onchange={(event) => (this.name = event.target.value)} />
        <div></div>
      </div>
    );
  }
}
"
`;

exports[`Stencil > jsx > Typescript Test > basicOnUpdateReturn 1`] = `
"import { Component, Prop, h, State, Fragment } from \\"@stencil/core\\";

@Component({
  tag: \\"my-basic-on-update-return-component\\",
})
export default class MyBasicOnUpdateReturnComponent {
  @State() name = \\"PatrickJS\\";

  componentDidUpdate() {
    const controller = new AbortController();
    const signal = controller.signal;
    fetch(\\"https://patrickjs.com/api/resource.json\\", {
      signal,
    })
      .then((response) => response.json())
      .then((data) => {
        this.name = data.name;
      });
    return () => {
      if (!signal.aborted) {
        controller.abort();
      }
    };
  }

  render() {
    return (
      <div>
        <div></div>
        <div></div>
      </div>
    );
  }
}
"
`;

exports[`Stencil > jsx > Typescript Test > camelCasedAttributes 1`] = `
"import React from \\"@builder.io/react\\";

import { Component, Prop, h, State, Fragment } from \\"@stencil/core\\";

@Component({
  tag: \\"my-component\\",
})
export default class MyComponent {
  @State() name = \\"Steve\\";

  render() {
    return (
      <div>
        <div></div>
        <img srcset=\\"http://example.com\\" />
        <div></div>
      </div>
    );
  }
}
"
`;

exports[`Stencil > jsx > Typescript Test > class + ClassName + css 1`] = `
"import { Component, Prop, h, State, Fragment } from \\"@stencil/core\\";

@Component({
  tag: \\"my-basic-component\\",
  styles: \`
    .div {
      padding: 10px;
    }
\`,
})
export default class MyBasicComponent {
  render() {
    return (
      <div>
        <div></div>
      </div>
    );
  }
}
"
`;

exports[`Stencil > jsx > Typescript Test > class + css 1`] = `
"import { Component, Prop, h, State, Fragment } from \\"@stencil/core\\";

@Component({
  tag: \\"my-basic-component\\",
  styles: \`
    .div {
      padding: 10px;
    }
\`,
})
export default class MyBasicComponent {
  render() {
    return (
      <div>
        <div></div>
      </div>
    );
  }
}
"
`;

exports[`Stencil > jsx > Typescript Test > className + css 1`] = `
"import { Component, Prop, h, State, Fragment } from \\"@stencil/core\\";

@Component({
  tag: \\"my-basic-component\\",
  styles: \`
    .div {
      padding: 10px;
    }
\`,
})
export default class MyBasicComponent {
  render() {
    return (
      <div>
        <div></div>
      </div>
    );
  }
}
"
`;

exports[`Stencil > jsx > Typescript Test > className 1`] = `
"import { Component, Prop, h, State, Fragment } from \\"@stencil/core\\";

@Component({
  tag: \\"class-name-code\\",
})
export default class ClassNameCode {
  @State() bindings = \\"a binding\\";

  render() {
    return (
      <div>
        <div></div>
        <div></div>
        <div>
          <div></div>
        </div>
        <div></div>
        <div></div>
        <div>
          <div></div>
        </div>
        <div></div>
      </div>
    );
  }
}
"
`;

exports[`Stencil > jsx > Typescript Test > classState 1`] = `
"import { Component, Prop, h, State, Fragment } from \\"@stencil/core\\";

@Component({
  tag: \\"my-basic-component\\",
  styles: \`
      .div {
        padding: 10px;
      }
\`,
})
export default class MyBasicComponent {
  @State() classState = \\"testClassName\\";
  @State() styleState = {
    color: \\"red\\",
  };

  render() {
    return (
      <div>
        <div></div>
      </div>
    );
  }
}
"
`;

exports[`Stencil > jsx > Typescript Test > componentWithContext 1`] = `
"import Context1 from \\"@dummy/1\\";
import Context2 from \\"@dummy/2\\";

import { Component, Prop, h, State, Fragment } from \\"@stencil/core\\";

@Component({
  tag: \\"component-with-context\\",
})
export default class ComponentWithContext {
  @Prop() content: any;

  render() {
    return (
      <Fragment>
        <div></div>
        <Fragment>
          <div></div>
        </Fragment>
        <div></div>
      </Fragment>
    );
  }
}
"
`;

exports[`Stencil > jsx > Typescript Test > componentWithContextMultiRoot 1`] = `
"import Context1 from \\"@dummy/1\\";
import Context2 from \\"@dummy/2\\";

import { Component, Prop, h, State, Fragment } from \\"@stencil/core\\";

@Component({
  tag: \\"component-with-context\\",
})
export default class ComponentWithContext {
  @Prop() content: any;

  render() {
    return (
      <Fragment>
        <div></div>
        <Fragment>
          <div></div>
        </Fragment>
        <div></div>
        <div>
          <div></div>
        </div>
        <div></div>
      </Fragment>
    );
  }
}
"
`;

exports[`Stencil > jsx > Typescript Test > contentState 1`] = `
"import BuilderContext from \\"@dummy/context.lite\\";

import { Component, Prop, h, State, Fragment } from \\"@stencil/core\\";

@Component({
  tag: \\"render-content\\",
})
export default class RenderContent {
  @Prop() content: any;
  @Prop() customComponents: any;

  render() {
    return (
      <div>
        <div></div>
      </div>
    );
  }
}
"
`;

exports[`Stencil > jsx > Typescript Test > defaultProps 1`] = `
"import { Component, Prop, h, State, Fragment } from \\"@stencil/core\\";

@Component({
  tag: \\"button\\",
})
export default class Button {
  @Prop() link: any;
  @Prop() attributes: any;
  @Prop() openLinkInNewTab: any;
  @Prop() text: any;
  @Prop() onClick: any;
  @Prop() buttonText: any;

  render() {
    return (
      <div>
        <div></div>
        {this.link ? (
          <>
            <div></div>
            <a>
              <div></div>
              <div></div>
              <div></div>
            </a>
            <div></div>
          </>
        ) : null}
        <div></div>
        {!this.link ? (
          <>
            <div></div>
            <button onclick={(event) => this.onClick(event)}>
              <div></div>
              <div></div>
              <div></div>
            </button>
            <div></div>
          </>
        ) : null}
        <div></div>
      </div>
    );
  }
}
"
`;

exports[`Stencil > jsx > Typescript Test > defaultPropsOutsideComponent 1`] = `
"import { Component, Prop, h, State, Fragment } from \\"@stencil/core\\";

@Component({
  tag: \\"button\\",
})
export default class Button {
  @Prop() link: any;
  @Prop() attributes: any;
  @Prop() openLinkInNewTab: any;
  @Prop() text: any;
  @Prop() onClick: any;

  render() {
    return (
      <div>
        <div></div>
        {this.link ? (
          <>
            <div></div>
            <a>
              <div></div>
              <div></div>
              <div></div>
            </a>
            <div></div>
          </>
        ) : null}
        <div></div>
        {!this.link ? (
          <>
            <div></div>
            <button onclick={(event) => this.onClick(event)}>
              <div></div>
              <div></div>
              <div></div>
            </button>
            <div></div>
          </>
        ) : null}
        <div></div>
      </div>
    );
  }
}
"
`;

exports[`Stencil > jsx > Typescript Test > defaultValsWithTypes 1`] = `
"const DEFAULT_VALUES: Props = {
  name: \\"Sami\\",
};

import { Component, Prop, h, State, Fragment } from \\"@stencil/core\\";

@Component({
  tag: \\"component-with-types\\",
})
export default class ComponentWithTypes {
  @Prop() name: any;

  render() {
    return (
      <div>
        <div></div>
        <div></div>
      </div>
    );
  }
}
"
`;

exports[`Stencil > jsx > Typescript Test > expressionState 1`] = `
"import { Component, Prop, h, State, Fragment } from \\"@stencil/core\\";

@Component({
  tag: \\"my-component\\",
})
export default class MyComponent {
  @Prop() componentRef: any;

  @State() refToUse = !(this.componentRef instanceof Function)
    ? this.componentRef
    : null;

  render() {
    return (
      <div>
        <div></div>
      </div>
    );
  }
}
"
`;

exports[`Stencil > jsx > Typescript Test > import types 1`] = `
"import RenderBlock from \\"./builder-render-block.raw\\";

import { Component, Prop, h, State, Fragment } from \\"@stencil/core\\";

@Component({
  tag: \\"render-content\\",
})
export default class RenderContent {
  @Prop() renderContentProps: any;

  getRenderContentProps(block, index) {
    return {
      block: block,
      index: index,
    };
  }

  render() {
    return (
      <RenderBlock
        {...state.getRenderContentProps(props.renderContentProps.block, 0)}
      ></RenderBlock>
    );
  }
}
"
`;

exports[`Stencil > jsx > Typescript Test > multipleSpreads 1`] = `
"import { Component, Prop, h, State, Fragment } from \\"@stencil/core\\";

@Component({
  tag: \\"my-basic-component\\",
})
export default class MyBasicComponent {
  @State() attrs = {
    hello: \\"world\\",
  };

  render() {
    return <input />;
  }
}
"
`;

exports[`Stencil > jsx > Typescript Test > nestedStyles 1`] = `
"import { Component, Prop, h, State, Fragment } from \\"@stencil/core\\";

@Component({
  tag: \\"nested-styles\\",
  styles: \`
    .div {
      display: flex;
      foo: var(--bar);
    }
    @media (max-width: env(--mobile)) {
      .div {
        display: block;
      }
    }
    .div:hover {
      display: flex;
    }
    .div .nested-selector {
      display: grid;
    }
\`,
})
export default class NestedStyles {
  render() {
    return (
      <div>
        <div></div>
      </div>
    );
  }
}
"
`;

exports[`Stencil > jsx > Typescript Test > onInit & onMount 1`] = `
"import { Component, Prop, h, State, Fragment } from \\"@stencil/core\\";

@Component({
  tag: \\"on-init\\",
})
export default class OnInit {
  componentDidLoad() {
    console.log(\\"onMount\\");
  }

  render() {
    return <div></div>;
  }
}
"
`;

exports[`Stencil > jsx > Typescript Test > onInit 1`] = `
"export const defaultValues = {
  name: \\"PatrickJS\\",
};

import { Component, Prop, h, State, Fragment } from \\"@stencil/core\\";

@Component({
  tag: \\"on-init\\",
})
export default class OnInit {
  @Prop() name: any;

  @State() name = \\"\\";

  render() {
    return (
      <div>
        <div></div>
        <div></div>
      </div>
    );
  }
}
"
`;

exports[`Stencil > jsx > Typescript Test > onMount 1`] = `
"import { Component, Prop, h, State, Fragment } from \\"@stencil/core\\";

@Component({
  tag: \\"comp\\",
})
export default class Comp {
  componentDidLoad() {
    console.log(\\"Runs on mount\\");
  }
  disconnectedCallback() {
    console.log(\\"Runs on unMount\\");
  }

  render() {
    return <div></div>;
  }
}
"
`;

exports[`Stencil > jsx > Typescript Test > onUpdate 1`] = `
"import { Component, Prop, h, State, Fragment } from \\"@stencil/core\\";

@Component({
  tag: \\"on-update\\",
})
export default class OnUpdate {
  componentDidUpdate() {
    console.log(\\"Runs on every update/rerender\\");
  }

  render() {
    return <div></div>;
  }
}
"
`;

exports[`Stencil > jsx > Typescript Test > onUpdateWithDeps 1`] = `
"import { Component, Prop, h, State, Fragment } from \\"@stencil/core\\";

@Component({
  tag: \\"on-update-with-deps\\",
})
export default class OnUpdateWithDeps {
  @Prop() size: any;

  @State() a = \\"a\\";
  @State() b = \\"b\\";

  componentDidUpdate() {
    console.log(\\"Runs when a, b or size changes\\", this.a, this.b, this.size);
  }

  render() {
    return <div></div>;
  }
}
"
`;

exports[`Stencil > jsx > Typescript Test > preserveExportOrLocalStatement 1`] = `
"const b = 3;
const foo = () => {};
export const a = 3;
export const bar = () => {};
export function run<T>(value: T) {}

import { Component, Prop, h, State, Fragment } from \\"@stencil/core\\";

@Component({
  tag: \\"my-basic-component\\",
})
export default class MyBasicComponent {
  render() {
    return <div></div>;
  }
}
"
`;

exports[`Stencil > jsx > Typescript Test > preserveTyping 1`] = `
"import { Component, Prop, h, State, Fragment } from \\"@stencil/core\\";

@Component({
  tag: \\"my-basic-component\\",
})
export default class MyBasicComponent {
  @Prop() name: any;

  render() {
    return (
      <div>
        <div></div>
        <div></div>
      </div>
    );
  }
}
"
`;

exports[`Stencil > jsx > Typescript Test > propsDestructure 1`] = `
"import { Component, Prop, h, State, Fragment } from \\"@stencil/core\\";

@Component({
  tag: \\"my-basic-component\\",
})
export default class MyBasicComponent {
  @Prop() children: any;
  @Prop() type: any;

  @State() name = \\"Decadef20\\";

  render() {
    return (
      <div>
        <div></div>
        <div></div>
        <div></div>
        <div></div>
        <div></div>
      </div>
    );
  }
}
"
`;

exports[`Stencil > jsx > Typescript Test > propsInterface 1`] = `
"import { Component, Prop, h, State, Fragment } from \\"@stencil/core\\";

@Component({
  tag: \\"my-basic-component\\",
})
export default class MyBasicComponent {
  @Prop() name: any;

  render() {
    return (
      <div>
        <div></div>
        <div></div>
      </div>
    );
  }
}
"
`;

exports[`Stencil > jsx > Typescript Test > propsType 1`] = `
"import { Component, Prop, h, State, Fragment } from \\"@stencil/core\\";

@Component({
  tag: \\"my-basic-component\\",
})
export default class MyBasicComponent {
  @Prop() name: any;

  render() {
    return (
      <div>
        <div></div>
        <div></div>
      </div>
    );
  }
}
"
`;

exports[`Stencil > jsx > Typescript Test > referencingFunInsideHook 1`] = `
"import { Component, Prop, h, State, Fragment } from \\"@stencil/core\\";

@Component({
  tag: \\"on-update\\",
})
export default class OnUpdate {
  foo = function foo(params) {};
  bar = function bar() {};
  zoo = function zoo() {
    const params = {
      cb: this.bar,
    };
  };

  componentDidUpdate() {
    foo({
      someOption: bar,
    });
  }

  render() {
    return <div></div>;
  }
}
"
`;

exports[`Stencil > jsx > Typescript Test > renderBlock 1`] = `
"':' expected. (205:15)
  203 |        return (
  204 |        
> 205 |          {this.shouldWrap ? (
      |               ^
  206 |      <><div ></div>
  207 | <div ></div>
  208 | {isEmptyHtmlElement(this.tag) ? ("
`;

exports[`Stencil > jsx > Typescript Test > renderContentExample 1`] = `
"import {
  sendComponentsToVisualEditor,
  dispatchNewContentToVisualEditor,
  trackClick,
} from \\"@dummy/injection-js\\";
import BuilderContext from \\"@dummy/context.lite\\";
import RenderBlocks from \\"@dummy/RenderBlocks.lite.tsx\\";

import { Component, Prop, h, State, Fragment } from \\"@stencil/core\\";

@Component({
  tag: \\"render-content\\",
  styles: \`
    .div {
      display: flex;
      flex-direction: columns;
    }
\`,
})
export default class RenderContent {
  @Prop() content: any;
  @Prop() customComponents: any;

  componentDidLoad() {
    sendComponentsToVisualEditor(this.customComponents);
  }

  componentDidUpdate() {
    dispatchNewContentToVisualEditor(this.content);
  }

  render() {
    return (
      <div onclick={(event) => trackClick(this.content.id)}>
        <div></div>
        <RenderBlocks blocks={this.content.blocks}></RenderBlocks>
        <div></div>
      </div>
    );
  }
}
"
`;

exports[`Stencil > jsx > Typescript Test > rootFragmentMultiNode 1`] = `
"import { Component, Prop, h, State, Fragment } from \\"@stencil/core\\";

@Component({
  tag: \\"button\\",
})
export default class Button {
  @Prop() link: any;
  @Prop() attributes: any;
  @Prop() openLinkInNewTab: any;
  @Prop() text: any;

  render() {
    return (
      <Fragment>
        <div></div>
        {this.link ? (
          <>
            <div></div>
            <a>
              <div></div>
              <div></div>
              <div></div>
            </a>
            <div></div>
          </>
        ) : null}
        <div></div>
        {!this.link ? (
          <>
            <div></div>
            <button>
              <div></div>
              <div></div>
              <div></div>
            </button>
            <div></div>
          </>
        ) : null}
        <div></div>
      </Fragment>
    );
  }
}
"
`;

exports[`Stencil > jsx > Typescript Test > self-referencing component 1`] = `
"import { Component, Prop, h, State, Fragment } from \\"@stencil/core\\";

@Component({
  tag: \\"my-component\\",
})
export default class MyComponent {
  @Prop() name: any;

  render() {
    return (
      <div>
        <div></div>
        <div></div>
        <div></div>
        {this.name === \\"Batman\\" ? (
          <>
            <div></div>
            <MyComponent name=\\"Bruce Wayne\\"></MyComponent>
            <div></div>
          </>
        ) : null}
        <div></div>
      </div>
    );
  }
}
"
`;

exports[`Stencil > jsx > Typescript Test > self-referencing component with children 1`] = `
"import { Component, Prop, h, State, Fragment } from \\"@stencil/core\\";

@Component({
  tag: \\"my-component\\",
})
export default class MyComponent {
  @Prop() name: any;
  @Prop() children: any;

  render() {
    return (
      <div>
        <div></div>
        <div></div>
        <div></div>
        <div></div>
        <div></div>
        {this.name === \\"Batman\\" ? (
          <>
            <div></div>
            <MyComponent name=\\"Bruce\\">
              <div></div>
              <div>
                <div></div>
              </div>
              <div></div>
            </MyComponent>
            <div></div>
          </>
        ) : null}
        <div></div>
      </div>
    );
  }
}
"
`;

exports[`Stencil > jsx > Typescript Test > spreadAttrs 1`] = `
"import { Component, Prop, h, State, Fragment } from \\"@stencil/core\\";

@Component({
  tag: \\"my-basic-component\\",
})
export default class MyBasicComponent {
  render() {
    return <input />;
  }
}
"
`;

exports[`Stencil > jsx > Typescript Test > spreadNestedProps 1`] = `
"import { Component, Prop, h, State, Fragment } from \\"@stencil/core\\";

@Component({
  tag: \\"my-basic-component\\",
})
export default class MyBasicComponent {
  @Prop() nested: any;

  render() {
    return <input />;
  }
}
"
`;

exports[`Stencil > jsx > Typescript Test > spreadProps 1`] = `
"import { Component, Prop, h, State, Fragment } from \\"@stencil/core\\";

@Component({
  tag: \\"my-basic-component\\",
})
export default class MyBasicComponent {
  render() {
    return <input />;
  }
}
"
`;

exports[`Stencil > jsx > Typescript Test > styleClassAndCss 1`] = `
"import { Component, Prop, h, State, Fragment } from \\"@stencil/core\\";

@Component({
  tag: \\"my-component\\",
  styles: \`
    .div {
      display: flex;
      flex-direction: column;
      align-items: stretch;
    }
\`,
})
export default class MyComponent {
  render() {
    return <div></div>;
  }
}
"
`;

exports[`Stencil > jsx > Typescript Test > subComponent 1`] = `
"import Foo from \\"./foo-sub-component.lite\\";

import { Component, Prop, h, State, Fragment } from \\"@stencil/core\\";

@Component({
  tag: \\"sub-component\\",
})
export default class SubComponent {
  render() {
    return <Foo></Foo>;
  }
}
"
`;

exports[`Stencil > jsx > Typescript Test > svgComponent 1`] = `
"import { Component, Prop, h, State, Fragment } from \\"@stencil/core\\";

@Component({
  tag: \\"svg-component\\",
})
export default class SvgComponent {
  render() {
    return (
      <svg viewbox={\\"0 0 \\" + 42 + \\" \\" + 42}>
        <div></div>
        <defs>
          <div></div>
          <filter filterunits=\\"userSpaceOnUse\\">
            <div></div>
            <feFlood></feFlood>
            <div></div>
            <feBlend></feBlend>
            <div></div>
            <feGaussianBlur stddeviation={7}></feGaussianBlur>
            <div></div>
          </filter>
          <div></div>
        </defs>
        <div></div>
      </svg>
    );
  }
}
"
`;

exports[`Stencil > jsx > Typescript Test > typeDependency 1`] = `
"import { Component, Prop, h, State, Fragment } from \\"@stencil/core\\";

@Component({
  tag: \\"type-dependency\\",
})
export default class TypeDependency {
  @Prop() foo: any;

  render() {
    return (
      <div>
        <div></div>
      </div>
    );
  }
}
"
`;

exports[`Stencil > jsx > Typescript Test > use-style 1`] = `
"import { Component, Prop, h, State, Fragment } from \\"@stencil/core\\";

@Component({
  tag: \\"my-component\\",
  styles: \`
    button {
      background: blue;
      color: white;
      font-size: 12px;
      outline: 1px solid black;
    }
\`,
})
export default class MyComponent {
  render() {
    return (
      <button>
        <div></div>
      </button>
    );
  }
}
"
`;

exports[`Stencil > jsx > Typescript Test > use-style-and-css 1`] = `
"import { Component, Prop, h, State, Fragment } from \\"@stencil/core\\";

@Component({
  tag: \\"my-component\\",
  styles: \`
    .button {
      background: blue;
      color: white;
    }

    button {
      font-size: 12px;
      outline: 1px solid black;
    }
\`,
})
export default class MyComponent {
  render() {
    return (
      <button>
        <div></div>
      </button>
    );
  }
}
"
`;

exports[`Stencil > jsx > Typescript Test > use-style-outside-component 1`] = `
"import { Component, Prop, h, State, Fragment } from \\"@stencil/core\\";

@Component({
  tag: \\"my-component\\",
  styles: \`
    button {
      background: blue;
      color: white;
      font-size: 12px;
      outline: 1px solid black;
    }
\`,
})
export default class MyComponent {
  render() {
    return (
      <button>
        <div></div>
      </button>
    );
  }
}
"
`;

exports[`Stencil > svelte > Javascript Test > basic 1`] = `
"import { Component, Prop, h, State, Fragment } from \\"@stencil/core\\";

@Component({
  tag: \\"my-component\\",
})
export default class MyComponent {
  @State() name = \\"Steve\\";

  render() {
    return (
      <div>
        <input onchange={(event) => (this.name = event.target.value)} />
        <div></div>
      </div>
    );
  }
}
"
`;

exports[`Stencil > svelte > Javascript Test > bindGroup 1`] = `
"import { Component, Prop, h, State, Fragment } from \\"@stencil/core\\";

@Component({
  tag: \\"my-component\\",
})
export default class MyComponent {
  @State() tortilla = \\"Plain\\";
  @State() fillings = [];

  render() {
    return (
      <div>
        <input onchange={(event) => (this.tortilla = event.target.value)} />
        <input onchange={(event) => (this.tortilla = event.target.value)} />
        <input onchange={(event) => (this.tortilla = event.target.value)} />
        <br />
        <br />
        <input onchange={(event) => (this.fillings = event.target.value)} />
        <input onchange={(event) => (this.fillings = event.target.value)} />
        <input onchange={(event) => (this.fillings = event.target.value)} />
        <input onchange={(event) => (this.fillings = event.target.value)} />
        <p>
          <div></div>
          <div></div>
        </p>
        <p>
          <div></div>
          <div></div>
        </p>
      </div>
    );
  }
}
"
`;

exports[`Stencil > svelte > Javascript Test > bindProperty 1`] = `
"import { Component, Prop, h, State, Fragment } from \\"@stencil/core\\";

@Component({
  tag: \\"my-component\\",
})
export default class MyComponent {
  @State() value = \\"hello\\";

  render() {
    return <input />;
  }
}
"
`;

exports[`Stencil > svelte > Javascript Test > classDirective 1`] = `
"import { Component, Prop, h, State, Fragment } from \\"@stencil/core\\";

@Component({
  tag: \\"my-component\\",
})
export default class MyComponent {
  @Prop() disabled: any;

  @State() focus = true;

  render() {
    return <input />;
  }
}
"
`;

exports[`Stencil > svelte > Javascript Test > context 1`] = `
"import { Component, Prop, h, State, Fragment } from \\"@stencil/core\\";

@Component({
  tag: \\"my-component\\",
})
export default class MyComponent {
  @State() activeTab = 0;

  render() {
    return (
      <div>
        <div></div>
      </div>
    );
  }
}
"
`;

exports[`Stencil > svelte > Javascript Test > each 1`] = `
"import { Component, Prop, h, State, Fragment } from \\"@stencil/core\\";

@Component({
  tag: \\"my-component\\",
})
export default class MyComponent {
  @State() numbers = [\\"one\\", \\"two\\", \\"three\\"];

  render() {
    return (
      <ul>
        {this.numbers?.map((num) => (
          <li>
            <div></div>
          </li>
        ))}
      </ul>
    );
  }
}
"
`;

exports[`Stencil > svelte > Javascript Test > eventHandlers 1`] = `
"import { Component, Prop, h, State, Fragment } from \\"@stencil/core\\";

@Component({
  tag: \\"my-component\\",
})
export default class MyComponent {
  log = function log(msg = \\"hello\\") {
    console.log(msg);
  };

  render() {
    return (
      <div>
        <button onclick={(a) => this.log(\\"hi\\")}>
          <div></div>
        </button>
        <button onclick={(event) => this.log(event)}>
          <div></div>
        </button>
        <button onclick={(event) => this.log(event)}>
          <div></div>
        </button>
      </div>
    );
  }
}
"
`;

exports[`Stencil > svelte > Javascript Test > html 1`] = `
"import { Component, Prop, h, State, Fragment } from \\"@stencil/core\\";

@Component({
  tag: \\"my-component\\",
})
export default class MyComponent {
  @State() html = \\"<b>bold</b>\\";

  render() {
    return <div innerhtml={this.html}></div>;
  }
}
"
`;

exports[`Stencil > svelte > Javascript Test > ifElse 1`] = `
"':' expected. (25:14)
  23 |       return (
  24 |       
> 25 |         {this.show ? (
     |              ^
  26 |     <button  onclick={event => this.toggle(event)} ><div ></div></button>
  27 |   ) : <button  onclick={event => this.toggle(event)} ><div ></div></button>}
  28 |"
`;

exports[`Stencil > svelte > Javascript Test > imports 1`] = `
"import Button from \\"./Button.lite\\";

import { Component, Prop, h, State, Fragment } from \\"@stencil/core\\";

@Component({
  tag: \\"my-component\\",
})
export default class MyComponent {
  @State() disabled = false;

  render() {
    return (
      <div>
        <Button type=\\"button\\" disabled={this.disabled}>
          <Slot></Slot>
        </Button>
      </div>
    );
  }
}
"
`;

exports[`Stencil > svelte > Javascript Test > lifecycleHooks 1`] = `
"import { Component, Prop, h, State, Fragment } from \\"@stencil/core\\";

@Component({
  tag: \\"my-component\\",
})
export default class MyComponent {
  componentDidLoad() {
    console.log(\\"onMount\\");
  }
  disconnectedCallback() {
    console.log(\\"onDestroy\\");
  }
  componentDidUpdate() {
    console.log(\\"onAfterUpdate\\");
  }

  render() {
    return <div></div>;
  }
}
"
`;

exports[`Stencil > svelte > Javascript Test > reactive 1`] = `
"import { Component, Prop, h, State, Fragment } from \\"@stencil/core\\";

@Component({
  tag: \\"my-component\\",
})
export default class MyComponent {
  @State() name = \\"Steve\\";

  get lowercaseName() {
    return this.name.toLowerCase();
  }

  render() {
    return (
      <div>
        <input />
        <div></div>
        <div></div>
      </div>
    );
  }
}
"
`;

exports[`Stencil > svelte > Javascript Test > reactiveWithFn 1`] = `
"import { Component, Prop, h, State, Fragment } from \\"@stencil/core\\";

@Component({
  tag: \\"my-component\\",
})
export default class MyComponent {
  @State() a = 2;
  @State() b = 5;
  @State() result = null;

  calculateResult = function calculateResult(a_, b_) {
    this.result = a_ * b_;
  };

  componentDidUpdate() {
    this.calculateResult(this.a, this.b);
  }

  render() {
    return (
      <div>
        <input onchange={(event) => (this.a = event.target.value)} />
        <input onchange={(event) => (this.b = event.target.value)} />
        <div></div>
        <div></div>
      </div>
    );
  }
}
"
`;

exports[`Stencil > svelte > Javascript Test > slots 1`] = `
"import { Component, Prop, h, State, Fragment } from \\"@stencil/core\\";

@Component({
  tag: \\"my-component\\",
})
export default class MyComponent {
  render() {
    return (
      <div>
        <Slot>
          <div></div>
        </Slot>
        <Slot name=\\"Test\\">
          <div>
            <div></div>
          </div>
        </Slot>
      </div>
    );
  }
}
"
`;

exports[`Stencil > svelte > Javascript Test > style 1`] = `
"import { Component, Prop, h, State, Fragment } from \\"@stencil/core\\";

@Component({
  tag: \\"my-component\\",
  styles: \`
    input {
      color: red;
      font-size: 12px;
    }

    .form-input:focus {
      outline: 1px solid blue;
    }
\`,
})
export default class MyComponent {
  render() {
    return <input />;
  }
}
"
`;

exports[`Stencil > svelte > Javascript Test > textExpressions 1`] = `
"import { Component, Prop, h, State, Fragment } from \\"@stencil/core\\";

@Component({
  tag: \\"my-component\\",
})
export default class MyComponent {
  @State() a = 5;
  @State() b = 12;

  render() {
    return (
      <div>
        <div></div>
        <div></div>
        <br />
        <div></div>
        <div></div>
      </div>
    );
  }
}
"
`;

exports[`Stencil > svelte > Typescript Test > basic 1`] = `
"import { Component, Prop, h, State, Fragment } from \\"@stencil/core\\";

@Component({
  tag: \\"my-component\\",
})
export default class MyComponent {
  @State() name = \\"Steve\\";

  render() {
    return (
      <div>
        <input onchange={(event) => (this.name = event.target.value)} />
        <div></div>
      </div>
    );
  }
}
"
`;

exports[`Stencil > svelte > Typescript Test > bindGroup 1`] = `
"import { Component, Prop, h, State, Fragment } from \\"@stencil/core\\";

@Component({
  tag: \\"my-component\\",
})
export default class MyComponent {
  @State() tortilla = \\"Plain\\";
  @State() fillings = [];

  render() {
    return (
      <div>
        <input onchange={(event) => (this.tortilla = event.target.value)} />
        <input onchange={(event) => (this.tortilla = event.target.value)} />
        <input onchange={(event) => (this.tortilla = event.target.value)} />
        <br />
        <br />
        <input onchange={(event) => (this.fillings = event.target.value)} />
        <input onchange={(event) => (this.fillings = event.target.value)} />
        <input onchange={(event) => (this.fillings = event.target.value)} />
        <input onchange={(event) => (this.fillings = event.target.value)} />
        <p>
          <div></div>
          <div></div>
        </p>
        <p>
          <div></div>
          <div></div>
        </p>
      </div>
    );
  }
}
"
`;

exports[`Stencil > svelte > Typescript Test > bindProperty 1`] = `
"import { Component, Prop, h, State, Fragment } from \\"@stencil/core\\";

@Component({
  tag: \\"my-component\\",
})
export default class MyComponent {
  @State() value = \\"hello\\";

  render() {
    return <input />;
  }
}
"
`;

exports[`Stencil > svelte > Typescript Test > classDirective 1`] = `
"import { Component, Prop, h, State, Fragment } from \\"@stencil/core\\";

@Component({
  tag: \\"my-component\\",
})
export default class MyComponent {
  @Prop() disabled: any;

  @State() focus = true;

  render() {
    return <input />;
  }
}
"
`;

exports[`Stencil > svelte > Typescript Test > context 1`] = `
"import { Component, Prop, h, State, Fragment } from \\"@stencil/core\\";

@Component({
  tag: \\"my-component\\",
})
export default class MyComponent {
  @State() activeTab = 0;

  render() {
    return (
      <div>
        <div></div>
      </div>
    );
  }
}
"
`;

exports[`Stencil > svelte > Typescript Test > each 1`] = `
"import { Component, Prop, h, State, Fragment } from \\"@stencil/core\\";

@Component({
  tag: \\"my-component\\",
})
export default class MyComponent {
  @State() numbers = [\\"one\\", \\"two\\", \\"three\\"];

  render() {
    return (
      <ul>
        {this.numbers?.map((num) => (
          <li>
            <div></div>
          </li>
        ))}
      </ul>
    );
  }
}
"
`;

exports[`Stencil > svelte > Typescript Test > eventHandlers 1`] = `
"import { Component, Prop, h, State, Fragment } from \\"@stencil/core\\";

@Component({
  tag: \\"my-component\\",
})
export default class MyComponent {
  log = function log(msg = \\"hello\\") {
    console.log(msg);
  };

  render() {
    return (
      <div>
        <button onclick={(a) => this.log(\\"hi\\")}>
          <div></div>
        </button>
        <button onclick={(event) => this.log(event)}>
          <div></div>
        </button>
        <button onclick={(event) => this.log(event)}>
          <div></div>
        </button>
      </div>
    );
  }
}
"
`;

exports[`Stencil > svelte > Typescript Test > html 1`] = `
"import { Component, Prop, h, State, Fragment } from \\"@stencil/core\\";

@Component({
  tag: \\"my-component\\",
})
export default class MyComponent {
  @State() html = \\"<b>bold</b>\\";

  render() {
    return <div innerhtml={this.html}></div>;
  }
}
"
`;

exports[`Stencil > svelte > Typescript Test > ifElse 1`] = `
"':' expected. (25:14)
  23 |       return (
  24 |       
> 25 |         {this.show ? (
     |              ^
  26 |     <button  onclick={event => this.toggle(event)} ><div ></div></button>
  27 |   ) : <button  onclick={event => this.toggle(event)} ><div ></div></button>}
  28 |"
`;

exports[`Stencil > svelte > Typescript Test > imports 1`] = `
"import Button from \\"./Button.lite\\";

import { Component, Prop, h, State, Fragment } from \\"@stencil/core\\";

@Component({
  tag: \\"my-component\\",
})
export default class MyComponent {
  @State() disabled = false;

  render() {
    return (
      <div>
        <Button type=\\"button\\" disabled={this.disabled}>
          <Slot></Slot>
        </Button>
      </div>
    );
  }
}
"
`;

exports[`Stencil > svelte > Typescript Test > lifecycleHooks 1`] = `
"import { Component, Prop, h, State, Fragment } from \\"@stencil/core\\";

@Component({
  tag: \\"my-component\\",
})
export default class MyComponent {
  componentDidLoad() {
    console.log(\\"onMount\\");
  }
  disconnectedCallback() {
    console.log(\\"onDestroy\\");
  }
  componentDidUpdate() {
    console.log(\\"onAfterUpdate\\");
  }

  render() {
    return <div></div>;
  }
}
"
`;

exports[`Stencil > svelte > Typescript Test > reactive 1`] = `
"import { Component, Prop, h, State, Fragment } from \\"@stencil/core\\";

@Component({
  tag: \\"my-component\\",
})
export default class MyComponent {
  @State() name = \\"Steve\\";

  get lowercaseName() {
    return this.name.toLowerCase();
  }

  render() {
    return (
      <div>
        <input />
        <div></div>
        <div></div>
      </div>
    );
  }
}
"
`;

exports[`Stencil > svelte > Typescript Test > reactiveWithFn 1`] = `
"import { Component, Prop, h, State, Fragment } from \\"@stencil/core\\";

@Component({
  tag: \\"my-component\\",
})
export default class MyComponent {
  @State() a = 2;
  @State() b = 5;
  @State() result = null;

  calculateResult = function calculateResult(a_, b_) {
    this.result = a_ * b_;
  };

  componentDidUpdate() {
    this.calculateResult(this.a, this.b);
  }

  render() {
    return (
      <div>
        <input onchange={(event) => (this.a = event.target.value)} />
        <input onchange={(event) => (this.b = event.target.value)} />
        <div></div>
        <div></div>
      </div>
    );
  }
}
"
`;

exports[`Stencil > svelte > Typescript Test > slots 1`] = `
"import { Component, Prop, h, State, Fragment } from \\"@stencil/core\\";

@Component({
  tag: \\"my-component\\",
})
export default class MyComponent {
  render() {
    return (
      <div>
        <Slot>
          <div></div>
        </Slot>
        <Slot name=\\"Test\\">
          <div>
            <div></div>
          </div>
        </Slot>
      </div>
    );
  }
}
"
`;

exports[`Stencil > svelte > Typescript Test > style 1`] = `
"import { Component, Prop, h, State, Fragment } from \\"@stencil/core\\";

@Component({
  tag: \\"my-component\\",
  styles: \`
    input {
      color: red;
      font-size: 12px;
    }

    .form-input:focus {
      outline: 1px solid blue;
    }
\`,
})
export default class MyComponent {
  render() {
    return <input />;
  }
}
"
`;

exports[`Stencil > svelte > Typescript Test > textExpressions 1`] = `
"import { Component, Prop, h, State, Fragment } from \\"@stencil/core\\";

@Component({
  tag: \\"my-component\\",
})
export default class MyComponent {
  @State() a = 5;
  @State() b = 12;

  render() {
    return (
      <div>
        <div></div>
        <div></div>
        <br />
        <div></div>
        <div></div>
      </div>
    );
  }
}
"
`;
