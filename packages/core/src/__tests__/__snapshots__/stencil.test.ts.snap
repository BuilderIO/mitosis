// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`Stencil > jsx > Javascript Test > AdvancedRef 1`] = `
"import { Component, h, Fragment, Prop, State } from \\"@stencil/core\\";

@Component({
  tag: \\"my-basic-ref-component\\",

  styles: \`
        .input {
          color: red;
        }
\`,
})
export class MyBasicRefComponent {
  private inputRef!: HTMLElement;
  private inputNoArgRef!: HTMLElement;
  @Prop() showInput: any;
  @State() name = \\"PatrickJS\\";

  onBlur = function onBlur() {
    // Maintain focus
    this.inputRef.focus();
  };
  lowerCaseName = function lowerCaseName() {
    return this.name.toLowerCase();
  };

  componentDidUpdate() {
    console.log(\\"Received an update\\");
  }

  render() {
    return (
      <div>
        {this.showInput ? (
          <Fragment>
            <input
              class=\\"input\\"
              ref={(el) => (this.inputRef = el)}
              value={this.name}
              onBlur={(event) => this.onBlur()}
              onInput={(event) => (this.name = event.target.value)}
            />
            <label for=\\"cars\\" ref={(el) => (this.inputNoArgRef = el)}>
              Choose a car:
            </label>
            <select name=\\"cars\\" id=\\"cars\\">
              <option value=\\"supra\\">GR Supra</option>
              <option value=\\"86\\">GR 86</option>
            </select>
          </Fragment>
        ) : null}
        Hello
        {this.lowerCaseName()}! I can run in React, Qwik, Vue, Solid, or Web
        Component!
      </div>
    );
  }
}
"
`;

exports[`Stencil > jsx > Javascript Test > Basic 1`] = `
"export const DEFAULT_VALUES = {
  name: \\"Steve\\",
};

import { Component, h, Fragment, State } from \\"@stencil/core\\";

@Component({
  tag: \\"my-basic-component\\",

  styles: \`
        .div {
          padding: 10px;
        }
\`,
})
export class MyBasicComponent {
  @State() name = \\"Steve\\";
  @State() age = 1;
  @State() sports = [\\"\\"];

  underscore_fn_name() {
    return \\"bar\\";
  }

  render() {
    return (
      <div class=\\"test div\\">
        <input
          value={DEFAULT_VALUES.name || this.name}
          onInput={(myEvent) => (this.name = myEvent.target.value)}
        />
        Hello! I can run in React, Vue, Solid, or Liquid! &gt;
      </div>
    );
  }
}
"
`;

exports[`Stencil > jsx > Javascript Test > Basic 2`] = `
"import { Component, h, Fragment, State } from \\"@stencil/core\\";

@Component({
  tag: \\"my-basic-for-show-component\\",
})
export class MyBasicForShowComponent {
  @State() name = \\"PatrickJS\\";
  @State() names = [\\"Steve\\", \\"PatrickJS\\"];

  render() {
    return (
      <div>
        {this.names?.map((person) =>
          person === this.name ? (
            <Fragment>
              <input
                value={this.name}
                onInput={(event) => {
                  this.name = event.target.value + \\" and \\" + person;
                }}
              />
              Hello
              {person}! I can run in Qwik, Web Component, React, Vue, Solid, or
              Liquid!
            </Fragment>
          ) : null
        )}
      </div>
    );
  }
}
"
`;

exports[`Stencil > jsx > Javascript Test > Basic Context 1`] = `
"import { Injector, MyService, createInjector } from \\"@dummy/injection-js\\";

import { Component, h, Fragment, State } from \\"@stencil/core\\";

@Component({
  tag: \\"my-basic-component\\",
})
export class MyBasicComponent {
  @State() name = \\"PatrickJS\\";

  onChange = function onChange() {
    const change = myService.method(\\"change\\");
    console.log(change);
  };

  componentDidLoad() {
    const bye = myService.method(\\"hi\\");
    console.log(bye);
  }

  render() {
    return (
      <div>
        {myService.method(\\"hello\\") + this.name}
        Hello! I can run in React, Vue, Solid, or Liquid!
        <input onInput={() => this.onChange} />
      </div>
    );
  }
}
"
`;

exports[`Stencil > jsx > Javascript Test > Basic OnMount Update 1`] = `
"import { Component, h, Fragment, Prop, State } from \\"@stencil/core\\";

@Component({
  tag: \\"my-basic-on-mount-update-component\\",
})
export class MyBasicOnMountUpdateComponent {
  @Prop() bye: any;
  @Prop() hi: any;
  @State() name = \\"PatrickJS\\";
  @State() names = [\\"Steve\\", \\"PatrickJS\\"];

  componentDidLoad() {
    this.name = \\"PatrickJS onMount\\" + this.bye;
  }

  render() {
    return (
      <div>
        Hello
        {this.name}
      </div>
    );
  }
}
"
`;

exports[`Stencil > jsx > Javascript Test > Basic Outputs 1`] = `
"import { Component, h, Fragment, Event, Prop, State } from \\"@stencil/core\\";

@Component({
  tag: \\"my-basic-outputs-component\\",
})
export class MyBasicOutputsComponent {
  @Event() onMessage: any;
  @Event() onEvent: any;
  @Prop() message: any;
  @State() name = \\"PatrickJS\\";

  componentDidLoad() {
    this.onMessage.emit(this.name);
    this.onEvent.emit(this.message);
  }

  render() {
    return <div></div>;
  }
}
"
`;

exports[`Stencil > jsx > Javascript Test > Basic Outputs Meta 1`] = `
"import { Component, h, Fragment, Event, Prop, State } from \\"@stencil/core\\";

@Component({
  tag: \\"my-basic-outputs-component\\",
})
export class MyBasicOutputsComponent {
  @Event() onMessage: any;
  @Event() onEvent: any;
  @Prop() message: any;
  @State() name = \\"PatrickJS\\";

  componentDidLoad() {
    this.onMessage.emit(this.name);
    this.onEvent.emit(this.message);
  }

  render() {
    return <div></div>;
  }
}
"
`;

exports[`Stencil > jsx > Javascript Test > BasicAttribute 1`] = `
"import { Component, h, Fragment } from \\"@stencil/core\\";

@Component({
  tag: \\"my-component\\",
})
export class MyComponent {
  render() {
    return <input autocapitalize=\\"on\\" autocomplete=\\"on\\" spellcheck={true} />;
  }
}
"
`;

exports[`Stencil > jsx > Javascript Test > BasicBooleanAttribute 1`] = `
"import { MyBooleanAttributeComponent } from \\"./basic-boolean-attribute-component.raw\\";

import { Component, h, Fragment, Prop } from \\"@stencil/core\\";

@Component({
  tag: \\"my-boolean-attribute\\",
})
export class MyBooleanAttribute {
  @Prop() children: any;
  @Prop() type: any;

  render() {
    return (
      <div>
        {this.children ? (
          <Fragment>
            <slot></slot>
            {this.type}
          </Fragment>
        ) : null}
        <my-boolean-attribute-component
          toggle={true}
        ></my-boolean-attribute-component>
        <my-boolean-attribute-component
          toggle={true}
        ></my-boolean-attribute-component>
        <my-boolean-attribute-component
          list={null}
        ></my-boolean-attribute-component>
      </div>
    );
  }
}
"
`;

exports[`Stencil > jsx > Javascript Test > BasicChildComponent 1`] = `
"import { MyBasicOnMountUpdateComponent } from \\"./basic-onMount-update.raw\\";
import { MyBasicComponent } from \\"./basic.raw\\";

import { Component, h, Fragment, State } from \\"@stencil/core\\";

@Component({
  tag: \\"my-basic-child-component\\",
})
export class MyBasicChildComponent {
  @State() name = \\"Steve\\";
  @State() dev = \\"PatrickJS\\";

  render() {
    return (
      <div>
        <my-basic-component id={this.dev}></my-basic-component>
        <div>
          <my-basic-on-mount-update-component
            hi={this.name}
            bye={this.dev}
          ></my-basic-on-mount-update-component>
        </div>
      </div>
    );
  }
}
"
`;

exports[`Stencil > jsx > Javascript Test > BasicFor 1`] = `
"import { Component, h, Fragment, State } from \\"@stencil/core\\";

@Component({
  tag: \\"my-basic-for-component\\",
})
export class MyBasicForComponent {
  @State() name = \\"PatrickJS\\";
  @State() names = [\\"Steve\\", \\"PatrickJS\\"];

  componentDidLoad() {
    console.log(\\"onMount code\\");
  }

  render() {
    return (
      <div>
        {this.names?.map((person) => (
          <Fragment>
            <input
              value={this.name}
              onInput={(event) => {
                this.name = event.target.value + \\" and \\" + person;
              }}
            />
            Hello
            {person}! I can run in Qwik, Web Component, React, Vue, Solid, or
            Liquid!
          </Fragment>
        ))}
      </div>
    );
  }
}
"
`;

exports[`Stencil > jsx > Javascript Test > BasicRef 1`] = `
"import { Component, h, Fragment, Prop, State } from \\"@stencil/core\\";

@Component({
  tag: \\"my-basic-ref-component\\",

  styles: \`
        .input {
          color: red;
        }
\`,
})
export class MyBasicRefComponent {
  private inputRef!: HTMLElement;
  private inputNoArgRef!: HTMLElement;
  @Prop() showInput: any;
  @State() name = \\"PatrickJS\\";

  onBlur = function onBlur() {
    // Maintain focus
    this.inputRef.focus();
  };
  lowerCaseName = function lowerCaseName() {
    return this.name.toLowerCase();
  };

  render() {
    return (
      <div>
        {this.showInput ? (
          <Fragment>
            <input
              class=\\"input\\"
              ref={(el) => (this.inputRef = el)}
              value={this.name}
              onBlur={(event) => this.onBlur()}
              onInput={(event) => (this.name = event.target.value)}
            />
            <label for=\\"cars\\" ref={(el) => (this.inputNoArgRef = el)}>
              Choose a car:
            </label>
            <select name=\\"cars\\" id=\\"cars\\">
              <option value=\\"supra\\">GR Supra</option>
              <option value=\\"86\\">GR 86</option>
            </select>
          </Fragment>
        ) : null}
        Hello
        {this.lowerCaseName()}! I can run in React, Qwik, Vue, Solid, or Web
        Component!
      </div>
    );
  }
}
"
`;

exports[`Stencil > jsx > Javascript Test > BasicRefAssignment 1`] = `
"import { Component, h, Fragment } from \\"@stencil/core\\";

@Component({
  tag: \\"my-basic-ref-assignment-component\\",
})
export class MyBasicRefAssignmentComponent {
  private holdValueRef!: HTMLElement;

  handlerClick = function handlerClick(event) {
    event.preventDefault();
    console.log(\\"current value\\", this.holdValueRef);
    this.holdValueRef = this.holdValueRef + \\"JS\\";
  };

  render() {
    return (
      <div>
        <button onClick={(evt) => this.handlerClick(evt)}>Click</button>
      </div>
    );
  }
}
"
`;

exports[`Stencil > jsx > Javascript Test > BasicRefPrevious 1`] = `
"export function usePrevious(value) {
  // The ref object is a generic container whose current property is mutable ...
  // ... and can hold any value, similar to an instance property on a class
  let ref = useRef(null); // Store current value in ref

  onUpdate(() => {
    ref = value;
  }, [value]); // Only re-run if value changes
  // Return previous value (happens before update in useEffect above)

  return ref;
}

import { Component, h, Fragment, State } from \\"@stencil/core\\";

@Component({
  tag: \\"my-previous-component\\",
})
export class MyPreviousComponent {
  private prevCount!: HTMLElement;

  @State() count = 0;

  componentDidUpdate() {
    this.prevCount = this.count;
  }

  render() {
    return (
      <div>
        <h1>
          Now:
          {this.count}, before:
          {this.prevCount}
        </h1>
        <button onClick={() => (this.count += 1)}>Increment</button>
      </div>
    );
  }
}
"
`;

exports[`Stencil > jsx > Javascript Test > Button 1`] = `
"import { Component, h, Fragment, Prop } from \\"@stencil/core\\";

@Component({
  tag: \\"button\\",
})
export class Button {
  @Prop() link: any;
  @Prop() attributes: any;
  @Prop() openLinkInNewTab: any;
  @Prop() text: any;

  render() {
    return (
      <div>
        {this.link ? (
          <a
            {...this.attributes}
            href={this.link}
            target={this.openLinkInNewTab ? \\"_blank\\" : undefined}
          >
            {this.text}
          </a>
        ) : null}
        {!this.link ? (
          <button type=\\"button\\" {...this.attributes}>
            {this.text}
          </button>
        ) : null}
      </div>
    );
  }
}
"
`;

exports[`Stencil > jsx > Javascript Test > Columns 1`] = `
"import { Component, h, Fragment, Prop } from \\"@stencil/core\\";

@Component({
  tag: \\"column\\",

  styles: \`
        .div {
          display: flex;
          flex-direction: column;
          align-items: stretch;
          line-height: normal;
        }
        @media (max-width: 999px) {
          .div {
            flex-direction: row;
          }
        }
        @media (max-width: 639px) {
          .div {
            flex-direction: row-reverse;
          }
        }
        .div-2 {
          flex-grow: 1;
        }
\`,
})
export class Column {
  @Prop() columns: any;
  @Prop() space: any;

  getColumns() {
    return this.columns || [];
  }
  getGutterSize() {
    return typeof this.space === \\"number\\" ? this.space || 0 : 20;
  }
  getWidth(index) {
    const columns = this.getColumns();
    return (columns[index] && columns[index].width) || 100 / columns.length;
  }
  getColumnCssWidth(index) {
    const columns = this.getColumns();
    const gutterSize = this.getGutterSize();
    const subtractWidth = (gutterSize * (columns.length - 1)) / columns.length;
    return \`calc(\${this.getWidth(index)}% - \${subtractWidth}px)\`;
  }

  render() {
    return (
      <div class=\\"builder-columns div\\">
        {this.columns?.map((column, index) => (
          <div class=\\"builder-column div-2\\">
            {column.content}
            {index}
          </div>
        ))}
      </div>
    );
  }
}
"
`;

exports[`Stencil > jsx > Javascript Test > ContentSlotHtml 1`] = `
"import { Component, h, Fragment, Prop } from \\"@stencil/core\\";

@Component({
  tag: \\"content-slot-code\\",
})
export class ContentSlotCode {
  @Prop() slotTesting: any;

  render() {
    return (
      <div>
        <slot name={this.slotTesting}></slot>
        <div>
          <hr />
        </div>
        <div>
          <slot></slot>
        </div>
      </div>
    );
  }
}
"
`;

exports[`Stencil > jsx > Javascript Test > ContentSlotJSX 1`] = `
"import { Component, h, Fragment, Host, Prop, State } from \\"@stencil/core\\";

@Component({
  tag: \\"content-slot-jsx-code\\",
})
export class ContentSlotJsxCode {
  @Prop() slotContent: any = undefined;
  @Prop() children: any;
  @Prop() slotReference: any = undefined;
  @Prop() attributes: any;
  @Prop() content: any = \\"\\";
  @State() name = \\"king\\";
  @State() showContent = false;

  get cls() {
    return this.slotContent && this.children ? \`\${this.name}-content\` : \\"\\";
  }
  show() {
    this.slotContent ? 1 : \\"\\";
  }

  render() {
    return (
      <Host>
        {this.slotReference ? (
          <div
            class={this.cls}
            name={this.slotContent ? \\"name1\\" : \\"name2\\"}
            title={this.slotContent ? \\"title1\\" : \\"title2\\"}
            {...this.attributes}
            onClick={() => this.show()}
          >
            {this.showContent && this.slotContent ? (
              <slot name=\\"content\\">{this.content}</slot>
            ) : null}
            <div>
              <hr />
            </div>
            <div>
              <slot></slot>
            </div>
          </div>
        ) : null}
      </Host>
    );
  }
}
"
`;

exports[`Stencil > jsx > Javascript Test > CustomCode 1`] = `
"import { Component, h, Fragment, Prop, State } from \\"@stencil/core\\";

@Component({
  tag: \\"custom-code\\",
})
export class CustomCode {
  private elem!: HTMLElement;
  @Prop() replaceNodes: any;
  @Prop() code: any;
  @State() scriptsInserted = [];
  @State() scriptsRun = [];

  findAndRunScripts() {
    // TODO: Move this function to standalone one in '@builder.io/utils'
    if (this.elem && typeof window !== \\"undefined\\") {
      /** @type {HTMLScriptElement[]} */
      const scripts = this.elem.getElementsByTagName(\\"script\\");

      for (let i = 0; i < scripts.length; i++) {
        const script = scripts[i];

        if (script.src) {
          if (this.scriptsInserted.includes(script.src)) {
            continue;
          }

          this.scriptsInserted.push(script.src);
          const newScript = document.createElement(\\"script\\");
          newScript.async = true;
          newScript.src = script.src;
          document.head.appendChild(newScript);
        } else if (
          !script.type ||
          [
            \\"text/javascript\\",
            \\"application/javascript\\",
            \\"application/ecmascript\\",
          ].includes(script.type)
        ) {
          if (this.scriptsRun.includes(script.innerText)) {
            continue;
          }

          try {
            this.scriptsRun.push(script.innerText);
            new Function(script.innerText)();
          } catch (error) {
            console.warn(\\"\`CustomCode\`: Error running script:\\", error);
          }
        }
      }
    }
  }

  componentDidLoad() {
    this.findAndRunScripts();
  }

  render() {
    return (
      <div
        class={
          \\"builder-custom-code\\" + (this.replaceNodes ? \\" replace-nodes\\" : \\"\\")
        }
        ref={(el) => (this.elem = el)}
        innerHTML={this.code}
      ></div>
    );
  }
}
"
`;

exports[`Stencil > jsx > Javascript Test > Embed 1`] = `
"import { Component, h, Fragment, Prop, State } from \\"@stencil/core\\";

@Component({
  tag: \\"custom-code\\",
})
export class CustomCode {
  private elem!: HTMLElement;
  @Prop() replaceNodes: any;
  @Prop() code: any;
  @State() scriptsInserted = [];
  @State() scriptsRun = [];

  findAndRunScripts() {
    // TODO: Move this function to standalone one in '@builder.io/utils'
    if (this.elem && typeof window !== \\"undefined\\") {
      /** @type {HTMLScriptElement[]} */
      const scripts = this.elem.getElementsByTagName(\\"script\\");

      for (let i = 0; i < scripts.length; i++) {
        const script = scripts[i];

        if (script.src) {
          if (this.scriptsInserted.includes(script.src)) {
            continue;
          }

          this.scriptsInserted.push(script.src);
          const newScript = document.createElement(\\"script\\");
          newScript.async = true;
          newScript.src = script.src;
          document.head.appendChild(newScript);
        } else if (
          !script.type ||
          [
            \\"text/javascript\\",
            \\"application/javascript\\",
            \\"application/ecmascript\\",
          ].includes(script.type)
        ) {
          if (this.scriptsRun.includes(script.innerText)) {
            continue;
          }

          try {
            this.scriptsRun.push(script.innerText);
            new Function(script.innerText)();
          } catch (error) {
            console.warn(\\"\`CustomCode\`: Error running script:\\", error);
          }
        }
      }
    }
  }

  componentDidLoad() {
    this.findAndRunScripts();
  }

  render() {
    return (
      <div
        class={
          \\"builder-custom-code\\" + (this.replaceNodes ? \\" replace-nodes\\" : \\"\\")
        }
        ref={(el) => (this.elem = el)}
        innerHTML={this.code}
      ></div>
    );
  }
}
"
`;

exports[`Stencil > jsx > Javascript Test > Form 1`] = `
"import { Builder, builder } from \\"@builder.io/sdk\\";
import {
  BuilderBlock as BuilderBlockComponent,
  BuilderBlocks,
  get,
  set,
} from \\"@fake\\";

import { Component, h, Fragment, Prop, State } from \\"@stencil/core\\";

@Component({
  tag: \\"form-component\\",

  styles: \`
        .pre {
          padding: 10px;
          color: red;
          text-align: center;
        }
\`,
})
export class FormComponent {
  private formRef!: HTMLElement;
  @Prop() previewState: any;
  @Prop() sendWithJs: any;
  @Prop() sendSubmissionsTo: any;
  @Prop() action: any;
  @Prop() customHeaders: any;
  @Prop() contentType: any;
  @Prop() sendSubmissionsToEmail: any;
  @Prop() name: any;
  @Prop() method: any;
  @Prop() errorMessagePath: any;
  @Prop() resetFormOnSubmit: any;
  @Prop() successUrl: any;
  @Prop() validate: any;
  @Prop() attributes: any;
  @Prop() builderBlock: any;
  @Prop() errorMessage: any;
  @Prop() sendingMessage: any;
  @Prop() successMessage: any;
  @State() formState = \\"unsubmitted\\";
  @State() responseData = null;
  @State() formErrorMessage = \\"\\";

  get submissionState() {
    return (Builder.isEditing && this.previewState) || this.formState;
  }
  onSubmit(event) {
    const sendWithJs = this.sendWithJs || this.sendSubmissionsTo === \\"email\\";

    if (this.sendSubmissionsTo === \\"zapier\\") {
      event.preventDefault();
    } else if (sendWithJs) {
      if (!(this.action || this.sendSubmissionsTo === \\"email\\")) {
        event.preventDefault();
        return;
      }

      event.preventDefault();
      const el = event.currentTarget;
      const headers = this.customHeaders || {};
      let body;
      const formData = new FormData(el); // TODO: maybe support null

      const formPairs = Array.from(
        event.currentTarget.querySelectorAll(\\"input,select,textarea\\")
      )
        .filter((el) => !!el.name)
        .map((el) => {
          let value;
          const key = el.name;

          if (el instanceof HTMLInputElement) {
            if (el.type === \\"radio\\") {
              if (el.checked) {
                value = el.name;
                return {
                  key,
                  value,
                };
              }
            } else if (el.type === \\"checkbox\\") {
              value = el.checked;
            } else if (el.type === \\"number\\" || el.type === \\"range\\") {
              const num = el.valueAsNumber;

              if (!isNaN(num)) {
                value = num;
              }
            } else if (el.type === \\"file\\") {
              // TODO: one vs multiple files
              value = el.files;
            } else {
              value = el.value;
            }
          } else {
            value = el.value;
          }

          return {
            key,
            value,
          };
        });
      let contentType = this.contentType;

      if (this.sendSubmissionsTo === \\"email\\") {
        contentType = \\"multipart/form-data\\";
      }

      Array.from(formPairs).forEach(({ value }) => {
        if (
          value instanceof File ||
          (Array.isArray(value) && value[0] instanceof File) ||
          value instanceof FileList
        ) {
          contentType = \\"multipart/form-data\\";
        }
      }); // TODO: send as urlEncoded or multipart by default
      // because of ease of use and reliability in browser API
      // for encoding the form?

      if (contentType !== \\"application/json\\") {
        body = formData;
      } else {
        // Json
        const json = {};
        Array.from(formPairs).forEach(({ value, key }) => {
          set(json, key, value);
        });
        body = JSON.stringify(json);
      }

      if (contentType && contentType !== \\"multipart/form-data\\") {
        if (
          /* Zapier doesn't allow content-type header to be sent from browsers */
          !(sendWithJs && this.action?.includes(\\"zapier.com\\"))
        ) {
          headers[\\"content-type\\"] = contentType;
        }
      }

      const presubmitEvent = new CustomEvent(\\"presubmit\\", {
        detail: {
          body,
        },
      });

      if (this.formRef) {
        this.formRef.dispatchEvent(presubmitEvent);

        if (presubmitEvent.defaultPrevented) {
          return;
        }
      }

      this.formState = \\"sending\\";
      const formUrl = \`\${
        builder.env === \\"dev\\" ? \\"http://localhost:5000\\" : \\"https://builder.io\\"
      }/api/v1/form-submit?apiKey=\${builder.apiKey}&to=\${btoa(
        this.sendSubmissionsToEmail || \\"\\"
      )}&name=\${encodeURIComponent(this.name || \\"\\")}\`;
      fetch(
        this.sendSubmissionsTo === \\"email\\" ? formUrl : this.action,
        /* TODO: throw error if no action URL */
        {
          body,
          headers,
          method: this.method || \\"post\\",
        }
      ).then(
        async (res) => {
          let body;
          const contentType = res.headers.get(\\"content-type\\");

          if (contentType && contentType.indexOf(\\"application/json\\") !== -1) {
            body = await res.json();
          } else {
            body = await res.text();
          }

          if (!res.ok && this.errorMessagePath) {
            /* TODO: allow supplying an error formatter function */
            let message = get(body, this.errorMessagePath);

            if (message) {
              if (typeof message !== \\"string\\") {
                /* TODO: ideally convert json to yaml so it woul dbe like
            error: - email has been taken */
                message = JSON.stringify(message);
              }

              this.formErrorMessage = message;
            }
          }

          this.responseData = body;
          this.formState = res.ok ? \\"success\\" : \\"error\\";

          if (res.ok) {
            const submitSuccessEvent = new CustomEvent(\\"submit:success\\", {
              detail: {
                res,
                body,
              },
            });

            if (this.formRef) {
              this.formRef.dispatchEvent(submitSuccessEvent);

              if (submitSuccessEvent.defaultPrevented) {
                return;
              }
              /* TODO: option to turn this on/off? */

              if (this.resetFormOnSubmit !== false) {
                this.formRef.reset();
              }
            }
            /* TODO: client side route event first that can be preventDefaulted */

            if (this.successUrl) {
              if (this.formRef) {
                const event = new CustomEvent(\\"route\\", {
                  detail: {
                    url: this.successUrl,
                  },
                });
                this.formRef.dispatchEvent(event);

                if (!event.defaultPrevented) {
                  location.href = this.successUrl;
                }
              } else {
                location.href = this.successUrl;
              }
            }
          }
        },
        (err) => {
          const submitErrorEvent = new CustomEvent(\\"submit:error\\", {
            detail: {
              error: err,
            },
          });

          if (this.formRef) {
            this.formRef.dispatchEvent(submitErrorEvent);

            if (submitErrorEvent.defaultPrevented) {
              return;
            }
          }

          this.responseData = err;
          this.formState = \\"error\\";
        }
      );
    }
  }

  render() {
    return (
      <form
        validate={this.validate}
        ref={(el) => (this.formRef = el)}
        action={!this.sendWithJs && this.action}
        method={this.method}
        name={this.name}
        onSubmit={(event) => this.onSubmit(event)}
        {...this.attributes}
      >
        {this.builderBlock && this.builderBlock.children
          ? this.builderBlock?.children?.map((block, index) => (
              <builder-block-component
                key={block.id}
                block={block}
                index={index}
              ></builder-block-component>
            ))
          : null}
        {this.submissionState === \\"error\\" ? (
          <builder-blocks
            dataPath=\\"errorMessage\\"
            blocks={this.errorMessage}
          ></builder-blocks>
        ) : null}
        {this.submissionState === \\"sending\\" ? (
          <builder-blocks
            dataPath=\\"sendingMessage\\"
            blocks={this.sendingMessage}
          ></builder-blocks>
        ) : null}
        {this.submissionState === \\"error\\" && this.responseData ? (
          <pre class=\\"builder-form-error-text pre\\">
            {JSON.stringify(this.responseData, null, 2)}
          </pre>
        ) : null}
        {this.submissionState === \\"success\\" ? (
          <builder-blocks
            dataPath=\\"successMessage\\"
            blocks={this.successMessage}
          ></builder-blocks>
        ) : null}
      </form>
    );
  }
}
"
`;

exports[`Stencil > jsx > Javascript Test > Image 1`] = `
"import { Component, h, Fragment, Prop, State } from \\"@stencil/core\\";

@Component({
  tag: \\"image\\",

  styles: \`
        .img {
          opacity: 1;
          transition: opacity 0.2s ease-in-out;
          object-fit: cover;
          object-position: center;
        }
\`,
})
export class Image {
  private pictureRef!: HTMLElement;
  @Prop() lazy: any;
  @Prop() altText: any;
  @Prop() _class: any;
  @Prop() image: any;
  @Prop() srcset: any;
  @Prop() sizes: any;
  @Prop() children: any;
  @State() scrollListener = null;
  @State() imageLoaded = false;
  @State() load = false;

  setLoaded() {
    this.imageLoaded = true;
  }
  useLazyLoading() {
    // TODO: Add more checks here, like testing for real web browsers
    return !!this.lazy && this.isBrowser();
  }
  isBrowser = function isBrowser() {
    return (
      typeof window !== \\"undefined\\" && window.navigator.product != \\"ReactNative\\"
    );
  };

  componentDidLoad() {
    if (this.useLazyLoading()) {
      // throttled scroll capture listener
      const listener = () => {
        if (this.pictureRef) {
          const rect = this.pictureRef.getBoundingClientRect();
          const buffer = window.innerHeight / 2;

          if (rect.top < window.innerHeight + buffer) {
            this.load = true;
            this.scrollListener = null;
            window.removeEventListener(\\"scroll\\", listener);
          }
        }
      };

      this.scrollListener = listener;
      window.addEventListener(\\"scroll\\", listener, {
        capture: true,
        passive: true,
      });
      listener();
    }
  }
  disconnectedCallback() {
    if (this.scrollListener) {
      window.removeEventListener(\\"scroll\\", this.scrollListener);
    }
  }

  render() {
    return (
      <div>
        <picture ref={(el) => (this.pictureRef = el)}>
          {!this.useLazyLoading() || this.load ? (
            <img
              class={
                \\"builder-image\\" +
                (this._class ? \\" \\" + this._class : \\"\\") +
                \\" img\\"
              }
              alt={this.altText}
              aria-role={this.altText ? \\"presentation\\" : undefined}
              src={this.image}
              onLoad={() => this.setLoaded()}
              srcset={this.srcset}
              sizes={this.sizes}
            />
          ) : null}
          <source srcset={this.srcset} />
        </picture>
        <slot></slot>
      </div>
    );
  }
}
"
`;

exports[`Stencil > jsx > Javascript Test > Image State 1`] = `
"import { Component, h, Fragment, State } from \\"@stencil/core\\";

@Component({
  tag: \\"img-state-component\\",
})
export class ImgStateComponent {
  @State() canShow = true;
  @State() images = [\\"http://example.com/qwik.png\\"];

  render() {
    return (
      <div>
        {this.images?.map((item, itemIndex) => (
          <Fragment>
            <img class=\\"custom-class\\" src={item} key={itemIndex} />
          </Fragment>
        ))}
      </div>
    );
  }
}
"
`;

exports[`Stencil > jsx > Javascript Test > Img 1`] = `
"import { Builder } from \\"@builder.io/sdk\\";

import { Component, h, Fragment, Prop } from \\"@stencil/core\\";

@Component({
  tag: \\"img-component\\",
})
export class ImgComponent {
  @Prop() backgroundSize: any;
  @Prop() backgroundPosition: any;
  @Prop() attributes: any;
  @Prop() imgSrc: any;
  @Prop() altText: any;

  render() {
    return (
      <img
        style={{
          objectFit: this.backgroundSize || \\"cover\\",
          objectPosition: this.backgroundPosition || \\"center\\",
        }}
        {...this.attributes}
        key={(Builder.isEditing && this.imgSrc) || \\"default-key\\"}
        alt={this.altText}
        src={this.imgSrc}
      />
    );
  }
}
"
`;

exports[`Stencil > jsx > Javascript Test > Input 1`] = `
"import { Builder } from \\"@builder.io/sdk\\";

import { Component, h, Fragment, Event, Prop } from \\"@stencil/core\\";

@Component({
  tag: \\"form-input-component\\",
})
export class FormInputComponent {
  @Prop() attributes: any;
  @Prop() defaultValue: any;
  @Prop() placeholder: any;
  @Prop() type: any;
  @Prop() name: any;
  @Prop() value: any;
  @Prop() required: any;
  @Event() onChange: any;

  render() {
    return (
      <input
        {...this.attributes}
        key={
          Builder.isEditing && this.defaultValue
            ? this.defaultValue
            : \\"default-key\\"
        }
        placeholder={this.placeholder}
        type={this.type}
        name={this.name}
        value={this.value}
        defaultValue={this.defaultValue}
        required={this.required}
        onInput={(event) => this.onChange?.(event.target.value)}
      />
    );
  }
}
"
`;

exports[`Stencil > jsx > Javascript Test > InputParent 1`] = `
"import { FormInputComponent } from \\"./input.raw\\";

import { Component, h, Fragment } from \\"@stencil/core\\";

@Component({
  tag: \\"stepper\\",
})
export class Stepper {
  handleChange(value) {
    console.log(value);
  }

  render() {
    return (
      <form-input-component
        name=\\"kingzez\\"
        type=\\"text\\"
        onChange={(value) => this.handleChange(value)}
      ></form-input-component>
    );
  }
}
"
`;

exports[`Stencil > jsx > Javascript Test > RawText 1`] = `
"import { Component, h, Fragment, Prop } from \\"@stencil/core\\";

@Component({
  tag: \\"raw-text\\",
})
export class RawText {
  @Prop() attributes: any;
  @Prop() text: any;

  render() {
    return (
      <span
        class={this.attributes?.class || this.attributes?.className}
        innerHTML={this.text || \\"\\"}
      ></span>
    );
  }
}
"
`;

exports[`Stencil > jsx > Javascript Test > Section 1`] = `
"import { Component, h, Fragment, Prop } from \\"@stencil/core\\";

@Component({
  tag: \\"section-component\\",
})
export class SectionComponent {
  @Prop() attributes: any;
  @Prop() maxWidth: any;
  @Prop() children: any;

  render() {
    return (
      <section
        {...this.attributes}
        style={
          this.maxWidth && typeof this.maxWidth === \\"number\\"
            ? {
                maxWidth: this.maxWidth,
              }
            : undefined
        }
      >
        <slot></slot>
      </section>
    );
  }
}
"
`;

exports[`Stencil > jsx > Javascript Test > Section 2`] = `
"import { Component, h, Fragment, Host, Prop, State } from \\"@stencil/core\\";

@Component({
  tag: \\"section-state-component\\",
})
export class SectionStateComponent {
  @Prop() attributes: any;
  @Prop() children: any;
  @State() max = 42;
  @State() items = [42];

  render() {
    return (
      <Host>
        {this.max
          ? this.items?.map((item) => (
              <section
                {...this.attributes}
                style={{
                  maxWidth: item + this.max,
                }}
              >
                <slot></slot>
              </section>
            ))
          : null}
      </Host>
    );
  }
}
"
`;

exports[`Stencil > jsx > Javascript Test > Select 1`] = `
"import { Builder } from \\"@builder.io/sdk\\";

import { Component, h, Fragment, Prop } from \\"@stencil/core\\";

@Component({
  tag: \\"select-component\\",
})
export class SelectComponent {
  @Prop() attributes: any;
  @Prop() value: any;
  @Prop() defaultValue: any;
  @Prop() name: any;
  @Prop() options: any;

  render() {
    return (
      <select
        {...this.attributes}
        value={this.value}
        key={
          Builder.isEditing && this.defaultValue
            ? this.defaultValue
            : \\"default-key\\"
        }
        defaultValue={this.defaultValue}
        name={this.name}
      >
        {this.options?.map((option, index) => (
          <option value={option.value} data-index={index}>
            {option.name || option.value}
          </option>
        ))}
      </select>
    );
  }
}
"
`;

exports[`Stencil > jsx > Javascript Test > SlotDefault 1`] = `
"import { Component, h, Fragment } from \\"@stencil/core\\";

@Component({
  tag: \\"slot-code\\",
})
export class SlotCode {
  render() {
    return (
      <div>
        <slot>
          <div class=\\"default-slot\\">Default content</div>
        </slot>
      </div>
    );
  }
}
"
`;

exports[`Stencil > jsx > Javascript Test > SlotHtml 1`] = `
"import { ContentSlotCode } from \\"./content-slot-jsx.raw\\";

import { Component, h, Fragment } from \\"@stencil/core\\";

@Component({
  tag: \\"slot-code\\",
})
export class SlotCode {
  render() {
    return (
      <div>
        <content-slot-code>
          <slot testing={<div>Hello</div>}></slot>
        </content-slot-code>
      </div>
    );
  }
}
"
`;

exports[`Stencil > jsx > Javascript Test > SlotJsx 1`] = `
"import { ContentSlotCode } from \\"./content-slot-jsx.raw\\";

import { Component, h, Fragment } from \\"@stencil/core\\";

@Component({
  tag: \\"slot-code\\",
})
export class SlotCode {
  render() {
    return (
      <div>
        <content-slot-code slotTesting={<div>Hello</div>}></content-slot-code>
      </div>
    );
  }
}
"
`;

exports[`Stencil > jsx > Javascript Test > SlotNamed 1`] = `
"import { Component, h, Fragment } from \\"@stencil/core\\";

@Component({
  tag: \\"slot-code\\",
})
export class SlotCode {
  render() {
    return (
      <div>
        <slot name=\\"myAwesomeSlot\\"></slot>
        <slot name=\\"top\\"></slot>
        <slot name=\\"left\\">Default left</slot>
        <slot>Default Child</slot>
      </div>
    );
  }
}
"
`;

exports[`Stencil > jsx > Javascript Test > Stamped.io 1`] = `
"import { kebabCase, snakeCase } from \\"lodash\\";

import { Component, h, Fragment, Prop, State } from \\"@stencil/core\\";

@Component({
  tag: \\"smile-reviews\\",

  styles: \`
        .input {
          display: block;
        }
        .textarea {
          display: block;
        }
        .button {
          display: block;
        }
        .review {
          margin: 10px;
          padding: 10px;
          background: white;
          display: flex;
          border-radius: 5px;
          box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
          -webkit-font-smoothing: antialiased;
        }
        .img {
          height: 30px;
          width: 30px;
          margin-right: 10px;
        }
\`,
})
export class SmileReviews {
  @Prop() apiKey: any;
  @Prop() productId: any;
  @State() reviews = [];
  @State() name = \\"test\\";
  @State() showReviewPrompt = false;

  kebabCaseValue() {
    return kebabCase(\\"testThat\\");
  }
  snakeCaseValue() {
    return snakeCase(\\"testThis\\");
  }

  componentDidLoad() {
    fetch(
      \`https://stamped.io/api/widget/reviews?storeUrl=builder-io.myshopify.com&apiKey=\${
        this.apiKey || \\"pubkey-8bbDq7W6w4sB3OWeM1HUy2s47702hM\\"
      }&productId=\${this.productId || \\"2410511106127\\"}\`
    )
      .then((res) => res.json())
      .then((data) => {
        this.reviews = data.data;
      });
  }

  render() {
    return (
      <div data-user={this.name}>
        <button onClick={() => (this.showReviewPrompt = true)}>
          Write a review
        </button>
        {this.showReviewPrompt || \\"asdf\\" ? (
          <Fragment>
            <input placeholder=\\"Email\\" />
            <input class=\\"input\\" placeholder=\\"Title\\" />
            <textarea
              class=\\"textarea\\"
              placeholder=\\"How was your experience?\\"
            ></textarea>
            <button
              class=\\"button\\"
              onClick={(event) => {
                event.preventDefault();
                this.showReviewPrompt = false;
              }}
            >
              Submit
            </button>
          </Fragment>
        ) : null}
        {this.reviews?.map((review, index) => (
          <div class=\\"review\\" key={review.id}>
            <img class=\\"img\\" src={review.avatar} />
            <div class={this.showReviewPrompt ? \\"bg-primary\\" : \\"bg-secondary\\"}>
              <div>
                N:
                {index}
              </div>
              <div>{review.author}</div>
              <div>{review.reviewMessage}</div>
            </div>
          </div>
        ))}
      </div>
    );
  }
}
"
`;

exports[`Stencil > jsx > Javascript Test > Submit 1`] = `
"import { Component, h, Fragment, Prop } from \\"@stencil/core\\";

@Component({
  tag: \\"submit-button\\",
})
export class SubmitButton {
  @Prop() attributes: any;
  @Prop() text: any;

  render() {
    return (
      <button type=\\"submit\\" {...this.attributes}>
        {this.text}
      </button>
    );
  }
}
"
`;

exports[`Stencil > jsx > Javascript Test > Text 1`] = `
"import { Builder } from \\"@builder.io/sdk\\";

import { Component, h, Fragment, Prop, State } from \\"@stencil/core\\";

@Component({
  tag: \\"text\\",
})
export class Text {
  @Prop() text: any;
  @Prop() content: any;
  @State() name = \\"Decadef20\\";

  render() {
    return (
      <div
        contentEditable={allowEditingText || undefined}
        data-name={{
          test: this.name || \\"any name\\",
        }}
        innerHTML={
          this.text ||
          this.content ||
          this.name ||
          '<p class=\\"text-lg\\">my name</p>'
        }
      ></div>
    );
  }
}
"
`;

exports[`Stencil > jsx > Javascript Test > Textarea 1`] = `
"import { Component, h, Fragment, Prop } from \\"@stencil/core\\";

@Component({
  tag: \\"textarea\\",
})
export class Textarea {
  @Prop() attributes: any;
  @Prop() placeholder: any;
  @Prop() name: any;
  @Prop() value: any;
  @Prop() defaultValue: any;

  render() {
    return (
      <textarea
        {...this.attributes}
        placeholder={this.placeholder}
        name={this.name}
        value={this.value}
        defaultValue={this.defaultValue}
      ></textarea>
    );
  }
}
"
`;

exports[`Stencil > jsx > Javascript Test > Video 1`] = `
"import { Component, h, Fragment, Prop } from \\"@stencil/core\\";

@Component({
  tag: \\"video\\",
})
export class Video {
  @Prop() attributes: any;
  @Prop() fit: any;
  @Prop() position: any;
  @Prop() video: any;
  @Prop() posterImage: any;
  @Prop() autoPlay: any;
  @Prop() muted: any;
  @Prop() controls: any;
  @Prop() loop: any;

  render() {
    return (
      <video
        preload=\\"none\\"
        {...this.attributes}
        style={{
          width: \\"100%\\",
          height: \\"100%\\",
          ...this.attributes?.style,
          objectFit: this.fit,
          objectPosition: this.position,
          // Hack to get object fit to work as expected and
          // not have the video overflow
          borderRadius: 1,
        }}
        key={this.video || \\"no-src\\"}
        poster={this.posterImage}
        autoplay={this.autoPlay}
        muted={this.muted}
        controls={this.controls}
        loop={this.loop}
      ></video>
    );
  }
}
"
`;

exports[`Stencil > jsx > Javascript Test > arrowFunctionInUseStore 1`] = `
"import { Component, h, Fragment, State } from \\"@stencil/core\\";

@Component({
  tag: \\"my-component\\",
})
export class MyComponent {
  @State() name = \\"steve\\";

  setName(value) {
    this.name = value;
  }
  updateNameWithArrowFn(value) {
    this.name = value;
  }

  render() {
    return (
      <div>
        Hello
        {this.name}
      </div>
    );
  }
}
"
`;

exports[`Stencil > jsx > Javascript Test > basicForNoTagReference 1`] = `
"import { Component, h, Fragment, Prop, State } from \\"@stencil/core\\";

@Component({
  tag: \\"my-basic-for-no-tag-ref-component\\",
})
export class MyBasicForNoTagRefComponent {
  @Prop() actions: any;
  @State() name = \\"VincentW\\";
  @State() TagName = \\"div\\";
  @State() tag = \\"span\\";

  get TagNameGetter() {
    return \\"span\\";
  }

  render() {
    return (
      <this.TagNameGetter>
        Hello
        <this.tag>{this.name}</this.tag>
        {this.actions?.map((action) => (
          <this.TagName>
            <action.icon></action.icon>
            <span>{action.text}</span>
          </this.TagName>
        ))}
      </this.TagNameGetter>
    );
  }
}
"
`;

exports[`Stencil > jsx > Javascript Test > basicForwardRef 1`] = `
"import { Component, h, Fragment, Prop, State } from \\"@stencil/core\\";

@Component({
  tag: \\"my-basic-forward-ref-component\\",

  styles: \`
        .input {
          color: red;
        }
\`,
})
export class MyBasicForwardRefComponent {
  @Prop() inputRef: any;
  @State() name = \\"PatrickJS\\";

  render() {
    return (
      <div>
        <input
          class=\\"input\\"
          ref={(el) => (this.inputRef = el)}
          value={this.name}
          onInput={(event) => (this.name = event.target.value)}
        />
      </div>
    );
  }
}
"
`;

exports[`Stencil > jsx > Javascript Test > basicForwardRefMetadata 1`] = `
"import { Component, h, Fragment, Prop, State } from \\"@stencil/core\\";

@Component({
  tag: \\"my-basic-forward-ref-component\\",

  styles: \`
        .input {
          color: red;
        }
\`,
})
export class MyBasicForwardRefComponent {
  @Prop() inputRef: any;
  @State() name = \\"PatrickJS\\";

  render() {
    return (
      <div>
        <input
          class=\\"input\\"
          ref={(el) => (this.inputRef = el)}
          value={this.name}
          onInput={(event) => (this.name = event.target.value)}
        />
      </div>
    );
  }
}
"
`;

exports[`Stencil > jsx > Javascript Test > basicOnUpdateReturn 1`] = `
"import { Component, h, Fragment, State } from \\"@stencil/core\\";

@Component({
  tag: \\"my-basic-on-update-return-component\\",
})
export class MyBasicOnUpdateReturnComponent {
  @State() name = \\"PatrickJS\\";

  componentDidUpdate() {
    const controller = new AbortController();
    const signal = controller.signal;
    fetch(\\"https://patrickjs.com/api/resource.json\\", {
      signal,
    })
      .then((response) => response.json())
      .then((data) => {
        this.name = data.name;
      });
    return () => {
      if (!signal.aborted) {
        controller.abort();
      }
    };
  }

  render() {
    return (
      <div>
        Hello!
        {this.name}
      </div>
    );
  }
}
"
`;

exports[`Stencil > jsx > Javascript Test > class + ClassName + css 1`] = `
"import { Component, h, Fragment } from \\"@stencil/core\\";

@Component({
  tag: \\"my-basic-component\\",

  styles: \`
        .div {
          padding: 10px;
        }
\`,
})
export class MyBasicComponent {
  render() {
    return (
      <div class=\\"test2 test div\\">
        Hello! I can run in React, Vue, Solid, or Liquid!
      </div>
    );
  }
}
"
`;

exports[`Stencil > jsx > Javascript Test > class + css 1`] = `
"import { Component, h, Fragment } from \\"@stencil/core\\";

@Component({
  tag: \\"my-basic-component\\",

  styles: \`
        .div {
          padding: 10px;
        }
\`,
})
export class MyBasicComponent {
  render() {
    return (
      <div class=\\"test div\\">
        Hello! I can run in React, Vue, Solid, or Liquid!
      </div>
    );
  }
}
"
`;

exports[`Stencil > jsx > Javascript Test > class and className in component 1`] = `
"import { MyComp } from \\"./my-component.lite\\";

import { Component, h, Fragment } from \\"@stencil/core\\";

@Component({
  tag: \\"my-basic-component\\",
})
export class MyBasicComponent {
  render() {
    return (
      <my-comp class=\\"test test\\">
        Hello! I can run in React, Vue, Solid, or Liquid!
      </my-comp>
    );
  }
}
"
`;

exports[`Stencil > jsx > Javascript Test > className + css 1`] = `
"import { Component, h, Fragment } from \\"@stencil/core\\";

@Component({
  tag: \\"my-basic-component\\",

  styles: \`
        .div {
          padding: 10px;
        }
\`,
})
export class MyBasicComponent {
  render() {
    return (
      <div class=\\"test div\\">
        Hello! I can run in React, Vue, Solid, or Liquid!
      </div>
    );
  }
}
"
`;

exports[`Stencil > jsx > Javascript Test > className 1`] = `
"import { Component, h, Fragment, State } from \\"@stencil/core\\";

@Component({
  tag: \\"class-name-code\\",
})
export class ClassNameCode {
  @State() bindings = \\"a binding\\";

  render() {
    return (
      <div>
        <div class=\\"no binding\\">Without Binding</div>
        <div class={this.bindings}>With binding</div>
      </div>
    );
  }
}
"
`;

exports[`Stencil > jsx > Javascript Test > classState 1`] = `
"import { Component, h, Fragment, State } from \\"@stencil/core\\";

@Component({
  tag: \\"my-basic-component\\",

  styles: \`
        .div {
          padding: 10px;
        }
\`,
})
export class MyBasicComponent {
  @State() classState = \\"testClassName\\";
  @State() styleState = {
    color: \\"red\\",
  };

  render() {
    return (
      <div class={this.classState + \\" div\\"} style={this.styleState}>
        Hello! I can run in React, Vue, Solid, or Liquid!
      </div>
    );
  }
}
"
`;

exports[`Stencil > jsx > Javascript Test > componentWithContext 1`] = `
"import Context1 from \\"@dummy/1\\";
import Context2 from \\"@dummy/2\\";

import { Component, h, Fragment, Prop } from \\"@stencil/core\\";

@Component({
  tag: \\"component-with-context\\",
})
export class ComponentWithContext {
  @Prop() content: any;

  render() {
    return (
      <Fragment>
        <Fragment>{foo.value}</Fragment>
      </Fragment>
    );
  }
}
"
`;

exports[`Stencil > jsx > Javascript Test > componentWithContextMultiRoot 1`] = `
"import Context1 from \\"@dummy/1\\";
import Context2 from \\"@dummy/2\\";

import { Component, h, Fragment, Prop } from \\"@stencil/core\\";

@Component({
  tag: \\"component-with-context\\",
})
export class ComponentWithContext {
  @Prop() content: any;

  render() {
    return (
      <Fragment>
        <Fragment>{foo.value}</Fragment>
        <div>other</div>
      </Fragment>
    );
  }
}
"
`;

exports[`Stencil > jsx > Javascript Test > contentState 1`] = `
"import BuilderContext from \\"@dummy/context.js\\";

import { Component, h, Fragment, Prop } from \\"@stencil/core\\";

@Component({
  tag: \\"render-content\\",
})
export class RenderContent {
  @Prop() content: any;
  @Prop() customComponents: any;

  render() {
    return <div>setting context</div>;
  }
}
"
`;

exports[`Stencil > jsx > Javascript Test > defaultProps 1`] = `
"import { Component, h, Fragment, Event, Prop } from \\"@stencil/core\\";

@Component({
  tag: \\"button\\",
})
export class Button {
  @Prop() link: any = \\"https://builder.io/\\";
  @Prop() attributes: any;
  @Prop() openLinkInNewTab: any = false;
  @Prop() text: any = \\"default text\\";
  @Event() onClick: any = () => {
    console.log(\\"hi\\");
  };
  @Prop() buttonText: any;

  render() {
    return (
      <div>
        {this.link ? (
          <a
            {...this.attributes}
            href={this.link}
            target={this.openLinkInNewTab ? \\"_blank\\" : undefined}
          >
            {this.text}
          </a>
        ) : null}
        {!this.link ? (
          <button
            type=\\"button\\"
            {...this.attributes}
            onClick={() => this.onClick.emit()}
          >
            {this.buttonText}
          </button>
        ) : null}
      </div>
    );
  }
}
"
`;

exports[`Stencil > jsx > Javascript Test > defaultPropsOutsideComponent 1`] = `
"import { Component, h, Fragment, Event, Prop } from \\"@stencil/core\\";

@Component({
  tag: \\"button\\",
})
export class Button {
  @Prop() link: any = \\"https://builder.io/\\";
  @Prop() attributes: any;
  @Prop() openLinkInNewTab: any = false;
  @Prop() text: any = \\"default text\\";
  @Event() onClick: any = () => {};

  render() {
    return (
      <div>
        {this.link ? (
          <a
            {...this.attributes}
            href={this.link}
            target={this.openLinkInNewTab ? \\"_blank\\" : undefined}
          >
            {this.text}
          </a>
        ) : null}
        {!this.link ? (
          <button
            type=\\"button\\"
            {...this.attributes}
            onClick={(event) => this.onClick.emit(event)}
          >
            {this.text}
          </button>
        ) : null}
      </div>
    );
  }
}
"
`;

exports[`Stencil > jsx > Javascript Test > defaultValsWithTypes 1`] = `
"const DEFAULT_VALUES = {
  name: \\"Sami\\",
};

import { Component, h, Fragment, Prop } from \\"@stencil/core\\";

@Component({
  tag: \\"component-with-types\\",
})
export class ComponentWithTypes {
  @Prop() name: any;

  render() {
    return (
      <div>
        {\\" \\"}
        Hello
        {this.name || DEFAULT_VALUES.name}
      </div>
    );
  }
}
"
`;

exports[`Stencil > jsx > Javascript Test > expressionState 1`] = `
"import { Component, h, Fragment, Prop, State } from \\"@stencil/core\\";

@Component({
  tag: \\"my-component\\",
})
export class MyComponent {
  @Prop() componentRef: any;
  @State() refToUse = !(this.componentRef instanceof Function)
    ? this.componentRef
    : null;

  render() {
    return <div>{this.refToUse}</div>;
  }
}
"
`;

exports[`Stencil > jsx > Javascript Test > getterState 1`] = `
"import { Component, h, Fragment, Prop } from \\"@stencil/core\\";

@Component({
  tag: \\"button\\",
})
export class Button {
  @Prop() foo: any;

  get foo2() {
    return this.foo + \\"foo\\";
  }
  get bar() {
    return \\"bar\\";
  }
  baz(i) {
    return i + this.foo2.length;
  }

  render() {
    return (
      <div>
        <p>{this.foo2}</p>
        <p>{this.bar}</p>
        <p>{this.baz(1)}</p>
      </div>
    );
  }
}
"
`;

exports[`Stencil > jsx > Javascript Test > import types 1`] = `
"import { RenderBlock } from \\"./builder-render-block.raw\\";

import { Component, h, Fragment, Prop } from \\"@stencil/core\\";

@Component({
  tag: \\"render-content\\",
})
export class RenderContent {
  @Prop() renderContentProps: any;

  getRenderContentProps(block, index) {
    return {
      block: block,
      index: index,
    };
  }

  render() {
    return (
      <render-block
        {...this.getRenderContentProps(this.renderContentProps.block, 0)}
      ></render-block>
    );
  }
}
"
`;

exports[`Stencil > jsx > Javascript Test > multipleOnUpdate 1`] = `
"import { Component, h, Fragment } from \\"@stencil/core\\";

@Component({
  tag: \\"multiple-on-update\\",
})
export class MultipleOnUpdate {
  componentDidUpdate() {
    console.log(\\"Runs on every update/rerender\\");
    console.log(\\"Runs on every update/rerender as well\\");
  }

  render() {
    return <div></div>;
  }
}
"
`;

exports[`Stencil > jsx > Javascript Test > multipleOnUpdateWithDeps 1`] = `
"import { Component, h, Fragment, State } from \\"@stencil/core\\";

@Component({
  tag: \\"multiple-on-update-with-deps\\",
})
export class MultipleOnUpdateWithDeps {
  @State() a = \\"a\\";
  @State() b = \\"b\\";
  @State() c = \\"c\\";
  @State() d = \\"d\\";

  componentDidUpdate() {
    console.log(\\"Runs when a or b changes\\", this.a, this.b);

    if (this.a === \\"a\\") {
      this.a = \\"b\\";
    }
    console.log(\\"Runs when c or d changes\\", this.c, this.d);

    if (this.a === \\"a\\") {
      this.a = \\"b\\";
    }
  }

  render() {
    return <div></div>;
  }
}
"
`;

exports[`Stencil > jsx > Javascript Test > multipleSpreads 1`] = `
"import { Component, h, Fragment, State } from \\"@stencil/core\\";

@Component({
  tag: \\"my-basic-component\\",
})
export class MyBasicComponent {
  @State() attrs = {
    hello: \\"world\\",
  };

  render() {
    return <input {...this.attrs} {...this} />;
  }
}
"
`;

exports[`Stencil > jsx > Javascript Test > nestedStyles 1`] = `
"import { Component, h, Fragment } from \\"@stencil/core\\";

@Component({
  tag: \\"nested-styles\\",

  styles: \`
        .div {
          display: flex;
          --bar: red;
          color: var(--bar);
        }
        @media (max-width: env(--mobile)) {
          .div {
            display: block;
          }
        }
        .div:hover {
          display: flex;
        }
        .div:active {
          display: inline;
        }
        .div .nested-selector {
          display: grid;
        }
        .div .nested-selector:hover {
          display: block;
        }
        .div.nested-selector:active {
          display: inline-block;
        }
\`,
})
export class NestedStyles {
  render() {
    return <div class=\\"div\\">Hello world</div>;
  }
}
"
`;

exports[`Stencil > jsx > Javascript Test > onEvent 1`] = `
"import { Component, h, Fragment } from \\"@stencil/core\\";

@Component({
  tag: \\"embed\\",
})
export class Embed {
  private elem!: HTMLElement;

  foo(event) {
    console.log(\\"test2\\");
  }

  componentDidLoad() {
    this.elem.dispatchEvent(new CustomEvent(\\"initEditingBldr\\"));
  }

  render() {
    return (
      <div class=\\"builder-embed\\" ref={(el) => (this.elem = el)}>
        <div>Test</div>
      </div>
    );
  }
}
"
`;

exports[`Stencil > jsx > Javascript Test > onInit & onMount 1`] = `
"import { Component, h, Fragment } from \\"@stencil/core\\";

@Component({
  tag: \\"on-init\\",
})
export class OnInit {
  componentDidLoad() {
    console.log(\\"onMount\\");
  }

  render() {
    return <div></div>;
  }
}
"
`;

exports[`Stencil > jsx > Javascript Test > onInit 1`] = `
"export const defaultValues = {
  name: \\"PatrickJS\\",
};

import { Component, h, Fragment, Prop, State } from \\"@stencil/core\\";

@Component({
  tag: \\"on-init\\",
})
export class OnInit {
  @Prop() name: any;
  @State() name = \\"\\";

  render() {
    return (
      <div>
        Default name defined by parent
        {this.name}
      </div>
    );
  }
}
"
`;

exports[`Stencil > jsx > Javascript Test > onMount 1`] = `
"import { Component, h, Fragment } from \\"@stencil/core\\";

@Component({
  tag: \\"comp\\",
})
export class Comp {
  componentDidLoad() {
    console.log(\\"Runs on mount\\");
  }
  disconnectedCallback() {
    console.log(\\"Runs on unMount\\");
  }

  render() {
    return <div></div>;
  }
}
"
`;

exports[`Stencil > jsx > Javascript Test > onMountMultiple 1`] = `
"import { Component, h, Fragment } from \\"@stencil/core\\";

@Component({
  tag: \\"comp\\",
})
export class Comp {
  componentDidLoad() {
    const onMountHook_0 = () => {
      console.log(\\"Runs on mount\\");
    };
    onMountHook_0();
    const onMountHook_1 = () => {
      console.log(\\"Another one runs on Mount\\");
    };
    onMountHook_1();
    const onMountHook_2 = () => {
      console.log(\\"SSR runs on Mount\\");
    };
    onMountHook_2();
  }

  render() {
    return <div></div>;
  }
}
"
`;

exports[`Stencil > jsx > Javascript Test > onUpdate 1`] = `
"import { Component, h, Fragment } from \\"@stencil/core\\";

@Component({
  tag: \\"on-update\\",
})
export class OnUpdate {
  componentDidUpdate() {
    console.log(\\"Runs on every update/rerender\\");
  }

  render() {
    return <div></div>;
  }
}
"
`;

exports[`Stencil > jsx > Javascript Test > onUpdateWithDeps 1`] = `
"import { Component, h, Fragment, Prop, State } from \\"@stencil/core\\";

@Component({
  tag: \\"on-update-with-deps\\",
})
export class OnUpdateWithDeps {
  @Prop() size: any;
  @State() a = \\"a\\";
  @State() b = \\"b\\";

  componentDidUpdate() {
    console.log(\\"Runs when a, b or size changes\\", this.a, this.b, this.size);
  }

  render() {
    return <div></div>;
  }
}
"
`;

exports[`Stencil > jsx > Javascript Test > preserveExportOrLocalStatement 1`] = `
"const b = 3;
const foo = () => {};
export const a = 3;
export const bar = () => {};
export function run(value) {}

import { Component, h, Fragment } from \\"@stencil/core\\";

@Component({
  tag: \\"my-basic-component\\",
})
export class MyBasicComponent {
  render() {
    return <div></div>;
  }
}
"
`;

exports[`Stencil > jsx > Javascript Test > preserveTyping 1`] = `
"import { Component, h, Fragment, Prop } from \\"@stencil/core\\";

@Component({
  tag: \\"my-basic-component\\",
})
export class MyBasicComponent {
  @Prop() name: any;

  render() {
    return (
      <div>
        Hello! I can run in React, Vue, Solid, or Liquid!
        {this.name}
      </div>
    );
  }
}
"
`;

exports[`Stencil > jsx > Javascript Test > propsDestructure 1`] = `
"import { Component, h, Fragment, Prop, State } from \\"@stencil/core\\";

@Component({
  tag: \\"my-basic-component\\",
})
export class MyBasicComponent {
  @Prop() children: any;
  @Prop() type: any;
  @State() name = \\"Decadef20\\";

  render() {
    return (
      <div>
        <slot></slot>
        {this.type}
        Hello! I can run in React, Vue, Solid, or Liquid!
      </div>
    );
  }
}
"
`;

exports[`Stencil > jsx > Javascript Test > propsInterface 1`] = `
"import { Component, h, Fragment, Prop } from \\"@stencil/core\\";

@Component({
  tag: \\"my-basic-component\\",
})
export class MyBasicComponent {
  @Prop() name: any;

  render() {
    return (
      <div>
        Hello! I can run in React, Vue, Solid, or Liquid!
        {this.name}
      </div>
    );
  }
}
"
`;

exports[`Stencil > jsx > Javascript Test > propsType 1`] = `
"import { Component, h, Fragment, Prop } from \\"@stencil/core\\";

@Component({
  tag: \\"my-basic-component\\",
})
export class MyBasicComponent {
  @Prop() name: any;

  render() {
    return (
      <div>
        Hello! I can run in React, Vue, Solid, or Liquid!
        {this.name}
      </div>
    );
  }
}
"
`;

exports[`Stencil > jsx > Javascript Test > referencingFunInsideHook 1`] = `
"import { Component, h, Fragment } from \\"@stencil/core\\";

@Component({
  tag: \\"on-update\\",
})
export class OnUpdate {
  foo = function foo(params) {};
  bar = function bar() {};
  zoo = function zoo() {
    const params = {
      cb: this.bar,
    };
  };

  componentDidUpdate() {
    this.foo({
      someOption: this.bar,
    });
  }

  render() {
    return <div></div>;
  }
}
"
`;

exports[`Stencil > jsx > Javascript Test > renderBlock 1`] = `
"import { TARGET } from \\"../../constants/target.js\\";
import { evaluate } from \\"../../functions/evaluate.js\\";
import { extractTextStyles } from \\"../../functions/extract-text-styles.js\\";
import { getBlockActions } from \\"../../functions/get-block-actions.js\\";
import { getBlockComponentOptions } from \\"../../functions/get-block-component-options.js\\";
import { getBlockProperties } from \\"../../functions/get-block-properties.js\\";
import { getBlockTag } from \\"../../functions/get-block-tag.js\\";
import { getProcessedBlock } from \\"../../functions/get-processed-block.js\\";
import { getReactNativeBlockStyles } from \\"../../functions/get-react-native-block-styles.js\\";
import { BlockStyles } from \\"./block-styles.lite\\";
import { isEmptyHtmlElement } from \\"./render-block.helpers.js\\";
import RenderComponentWithContext from \\"./render-component-with-context.js\\";
import RenderComponent from \\"./render-component\\";
import { RenderRepeatedBlock } from \\"./render-repeated-block.lite\\";

import { Component, h, Fragment, Host, Prop } from \\"@stencil/core\\";

@Component({
  tag: \\"render-block\\",
})
export class RenderBlock {
  @Prop() block: any;
  @Prop() context: any;

  get component() {
    const componentName = getProcessedBlock({
      block: this.block,
      state: this.context.state,
      context: this.context.context,
      shouldEvaluateBindings: false,
    }).component?.name;

    if (!componentName) {
      return null;
    }

    const ref = this.context.registeredComponents[componentName];

    if (!ref) {
      // TODO: Public doc page with more info about this message
      console.warn(\`
          Could not find a registered component named \\"\${componentName}\\".
          If you registered it, is the file that registered it imported by the file that needs to render it?\`);
      return undefined;
    } else {
      return ref;
    }
  }
  get tag() {
    return getBlockTag(this.useBlock);
  }
  get useBlock() {
    return this.repeatItemData
      ? this.block
      : getProcessedBlock({
          block: this.block,
          state: this.context.state,
          context: this.context.context,
          shouldEvaluateBindings: true,
        });
  }
  get actions() {
    return getBlockActions({
      block: this.useBlock,
      state: this.context.state,
      context: this.context.context,
    });
  }
  get attributes() {
    const blockProperties = getBlockProperties(this.useBlock);
    return {
      ...blockProperties,
      ...(TARGET === \\"reactNative\\"
        ? {
            style: getReactNativeBlockStyles({
              block: this.useBlock,
              context: this.context,
              blockStyles: blockProperties.style,
            }),
          }
        : {}),
    };
  }
  get shouldWrap() {
    return !this.component?.noWrap;
  }
  get renderComponentProps() {
    return {
      blockChildren: this.useChildren,
      componentRef: this.component?.component,
      componentOptions: {
        ...getBlockComponentOptions(this.useBlock),

        /**
         * These attributes are passed to the wrapper element when there is one. If \`noWrap\` is set to true, then
         * they are provided to the component itself directly.
         */
        ...(this.shouldWrap
          ? {}
          : {
              attributes: { ...this.attributes, ...this.actions },
            }),
        customBreakpoints: this.childrenContext?.content?.meta?.breakpoints,
      },
      context: this.childrenContext,
    };
  }
  get useChildren() {
    // TO-DO: When should \`canHaveChildren\` dictate rendering?
    // This is currently commented out because some Builder components (e.g. Box) do not have \`canHaveChildren: true\`,
    // but still receive and need to render children.
    // return state.componentInfo?.canHaveChildren ? state.useBlock.children : [];
    return this.useBlock.children ?? [];
  }
  get childrenWithoutParentComponent() {
    /**
     * When there is no \`componentRef\`, there might still be children that need to be rendered. In this case,
     * we render them outside of \`componentRef\`.
     * NOTE: We make sure not to render this if \`repeatItemData\` is non-null, because that means we are rendering an array of
     * blocks, and the children will be repeated within those blocks.
     */
    const shouldRenderChildrenOutsideRef =
      !this.component?.component && !this.repeatItemData;
    return shouldRenderChildrenOutsideRef ? this.useChildren : [];
  }
  get repeatItemData() {
    /**
     * we don't use \`state.useBlock\` here because the processing done within its logic includes evaluating the block's bindings,
     * which will not work if there is a repeat.
     */
    const { repeat, ...blockWithoutRepeat } = this.block;

    if (!repeat?.collection) {
      return undefined;
    }

    const itemsArray = evaluate({
      code: repeat.collection,
      state: this.context.state,
      context: this.context.context,
    });

    if (!Array.isArray(itemsArray)) {
      return undefined;
    }

    const collectionName = repeat.collection.split(\\".\\").pop();
    const itemNameToUse =
      repeat.itemName || (collectionName ? collectionName + \\"Item\\" : \\"item\\");
    const repeatArray = itemsArray.map((item, index) => ({
      context: {
        ...this.context,
        state: {
          ...this.context.state,
          $index: index,
          $item: item,
          [itemNameToUse]: item,
          [\`$\${itemNameToUse}Index\`]: index,
        },
      },
      block: blockWithoutRepeat,
    }));
    return repeatArray;
  }
  get inheritedTextStyles() {
    if (TARGET !== \\"reactNative\\") {
      return {};
    }

    const styles = getReactNativeBlockStyles({
      block: this.useBlock,
      context: this.context,
      blockStyles: this.attributes.style,
    });
    return extractTextStyles(styles);
  }
  get childrenContext() {
    return {
      apiKey: this.context.apiKey,
      state: this.context.state,
      content: this.context.content,
      context: this.context.context,
      registeredComponents: this.context.registeredComponents,
      inheritedStyles: this.inheritedTextStyles,
    };
  }
  get renderComponentTag() {
    if (TARGET === \\"reactNative\\") {
      return RenderComponentWithContext;
    } else if (TARGET === \\"vue3\\") {
      // vue3 expects a string for the component tag
      return \\"RenderComponent\\";
    } else {
      return RenderComponent;
    }
  }

  render() {
    return (
      <Host>
        {this.shouldWrap ? (
          <Fragment>
            {isEmptyHtmlElement(this.tag) ? (
              <this.tag {...this.attributes} {...this.actions}></this.tag>
            ) : null}
            {!isEmptyHtmlElement(this.tag) && this.repeatItemData
              ? this.repeatItemData?.map((data, index) => (
                  <render-repeated-block
                    key={index}
                    repeatContext={data.context}
                    block={data.block}
                  ></render-repeated-block>
                ))
              : null}
            {!isEmptyHtmlElement(this.tag) && !this.repeatItemData ? (
              <this.tag {...this.attributes} {...this.actions}>
                <this.renderComponentTag
                  {...this.renderComponentProps}
                ></this.renderComponentTag>
                {this.childrenWithoutParentComponent?.map((child) => (
                  <render-block
                    key={\\"render-block-\\" + child.id}
                    block={child}
                    context={this.childrenContext}
                  ></render-block>
                ))}
                {this.childrenWithoutParentComponent?.map((child) => (
                  <block-styles
                    key={\\"block-style-\\" + child.id}
                    block={child}
                    context={this.childrenContext}
                  ></block-styles>
                ))}
              </this.tag>
            ) : null}
          </Fragment>
        ) : (
          <this.renderComponentTag
            {...this.renderComponentProps}
          ></this.renderComponentTag>
        )}
      </Host>
    );
  }
}
"
`;

exports[`Stencil > jsx > Javascript Test > renderContentExample 1`] = `
"import BuilderContext from \\"@dummy/context.js\\";
import {
  dispatchNewContentToVisualEditor,
  sendComponentsToVisualEditor,
  trackClick,
} from \\"@dummy/injection-js\\";
import { RenderBlocks } from \\"@dummy/RenderBlocks.lite.tsx\\";

import { Component, h, Fragment, Prop } from \\"@stencil/core\\";

@Component({
  tag: \\"render-content\\",

  styles: \`
        .div {
          display: flex;
          flex-direction: columns;
        }
\`,
})
export class RenderContent {
  @Prop() customComponents: any;
  @Prop() content: any;

  componentDidLoad() {
    sendComponentsToVisualEditor(this.customComponents);
  }

  componentDidUpdate() {
    dispatchNewContentToVisualEditor(this.content);
  }

  render() {
    return (
      <div class=\\"div\\" onClick={() => trackClick(this.content.id)}>
        <render-blocks blocks={this.content.blocks}></render-blocks>
      </div>
    );
  }
}
"
`;

exports[`Stencil > jsx > Javascript Test > rootFragmentMultiNode 1`] = `
"import { Component, h, Fragment, Prop } from \\"@stencil/core\\";

@Component({
  tag: \\"button\\",
})
export class Button {
  @Prop() link: any;
  @Prop() attributes: any;
  @Prop() openLinkInNewTab: any;
  @Prop() text: any;

  render() {
    return (
      <Fragment>
        {this.link ? (
          <a
            {...this.attributes}
            href={this.link}
            target={this.openLinkInNewTab ? \\"_blank\\" : undefined}
          >
            {this.text}
          </a>
        ) : null}
        {!this.link ? (
          <button type=\\"button\\" {...this.attributes}>
            {this.text}
          </button>
        ) : null}
      </Fragment>
    );
  }
}
"
`;

exports[`Stencil > jsx > Javascript Test > self-referencing component 1`] = `
"import { Component, h, Fragment, Prop } from \\"@stencil/core\\";

@Component({
  tag: \\"my-component\\",
})
export class MyComponent {
  @Prop() name: any;

  render() {
    return (
      <div>
        {this.name}
        {this.name === \\"Batman\\" ? (
          <my-component name=\\"Bruce Wayne\\"></my-component>
        ) : null}
      </div>
    );
  }
}
"
`;

exports[`Stencil > jsx > Javascript Test > self-referencing component with children 1`] = `
"import { Component, h, Fragment, Prop } from \\"@stencil/core\\";

@Component({
  tag: \\"my-component\\",
})
export class MyComponent {
  @Prop() name: any;
  @Prop() children: any;

  render() {
    return (
      <div>
        {this.name}
        <slot></slot>
        {this.name === \\"Batman\\" ? (
          <my-component name=\\"Bruce\\">
            <div>Wayne</div>
          </my-component>
        ) : null}
      </div>
    );
  }
}
"
`;

exports[`Stencil > jsx > Javascript Test > signalsOnUpdate 1`] = `
"import { Component, h, Fragment, Prop } from \\"@stencil/core\\";

@Component({
  tag: \\"my-basic-component\\",

  styles: \`
        .div {
          padding: 10px;
        }
\`,
})
export class MyBasicComponent {
  @Prop() id: any;
  @Prop() foo: any;

  componentDidUpdate() {
    console.log(\\"props.id changed\\", this.id);
    console.log(\\"props.foo.value.bar.baz changed\\", this.foo.value.bar.baz);
  }

  render() {
    return (
      <div class=\\"test div\\">
        {this.id}
        {this.foo.value.bar.baz}
      </div>
    );
  }
}
"
`;

exports[`Stencil > jsx > Javascript Test > spreadAttrs 1`] = `
"import { Component, h, Fragment } from \\"@stencil/core\\";

@Component({
  tag: \\"my-basic-component\\",
})
export class MyBasicComponent {
  render() {
    return <input {...attrs} />;
  }
}
"
`;

exports[`Stencil > jsx > Javascript Test > spreadNestedProps 1`] = `
"import { Component, h, Fragment, Prop } from \\"@stencil/core\\";

@Component({
  tag: \\"my-basic-component\\",
})
export class MyBasicComponent {
  @Prop() nested: any;

  render() {
    return <input {...this.nested} />;
  }
}
"
`;

exports[`Stencil > jsx > Javascript Test > spreadProps 1`] = `
"import { Component, h, Fragment } from \\"@stencil/core\\";

@Component({
  tag: \\"my-basic-component\\",
})
export class MyBasicComponent {
  render() {
    return <input {...this} />;
  }
}
"
`;

exports[`Stencil > jsx > Javascript Test > string-literal-store 1`] = `
"import { Component, h, Fragment, State } from \\"@stencil/core\\";

@Component({
  tag: \\"string-literal-store\\",
})
export class StringLiteralStore {
  @State() foo = 123;

  render() {
    return <div>{this.foo}</div>;
  }
}
"
`;

exports[`Stencil > jsx > Javascript Test > styleClassAndCss 1`] = `
"import { Component, h, Fragment } from \\"@stencil/core\\";

@Component({
  tag: \\"my-component\\",

  styles: \`
        .div {
          display: flex;
          flex-direction: column;
          align-items: stretch;
        }
\`,
})
export class MyComponent {
  render() {
    return (
      <div
        class=\\"builder-column div\\"
        style={{
          width: \\"100%\\",
        }}
      ></div>
    );
  }
}
"
`;

exports[`Stencil > jsx > Javascript Test > stylePropClassAndCss 1`] = `
"import { Component, h, Fragment, Prop } from \\"@stencil/core\\";

@Component({
  tag: \\"style-prop-class-and-css\\",

  styles: \`
        .div {
          display: flex;
          flex-direction: column;
          align-items: stretch;
        }
\`,
})
export class StylePropClassAndCss {
  @Prop() attributes: any;

  render() {
    return (
      <div
        class={this.attributes.class + \\" div\\"}
        style={this.attributes.style}
      ></div>
    );
  }
}
"
`;

exports[`Stencil > jsx > Javascript Test > subComponent 1`] = `
"import { Foo } from \\"./foo-sub-component.lite\\";

import { Component, h, Fragment } from \\"@stencil/core\\";

@Component({
  tag: \\"sub-component\\",
})
export class SubComponent {
  render() {
    return <foo></foo>;
  }
}
"
`;

exports[`Stencil > jsx > Javascript Test > svgComponent 1`] = `
"import { Component, h, Fragment } from \\"@stencil/core\\";

@Component({
  tag: \\"svg-component\\",
})
export class SvgComponent {
  render() {
    return (
      <svg
        fill=\\"none\\"
        role=\\"img\\"
        viewBox={\\"0 0 \\" + 42 + \\" \\" + 42}
        width={42}
        height={42}
      >
        <defs>
          <filter id=\\"prefix__filter0_f\\" filterUnits=\\"userSpaceOnUse\\">
            <feFlood result=\\"BackgroundImageFix\\"></feFlood>
            <feBlend
              in=\\"SourceGraphic\\"
              in2=\\"BackgroundImageFix\\"
              result=\\"shape\\"
            ></feBlend>
            <feGaussianBlur
              result=\\"effect1_foregroundBlur\\"
              stdDeviation={7}
            ></feGaussianBlur>
          </filter>
        </defs>
      </svg>
    );
  }
}
"
`;

exports[`Stencil > jsx > Javascript Test > typeDependency 1`] = `
"import { Component, h, Fragment, Prop } from \\"@stencil/core\\";

@Component({
  tag: \\"type-dependency\\",
})
export class TypeDependency {
  @Prop() foo: any;

  render() {
    return <div>{this.foo}</div>;
  }
}
"
`;

exports[`Stencil > jsx > Javascript Test > typeExternalStore 1`] = `
"import { Component, h, Fragment, State } from \\"@stencil/core\\";

@Component({
  tag: \\"type-external-store\\",
})
export class TypeExternalStore {
  @State() _name = \\"test\\";

  render() {
    return (
      <div>
        Hello
        {this._name}!{\\" \\"}
      </div>
    );
  }
}
"
`;

exports[`Stencil > jsx > Javascript Test > typeGetterStore 1`] = `
"import { Component, h, Fragment, State } from \\"@stencil/core\\";

@Component({
  tag: \\"type-getter-store\\",
})
export class TypeGetterStore {
  @State() name = \\"test\\";

  getName() {
    if (this.name === \\"a\\") {
      return \\"b\\";
    }

    return this.name;
  }
  get test() {
    return \\"test\\";
  }

  render() {
    return (
      <div>
        Hello
        {this.name}!{\\" \\"}
      </div>
    );
  }
}
"
`;

exports[`Stencil > jsx > Javascript Test > use-style 1`] = `
"import { Component, h, Fragment } from \\"@stencil/core\\";

@Component({
  tag: \\"my-component\\",

  styles: \`
        button {
          background: blue;
          color: white;
          font-size: 12px;
          outline: 1px solid black;
        }
\`,
})
export class MyComponent {
  render() {
    return <button type=\\"button\\">Button</button>;
  }
}
"
`;

exports[`Stencil > jsx > Javascript Test > use-style-and-css 1`] = `
"import { Component, h, Fragment } from \\"@stencil/core\\";

@Component({
  tag: \\"my-component\\",

  styles: \`
        button {
          font-size: 12px;
          outline: 1px solid black;
        }

        .button {
          background: blue;
          color: white;
        }
\`,
})
export class MyComponent {
  render() {
    return (
      <button class=\\"button\\" type=\\"button\\">
        Button
      </button>
    );
  }
}
"
`;

exports[`Stencil > jsx > Javascript Test > use-style-outside-component 1`] = `
"import { Component, h, Fragment } from \\"@stencil/core\\";

@Component({
  tag: \\"my-component\\",

  styles: \`
        button {
          background: blue;
          color: white;
          font-size: 12px;
          outline: 1px solid black;
        }
\`,
})
export class MyComponent {
  render() {
    return <button type=\\"button\\">Button</button>;
  }
}
"
`;

exports[`Stencil > jsx > Javascript Test > useTarget 1`] = `
"import { Component, h, Fragment, State } from \\"@stencil/core\\";

@Component({
  tag: \\"use-target-component\\",
})
export class UseTargetComponent {
  @State() lastName = \\"bar\\";

  get name() {
    const prefix = \\"st\\";
    return prefix + \\"foo\\";
  }

  componentDidLoad() {}

  render() {
    return <div>{this.name}</div>;
  }
}
"
`;

exports[`Stencil > jsx > Javascript Test > webComponent 1`] = `
"import { register } from \\"swiper/element/bundle\\";

import { Component, h, Fragment } from \\"@stencil/core\\";

@Component({
  tag: \\"my-basic-web-component\\",
})
export class MyBasicWebComponent {
  render() {
    return (
      <swiper-container slides-per-view=\\"3\\" navigation=\\"true\\" pagination=\\"true\\">
        <swiper-slide>Slide 1</swiper-slide>
        <swiper-slide>Slide 2</swiper-slide>
        <swiper-slide>Slide 3</swiper-slide>
      </swiper-container>
    );
  }
}
"
`;

exports[`Stencil > jsx > Remove Internal mitosis package 1`] = `
"import { Component, h, Fragment, State } from \\"@stencil/core\\";

@Component({
  tag: \\"my-basic-component\\",
})
export class MyBasicComponent {
  @State() name = \\"PatrickJS\\";

  render() {
    return (
      <div>
        Hello
        {this.name}! I can run in React, Qwik, Vue, Solid, or Liquid!
      </div>
    );
  }
}
"
`;

exports[`Stencil > jsx > Typescript Test > AdvancedRef 1`] = `
"import { Component, h, Fragment, Prop, State } from \\"@stencil/core\\";

export interface Props {
  showInput: boolean;
}

@Component({
  tag: \\"my-basic-ref-component\\",

  styles: \`
        .input {
          color: red;
        }
\`,
})
export class MyBasicRefComponent {
  private inputRef!: HTMLInputElement;
  private inputNoArgRef!: HTMLLabelElement;
  @Prop() showInput: Props[\\"showInput\\"];
  @State() name = \\"PatrickJS\\";

  onBlur = function onBlur() {
    // Maintain focus
    this.inputRef.focus();
  };
  lowerCaseName = function lowerCaseName() {
    return this.name.toLowerCase();
  };

  componentDidUpdate() {
    console.log(\\"Received an update\\");
  }

  render() {
    return (
      <div>
        {this.showInput ? (
          <Fragment>
            <input
              class=\\"input\\"
              ref={(el) => (this.inputRef = el)}
              value={this.name}
              onBlur={(event) => this.onBlur()}
              onInput={(event) => (this.name = event.target.value)}
            />
            <label for=\\"cars\\" ref={(el) => (this.inputNoArgRef = el)}>
              Choose a car:
            </label>
            <select name=\\"cars\\" id=\\"cars\\">
              <option value=\\"supra\\">GR Supra</option>
              <option value=\\"86\\">GR 86</option>
            </select>
          </Fragment>
        ) : null}
        Hello
        {this.lowerCaseName()}! I can run in React, Qwik, Vue, Solid, or Web
        Component!
      </div>
    );
  }
}
"
`;

exports[`Stencil > jsx > Typescript Test > Basic 1`] = `
"export const DEFAULT_VALUES = {
  name: \\"Steve\\",
};

import { Component, h, Fragment, State } from \\"@stencil/core\\";

export interface MyBasicComponentProps {
  id: string;
}

@Component({
  tag: \\"my-basic-component\\",

  styles: \`
        .div {
          padding: 10px;
        }
\`,
})
export class MyBasicComponent {
  @State() name = \\"Steve\\";
  @State() age = 1;
  @State() sports = [\\"\\"];

  underscore_fn_name() {
    return \\"bar\\";
  }

  render() {
    return (
      <div class=\\"test div\\">
        <input
          value={DEFAULT_VALUES.name || this.name}
          onInput={(myEvent) => (this.name = myEvent.target.value)}
        />
        Hello! I can run in React, Vue, Solid, or Liquid! &gt;
      </div>
    );
  }
}
"
`;

exports[`Stencil > jsx > Typescript Test > Basic 2`] = `
"import { Component, h, Fragment, State } from \\"@stencil/core\\";

@Component({
  tag: \\"my-basic-for-show-component\\",
})
export class MyBasicForShowComponent {
  @State() name = \\"PatrickJS\\";
  @State() names = [\\"Steve\\", \\"PatrickJS\\"];

  render() {
    return (
      <div>
        {this.names?.map((person) =>
          person === this.name ? (
            <Fragment>
              <input
                value={this.name}
                onInput={(event) => {
                  this.name = event.target.value + \\" and \\" + person;
                }}
              />
              Hello
              {person}! I can run in Qwik, Web Component, React, Vue, Solid, or
              Liquid!
            </Fragment>
          ) : null
        )}
      </div>
    );
  }
}
"
`;

exports[`Stencil > jsx > Typescript Test > Basic Context 1`] = `
"import { Injector, MyService, createInjector } from \\"@dummy/injection-js\\";

import { Component, h, Fragment, State } from \\"@stencil/core\\";

@Component({
  tag: \\"my-basic-component\\",
})
export class MyBasicComponent {
  @State() name = \\"PatrickJS\\";

  onChange = function onChange() {
    const change = myService.method(\\"change\\");
    console.log(change);
  };

  componentDidLoad() {
    const bye = myService.method(\\"hi\\");
    console.log(bye);
  }

  render() {
    return (
      <div>
        {myService.method(\\"hello\\") + this.name}
        Hello! I can run in React, Vue, Solid, or Liquid!
        <input onInput={() => this.onChange} />
      </div>
    );
  }
}
"
`;

exports[`Stencil > jsx > Typescript Test > Basic OnMount Update 1`] = `
"import { Component, h, Fragment, Prop, State } from \\"@stencil/core\\";

export interface Props {
  hi: string;
  bye: string;
}

@Component({
  tag: \\"my-basic-on-mount-update-component\\",
})
export class MyBasicOnMountUpdateComponent {
  @Prop() bye: Props[\\"bye\\"];
  @Prop() hi: Props[\\"hi\\"];
  @State() name = \\"PatrickJS\\";
  @State() names = [\\"Steve\\", \\"PatrickJS\\"];

  componentDidLoad() {
    this.name = \\"PatrickJS onMount\\" + this.bye;
  }

  render() {
    return (
      <div>
        Hello
        {this.name}
      </div>
    );
  }
}
"
`;

exports[`Stencil > jsx > Typescript Test > Basic Outputs 1`] = `
"import { Component, h, Fragment, Event, Prop, State } from \\"@stencil/core\\";

@Component({
  tag: \\"my-basic-outputs-component\\",
})
export class MyBasicOutputsComponent {
  @Event() onMessage: any;
  @Event() onEvent: any;
  @Prop() message: any;
  @State() name = \\"PatrickJS\\";

  componentDidLoad() {
    this.onMessage.emit(this.name);
    this.onEvent.emit(this.message);
  }

  render() {
    return <div></div>;
  }
}
"
`;

exports[`Stencil > jsx > Typescript Test > Basic Outputs Meta 1`] = `
"import { Component, h, Fragment, Event, Prop, State } from \\"@stencil/core\\";

@Component({
  tag: \\"my-basic-outputs-component\\",
})
export class MyBasicOutputsComponent {
  @Event() onMessage: any;
  @Event() onEvent: any;
  @Prop() message: any;
  @State() name = \\"PatrickJS\\";

  componentDidLoad() {
    this.onMessage.emit(this.name);
    this.onEvent.emit(this.message);
  }

  render() {
    return <div></div>;
  }
}
"
`;

exports[`Stencil > jsx > Typescript Test > BasicAttribute 1`] = `
"import { Component, h, Fragment } from \\"@stencil/core\\";

@Component({
  tag: \\"my-component\\",
})
export class MyComponent {
  render() {
    return <input autocapitalize=\\"on\\" autocomplete=\\"on\\" spellcheck={true} />;
  }
}
"
`;

exports[`Stencil > jsx > Typescript Test > BasicBooleanAttribute 1`] = `
"import { MyBooleanAttributeComponent } from \\"./basic-boolean-attribute-component.raw\\";

import { Component, h, Fragment, Prop } from \\"@stencil/core\\";

type Props = {
  children: any;
  type: string;
};

@Component({
  tag: \\"my-boolean-attribute\\",
})
export class MyBooleanAttribute {
  @Prop() children: Props[\\"children\\"];
  @Prop() type: Props[\\"type\\"];

  render() {
    return (
      <div>
        {this.children ? (
          <Fragment>
            <slot></slot>
            {this.type}
          </Fragment>
        ) : null}
        <my-boolean-attribute-component
          toggle={true}
        ></my-boolean-attribute-component>
        <my-boolean-attribute-component
          toggle={true}
        ></my-boolean-attribute-component>
        <my-boolean-attribute-component
          list={null}
        ></my-boolean-attribute-component>
      </div>
    );
  }
}
"
`;

exports[`Stencil > jsx > Typescript Test > BasicChildComponent 1`] = `
"import { MyBasicOnMountUpdateComponent } from \\"./basic-onMount-update.raw\\";
import { MyBasicComponent } from \\"./basic.raw\\";

import { Component, h, Fragment, State } from \\"@stencil/core\\";

@Component({
  tag: \\"my-basic-child-component\\",
})
export class MyBasicChildComponent {
  @State() name = \\"Steve\\";
  @State() dev = \\"PatrickJS\\";

  render() {
    return (
      <div>
        <my-basic-component id={this.dev}></my-basic-component>
        <div>
          <my-basic-on-mount-update-component
            hi={this.name}
            bye={this.dev}
          ></my-basic-on-mount-update-component>
        </div>
      </div>
    );
  }
}
"
`;

exports[`Stencil > jsx > Typescript Test > BasicFor 1`] = `
"import { Component, h, Fragment, State } from \\"@stencil/core\\";

@Component({
  tag: \\"my-basic-for-component\\",
})
export class MyBasicForComponent {
  @State() name = \\"PatrickJS\\";
  @State() names = [\\"Steve\\", \\"PatrickJS\\"];

  componentDidLoad() {
    console.log(\\"onMount code\\");
  }

  render() {
    return (
      <div>
        {this.names?.map((person) => (
          <Fragment>
            <input
              value={this.name}
              onInput={(event) => {
                this.name = event.target.value + \\" and \\" + person;
              }}
            />
            Hello
            {person}! I can run in Qwik, Web Component, React, Vue, Solid, or
            Liquid!
          </Fragment>
        ))}
      </div>
    );
  }
}
"
`;

exports[`Stencil > jsx > Typescript Test > BasicRef 1`] = `
"import { Component, h, Fragment, Prop, State } from \\"@stencil/core\\";

export interface Props {
  showInput: boolean;
}

@Component({
  tag: \\"my-basic-ref-component\\",

  styles: \`
        .input {
          color: red;
        }
\`,
})
export class MyBasicRefComponent {
  private inputRef!: HTMLInputElement;
  private inputNoArgRef!: HTMLLabelElement;
  @Prop() showInput: Props[\\"showInput\\"];
  @State() name = \\"PatrickJS\\";

  onBlur = function onBlur() {
    // Maintain focus
    this.inputRef.focus();
  };
  lowerCaseName = function lowerCaseName() {
    return this.name.toLowerCase();
  };

  render() {
    return (
      <div>
        {this.showInput ? (
          <Fragment>
            <input
              class=\\"input\\"
              ref={(el) => (this.inputRef = el)}
              value={this.name}
              onBlur={(event) => this.onBlur()}
              onInput={(event) => (this.name = event.target.value)}
            />
            <label for=\\"cars\\" ref={(el) => (this.inputNoArgRef = el)}>
              Choose a car:
            </label>
            <select name=\\"cars\\" id=\\"cars\\">
              <option value=\\"supra\\">GR Supra</option>
              <option value=\\"86\\">GR 86</option>
            </select>
          </Fragment>
        ) : null}
        Hello
        {this.lowerCaseName()}! I can run in React, Qwik, Vue, Solid, or Web
        Component!
      </div>
    );
  }
}
"
`;

exports[`Stencil > jsx > Typescript Test > BasicRefAssignment 1`] = `
"import { Component, h, Fragment } from \\"@stencil/core\\";

export interface Props {
  showInput: boolean;
}

@Component({
  tag: \\"my-basic-ref-assignment-component\\",
})
export class MyBasicRefAssignmentComponent {
  private holdValueRef!: HTMLElement;

  handlerClick = function handlerClick(event: Event) {
    event.preventDefault();
    console.log(\\"current value\\", this.holdValueRef);
    this.holdValueRef = this.holdValueRef + \\"JS\\";
  };

  render() {
    return (
      <div>
        <button onClick={(evt) => this.handlerClick(evt)}>Click</button>
      </div>
    );
  }
}
"
`;

exports[`Stencil > jsx > Typescript Test > BasicRefPrevious 1`] = `
"export function usePrevious<T>(value: T) {
  // The ref object is a generic container whose current property is mutable ...
  // ... and can hold any value, similar to an instance property on a class
  let ref = useRef<T>(null); // Store current value in ref

  onUpdate(() => {
    ref = value;
  }, [value]); // Only re-run if value changes
  // Return previous value (happens before update in useEffect above)

  return ref;
}

import { Component, h, Fragment, State } from \\"@stencil/core\\";

export interface Props {
  showInput: boolean;
}

@Component({
  tag: \\"my-previous-component\\",
})
export class MyPreviousComponent {
  private prevCount!: HTMLElement;

  @State() count = 0;

  componentDidUpdate() {
    this.prevCount = this.count;
  }

  render() {
    return (
      <div>
        <h1>
          Now:
          {this.count}, before:
          {this.prevCount}
        </h1>
        <button onClick={() => (this.count += 1)}>Increment</button>
      </div>
    );
  }
}
"
`;

exports[`Stencil > jsx > Typescript Test > Button 1`] = `
"import { Component, h, Fragment, Prop } from \\"@stencil/core\\";

export interface ButtonProps {
  attributes?: any;
  text?: string;
  link?: string;
  openLinkInNewTab?: boolean;
}

@Component({
  tag: \\"button\\",
})
export class Button {
  @Prop() link: ButtonProps[\\"link\\"];
  @Prop() attributes: ButtonProps[\\"attributes\\"];
  @Prop() openLinkInNewTab: ButtonProps[\\"openLinkInNewTab\\"];
  @Prop() text: ButtonProps[\\"text\\"];

  render() {
    return (
      <div>
        {this.link ? (
          <a
            {...this.attributes}
            href={this.link}
            target={this.openLinkInNewTab ? \\"_blank\\" : undefined}
          >
            {this.text}
          </a>
        ) : null}
        {!this.link ? (
          <button type=\\"button\\" {...this.attributes}>
            {this.text}
          </button>
        ) : null}
      </div>
    );
  }
}
"
`;

exports[`Stencil > jsx > Typescript Test > Columns 1`] = `
"import { Component, h, Fragment, Prop } from \\"@stencil/core\\";

type Column = {
  content: any; // TODO: Implement this when support for dynamic CSS lands

  width?: number;
};
export interface ColumnProps {
  columns?: Column[]; // TODO: Implement this when support for dynamic CSS lands

  space?: number; // TODO: Implement this when support for dynamic CSS lands

  stackColumnsAt?: \\"tablet\\" | \\"mobile\\" | \\"never\\"; // TODO: Implement this when support for dynamic CSS lands

  reverseColumnsWhenStacked?: boolean;
}

@Component({
  tag: \\"column\\",

  styles: \`
        .div {
          display: flex;
          flex-direction: column;
          align-items: stretch;
          line-height: normal;
        }
        @media (max-width: 999px) {
          .div {
            flex-direction: row;
          }
        }
        @media (max-width: 639px) {
          .div {
            flex-direction: row-reverse;
          }
        }
        .div-2 {
          flex-grow: 1;
        }
\`,
})
export class Column {
  @Prop() columns: ColumnProps[\\"columns\\"];
  @Prop() space: ColumnProps[\\"space\\"];

  getColumns() {
    return this.columns || [];
  }
  getGutterSize() {
    return typeof this.space === \\"number\\" ? this.space || 0 : 20;
  }
  getWidth(index: number) {
    const columns = this.getColumns();
    return (columns[index] && columns[index].width) || 100 / columns.length;
  }
  getColumnCssWidth(index: number) {
    const columns = this.getColumns();
    const gutterSize = this.getGutterSize();
    const subtractWidth = (gutterSize * (columns.length - 1)) / columns.length;
    return \`calc(\${this.getWidth(index)}% - \${subtractWidth}px)\`;
  }

  render() {
    return (
      <div class=\\"builder-columns div\\">
        {this.columns?.map((column, index) => (
          <div class=\\"builder-column div-2\\">
            {column.content}
            {index}
          </div>
        ))}
      </div>
    );
  }
}
"
`;

exports[`Stencil > jsx > Typescript Test > ContentSlotHtml 1`] = `
"import type { JSX } from \\"../../../../jsx-runtime\\";

import { Component, h, Fragment, Prop } from \\"@stencil/core\\";

type Props = {
  [key: string]: string | JSX.Element;
  slotTesting: JSX.Element;
};

@Component({
  tag: \\"content-slot-code\\",
})
export class ContentSlotCode {
  @Prop() slotTesting: Props[\\"slotTesting\\"];

  render() {
    return (
      <div>
        <slot name={this.slotTesting}></slot>
        <div>
          <hr />
        </div>
        <div>
          <slot></slot>
        </div>
      </div>
    );
  }
}
"
`;

exports[`Stencil > jsx > Typescript Test > ContentSlotJSX 1`] = `
"import type { JSX } from \\"../../../../jsx-runtime\\";

import { Component, h, Fragment, Host, Prop, State } from \\"@stencil/core\\";

type Props = {
  [key: string]: string | JSX.Element;
};

@Component({
  tag: \\"content-slot-jsx-code\\",
})
export class ContentSlotJsxCode {
  @Prop() slotContent: Props[\\"slotContent\\"] = undefined;
  @Prop() children: Props[\\"children\\"];
  @Prop() slotReference: Props[\\"slotReference\\"] = undefined;
  @Prop() attributes: Props[\\"attributes\\"];
  @Prop() content: Props[\\"content\\"] = \\"\\";
  @State() name = \\"king\\";
  @State() showContent = false;

  get cls() {
    return this.slotContent && this.children ? \`\${this.name}-content\` : \\"\\";
  }
  show() {
    this.slotContent ? 1 : \\"\\";
  }

  render() {
    return (
      <Host>
        {this.slotReference ? (
          <div
            class={this.cls}
            name={this.slotContent ? \\"name1\\" : \\"name2\\"}
            title={this.slotContent ? \\"title1\\" : \\"title2\\"}
            {...this.attributes}
            onClick={() => this.show()}
          >
            {this.showContent && this.slotContent ? (
              <slot name=\\"content\\">{this.content}</slot>
            ) : null}
            <div>
              <hr />
            </div>
            <div>
              <slot></slot>
            </div>
          </div>
        ) : null}
      </Host>
    );
  }
}
"
`;

exports[`Stencil > jsx > Typescript Test > CustomCode 1`] = `
"import { Component, h, Fragment, Prop, State } from \\"@stencil/core\\";

export interface CustomCodeProps {
  code: string;
  replaceNodes?: boolean;
}

@Component({
  tag: \\"custom-code\\",
})
export class CustomCode {
  private elem!: HTMLDivElement;
  @Prop() replaceNodes: CustomCodeProps[\\"replaceNodes\\"];
  @Prop() code: CustomCodeProps[\\"code\\"];
  @State() scriptsInserted = [];
  @State() scriptsRun = [];

  findAndRunScripts() {
    // TODO: Move this function to standalone one in '@builder.io/utils'
    if (this.elem && typeof window !== \\"undefined\\") {
      /** @type {HTMLScriptElement[]} */
      const scripts = this.elem.getElementsByTagName(\\"script\\");

      for (let i = 0; i < scripts.length; i++) {
        const script = scripts[i];

        if (script.src) {
          if (this.scriptsInserted.includes(script.src)) {
            continue;
          }

          this.scriptsInserted.push(script.src);
          const newScript = document.createElement(\\"script\\");
          newScript.async = true;
          newScript.src = script.src;
          document.head.appendChild(newScript);
        } else if (
          !script.type ||
          [
            \\"text/javascript\\",
            \\"application/javascript\\",
            \\"application/ecmascript\\",
          ].includes(script.type)
        ) {
          if (this.scriptsRun.includes(script.innerText)) {
            continue;
          }

          try {
            this.scriptsRun.push(script.innerText);
            new Function(script.innerText)();
          } catch (error) {
            console.warn(\\"\`CustomCode\`: Error running script:\\", error);
          }
        }
      }
    }
  }

  componentDidLoad() {
    this.findAndRunScripts();
  }

  render() {
    return (
      <div
        class={
          \\"builder-custom-code\\" + (this.replaceNodes ? \\" replace-nodes\\" : \\"\\")
        }
        ref={(el) => (this.elem = el)}
        innerHTML={this.code}
      ></div>
    );
  }
}
"
`;

exports[`Stencil > jsx > Typescript Test > Embed 1`] = `
"import { Component, h, Fragment, Prop, State } from \\"@stencil/core\\";

export interface CustomCodeProps {
  code: string;
  replaceNodes?: boolean;
}

@Component({
  tag: \\"custom-code\\",
})
export class CustomCode {
  private elem!: HTMLDivElement;
  @Prop() replaceNodes: CustomCodeProps[\\"replaceNodes\\"];
  @Prop() code: CustomCodeProps[\\"code\\"];
  @State() scriptsInserted = [];
  @State() scriptsRun = [];

  findAndRunScripts() {
    // TODO: Move this function to standalone one in '@builder.io/utils'
    if (this.elem && typeof window !== \\"undefined\\") {
      /** @type {HTMLScriptElement[]} */
      const scripts = this.elem.getElementsByTagName(\\"script\\");

      for (let i = 0; i < scripts.length; i++) {
        const script = scripts[i];

        if (script.src) {
          if (this.scriptsInserted.includes(script.src)) {
            continue;
          }

          this.scriptsInserted.push(script.src);
          const newScript = document.createElement(\\"script\\");
          newScript.async = true;
          newScript.src = script.src;
          document.head.appendChild(newScript);
        } else if (
          !script.type ||
          [
            \\"text/javascript\\",
            \\"application/javascript\\",
            \\"application/ecmascript\\",
          ].includes(script.type)
        ) {
          if (this.scriptsRun.includes(script.innerText)) {
            continue;
          }

          try {
            this.scriptsRun.push(script.innerText);
            new Function(script.innerText)();
          } catch (error) {
            console.warn(\\"\`CustomCode\`: Error running script:\\", error);
          }
        }
      }
    }
  }

  componentDidLoad() {
    this.findAndRunScripts();
  }

  render() {
    return (
      <div
        class={
          \\"builder-custom-code\\" + (this.replaceNodes ? \\" replace-nodes\\" : \\"\\")
        }
        ref={(el) => (this.elem = el)}
        innerHTML={this.code}
      ></div>
    );
  }
}
"
`;

exports[`Stencil > jsx > Typescript Test > Form 1`] = `
"import { Builder, BuilderElement, builder } from \\"@builder.io/sdk\\";
import {
  BuilderBlock as BuilderBlockComponent,
  BuilderBlocks,
  get,
  set,
} from \\"@fake\\";

import { Component, h, Fragment, Prop, State } from \\"@stencil/core\\";

export interface FormProps {
  attributes?: any;
  name?: string;
  action?: string;
  validate?: boolean;
  method?: string;
  builderBlock?: BuilderElement;
  sendSubmissionsTo?: string;
  sendSubmissionsToEmail?: string;
  sendWithJs?: boolean;
  contentType?: string;
  customHeaders?: {
    [key: string]: string;
  };
  successUrl?: string;
  previewState?: FormState;
  successMessage?: BuilderElement[];
  errorMessage?: BuilderElement[];
  sendingMessage?: BuilderElement[];
  resetFormOnSubmit?: boolean;
  errorMessagePath?: string;
}
export type FormState = \\"unsubmitted\\" | \\"sending\\" | \\"success\\" | \\"error\\";

@Component({
  tag: \\"form-component\\",

  styles: \`
        .pre {
          padding: 10px;
          color: red;
          text-align: center;
        }
\`,
})
export class FormComponent {
  private formRef!: HTMLFormElement;
  @Prop() previewState: FormProps[\\"previewState\\"];
  @Prop() sendWithJs: FormProps[\\"sendWithJs\\"];
  @Prop() sendSubmissionsTo: FormProps[\\"sendSubmissionsTo\\"];
  @Prop() action: FormProps[\\"action\\"];
  @Prop() customHeaders: FormProps[\\"customHeaders\\"];
  @Prop() contentType: FormProps[\\"contentType\\"];
  @Prop() sendSubmissionsToEmail: FormProps[\\"sendSubmissionsToEmail\\"];
  @Prop() name: FormProps[\\"name\\"];
  @Prop() method: FormProps[\\"method\\"];
  @Prop() errorMessagePath: FormProps[\\"errorMessagePath\\"];
  @Prop() resetFormOnSubmit: FormProps[\\"resetFormOnSubmit\\"];
  @Prop() successUrl: FormProps[\\"successUrl\\"];
  @Prop() validate: FormProps[\\"validate\\"];
  @Prop() attributes: FormProps[\\"attributes\\"];
  @Prop() builderBlock: FormProps[\\"builderBlock\\"];
  @Prop() errorMessage: FormProps[\\"errorMessage\\"];
  @Prop() sendingMessage: FormProps[\\"sendingMessage\\"];
  @Prop() successMessage: FormProps[\\"successMessage\\"];
  @State() formState = \\"unsubmitted\\";
  @State() responseData = null;
  @State() formErrorMessage = \\"\\";

  get submissionState() {
    return (Builder.isEditing && this.previewState) || this.formState;
  }
  onSubmit(
    event: Event & {
      currentTarget: HTMLFormElement;
    }
  ) {
    const sendWithJs = this.sendWithJs || this.sendSubmissionsTo === \\"email\\";

    if (this.sendSubmissionsTo === \\"zapier\\") {
      event.preventDefault();
    } else if (sendWithJs) {
      if (!(this.action || this.sendSubmissionsTo === \\"email\\")) {
        event.preventDefault();
        return;
      }

      event.preventDefault();
      const el = event.currentTarget;
      const headers = this.customHeaders || {};
      let body: any;
      const formData = new FormData(el); // TODO: maybe support null

      const formPairs: {
        key: string;
        value: File | boolean | number | string | FileList;
      }[] = Array.from(
        event.currentTarget.querySelectorAll(\\"input,select,textarea\\")
      )
        .filter((el) => !!(el as HTMLInputElement).name)
        .map((el) => {
          let value: any;
          const key = (el as HTMLImageElement).name;

          if (el instanceof HTMLInputElement) {
            if (el.type === \\"radio\\") {
              if (el.checked) {
                value = el.name;
                return {
                  key,
                  value,
                };
              }
            } else if (el.type === \\"checkbox\\") {
              value = el.checked;
            } else if (el.type === \\"number\\" || el.type === \\"range\\") {
              const num = el.valueAsNumber;

              if (!isNaN(num)) {
                value = num;
              }
            } else if (el.type === \\"file\\") {
              // TODO: one vs multiple files
              value = el.files;
            } else {
              value = el.value;
            }
          } else {
            value = (el as HTMLInputElement).value;
          }

          return {
            key,
            value,
          };
        });
      let contentType = this.contentType;

      if (this.sendSubmissionsTo === \\"email\\") {
        contentType = \\"multipart/form-data\\";
      }

      Array.from(formPairs).forEach(({ value }) => {
        if (
          value instanceof File ||
          (Array.isArray(value) && value[0] instanceof File) ||
          value instanceof FileList
        ) {
          contentType = \\"multipart/form-data\\";
        }
      }); // TODO: send as urlEncoded or multipart by default
      // because of ease of use and reliability in browser API
      // for encoding the form?

      if (contentType !== \\"application/json\\") {
        body = formData;
      } else {
        // Json
        const json = {};
        Array.from(formPairs).forEach(({ value, key }) => {
          set(json, key, value);
        });
        body = JSON.stringify(json);
      }

      if (contentType && contentType !== \\"multipart/form-data\\") {
        if (
          /* Zapier doesn't allow content-type header to be sent from browsers */
          !(sendWithJs && this.action?.includes(\\"zapier.com\\"))
        ) {
          headers[\\"content-type\\"] = contentType;
        }
      }

      const presubmitEvent = new CustomEvent(\\"presubmit\\", {
        detail: {
          body,
        },
      });

      if (this.formRef) {
        this.formRef.dispatchEvent(presubmitEvent);

        if (presubmitEvent.defaultPrevented) {
          return;
        }
      }

      this.formState = \\"sending\\";
      const formUrl = \`\${
        builder.env === \\"dev\\" ? \\"http://localhost:5000\\" : \\"https://builder.io\\"
      }/api/v1/form-submit?apiKey=\${builder.apiKey}&to=\${btoa(
        this.sendSubmissionsToEmail || \\"\\"
      )}&name=\${encodeURIComponent(this.name || \\"\\")}\`;
      fetch(
        this.sendSubmissionsTo === \\"email\\" ? formUrl : this.action!,
        /* TODO: throw error if no action URL */
        {
          body,
          headers,
          method: this.method || \\"post\\",
        }
      ).then(
        async (res) => {
          let body;
          const contentType = res.headers.get(\\"content-type\\");

          if (contentType && contentType.indexOf(\\"application/json\\") !== -1) {
            body = await res.json();
          } else {
            body = await res.text();
          }

          if (!res.ok && this.errorMessagePath) {
            /* TODO: allow supplying an error formatter function */
            let message = get(body, this.errorMessagePath);

            if (message) {
              if (typeof message !== \\"string\\") {
                /* TODO: ideally convert json to yaml so it woul dbe like
            error: - email has been taken */
                message = JSON.stringify(message);
              }

              this.formErrorMessage = message;
            }
          }

          this.responseData = body;
          this.formState = res.ok ? \\"success\\" : \\"error\\";

          if (res.ok) {
            const submitSuccessEvent = new CustomEvent(\\"submit:success\\", {
              detail: {
                res,
                body,
              },
            });

            if (this.formRef) {
              this.formRef.dispatchEvent(submitSuccessEvent);

              if (submitSuccessEvent.defaultPrevented) {
                return;
              }
              /* TODO: option to turn this on/off? */

              if (this.resetFormOnSubmit !== false) {
                this.formRef.reset();
              }
            }
            /* TODO: client side route event first that can be preventDefaulted */

            if (this.successUrl) {
              if (this.formRef) {
                const event = new CustomEvent(\\"route\\", {
                  detail: {
                    url: this.successUrl,
                  },
                });
                this.formRef.dispatchEvent(event);

                if (!event.defaultPrevented) {
                  location.href = this.successUrl;
                }
              } else {
                location.href = this.successUrl;
              }
            }
          }
        },
        (err) => {
          const submitErrorEvent = new CustomEvent(\\"submit:error\\", {
            detail: {
              error: err,
            },
          });

          if (this.formRef) {
            this.formRef.dispatchEvent(submitErrorEvent);

            if (submitErrorEvent.defaultPrevented) {
              return;
            }
          }

          this.responseData = err;
          this.formState = \\"error\\";
        }
      );
    }
  }

  render() {
    return (
      <form
        validate={this.validate}
        ref={(el) => (this.formRef = el)}
        action={!this.sendWithJs && this.action}
        method={this.method}
        name={this.name}
        onSubmit={(event) => this.onSubmit(event)}
        {...this.attributes}
      >
        {this.builderBlock && this.builderBlock.children
          ? this.builderBlock?.children?.map((block, index) => (
              <builder-block-component
                key={block.id}
                block={block}
                index={index}
              ></builder-block-component>
            ))
          : null}
        {this.submissionState === \\"error\\" ? (
          <builder-blocks
            dataPath=\\"errorMessage\\"
            blocks={this.errorMessage!}
          ></builder-blocks>
        ) : null}
        {this.submissionState === \\"sending\\" ? (
          <builder-blocks
            dataPath=\\"sendingMessage\\"
            blocks={this.sendingMessage!}
          ></builder-blocks>
        ) : null}
        {this.submissionState === \\"error\\" && this.responseData ? (
          <pre class=\\"builder-form-error-text pre\\">
            {JSON.stringify(this.responseData, null, 2)}
          </pre>
        ) : null}
        {this.submissionState === \\"success\\" ? (
          <builder-blocks
            dataPath=\\"successMessage\\"
            blocks={this.successMessage!}
          ></builder-blocks>
        ) : null}
      </form>
    );
  }
}
"
`;

exports[`Stencil > jsx > Typescript Test > Image 1`] = `
"import { Component, h, Fragment, Prop, State } from \\"@stencil/core\\";

// TODO: AMP Support?
export interface ImageProps {
  _class?: string;
  image: string;
  sizes?: string;
  lazy?: boolean;
  height?: number;
  width?: number;
  altText?: string;
  backgroundSize?: string;
  backgroundPosition?: string; // TODO: Support generating Builder.io and or Shopify \`srcset\`s when needed

  srcset?: string; // TODO: Implement support for custom aspect ratios

  aspectRatio?: number; // TODO: This might not work as expected in terms of positioning

  children?: any;
}

@Component({
  tag: \\"image\\",

  styles: \`
        .img {
          opacity: 1;
          transition: opacity 0.2s ease-in-out;
          object-fit: cover;
          object-position: center;
        }
\`,
})
export class Image {
  private pictureRef!: HTMLElement;
  @Prop() lazy: ImageProps[\\"lazy\\"];
  @Prop() altText: ImageProps[\\"altText\\"];
  @Prop() _class: ImageProps[\\"_class\\"];
  @Prop() image: ImageProps[\\"image\\"];
  @Prop() srcset: ImageProps[\\"srcset\\"];
  @Prop() sizes: ImageProps[\\"sizes\\"];
  @Prop() children: ImageProps[\\"children\\"];
  @State() scrollListener = null;
  @State() imageLoaded = false;
  @State() load = false;

  setLoaded() {
    this.imageLoaded = true;
  }
  useLazyLoading() {
    // TODO: Add more checks here, like testing for real web browsers
    return !!this.lazy && this.isBrowser();
  }
  isBrowser = function isBrowser() {
    return (
      typeof window !== \\"undefined\\" && window.navigator.product != \\"ReactNative\\"
    );
  };

  componentDidLoad() {
    if (this.useLazyLoading()) {
      // throttled scroll capture listener
      const listener = () => {
        if (this.pictureRef) {
          const rect = this.pictureRef.getBoundingClientRect();
          const buffer = window.innerHeight / 2;

          if (rect.top < window.innerHeight + buffer) {
            this.load = true;
            this.scrollListener = null;
            window.removeEventListener(\\"scroll\\", listener);
          }
        }
      };

      this.scrollListener = listener;
      window.addEventListener(\\"scroll\\", listener, {
        capture: true,
        passive: true,
      });
      listener();
    }
  }
  disconnectedCallback() {
    if (this.scrollListener) {
      window.removeEventListener(\\"scroll\\", this.scrollListener);
    }
  }

  render() {
    return (
      <div>
        <picture ref={(el) => (this.pictureRef = el)}>
          {!this.useLazyLoading() || this.load ? (
            <img
              class={
                \\"builder-image\\" +
                (this._class ? \\" \\" + this._class : \\"\\") +
                \\" img\\"
              }
              alt={this.altText}
              aria-role={this.altText ? \\"presentation\\" : undefined}
              src={this.image}
              onLoad={() => this.setLoaded()}
              srcset={this.srcset}
              sizes={this.sizes}
            />
          ) : null}
          <source srcset={this.srcset} />
        </picture>
        <slot></slot>
      </div>
    );
  }
}
"
`;

exports[`Stencil > jsx > Typescript Test > Image State 1`] = `
"import { Component, h, Fragment, State } from \\"@stencil/core\\";

@Component({
  tag: \\"img-state-component\\",
})
export class ImgStateComponent {
  @State() canShow = true;
  @State() images = [\\"http://example.com/qwik.png\\"];

  render() {
    return (
      <div>
        {this.images?.map((item, itemIndex) => (
          <Fragment>
            <img class=\\"custom-class\\" src={item} key={itemIndex} />
          </Fragment>
        ))}
      </div>
    );
  }
}
"
`;

exports[`Stencil > jsx > Typescript Test > Img 1`] = `
"import { Builder } from \\"@builder.io/sdk\\";

import { Component, h, Fragment, Prop } from \\"@stencil/core\\";

export interface ImgProps {
  attributes?: any;
  imgSrc?: string;
  altText?: string;
  backgroundSize?: \\"cover\\" | \\"contain\\";
  backgroundPosition?:
    | \\"center\\"
    | \\"top\\"
    | \\"left\\"
    | \\"right\\"
    | \\"bottom\\"
    | \\"top left\\"
    | \\"top right\\"
    | \\"bottom left\\"
    | \\"bottom right\\";
}

@Component({
  tag: \\"img-component\\",
})
export class ImgComponent {
  @Prop() backgroundSize: ImgProps[\\"backgroundSize\\"];
  @Prop() backgroundPosition: ImgProps[\\"backgroundPosition\\"];
  @Prop() attributes: ImgProps[\\"attributes\\"];
  @Prop() imgSrc: ImgProps[\\"imgSrc\\"];
  @Prop() altText: ImgProps[\\"altText\\"];

  render() {
    return (
      <img
        style={{
          objectFit: this.backgroundSize || \\"cover\\",
          objectPosition: this.backgroundPosition || \\"center\\",
        }}
        {...this.attributes}
        key={(Builder.isEditing && this.imgSrc) || \\"default-key\\"}
        alt={this.altText}
        src={this.imgSrc}
      />
    );
  }
}
"
`;

exports[`Stencil > jsx > Typescript Test > Input 1`] = `
"import { Builder } from \\"@builder.io/sdk\\";

import { Component, h, Fragment, Event, Prop } from \\"@stencil/core\\";

export interface FormInputProps {
  type?: string;
  attributes?: any;
  name?: string;
  value?: string;
  placeholder?: string;
  defaultValue?: string;
  required?: boolean;
  onChange?: (value: string) => void;
}

@Component({
  tag: \\"form-input-component\\",
})
export class FormInputComponent {
  @Prop() attributes: FormInputProps[\\"attributes\\"];
  @Prop() defaultValue: FormInputProps[\\"defaultValue\\"];
  @Prop() placeholder: FormInputProps[\\"placeholder\\"];
  @Prop() type: FormInputProps[\\"type\\"];
  @Prop() name: FormInputProps[\\"name\\"];
  @Prop() value: FormInputProps[\\"value\\"];
  @Prop() required: FormInputProps[\\"required\\"];
  @Event() onChange: any;

  render() {
    return (
      <input
        {...this.attributes}
        key={
          Builder.isEditing && this.defaultValue
            ? this.defaultValue
            : \\"default-key\\"
        }
        placeholder={this.placeholder}
        type={this.type}
        name={this.name}
        value={this.value}
        defaultValue={this.defaultValue}
        required={this.required}
        onInput={(event) => this.onChange?.(event.target.value)}
      />
    );
  }
}
"
`;

exports[`Stencil > jsx > Typescript Test > InputParent 1`] = `
"import { FormInputComponent } from \\"./input.raw\\";

import { Component, h, Fragment } from \\"@stencil/core\\";

@Component({
  tag: \\"stepper\\",
})
export class Stepper {
  handleChange(value: string) {
    console.log(value);
  }

  render() {
    return (
      <form-input-component
        name=\\"kingzez\\"
        type=\\"text\\"
        onChange={(value) => this.handleChange(value)}
      ></form-input-component>
    );
  }
}
"
`;

exports[`Stencil > jsx > Typescript Test > RawText 1`] = `
"import { Component, h, Fragment, Prop } from \\"@stencil/core\\";

export interface RawTextProps {
  attributes?: any;
  text?: string; // builderBlock?: any;
}

@Component({
  tag: \\"raw-text\\",
})
export class RawText {
  @Prop() attributes: RawTextProps[\\"attributes\\"];
  @Prop() text: RawTextProps[\\"text\\"];

  render() {
    return (
      <span
        class={this.attributes?.class || this.attributes?.className}
        innerHTML={this.text || \\"\\"}
      ></span>
    );
  }
}
"
`;

exports[`Stencil > jsx > Typescript Test > Section 1`] = `
"import { Component, h, Fragment, Prop } from \\"@stencil/core\\";

export interface SectionProps {
  maxWidth?: number;
  attributes?: any;
  children?: any;
}

@Component({
  tag: \\"section-component\\",
})
export class SectionComponent {
  @Prop() attributes: SectionProps[\\"attributes\\"];
  @Prop() maxWidth: SectionProps[\\"maxWidth\\"];
  @Prop() children: SectionProps[\\"children\\"];

  render() {
    return (
      <section
        {...this.attributes}
        style={
          this.maxWidth && typeof this.maxWidth === \\"number\\"
            ? {
                maxWidth: this.maxWidth,
              }
            : undefined
        }
      >
        <slot></slot>
      </section>
    );
  }
}
"
`;

exports[`Stencil > jsx > Typescript Test > Section 2`] = `
"import { Component, h, Fragment, Host, Prop, State } from \\"@stencil/core\\";

export interface SectionProps {
  maxWidth?: number;
  attributes?: any;
  children?: any;
}

@Component({
  tag: \\"section-state-component\\",
})
export class SectionStateComponent {
  @Prop() attributes: SectionProps[\\"attributes\\"];
  @Prop() children: SectionProps[\\"children\\"];
  @State() max = 42;
  @State() items = [42];

  render() {
    return (
      <Host>
        {this.max
          ? this.items?.map((item) => (
              <section
                {...this.attributes}
                style={{
                  maxWidth: item + this.max,
                }}
              >
                <slot></slot>
              </section>
            ))
          : null}
      </Host>
    );
  }
}
"
`;

exports[`Stencil > jsx > Typescript Test > Select 1`] = `
"import { Builder } from \\"@builder.io/sdk\\";

import { Component, h, Fragment, Prop } from \\"@stencil/core\\";

export interface FormSelectProps {
  options?: {
    name?: string;
    value: string;
  }[];
  attributes?: any;
  name?: string;
  value?: string;
  defaultValue?: string;
}

@Component({
  tag: \\"select-component\\",
})
export class SelectComponent {
  @Prop() attributes: FormSelectProps[\\"attributes\\"];
  @Prop() value: FormSelectProps[\\"value\\"];
  @Prop() defaultValue: FormSelectProps[\\"defaultValue\\"];
  @Prop() name: FormSelectProps[\\"name\\"];
  @Prop() options: FormSelectProps[\\"options\\"];

  render() {
    return (
      <select
        {...this.attributes}
        value={this.value}
        key={
          Builder.isEditing && this.defaultValue
            ? this.defaultValue
            : \\"default-key\\"
        }
        defaultValue={this.defaultValue}
        name={this.name}
      >
        {this.options?.map((option, index) => (
          <option value={option.value} data-index={index}>
            {option.name || option.value}
          </option>
        ))}
      </select>
    );
  }
}
"
`;

exports[`Stencil > jsx > Typescript Test > SlotDefault 1`] = `
"import { Component, h, Fragment } from \\"@stencil/core\\";

type Props = {
  [key: string]: string;
};

@Component({
  tag: \\"slot-code\\",
})
export class SlotCode {
  render() {
    return (
      <div>
        <slot>
          <div class=\\"default-slot\\">Default content</div>
        </slot>
      </div>
    );
  }
}
"
`;

exports[`Stencil > jsx > Typescript Test > SlotHtml 1`] = `
"import { ContentSlotCode } from \\"./content-slot-jsx.raw\\";

import { Component, h, Fragment } from \\"@stencil/core\\";

type Props = {
  [key: string]: string;
};

@Component({
  tag: \\"slot-code\\",
})
export class SlotCode {
  render() {
    return (
      <div>
        <content-slot-code>
          <slot testing={<div>Hello</div>}></slot>
        </content-slot-code>
      </div>
    );
  }
}
"
`;

exports[`Stencil > jsx > Typescript Test > SlotJsx 1`] = `
"import { ContentSlotCode } from \\"./content-slot-jsx.raw\\";

import { Component, h, Fragment } from \\"@stencil/core\\";

type Props = {
  [key: string]: string;
};

@Component({
  tag: \\"slot-code\\",
})
export class SlotCode {
  render() {
    return (
      <div>
        <content-slot-code slotTesting={<div>Hello</div>}></content-slot-code>
      </div>
    );
  }
}
"
`;

exports[`Stencil > jsx > Typescript Test > SlotNamed 1`] = `
"import { Component, h, Fragment } from \\"@stencil/core\\";

type Props = {
  [key: string]: string;
};

@Component({
  tag: \\"slot-code\\",
})
export class SlotCode {
  render() {
    return (
      <div>
        <slot name=\\"myAwesomeSlot\\"></slot>
        <slot name=\\"top\\"></slot>
        <slot name=\\"left\\">Default left</slot>
        <slot>Default Child</slot>
      </div>
    );
  }
}
"
`;

exports[`Stencil > jsx > Typescript Test > Stamped.io 1`] = `
"import { kebabCase, snakeCase } from \\"lodash\\";

import { Component, h, Fragment, Prop, State } from \\"@stencil/core\\";

type SmileReviewsProps = {
  productId: string;
  apiKey: string;
};

@Component({
  tag: \\"smile-reviews\\",

  styles: \`
        .input {
          display: block;
        }
        .textarea {
          display: block;
        }
        .button {
          display: block;
        }
        .review {
          margin: 10px;
          padding: 10px;
          background: white;
          display: flex;
          border-radius: 5px;
          box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
          -webkit-font-smoothing: antialiased;
        }
        .img {
          height: 30px;
          width: 30px;
          margin-right: 10px;
        }
\`,
})
export class SmileReviews {
  @Prop() apiKey: SmileReviewsProps[\\"apiKey\\"];
  @Prop() productId: SmileReviewsProps[\\"productId\\"];
  @State() reviews = [];
  @State() name = \\"test\\";
  @State() showReviewPrompt = false;

  kebabCaseValue() {
    return kebabCase(\\"testThat\\");
  }
  snakeCaseValue() {
    return snakeCase(\\"testThis\\");
  }

  componentDidLoad() {
    fetch(
      \`https://stamped.io/api/widget/reviews?storeUrl=builder-io.myshopify.com&apiKey=\${
        this.apiKey || \\"pubkey-8bbDq7W6w4sB3OWeM1HUy2s47702hM\\"
      }&productId=\${this.productId || \\"2410511106127\\"}\`
    )
      .then((res) => res.json())
      .then((data) => {
        this.reviews = data.data;
      });
  }

  render() {
    return (
      <div data-user={this.name}>
        <button onClick={() => (this.showReviewPrompt = true)}>
          Write a review
        </button>
        {this.showReviewPrompt || \\"asdf\\" ? (
          <Fragment>
            <input placeholder=\\"Email\\" />
            <input class=\\"input\\" placeholder=\\"Title\\" />
            <textarea
              class=\\"textarea\\"
              placeholder=\\"How was your experience?\\"
            ></textarea>
            <button
              class=\\"button\\"
              onClick={(event) => {
                event.preventDefault();
                this.showReviewPrompt = false;
              }}
            >
              Submit
            </button>
          </Fragment>
        ) : null}
        {this.reviews?.map((review, index) => (
          <div class=\\"review\\" key={review.id}>
            <img class=\\"img\\" src={review.avatar} />
            <div class={this.showReviewPrompt ? \\"bg-primary\\" : \\"bg-secondary\\"}>
              <div>
                N:
                {index}
              </div>
              <div>{review.author}</div>
              <div>{review.reviewMessage}</div>
            </div>
          </div>
        ))}
      </div>
    );
  }
}
"
`;

exports[`Stencil > jsx > Typescript Test > Submit 1`] = `
"import { Component, h, Fragment, Prop } from \\"@stencil/core\\";

export interface ButtonProps {
  attributes?: any;
  text?: string;
}

@Component({
  tag: \\"submit-button\\",
})
export class SubmitButton {
  @Prop() attributes: ButtonProps[\\"attributes\\"];
  @Prop() text: ButtonProps[\\"text\\"];

  render() {
    return (
      <button type=\\"submit\\" {...this.attributes}>
        {this.text}
      </button>
    );
  }
}
"
`;

exports[`Stencil > jsx > Typescript Test > Text 1`] = `
"import { Builder } from \\"@builder.io/sdk\\";

import { Component, h, Fragment, Prop, State } from \\"@stencil/core\\";

export interface TextProps {
  attributes?: any;
  rtlMode: boolean;
  text?: string;
  content?: string;
  builderBlock?: any;
}

@Component({
  tag: \\"text\\",
})
export class Text {
  @Prop() text: TextProps[\\"text\\"];
  @Prop() content: TextProps[\\"content\\"];
  @State() name = \\"Decadef20\\";

  render() {
    return (
      <div
        contentEditable={allowEditingText || undefined}
        data-name={{
          test: this.name || \\"any name\\",
        }}
        innerHTML={
          this.text ||
          this.content ||
          this.name ||
          '<p class=\\"text-lg\\">my name</p>'
        }
      ></div>
    );
  }
}
"
`;

exports[`Stencil > jsx > Typescript Test > Textarea 1`] = `
"import { Component, h, Fragment, Prop } from \\"@stencil/core\\";

export interface TextareaProps {
  attributes?: any;
  name?: string;
  value?: string;
  defaultValue?: string;
  placeholder?: string;
}

@Component({
  tag: \\"textarea\\",
})
export class Textarea {
  @Prop() attributes: TextareaProps[\\"attributes\\"];
  @Prop() placeholder: TextareaProps[\\"placeholder\\"];
  @Prop() name: TextareaProps[\\"name\\"];
  @Prop() value: TextareaProps[\\"value\\"];
  @Prop() defaultValue: TextareaProps[\\"defaultValue\\"];

  render() {
    return (
      <textarea
        {...this.attributes}
        placeholder={this.placeholder}
        name={this.name}
        value={this.value}
        defaultValue={this.defaultValue}
      ></textarea>
    );
  }
}
"
`;

exports[`Stencil > jsx > Typescript Test > Video 1`] = `
"import { Component, h, Fragment, Prop } from \\"@stencil/core\\";

export interface VideoProps {
  attributes?: any;
  video?: string;
  autoPlay?: boolean;
  controls?: boolean;
  muted?: boolean;
  loop?: boolean;
  playsInline?: boolean;
  aspectRatio?: number;
  width?: number;
  height?: number;
  fit?: \\"contain\\" | \\"cover\\" | \\"fill\\";
  position?:
    | \\"center\\"
    | \\"top\\"
    | \\"left\\"
    | \\"right\\"
    | \\"bottom\\"
    | \\"top left\\"
    | \\"top right\\"
    | \\"bottom left\\"
    | \\"bottom right\\";
  posterImage?: string;
  lazyLoad?: boolean;
}

@Component({
  tag: \\"video\\",
})
export class Video {
  @Prop() attributes: VideoProps[\\"attributes\\"];
  @Prop() fit: VideoProps[\\"fit\\"];
  @Prop() position: VideoProps[\\"position\\"];
  @Prop() video: VideoProps[\\"video\\"];
  @Prop() posterImage: VideoProps[\\"posterImage\\"];
  @Prop() autoPlay: VideoProps[\\"autoPlay\\"];
  @Prop() muted: VideoProps[\\"muted\\"];
  @Prop() controls: VideoProps[\\"controls\\"];
  @Prop() loop: VideoProps[\\"loop\\"];

  render() {
    return (
      <video
        preload=\\"none\\"
        {...this.attributes}
        style={{
          width: \\"100%\\",
          height: \\"100%\\",
          ...this.attributes?.style,
          objectFit: this.fit,
          objectPosition: this.position,
          // Hack to get object fit to work as expected and
          // not have the video overflow
          borderRadius: 1,
        }}
        key={this.video || \\"no-src\\"}
        poster={this.posterImage}
        autoplay={this.autoPlay}
        muted={this.muted}
        controls={this.controls}
        loop={this.loop}
      ></video>
    );
  }
}
"
`;

exports[`Stencil > jsx > Typescript Test > arrowFunctionInUseStore 1`] = `
"import { Component, h, Fragment, State } from \\"@stencil/core\\";

@Component({
  tag: \\"my-component\\",
})
export class MyComponent {
  @State() name = \\"steve\\";

  setName(value) {
    this.name = value;
  }
  updateNameWithArrowFn(value) {
    this.name = value;
  }

  render() {
    return (
      <div>
        Hello
        {this.name}
      </div>
    );
  }
}
"
`;

exports[`Stencil > jsx > Typescript Test > basicForNoTagReference 1`] = `
"import { Component, h, Fragment, Prop, State } from \\"@stencil/core\\";

@Component({
  tag: \\"my-basic-for-no-tag-ref-component\\",
})
export class MyBasicForNoTagRefComponent {
  @Prop() actions: any;
  @State() name = \\"VincentW\\";
  @State() TagName = \\"div\\";
  @State() tag = \\"span\\";

  get TagNameGetter() {
    return \\"span\\";
  }

  render() {
    return (
      <this.TagNameGetter>
        Hello
        <this.tag>{this.name}</this.tag>
        {this.actions?.map((action) => (
          <this.TagName>
            <action.icon></action.icon>
            <span>{action.text}</span>
          </this.TagName>
        ))}
      </this.TagNameGetter>
    );
  }
}
"
`;

exports[`Stencil > jsx > Typescript Test > basicForwardRef 1`] = `
"import { Component, h, Fragment, Prop, State } from \\"@stencil/core\\";

export interface Props {
  showInput: boolean;
  inputRef: HTMLInputElement;
}

@Component({
  tag: \\"my-basic-forward-ref-component\\",

  styles: \`
        .input {
          color: red;
        }
\`,
})
export class MyBasicForwardRefComponent {
  @Prop() inputRef: Props[\\"inputRef\\"];
  @State() name = \\"PatrickJS\\";

  render() {
    return (
      <div>
        <input
          class=\\"input\\"
          ref={(el) => (this.inputRef = el)}
          value={this.name}
          onInput={(event) => (this.name = event.target.value)}
        />
      </div>
    );
  }
}
"
`;

exports[`Stencil > jsx > Typescript Test > basicForwardRefMetadata 1`] = `
"import { Component, h, Fragment, Prop, State } from \\"@stencil/core\\";

export interface Props {
  showInput: boolean;
  inputRef: HTMLInputElement;
}

@Component({
  tag: \\"my-basic-forward-ref-component\\",

  styles: \`
        .input {
          color: red;
        }
\`,
})
export class MyBasicForwardRefComponent {
  @Prop() inputRef: Props[\\"inputRef\\"];
  @State() name = \\"PatrickJS\\";

  render() {
    return (
      <div>
        <input
          class=\\"input\\"
          ref={(el) => (this.inputRef = el)}
          value={this.name}
          onInput={(event) => (this.name = event.target.value)}
        />
      </div>
    );
  }
}
"
`;

exports[`Stencil > jsx > Typescript Test > basicOnUpdateReturn 1`] = `
"import { Component, h, Fragment, State } from \\"@stencil/core\\";

@Component({
  tag: \\"my-basic-on-update-return-component\\",
})
export class MyBasicOnUpdateReturnComponent {
  @State() name = \\"PatrickJS\\";

  componentDidUpdate() {
    const controller = new AbortController();
    const signal = controller.signal;
    fetch(\\"https://patrickjs.com/api/resource.json\\", {
      signal,
    })
      .then((response) => response.json())
      .then((data) => {
        this.name = data.name;
      });
    return () => {
      if (!signal.aborted) {
        controller.abort();
      }
    };
  }

  render() {
    return (
      <div>
        Hello!
        {this.name}
      </div>
    );
  }
}
"
`;

exports[`Stencil > jsx > Typescript Test > class + ClassName + css 1`] = `
"import { Component, h, Fragment } from \\"@stencil/core\\";

@Component({
  tag: \\"my-basic-component\\",

  styles: \`
        .div {
          padding: 10px;
        }
\`,
})
export class MyBasicComponent {
  render() {
    return (
      <div class=\\"test2 test div\\">
        Hello! I can run in React, Vue, Solid, or Liquid!
      </div>
    );
  }
}
"
`;

exports[`Stencil > jsx > Typescript Test > class + css 1`] = `
"import { Component, h, Fragment } from \\"@stencil/core\\";

@Component({
  tag: \\"my-basic-component\\",

  styles: \`
        .div {
          padding: 10px;
        }
\`,
})
export class MyBasicComponent {
  render() {
    return (
      <div class=\\"test div\\">
        Hello! I can run in React, Vue, Solid, or Liquid!
      </div>
    );
  }
}
"
`;

exports[`Stencil > jsx > Typescript Test > class and className in component 1`] = `
"import { MyComp } from \\"./my-component.lite\\";

import { Component, h, Fragment } from \\"@stencil/core\\";

@Component({
  tag: \\"my-basic-component\\",
})
export class MyBasicComponent {
  render() {
    return (
      <my-comp class=\\"test test\\">
        Hello! I can run in React, Vue, Solid, or Liquid!
      </my-comp>
    );
  }
}
"
`;

exports[`Stencil > jsx > Typescript Test > className + css 1`] = `
"import { Component, h, Fragment } from \\"@stencil/core\\";

@Component({
  tag: \\"my-basic-component\\",

  styles: \`
        .div {
          padding: 10px;
        }
\`,
})
export class MyBasicComponent {
  render() {
    return (
      <div class=\\"test div\\">
        Hello! I can run in React, Vue, Solid, or Liquid!
      </div>
    );
  }
}
"
`;

exports[`Stencil > jsx > Typescript Test > className 1`] = `
"import type { JSX } from \\"../../../../jsx-runtime\\";

import { Component, h, Fragment, State } from \\"@stencil/core\\";

type Props = {
  [key: string]: string | JSX.Element;
  slotTesting: JSX.Element;
};

@Component({
  tag: \\"class-name-code\\",
})
export class ClassNameCode {
  @State() bindings = \\"a binding\\";

  render() {
    return (
      <div>
        <div class=\\"no binding\\">Without Binding</div>
        <div class={this.bindings}>With binding</div>
      </div>
    );
  }
}
"
`;

exports[`Stencil > jsx > Typescript Test > classState 1`] = `
"import { Component, h, Fragment, State } from \\"@stencil/core\\";

@Component({
  tag: \\"my-basic-component\\",

  styles: \`
        .div {
          padding: 10px;
        }
\`,
})
export class MyBasicComponent {
  @State() classState = \\"testClassName\\";
  @State() styleState = {
    color: \\"red\\",
  };

  render() {
    return (
      <div class={this.classState + \\" div\\"} style={this.styleState}>
        Hello! I can run in React, Vue, Solid, or Liquid!
      </div>
    );
  }
}
"
`;

exports[`Stencil > jsx > Typescript Test > componentWithContext 1`] = `
"import Context1 from \\"@dummy/1\\";
import Context2 from \\"@dummy/2\\";

import { Component, h, Fragment, Prop } from \\"@stencil/core\\";

export interface ComponentWithContextProps {
  content: string;
}

@Component({
  tag: \\"component-with-context\\",
})
export class ComponentWithContext {
  @Prop() content: ComponentWithContextProps[\\"content\\"];

  render() {
    return (
      <Fragment>
        <Fragment>{foo.value}</Fragment>
      </Fragment>
    );
  }
}
"
`;

exports[`Stencil > jsx > Typescript Test > componentWithContextMultiRoot 1`] = `
"import Context1 from \\"@dummy/1\\";
import Context2 from \\"@dummy/2\\";

import { Component, h, Fragment, Prop } from \\"@stencil/core\\";

export interface ComponentWithContextProps {
  content: string;
}

@Component({
  tag: \\"component-with-context\\",
})
export class ComponentWithContext {
  @Prop() content: ComponentWithContextProps[\\"content\\"];

  render() {
    return (
      <Fragment>
        <Fragment>{foo.value}</Fragment>
        <div>other</div>
      </Fragment>
    );
  }
}
"
`;

exports[`Stencil > jsx > Typescript Test > contentState 1`] = `
"import BuilderContext from \\"@dummy/context.js\\";

import { Component, h, Fragment, Prop } from \\"@stencil/core\\";

@Component({
  tag: \\"render-content\\",
})
export class RenderContent {
  @Prop() content: any;
  @Prop() customComponents: any;

  render() {
    return <div>setting context</div>;
  }
}
"
`;

exports[`Stencil > jsx > Typescript Test > defaultProps 1`] = `
"import { Component, h, Fragment, Event, Prop } from \\"@stencil/core\\";

export interface ButtonProps {
  attributes?: any;
  text?: string;
  buttonText?: string; // no default value

  link?: string;
  openLinkInNewTab?: boolean;
  onClick?: () => void;
}

@Component({
  tag: \\"button\\",
})
export class Button {
  @Prop() link: ButtonProps[\\"link\\"] = \\"https://builder.io/\\";
  @Prop() attributes: ButtonProps[\\"attributes\\"];
  @Prop() openLinkInNewTab: ButtonProps[\\"openLinkInNewTab\\"] = false;
  @Prop() text: ButtonProps[\\"text\\"] = \\"default text\\";
  @Event() onClick: any = () => {
    console.log(\\"hi\\");
  };
  @Prop() buttonText: ButtonProps[\\"buttonText\\"];

  render() {
    return (
      <div>
        {this.link ? (
          <a
            {...this.attributes}
            href={this.link}
            target={this.openLinkInNewTab ? \\"_blank\\" : undefined}
          >
            {this.text}
          </a>
        ) : null}
        {!this.link ? (
          <button
            type=\\"button\\"
            {...this.attributes}
            onClick={() => this.onClick.emit()}
          >
            {this.buttonText}
          </button>
        ) : null}
      </div>
    );
  }
}
"
`;

exports[`Stencil > jsx > Typescript Test > defaultPropsOutsideComponent 1`] = `
"import { Component, h, Fragment, Event, Prop } from \\"@stencil/core\\";

export interface ButtonProps {
  attributes?: any;
  text?: string;
  link?: string;
  openLinkInNewTab?: boolean;
  onClick: () => void;
}

@Component({
  tag: \\"button\\",
})
export class Button {
  @Prop() link: ButtonProps[\\"link\\"] = \\"https://builder.io/\\";
  @Prop() attributes: ButtonProps[\\"attributes\\"];
  @Prop() openLinkInNewTab: ButtonProps[\\"openLinkInNewTab\\"] = false;
  @Prop() text: ButtonProps[\\"text\\"] = \\"default text\\";
  @Event() onClick: any = () => {};

  render() {
    return (
      <div>
        {this.link ? (
          <a
            {...this.attributes}
            href={this.link}
            target={this.openLinkInNewTab ? \\"_blank\\" : undefined}
          >
            {this.text}
          </a>
        ) : null}
        {!this.link ? (
          <button
            type=\\"button\\"
            {...this.attributes}
            onClick={(event) => this.onClick.emit(event)}
          >
            {this.text}
          </button>
        ) : null}
      </div>
    );
  }
}
"
`;

exports[`Stencil > jsx > Typescript Test > defaultValsWithTypes 1`] = `
"const DEFAULT_VALUES: Props = {
  name: \\"Sami\\",
};

import { Component, h, Fragment, Prop } from \\"@stencil/core\\";

type Props = {
  name: string;
};

@Component({
  tag: \\"component-with-types\\",
})
export class ComponentWithTypes {
  @Prop() name: Props[\\"name\\"];

  render() {
    return (
      <div>
        {\\" \\"}
        Hello
        {this.name || DEFAULT_VALUES.name}
      </div>
    );
  }
}
"
`;

exports[`Stencil > jsx > Typescript Test > expressionState 1`] = `
"import { Component, h, Fragment, Prop, State } from \\"@stencil/core\\";

@Component({
  tag: \\"my-component\\",
})
export class MyComponent {
  @Prop() componentRef: any;
  @State() refToUse = !(this.componentRef instanceof Function)
    ? this.componentRef
    : null;

  render() {
    return <div>{this.refToUse}</div>;
  }
}
"
`;

exports[`Stencil > jsx > Typescript Test > getterState 1`] = `
"import { Component, h, Fragment, Prop } from \\"@stencil/core\\";

export interface ButtonProps {
  foo: string;
}

@Component({
  tag: \\"button\\",
})
export class Button {
  @Prop() foo: ButtonProps[\\"foo\\"];

  get foo2() {
    return this.foo + \\"foo\\";
  }
  get bar() {
    return \\"bar\\";
  }
  baz(i: number) {
    return i + this.foo2.length;
  }

  render() {
    return (
      <div>
        <p>{this.foo2}</p>
        <p>{this.bar}</p>
        <p>{this.baz(1)}</p>
      </div>
    );
  }
}
"
`;

exports[`Stencil > jsx > Typescript Test > import types 1`] = `
"import { BuilderContent, GetContentOptions } from \\"@builder.io/sdk\\";
import { RenderBlock } from \\"./builder-render-block.raw\\";

import { Component, h, Fragment, Prop } from \\"@stencil/core\\";

type RenderContentProps = {
  options?: GetContentOptions;
  content: BuilderContent;
  renderContentProps: RenderBlockProps;
};

@Component({
  tag: \\"render-content\\",
})
export class RenderContent {
  @Prop() renderContentProps: RenderContentProps[\\"renderContentProps\\"];

  getRenderContentProps(block, index) {
    return {
      block: block,
      index: index,
    };
  }

  render() {
    return (
      <render-block
        {...this.getRenderContentProps(this.renderContentProps.block, 0)}
      ></render-block>
    );
  }
}
"
`;

exports[`Stencil > jsx > Typescript Test > multipleOnUpdate 1`] = `
"import { Component, h, Fragment } from \\"@stencil/core\\";

@Component({
  tag: \\"multiple-on-update\\",
})
export class MultipleOnUpdate {
  componentDidUpdate() {
    console.log(\\"Runs on every update/rerender\\");
    console.log(\\"Runs on every update/rerender as well\\");
  }

  render() {
    return <div></div>;
  }
}
"
`;

exports[`Stencil > jsx > Typescript Test > multipleOnUpdateWithDeps 1`] = `
"import { Component, h, Fragment, State } from \\"@stencil/core\\";

@Component({
  tag: \\"multiple-on-update-with-deps\\",
})
export class MultipleOnUpdateWithDeps {
  @State() a = \\"a\\";
  @State() b = \\"b\\";
  @State() c = \\"c\\";
  @State() d = \\"d\\";

  componentDidUpdate() {
    console.log(\\"Runs when a or b changes\\", this.a, this.b);

    if (this.a === \\"a\\") {
      this.a = \\"b\\";
    }
    console.log(\\"Runs when c or d changes\\", this.c, this.d);

    if (this.a === \\"a\\") {
      this.a = \\"b\\";
    }
  }

  render() {
    return <div></div>;
  }
}
"
`;

exports[`Stencil > jsx > Typescript Test > multipleSpreads 1`] = `
"import { Component, h, Fragment, State } from \\"@stencil/core\\";

@Component({
  tag: \\"my-basic-component\\",
})
export class MyBasicComponent {
  @State() attrs = {
    hello: \\"world\\",
  };

  render() {
    return <input {...this.attrs} {...this} />;
  }
}
"
`;

exports[`Stencil > jsx > Typescript Test > nestedStyles 1`] = `
"import { Component, h, Fragment } from \\"@stencil/core\\";

@Component({
  tag: \\"nested-styles\\",

  styles: \`
        .div {
          display: flex;
          --bar: red;
          color: var(--bar);
        }
        @media (max-width: env(--mobile)) {
          .div {
            display: block;
          }
        }
        .div:hover {
          display: flex;
        }
        .div:active {
          display: inline;
        }
        .div .nested-selector {
          display: grid;
        }
        .div .nested-selector:hover {
          display: block;
        }
        .div.nested-selector:active {
          display: inline-block;
        }
\`,
})
export class NestedStyles {
  render() {
    return <div class=\\"div\\">Hello world</div>;
  }
}
"
`;

exports[`Stencil > jsx > Typescript Test > onEvent 1`] = `
"import { Component, h, Fragment } from \\"@stencil/core\\";

@Component({
  tag: \\"embed\\",
})
export class Embed {
  private elem!: HTMLDivElement;

  foo(event) {
    console.log(\\"test2\\");
  }

  componentDidLoad() {
    this.elem.dispatchEvent(new CustomEvent(\\"initEditingBldr\\"));
  }

  render() {
    return (
      <div class=\\"builder-embed\\" ref={(el) => (this.elem = el)}>
        <div>Test</div>
      </div>
    );
  }
}
"
`;

exports[`Stencil > jsx > Typescript Test > onInit & onMount 1`] = `
"import { Component, h, Fragment } from \\"@stencil/core\\";

@Component({
  tag: \\"on-init\\",
})
export class OnInit {
  componentDidLoad() {
    console.log(\\"onMount\\");
  }

  render() {
    return <div></div>;
  }
}
"
`;

exports[`Stencil > jsx > Typescript Test > onInit 1`] = `
"export const defaultValues = {
  name: \\"PatrickJS\\",
};

import { Component, h, Fragment, Prop, State } from \\"@stencil/core\\";

type Props = {
  name: string;
};

@Component({
  tag: \\"on-init\\",
})
export class OnInit {
  @Prop() name: Props[\\"name\\"];
  @State() name = \\"\\";

  render() {
    return (
      <div>
        Default name defined by parent
        {this.name}
      </div>
    );
  }
}
"
`;

exports[`Stencil > jsx > Typescript Test > onMount 1`] = `
"import { Component, h, Fragment } from \\"@stencil/core\\";

@Component({
  tag: \\"comp\\",
})
export class Comp {
  componentDidLoad() {
    console.log(\\"Runs on mount\\");
  }
  disconnectedCallback() {
    console.log(\\"Runs on unMount\\");
  }

  render() {
    return <div></div>;
  }
}
"
`;

exports[`Stencil > jsx > Typescript Test > onMountMultiple 1`] = `
"import { Component, h, Fragment } from \\"@stencil/core\\";

@Component({
  tag: \\"comp\\",
})
export class Comp {
  componentDidLoad() {
    const onMountHook_0 = () => {
      console.log(\\"Runs on mount\\");
    };
    onMountHook_0();
    const onMountHook_1 = () => {
      console.log(\\"Another one runs on Mount\\");
    };
    onMountHook_1();
    const onMountHook_2 = () => {
      console.log(\\"SSR runs on Mount\\");
    };
    onMountHook_2();
  }

  render() {
    return <div></div>;
  }
}
"
`;

exports[`Stencil > jsx > Typescript Test > onUpdate 1`] = `
"import { Component, h, Fragment } from \\"@stencil/core\\";

@Component({
  tag: \\"on-update\\",
})
export class OnUpdate {
  componentDidUpdate() {
    console.log(\\"Runs on every update/rerender\\");
  }

  render() {
    return <div></div>;
  }
}
"
`;

exports[`Stencil > jsx > Typescript Test > onUpdateWithDeps 1`] = `
"import { Component, h, Fragment, Prop, State } from \\"@stencil/core\\";

type Props = {
  size: string;
};

@Component({
  tag: \\"on-update-with-deps\\",
})
export class OnUpdateWithDeps {
  @Prop() size: Props[\\"size\\"];
  @State() a = \\"a\\";
  @State() b = \\"b\\";

  componentDidUpdate() {
    console.log(\\"Runs when a, b or size changes\\", this.a, this.b, this.size);
  }

  render() {
    return <div></div>;
  }
}
"
`;

exports[`Stencil > jsx > Typescript Test > preserveExportOrLocalStatement 1`] = `
"const b = 3;
const foo = () => {};
export const a = 3;
export const bar = () => {};
export function run<T>(value: T) {}

import { Component, h, Fragment } from \\"@stencil/core\\";

type Types = {
  s: any[];
};
interface IPost {
  len: number;
}
export interface MyBasicComponentProps {
  id: string;
}

@Component({
  tag: \\"my-basic-component\\",
})
export class MyBasicComponent {
  render() {
    return <div></div>;
  }
}
"
`;

exports[`Stencil > jsx > Typescript Test > preserveTyping 1`] = `
"import { Component, h, Fragment, Prop } from \\"@stencil/core\\";

export type A = \\"test\\";
export interface C {
  n: \\"test\\";
}
type B = \\"test2\\";
interface D {
  n: \\"test\\";
}
export interface MyBasicComponentProps {
  name: string;
  age?: number;
}

@Component({
  tag: \\"my-basic-component\\",
})
export class MyBasicComponent {
  @Prop() name: MyBasicComponentProps[\\"name\\"];

  render() {
    return (
      <div>
        Hello! I can run in React, Vue, Solid, or Liquid!
        {this.name}
      </div>
    );
  }
}
"
`;

exports[`Stencil > jsx > Typescript Test > propsDestructure 1`] = `
"import { Component, h, Fragment, Prop, State } from \\"@stencil/core\\";

type Props = {
  children: any;
  type: string;
};

@Component({
  tag: \\"my-basic-component\\",
})
export class MyBasicComponent {
  @Prop() children: Props[\\"children\\"];
  @Prop() type: Props[\\"type\\"];
  @State() name = \\"Decadef20\\";

  render() {
    return (
      <div>
        <slot></slot>
        {this.type}
        Hello! I can run in React, Vue, Solid, or Liquid!
      </div>
    );
  }
}
"
`;

exports[`Stencil > jsx > Typescript Test > propsInterface 1`] = `
"import { Component, h, Fragment, Prop } from \\"@stencil/core\\";

interface Person {
  name: string;
  age?: number;
}

@Component({
  tag: \\"my-basic-component\\",
})
export class MyBasicComponent {
  @Prop() name: Person | never[\\"name\\"];

  render() {
    return (
      <div>
        Hello! I can run in React, Vue, Solid, or Liquid!
        {this.name}
      </div>
    );
  }
}
"
`;

exports[`Stencil > jsx > Typescript Test > propsType 1`] = `
"import { Component, h, Fragment, Prop } from \\"@stencil/core\\";

type Person = {
  name: string;
  age?: number;
};

@Component({
  tag: \\"my-basic-component\\",
})
export class MyBasicComponent {
  @Prop() name: Person[\\"name\\"];

  render() {
    return (
      <div>
        Hello! I can run in React, Vue, Solid, or Liquid!
        {this.name}
      </div>
    );
  }
}
"
`;

exports[`Stencil > jsx > Typescript Test > referencingFunInsideHook 1`] = `
"import { Component, h, Fragment } from \\"@stencil/core\\";

@Component({
  tag: \\"on-update\\",
})
export class OnUpdate {
  foo = function foo(params) {};
  bar = function bar() {};
  zoo = function zoo() {
    const params = {
      cb: this.bar,
    };
  };

  componentDidUpdate() {
    this.foo({
      someOption: this.bar,
    });
  }

  render() {
    return <div></div>;
  }
}
"
`;

exports[`Stencil > jsx > Typescript Test > renderBlock 1`] = `
"import { TARGET } from \\"../../constants/target.js\\";
import type {
  BuilderContextInterface,
  RegisteredComponent,
} from \\"../../context/types.js\\";
import { evaluate } from \\"../../functions/evaluate.js\\";
import { extractTextStyles } from \\"../../functions/extract-text-styles.js\\";
import { getBlockActions } from \\"../../functions/get-block-actions.js\\";
import { getBlockComponentOptions } from \\"../../functions/get-block-component-options.js\\";
import { getBlockProperties } from \\"../../functions/get-block-properties.js\\";
import { getBlockTag } from \\"../../functions/get-block-tag.js\\";
import { getProcessedBlock } from \\"../../functions/get-processed-block.js\\";
import { getReactNativeBlockStyles } from \\"../../functions/get-react-native-block-styles.js\\";
import type { BuilderBlock } from \\"../../types/builder-block.js\\";
import type { Nullable } from \\"../../types/typescript.js\\";
import { BlockStyles } from \\"./block-styles.lite\\";
import { isEmptyHtmlElement } from \\"./render-block.helpers.js\\";
import RenderComponentWithContext from \\"./render-component-with-context.js\\";
import type { RenderComponentProps } from \\"./render-component\\";
import RenderComponent from \\"./render-component\\";
import { RenderRepeatedBlock } from \\"./render-repeated-block.lite\\";
import type { RepeatData } from \\"./types.js\\";

import { Component, h, Fragment, Host, Prop } from \\"@stencil/core\\";

export type RenderBlockProps = {
  block: BuilderBlock;
  context: BuilderContextInterface;
};

@Component({
  tag: \\"render-block\\",
})
export class RenderBlock {
  @Prop() block: RenderBlockProps[\\"block\\"];
  @Prop() context: RenderBlockProps[\\"context\\"];

  get component() {
    const componentName = getProcessedBlock({
      block: this.block,
      state: this.context.state,
      context: this.context.context,
      shouldEvaluateBindings: false,
    }).component?.name;

    if (!componentName) {
      return null;
    }

    const ref = this.context.registeredComponents[componentName];

    if (!ref) {
      // TODO: Public doc page with more info about this message
      console.warn(\`
          Could not find a registered component named \\"\${componentName}\\".
          If you registered it, is the file that registered it imported by the file that needs to render it?\`);
      return undefined;
    } else {
      return ref;
    }
  }
  get tag() {
    return getBlockTag(this.useBlock);
  }
  get useBlock() {
    return this.repeatItemData
      ? this.block
      : getProcessedBlock({
          block: this.block,
          state: this.context.state,
          context: this.context.context,
          shouldEvaluateBindings: true,
        });
  }
  get actions() {
    return getBlockActions({
      block: this.useBlock,
      state: this.context.state,
      context: this.context.context,
    });
  }
  get attributes() {
    const blockProperties = getBlockProperties(this.useBlock);
    return {
      ...blockProperties,
      ...(TARGET === \\"reactNative\\"
        ? {
            style: getReactNativeBlockStyles({
              block: this.useBlock,
              context: this.context,
              blockStyles: blockProperties.style,
            }),
          }
        : {}),
    };
  }
  get shouldWrap() {
    return !this.component?.noWrap;
  }
  get renderComponentProps() {
    return {
      blockChildren: this.useChildren,
      componentRef: this.component?.component,
      componentOptions: {
        ...getBlockComponentOptions(this.useBlock),

        /**
         * These attributes are passed to the wrapper element when there is one. If \`noWrap\` is set to true, then
         * they are provided to the component itself directly.
         */
        ...(this.shouldWrap
          ? {}
          : {
              attributes: { ...this.attributes, ...this.actions },
            }),
        customBreakpoints: this.childrenContext?.content?.meta?.breakpoints,
      },
      context: this.childrenContext,
    };
  }
  get useChildren() {
    // TO-DO: When should \`canHaveChildren\` dictate rendering?
    // This is currently commented out because some Builder components (e.g. Box) do not have \`canHaveChildren: true\`,
    // but still receive and need to render children.
    // return state.componentInfo?.canHaveChildren ? state.useBlock.children : [];
    return this.useBlock.children ?? [];
  }
  get childrenWithoutParentComponent() {
    /**
     * When there is no \`componentRef\`, there might still be children that need to be rendered. In this case,
     * we render them outside of \`componentRef\`.
     * NOTE: We make sure not to render this if \`repeatItemData\` is non-null, because that means we are rendering an array of
     * blocks, and the children will be repeated within those blocks.
     */
    const shouldRenderChildrenOutsideRef =
      !this.component?.component && !this.repeatItemData;
    return shouldRenderChildrenOutsideRef ? this.useChildren : [];
  }
  get repeatItemData() {
    /**
     * we don't use \`state.useBlock\` here because the processing done within its logic includes evaluating the block's bindings,
     * which will not work if there is a repeat.
     */
    const { repeat, ...blockWithoutRepeat } = this.block;

    if (!repeat?.collection) {
      return undefined;
    }

    const itemsArray = evaluate({
      code: repeat.collection,
      state: this.context.state,
      context: this.context.context,
    });

    if (!Array.isArray(itemsArray)) {
      return undefined;
    }

    const collectionName = repeat.collection.split(\\".\\").pop();
    const itemNameToUse =
      repeat.itemName || (collectionName ? collectionName + \\"Item\\" : \\"item\\");
    const repeatArray = itemsArray.map<RepeatData>((item, index) => ({
      context: {
        ...this.context,
        state: {
          ...this.context.state,
          $index: index,
          $item: item,
          [itemNameToUse]: item,
          [\`$\${itemNameToUse}Index\`]: index,
        },
      },
      block: blockWithoutRepeat,
    }));
    return repeatArray;
  }
  get inheritedTextStyles() {
    if (TARGET !== \\"reactNative\\") {
      return {};
    }

    const styles = getReactNativeBlockStyles({
      block: this.useBlock,
      context: this.context,
      blockStyles: this.attributes.style,
    });
    return extractTextStyles(styles);
  }
  get childrenContext() {
    return {
      apiKey: this.context.apiKey,
      state: this.context.state,
      content: this.context.content,
      context: this.context.context,
      registeredComponents: this.context.registeredComponents,
      inheritedStyles: this.inheritedTextStyles,
    };
  }
  get renderComponentTag() {
    if (TARGET === \\"reactNative\\") {
      return RenderComponentWithContext;
    } else if (TARGET === \\"vue3\\") {
      // vue3 expects a string for the component tag
      return \\"RenderComponent\\";
    } else {
      return RenderComponent;
    }
  }

  render() {
    return (
      <Host>
        {this.shouldWrap ? (
          <Fragment>
            {isEmptyHtmlElement(this.tag) ? (
              <this.tag {...this.attributes} {...this.actions}></this.tag>
            ) : null}
            {!isEmptyHtmlElement(this.tag) && this.repeatItemData
              ? this.repeatItemData?.map((data, index) => (
                  <render-repeated-block
                    key={index}
                    repeatContext={data.context}
                    block={data.block}
                  ></render-repeated-block>
                ))
              : null}
            {!isEmptyHtmlElement(this.tag) && !this.repeatItemData ? (
              <this.tag {...this.attributes} {...this.actions}>
                <this.renderComponentTag
                  {...this.renderComponentProps}
                ></this.renderComponentTag>
                {this.childrenWithoutParentComponent?.map((child) => (
                  <render-block
                    key={\\"render-block-\\" + child.id}
                    block={child}
                    context={this.childrenContext}
                  ></render-block>
                ))}
                {this.childrenWithoutParentComponent?.map((child) => (
                  <block-styles
                    key={\\"block-style-\\" + child.id}
                    block={child}
                    context={this.childrenContext}
                  ></block-styles>
                ))}
              </this.tag>
            ) : null}
          </Fragment>
        ) : (
          <this.renderComponentTag
            {...this.renderComponentProps}
          ></this.renderComponentTag>
        )}
      </Host>
    );
  }
}
"
`;

exports[`Stencil > jsx > Typescript Test > renderContentExample 1`] = `
"import BuilderContext from \\"@dummy/context.js\\";
import {
  dispatchNewContentToVisualEditor,
  sendComponentsToVisualEditor,
  trackClick,
} from \\"@dummy/injection-js\\";
import { RenderBlocks } from \\"@dummy/RenderBlocks.lite.tsx\\";

import { Component, h, Fragment, Prop } from \\"@stencil/core\\";

type Props = {
  customComponents: string[];
  content: {
    blocks: any[];
    id: string;
  };
};

@Component({
  tag: \\"render-content\\",

  styles: \`
        .div {
          display: flex;
          flex-direction: columns;
        }
\`,
})
export class RenderContent {
  @Prop() customComponents: Props[\\"customComponents\\"];
  @Prop() content: Props[\\"content\\"];

  componentDidLoad() {
    sendComponentsToVisualEditor(this.customComponents);
  }

  componentDidUpdate() {
    dispatchNewContentToVisualEditor(this.content);
  }

  render() {
    return (
      <div class=\\"div\\" onClick={() => trackClick(this.content.id)}>
        <render-blocks blocks={this.content.blocks}></render-blocks>
      </div>
    );
  }
}
"
`;

exports[`Stencil > jsx > Typescript Test > rootFragmentMultiNode 1`] = `
"import { Component, h, Fragment, Prop } from \\"@stencil/core\\";

export interface ButtonProps {
  attributes?: any;
  text?: string;
  link?: string;
  openLinkInNewTab?: boolean;
}

@Component({
  tag: \\"button\\",
})
export class Button {
  @Prop() link: ButtonProps[\\"link\\"];
  @Prop() attributes: ButtonProps[\\"attributes\\"];
  @Prop() openLinkInNewTab: ButtonProps[\\"openLinkInNewTab\\"];
  @Prop() text: ButtonProps[\\"text\\"];

  render() {
    return (
      <Fragment>
        {this.link ? (
          <a
            {...this.attributes}
            href={this.link}
            target={this.openLinkInNewTab ? \\"_blank\\" : undefined}
          >
            {this.text}
          </a>
        ) : null}
        {!this.link ? (
          <button type=\\"button\\" {...this.attributes}>
            {this.text}
          </button>
        ) : null}
      </Fragment>
    );
  }
}
"
`;

exports[`Stencil > jsx > Typescript Test > self-referencing component 1`] = `
"import { Component, h, Fragment, Prop } from \\"@stencil/core\\";

@Component({
  tag: \\"my-component\\",
})
export class MyComponent {
  @Prop() name: any;

  render() {
    return (
      <div>
        {this.name}
        {this.name === \\"Batman\\" ? (
          <my-component name=\\"Bruce Wayne\\"></my-component>
        ) : null}
      </div>
    );
  }
}
"
`;

exports[`Stencil > jsx > Typescript Test > self-referencing component with children 1`] = `
"import { Component, h, Fragment, Prop } from \\"@stencil/core\\";

@Component({
  tag: \\"my-component\\",
})
export class MyComponent {
  @Prop() name: any;
  @Prop() children: any;

  render() {
    return (
      <div>
        {this.name}
        <slot></slot>
        {this.name === \\"Batman\\" ? (
          <my-component name=\\"Bruce\\">
            <div>Wayne</div>
          </my-component>
        ) : null}
      </div>
    );
  }
}
"
`;

exports[`Stencil > jsx > Typescript Test > signalsOnUpdate 1`] = `
"import { Component, h, Fragment, Prop } from \\"@stencil/core\\";

type Props = {
  id: string;
  foo: {
    bar: {
      baz: number;
    };
  };
};

@Component({
  tag: \\"my-basic-component\\",

  styles: \`
        .div {
          padding: 10px;
        }
\`,
})
export class MyBasicComponent {
  @Prop() id: Props[\\"id\\"];
  @Prop() foo: Props[\\"foo\\"];

  componentDidUpdate() {
    console.log(\\"props.id changed\\", this.id);
    console.log(\\"props.foo.value.bar.baz changed\\", this.foo.bar.baz);
  }

  render() {
    return (
      <div class=\\"test div\\">
        {this.id}
        {this.foo.bar.baz}
      </div>
    );
  }
}
"
`;

exports[`Stencil > jsx > Typescript Test > spreadAttrs 1`] = `
"import { Component, h, Fragment } from \\"@stencil/core\\";

@Component({
  tag: \\"my-basic-component\\",
})
export class MyBasicComponent {
  render() {
    return <input {...attrs} />;
  }
}
"
`;

exports[`Stencil > jsx > Typescript Test > spreadNestedProps 1`] = `
"import { Component, h, Fragment, Prop } from \\"@stencil/core\\";

@Component({
  tag: \\"my-basic-component\\",
})
export class MyBasicComponent {
  @Prop() nested: any;

  render() {
    return <input {...this.nested} />;
  }
}
"
`;

exports[`Stencil > jsx > Typescript Test > spreadProps 1`] = `
"import { Component, h, Fragment } from \\"@stencil/core\\";

@Component({
  tag: \\"my-basic-component\\",
})
export class MyBasicComponent {
  render() {
    return <input {...this} />;
  }
}
"
`;

exports[`Stencil > jsx > Typescript Test > string-literal-store 1`] = `
"import { Component, h, Fragment, State } from \\"@stencil/core\\";

@Component({
  tag: \\"string-literal-store\\",
})
export class StringLiteralStore {
  @State() foo = 123;

  render() {
    return <div>{this.foo}</div>;
  }
}
"
`;

exports[`Stencil > jsx > Typescript Test > styleClassAndCss 1`] = `
"import { Component, h, Fragment } from \\"@stencil/core\\";

@Component({
  tag: \\"my-component\\",

  styles: \`
        .div {
          display: flex;
          flex-direction: column;
          align-items: stretch;
        }
\`,
})
export class MyComponent {
  render() {
    return (
      <div
        class=\\"builder-column div\\"
        style={{
          width: \\"100%\\",
        }}
      ></div>
    );
  }
}
"
`;

exports[`Stencil > jsx > Typescript Test > stylePropClassAndCss 1`] = `
"import { Component, h, Fragment, Prop } from \\"@stencil/core\\";

@Component({
  tag: \\"style-prop-class-and-css\\",

  styles: \`
        .div {
          display: flex;
          flex-direction: column;
          align-items: stretch;
        }
\`,
})
export class StylePropClassAndCss {
  @Prop() attributes: any;

  render() {
    return (
      <div
        class={this.attributes.class + \\" div\\"}
        style={this.attributes.style}
      ></div>
    );
  }
}
"
`;

exports[`Stencil > jsx > Typescript Test > subComponent 1`] = `
"import { Foo } from \\"./foo-sub-component.lite\\";

import { Component, h, Fragment } from \\"@stencil/core\\";

@Component({
  tag: \\"sub-component\\",
})
export class SubComponent {
  render() {
    return <foo></foo>;
  }
}
"
`;

exports[`Stencil > jsx > Typescript Test > svgComponent 1`] = `
"import { Component, h, Fragment } from \\"@stencil/core\\";

@Component({
  tag: \\"svg-component\\",
})
export class SvgComponent {
  render() {
    return (
      <svg
        fill=\\"none\\"
        role=\\"img\\"
        viewBox={\\"0 0 \\" + 42 + \\" \\" + 42}
        width={42}
        height={42}
      >
        <defs>
          <filter id=\\"prefix__filter0_f\\" filterUnits=\\"userSpaceOnUse\\">
            <feFlood result=\\"BackgroundImageFix\\"></feFlood>
            <feBlend
              in=\\"SourceGraphic\\"
              in2=\\"BackgroundImageFix\\"
              result=\\"shape\\"
            ></feBlend>
            <feGaussianBlur
              result=\\"effect1_foregroundBlur\\"
              stdDeviation={7}
            ></feGaussianBlur>
          </filter>
        </defs>
      </svg>
    );
  }
}
"
`;

exports[`Stencil > jsx > Typescript Test > typeDependency 1`] = `
"import type { Foo } from \\"./foo-type\\";
import type { Foo as Foo2 } from \\"./type-export\\";

import { Component, h, Fragment, Prop } from \\"@stencil/core\\";

export type TypeDependencyProps = {
  foo: Foo;
  foo2: Foo2;
};

@Component({
  tag: \\"type-dependency\\",
})
export class TypeDependency {
  @Prop() foo: TypeDependencyProps[\\"foo\\"];

  render() {
    return <div>{this.foo}</div>;
  }
}
"
`;

exports[`Stencil > jsx > Typescript Test > typeExternalStore 1`] = `
"import { FooStore } from \\"./foo-store\\";

import { Component, h, Fragment, State } from \\"@stencil/core\\";

@Component({
  tag: \\"type-external-store\\",
})
export class TypeExternalStore {
  @State() _name = \\"test\\";

  render() {
    return (
      <div>
        Hello
        {this._name}!{\\" \\"}
      </div>
    );
  }
}
"
`;

exports[`Stencil > jsx > Typescript Test > typeGetterStore 1`] = `
"import { Component, h, Fragment, State } from \\"@stencil/core\\";

type GetterStore = {
  getName: () => string;
  name: string;
  get test(): string;
};

@Component({
  tag: \\"type-getter-store\\",
})
export class TypeGetterStore {
  @State() name = \\"test\\";

  getName() {
    if (this.name === \\"a\\") {
      return \\"b\\";
    }

    return this.name;
  }
  get test() {
    return \\"test\\";
  }

  render() {
    return (
      <div>
        Hello
        {this.name}!{\\" \\"}
      </div>
    );
  }
}
"
`;

exports[`Stencil > jsx > Typescript Test > use-style 1`] = `
"import { Component, h, Fragment } from \\"@stencil/core\\";

@Component({
  tag: \\"my-component\\",

  styles: \`
        button {
          background: blue;
          color: white;
          font-size: 12px;
          outline: 1px solid black;
        }
\`,
})
export class MyComponent {
  render() {
    return <button type=\\"button\\">Button</button>;
  }
}
"
`;

exports[`Stencil > jsx > Typescript Test > use-style-and-css 1`] = `
"import { Component, h, Fragment } from \\"@stencil/core\\";

@Component({
  tag: \\"my-component\\",

  styles: \`
        button {
          font-size: 12px;
          outline: 1px solid black;
        }

        .button {
          background: blue;
          color: white;
        }
\`,
})
export class MyComponent {
  render() {
    return (
      <button class=\\"button\\" type=\\"button\\">
        Button
      </button>
    );
  }
}
"
`;

exports[`Stencil > jsx > Typescript Test > use-style-outside-component 1`] = `
"import { Component, h, Fragment } from \\"@stencil/core\\";

@Component({
  tag: \\"my-component\\",

  styles: \`
        button {
          background: blue;
          color: white;
          font-size: 12px;
          outline: 1px solid black;
        }
\`,
})
export class MyComponent {
  render() {
    return <button type=\\"button\\">Button</button>;
  }
}
"
`;

exports[`Stencil > jsx > Typescript Test > useTarget 1`] = `
"import { Component, h, Fragment, State } from \\"@stencil/core\\";

@Component({
  tag: \\"use-target-component\\",
})
export class UseTargetComponent {
  @State() lastName = \\"bar\\";

  get name() {
    const prefix = \\"st\\";
    return prefix + \\"foo\\";
  }

  componentDidLoad() {}

  render() {
    return <div>{this.name}</div>;
  }
}
"
`;

exports[`Stencil > jsx > Typescript Test > webComponent 1`] = `
"import { register } from \\"swiper/element/bundle\\";

import { Component, h, Fragment } from \\"@stencil/core\\";

@Component({
  tag: \\"my-basic-web-component\\",
})
export class MyBasicWebComponent {
  render() {
    return (
      <swiper-container slides-per-view=\\"3\\" navigation=\\"true\\" pagination=\\"true\\">
        <swiper-slide>Slide 1</swiper-slide>
        <swiper-slide>Slide 2</swiper-slide>
        <swiper-slide>Slide 3</swiper-slide>
      </swiper-container>
    );
  }
}
"
`;

exports[`Stencil > svelte > Javascript Test > basic 1`] = `
"import { Component, h, Fragment, State } from \\"@stencil/core\\";

@Component({
  tag: \\"my-component\\",
})
export class MyComponent {
  @State() name = \\"Steve\\";

  render() {
    return (
      <div>
        <input
          onInput={(event) => (this.name = event.target.value)}
          value={this.name}
        />
        Hello! I can run in React, Vue, Solid, or Liquid!
      </div>
    );
  }
}
"
`;

exports[`Stencil > svelte > Javascript Test > bindGroup 1`] = `
"import { Component, h, Fragment, State } from \\"@stencil/core\\";

@Component({
  tag: \\"my-component\\",
})
export class MyComponent {
  @State() tortilla = \\"Plain\\";
  @State() fillings = [];

  render() {
    return (
      <div>
        <input
          type=\\"radio\\"
          value=\\"Plain\\"
          checked={this.tortilla === \\"Plain\\"}
          onInput={(event) => (this.tortilla = event.target.value)}
        />
        <input
          type=\\"radio\\"
          value=\\"Whole wheat\\"
          checked={this.tortilla === \\"Whole wheat\\"}
          onInput={(event) => (this.tortilla = event.target.value)}
        />
        <input
          type=\\"radio\\"
          value=\\"Spinach\\"
          checked={this.tortilla === \\"Spinach\\"}
          onInput={(event) => (this.tortilla = event.target.value)}
        />
        <br />
        <br />
        <input
          type=\\"checkbox\\"
          value=\\"Rice\\"
          checked={this.fillings === \\"Rice\\"}
          onInput={(event) => (this.fillings = event.target.value)}
        />
        <input
          type=\\"checkbox\\"
          value=\\"Beans\\"
          checked={this.fillings === \\"Beans\\"}
          onInput={(event) => (this.fillings = event.target.value)}
        />
        <input
          type=\\"checkbox\\"
          value=\\"Cheese\\"
          checked={this.fillings === \\"Cheese\\"}
          onInput={(event) => (this.fillings = event.target.value)}
        />
        <input
          type=\\"checkbox\\"
          value=\\"Guac (extra)\\"
          checked={this.fillings === \\"Guac (extra)\\"}
          onInput={(event) => (this.fillings = event.target.value)}
        />
        <p>
          Tortilla:
          {this.tortilla}
        </p>
        <p>
          Fillings:
          {this.fillings}
        </p>
      </div>
    );
  }
}
"
`;

exports[`Stencil > svelte > Javascript Test > bindProperty 1`] = `
"import { Component, h, Fragment, State } from \\"@stencil/core\\";

@Component({
  tag: \\"my-component\\",
})
export class MyComponent {
  @State() value = \\"hello\\";

  render() {
    return <input value={this.value} />;
  }
}
"
`;

exports[`Stencil > svelte > Javascript Test > classDirective 1`] = `
"import { Component, h, Fragment, Prop, State } from \\"@stencil/core\\";

@Component({
  tag: \\"my-component\\",
})
export class MyComponent {
  @Prop() disabled: any;
  @State() focus = true;

  render() {
    return (
      <input
        class={\`form-input \${this.disabled ? \\"disabled\\" : \\"\\"} \${
          this.focus ? \\"focus\\" : \\"\\"
        }\`}
      />
    );
  }
}
"
`;

exports[`Stencil > svelte > Javascript Test > context 1`] = `
"import { Component, h, Fragment, State } from \\"@stencil/core\\";

@Component({
  tag: \\"my-component\\",
})
export class MyComponent {
  @State() activeTab = 0;

  render() {
    return <div>{this.activeTab}</div>;
  }
}
"
`;

exports[`Stencil > svelte > Javascript Test > each 1`] = `
"import { Component, h, Fragment, State } from \\"@stencil/core\\";

@Component({
  tag: \\"my-component\\",
})
export class MyComponent {
  @State() numbers = [\\"one\\", \\"two\\", \\"three\\"];

  render() {
    return (
      <ul>
        {this.numbers?.map((num) => (
          <li>{num}</li>
        ))}
      </ul>
    );
  }
}
"
`;

exports[`Stencil > svelte > Javascript Test > eventHandlers 1`] = `
"import { Component, h, Fragment } from \\"@stencil/core\\";

@Component({
  tag: \\"my-component\\",
})
export class MyComponent {
  log = function log(msg = \\"hello\\") {
    console.log(msg);
  };

  render() {
    return (
      <div>
        <button onClick={(a) => this.log(\\"hi\\")}>Log</button>
        <button onClick={() => this.log(event)}>Log</button>
        <button onClick={() => this.log(event)}>Log</button>
      </div>
    );
  }
}
"
`;

exports[`Stencil > svelte > Javascript Test > html 1`] = `
"import { Component, h, Fragment, State } from \\"@stencil/core\\";

@Component({
  tag: \\"my-component\\",
})
export class MyComponent {
  @State() html = \\"<b>bold</b>\\";

  render() {
    return <div innerHTML={this.html}></div>;
  }
}
"
`;

exports[`Stencil > svelte > Javascript Test > ifElse 1`] = `
"import { Component, h, Fragment, Host, State } from \\"@stencil/core\\";

@Component({
  tag: \\"my-component\\",
})
export class MyComponent {
  @State() show = true;

  toggle = function toggle() {
    this.show = !this.show;
  };

  render() {
    return (
      <Host>
        {this.show ? (
          <button onClick={() => this.toggle(event)}> Hide </button>
        ) : (
          <button onClick={() => this.toggle(event)}> Show </button>
        )}
      </Host>
    );
  }
}
"
`;

exports[`Stencil > svelte > Javascript Test > imports 1`] = `
"import { Button } from \\"./Button.lite\\";

import { Component, h, Fragment, State } from \\"@stencil/core\\";

@Component({
  tag: \\"my-component\\",
})
export class MyComponent {
  @State() disabled = false;

  render() {
    return (
      <div>
        <button type=\\"button\\" disabled={this.disabled}>
          <slot></slot>
        </button>
      </div>
    );
  }
}
"
`;

exports[`Stencil > svelte > Javascript Test > lifecycleHooks 1`] = `
"import { Component, h, Fragment } from \\"@stencil/core\\";

@Component({
  tag: \\"my-component\\",
})
export class MyComponent {
  componentDidLoad() {
    console.log(\\"onMount\\");
  }
  disconnectedCallback() {
    console.log(\\"onDestroy\\");
  }
  componentDidUpdate() {
    console.log(\\"onAfterUpdate\\");
  }

  render() {
    return <div></div>;
  }
}
"
`;

exports[`Stencil > svelte > Javascript Test > reactive 1`] = `
"import { Component, h, Fragment, State } from \\"@stencil/core\\";

@Component({
  tag: \\"my-component\\",
})
export class MyComponent {
  @State() name = \\"Steve\\";

  get lowercaseName() {
    return this.name.toLowerCase();
  }

  render() {
    return (
      <div>
        <input value={this.name} />
        Lowercase:
        {this.lowercaseName}
      </div>
    );
  }
}
"
`;

exports[`Stencil > svelte > Javascript Test > reactiveWithFn 1`] = `
"import { Component, h, Fragment, State } from \\"@stencil/core\\";

@Component({
  tag: \\"my-component\\",
})
export class MyComponent {
  @State() a = 2;
  @State() b = 5;
  @State() result = null;

  calculateResult = function calculateResult(a_, b_) {
    this.result = a_ * b_;
  };

  componentDidUpdate() {
    this.calculateResult(this.a, this.b);
  }

  render() {
    return (
      <div>
        <input
          type=\\"number\\"
          onInput={(event) => (this.a = event.target.value)}
          value={this.a}
        />
        <input
          type=\\"number\\"
          onInput={(event) => (this.b = event.target.value)}
          value={this.b}
        />
        Result:
        {this.result}
      </div>
    );
  }
}
"
`;

exports[`Stencil > svelte > Javascript Test > slots 1`] = `
"import { Component, h, Fragment } from \\"@stencil/core\\";

@Component({
  tag: \\"my-component\\",
})
export class MyComponent {
  render() {
    return (
      <div>
        <slot>default</slot>
        <slot name=\\"Test\\">
          <div>default</div>
        </slot>
      </div>
    );
  }
}
"
`;

exports[`Stencil > svelte > Javascript Test > style 1`] = `
"import { Component, h, Fragment } from \\"@stencil/core\\";

@Component({
  tag: \\"my-component\\",

  styles: \`
        input {
          color: red;
          font-size: 12px;
        }

        .form-input:focus {
          outline: 1px solid blue;
        }
\`,
})
export class MyComponent {
  render() {
    return <input class=\\"form-input\\" />;
  }
}
"
`;

exports[`Stencil > svelte > Javascript Test > textExpressions 1`] = `
"import { Component, h, Fragment, State } from \\"@stencil/core\\";

@Component({
  tag: \\"my-component\\",
})
export class MyComponent {
  @State() a = 5;
  @State() b = 12;

  render() {
    return (
      <div>
        normal:
        {this.a + this.b}
        <br />
        conditional
        {this.a > 2 ? \\"hello\\" : \\"bye\\"}
      </div>
    );
  }
}
"
`;

exports[`Stencil > svelte > Typescript Test > basic 1`] = `
"import { Component, h, Fragment, State } from \\"@stencil/core\\";

@Component({
  tag: \\"my-component\\",
})
export class MyComponent {
  @State() name = \\"Steve\\";

  render() {
    return (
      <div>
        <input
          onInput={(event) => (this.name = event.target.value)}
          value={this.name}
        />
        Hello! I can run in React, Vue, Solid, or Liquid!
      </div>
    );
  }
}
"
`;

exports[`Stencil > svelte > Typescript Test > bindGroup 1`] = `
"import { Component, h, Fragment, State } from \\"@stencil/core\\";

@Component({
  tag: \\"my-component\\",
})
export class MyComponent {
  @State() tortilla = \\"Plain\\";
  @State() fillings = [];

  render() {
    return (
      <div>
        <input
          type=\\"radio\\"
          value=\\"Plain\\"
          checked={this.tortilla === \\"Plain\\"}
          onInput={(event) => (this.tortilla = event.target.value)}
        />
        <input
          type=\\"radio\\"
          value=\\"Whole wheat\\"
          checked={this.tortilla === \\"Whole wheat\\"}
          onInput={(event) => (this.tortilla = event.target.value)}
        />
        <input
          type=\\"radio\\"
          value=\\"Spinach\\"
          checked={this.tortilla === \\"Spinach\\"}
          onInput={(event) => (this.tortilla = event.target.value)}
        />
        <br />
        <br />
        <input
          type=\\"checkbox\\"
          value=\\"Rice\\"
          checked={this.fillings === \\"Rice\\"}
          onInput={(event) => (this.fillings = event.target.value)}
        />
        <input
          type=\\"checkbox\\"
          value=\\"Beans\\"
          checked={this.fillings === \\"Beans\\"}
          onInput={(event) => (this.fillings = event.target.value)}
        />
        <input
          type=\\"checkbox\\"
          value=\\"Cheese\\"
          checked={this.fillings === \\"Cheese\\"}
          onInput={(event) => (this.fillings = event.target.value)}
        />
        <input
          type=\\"checkbox\\"
          value=\\"Guac (extra)\\"
          checked={this.fillings === \\"Guac (extra)\\"}
          onInput={(event) => (this.fillings = event.target.value)}
        />
        <p>
          Tortilla:
          {this.tortilla}
        </p>
        <p>
          Fillings:
          {this.fillings}
        </p>
      </div>
    );
  }
}
"
`;

exports[`Stencil > svelte > Typescript Test > bindProperty 1`] = `
"import { Component, h, Fragment, State } from \\"@stencil/core\\";

@Component({
  tag: \\"my-component\\",
})
export class MyComponent {
  @State() value = \\"hello\\";

  render() {
    return <input value={this.value} />;
  }
}
"
`;

exports[`Stencil > svelte > Typescript Test > classDirective 1`] = `
"import { Component, h, Fragment, Prop, State } from \\"@stencil/core\\";

@Component({
  tag: \\"my-component\\",
})
export class MyComponent {
  @Prop() disabled: any;
  @State() focus = true;

  render() {
    return (
      <input
        class={\`form-input \${this.disabled ? \\"disabled\\" : \\"\\"} \${
          this.focus ? \\"focus\\" : \\"\\"
        }\`}
      />
    );
  }
}
"
`;

exports[`Stencil > svelte > Typescript Test > context 1`] = `
"import { Component, h, Fragment, State } from \\"@stencil/core\\";

@Component({
  tag: \\"my-component\\",
})
export class MyComponent {
  @State() activeTab = 0;

  render() {
    return <div>{this.activeTab}</div>;
  }
}
"
`;

exports[`Stencil > svelte > Typescript Test > each 1`] = `
"import { Component, h, Fragment, State } from \\"@stencil/core\\";

@Component({
  tag: \\"my-component\\",
})
export class MyComponent {
  @State() numbers = [\\"one\\", \\"two\\", \\"three\\"];

  render() {
    return (
      <ul>
        {this.numbers?.map((num) => (
          <li>{num}</li>
        ))}
      </ul>
    );
  }
}
"
`;

exports[`Stencil > svelte > Typescript Test > eventHandlers 1`] = `
"import { Component, h, Fragment } from \\"@stencil/core\\";

@Component({
  tag: \\"my-component\\",
})
export class MyComponent {
  log = function log(msg = \\"hello\\") {
    console.log(msg);
  };

  render() {
    return (
      <div>
        <button onClick={(a) => this.log(\\"hi\\")}>Log</button>
        <button onClick={() => this.log(event)}>Log</button>
        <button onClick={() => this.log(event)}>Log</button>
      </div>
    );
  }
}
"
`;

exports[`Stencil > svelte > Typescript Test > html 1`] = `
"import { Component, h, Fragment, State } from \\"@stencil/core\\";

@Component({
  tag: \\"my-component\\",
})
export class MyComponent {
  @State() html = \\"<b>bold</b>\\";

  render() {
    return <div innerHTML={this.html}></div>;
  }
}
"
`;

exports[`Stencil > svelte > Typescript Test > ifElse 1`] = `
"import { Component, h, Fragment, Host, State } from \\"@stencil/core\\";

@Component({
  tag: \\"my-component\\",
})
export class MyComponent {
  @State() show = true;

  toggle = function toggle() {
    this.show = !this.show;
  };

  render() {
    return (
      <Host>
        {this.show ? (
          <button onClick={() => this.toggle(event)}> Hide </button>
        ) : (
          <button onClick={() => this.toggle(event)}> Show </button>
        )}
      </Host>
    );
  }
}
"
`;

exports[`Stencil > svelte > Typescript Test > imports 1`] = `
"import { Button } from \\"./Button.lite\\";

import { Component, h, Fragment, State } from \\"@stencil/core\\";

@Component({
  tag: \\"my-component\\",
})
export class MyComponent {
  @State() disabled = false;

  render() {
    return (
      <div>
        <button type=\\"button\\" disabled={this.disabled}>
          <slot></slot>
        </button>
      </div>
    );
  }
}
"
`;

exports[`Stencil > svelte > Typescript Test > lifecycleHooks 1`] = `
"import { Component, h, Fragment } from \\"@stencil/core\\";

@Component({
  tag: \\"my-component\\",
})
export class MyComponent {
  componentDidLoad() {
    console.log(\\"onMount\\");
  }
  disconnectedCallback() {
    console.log(\\"onDestroy\\");
  }
  componentDidUpdate() {
    console.log(\\"onAfterUpdate\\");
  }

  render() {
    return <div></div>;
  }
}
"
`;

exports[`Stencil > svelte > Typescript Test > reactive 1`] = `
"import { Component, h, Fragment, State } from \\"@stencil/core\\";

@Component({
  tag: \\"my-component\\",
})
export class MyComponent {
  @State() name = \\"Steve\\";

  get lowercaseName() {
    return this.name.toLowerCase();
  }

  render() {
    return (
      <div>
        <input value={this.name} />
        Lowercase:
        {this.lowercaseName}
      </div>
    );
  }
}
"
`;

exports[`Stencil > svelte > Typescript Test > reactiveWithFn 1`] = `
"import { Component, h, Fragment, State } from \\"@stencil/core\\";

@Component({
  tag: \\"my-component\\",
})
export class MyComponent {
  @State() a = 2;
  @State() b = 5;
  @State() result = null;

  calculateResult = function calculateResult(a_, b_) {
    this.result = a_ * b_;
  };

  componentDidUpdate() {
    this.calculateResult(this.a, this.b);
  }

  render() {
    return (
      <div>
        <input
          type=\\"number\\"
          onInput={(event) => (this.a = event.target.value)}
          value={this.a}
        />
        <input
          type=\\"number\\"
          onInput={(event) => (this.b = event.target.value)}
          value={this.b}
        />
        Result:
        {this.result}
      </div>
    );
  }
}
"
`;

exports[`Stencil > svelte > Typescript Test > slots 1`] = `
"import { Component, h, Fragment } from \\"@stencil/core\\";

@Component({
  tag: \\"my-component\\",
})
export class MyComponent {
  render() {
    return (
      <div>
        <slot>default</slot>
        <slot name=\\"Test\\">
          <div>default</div>
        </slot>
      </div>
    );
  }
}
"
`;

exports[`Stencil > svelte > Typescript Test > style 1`] = `
"import { Component, h, Fragment } from \\"@stencil/core\\";

@Component({
  tag: \\"my-component\\",

  styles: \`
        input {
          color: red;
          font-size: 12px;
        }

        .form-input:focus {
          outline: 1px solid blue;
        }
\`,
})
export class MyComponent {
  render() {
    return <input class=\\"form-input\\" />;
  }
}
"
`;

exports[`Stencil > svelte > Typescript Test > textExpressions 1`] = `
"import { Component, h, Fragment, State } from \\"@stencil/core\\";

@Component({
  tag: \\"my-component\\",
})
export class MyComponent {
  @State() a = 5;
  @State() b = 12;

  render() {
    return (
      <div>
        normal:
        {this.a + this.b}
        <br />
        conditional
        {this.a > 2 ? \\"hello\\" : \\"bye\\"}
      </div>
    );
  }
}
"
`;
