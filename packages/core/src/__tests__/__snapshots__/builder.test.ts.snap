// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`Builder > Columns 1`] = `
{
  "data": {
    "blocks": [
      {
        "@type": "@builder.io/sdk:Element",
        "actions": {},
        "bindings": {},
        "children": [
          {
            "@type": "@builder.io/sdk:Element",
            "children": [
              {
                "@type": "@builder.io/sdk:Element",
                "actions": {},
                "bindings": {},
                "children": [
                  {
                    "@type": "@builder.io/sdk:Element",
                    "bindings": {
                      "component.options.text": "column.content",
                    },
                    "component": {
                      "name": "Text",
                      "options": {},
                    },
                    "tagName": "span",
                  },
                  {
                    "@type": "@builder.io/sdk:Element",
                    "bindings": {
                      "component.options.text": "state.$index",
                    },
                    "component": {
                      "name": "Text",
                      "options": {},
                    },
                    "tagName": "span",
                  },
                ],
                "code": {
                  "actions": {},
                  "bindings": {},
                },
                "properties": {
                  "class": "builder-column",
                },
                "responsiveStyles": {
                  "large": {
                    "flexGrow": "1",
                  },
                },
                "tagName": "div",
              },
            ],
            "component": {
              "name": "Core:Fragment",
            },
            "repeat": {
              "collection": "props.columns",
              "itemName": "column",
            },
          },
        ],
        "code": {
          "actions": {},
          "bindings": {},
        },
        "properties": {
          "class": "builder-columns",
        },
        "responsiveStyles": {
          "large": {
            "alignItems": "stretch",
            "display": "flex",
            "flexDirection": "row",
            "lineHeight": "normal",
          },
          "small": {
            "flexDirection": "row-reverse",
          },
        },
        "tagName": "div",
      },
    ],
    "jsCode": "var props = state;

Object.assign(state, {
  getColumns() {
    return props.columns || [];
  },
  getGutterSize() {
    return typeof props.space === \\"number\\" ? props.space || 0 : 20;
  },
  getWidth(index) {
    const columns = state.getColumns();
    return (columns[index] && columns[index].width) || 100 / columns.length;
  },
  getColumnCssWidth(index) {
    const columns = state.getColumns();
    const gutterSize = state.getGutterSize();
    const subtractWidth = (gutterSize * (columns.length - 1)) / columns.length;
    return \`calc(\${state.getWidth(index)}% - \${subtractWidth}px)\`;
  },
});
",
    "tsCode": "var props = state;

useStore({
  getColumns() {
    return props.columns || [];
  },
  getGutterSize() {
    return typeof props.space === \\"number\\" ? props.space || 0 : 20;
  },
  getWidth(index) {
    const columns = state.getColumns();
    return (columns[index] && columns[index].width) || 100 / columns.length;
  },
  getColumnCssWidth(index) {
    const columns = state.getColumns();
    const gutterSize = state.getGutterSize();
    const subtractWidth = (gutterSize * (columns.length - 1)) / columns.length;
    return \`calc(\${state.getWidth(index)}% - \${subtractWidth}px)\`;
  },
});
",
  },
}
`;

exports[`Builder > Columns 2`] = `
"import { useStore, For } from \\"@builder.io/mitosis\\";

export default function MyComponent(props) {
  const state = useStore({
    getColumns() {
      return props.columns || [];
    },
    getGutterSize() {
      return typeof props.space === \\"number\\" ? props.space || 0 : 20;
    },
    getWidth(index) {
      const columns = state.getColumns();
      return (columns[index] && columns[index].width) || 100 / columns.length;
    },
    getColumnCssWidth(index) {
      const columns = state.getColumns();
      const gutterSize = state.getGutterSize();
      const subtractWidth =
        (gutterSize * (columns.length - 1)) / columns.length;
      return \`calc(\${state.getWidth(index)}% - \${subtractWidth}px)\`;
    },
  });

  onMount(() => {
    var props = state;
  });

  return (
    <div
      class=\\"builder-columns\\"
      css={{
        display: \\"flex\\",
        flexDirection: \\"row\\",
        alignItems: \\"stretch\\",
        lineHeight: \\"normal\\",
        \\"@media (max-width: 640px)\\": {
          flexDirection: \\"row-reverse\\",
        },
      }}
    >
      <For each={props.columns}>
        {(column, index) => (
          <div
            class=\\"builder-column\\"
            css={{
              flexGrow: \\"1\\",
            }}
          >
            <span>{column.content}</span>
            <span>{index}</span>
          </div>
        )}
      </For>
    </div>
  );
}
"
`;

exports[`Builder > CustomCode 1`] = `
{
  "data": {
    "blocks": [
      {
        "@type": "@builder.io/sdk:Element",
        "actions": {},
        "bindings": {
          "class": "'builder-custom-code' + (props.replaceNodes ? ' replace-nodes' : '')",
          "innerHTML": "props.code",
          "ref": "elem",
        },
        "children": [],
        "code": {
          "actions": {},
          "bindings": {},
        },
        "properties": {},
        "tagName": "div",
      },
    ],
    "jsCode": "var props = state;

Object.assign(state, {
  scriptsInserted: [],
  scriptsRun: [],
  findAndRunScripts() {
    // TODO: Move this function to standalone one in '@builder.io/utils'
    if (elem && typeof window !== \\"undefined\\") {
      /** @type {HTMLScriptElement[]} */
      const scripts = elem.getElementsByTagName(\\"script\\");

      for (let i = 0; i < scripts.length; i++) {
        const script = scripts[i];

        if (script.src) {
          if (state.scriptsInserted.includes(script.src)) {
            continue;
          }

          state.scriptsInserted.push(script.src);
          const newScript = document.createElement(\\"script\\");
          newScript.async = true;
          newScript.src = script.src;
          document.head.appendChild(newScript);
        } else if (
          !script.type ||
          [
            \\"text/javascript\\",
            \\"application/javascript\\",
            \\"application/ecmascript\\",
          ].includes(script.type)
        ) {
          if (state.scriptsRun.includes(script.innerText)) {
            continue;
          }

          try {
            state.scriptsRun.push(script.innerText);
            new Function(script.innerText)();
          } catch (error) {
            console.warn(\\"\`CustomCode\`: Error running script:\\", error);
          }
        }
      }
    }
  },
});

state.findAndRunScripts();
",
    "tsCode": "var props = state;

useStore({
  scriptsInserted: [],
  scriptsRun: [],
  findAndRunScripts() {
    // TODO: Move this function to standalone one in '@builder.io/utils'
    if (elem && typeof window !== \\"undefined\\") {
      /** @type {HTMLScriptElement[]} */
      const scripts = elem.getElementsByTagName(\\"script\\");

      for (let i = 0; i < scripts.length; i++) {
        const script = scripts[i];

        if (script.src) {
          if (state.scriptsInserted.includes(script.src)) {
            continue;
          }

          state.scriptsInserted.push(script.src);
          const newScript = document.createElement(\\"script\\");
          newScript.async = true;
          newScript.src = script.src;
          document.head.appendChild(newScript);
        } else if (
          !script.type ||
          [
            \\"text/javascript\\",
            \\"application/javascript\\",
            \\"application/ecmascript\\",
          ].includes(script.type)
        ) {
          if (state.scriptsRun.includes(script.innerText)) {
            continue;
          }

          try {
            state.scriptsRun.push(script.innerText);
            new Function(script.innerText)();
          } catch (error) {
            console.warn(\\"\`CustomCode\`: Error running script:\\", error);
          }
        }
      }
    }
  },
});

onMount(() => {
  state.findAndRunScripts();
});
",
  },
}
`;

exports[`Builder > CustomCode 2`] = `
"import { useStore, useRef } from \\"@builder.io/mitosis\\";

export default function MyComponent(props) {
  const state = useStore({
    scriptsInserted: [],
    scriptsRun: [],
    findAndRunScripts() {
      // TODO: Move this function to standalone one in '@builder.io/utils'
      if (elem.current && typeof window !== \\"undefined\\") {
        /** @type {HTMLScriptElement[]} */
        const scripts = elem.current.getElementsByTagName(\\"script\\");

        for (let i = 0; i < scripts.length; i++) {
          const script = scripts[i];

          if (script.src) {
            if (state.scriptsInserted.includes(script.src)) {
              continue;
            }

            state.scriptsInserted.push(script.src);
            const newScript = document.createElement(\\"script\\");
            newScript.async = true;
            newScript.src = script.src;
            document.head.appendChild(newScript);
          } else if (
            !script.type ||
            [
              \\"text/javascript\\",
              \\"application/javascript\\",
              \\"application/ecmascript\\",
            ].includes(script.type)
          ) {
            if (state.scriptsRun.includes(script.innerText)) {
              continue;
            }

            try {
              state.scriptsRun.push(script.innerText);
              new Function(script.innerText)();
            } catch (error) {
              console.warn(\\"\`CustomCode\`: Error running script:\\", error);
            }
          }
        }
      }
    },
  });

  const elem = useRef();

  onMount(() => {
    state.findAndRunScripts();
  });

  return (
    <div
      ref={elem}
      class={
        \\"builder-custom-code\\" + (props.replaceNodes ? \\" replace-nodes\\" : \\"\\")
      }
      innerHTML={props.code}
    />
  );
}
"
`;

exports[`Builder > Embed 1`] = `
{
  "data": {
    "blocks": [
      {
        "@type": "@builder.io/sdk:Element",
        "actions": {},
        "bindings": {
          "innerHTML": "props.content",
          "ref": "elem",
        },
        "children": [],
        "code": {
          "actions": {},
          "bindings": {},
        },
        "properties": {
          "class": "builder-embed",
        },
        "tagName": "div",
      },
    ],
    "jsCode": "var props = state;

Object.assign(state, {
  scriptsInserted: [],
  scriptsRun: [],
  findAndRunScripts() {
    // TODO: Move this function to standalone one in '@builder.io/utils'
    if (elem && typeof window !== \\"undefined\\") {
      /** @type {HTMLScriptElement[]} */
      const scripts = elem.getElementsByTagName(\\"script\\");

      for (let i = 0; i < scripts.length; i++) {
        const script = scripts[i];

        if (script.src) {
          if (state.scriptsInserted.includes(script.src)) {
            continue;
          }

          state.scriptsInserted.push(script.src);
          const newScript = document.createElement(\\"script\\");
          newScript.async = true;
          newScript.src = script.src;
          document.head.appendChild(newScript);
        } else if (
          !script.type ||
          [
            \\"text/javascript\\",
            \\"application/javascript\\",
            \\"application/ecmascript\\",
          ].includes(script.type)
        ) {
          if (state.scriptsRun.includes(script.innerText)) {
            continue;
          }

          try {
            state.scriptsRun.push(script.innerText);
            new Function(script.innerText)();
          } catch (error) {
            console.warn(\\"\`Embed\`: Error running script:\\", error);
          }
        }
      }
    }
  },
});

state.findAndRunScripts();
",
    "tsCode": "var props = state;

useStore({
  scriptsInserted: [],
  scriptsRun: [],
  findAndRunScripts() {
    // TODO: Move this function to standalone one in '@builder.io/utils'
    if (elem && typeof window !== \\"undefined\\") {
      /** @type {HTMLScriptElement[]} */
      const scripts = elem.getElementsByTagName(\\"script\\");

      for (let i = 0; i < scripts.length; i++) {
        const script = scripts[i];

        if (script.src) {
          if (state.scriptsInserted.includes(script.src)) {
            continue;
          }

          state.scriptsInserted.push(script.src);
          const newScript = document.createElement(\\"script\\");
          newScript.async = true;
          newScript.src = script.src;
          document.head.appendChild(newScript);
        } else if (
          !script.type ||
          [
            \\"text/javascript\\",
            \\"application/javascript\\",
            \\"application/ecmascript\\",
          ].includes(script.type)
        ) {
          if (state.scriptsRun.includes(script.innerText)) {
            continue;
          }

          try {
            state.scriptsRun.push(script.innerText);
            new Function(script.innerText)();
          } catch (error) {
            console.warn(\\"\`Embed\`: Error running script:\\", error);
          }
        }
      }
    }
  },
});

onMount(() => {
  state.findAndRunScripts();
});
",
  },
}
`;

exports[`Builder > Embed 2`] = `
"import { useStore, useRef } from \\"@builder.io/mitosis\\";

export default function MyComponent(props) {
  const state = useStore({
    scriptsInserted: [],
    scriptsRun: [],
    findAndRunScripts() {
      // TODO: Move this function to standalone one in '@builder.io/utils'
      if (elem.current && typeof window !== \\"undefined\\") {
        /** @type {HTMLScriptElement[]} */
        const scripts = elem.current.getElementsByTagName(\\"script\\");

        for (let i = 0; i < scripts.length; i++) {
          const script = scripts[i];

          if (script.src) {
            if (state.scriptsInserted.includes(script.src)) {
              continue;
            }

            state.scriptsInserted.push(script.src);
            const newScript = document.createElement(\\"script\\");
            newScript.async = true;
            newScript.src = script.src;
            document.head.appendChild(newScript);
          } else if (
            !script.type ||
            [
              \\"text/javascript\\",
              \\"application/javascript\\",
              \\"application/ecmascript\\",
            ].includes(script.type)
          ) {
            if (state.scriptsRun.includes(script.innerText)) {
              continue;
            }

            try {
              state.scriptsRun.push(script.innerText);
              new Function(script.innerText)();
            } catch (error) {
              console.warn(\\"\`Embed\`: Error running script:\\", error);
            }
          }
        }
      }
    },
  });

  const elem = useRef();

  onMount(() => {
    state.findAndRunScripts();
  });

  return <div class=\\"builder-embed\\" ref={elem} innerHTML={props.content} />;
}
"
`;

exports[`Builder > Image 1`] = `
{
  "data": {
    "blocks": [
      {
        "@type": "@builder.io/sdk:Element",
        "actions": {},
        "bindings": {},
        "children": [
          {
            "@type": "@builder.io/sdk:Element",
            "actions": {},
            "bindings": {
              "ref": "pictureRef",
            },
            "children": [
              {
                "@type": "@builder.io/sdk:Element",
                "bindings": {
                  "show": "!state.useLazyLoading() || state.load",
                },
                "children": [
                  {
                    "@type": "@builder.io/sdk:Element",
                    "actions": {
                      "load": "state.setLoaded()",
                    },
                    "bindings": {
                      "alt": "props.altText",
                      "aria-role": "props.altText ? 'presentation' : undefined",
                      "class": "'builder-image' + (props._class ? ' ' + props._class : '')",
                      "sizes": "props.sizes",
                      "src": "props.image",
                      "srcset": "props.srcset",
                    },
                    "children": [],
                    "code": {
                      "actions": {
                        "load": "state.setLoaded()",
                      },
                      "bindings": {},
                    },
                    "properties": {},
                    "responsiveStyles": {
                      "large": {
                        "objectFit": "cover",
                        "objectPosition": "center",
                        "opacity": "1",
                        "transition": "opacity 0.2s ease-in-out",
                      },
                    },
                    "tagName": "img",
                  },
                ],
                "component": {
                  "name": "Core:Fragment",
                },
              },
              {
                "@type": "@builder.io/sdk:Element",
                "actions": {},
                "bindings": {
                  "srcset": "props.srcset",
                },
                "children": [],
                "code": {
                  "actions": {},
                  "bindings": {},
                },
                "properties": {},
                "tagName": "source",
              },
            ],
            "code": {
              "actions": {},
              "bindings": {},
            },
            "properties": {},
            "tagName": "picture",
          },
          {
            "@type": "@builder.io/sdk:Element",
            "bindings": {
              "component.options.text": "props.children",
            },
            "component": {
              "name": "Text",
              "options": {},
            },
            "tagName": "span",
          },
        ],
        "code": {
          "actions": {},
          "bindings": {},
        },
        "properties": {},
        "tagName": "div",
      },
    ],
    "jsCode": "var props = state;

Object.assign(state, {
  scrollListener: null,
  imageLoaded: false,
  setLoaded() {
    state.imageLoaded = true;
  },
  useLazyLoading() {
    // TODO: Add more checks here, like testing for real web browsers
    return !!props.lazy && state.isBrowser();
  },
  isBrowser: function isBrowser() {
    return (
      typeof window !== \\"undefined\\" && window.navigator.product != \\"ReactNative\\"
    );
  },
  load: false,
});

if (state.useLazyLoading()) {
  // throttled scroll capture listener
  const listener = () => {
    if (pictureRef) {
      const rect = pictureRef.getBoundingClientRect();
      const buffer = window.innerHeight / 2;

      if (rect.top < window.innerHeight + buffer) {
        state.load = true;
        state.scrollListener = null;
        window.removeEventListener(\\"scroll\\", listener);
      }
    }
  };

  state.scrollListener = listener;
  window.addEventListener(\\"scroll\\", listener, {
    capture: true,
    passive: true,
  });
  listener();
}
",
    "tsCode": "var props = state;

useStore({
  scrollListener: null,
  imageLoaded: false,
  setLoaded() {
    state.imageLoaded = true;
  },
  useLazyLoading() {
    // TODO: Add more checks here, like testing for real web browsers
    return !!props.lazy && state.isBrowser();
  },
  isBrowser: function isBrowser() {
    return (
      typeof window !== \\"undefined\\" && window.navigator.product != \\"ReactNative\\"
    );
  },
  load: false,
});

onMount(() => {
  if (state.useLazyLoading()) {
    // throttled scroll capture listener
    const listener = () => {
      if (pictureRef) {
        const rect = pictureRef.getBoundingClientRect();
        const buffer = window.innerHeight / 2;

        if (rect.top < window.innerHeight + buffer) {
          state.load = true;
          state.scrollListener = null;
          window.removeEventListener(\\"scroll\\", listener);
        }
      }
    };

    state.scrollListener = listener;
    window.addEventListener(\\"scroll\\", listener, {
      capture: true,
      passive: true,
    });
    listener();
  }
});
",
  },
}
`;

exports[`Builder > Image 2`] = `
"import { useStore, useRef, Show } from \\"@builder.io/mitosis\\";

export default function MyComponent(props) {
  const state = useStore({
    scrollListener: null,
    imageLoaded: false,
    setLoaded() {
      state.imageLoaded = true;
    },
    useLazyLoading() {
      // TODO: Add more checks here, like testing for real web browsers
      return !!props.lazy && state.isBrowser();
    },
    isBrowser: function isBrowser() {
      return (
        typeof window !== \\"undefined\\" &&
        window.navigator.product != \\"ReactNative\\"
      );
    },
    load: false,
  });

  const pictureRef = useRef();

  onMount(() => {
    if (state.useLazyLoading()) {
      // throttled scroll capture listener
      const listener = () => {
        if (pictureRef.current) {
          const rect = pictureRef.current.getBoundingClientRect();
          const buffer = window.innerHeight / 2;

          if (rect.top < window.innerHeight + buffer) {
            state.load = true;
            state.scrollListener = null;
            window.removeEventListener(\\"scroll\\", listener);
          }
        }
      };

      state.scrollListener = listener;
      window.addEventListener(\\"scroll\\", listener, {
        capture: true,
        passive: true,
      });
      listener();
    }
  });

  return (
    <div>
      <picture ref={pictureRef}>
        <Show when={!state.useLazyLoading() || state.load}>
          <img
            alt={props.altText}
            aria-role={props.altText ? \\"presentation\\" : undefined}
            class={\\"builder-image\\" + (props._class ? \\" \\" + props._class : \\"\\")}
            src={props.image}
            srcset={props.srcset}
            sizes={props.sizes}
            onLoad={(event) => state.setLoaded()}
            css={{
              opacity: \\"1\\",
              transition: \\"opacity 0.2s ease-in-out\\",
              objectFit: \\"cover\\",
              objectPosition: \\"center\\",
            }}
          />
        </Show>
        <source srcset={props.srcset} />
      </picture>
      <span>{props.children}</span>
    </div>
  );
}
"
`;

exports[`Builder > No srcset for SVG 1`] = `
"<img
  loading=\\"lazy\\"
  src=\\"https://cdn.builder.io/api/v1/image/dummy.svg\\"
  class=\\"img\\"
/>
<style>
  .img {
    object-fit: cover;
    object-position: center;
    width: 100%;
  }
</style>
"
`;

exports[`Builder > Regenerate Image 1`] = `
"\\"use client\\";
import * as React from \\"react\\";
import { useState } from \\"react\\";
import { Image } from \\"@components\\";

function MyComponent(props) {
  const [people, setPeople] = useState(() => [\\"Steve\\", \\"Sewell\\"]);

  return (
    <>
      <div>
        <img
          loading=\\"lazy\\"
          sizes=\\"100vw\\"
          srcSet=\\"https://cdn.builder.io/api/v1/image/foobar?width=100 100w, https://cdn.builder.io/api/v1/image/foobar?width=200 200w, https://cdn.builder.io/api/v1/image/foobar?width=400 400w, https://cdn.builder.io/api/v1/image/foobar?width=800 800w, https://cdn.builder.io/api/v1/image/foobar?width=1200 1200w, https://cdn.builder.io/api/v1/image/foobar?width=1600 1600w, https://cdn.builder.io/api/v1/image/foobar?width=2000 2000w, https://cdn.builder.io/api/v1/image/foobar\\"
          className=\\"img\\"
        />
      </div>
      <style jsx>{\`
        .img {
          object-fit: contain;
          object-position: center;
          width: 100%;
        }
      \`}</style>
    </>
  );
}

export default MyComponent;
"
`;

exports[`Builder > Regenerate custom Hero 1`] = `
{
  "@type": "@builder.io/mitosis/component",
  "children": [
    {
      "@type": "@builder.io/mitosis/node",
      "bindings": {
        "css": {
          "code": "{
  display: \\"flex\\",
  flexDirection: \\"column\\",
  alignItems: \\"stretch\\",
  position: \\"relative\\",
  flexShrink: \\"0\\",
  boxSizing: \\"border-box\\",
  marginTop: \\"200px\\"
}",
          "type": "single",
        },
        "height": {
          "code": "400",
          "type": "single",
        },
      },
      "children": [],
      "meta": {},
      "name": "Hero",
      "properties": {
        "buttonLink": "https://example.com",
        "buttonText": "Click",
        "image": "https://cdn.builder.io/api/v1/image/assets%2FYJIGb4i01jvw0SRdL5Bt%2F52dcecf48f9c48cc8ddd8f81fec63236",
        "title": "Your Title Here",
      },
      "scope": {},
    },
  ],
  "context": {
    "get": {},
    "set": {},
  },
  "exports": {},
  "hooks": {
    "onEvent": [],
    "onMount": [],
  },
  "imports": [
    {
      "importKind": "value",
      "imports": {
        "Hero": "Hero",
      },
      "path": "@components",
    },
  ],
  "inputs": [],
  "meta": {},
  "name": "MyComponent",
  "refs": {},
  "state": {},
  "subComponents": [],
}
`;

exports[`Builder > Regenerate custom Hero 2`] = `
{
  "data": {
    "blocks": [
      {
        "@type": "@builder.io/sdk:Element",
        "actions": {},
        "bindings": {
          "component.options.height": "400",
        },
        "children": [],
        "code": {
          "actions": {},
          "bindings": {
            "component.options.height": "400",
          },
        },
        "component": {
          "name": "Hero",
          "options": {
            "buttonLink": "https://example.com",
            "buttonText": "Click",
            "height": 400,
            "image": "https://cdn.builder.io/api/v1/image/assets%2FYJIGb4i01jvw0SRdL5Bt%2F52dcecf48f9c48cc8ddd8f81fec63236",
            "title": "Your Title Here",
          },
        },
        "responsiveStyles": {
          "large": {
            "alignItems": "stretch",
            "boxSizing": "border-box",
            "display": "flex",
            "flexDirection": "column",
            "flexShrink": "0",
            "marginTop": "200px",
            "position": "relative",
          },
        },
      },
    ],
    "jsCode": "",
    "tsCode": "",
  },
}
`;

exports[`Builder > Regenerate custom Hero 3`] = `
{
  "@type": "@builder.io/mitosis/component",
  "children": [
    {
      "@type": "@builder.io/mitosis/node",
      "bindings": {
        "css": {
          "code": "{\\"display\\":\\"flex\\",\\"flexDirection\\":\\"column\\",\\"alignItems\\":\\"stretch\\",\\"position\\":\\"relative\\",\\"flexShrink\\":\\"0\\",\\"boxSizing\\":\\"border-box\\",\\"marginTop\\":\\"200px\\"}",
          "type": "single",
        },
        "height": {
          "code": "400",
          "type": "single",
        },
      },
      "children": [],
      "meta": {},
      "name": "Hero",
      "properties": {
        "$tagName": undefined,
        "buttonLink": "https://example.com",
        "buttonText": "Click",
        "image": "https://cdn.builder.io/api/v1/image/assets%2FYJIGb4i01jvw0SRdL5Bt%2F52dcecf48f9c48cc8ddd8f81fec63236",
        "title": "Your Title Here",
      },
      "scope": {},
      "slots": {},
    },
  ],
  "context": {
    "get": {},
    "set": {},
  },
  "exports": {},
  "hooks": {
    "onEvent": [],
    "onMount": [],
  },
  "imports": [],
  "inputs": undefined,
  "meta": {
    "useMetadata": {
      "httpRequests": undefined,
    },
  },
  "name": "MyComponent",
  "refs": {},
  "state": {},
  "subComponents": [],
}
`;

exports[`Builder > Regenerate loop with Text node when using CSS 1`] = `
"import { For } from \\"@builder.io/mitosis\\";

export default function MyComponent(props) {
  return (
    <For each={state.submenusItem.menuItems}>
      {(item, $index) => (
        <div
          class=\\"class-id\\"
          css={{
            padding: \\"2px\\",
          }}
        >
          text-content
        </div>
      )}
    </For>
  );
}"
`;

exports[`Builder > Section 1`] = `
"<div class=\\"div\\"><p>EAGER LOAD</p></div>
<div class=\\"div-2\\" data-el=\\"div-1\\">
  <section lazyLoad=\\"true\\" class=\\"section\\"><p>LAZY LOAD</p></section>
</div>
<style>
  .div {
    display: flex;
    flex-direction: column;
    position: relative;
    flex-shrink: 0;
    box-sizing: border-box;
    margin-top: 20px;
    line-height: normal;
    height: auto;
    text-align: center;
  }
  .div-2 {
    display: flex;
    flex-direction: column;
    position: relative;
    box-sizing: border-box;
    line-height: normal;
    height: auto;
    text-align: center;
    padding-left: 20px;
    padding-right: 20px;
    padding-top: 70px;
    padding-bottom: 50px;
    width: 100vw;
    margin-left: calc(50% - 50vw);
  }
  .section {
    display: flex;
    flex-direction: column;
    position: relative;
    box-sizing: border-box;
    line-height: normal;
    height: auto;
    text-align: center;
    padding-left: 20px;
    padding-right: 20px;
    padding-top: 70px;
    padding-bottom: 50px;
    width: 100%;
    margin-left: auto;
    align-self: stretch;
    flex-grow: 1;
    max-width: 1234px;
    align-items: stretch;
    margin-right: auto;
  }
</style>
<script>
  (() => {
    const state = {
      deviceSize: \\"large\\",
      location: {
        path: \\"\\",
        query: {},
      },
    };

    let context = null;
    let nodesToDestroy = [];
    let pendingUpdate = false;

    function destroyAnyNodes() {
      // destroy current view template refs before rendering again
      nodesToDestroy.forEach((el) => el.remove());
      nodesToDestroy = [];
    }

    // Function to update data bindings and loops
    // call update() when you mutate state and need the updates to reflect
    // in the dom
    function update() {
      if (pendingUpdate === true) {
        return;
      }
      pendingUpdate = true;

      document.querySelectorAll(\\"[data-el='div-1']\\").forEach((el) => {
        el.setAttribute(\\"maxWidth\\", 1234);

        el.setAttribute(\\"lazyLoad\\", true);
      });

      destroyAnyNodes();

      pendingUpdate = false;
    }

    // Update with initial state on first load
    update();
  })();
</script>
"
`;

exports[`Builder > Stamped 1`] = `
{
  "data": {
    "blocks": [
      {
        "@type": "@builder.io/sdk:Element",
        "actions": {},
        "bindings": {
          "data-user": "state.name",
        },
        "children": [
          {
            "@type": "@builder.io/sdk:Element",
            "actions": {
              "click": "state.showReviewPrompt = true",
            },
            "bindings": {},
            "children": [
              {
                "@type": "@builder.io/sdk:Element",
                "bindings": {},
                "component": {
                  "name": "Text",
                  "options": {
                    "text": "Write a review",
                  },
                },
                "tagName": "span",
              },
            ],
            "code": {
              "actions": {
                "click": "state.showReviewPrompt = true",
              },
              "bindings": {},
            },
            "properties": {},
            "tagName": "button",
          },
          {
            "@type": "@builder.io/sdk:Element",
            "bindings": {
              "show": "state.showReviewPrompt || 'asdf'",
            },
            "children": [
              {
                "@type": "@builder.io/sdk:Element",
                "actions": {},
                "bindings": {},
                "children": [],
                "code": {
                  "actions": {},
                  "bindings": {},
                },
                "properties": {
                  "placeholder": "Email",
                },
                "tagName": "input",
              },
              {
                "@type": "@builder.io/sdk:Element",
                "actions": {},
                "bindings": {},
                "children": [],
                "code": {
                  "actions": {},
                  "bindings": {},
                },
                "properties": {
                  "placeholder": "Title",
                },
                "responsiveStyles": {
                  "large": {
                    "display": "block",
                  },
                },
                "tagName": "input",
              },
              {
                "@type": "@builder.io/sdk:Element",
                "actions": {},
                "bindings": {},
                "children": [],
                "code": {
                  "actions": {},
                  "bindings": {},
                },
                "properties": {
                  "placeholder": "How was your experience?",
                },
                "responsiveStyles": {
                  "large": {
                    "display": "block",
                  },
                },
                "tagName": "textarea",
              },
              {
                "@type": "@builder.io/sdk:Element",
                "actions": {
                  "click": "
  event.preventDefault();
  state.showReviewPrompt = false;
",
                },
                "bindings": {},
                "children": [
                  {
                    "@type": "@builder.io/sdk:Element",
                    "bindings": {},
                    "component": {
                      "name": "Text",
                      "options": {
                        "text": "
          Submit
        ",
                      },
                    },
                    "tagName": "span",
                  },
                ],
                "code": {
                  "actions": {
                    "click": "
  event.preventDefault();
  state.showReviewPrompt = false;
",
                  },
                  "bindings": {},
                },
                "properties": {},
                "responsiveStyles": {
                  "large": {
                    "display": "block",
                  },
                },
                "tagName": "button",
              },
            ],
            "component": {
              "name": "Core:Fragment",
            },
          },
          {
            "@type": "@builder.io/sdk:Element",
            "children": [
              {
                "@type": "@builder.io/sdk:Element",
                "actions": {},
                "bindings": {
                  "key": "review.id",
                },
                "children": [
                  {
                    "@type": "@builder.io/sdk:Element",
                    "actions": {},
                    "bindings": {
                      "src": "review.avatar",
                    },
                    "children": [],
                    "code": {
                      "actions": {},
                      "bindings": {},
                    },
                    "properties": {},
                    "responsiveStyles": {
                      "large": {
                        "height": "30px",
                        "marginRight": "10px",
                        "width": "30px",
                      },
                    },
                    "tagName": "img",
                  },
                  {
                    "@type": "@builder.io/sdk:Element",
                    "actions": {},
                    "bindings": {
                      "class": "state.showReviewPrompt ? 'bg-primary' : 'bg-secondary'",
                    },
                    "children": [
                      {
                        "@type": "@builder.io/sdk:Element",
                        "actions": {},
                        "bindings": {},
                        "children": [
                          {
                            "@type": "@builder.io/sdk:Element",
                            "bindings": {},
                            "component": {
                              "name": "Text",
                              "options": {
                                "text": "N: ",
                              },
                            },
                            "tagName": "span",
                          },
                          {
                            "@type": "@builder.io/sdk:Element",
                            "bindings": {
                              "component.options.text": "state.$index",
                            },
                            "component": {
                              "name": "Text",
                              "options": {},
                            },
                            "tagName": "span",
                          },
                        ],
                        "code": {
                          "actions": {},
                          "bindings": {},
                        },
                        "properties": {},
                        "tagName": "div",
                      },
                      {
                        "@type": "@builder.io/sdk:Element",
                        "actions": {},
                        "bindings": {},
                        "children": [
                          {
                            "@type": "@builder.io/sdk:Element",
                            "bindings": {
                              "component.options.text": "review.author",
                            },
                            "component": {
                              "name": "Text",
                              "options": {},
                            },
                            "tagName": "span",
                          },
                        ],
                        "code": {
                          "actions": {},
                          "bindings": {},
                        },
                        "properties": {},
                        "tagName": "div",
                      },
                      {
                        "@type": "@builder.io/sdk:Element",
                        "actions": {},
                        "bindings": {},
                        "children": [
                          {
                            "@type": "@builder.io/sdk:Element",
                            "bindings": {
                              "component.options.text": "review.reviewMessage",
                            },
                            "component": {
                              "name": "Text",
                              "options": {},
                            },
                            "tagName": "span",
                          },
                        ],
                        "code": {
                          "actions": {},
                          "bindings": {},
                        },
                        "properties": {},
                        "tagName": "div",
                      },
                    ],
                    "code": {
                      "actions": {},
                      "bindings": {},
                    },
                    "properties": {},
                    "tagName": "div",
                  },
                ],
                "code": {
                  "actions": {},
                  "bindings": {},
                },
                "layerName": "Review",
                "properties": {},
                "responsiveStyles": {
                  "large": {
                    "WebkitFontSmoothing": "antialiased",
                    "background": "white",
                    "borderRadius": "5px",
                    "boxShadow": "0 2px 5px rgba(0, 0, 0, 0.1)",
                    "display": "flex",
                    "margin": "10px",
                    "padding": "10px",
                  },
                },
                "tagName": "div",
              },
            ],
            "component": {
              "name": "Core:Fragment",
            },
            "repeat": {
              "collection": "state.reviews",
              "itemName": "review",
            },
          },
        ],
        "code": {
          "actions": {},
          "bindings": {},
        },
        "properties": {},
        "tagName": "div",
      },
    ],
    "jsCode": "var props = state;

Object.assign(state, {
  reviews: [],
  name: \\"test\\",
  showReviewPrompt: false,
  kebabCaseValue() {
    return kebabCase(\\"testThat\\");
  },
  snakeCaseValue() {
    return snakeCase(\\"testThis\\");
  },
});

fetch(
  \`https://stamped.io/api/widget/reviews?storeUrl=builder-io.myshopify.com&apiKey=\${
    props.apiKey || \\"pubkey-8bbDq7W6w4sB3OWeM1HUy2s47702hM\\"
  }&productId=\${props.productId || \\"2410511106127\\"}\`
)
  .then((res) => res.json())
  .then((data) => {
    state.reviews = data.data;
  });
",
    "tsCode": "var props = state;

useStore({
  reviews: [],
  name: \\"test\\",
  showReviewPrompt: false,
  kebabCaseValue() {
    return kebabCase(\\"testThat\\");
  },
  snakeCaseValue() {
    return snakeCase(\\"testThis\\");
  },
});

onMount(() => {
  fetch(
    \`https://stamped.io/api/widget/reviews?storeUrl=builder-io.myshopify.com&apiKey=\${
      props.apiKey || \\"pubkey-8bbDq7W6w4sB3OWeM1HUy2s47702hM\\"
    }&productId=\${props.productId || \\"2410511106127\\"}\`
  )
    .then((res) => res.json())
    .then((data) => {
      state.reviews = data.data;
    });
});
",
  },
}
`;

exports[`Builder > Stamped 2`] = `
"import { useStore, Show, For } from \\"@builder.io/mitosis\\";

export default function MyComponent(props) {
  const state = useStore({
    reviews: [],
    name: \\"test\\",
    showReviewPrompt: false,
    kebabCaseValue() {
      return kebabCase(\\"testThat\\");
    },
    snakeCaseValue() {
      return snakeCase(\\"testThis\\");
    },
  });

  onMount(() => {
    fetch(
      \`https://stamped.io/api/widget/reviews?storeUrl=builder-io.myshopify.com&apiKey=\${
        props.apiKey || \\"pubkey-8bbDq7W6w4sB3OWeM1HUy2s47702hM\\"
      }&productId=\${props.productId || \\"2410511106127\\"}\`
    )
      .then((res) => res.json())
      .then((data) => {
        state.reviews = data.data;
      });
  });

  return (
    <div data-user={state.name}>
      <button onClick={(event) => (state.showReviewPrompt = true)}>
        Write a review
      </button>
      <Show when={state.showReviewPrompt || \\"asdf\\"}>
        <input placeholder=\\"Email\\" />
        <input
          placeholder=\\"Title\\"
          css={{
            display: \\"block\\",
          }}
        />
        <textarea
          placeholder=\\"How was your experience?\\"
          css={{
            display: \\"block\\",
          }}
        />
        <button
          onClick={(event) => {
            event.preventDefault();
            state.showReviewPrompt = false;
          }}
          css={{
            display: \\"block\\",
          }}
        >
          Submit
        </button>
      </Show>
      <For each={state.reviews}>
        {(review, index) => (
          <div
            $name=\\"Review\\"
            key={review.id}
            css={{
              margin: \\"10px\\",
              padding: \\"10px\\",
              background: \\"white\\",
              display: \\"flex\\",
              borderRadius: \\"5px\\",
              boxShadow: \\"0 2px 5px rgba(0, 0, 0, 0.1)\\",
              WebkitFontSmoothing: \\"antialiased\\",
            }}
          >
            <img
              src={review.avatar}
              css={{
                height: \\"30px\\",
                width: \\"30px\\",
                marginRight: \\"10px\\",
              }}
            />
            <div class={state.showReviewPrompt ? \\"bg-primary\\" : \\"bg-secondary\\"}>
              <div>
                <span>N: </span>
                <span>{index}</span>
              </div>
              <div>{review.author}</div>
              <div>{review.reviewMessage}</div>
            </div>
          </div>
        )}
      </For>
    </div>
  );
}
"
`;

exports[`Builder > binding 1`] = `
{
  "@type": "@builder.io/mitosis/component",
  "children": [
    {
      "@type": "@builder.io/mitosis/node",
      "bindings": {
        "label": {
          "code": "state.text",
          "type": "single",
        },
      },
      "children": [],
      "meta": {},
      "name": "Button",
      "properties": {
        "$tagName": undefined,
        "label": "hello",
      },
      "scope": {},
      "slots": {},
    },
    {
      "@type": "@builder.io/mitosis/node",
      "bindings": {
        "css": {
          "code": "{backgroundColor:'rgba(0, 0, 0, 1)',display:'flex',paddingLeft:'72px',paddingRight:'72px',paddingTop:'25px',paddingBottom:'25px',alignItems:'start',gap:'10px',fontFamily:'Poppins, -apple-system, Roboto, Helvetica, sans-serif',fontSize:'16px',color:'rgba(255, 255, 255, 1)',fontWeight:'700',textTransform:'uppercase',justifyContent:'start'}",
          "type": "single",
        },
      },
      "children": [
        {
          "@type": "@builder.io/mitosis/node",
          "bindings": {
            "_text": {
              "code": "state.text",
              "type": "single",
            },
          },
          "children": [],
          "meta": {},
          "name": "div",
          "properties": {},
          "scope": {},
        },
      ],
      "meta": {},
      "name": "div",
      "properties": {
        "$name": "Book an Appointment",
      },
      "scope": {},
      "slots": {},
    },
  ],
  "context": {
    "get": {},
    "set": {},
  },
  "exports": {},
  "hooks": {
    "onEvent": [],
    "onMount": [],
  },
  "imports": [],
  "inputs": [
    {
      "defaultValue": "Hello",
      "name": "text",
    },
  ],
  "meta": {
    "cssCode": "builder-component { max-width: none !important; }",
    "useMetadata": {
      "httpRequests": undefined,
    },
  },
  "name": "MyComponent",
  "refs": {},
  "state": {},
  "subComponents": [],
}
`;

exports[`Builder > binding 2`] = `
"import { Button } from \\"@components\\";

export default function MyComponent(props) {
  return (
    <>
      <Button label=\\"hello\\" label={state.text} />
      <div
        $name=\\"Book an Appointment\\"
        css={{
          backgroundColor: \\"rgba(0, 0, 0, 1)\\",
          display: \\"flex\\",
          paddingLeft: \\"72px\\",
          paddingRight: \\"72px\\",
          paddingTop: \\"25px\\",
          paddingBottom: \\"25px\\",
          alignItems: \\"start\\",
          gap: \\"10px\\",
          fontFamily: \\"Poppins, -apple-system, Roboto, Helvetica, sans-serif\\",
          fontSize: \\"16px\\",
          color: \\"rgba(255, 255, 255, 1)\\",
          fontWeight: \\"700\\",
          textTransform: \\"uppercase\\",
          justifyContent: \\"start\\",
        }}
      >
        {state.text}
      </div>
    </>
  );
}
"
`;

exports[`Builder > booleans 1`] = `
{
  "@type": "@builder.io/mitosis/component",
  "children": [
    {
      "@type": "@builder.io/mitosis/node",
      "bindings": {
        "focused": {
          "code": "true",
          "type": "single",
        },
      },
      "children": [],
      "meta": {},
      "name": "TextField",
      "properties": {
        "$tagName": undefined,
        "label": "Search by title",
        "size": "medium",
        "value": "Senior|",
        "variant": "outlined",
      },
      "scope": {},
      "slots": {},
    },
  ],
  "context": {
    "get": {},
    "set": {},
  },
  "exports": {},
  "hooks": {
    "onEvent": [],
    "onMount": [],
  },
  "imports": [],
  "inputs": undefined,
  "meta": {
    "useMetadata": {
      "httpRequests": undefined,
    },
  },
  "name": "MyComponent",
  "refs": {},
  "state": {},
  "subComponents": [],
}
`;

exports[`Builder > booleans 2`] = `
"import * as React from \\"react\\";

function MyComponent(props) {
  return (
    <TextField
      label=\\"Search by title\\"
      size=\\"medium\\"
      value=\\"Senior|\\"
      variant=\\"outlined\\"
      focused
    />
  );
}

export default MyComponent;
"
`;

exports[`Builder > customComponentSlotProperty 1`] = `
{
  "@type": "@builder.io/mitosis/component",
  "children": [
    {
      "@type": "@builder.io/mitosis/node",
      "bindings": {
        "css": {
          "code": "{\\"position\\":\\"relative\\",\\"width\\":\\"100%\\",\\"@media (max-width: 991px)\\":{\\"maxWidth\\":\\"100%\\"}}",
          "type": "single",
        },
      },
      "children": [],
      "meta": {},
      "name": "Navigation",
      "properties": {
        "$tagName": undefined,
      },
      "scope": {},
      "slots": {
        "logo": [
          {
            "@type": "@builder.io/mitosis/node",
            "bindings": {
              "css": {
                "code": "{\\"alignItems\\":\\"flex-start\\",\\"alignSelf\\":\\"stretch\\",\\"display\\":\\"flex\\",\\"flexBasis\\":\\"0%\\",\\"flexDirection\\":\\"column\\",\\"justifyContent\\":\\"center\\"}",
                "type": "single",
              },
            },
            "children": [],
            "meta": {},
            "name": "Logo",
            "properties": {},
            "scope": {},
            "slots": {},
          },
        ],
        "logoMultiple": [
          {
            "@type": "@builder.io/mitosis/node",
            "bindings": {
              "css": {
                "code": "{\\"alignItems\\":\\"flex-start\\",\\"alignSelf\\":\\"stretch\\",\\"display\\":\\"flex\\",\\"flexBasis\\":\\"0%\\",\\"flexDirection\\":\\"column\\",\\"justifyContent\\":\\"center\\"}",
                "type": "single",
              },
            },
            "children": [],
            "meta": {},
            "name": "Logo",
            "properties": {},
            "scope": {},
            "slots": {},
          },
          {
            "@type": "@builder.io/mitosis/node",
            "bindings": {
              "css": {
                "code": "{\\"alignItems\\":\\"flex-start\\",\\"alignSelf\\":\\"stretch\\",\\"display\\":\\"flex\\",\\"flexBasis\\":\\"0%\\",\\"flexDirection\\":\\"column\\",\\"justifyContent\\":\\"center\\"}",
                "type": "single",
              },
            },
            "children": [],
            "meta": {},
            "name": "LogoTwo",
            "properties": {},
            "scope": {},
            "slots": {},
          },
        ],
        "logoSingle": [
          {
            "@type": "@builder.io/mitosis/node",
            "bindings": {
              "css": {
                "code": "{\\"alignItems\\":\\"flex-start\\",\\"alignSelf\\":\\"stretch\\",\\"display\\":\\"flex\\",\\"flexBasis\\":\\"0%\\",\\"flexDirection\\":\\"column\\",\\"justifyContent\\":\\"center\\"}",
                "type": "single",
              },
            },
            "children": [],
            "meta": {},
            "name": "Logo",
            "properties": {},
            "scope": {},
            "slots": {},
          },
        ],
      },
    },
  ],
  "context": {
    "get": {},
    "set": {},
  },
  "exports": {},
  "hooks": {
    "onEvent": [],
    "onMount": [],
  },
  "imports": [],
  "inputs": undefined,
  "meta": {
    "useMetadata": {
      "httpRequests": undefined,
    },
  },
  "name": "MyComponent",
  "refs": {},
  "state": {},
  "subComponents": [],
}
`;

exports[`Builder > customComponentSlotProperty 2`] = `
"import * as React from \\"react\\";

function MyComponent(props) {
  return (
    <>
      <Navigation
        className=\\"navigation\\"
        logo={<Logo className=\\"logo\\" />}
        logoSingle={<Logo className=\\"logo\\" />}
        logoMultiple={
          <>
            <Logo className=\\"logo\\" />
            <LogoTwo className=\\"logo-two\\" />
          </>
        }
      />
      <style jsx>{\`
        .navigation {
          position: relative;
          width: 100%;
        }
        @media (max-width: 991px) {
          .navigation {
            max-width: 100%;
          }
        }
        .logo {
          align-items: flex-start;
          align-self: stretch;
          display: flex;
          flex-basis: 0%;
          flex-direction: column;
          justify-content: center;
        }
        .logo-two {
          align-items: flex-start;
          align-self: stretch;
          display: flex;
          flex-basis: 0%;
          flex-direction: column;
          justify-content: center;
        }
      \`}</style>
    </>
  );
}

export default MyComponent;
"
`;

exports[`Builder > extractStateHook 1`] = `
{
  "code": "useState({
  foo: 'bar'
});
alert('hi');",
  "state": {},
}
`;

exports[`Builder > slots 1`] = `
{
  "@type": "@builder.io/mitosis/component",
  "children": [
    {
      "@type": "@builder.io/mitosis/node",
      "bindings": {
        "css": {
          "code": "{\\"width\\":\\"100%\\",\\"@media (max-width: 991px)\\":{\\"maxWidth\\":\\"100%\\"}}",
          "type": "single",
        },
      },
      "children": [],
      "meta": {},
      "name": "CardHeader",
      "properties": {
        "$name": "CardHeader",
        "$tagName": undefined,
        "title": "The Burgler",
      },
      "scope": {},
      "slots": {
        "avatar": [
          {
            "@type": "@builder.io/mitosis/node",
            "bindings": {},
            "children": [],
            "meta": {},
            "name": "Avatar",
            "properties": {},
            "scope": {},
            "slots": {},
          },
        ],
      },
    },
  ],
  "context": {
    "get": {},
    "set": {},
  },
  "exports": {},
  "hooks": {
    "onEvent": [],
    "onMount": [],
  },
  "imports": [],
  "inputs": undefined,
  "meta": {
    "useMetadata": {
      "httpRequests": undefined,
    },
  },
  "name": "MyComponent",
  "refs": {},
  "state": {},
  "subComponents": [],
}
`;

exports[`Builder > slots 2`] = `
"import * as React from \\"react\\";

function MyComponent(props) {
  return (
    <>
      <CardHeader
        title=\\"The Burgler\\"
        className=\\"card-header\\"
        avatar={<Avatar />}
      />
      <style jsx>{\`
        .card-header {
          width: 100%;
        }
        @media (max-width: 991px) {
          .card-header {
            max-width: 100%;
          }
        }
      \`}</style>
    </>
  );
}

export default MyComponent;
"
`;

exports[`Builder > slots2 1`] = `
{
  "@type": "@builder.io/mitosis/component",
  "children": [
    {
      "@type": "@builder.io/mitosis/node",
      "bindings": {
        "css": {
          "code": "{\\"fontStyle\\":\\"italic\\"}",
          "type": "single",
        },
        "disabled": {
          "code": "false",
          "type": "single",
        },
      },
      "children": [],
      "meta": {},
      "name": "FormControlLabel",
      "properties": {
        "$tagName": undefined,
        "label": "Label",
        "labelPlacement": "end",
      },
      "scope": {},
      "slots": {
        "control": [
          {
            "@type": "@builder.io/mitosis/node",
            "bindings": {},
            "children": [],
            "meta": {},
            "name": "Radio",
            "properties": {},
            "scope": {},
            "slots": {},
          },
        ],
      },
    },
  ],
  "context": {
    "get": {},
    "set": {},
  },
  "exports": {},
  "hooks": {
    "onEvent": [],
    "onMount": [],
  },
  "imports": [],
  "inputs": undefined,
  "meta": {
    "useMetadata": {
      "httpRequests": undefined,
    },
  },
  "name": "MyComponent",
  "refs": {},
  "state": {},
  "subComponents": [],
}
`;

exports[`Builder > slots2 2`] = `
"import * as React from \\"react\\";

function MyComponent(props) {
  return (
    <>
      <FormControlLabel
        label=\\"Label\\"
        labelPlacement=\\"end\\"
        className=\\"form-control-label\\"
        disabled={false}
        control={<Radio />}
      />
      <style jsx>{\`
        .form-control-label {
          font-style: italic;
        }
      \`}</style>
    </>
  );
}

export default MyComponent;
"
`;
