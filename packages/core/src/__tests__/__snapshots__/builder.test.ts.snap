// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Builder CustomCode 1`] = `
Object {
  "data": Object {
    "blocks": Array [
      Object {
        "@type": "@builder.io/sdk:Element",
        "actions": Object {},
        "bindings": Object {
          "class": "'builder-custom-code' + (props.replaceNodes ? ' replace-nodes' : '')",
          "innerHTML": "props.code",
          "ref": "elem",
        },
        "children": Array [],
        "code": Object {
          "actions": Object {},
        },
        "properties": Object {},
        "tagName": "div",
      },
    ],
    "jsCode": "var props = state;

Object.assign(state, {
  scriptsInserted: [],
  scriptsRun: [],
  findAndRunScripts() {
    // TODO: Move this function to standalone one in '@builder.io/utils'
    if (elem && typeof window !== \\"undefined\\") {
      /** @type {HTMLScriptElement[]} */
      const scripts = elem.getElementsByTagName(\\"script\\");

      for (let i = 0; i < scripts.length; i++) {
        const script = scripts[i];

        if (script.src) {
          if (state.scriptsInserted.includes(script.src)) {
            continue;
          }

          state.scriptsInserted.push(script.src);
          const newScript = document.createElement(\\"script\\");
          newScript.async = true;
          newScript.src = script.src;
          document.head.appendChild(newScript);
        } else if (
          !script.type ||
          [
            \\"text/javascript\\",
            \\"application/javascript\\",
            \\"application/ecmascript\\",
          ].includes(script.type)
        ) {
          if (state.scriptsRun.includes(script.innerText)) {
            continue;
          }

          try {
            state.scriptsRun.push(script.innerText);
            new Function(script.innerText)();
          } catch (error) {
            console.warn(\\"\`CustomCode\`: Error running script:\\", error);
          }
        }
      }
    }
  },
});

state.findAndRunScripts();
",
    "tsCode": "var props = state;

useState({
  scriptsInserted: [],
  scriptsRun: [],
  findAndRunScripts() {
    // TODO: Move this function to standalone one in '@builder.io/utils'
    if (elem && typeof window !== \\"undefined\\") {
      /** @type {HTMLScriptElement[]} */
      const scripts = elem.getElementsByTagName(\\"script\\");

      for (let i = 0; i < scripts.length; i++) {
        const script = scripts[i];

        if (script.src) {
          if (state.scriptsInserted.includes(script.src)) {
            continue;
          }

          state.scriptsInserted.push(script.src);
          const newScript = document.createElement(\\"script\\");
          newScript.async = true;
          newScript.src = script.src;
          document.head.appendChild(newScript);
        } else if (
          !script.type ||
          [
            \\"text/javascript\\",
            \\"application/javascript\\",
            \\"application/ecmascript\\",
          ].includes(script.type)
        ) {
          if (state.scriptsRun.includes(script.innerText)) {
            continue;
          }

          try {
            state.scriptsRun.push(script.innerText);
            new Function(script.innerText)();
          } catch (error) {
            console.warn(\\"\`CustomCode\`: Error running script:\\", error);
          }
        }
      }
    }
  },
});

onMount(() => {
  state.findAndRunScripts();
});
",
  },
}
`;

exports[`Builder CustomCode 2`] = `
"import { useRef } from \\"@jsx-lite/core\\";

export default function MyComponent(props) {
  const elem = useRef();

  onMount(() => {
    useState({
      scriptsInserted: [],
      scriptsRun: [],

      findAndRunScripts() {
        // TODO: Move this function to standalone one in '@builder.io/utils'
        if (elem.current && typeof window !== \\"undefined\\") {
          /** @type {HTMLScriptElement[]} */
          const scripts = elem.current.getElementsByTagName(\\"script\\");

          for (let i = 0; i < scripts.length; i++) {
            const script = scripts[i];

            if (script.src) {
              if (state.scriptsInserted.includes(script.src)) {
                continue;
              }

              state.scriptsInserted.push(script.src);
              const newScript = document.createElement(\\"script\\");
              newScript.async = true;
              newScript.src = script.src;
              document.head.appendChild(newScript);
            } else if (
              !script.type ||
              [
                \\"text/javascript\\",
                \\"application/javascript\\",
                \\"application/ecmascript\\",
              ].includes(script.type)
            ) {
              if (state.scriptsRun.includes(script.innerText)) {
                continue;
              }

              try {
                state.scriptsRun.push(script.innerText);
                new Function(script.innerText)();
              } catch (error) {
                console.warn(\\"\`CustomCode\`: Error running script:\\", error);
              }
            }
          }
        }
      },
    });
    onMount(() => {
      state.findAndRunScripts();
    });
  });

  return (
    <div
      ref={elem}
      class={
        \\"builder-custom-code\\" + (props.replaceNodes ? \\" replace-nodes\\" : \\"\\")
      }
      innerHTML={props.code}
    ></div>
  );
}
"
`;

exports[`Builder Embed 1`] = `
Object {
  "data": Object {
    "blocks": Array [
      Object {
        "@type": "@builder.io/sdk:Element",
        "actions": Object {},
        "bindings": Object {
          "innerHTML": "props.content",
          "ref": "elem",
        },
        "children": Array [],
        "code": Object {
          "actions": Object {},
        },
        "properties": Object {
          "class": "builder-embed",
        },
        "tagName": "div",
      },
    ],
    "jsCode": "var props = state;

Object.assign(state, {
  scriptsInserted: [],
  scriptsRun: [],
  findAndRunScripts() {
    // TODO: Move this function to standalone one in '@builder.io/utils'
    if (elem && typeof window !== \\"undefined\\") {
      /** @type {HTMLScriptElement[]} */
      const scripts = elem.getElementsByTagName(\\"script\\");

      for (let i = 0; i < scripts.length; i++) {
        const script = scripts[i];

        if (script.src) {
          if (state.scriptsInserted.includes(script.src)) {
            continue;
          }

          state.scriptsInserted.push(script.src);
          const newScript = document.createElement(\\"script\\");
          newScript.async = true;
          newScript.src = script.src;
          document.head.appendChild(newScript);
        } else if (
          !script.type ||
          [
            \\"text/javascript\\",
            \\"application/javascript\\",
            \\"application/ecmascript\\",
          ].includes(script.type)
        ) {
          if (state.scriptsRun.includes(script.innerText)) {
            continue;
          }

          try {
            state.scriptsRun.push(script.innerText);
            new Function(script.innerText)();
          } catch (error) {
            console.warn(\\"\`Embed\`: Error running script:\\", error);
          }
        }
      }
    }
  },
});

state.findAndRunScripts();
",
    "tsCode": "var props = state;

useState({
  scriptsInserted: [],
  scriptsRun: [],
  findAndRunScripts() {
    // TODO: Move this function to standalone one in '@builder.io/utils'
    if (elem && typeof window !== \\"undefined\\") {
      /** @type {HTMLScriptElement[]} */
      const scripts = elem.getElementsByTagName(\\"script\\");

      for (let i = 0; i < scripts.length; i++) {
        const script = scripts[i];

        if (script.src) {
          if (state.scriptsInserted.includes(script.src)) {
            continue;
          }

          state.scriptsInserted.push(script.src);
          const newScript = document.createElement(\\"script\\");
          newScript.async = true;
          newScript.src = script.src;
          document.head.appendChild(newScript);
        } else if (
          !script.type ||
          [
            \\"text/javascript\\",
            \\"application/javascript\\",
            \\"application/ecmascript\\",
          ].includes(script.type)
        ) {
          if (state.scriptsRun.includes(script.innerText)) {
            continue;
          }

          try {
            state.scriptsRun.push(script.innerText);
            new Function(script.innerText)();
          } catch (error) {
            console.warn(\\"\`Embed\`: Error running script:\\", error);
          }
        }
      }
    }
  },
});

onMount(() => {
  state.findAndRunScripts();
});
",
  },
}
`;

exports[`Builder Embed 2`] = `
"import { useRef } from \\"@jsx-lite/core\\";

export default function MyComponent(props) {
  const elem = useRef();

  onMount(() => {
    useState({
      scriptsInserted: [],
      scriptsRun: [],

      findAndRunScripts() {
        // TODO: Move this function to standalone one in '@builder.io/utils'
        if (elem.current && typeof window !== \\"undefined\\") {
          /** @type {HTMLScriptElement[]} */
          const scripts = elem.current.getElementsByTagName(\\"script\\");

          for (let i = 0; i < scripts.length; i++) {
            const script = scripts[i];

            if (script.src) {
              if (state.scriptsInserted.includes(script.src)) {
                continue;
              }

              state.scriptsInserted.push(script.src);
              const newScript = document.createElement(\\"script\\");
              newScript.async = true;
              newScript.src = script.src;
              document.head.appendChild(newScript);
            } else if (
              !script.type ||
              [
                \\"text/javascript\\",
                \\"application/javascript\\",
                \\"application/ecmascript\\",
              ].includes(script.type)
            ) {
              if (state.scriptsRun.includes(script.innerText)) {
                continue;
              }

              try {
                state.scriptsRun.push(script.innerText);
                new Function(script.innerText)();
              } catch (error) {
                console.warn(\\"\`Embed\`: Error running script:\\", error);
              }
            }
          }
        }
      },
    });
    onMount(() => {
      state.findAndRunScripts();
    });
  });

  return <div class=\\"builder-embed\\" ref={elem} innerHTML={props.content}></div>;
}
"
`;

exports[`Builder Image 1`] = `
Object {
  "data": Object {
    "blocks": Array [
      Object {
        "@type": "@builder.io/sdk:Element",
        "actions": Object {},
        "children": Array [
          Object {
            "@type": "@builder.io/sdk:Element",
            "actions": Object {},
            "bindings": Object {
              "ref": "pictureRef",
            },
            "children": Array [
              Object {
                "@type": "@builder.io/sdk:Element",
                "bindings": Object {
                  "show": "!state.useLazyLoading() || state.load",
                },
                "children": Array [
                  Object {
                    "@type": "@builder.io/sdk:Element",
                    "actions": Object {
                      "load": "state.setLoaded",
                    },
                    "bindings": Object {
                      "alt": "props.altText",
                      "aria-role": "props.altText ? 'presentation' : undefined",
                      "class": "'builder-image' + (props.className ? ' ' + props.className : '')",
                      "sizes": "props.sizes",
                      "src": "props.image",
                      "srcset": "props.srcset",
                    },
                    "children": Array [],
                    "code": Object {
                      "actions": Object {
                        "load": "state.setLoaded",
                      },
                    },
                    "properties": Object {},
                    "responsiveStyles": Object {
                      "large": Object {
                        "objectFit": "cover",
                        "objectPosition": "center",
                        "opacity": 1,
                        "transition": "opacity 0.2s ease-in-out",
                      },
                    },
                    "tagName": "img",
                  },
                ],
                "component": Object {
                  "name": "Fragment",
                },
              },
              Object {
                "@type": "@builder.io/sdk:Element",
                "actions": Object {},
                "bindings": Object {
                  "srcset": "props.srcset",
                },
                "children": Array [],
                "code": Object {
                  "actions": Object {},
                },
                "properties": Object {},
                "tagName": "source",
              },
            ],
            "code": Object {
              "actions": Object {},
            },
            "properties": Object {},
            "tagName": "picture",
          },
          Object {
            "@type": "@builder.io/sdk:Element",
            "bindings": Object {
              "component.options.text": "props.children",
            },
            "component": Object {
              "name": "Text",
              "options": Object {},
            },
            "tagName": "span",
          },
        ],
        "code": Object {
          "actions": Object {},
        },
        "component": Object {
          "name": "Fragment",
          "options": Object {},
        },
      },
    ],
    "jsCode": "var props = state;

Object.assign(state, {
  scrollListener: null,
  imageLoaded: false,
  load: false,
  setLoaded() {
    state.imageLoaded = true;
  },
  isBrowser() {
    return (
      typeof window !== \\"undefined\\" && window.navigator.product != \\"ReactNative\\"
    );
  },
  useLazyLoading() {
    // TODO: Add more checks here, like testing for real web browsers
    return !!props.lazy && state.isBrowser();
  },
});

if (state.useLazyLoading()) {
  // throttled scroll capture listener
  const listener = () => {
    if (pictureRef) {
      const rect = pictureRef.getBoundingClientRect();
      const buffer = window.innerHeight / 2;

      if (rect.top < window.innerHeight + buffer) {
        state.load = true;
        state.scrollListener = null;
        window.removeEventListener(\\"scroll\\", listener);
      }
    }
  };

  state.scrollListener = listener;
  window.addEventListener(\\"scroll\\", listener, {
    capture: true,
    passive: true,
  });
  listener();
}
",
    "tsCode": "var props = state;

useState({
  scrollListener: null,
  imageLoaded: false,
  load: false,
  setLoaded() {
    state.imageLoaded = true;
  },
  isBrowser() {
    return (
      typeof window !== \\"undefined\\" && window.navigator.product != \\"ReactNative\\"
    );
  },
  useLazyLoading() {
    // TODO: Add more checks here, like testing for real web browsers
    return !!props.lazy && state.isBrowser();
  },
});

onMount(() => {
  if (state.useLazyLoading()) {
    // throttled scroll capture listener
    const listener = () => {
      if (pictureRef) {
        const rect = pictureRef.getBoundingClientRect();
        const buffer = window.innerHeight / 2;

        if (rect.top < window.innerHeight + buffer) {
          state.load = true;
          state.scrollListener = null;
          window.removeEventListener(\\"scroll\\", listener);
        }
      }
    };

    state.scrollListener = listener;
    window.addEventListener(\\"scroll\\", listener, {
      capture: true,
      passive: true,
    });
    listener();
  }
});
",
  },
}
`;

exports[`Builder Image 2`] = `
"import { useRef, Show } from \\"@jsx-lite/core\\";
import { Fragment } from \\"@builder.io/components\\";

export default function MyComponent(props) {
  const pictureRef = useRef();

  onMount(() => {
    useState({
      scrollListener: null,
      imageLoaded: false,
      load: false,

      setLoaded() {
        state.imageLoaded = true;
      },

      isBrowser() {
        return (
          typeof window !== \\"undefined\\" &&
          window.navigator.product != \\"ReactNative\\"
        );
      },

      useLazyLoading() {
        // TODO: Add more checks here, like testing for real web browsers
        return !!props.lazy && state.isBrowser();
      },
    });
    onMount(() => {
      if (state.useLazyLoading()) {
        // throttled scroll capture listener
        const listener = () => {
          if (pictureRef.current) {
            const rect = pictureRef.current.getBoundingClientRect();
            const buffer = window.innerHeight / 2;

            if (rect.top < window.innerHeight + buffer) {
              state.load = true;
              state.scrollListener = null;
              window.removeEventListener(\\"scroll\\", listener);
            }
          }
        };

        state.scrollListener = listener;
        window.addEventListener(\\"scroll\\", listener, {
          capture: true,
          passive: true,
        });
        listener();
      }
    });
  });

  return (
    <Fragment>
      <picture ref={pictureRef}>
        <Show when={!state.useLazyLoading() || state.load}>
          <img
            alt={props.altText}
            aria-role={props.altText ? \\"presentation\\" : undefined}
            class={
              \\"builder-image\\" + (props.className ? \\" \\" + props.className : \\"\\")
            }
            src={props.image}
            srcset={props.srcset}
            sizes={props.sizes}
            onLoad={(event) => state.setLoaded}
            css={{
              opacity: 1,
              transition: \\"opacity 0.2s ease-in-out\\",
              objectFit: \\"cover\\",
              objectPosition: \\"center\\",
            }}
          />
        </Show>
        <source srcset={props.srcset} />
      </picture>
      <div>{props.children}</div>
    </Fragment>
  );
}
"
`;

exports[`Builder Stamped 1`] = `
Object {
  "data": Object {
    "blocks": Array [
      Object {
        "@type": "@builder.io/sdk:Element",
        "actions": Object {},
        "bindings": Object {},
        "children": Array [
          Object {
            "@type": "@builder.io/sdk:Element",
            "actions": Object {
              "click": "state.showReviewPrompt = true",
            },
            "bindings": Object {},
            "children": Array [
              Object {
                "@type": "@builder.io/sdk:Element",
                "bindings": Object {},
                "component": Object {
                  "name": "Text",
                  "options": Object {
                    "text": "
        Write a review
      ",
                  },
                },
                "tagName": "span",
              },
            ],
            "code": Object {
              "actions": Object {
                "click": "state.showReviewPrompt = true",
              },
            },
            "properties": Object {},
            "tagName": "button",
          },
          Object {
            "@type": "@builder.io/sdk:Element",
            "bindings": Object {
              "show": "state.showReviewPrompt",
            },
            "children": Array [
              Object {
                "@type": "@builder.io/sdk:Element",
                "actions": Object {},
                "bindings": Object {},
                "children": Array [],
                "code": Object {
                  "actions": Object {},
                },
                "properties": Object {
                  "placeholder": "Email",
                },
                "tagName": "input",
              },
              Object {
                "@type": "@builder.io/sdk:Element",
                "actions": Object {},
                "bindings": Object {},
                "children": Array [],
                "code": Object {
                  "actions": Object {},
                },
                "properties": Object {
                  "placeholder": "Title",
                },
                "responsiveStyles": Object {
                  "large": Object {
                    "display": "block",
                  },
                },
                "tagName": "input",
              },
              Object {
                "@type": "@builder.io/sdk:Element",
                "actions": Object {},
                "bindings": Object {},
                "children": Array [],
                "code": Object {
                  "actions": Object {},
                },
                "properties": Object {
                  "placeholder": "How was your experience?",
                },
                "responsiveStyles": Object {
                  "large": Object {
                    "display": "block",
                  },
                },
                "tagName": "textarea",
              },
              Object {
                "@type": "@builder.io/sdk:Element",
                "actions": Object {
                  "click": "state.showReviewPrompt = false",
                },
                "bindings": Object {},
                "children": Array [
                  Object {
                    "@type": "@builder.io/sdk:Element",
                    "bindings": Object {},
                    "component": Object {
                      "name": "Text",
                      "options": Object {
                        "text": "
          Submit
        ",
                      },
                    },
                    "tagName": "span",
                  },
                ],
                "code": Object {
                  "actions": Object {
                    "click": "state.showReviewPrompt = false",
                  },
                },
                "properties": Object {},
                "responsiveStyles": Object {
                  "large": Object {
                    "display": "block",
                  },
                },
                "tagName": "button",
              },
            ],
            "component": Object {
              "name": "Fragment",
            },
          },
          Object {
            "@type": "@builder.io/sdk:Element",
            "children": Array [
              Object {
                "@type": "@builder.io/sdk:Element",
                "actions": Object {},
                "bindings": Object {},
                "children": Array [
                  Object {
                    "@type": "@builder.io/sdk:Element",
                    "actions": Object {},
                    "bindings": Object {
                      "src": "review.avatar",
                    },
                    "children": Array [],
                    "code": Object {
                      "actions": Object {},
                    },
                    "properties": Object {},
                    "responsiveStyles": Object {
                      "large": Object {
                        "height": "30px",
                        "marginRight": "10px",
                        "width": "30px",
                      },
                    },
                    "tagName": "img",
                  },
                  Object {
                    "@type": "@builder.io/sdk:Element",
                    "actions": Object {},
                    "bindings": Object {},
                    "children": Array [
                      Object {
                        "@type": "@builder.io/sdk:Element",
                        "actions": Object {},
                        "bindings": Object {},
                        "children": Array [
                          Object {
                            "@type": "@builder.io/sdk:Element",
                            "bindings": Object {
                              "component.options.text": "review.author",
                            },
                            "component": Object {
                              "name": "Text",
                              "options": Object {},
                            },
                            "tagName": "span",
                          },
                        ],
                        "code": Object {
                          "actions": Object {},
                        },
                        "properties": Object {},
                        "tagName": "div",
                      },
                      Object {
                        "@type": "@builder.io/sdk:Element",
                        "actions": Object {},
                        "bindings": Object {},
                        "children": Array [
                          Object {
                            "@type": "@builder.io/sdk:Element",
                            "bindings": Object {
                              "component.options.text": "review.reviewMessage",
                            },
                            "component": Object {
                              "name": "Text",
                              "options": Object {},
                            },
                            "tagName": "span",
                          },
                        ],
                        "code": Object {
                          "actions": Object {},
                        },
                        "properties": Object {},
                        "tagName": "div",
                      },
                    ],
                    "code": Object {
                      "actions": Object {},
                    },
                    "properties": Object {},
                    "tagName": "div",
                  },
                ],
                "code": Object {
                  "actions": Object {},
                },
                "properties": Object {},
                "responsiveStyles": Object {
                  "large": Object {
                    "background": "white",
                    "borderRadius": "5px",
                    "boxShadow": "0 2px 5px rgba(0, 0, 0, 0.1)",
                    "display": "flex",
                    "margin": "10px",
                    "padding": "10px",
                  },
                },
                "tagName": "div",
              },
            ],
            "component": Object {
              "name": "Fragment",
            },
            "repeat": Object {
              "collection": "state.reviews",
              "itemName": "review",
            },
          },
        ],
        "code": Object {
          "actions": Object {},
        },
        "properties": Object {},
        "tagName": "div",
      },
    ],
    "jsCode": "var props = state;

Object.assign(state, { reviews: [], showReviewPrompt: false });

fetch(
  \`https://stamped.io/api/widget/reviews?storeUrl=builder-io.myshopify.com&apiKey=\${
    props.apiKey || \\"pubkey-8bbDq7W6w4sB3OWeM1HUy2s47702hM\\"
  }&productId=\${props.productId || \\"2410511106127\\"}\`
)
  .then((res) => res.json())
  .then((data) => {
    state.reviews = data.data;
  });
",
    "tsCode": "var props = state;

useState({ reviews: [], showReviewPrompt: false });

onMount(() => {
  fetch(
    \`https://stamped.io/api/widget/reviews?storeUrl=builder-io.myshopify.com&apiKey=\${
      props.apiKey || \\"pubkey-8bbDq7W6w4sB3OWeM1HUy2s47702hM\\"
    }&productId=\${props.productId || \\"2410511106127\\"}\`
  )
    .then((res) => res.json())
    .then((data) => {
      state.reviews = data.data;
    });
});
",
  },
}
`;

exports[`Builder Stamped 2`] = `
"import { Show, For } from \\"@jsx-lite/core\\";

export default function MyComponent(props) {
  onMount(() => {
    useState({
      reviews: [],
      showReviewPrompt: false,
    });
    onMount(() => {
      fetch(
        \`https://stamped.io/api/widget/reviews?storeUrl=builder-io.myshopify.com&apiKey=\${
          props.apiKey || \\"pubkey-8bbDq7W6w4sB3OWeM1HUy2s47702hM\\"
        }&productId=\${props.productId || \\"2410511106127\\"}\`
      )
        .then((res) => res.json())
        .then((data) => {
          state.reviews = data.data;
        });
    });
  });

  return (
    <div>
      <button onClick={(event) => (state.showReviewPrompt = true)}>
        <div>Write a review</div>
      </button>
      <Show when={state.showReviewPrompt}>
        <input placeholder=\\"Email\\" />
        <input
          placeholder=\\"Title\\"
          css={{
            display: \\"block\\",
          }}
        />
        <textarea
          placeholder=\\"How was your experience?\\"
          css={{
            display: \\"block\\",
          }}
        ></textarea>
        <button
          onClick={(event) => (state.showReviewPrompt = false)}
          css={{
            display: \\"block\\",
          }}
        >
          <div>Submit</div>
        </button>
      </Show>
      <For each={state.reviews}>
        {(review, index) => (
          <div
            css={{
              margin: \\"10px\\",
              padding: \\"10px\\",
              background: \\"white\\",
              display: \\"flex\\",
              borderRadius: \\"5px\\",
              boxShadow: \\"0 2px 5px rgba(0, 0, 0, 0.1)\\",
            }}
          >
            <img
              src={review.avatar}
              css={{
                height: \\"30px\\",
                width: \\"30px\\",
                marginRight: \\"10px\\",
              }}
            />
            <div>
              <div>
                <div>{review.author}</div>
              </div>
              <div>
                <div>{review.reviewMessage}</div>
              </div>
            </div>
          </div>
        )}
      </For>
    </div>
  );
}
"
`;
