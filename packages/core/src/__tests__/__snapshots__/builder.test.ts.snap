// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Builder Columns 1`] = `
Object {
  "data": Object {
    "blocks": Array [
      Object {
        "@type": "@builder.io/sdk:Element",
        "actions": Object {},
        "bindings": Object {},
        "children": Array [
          Object {
            "@type": "@builder.io/sdk:Element",
            "children": Array [
              Object {
                "@type": "@builder.io/sdk:Element",
                "actions": Object {},
                "bindings": Object {},
                "children": Array [
                  Object {
                    "@type": "@builder.io/sdk:Element",
                    "bindings": Object {
                      "component.options.text": "column.content",
                    },
                    "component": Object {
                      "name": "Text",
                      "options": Object {},
                    },
                    "tagName": "span",
                  },
                ],
                "code": Object {
                  "actions": Object {},
                  "bindings": Object {},
                },
                "properties": Object {
                  "class": "builder-column",
                },
                "responsiveStyles": Object {
                  "large": Object {
                    "flexGrow": "1",
                  },
                },
                "tagName": "div",
              },
            ],
            "component": Object {
              "name": "Core:Fragment",
            },
            "repeat": Object {
              "collection": "props.columns",
              "itemName": "column",
            },
          },
        ],
        "code": Object {
          "actions": Object {},
          "bindings": Object {},
        },
        "properties": Object {
          "class": "builder-columns",
        },
        "responsiveStyles": Object {
          "large": Object {
            "alignItems": "stretch",
            "display": "flex",
            "flexDirection": "column",
            "lineHeight": "normal",
          },
        },
        "tagName": "div",
      },
    ],
    "jsCode": "var props = state;

Object.assign(state, {
  // TODO: These methods are not used right now, but they will be when
  // support for dynamic CSS lands
  getColumns() {
    return props.columns || [];
  },
  getGutterSize() {
    return typeof props.space === \\"number\\" ? props.space || 0 : 20;
  },
  getWidth(index: number) {
    const columns = this.getColumns();
    return (columns[index] && columns[index].width) || 100 / columns.length;
  },
  getColumnCssWidth(index: number) {
    const columns = this.getColumns();
    const gutterSize = this.getGutterSize();
    const subtractWidth = (gutterSize * (columns.length - 1)) / columns.length;
    return \`calc(\${this.getWidth(index)}% - \${subtractWidth}px)\`;
  },
});
",
    "tsCode": "var props = state;

useState({
  // TODO: These methods are not used right now, but they will be when
  // support for dynamic CSS lands
  getColumns() {
    return props.columns || [];
  },
  getGutterSize() {
    return typeof props.space === \\"number\\" ? props.space || 0 : 20;
  },
  getWidth(index: number) {
    const columns = this.getColumns();
    return (columns[index] && columns[index].width) || 100 / columns.length;
  },
  getColumnCssWidth(index: number) {
    const columns = this.getColumns();
    const gutterSize = this.getGutterSize();
    const subtractWidth = (gutterSize * (columns.length - 1)) / columns.length;
    return \`calc(\${this.getWidth(index)}% - \${subtractWidth}px)\`;
  },
});
",
  },
}
`;

exports[`Builder Columns 2`] = `
"import { useState, For } from \\"@jsx-lite/core\\";

export default function MyComponent(props) {
  const state = useState({
    // TODO: These methods are not used right now, but they will be when
    // support for dynamic CSS lands
    getColumns() {
      return props.columns || [];
    },
    getGutterSize() {
      return typeof props.space === \\"number\\" ? props.space || 0 : 20;
    },
    getWidth(index) {
      const columns = this.getColumns();
      return (columns[index] && columns[index].width) || 100 / columns.length;
    },
    getColumnCssWidth(index) {
      const columns = this.getColumns();
      const gutterSize = this.getGutterSize();
      const subtractWidth =
        (gutterSize * (columns.length - 1)) / columns.length;
      return \`calc(\${this.getWidth(index)}% - \${subtractWidth}px)\`;
    },
  });

  onMount(() => {
    var props = state;
  });

  return (
    <div
      class=\\"builder-columns\\"
      css={{
        display: \\"flex\\",
        flexDirection: \\"column\\",
        alignItems: \\"stretch\\",
        lineHeight: \\"normal\\",
      }}
    >
      <For each={props.columns}>
        {(column, index) => (
          <div
            class=\\"builder-column\\"
            css={{
              flexGrow: \\"1\\",
            }}
          >
            {column.content}
          </div>
        )}
      </For>
    </div>
  );
}
"
`;

exports[`Builder CustomCode 1`] = `
Object {
  "data": Object {
    "blocks": Array [
      Object {
        "@type": "@builder.io/sdk:Element",
        "actions": Object {},
        "bindings": Object {
          "class": "'builder-custom-code' + (props.replaceNodes ? ' replace-nodes' : '')",
          "innerHTML": "props.code",
          "ref": "elem",
        },
        "children": Array [],
        "code": Object {
          "actions": Object {},
          "bindings": Object {},
        },
        "properties": Object {},
        "tagName": "div",
      },
    ],
    "jsCode": "var props = state;

Object.assign(state, {
  scriptsInserted: [],
  scriptsRun: [],
  findAndRunScripts() {
    // TODO: Move this function to standalone one in '@builder.io/utils'
    if (elem && typeof window !== \\"undefined\\") {
      /** @type {HTMLScriptElement[]} */
      const scripts = elem.getElementsByTagName(\\"script\\");

      for (let i = 0; i < scripts.length; i++) {
        const script = scripts[i];

        if (script.src) {
          if (state.scriptsInserted.includes(script.src)) {
            continue;
          }

          state.scriptsInserted.push(script.src);
          const newScript = document.createElement(\\"script\\");
          newScript.async = true;
          newScript.src = script.src;
          document.head.appendChild(newScript);
        } else if (
          !script.type ||
          [
            \\"text/javascript\\",
            \\"application/javascript\\",
            \\"application/ecmascript\\",
          ].includes(script.type)
        ) {
          if (state.scriptsRun.includes(script.innerText)) {
            continue;
          }

          try {
            state.scriptsRun.push(script.innerText);
            new Function(script.innerText)();
          } catch (error) {
            console.warn(\\"\`CustomCode\`: Error running script:\\", error);
          }
        }
      }
    }
  },
});

state.findAndRunScripts();
",
    "tsCode": "var props = state;

useState({
  scriptsInserted: [],
  scriptsRun: [],
  findAndRunScripts() {
    // TODO: Move this function to standalone one in '@builder.io/utils'
    if (elem && typeof window !== \\"undefined\\") {
      /** @type {HTMLScriptElement[]} */
      const scripts = elem.getElementsByTagName(\\"script\\");

      for (let i = 0; i < scripts.length; i++) {
        const script = scripts[i];

        if (script.src) {
          if (state.scriptsInserted.includes(script.src)) {
            continue;
          }

          state.scriptsInserted.push(script.src);
          const newScript = document.createElement(\\"script\\");
          newScript.async = true;
          newScript.src = script.src;
          document.head.appendChild(newScript);
        } else if (
          !script.type ||
          [
            \\"text/javascript\\",
            \\"application/javascript\\",
            \\"application/ecmascript\\",
          ].includes(script.type)
        ) {
          if (state.scriptsRun.includes(script.innerText)) {
            continue;
          }

          try {
            state.scriptsRun.push(script.innerText);
            new Function(script.innerText)();
          } catch (error) {
            console.warn(\\"\`CustomCode\`: Error running script:\\", error);
          }
        }
      }
    }
  },
});

onMount(() => {
  state.findAndRunScripts();
});
",
  },
}
`;

exports[`Builder CustomCode 2`] = `
"import { useState, useRef } from \\"@jsx-lite/core\\";

export default function MyComponent(props) {
  const state = useState({
    scriptsInserted: [],
    scriptsRun: [],
    findAndRunScripts() {
      // TODO: Move this function to standalone one in '@builder.io/utils'
      if (elem.current && typeof window !== \\"undefined\\") {
        /** @type {HTMLScriptElement[]} */
        const scripts = elem.current.getElementsByTagName(\\"script\\");

        for (let i = 0; i < scripts.length; i++) {
          const script = scripts[i];

          if (script.src) {
            if (state.scriptsInserted.includes(script.src)) {
              continue;
            }

            state.scriptsInserted.push(script.src);
            const newScript = document.createElement(\\"script\\");
            newScript.async = true;
            newScript.src = script.src;
            document.head.appendChild(newScript);
          } else if (
            !script.type ||
            [
              \\"text/javascript\\",
              \\"application/javascript\\",
              \\"application/ecmascript\\",
            ].includes(script.type)
          ) {
            if (state.scriptsRun.includes(script.innerText)) {
              continue;
            }

            try {
              state.scriptsRun.push(script.innerText);
              new Function(script.innerText)();
            } catch (error) {
              console.warn(\\"\`CustomCode\`: Error running script:\\", error);
            }
          }
        }
      }
    },
  });

  const elem = useRef();

  onMount(() => {
    state.findAndRunScripts();
  });

  return (
    <div
      ref={elem}
      class={
        \\"builder-custom-code\\" + (props.replaceNodes ? \\" replace-nodes\\" : \\"\\")
      }
      innerHTML={props.code}
    />
  );
}
"
`;

exports[`Builder Embed 1`] = `
Object {
  "data": Object {
    "blocks": Array [
      Object {
        "@type": "@builder.io/sdk:Element",
        "actions": Object {},
        "bindings": Object {
          "innerHTML": "props.content",
          "ref": "elem",
        },
        "children": Array [],
        "code": Object {
          "actions": Object {},
          "bindings": Object {},
        },
        "properties": Object {
          "class": "builder-embed",
        },
        "tagName": "div",
      },
    ],
    "jsCode": "var props = state;

Object.assign(state, {
  scriptsInserted: [],
  scriptsRun: [],
  findAndRunScripts() {
    // TODO: Move this function to standalone one in '@builder.io/utils'
    if (elem && typeof window !== \\"undefined\\") {
      /** @type {HTMLScriptElement[]} */
      const scripts = elem.getElementsByTagName(\\"script\\");

      for (let i = 0; i < scripts.length; i++) {
        const script = scripts[i];

        if (script.src) {
          if (state.scriptsInserted.includes(script.src)) {
            continue;
          }

          state.scriptsInserted.push(script.src);
          const newScript = document.createElement(\\"script\\");
          newScript.async = true;
          newScript.src = script.src;
          document.head.appendChild(newScript);
        } else if (
          !script.type ||
          [
            \\"text/javascript\\",
            \\"application/javascript\\",
            \\"application/ecmascript\\",
          ].includes(script.type)
        ) {
          if (state.scriptsRun.includes(script.innerText)) {
            continue;
          }

          try {
            state.scriptsRun.push(script.innerText);
            new Function(script.innerText)();
          } catch (error) {
            console.warn(\\"\`Embed\`: Error running script:\\", error);
          }
        }
      }
    }
  },
});

state.findAndRunScripts();
",
    "tsCode": "var props = state;

useState({
  scriptsInserted: [],
  scriptsRun: [],
  findAndRunScripts() {
    // TODO: Move this function to standalone one in '@builder.io/utils'
    if (elem && typeof window !== \\"undefined\\") {
      /** @type {HTMLScriptElement[]} */
      const scripts = elem.getElementsByTagName(\\"script\\");

      for (let i = 0; i < scripts.length; i++) {
        const script = scripts[i];

        if (script.src) {
          if (state.scriptsInserted.includes(script.src)) {
            continue;
          }

          state.scriptsInserted.push(script.src);
          const newScript = document.createElement(\\"script\\");
          newScript.async = true;
          newScript.src = script.src;
          document.head.appendChild(newScript);
        } else if (
          !script.type ||
          [
            \\"text/javascript\\",
            \\"application/javascript\\",
            \\"application/ecmascript\\",
          ].includes(script.type)
        ) {
          if (state.scriptsRun.includes(script.innerText)) {
            continue;
          }

          try {
            state.scriptsRun.push(script.innerText);
            new Function(script.innerText)();
          } catch (error) {
            console.warn(\\"\`Embed\`: Error running script:\\", error);
          }
        }
      }
    }
  },
});

onMount(() => {
  state.findAndRunScripts();
});
",
  },
}
`;

exports[`Builder Embed 2`] = `
"import { useState, useRef } from \\"@jsx-lite/core\\";

export default function MyComponent(props) {
  const state = useState({
    scriptsInserted: [],
    scriptsRun: [],
    findAndRunScripts() {
      // TODO: Move this function to standalone one in '@builder.io/utils'
      if (elem.current && typeof window !== \\"undefined\\") {
        /** @type {HTMLScriptElement[]} */
        const scripts = elem.current.getElementsByTagName(\\"script\\");

        for (let i = 0; i < scripts.length; i++) {
          const script = scripts[i];

          if (script.src) {
            if (state.scriptsInserted.includes(script.src)) {
              continue;
            }

            state.scriptsInserted.push(script.src);
            const newScript = document.createElement(\\"script\\");
            newScript.async = true;
            newScript.src = script.src;
            document.head.appendChild(newScript);
          } else if (
            !script.type ||
            [
              \\"text/javascript\\",
              \\"application/javascript\\",
              \\"application/ecmascript\\",
            ].includes(script.type)
          ) {
            if (state.scriptsRun.includes(script.innerText)) {
              continue;
            }

            try {
              state.scriptsRun.push(script.innerText);
              new Function(script.innerText)();
            } catch (error) {
              console.warn(\\"\`Embed\`: Error running script:\\", error);
            }
          }
        }
      }
    },
  });

  const elem = useRef();

  onMount(() => {
    state.findAndRunScripts();
  });

  return <div class=\\"builder-embed\\" ref={elem} innerHTML={props.content} />;
}
"
`;

exports[`Builder Image 1`] = `
Object {
  "data": Object {
    "blocks": Array [
      Object {
        "@type": "@builder.io/sdk:Element",
        "actions": Object {},
        "bindings": Object {},
        "children": Array [
          Object {
            "@type": "@builder.io/sdk:Element",
            "actions": Object {},
            "bindings": Object {
              "ref": "pictureRef",
            },
            "children": Array [
              Object {
                "@type": "@builder.io/sdk:Element",
                "bindings": Object {
                  "show": "!state.useLazyLoading() || state.load",
                },
                "children": Array [
                  Object {
                    "@type": "@builder.io/sdk:Element",
                    "actions": Object {
                      "load": "state.setLoaded()",
                    },
                    "bindings": Object {
                      "alt": "props.altText",
                      "aria-role": "props.altText ? 'presentation' : undefined",
                      "class": "'builder-image' + (props.class ? ' ' + props.class : '')",
                      "sizes": "props.sizes",
                      "src": "props.image",
                      "srcset": "props.srcset",
                    },
                    "children": Array [],
                    "code": Object {
                      "actions": Object {
                        "load": "state.setLoaded()",
                      },
                      "bindings": Object {},
                    },
                    "properties": Object {},
                    "responsiveStyles": Object {
                      "large": Object {
                        "objectFit": "cover",
                        "objectPosition": "center",
                        "opacity": "1",
                        "transition": "opacity 0.2s ease-in-out",
                      },
                    },
                    "tagName": "img",
                  },
                ],
                "component": Object {
                  "name": "Core:Fragment",
                },
              },
              Object {
                "@type": "@builder.io/sdk:Element",
                "actions": Object {},
                "bindings": Object {
                  "srcset": "props.srcset",
                },
                "children": Array [],
                "code": Object {
                  "actions": Object {},
                  "bindings": Object {},
                },
                "properties": Object {},
                "tagName": "source",
              },
            ],
            "code": Object {
              "actions": Object {},
              "bindings": Object {},
            },
            "properties": Object {},
            "tagName": "picture",
          },
          Object {
            "@type": "@builder.io/sdk:Element",
            "bindings": Object {
              "component.options.text": "props.children",
            },
            "component": Object {
              "name": "Text",
              "options": Object {},
            },
            "tagName": "span",
          },
        ],
        "code": Object {
          "actions": Object {},
          "bindings": Object {},
        },
        "component": Object {
          "name": "Fragment",
          "options": Object {},
        },
      },
    ],
    "jsCode": "var props = state;

Object.assign(state, {
  scrollListener: null,
  imageLoaded: false,
  load: false,
  setLoaded() {
    state.imageLoaded = true;
  },
  isBrowser() {
    return (
      typeof window !== \\"undefined\\" && window.navigator.product != \\"ReactNative\\"
    );
  },
  useLazyLoading() {
    // TODO: Add more checks here, like testing for real web browsers
    return !!props.lazy && state.isBrowser();
  },
});

if (state.useLazyLoading()) {
  // throttled scroll capture listener
  const listener = () => {
    if (pictureRef) {
      const rect = pictureRef.getBoundingClientRect();
      const buffer = window.innerHeight / 2;

      if (rect.top < window.innerHeight + buffer) {
        state.load = true;
        state.scrollListener = null;
        window.removeEventListener(\\"scroll\\", listener);
      }
    }
  };

  state.scrollListener = listener;
  window.addEventListener(\\"scroll\\", listener, {
    capture: true,
    passive: true,
  });
  listener();
}
",
    "tsCode": "var props = state;

useState({
  scrollListener: null,
  imageLoaded: false,
  load: false,
  setLoaded() {
    state.imageLoaded = true;
  },
  isBrowser() {
    return (
      typeof window !== \\"undefined\\" && window.navigator.product != \\"ReactNative\\"
    );
  },
  useLazyLoading() {
    // TODO: Add more checks here, like testing for real web browsers
    return !!props.lazy && state.isBrowser();
  },
});

onMount(() => {
  if (state.useLazyLoading()) {
    // throttled scroll capture listener
    const listener = () => {
      if (pictureRef) {
        const rect = pictureRef.getBoundingClientRect();
        const buffer = window.innerHeight / 2;

        if (rect.top < window.innerHeight + buffer) {
          state.load = true;
          state.scrollListener = null;
          window.removeEventListener(\\"scroll\\", listener);
        }
      }
    };

    state.scrollListener = listener;
    window.addEventListener(\\"scroll\\", listener, {
      capture: true,
      passive: true,
    });
    listener();
  }
});
",
  },
}
`;

exports[`Builder Image 2`] = `
"import { useState, useRef, Show } from \\"@jsx-lite/core\\";
import { Fragment } from \\"@builder.io/components\\";

export default function MyComponent(props) {
  const state = useState({
    scrollListener: null,
    imageLoaded: false,
    load: false,
    setLoaded() {
      state.imageLoaded = true;
    },
    isBrowser() {
      return (
        typeof window !== \\"undefined\\" &&
        window.navigator.product != \\"ReactNative\\"
      );
    },
    useLazyLoading() {
      // TODO: Add more checks here, like testing for real web browsers
      return !!props.lazy && state.isBrowser();
    },
  });

  const pictureRef = useRef();

  onMount(() => {
    if (state.useLazyLoading()) {
      // throttled scroll capture listener
      const listener = () => {
        if (pictureRef.current) {
          const rect = pictureRef.current.getBoundingClientRect();
          const buffer = window.innerHeight / 2;

          if (rect.top < window.innerHeight + buffer) {
            state.load = true;
            state.scrollListener = null;
            window.removeEventListener(\\"scroll\\", listener);
          }
        }
      };

      state.scrollListener = listener;
      window.addEventListener(\\"scroll\\", listener, {
        capture: true,
        passive: true,
      });
      listener();
    }
  });

  return (
    <Fragment>
      <picture ref={pictureRef}>
        <Show when={!state.useLazyLoading() || state.load}>
          <img
            alt={props.altText}
            aria-role={props.altText ? \\"presentation\\" : undefined}
            class={\\"builder-image\\" + (props.class ? \\" \\" + props.class : \\"\\")}
            src={props.image}
            srcset={props.srcset}
            sizes={props.sizes}
            onLoad={(event) => state.setLoaded()}
            css={{
              opacity: \\"1\\",
              transition: \\"opacity 0.2s ease-in-out\\",
              objectFit: \\"cover\\",
              objectPosition: \\"center\\",
            }}
          />
        </Show>
        <source srcset={props.srcset} />
      </picture>
      <span>{props.children}</span>
    </Fragment>
  );
}
"
`;

exports[`Builder Regenerate custom Hero 1`] = `
Object {
  "@type": "@jsx-lite/component",
  "children": Array [
    Object {
      "@type": "@jsx-lite/node",
      "bindings": Object {
        "css": "{
  display: \\"flex\\",
  flexDirection: \\"column\\",
  alignItems: \\"stretch\\",
  position: \\"relative\\",
  flexShrink: \\"0\\",
  boxSizing: \\"border-box\\",
  marginTop: \\"200px\\"
}",
        "height": "400",
      },
      "children": Array [],
      "meta": Object {},
      "name": "Hero",
      "properties": Object {
        "buttonLink": "https://example.com",
        "buttonText": "Click",
        "image": "https://cdn.builder.io/api/v1/image/assets%2FYJIGb4i01jvw0SRdL5Bt%2F52dcecf48f9c48cc8ddd8f81fec63236",
        "title": "Your Title Here",
      },
    },
  ],
  "hooks": Object {},
  "imports": Array [
    Object {
      "imports": Object {
        "Hero": "Hero",
      },
      "path": "@builder.io/components",
    },
  ],
  "meta": Object {},
  "name": "MyComponent",
  "state": Object {},
}
`;

exports[`Builder Regenerate custom Hero 2`] = `
Object {
  "data": Object {
    "blocks": Array [
      Object {
        "@type": "@builder.io/sdk:Element",
        "actions": Object {},
        "bindings": Object {},
        "children": Array [],
        "code": Object {
          "actions": Object {},
          "bindings": Object {},
        },
        "component": Object {
          "name": "Hero",
          "options": Object {
            "buttonLink": "https://example.com",
            "buttonText": "Click",
            "height": 400,
            "image": "https://cdn.builder.io/api/v1/image/assets%2FYJIGb4i01jvw0SRdL5Bt%2F52dcecf48f9c48cc8ddd8f81fec63236",
            "title": "Your Title Here",
          },
        },
        "responsiveStyles": Object {
          "large": Object {
            "alignItems": "stretch",
            "boxSizing": "border-box",
            "display": "flex",
            "flexDirection": "column",
            "flexShrink": "0",
            "marginTop": "200px",
            "position": "relative",
          },
        },
      },
    ],
    "jsCode": "",
    "tsCode": "",
  },
}
`;

exports[`Builder Regenerate custom Hero 3`] = `
Object {
  "@type": "@jsx-lite/component",
  "children": Array [
    Object {
      "@type": "@jsx-lite/node",
      "bindings": Object {
        "css": "{\\"display\\":\\"flex\\",\\"flexDirection\\":\\"column\\",\\"alignItems\\":\\"stretch\\",\\"position\\":\\"relative\\",\\"flexShrink\\":\\"0\\",\\"boxSizing\\":\\"border-box\\",\\"marginTop\\":\\"200px\\"}",
        "height": "400",
      },
      "children": Array [],
      "meta": Object {},
      "name": "Hero",
      "properties": Object {
        "$tagName": undefined,
        "buttonLink": "https://example.com",
        "buttonText": "Click",
        "image": "https://cdn.builder.io/api/v1/image/assets%2FYJIGb4i01jvw0SRdL5Bt%2F52dcecf48f9c48cc8ddd8f81fec63236",
        "title": "Your Title Here",
      },
    },
  ],
  "hooks": Object {},
  "imports": Array [],
  "meta": Object {},
  "name": "MyComponent",
  "state": Object {},
}
`;

exports[`Builder Regenerate fragments 1`] = `
Object {
  "@type": "@jsx-lite/component",
  "children": Array [
    Object {
      "@type": "@jsx-lite/node",
      "bindings": Object {},
      "children": Array [
        Object {
          "@type": "@jsx-lite/node",
          "bindings": Object {},
          "children": Array [],
          "meta": Object {},
          "name": "div",
          "properties": Object {
            "_text": "
      Hello world

      ",
          },
        },
        Object {
          "@type": "@jsx-lite/node",
          "bindings": Object {},
          "children": Array [
            Object {
              "@type": "@jsx-lite/node",
              "bindings": Object {},
              "children": Array [],
              "meta": Object {},
              "name": "div",
              "properties": Object {
                "_text": "
        ",
              },
            },
            Object {
              "@type": "@jsx-lite/node",
              "bindings": Object {},
              "children": Array [
                Object {
                  "@type": "@jsx-lite/node",
                  "bindings": Object {},
                  "children": Array [],
                  "meta": Object {},
                  "name": "div",
                  "properties": Object {
                    "_text": "Hi",
                  },
                },
              ],
              "meta": Object {},
              "name": "Fragment",
              "properties": Object {},
            },
            Object {
              "@type": "@jsx-lite/node",
              "bindings": Object {},
              "children": Array [],
              "meta": Object {},
              "name": "div",
              "properties": Object {
                "_text": "
      ",
              },
            },
          ],
          "meta": Object {},
          "name": "Fragment",
          "properties": Object {},
        },
        Object {
          "@type": "@jsx-lite/node",
          "bindings": Object {},
          "children": Array [],
          "meta": Object {},
          "name": "div",
          "properties": Object {
            "_text": "
    ",
          },
        },
      ],
      "meta": Object {},
      "name": "Fragment",
      "properties": Object {},
    },
  ],
  "hooks": Object {},
  "imports": Array [],
  "meta": Object {},
  "name": "MyComponent",
  "state": Object {},
}
`;

exports[`Builder Regenerate fragments 2`] = `
Object {
  "data": Object {
    "blocks": Array [
      Object {
        "@type": "@builder.io/sdk:Element",
        "actions": Object {},
        "bindings": Object {},
        "children": Array [
          Object {
            "@type": "@builder.io/sdk:Element",
            "bindings": Object {},
            "component": Object {
              "name": "Text",
              "options": Object {
                "text": "
      Hello world

      ",
              },
            },
            "tagName": "span",
          },
          Object {
            "@type": "@builder.io/sdk:Element",
            "actions": Object {},
            "bindings": Object {},
            "children": Array [
              Object {
                "@type": "@builder.io/sdk:Element",
                "actions": Object {},
                "bindings": Object {},
                "children": Array [
                  Object {
                    "@type": "@builder.io/sdk:Element",
                    "bindings": Object {},
                    "component": Object {
                      "name": "Text",
                      "options": Object {
                        "text": "Hi",
                      },
                    },
                    "tagName": "span",
                  },
                ],
                "code": Object {
                  "actions": Object {},
                  "bindings": Object {},
                },
                "component": Object {
                  "name": "Fragment",
                  "options": Object {},
                },
              },
            ],
            "code": Object {
              "actions": Object {},
              "bindings": Object {},
            },
            "component": Object {
              "name": "Fragment",
              "options": Object {},
            },
          },
        ],
        "code": Object {
          "actions": Object {},
          "bindings": Object {},
        },
        "component": Object {
          "name": "Fragment",
          "options": Object {},
        },
      },
    ],
    "jsCode": "Object.assign(state, {});
",
    "tsCode": "useState({});
",
  },
}
`;

exports[`Builder Regenerate fragments 3`] = `
Object {
  "@type": "@jsx-lite/component",
  "children": Array [
    Object {
      "@type": "@jsx-lite/node",
      "bindings": Object {},
      "children": Array [
        Object {
          "@type": "@jsx-lite/node",
          "bindings": Object {},
          "children": Array [
            Object {
              "@type": "@jsx-lite/node",
              "bindings": Object {
                "_text": undefined,
              },
              "children": Array [],
              "meta": Object {},
              "name": "div",
              "properties": Object {
                "_text": "
      Hello world

      ",
              },
            },
          ],
          "meta": Object {},
          "name": "div",
          "properties": Object {},
        },
        Object {
          "@type": "@jsx-lite/node",
          "bindings": Object {},
          "children": Array [
            Object {
              "@type": "@jsx-lite/node",
              "bindings": Object {
                "css": undefined,
              },
              "children": Array [
                Object {
                  "@type": "@jsx-lite/node",
                  "bindings": Object {
                    "_text": undefined,
                  },
                  "children": Array [],
                  "meta": Object {},
                  "name": "div",
                  "properties": Object {
                    "_text": "Hi",
                  },
                },
              ],
              "meta": Object {},
              "name": "Fragment",
              "properties": Object {},
            },
          ],
          "meta": Object {},
          "name": "Fragment",
          "properties": Object {},
        },
      ],
      "meta": Object {},
      "name": "Fragment",
      "properties": Object {},
    },
  ],
  "hooks": Object {},
  "imports": Array [],
  "meta": Object {},
  "name": "MyComponent",
  "state": Object {},
}
`;

exports[`Builder Regenerate span text 1`] = `
Object {
  "@type": "@jsx-lite/component",
  "children": Array [
    Object {
      "@type": "@jsx-lite/node",
      "bindings": Object {
        "css": "{
  display: \\"block\\"
}",
      },
      "children": Array [
        Object {
          "@type": "@jsx-lite/node",
          "bindings": Object {},
          "children": Array [],
          "meta": Object {},
          "name": "div",
          "properties": Object {
            "_text": "
      ",
          },
        },
        Object {
          "@type": "@jsx-lite/node",
          "bindings": Object {
            "css": "{
  color: \\"red\\"
}",
          },
          "children": Array [
            Object {
              "@type": "@jsx-lite/node",
              "bindings": Object {},
              "children": Array [],
              "meta": Object {},
              "name": "div",
              "properties": Object {
                "_text": "
        Hello world
      ",
              },
            },
          ],
          "meta": Object {},
          "name": "span",
          "properties": Object {},
        },
        Object {
          "@type": "@jsx-lite/node",
          "bindings": Object {},
          "children": Array [],
          "meta": Object {},
          "name": "div",
          "properties": Object {
            "_text": "
    ",
          },
        },
      ],
      "meta": Object {},
      "name": "div",
      "properties": Object {},
    },
  ],
  "hooks": Object {},
  "imports": Array [],
  "meta": Object {},
  "name": "MyComponent",
  "state": Object {},
}
`;

exports[`Builder Regenerate span text 2`] = `
Object {
  "data": Object {
    "blocks": Array [
      Object {
        "@type": "@builder.io/sdk:Element",
        "actions": Object {},
        "bindings": Object {},
        "children": Array [
          Object {
            "@type": "@builder.io/sdk:Element",
            "actions": Object {},
            "bindings": Object {},
            "children": Array [
              Object {
                "@type": "@builder.io/sdk:Element",
                "bindings": Object {},
                "component": Object {
                  "name": "Text",
                  "options": Object {
                    "text": "
        Hello world
      ",
                  },
                },
                "tagName": "span",
              },
            ],
            "code": Object {
              "actions": Object {},
              "bindings": Object {},
            },
            "properties": Object {},
            "responsiveStyles": Object {
              "large": Object {
                "color": "red",
              },
            },
            "tagName": "span",
          },
        ],
        "code": Object {
          "actions": Object {},
          "bindings": Object {},
        },
        "properties": Object {},
        "responsiveStyles": Object {
          "large": Object {
            "display": "block",
          },
        },
        "tagName": "div",
      },
    ],
    "jsCode": "Object.assign(state, {});
",
    "tsCode": "useState({});
",
  },
}
`;

exports[`Builder Regenerate span text 3`] = `
Object {
  "@type": "@jsx-lite/component",
  "children": Array [
    Object {
      "@type": "@jsx-lite/node",
      "bindings": Object {
        "css": "{\\"display\\":\\"block\\"}",
      },
      "children": Array [
        Object {
          "@type": "@jsx-lite/node",
          "bindings": Object {
            "css": "{color:'red'}",
          },
          "children": Array [
            Object {
              "@type": "@jsx-lite/node",
              "bindings": Object {
                "_text": undefined,
              },
              "children": Array [],
              "meta": Object {},
              "name": "div",
              "properties": Object {
                "_text": "
        Hello world
      ",
              },
            },
          ],
          "meta": Object {},
          "name": "span",
          "properties": Object {},
        },
      ],
      "meta": Object {},
      "name": "div",
      "properties": Object {},
    },
  ],
  "hooks": Object {},
  "imports": Array [],
  "meta": Object {},
  "name": "MyComponent",
  "state": Object {},
}
`;

exports[`Builder Stamped 1`] = `
Object {
  "data": Object {
    "blocks": Array [
      Object {
        "@type": "@builder.io/sdk:Element",
        "actions": Object {},
        "bindings": Object {},
        "children": Array [
          Object {
            "@type": "@builder.io/sdk:Element",
            "actions": Object {
              "click": "state.showReviewPrompt = true",
            },
            "bindings": Object {},
            "children": Array [
              Object {
                "@type": "@builder.io/sdk:Element",
                "bindings": Object {},
                "component": Object {
                  "name": "Text",
                  "options": Object {
                    "text": "
        Write a review
      ",
                  },
                },
                "tagName": "span",
              },
            ],
            "code": Object {
              "actions": Object {
                "click": "state.showReviewPrompt = true",
              },
              "bindings": Object {},
            },
            "properties": Object {},
            "tagName": "button",
          },
          Object {
            "@type": "@builder.io/sdk:Element",
            "bindings": Object {
              "show": "state.showReviewPrompt",
            },
            "children": Array [
              Object {
                "@type": "@builder.io/sdk:Element",
                "actions": Object {},
                "bindings": Object {},
                "children": Array [],
                "code": Object {
                  "actions": Object {},
                  "bindings": Object {},
                },
                "properties": Object {
                  "placeholder": "Email",
                },
                "tagName": "input",
              },
              Object {
                "@type": "@builder.io/sdk:Element",
                "actions": Object {},
                "bindings": Object {},
                "children": Array [],
                "code": Object {
                  "actions": Object {},
                  "bindings": Object {},
                },
                "properties": Object {
                  "placeholder": "Title",
                },
                "responsiveStyles": Object {
                  "large": Object {
                    "display": "block",
                  },
                },
                "tagName": "input",
              },
              Object {
                "@type": "@builder.io/sdk:Element",
                "actions": Object {},
                "bindings": Object {},
                "children": Array [],
                "code": Object {
                  "actions": Object {},
                  "bindings": Object {},
                },
                "properties": Object {
                  "placeholder": "How was your experience?",
                },
                "responsiveStyles": Object {
                  "large": Object {
                    "display": "block",
                  },
                },
                "tagName": "textarea",
              },
              Object {
                "@type": "@builder.io/sdk:Element",
                "actions": Object {
                  "click": "
  state.showReviewPrompt = false;
",
                },
                "bindings": Object {},
                "children": Array [
                  Object {
                    "@type": "@builder.io/sdk:Element",
                    "bindings": Object {},
                    "component": Object {
                      "name": "Text",
                      "options": Object {
                        "text": "
          Submit
        ",
                      },
                    },
                    "tagName": "span",
                  },
                ],
                "code": Object {
                  "actions": Object {
                    "click": "
  state.showReviewPrompt = false;
",
                  },
                  "bindings": Object {},
                },
                "properties": Object {},
                "responsiveStyles": Object {
                  "large": Object {
                    "display": "block",
                  },
                },
                "tagName": "button",
              },
            ],
            "component": Object {
              "name": "Core:Fragment",
            },
          },
          Object {
            "@type": "@builder.io/sdk:Element",
            "children": Array [
              Object {
                "@type": "@builder.io/sdk:Element",
                "actions": Object {},
                "bindings": Object {},
                "children": Array [
                  Object {
                    "@type": "@builder.io/sdk:Element",
                    "actions": Object {},
                    "bindings": Object {
                      "src": "review.avatar",
                    },
                    "children": Array [],
                    "code": Object {
                      "actions": Object {},
                      "bindings": Object {},
                    },
                    "properties": Object {},
                    "responsiveStyles": Object {
                      "large": Object {
                        "height": "30px",
                        "marginRight": "10px",
                        "width": "30px",
                      },
                    },
                    "tagName": "img",
                  },
                  Object {
                    "@type": "@builder.io/sdk:Element",
                    "actions": Object {},
                    "bindings": Object {},
                    "children": Array [
                      Object {
                        "@type": "@builder.io/sdk:Element",
                        "actions": Object {},
                        "bindings": Object {},
                        "children": Array [
                          Object {
                            "@type": "@builder.io/sdk:Element",
                            "bindings": Object {
                              "component.options.text": "review.author",
                            },
                            "component": Object {
                              "name": "Text",
                              "options": Object {},
                            },
                            "tagName": "span",
                          },
                        ],
                        "code": Object {
                          "actions": Object {},
                          "bindings": Object {},
                        },
                        "properties": Object {},
                        "tagName": "div",
                      },
                      Object {
                        "@type": "@builder.io/sdk:Element",
                        "actions": Object {},
                        "bindings": Object {},
                        "children": Array [
                          Object {
                            "@type": "@builder.io/sdk:Element",
                            "bindings": Object {
                              "component.options.text": "review.reviewMessage",
                            },
                            "component": Object {
                              "name": "Text",
                              "options": Object {},
                            },
                            "tagName": "span",
                          },
                        ],
                        "code": Object {
                          "actions": Object {},
                          "bindings": Object {},
                        },
                        "properties": Object {},
                        "tagName": "div",
                      },
                    ],
                    "code": Object {
                      "actions": Object {},
                      "bindings": Object {},
                    },
                    "properties": Object {},
                    "tagName": "div",
                  },
                ],
                "code": Object {
                  "actions": Object {},
                  "bindings": Object {},
                },
                "layerName": "Review",
                "properties": Object {},
                "responsiveStyles": Object {
                  "large": Object {
                    "background": "white",
                    "borderRadius": "5px",
                    "boxShadow": "0 2px 5px rgba(0, 0, 0, 0.1)",
                    "display": "flex",
                    "margin": "10px",
                    "padding": "10px",
                  },
                },
                "tagName": "div",
              },
            ],
            "component": Object {
              "name": "Core:Fragment",
            },
            "repeat": Object {
              "collection": "state.reviews",
              "itemName": "review",
            },
          },
        ],
        "code": Object {
          "actions": Object {},
          "bindings": Object {},
        },
        "properties": Object {},
        "tagName": "div",
      },
    ],
    "jsCode": "var props = state;

Object.assign(state, { reviews: [], showReviewPrompt: false });

fetch(
  \`https://stamped.io/api/widget/reviews?storeUrl=builder-io.myshopify.com&apiKey=\${
    props.apiKey || \\"pubkey-8bbDq7W6w4sB3OWeM1HUy2s47702hM\\"
  }&productId=\${props.productId || \\"2410511106127\\"}\`
)
  .then((res) => res.json())
  .then((data) => {
    state.reviews = data.data;
  });
",
    "tsCode": "var props = state;

useState({ reviews: [], showReviewPrompt: false });

onMount(() => {
  fetch(
    \`https://stamped.io/api/widget/reviews?storeUrl=builder-io.myshopify.com&apiKey=\${
      props.apiKey || \\"pubkey-8bbDq7W6w4sB3OWeM1HUy2s47702hM\\"
    }&productId=\${props.productId || \\"2410511106127\\"}\`
  )
    .then((res) => res.json())
    .then((data) => {
      state.reviews = data.data;
    });
});
",
  },
}
`;

exports[`Builder Stamped 2`] = `
"import { useState, Show, For } from \\"@jsx-lite/core\\";

export default function MyComponent(props) {
  const state = useState({ reviews: [], showReviewPrompt: false });

  onMount(() => {
    fetch(
      \`https://stamped.io/api/widget/reviews?storeUrl=builder-io.myshopify.com&apiKey=\${
        props.apiKey || \\"pubkey-8bbDq7W6w4sB3OWeM1HUy2s47702hM\\"
      }&productId=\${props.productId || \\"2410511106127\\"}\`
    )
      .then((res) => res.json())
      .then((data) => {
        state.reviews = data.data;
      });
  });

  return (
    <div>
      <button onClick={(event) => (state.showReviewPrompt = true)}>
        Write a review
      </button>
      <Show when={state.showReviewPrompt}>
        <input placeholder=\\"Email\\" />
        <input
          placeholder=\\"Title\\"
          css={{
            display: \\"block\\",
          }}
        />
        <textarea
          placeholder=\\"How was your experience?\\"
          css={{
            display: \\"block\\",
          }}
        />
        <button
          onClick={(event) => {
            state.showReviewPrompt = false;
          }}
          css={{
            display: \\"block\\",
          }}
        >
          Submit
        </button>
      </Show>
      <For each={state.reviews}>
        {(review, index) => (
          <div
            css={{
              margin: \\"10px\\",
              padding: \\"10px\\",
              background: \\"white\\",
              display: \\"flex\\",
              borderRadius: \\"5px\\",
              boxShadow: \\"0 2px 5px rgba(0, 0, 0, 0.1)\\",
            }}
          >
            <img
              src={review.avatar}
              css={{
                height: \\"30px\\",
                width: \\"30px\\",
                marginRight: \\"10px\\",
              }}
            />
            <div>
              <div>{review.author}</div>
              <div>{review.reviewMessage}</div>
            </div>
          </div>
        )}
      </For>
    </div>
  );
}
"
`;
