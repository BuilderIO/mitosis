// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`React Basic 1`] = `
"import { useState } from \\"react\\";

export default function MyBasicComponent(props) {
  const [name, setName] = useState(() => \\"Steve\\");

  return (
    <div>
      <input value={name} onChange={(event) => setName(event.target.value)} />
      Hello! I can run in React, Vue, Solid, or Liquid!
    </div>
  );
}
"
`;

exports[`React Button 1`] = `
"export default function Button(props) {
  return (
    <>
      {props.link ? (
        <>
          <a
            {...props.attributes}
            href={props.link}
            target={props.openLinkInNewTab ? \\"_blank\\" : undefined}
          >
            {props.text}
          </a>
        </>
      ) : null}

      {!props.link ? (
        <>
          <button {...props.attributes} type=\\"button\\">
            {props.text}
          </button>
        </>
      ) : null}
    </>
  );
}
"
`;

exports[`React Columns 1`] = `
"export default function Column(props) {
  function getColumns() {
    return props.columns || [];
  }

  function getGutterSize() {
    return typeof props.space === \\"number\\" ? props.space || 0 : 20;
  }

  function getWidth(index) {
    const columns = getColumns();
    return (columns[index] && columns[index].width) || 100 / columns.length;
  }

  function getColumnCssWidth(index) {
    const columns = getColumns();
    const gutterSize = getGutterSize();
    const subtractWidth = (gutterSize * (columns.length - 1)) / columns.length;
    return \`calc(\${getWidth(index)}% - \${subtractWidth}px)\`;
  }

  return (
    <>
      <div className=\\"builder-columns div\\">
        {props.columns?.map((column) => (
          <div className=\\"builder-column div-2\\">{column.content}</div>
        ))}
      </div>
      <style jsx>{\`
        .div {
          display: flex;
          flex-direction: column;
          align-items: stretch;
          line-height: normal;
        }
        @media (max-width: 999px) {
          .div {
            flex-direction: row;
          }
        }
        @media (max-width: 639px) {
          .div {
            flex-direction: row-reverse;
          }
        }
        .div-2 {
          flex-grow: 1;
        }
      \`}</style>
    </>
  );
}
"
`;

exports[`React CustomCode 1`] = `
"import { useState, useRef, useEffect } from \\"react\\";

export default function CustomCode(props) {
  const [scriptsInserted, setScriptsInserted] = useState(() => []);

  const [scriptsRun, setScriptsRun] = useState(() => []);

  function findAndRunScripts() {
    // TODO: Move this function to standalone one in '@builder.io/utils'
    if (elem.current && typeof window !== \\"undefined\\") {
      /** @type {HTMLScriptElement[]} */
      const scripts = elem.current.getElementsByTagName(\\"script\\");

      for (let i = 0; i < scripts.length; i++) {
        const script = scripts[i];

        if (script.src) {
          if (scriptsInserted.includes(script.src)) {
            continue;
          }

          scriptsInserted.push(script.src);
          const newScript = document.createElement(\\"script\\");
          newScript.async = true;
          newScript.src = script.src;
          document.head.appendChild(newScript);
        } else if (
          !script.type ||
          [
            \\"text/javascript\\",
            \\"application/javascript\\",
            \\"application/ecmascript\\",
          ].includes(script.type)
        ) {
          if (scriptsRun.includes(script.innerText)) {
            continue;
          }

          try {
            scriptsRun.push(script.innerText);
            new Function(script.innerText)();
          } catch (error) {
            console.warn(\\"\`CustomCode\`: Error running script:\\", error);
          }
        }
      }
    }
  }

  const elem = useRef();

  useEffect(() => {
    findAndRunScripts();
  }, []);

  return (
    <div
      ref={elem}
      className={
        \\"builder-custom-code\\" + (props.replaceNodes ? \\" replace-nodes\\" : \\"\\")
      }
      dangerouslySetInnerHTML={{ __html: \\"props.code\\" }}
    />
  );
}
"
`;

exports[`React Embed 1`] = `
"import { useState, useRef, useEffect } from \\"react\\";

export default function CustomCode(props) {
  const [scriptsInserted, setScriptsInserted] = useState(() => []);

  const [scriptsRun, setScriptsRun] = useState(() => []);

  function findAndRunScripts() {
    // TODO: Move this function to standalone one in '@builder.io/utils'
    if (elem.current && typeof window !== \\"undefined\\") {
      /** @type {HTMLScriptElement[]} */
      const scripts = elem.current.getElementsByTagName(\\"script\\");

      for (let i = 0; i < scripts.length; i++) {
        const script = scripts[i];

        if (script.src) {
          if (scriptsInserted.includes(script.src)) {
            continue;
          }

          scriptsInserted.push(script.src);
          const newScript = document.createElement(\\"script\\");
          newScript.async = true;
          newScript.src = script.src;
          document.head.appendChild(newScript);
        } else if (
          !script.type ||
          [
            \\"text/javascript\\",
            \\"application/javascript\\",
            \\"application/ecmascript\\",
          ].includes(script.type)
        ) {
          if (scriptsRun.includes(script.innerText)) {
            continue;
          }

          try {
            scriptsRun.push(script.innerText);
            new Function(script.innerText)();
          } catch (error) {
            console.warn(\\"\`CustomCode\`: Error running script:\\", error);
          }
        }
      }
    }
  }

  const elem = useRef();

  useEffect(() => {
    findAndRunScripts();
  }, []);

  return (
    <div
      ref={elem}
      className={
        \\"builder-custom-code\\" + (props.replaceNodes ? \\" replace-nodes\\" : \\"\\")
      }
      dangerouslySetInnerHTML={{ __html: \\"props.code\\" }}
    />
  );
}
"
`;

exports[`React Form block 1`] = `
"import { useState, useRef } from \\"react\\";
import { BuilderBlockComponent as BuilderBlock } from \\"@fake\\";
import { Builder, builder } from \\"@builder.io/sdk\\";
import { BuilderBlocks } from \\"@fake\\";
import { set } from \\"@fake\\";
import { get } from \\"@fake\\";

export default function FormComponent(props) {
  const [state, setState] = useState(() => \\"unsubmitted\\");

  const [responseData, setResponseData] = useState(() => null);

  const [formErrorMessage, setFormErrorMessage] = useState(() => \\"\\");

  function submissionState() {
    return (Builder.isEditing && props.previewState) || state;
  }

  function onSubmit(event) {
    const sendWithJs = props.sendWithJs || props.sendSubmissionsTo === \\"email\\";

    if (props.sendSubmissionsTo === \\"zapier\\") {
      event.preventDefault();
    } else if (sendWithJs) {
      if (!(props.action || props.sendSubmissionsTo === \\"email\\")) {
        event.preventDefault();
        return;
      }

      event.preventDefault();
      const el = event.currentTarget;
      const headers = props.customHeaders || {};
      let body;
      const formData = new FormData(el); // TODO: maybe support null

      const formPairs = Array.from(
        event.currentTarget.querySelectorAll(\\"input,select,textarea\\")
      )
        .filter((el) => !!el.name)
        .map((el) => {
          let value;
          const key = el.name;

          if (el instanceof HTMLInputElement) {
            if (el.type === \\"radio\\") {
              if (el.checked) {
                value = el.name;
                return {
                  key,
                  value,
                };
              }
            } else if (el.type === \\"checkbox\\") {
              value = el.checked;
            } else if (el.type === \\"number\\" || el.type === \\"range\\") {
              const num = el.valueAsNumber;

              if (!isNaN(num)) {
                value = num;
              }
            } else if (el.type === \\"file\\") {
              // TODO: one vs multiple files
              value = el.files;
            } else {
              value = el.value;
            }
          } else {
            value = el.value;
          }

          return {
            key,
            value,
          };
        });
      let contentType = props.contentType;

      if (props.sendSubmissionsTo === \\"email\\") {
        contentType = \\"multipart/form-data\\";
      }

      Array.from(formPairs).forEach(({ value }) => {
        if (
          value instanceof File ||
          (Array.isArray(value) && value[0] instanceof File) ||
          value instanceof FileList
        ) {
          contentType = \\"multipart/form-data\\";
        }
      }); // TODO: send as urlEncoded or multipart by default
      // because of ease of use and reliability in browser API
      // for encoding the form?

      if (contentType !== \\"application/json\\") {
        body = formData;
      } else {
        // Json
        const json = {};
        Array.from(formPairs).forEach(({ value, key }) => {
          set(json, key, value);
        });
        body = JSON.stringify(json);
      }

      if (contentType && contentType !== \\"multipart/form-data\\") {
        if (
          /* Zapier doesn't allow content-type header to be sent from browsers */ !(
            sendWithJs && props.action?.includes(\\"zapier.com\\")
          )
        ) {
          headers[\\"content-type\\"] = contentType;
        }
      }
      const presubmitEvent = new CustomEvent(\\"presubmit\\", { detail: { body } });
      if (formRef.current) {
        formRef.current.dispatchEvent(presubmitEvent);
        if (presubmitEvent.defaultPrevented) {
          return;
        }
      }
      setState(\\"sending\\");
      const formUrl = \`\${
        builder.env === \\"dev\\" ? \\"http://localhost:5000\\" : \\"https://builder.io\\"
      }/api/v1/form-submit?apiKey=\${builder.apiKey}&to=\${btoa(
        props.sendSubmissionsToEmail || \\"\\"
      )}&name=\${encodeURIComponent(props.name || \\"\\")}\`;
      fetch(
        props.sendSubmissionsTo === \\"email\\"
          ? formUrl
          : props.action /* TODO: throw error if no action URL */,
        { body, headers, method: props.method || \\"post\\" }
      ).then(
        async (res) => {
          let body;
          const contentType = res.headers.get(\\"content-type\\");
          if (contentType && contentType.indexOf(\\"application/json\\") !== -1) {
            body = await res.json();
          } else {
            body = await res.text();
          }
          if (!res.ok && props.errorMessagePath) {
            /* TODO: allow supplying an error formatter function */ let message =
              get(body, props.errorMessagePath);
            if (message) {
              if (typeof message !== \\"string\\") {
                /* TODO: ideally convert json to yaml so it woul dbe like            error: - email has been taken */ message =
                  JSON.stringify(message);
              }
              setFormErrorMessage(message);
            }
          }
          setResponseData(body);
          setState(res.ok ? \\"success\\" : \\"error\\");
          if (res.ok) {
            const submitSuccessEvent = new CustomEvent(\\"submit:success\\", {
              detail: { res, body },
            });
            if (formRef.current) {
              formRef.current.dispatchEvent(submitSuccessEvent);
              if (submitSuccessEvent.defaultPrevented) {
                return;
              }
              /* TODO: option to turn this on/off? */ if (
                props.resetFormOnSubmit !== false
              ) {
                formRef.current.reset();
              }
            }
            /* TODO: client side route event first that can be preventDefaulted */ if (
              props.successUrl
            ) {
              if (formRef.current) {
                const event = new CustomEvent(\\"route\\", {
                  detail: { url: props.successUrl },
                });
                formRef.current.dispatchEvent(event);
                if (!event.defaultPrevented) {
                  location.href = props.successUrl;
                }
              } else {
                location.href = props.successUrl;
              }
            }
          }
        },
        (err) => {
          const submitErrorEvent = new CustomEvent(\\"submit:error\\", {
            detail: { error: err },
          });
          if (formRef.current) {
            formRef.current.dispatchEvent(submitErrorEvent);
            if (submitErrorEvent.defaultPrevented) {
              return;
            }
          }
          setResponseData(err);
          setState(\\"error\\");
        }
      );
    }
  }
  const formRef = useRef();
  return (
    <>
      {\\" \\"}
      <form
        {...props.attributes}
        validate={props.validate}
        ref={formRef}
        action={!props.sendWithJs && props.action}
        method={props.method}
        name={props.name}
        onSubmit={(event) => onSubmit(event)}
      >
        {\\" \\"}
        {props.builderBlock && props.builderBlock.children ? (
          <>
            {props.builderBlock?.children?.map((block) => (
              <BuilderBlockComponent key={block.id} block={block} />
            ))}
          </>
        ) : null}{\\" \\"}
        {submissionState() === \\"error\\" ? (
          <>
            <BuilderBlocks
              dataPath=\\"errorMessage\\"
              blocks={props.errorMessage}
            />
          </>
        ) : null}{\\" \\"}
        {submissionState() === \\"sending\\" ? (
          <>
            <BuilderBlocks
              dataPath=\\"sendingMessage\\"
              blocks={props.sendingMessage}
            />
          </>
        ) : null}{\\" \\"}
        {submissionState() === \\"error\\" && responseData ? (
          <>
            <pre className=\\"builder-form-error-text pre\\">
              {\\" \\"}
              {JSON.stringify(responseData, null, 2)}{\\" \\"}
            </pre>
          </>
        ) : null}{\\" \\"}
        {submissionState() === \\"success\\" ? (
          <>
            <BuilderBlocks
              dataPath=\\"successMessage\\"
              blocks={props.successMessage}
            />
          </>
        ) : null}{\\" \\"}
      </form>{\\" \\"}
      <style jsx>{\`
        .pre {
          padding: 10px;
          color: red;
          text-align: center;
        }
      \`}</style>{\\" \\"}
    </>
  );
}
"
`;

exports[`React Image 1`] = `
"import { useState, useRef, useEffect } from \\"react\\";

export default function Image(props) {
  const [scrollListener, setScrollListener] = useState(() => null);

  const [imageLoaded, setImageLoaded] = useState(() => false);

  const [load, setLoad] = useState(() => false);

  function setLoaded() {
    setImageLoaded(true);
  }

  function isBrowser() {
    return (
      typeof window !== \\"undefined\\" && window.navigator.product != \\"ReactNative\\"
    );
  }

  function useLazyLoading() {
    // TODO: Add more checks here, like testing for real web browsers
    return !!props.lazy && isBrowser();
  }

  const pictureRef = useRef();

  useEffect(() => {
    if (useLazyLoading()) {
      // throttled scroll capture listener
      const listener = () => {
        if (pictureRef.current) {
          const rect = pictureRef.current.getBoundingClientRect();
          const buffer = window.innerHeight / 2;

          if (rect.top < window.innerHeight + buffer) {
            setLoad(true);
            setScrollListener(null);
            window.removeEventListener(\\"scroll\\", listener);
          }
        }
      };

      setScrollListener(listener);
      window.addEventListener(\\"scroll\\", listener, {
        capture: true,
        passive: true,
      });
      listener();
    }
  }, []);

  useEffect(() => {
    if (scrollListener) {
      window.removeEventListener(\\"scroll\\", scrollListener);
    }
  }, []);

  return (
    <>
      <>
        <picture ref={pictureRef}>
          {!useLazyLoading() || load ? (
            <>
              <img
                className=\\"img\\"
                alt={props.altText}
                aria-role={props.altText ? \\"presentation\\" : undefined}
                className={
                  \\"builder-image\\" + (props.class ? \\" \\" + props.class : \\"\\")
                }
                src={props.image}
                onLoad={(event) => setLoaded()}
                srcset={props.srcset}
                sizes={props.sizes}
              />
            </>
          ) : null}

          <source srcset={props.srcset} />
        </picture>

        {props.children}
      </>
      <style jsx>{\`
        .img {
          opacity: 1;
          transition: opacity 0.2s ease-in-out;
          object-fit: cover;
          object-position: center;
        }
      \`}</style>
    </>
  );
}
"
`;

exports[`React Img 1`] = `
"import { Builder } from \\"@builder.io/sdk\\";

export default function ImgComponent(props) {
  return (
    <img
      {...props.attributes}
      style={{
        objectFit: props.backgroundSize || \\"cover\\",
        objectPosition: props.backgroundPosition || \\"center\\",
      }}
      key={(Builder.isEditing && props.imgSrc) || \\"default-key\\"}
      alt={props.altText}
      src={props.imgSrc}
    />
  );
}
"
`;

exports[`React Input block 1`] = `
"import { Builder } from \\"@builder.io/sdk\\";

export default function FormInputComponent(props) {
  return (
    <input
      {...props.attributes}
      key={
        Builder.isEditing && props.defaultValue
          ? props.defaultValue
          : \\"default-key\\"
      }
      placeholder={props.placeholder}
      type={props.type}
      name={props.name}
      value={props.value}
      defaultValue={props.defaultValue}
      required={props.required}
    />
  );
}
"
`;

exports[`React RawText 1`] = `
"export default function RawText(props) {
  return (
    <span
      className={props.attributes?.class || props.attributes?.className}
      dangerouslySetInnerHTML={{ __html: \\"props.text || ''\\" }}
    />
  );
}
"
`;

exports[`React Section 1`] = `
"export default function SectionComponent(props) {
  return (
    <section
      {...props.attributes}
      style={
        props.maxWidth && typeof props.maxWidth === \\"number\\"
          ? {
              maxWidth: props.maxWidth,
            }
          : undefined
      }
    >
      {props.children}
    </section>
  );
}
"
`;

exports[`React Select block 1`] = `
"import { Builder } from \\"@builder.io/sdk\\";

export default function SelectComponent(props) {
  return (
    <select
      {...props.attributes}
      value={props.value}
      key={
        Builder.isEditing && props.defaultValue
          ? props.defaultValue
          : \\"default-key\\"
      }
      defaultValue={props.defaultValue}
      name={props.name}
    >
      {props.options?.map((option) => (
        <option value={option.value}>{option.name || option.value}</option>
      ))}
    </select>
  );
}
"
`;

exports[`React Stamped.io 1`] = `
"import styled from \\"styled-components\\";
import { useState, useEffect } from \\"react\\";

export default function SmileReviews(props) {
  const [reviews, setReviews] = useState(() => []);

  const [showReviewPrompt, setShowReviewPrompt] = useState(() => false);

  useEffect(() => {
    fetch(
      \`https://stamped.io/api/widget/reviews?storeUrl=builder-io.myshopify.com&apiKey=\${
        props.apiKey || \\"pubkey-8bbDq7W6w4sB3OWeM1HUy2s47702hM\\"
      }&productId=\${props.productId || \\"2410511106127\\"}\`
    )
      .then((res) => res.json())
      .then((data) => {
        setReviews(data.data);
      });
  }, []);

  return (
    <div>
      <button onClick={(event) => setShowReviewPrompt(true)}>
        Write a review
      </button>

      {showReviewPrompt ? (
        <>
          <input placeholder=\\"Email\\" />
          <Input placeholder=\\"Title\\" />
          <Textarea placeholder=\\"How was your experience?\\" />
          <Button
            onClick={(event) => {
              setShowReviewPrompt(false);
            }}
          >
            Submit
          </Button>
        </>
      ) : null}

      {reviews?.map((review) => (
        <Review key={review.id}>
          <Img src={review.avatar} />

          <div>
            <div>{review.author}</div>

            <div>{review.reviewMessage}</div>
          </div>
        </Review>
      ))}
    </div>
  );
}

const Input = styled.input\`
  display: block;
\`;

const Textarea = styled.textarea\`
  display: block;
\`;

const Button = styled.button\`
  display: block;
\`;

const Review = styled.div\`
  margin: 10px;
  padding: 10px;
  background: white;
  display: flex;
  border-radius: 5px;
  box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
\`;

const Img = styled.img\`
  height: 30px;
  width: 30px;
  margin-right: 10px;
\`;
"
`;

exports[`React Submit button block 1`] = `
"export default function SubmitButton(props) {
  return (
    <button {...props.attributes} type=\\"submit\\">
      {props.text}
    </button>
  );
}
"
`;

exports[`React Text 1`] = `
"import { Builder } from \\"@builder.io/sdk\\";

export default function Text(props) {
  return (
    <div
      contentEditable={allowEditingText || undefined}
      dangerouslySetInnerHTML={{ __html: \\"props.text || props.content || ''\\" }}
    />
  );
}
"
`;

exports[`React Textarea 1`] = `
"export default function Textarea(props) {
  return (
    <textarea
      {...props.attributes}
      placeholder={props.placeholder}
      name={props.name}
      value={props.value}
      defaultValue={props.defaultValue}
    />
  );
}
"
`;

exports[`React Video 1`] = `
"export default function Video(props) {
  return (
    <video
      {...props.attributes}
      preload=\\"none\\"
      style={{
        width: \\"100%\\",
        height: \\"100%\\",
        ...props.attributes?.style,
        objectFit: props.fit,
        objectPosition: props.position,
        // Hack to get object fit to work as expected and
        // not have the video overflow
        borderRadius: 1,
      }}
      key={props.video || \\"no-src\\"}
      poster={props.posterImage}
      autoPlay={props.autoPlay}
      muted={props.muted}
      controls={props.controls}
      loop={props.loop}
    />
  );
}
"
`;
