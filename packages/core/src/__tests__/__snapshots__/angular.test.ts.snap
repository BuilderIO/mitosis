// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Angular Basic 1`] = `
"import { Component } from \\"@angular/core\\";

@Component({
  selector: \\"my-basic-component\\",
  template: \`
    <div class=\\"test div\\">
      <input [value]=\\"name\\" (input)=\\"name = $event.target.value\\" />

      Hello! I can run in React, Vue, Solid, or Liquid!
    </div>
  \`,
  styles: [
    \`
      .div {
        padding: 10px;
      }
    \`,
  ],
})
export default class MyBasicComponent {
  name = \\"Steve\\";

  constructor() {}
}
"
`;

exports[`Angular Basic Child Component 1`] = `
"import { Component } from \\"@angular/core\\";

import MyBasicComponent from \\"./basic.raw\\";
import MyBasicOnMountUpdateComponent from \\"./basic-onMount-update.raw\\";

@Component({
  selector: \\"my-basic-child-component\\",
  template: \`
    <div>
      <my-basic-component [id]=\\"dev\\"></my-basic-component>

      <div>
        <my-basic-on-mount-update-component
          [hi]=\\"name\\"
          [bye]=\\"dev\\"
        ></my-basic-on-mount-update-component>
      </div>
    </div>
  \`,
})
export default class MyBasicChildComponent {
  name = \\"Steve\\";
  dev = \\"PatrickJS\\";

  constructor() {}
}
"
`;

exports[`Angular Basic Context 1`] = `
"import { Component } from \\"@angular/core\\";

import { Injector, createInjector, MyService } from \\"@dummy/injection-js\\";

@Component({
  selector: \\"my-basic-component\\",
  template: \`
    <div>
      {{myService.method('hello') + name}} Hello! I can run in React, Vue,
      Solid, or Liquid!

      <input (input)=\\"onChange\\" />
    </div>
  \`,
})
export default class MyBasicComponent {
  name = \\"PatrickJS\\";
  onChange = function onChange() {
    const change = this.myService.method(\\"change\\");
    console.log(change);
  };

  constructor(public myService: MyService) {
    const hi = this.myService.method(\\"hi\\");
    console.log(hi);
  }

  ngOnInit() {
    const bye = this.myService.method(\\"hi\\");
    console.log(bye);
  }
}
"
`;

exports[`Angular Basic Ref 1`] = `
"import { Component, ViewChild, ElementRef, Input } from \\"@angular/core\\";

@Component({
  selector: \\"my-masic-ref-component\\",
  template: \`
    <div>
      <ng-container *ngIf=\\"showInput\\">
        <div>
          <input
            class=\\"input\\"
            #inputRef
            [value]=\\"name\\"
            (blur)=\\"onBlur()\\"
            (input)=\\"name = $event.target.value\\"
          />

          <label for=\\"cars\\">Choose a car:</label>

          <select name=\\"cars\\" id=\\"cars\\">
            <option value=\\"supra\\">GR Supra</option>

            <option value=\\"86\\">GR 86</option>
          </select>
        </div>
      </ng-container>

      Hello {{lowerCaseName()}} ! I can run in React, Qwik, Vue, Solid, or Web
      Component!
    </div>
  \`,
  styles: [
    \`
      .input {
        color: red;
      }
    \`,
  ],
})
export default class MyMasicRefComponent {
  @Input() showInput: any;

  @ViewChild(\\"inputRef\\") inputRef: ElementRef;

  name = \\"PatrickJS\\";
  onBlur = function onBlur() {
    // Maintain focus
    this.inputRef.nativeElement.focus();
  };
  lowerCaseName = function lowerCaseName() {
    return this.name.toLowerCase();
  };

  constructor() {}
}
"
`;

exports[`Angular BasicFor 1`] = `
"import { Component } from \\"@angular/core\\";

@Component({
  selector: \\"my-basic-for-component\\",
  template: \`
    <div>
      <ng-container *ngFor=\\"let person of names\\">
        <div>
          <input
            [value]=\\"name\\"
            (input)=\\"
         name = $event.target.value + ' and ' + person;
       \\"
          />

          Hello {{person}} ! I can run in Qwik, Web Component, React, Vue,
          Solid, or Liquid!
        </div>
      </ng-container>
    </div>
  \`,
})
export default class MyBasicForComponent {
  name = \\"PatrickJS\\";
  names = [\\"Steve\\", \\"PatrickJS\\"];

  constructor() {}

  ngOnInit() {
    console.log(\\"onMount code\\");
  }
}
"
`;

exports[`Angular Slot Jsx 1`] = `
"import { Component } from \\"@angular/core\\";

import ContentSlotCode from \\"./content-slot-jsx.raw\\";

@Component({
  selector: \\"slot-code\\",
  template: \`
    <div>
      <content-slot-code><div testing>Hello</div></content-slot-code>
    </div>
  \`,
})
export default class SlotCode {
  constructor() {}
}
"
`;

exports[`Angular Text 1`] = `
"import { Component, Input } from \\"@angular/core\\";

import { Builder } from \\"@builder.io/sdk\\";

@Component({
  selector: \\"text\\",
  template: \`
    <div  [contentEditable]='allowEditingText || undefined'  [data-name]='{
      test: name || 'any name'
    }'  [innerHTML]=\\"text || content || name || '<p class=\\\\'text-lg\\\\'>my name</p>'\\"  ></div>
  \`,
})
export default class Text {
  @Input() text: any;
  @Input() content: any;

  name = \\"Decadef20\\";

  constructor() {}
}
"
`;

exports[`Angular basic outputs 1`] = `
"import { Output, EventEmitter, Component, Input } from \\"@angular/core\\";

@Component({
  selector: \\"my-basic-outputs-component\\",
  template: \`
    <div></div>
  \`,
})
export default class MyBasicOutputsComponent {
  @Output() onMessage = new EventEmitter();
  @Output() onEvent = new EventEmitter();

  @Input() message: any;

  name = \\"PatrickJS\\";

  constructor() {}

  ngOnInit() {
    this.onMessage.emit(this.name);
    this.onEvent.emit(this.message);
  }
}
"
`;

exports[`Angular basic outputs meta 1`] = `
"import { Output, EventEmitter, Component, Input } from \\"@angular/core\\";

@Component({
  selector: \\"my-basic-outputs-component\\",
  template: \`
    <div></div>
  \`,
})
export default class MyBasicOutputsComponent {
  @Output() onMessage = new EventEmitter();
  @Output() onEvent = new EventEmitter();

  @Input() message: any;

  name = \\"PatrickJS\\";

  constructor() {}

  ngOnInit() {
    this.onMessage.emit(this.name);
    this.onEvent.emit(this.message);
  }
}
"
`;

exports[`Angular className to class 1`] = `
"import { Component } from \\"@angular/core\\";

@Component({
  selector: \\"class-name-code\\",
  template: \`
    <div>
      <div class=\\"no binding\\">Without Binding</div>

      <div [class]=\\"bindings\\">With binding</div>
    </div>
  \`,
})
export default class ClassNameCode {
  bindings = \\"a binding\\";

  constructor() {}
}
"
`;

exports[`Angular multiple onUpdate 1`] = `
"import { Component } from \\"@angular/core\\";

@Component({
  selector: \\"multiple-on-update\\",
  template: \`
    <div></div>
  \`,
})
export default class MultipleOnUpdate {
  constructor() {}

  ngAfterContentChecked() {
    console.log(\\"Runs on every update/rerender\\");

    console.log(\\"Runs on every update/rerender as well\\");
  }
}
"
`;

exports[`Angular ng-content and Slot 1`] = `
"import { Component, Input } from \\"@angular/core\\";

@Component({
  selector: \\"content-slot-code\\",
  template: \`
    <div>
      <ng-content select=\\"[testing]\\"></ng-content>

      <div>
        <hr />
      </div>

      <div>
        <ng-content></ng-content>
      </div>
    </div>
  \`,
})
export default class ContentSlotCode {
  constructor() {}
}
"
`;

exports[`Angular ng-content and Slot jsx-props 1`] = `
"import { Component, Input } from \\"@angular/core\\";

@Component({
  selector: \\"content-slot-jsx-code\\",
  template: \`
    <div>
      <ng-content select=\\"[testing]\\"></ng-content>

      <div>
        <hr />
      </div>

      <div><ng-content></ng-content></div>
    </div>
  \`,
})
export default class ContentSlotJsxCode {
  @Input() children: any;

  constructor() {}
}
"
`;

exports[`Angular onInit 1`] = `
"import { Component, Input } from \\"@angular/core\\";

@Component({
  selector: \\"on-init\\",
  template: \`
    <div>Default name defined by parent {{name}}</div>
  \`,
})
export default class OnInit {
  @Input() name: any;

  name = \\"\\";

  constructor() {
    this.name = defaultValues.name || this.name;
    console.log(\\"set defaults with props\\");
  }
}
"
`;

exports[`Angular onInit and onMount 1`] = `
"import { Component } from \\"@angular/core\\";

@Component({
  selector: \\"on-init\\",
  template: \`
    <div></div>
  \`,
})
export default class OnInit {
  constructor() {
    console.log(\\"onInit\\");
  }

  ngOnInit() {
    console.log(\\"onMount\\");
  }
}
"
`;

exports[`Angular onMount 1`] = `
"import { Component } from \\"@angular/core\\";

@Component({
  selector: \\"comp\\",
  template: \`
    <div></div>
  \`,
})
export default class Comp {
  constructor() {}

  ngOnInit() {
    console.log(\\"Runs on mount\\");
  }

  ngOnDestroy() {
    console.log(\\"Runs on unMount\\");
  }
}
"
`;

exports[`Angular onUpdate 1`] = `
"import { Component } from \\"@angular/core\\";

@Component({
  selector: \\"on-update\\",
  template: \`
    <div></div>
  \`,
})
export default class OnUpdate {
  constructor() {}

  ngAfterContentChecked() {
    console.log(\\"Runs on every update/rerender\\");
  }
}
"
`;
