// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`React Native > jsx > Javascript Test > AdvancedRef 1`] = `"Cannot read properties of undefined (reading 'ref')"`;

exports[`React Native > jsx > Javascript Test > Basic 1`] = `"Cannot read properties of undefined (reading 'style')"`;

exports[`React Native > jsx > Javascript Test > Basic Context 1`] = `"Cannot read properties of undefined (reading 'value')"`;

exports[`React Native > jsx > Javascript Test > Basic OnMount Update 1`] = `
"import * as React from \\"react\\";
import {
  FlatList,
  ScrollView,
  View,
  StyleSheet,
  Image,
  Text,
  Pressable,
  TextInput,
} from \\"react-native\\";
import { useState, useEffect } from \\"react\\";

function MyBasicOnMountUpdateComponent(props) {
  const [name, setName] = useState(() => \\"PatrickJS\\");

  const [names, setNames] = useState(() => [\\"Steve\\", \\"PatrickJS\\"]);

  useEffect(() => {
    setName(\\"PatrickJS onInit\\" + props.hi);
  }, []);

  useEffect(() => {
    setName(\\"PatrickJS onMount\\" + props.bye);
  }, []);

  return (
    <View>
      <Text>Hello </Text>
      <Text>{name}</Text>
    </View>
  );
}

export default MyBasicOnMountUpdateComponent;
"
`;

exports[`React Native > jsx > Javascript Test > Basic Outputs 1`] = `
"import * as React from \\"react\\";
import {
  FlatList,
  ScrollView,
  View,
  StyleSheet,
  Image,
  Text,
  Pressable,
  TextInput,
} from \\"react-native\\";
import { useState, useEffect } from \\"react\\";

function MyBasicOutputsComponent(props) {
  const [name, setName] = useState(() => \\"PatrickJS\\");

  useEffect(() => {
    props.onMessage(name);
    props.onEvent(props.message);
  }, []);

  return <View />;
}

export default MyBasicOutputsComponent;
"
`;

exports[`React Native > jsx > Javascript Test > Basic Outputs Meta 1`] = `
"import * as React from \\"react\\";
import {
  FlatList,
  ScrollView,
  View,
  StyleSheet,
  Image,
  Text,
  Pressable,
  TextInput,
} from \\"react-native\\";
import { useState, useEffect } from \\"react\\";

function MyBasicOutputsComponent(props) {
  const [name, setName] = useState(() => \\"PatrickJS\\");

  useEffect(() => {
    props.onMessage(name);
    props.onEvent(props.message);
  }, []);

  return <View />;
}

export default MyBasicOutputsComponent;
"
`;

exports[`React Native > jsx > Javascript Test > BasicAttribute 1`] = `"Cannot read properties of undefined (reading 'spellcheck')"`;

exports[`React Native > jsx > Javascript Test > BasicBooleanAttribute 1`] = `"Cannot read properties of undefined (reading 'toggle')"`;

exports[`React Native > jsx > Javascript Test > BasicChildComponent 1`] = `"Cannot read properties of undefined (reading 'id')"`;

exports[`React Native > jsx > Javascript Test > BasicFor 1`] = `"Cannot read properties of undefined (reading 'value')"`;

exports[`React Native > jsx > Javascript Test > BasicRef 1`] = `"Cannot read properties of undefined (reading 'ref')"`;

exports[`React Native > jsx > Javascript Test > BasicRefAssignment 1`] = `"Cannot read properties of undefined (reading 'onClick')"`;

exports[`React Native > jsx > Javascript Test > BasicRefPrevious 1`] = `"Cannot read properties of undefined (reading 'onClick')"`;

exports[`React Native > jsx > Javascript Test > Button 1`] = `"Cannot read properties of undefined (reading 'props.attributes')"`;

exports[`React Native > jsx > Javascript Test > Columns 1`] = `"Cannot read properties of undefined (reading 'style')"`;

exports[`React Native > jsx > Javascript Test > ContentSlotHtml 1`] = `
"import * as React from \\"react\\";
import {
  FlatList,
  ScrollView,
  View,
  StyleSheet,
  Image,
  Text,
  Pressable,
  TextInput,
} from \\"react-native\\";

function ContentSlotCode(props) {
  return (
    <View>
      <>{props.slotTesting}</>
      <View>
        <View />
      </View>
      <View>
        <>{props.children}</>
      </View>
    </View>
  );
}

export default ContentSlotCode;
"
`;

exports[`React Native > jsx > Javascript Test > ContentSlotJSX 1`] = `"Cannot read properties of undefined (reading 'name')"`;

exports[`React Native > jsx > Javascript Test > CustomCode 1`] = `"Cannot read properties of undefined (reading 'ref')"`;

exports[`React Native > jsx > Javascript Test > Embed 1`] = `"Cannot read properties of undefined (reading 'ref')"`;

exports[`React Native > jsx > Javascript Test > Form 1`] = `"Cannot read properties of undefined (reading 'validate')"`;

exports[`React Native > jsx > Javascript Test > Image 1`] = `"Cannot read properties of undefined (reading 'ref')"`;

exports[`React Native > jsx > Javascript Test > Image State 1`] = `"Cannot read properties of undefined (reading 'src')"`;

exports[`React Native > jsx > Javascript Test > Img 1`] = `"Cannot read properties of undefined (reading 'style')"`;

exports[`React Native > jsx > Javascript Test > Input 1`] = `"Cannot read properties of undefined (reading 'props.attributes')"`;

exports[`React Native > jsx > Javascript Test > InputParent 1`] = `"Cannot read properties of undefined (reading 'onChange')"`;

exports[`React Native > jsx > Javascript Test > RawText 1`] = `"Cannot read properties of undefined (reading 'innerHTML')"`;

exports[`React Native > jsx > Javascript Test > Section 1`] = `"Cannot read properties of undefined (reading 'props.attributes')"`;

exports[`React Native > jsx > Javascript Test > Select 1`] = `"Cannot read properties of undefined (reading 'props.attributes')"`;

exports[`React Native > jsx > Javascript Test > SlotDefault 1`] = `
"import * as React from \\"react\\";
import {
  FlatList,
  ScrollView,
  View,
  StyleSheet,
  Image,
  Text,
  Pressable,
  TextInput,
} from \\"react-native\\";

function SlotCode(props) {
  return (
    <View>
      <>
        {props.children || (
          <View>
            <Text>Default content</Text>
          </View>
        )}
      </>
    </View>
  );
}

export default SlotCode;
"
`;

exports[`React Native > jsx > Javascript Test > SlotHtml 1`] = `
"import * as React from \\"react\\";
import {
  FlatList,
  ScrollView,
  View,
  StyleSheet,
  Image,
  Text,
  Pressable,
  TextInput,
} from \\"react-native\\";
import ContentSlotCode from \\"./content-slot-jsx.raw\\";

function SlotCode(props) {
  return (
    <View>
      <ContentSlotCode testing={<div>Hello</div>}></ContentSlotCode>
    </View>
  );
}

export default SlotCode;
"
`;

exports[`React Native > jsx > Javascript Test > SlotJsx 1`] = `
"import * as React from \\"react\\";
import {
  FlatList,
  ScrollView,
  View,
  StyleSheet,
  Image,
  Text,
  Pressable,
  TextInput,
} from \\"react-native\\";
import ContentSlotCode from \\"./content-slot-jsx.raw\\";

function SlotCode(props) {
  return (
    <View>
      <ContentSlotCode
        slotTesting={
          <View>
            <Text>Hello</Text>
          </View>
        }
      />
    </View>
  );
}

export default SlotCode;
"
`;

exports[`React Native > jsx > Javascript Test > SlotNamed 1`] = `
"import * as React from \\"react\\";
import {
  FlatList,
  ScrollView,
  View,
  StyleSheet,
  Image,
  Text,
  Pressable,
  TextInput,
} from \\"react-native\\";

function SlotCode(props) {
  return (
    <View>
      <>{props.myAwesomeSlot}</>
      <>{props.top}</>
      <>{props.left || <Text>Default left</Text>}</>
      <>{props.children || <Text>Default Child</Text>}</>
    </View>
  );
}

export default SlotCode;
"
`;

exports[`React Native > jsx > Javascript Test > Stamped.io 1`] = `"Cannot read properties of undefined (reading 'data-user')"`;

exports[`React Native > jsx > Javascript Test > Submit 1`] = `"Cannot read properties of undefined (reading 'props.attributes')"`;

exports[`React Native > jsx > Javascript Test > Text 1`] = `"Cannot read properties of undefined (reading 'contentEditable')"`;

exports[`React Native > jsx > Javascript Test > Textarea 1`] = `"Cannot read properties of undefined (reading 'props.attributes')"`;

exports[`React Native > jsx > Javascript Test > Video 1`] = `"Cannot read properties of undefined (reading 'props.attributes')"`;

exports[`React Native > jsx > Javascript Test > arrowFunctionInUseStore 1`] = `
"import * as React from \\"react\\";
import {
  FlatList,
  ScrollView,
  View,
  StyleSheet,
  Image,
  Text,
  Pressable,
  TextInput,
} from \\"react-native\\";
import { useState } from \\"react\\";

function MyComponent(props) {
  const [name, setName] = useState(() => \\"steve\\");

  function setName(value) {
    setName(value);
  }

  function updateNameWithArrowFn(value) {
    setName(value);
  }

  return (
    <View>
      <Text>Hello </Text>
      <Text>{name}</Text>
    </View>
  );
}

export default MyComponent;
"
`;

exports[`React Native > jsx > Javascript Test > basicForNoTagReference 1`] = `
"import * as React from \\"react\\";
import {
  FlatList,
  ScrollView,
  View,
  StyleSheet,
  Image,
  Text,
  Pressable,
  TextInput,
} from \\"react-native\\";
import { useState } from \\"react\\";

function MyBasicForNoTagRefComponent(props) {
  const [name, setName] = useState(() => \\"VincentW\\");

  const [TagName, setTagName] = useState(() => \\"div\\");

  function TagNameGetter() {
    return \\"span\\";
  }

  const [Tag, setTag] = useState(() => \\"span\\");

  const TagNameGetterRef = TagNameGetter();

  return (
    <TagNameGetterRef>
      <Text>Hello </Text>
      <Tag>
        <Text>{name}</Text>
      </Tag>
      {props.actions?.map((action) => (
        <TagName>
          <action.icon />
          <View>
            <Text>{action.text}</Text>
          </View>
        </TagName>
      ))}
    </TagNameGetterRef>
  );
}

export default MyBasicForNoTagRefComponent;
"
`;

exports[`React Native > jsx > Javascript Test > basicForwardRef 1`] = `"Cannot read properties of undefined (reading 'ref')"`;

exports[`React Native > jsx > Javascript Test > basicForwardRefMetadata 1`] = `"Cannot read properties of undefined (reading 'ref')"`;

exports[`React Native > jsx > Javascript Test > basicOnUpdateReturn 1`] = `
"import * as React from \\"react\\";
import {
  FlatList,
  ScrollView,
  View,
  StyleSheet,
  Image,
  Text,
  Pressable,
  TextInput,
} from \\"react-native\\";
import { useState, useEffect } from \\"react\\";

function MyBasicOnUpdateReturnComponent(props) {
  const [name, setName] = useState(() => \\"PatrickJS\\");

  useEffect(() => {
    const controller = new AbortController();
    const signal = controller.signal;
    fetch(\\"https://patrickjs.com/api/resource.json\\", {
      signal,
    })
      .then((response) => response.json())
      .then((data) => {
        setName(data.name);
      });
    return () => {
      if (!signal.aborted) {
        controller.abort();
      }
    };
  }, [name]);

  return (
    <View>
      <Text>Hello! </Text>
      <Text>{name}</Text>
    </View>
  );
}

export default MyBasicOnUpdateReturnComponent;
"
`;

exports[`React Native > jsx > Javascript Test > class + ClassName + css 1`] = `"Cannot read properties of undefined (reading 'style')"`;

exports[`React Native > jsx > Javascript Test > class + css 1`] = `"Cannot read properties of undefined (reading 'style')"`;

exports[`React Native > jsx > Javascript Test > className + css 1`] = `"Cannot read properties of undefined (reading 'style')"`;

exports[`React Native > jsx > Javascript Test > className 1`] = `
"import * as React from \\"react\\";
import {
  FlatList,
  ScrollView,
  View,
  StyleSheet,
  Image,
  Text,
  Pressable,
  TextInput,
} from \\"react-native\\";
import { useState } from \\"react\\";

function ClassNameCode(props) {
  const [bindings, setBindings] = useState(() => \\"a binding\\");

  return (
    <View>
      <View>
        <Text>Without Binding</Text>
      </View>
      <View>
        <Text>With binding</Text>
      </View>
    </View>
  );
}

export default ClassNameCode;
"
`;

exports[`React Native > jsx > Javascript Test > classState 1`] = `"Cannot read properties of undefined (reading 'style')"`;

exports[`React Native > jsx > Javascript Test > componentWithContext 1`] = `"Cannot read properties of undefined (reading 'value')"`;

exports[`React Native > jsx > Javascript Test > componentWithContextMultiRoot 1`] = `"Cannot read properties of undefined (reading 'value')"`;

exports[`React Native > jsx > Javascript Test > contentState 1`] = `"Cannot read properties of undefined (reading 'value')"`;

exports[`React Native > jsx > Javascript Test > defaultProps 1`] = `"Cannot read properties of undefined (reading 'props.attributes')"`;

exports[`React Native > jsx > Javascript Test > defaultPropsOutsideComponent 1`] = `"Cannot read properties of undefined (reading 'props.attributes')"`;

exports[`React Native > jsx > Javascript Test > defaultValsWithTypes 1`] = `
"import * as React from \\"react\\";
import {
  FlatList,
  ScrollView,
  View,
  StyleSheet,
  Image,
  Text,
  Pressable,
  TextInput,
} from \\"react-native\\";

const DEFAULT_VALUES = {
  name: \\"Sami\\",
};

function ComponentWithTypes(props) {
  return (
    <View>
      <Text> Hello </Text>
      <Text>{props.name || DEFAULT_VALUES.name}</Text>
    </View>
  );
}

export default ComponentWithTypes;
"
`;

exports[`React Native > jsx > Javascript Test > expressionState 1`] = `
"import * as React from \\"react\\";
import {
  FlatList,
  ScrollView,
  View,
  StyleSheet,
  Image,
  Text,
  Pressable,
  TextInput,
} from \\"react-native\\";
import { useState } from \\"react\\";

function MyComponent(props) {
  const [refToUse, setRefToUse] = useState(() =>
    !(props.componentRef instanceof Function) ? props.componentRef : null
  );

  return (
    <View>
      <Text>{refToUse}</Text>
    </View>
  );
}

export default MyComponent;
"
`;

exports[`React Native > jsx > Javascript Test > getterState 1`] = `
"import * as React from \\"react\\";
import {
  FlatList,
  ScrollView,
  View,
  StyleSheet,
  Image,
  Text,
  Pressable,
  TextInput,
} from \\"react-native\\";

function Button(props) {
  function foo2() {
    return props.foo + \\"foo\\";
  }

  function bar() {
    return \\"bar\\";
  }

  function baz(i) {
    return i + foo2().length;
  }

  return (
    <View>
      <View>
        <Text>{foo2()}</Text>
      </View>
      <View>
        <Text>{bar()}</Text>
      </View>
      <View>
        <Text>{baz(1)}</Text>
      </View>
    </View>
  );
}

export default Button;
"
`;

exports[`React Native > jsx > Javascript Test > import types 1`] = `"Cannot read properties of undefined (reading 'state.getRenderContentProps(props.renderContentProps.block, 0)')"`;

exports[`React Native > jsx > Javascript Test > inputToTextInputRN 1`] = `"Cannot read properties of undefined (reading 'value')"`;

exports[`React Native > jsx > Javascript Test > multipleOnUpdate 1`] = `
"import * as React from \\"react\\";
import {
  FlatList,
  ScrollView,
  View,
  StyleSheet,
  Image,
  Text,
  Pressable,
  TextInput,
} from \\"react-native\\";
import { useEffect } from \\"react\\";

function MultipleOnUpdate(props) {
  useEffect(() => {
    console.log(\\"Runs on every update/rerender\\");
  });
  useEffect(() => {
    console.log(\\"Runs on every update/rerender as well\\");
  });

  return <View />;
}

export default MultipleOnUpdate;
"
`;

exports[`React Native > jsx > Javascript Test > multipleOnUpdateWithDeps 1`] = `
"import * as React from \\"react\\";
import {
  FlatList,
  ScrollView,
  View,
  StyleSheet,
  Image,
  Text,
  Pressable,
  TextInput,
} from \\"react-native\\";
import { useState, useEffect } from \\"react\\";

function MultipleOnUpdateWithDeps(props) {
  const [a, setA] = useState(() => \\"a\\");

  const [b, setB] = useState(() => \\"b\\");

  const [c, setC] = useState(() => \\"c\\");

  const [d, setD] = useState(() => \\"d\\");

  useEffect(() => {
    console.log(\\"Runs when a or b changes\\", a, b);

    if (a === \\"a\\") {
      setA(\\"b\\");
    }
  }, [a, b]);
  useEffect(() => {
    console.log(\\"Runs when c or d changes\\", c, d);

    if (a === \\"a\\") {
      setA(\\"b\\");
    }
  }, [c, d]);

  return <View />;
}

export default MultipleOnUpdateWithDeps;
"
`;

exports[`React Native > jsx > Javascript Test > multipleSpreads 1`] = `"Cannot read properties of undefined (reading 'attrs')"`;

exports[`React Native > jsx > Javascript Test > nestedShow 1`] = `
"import * as React from \\"react\\";
import {
  FlatList,
  ScrollView,
  View,
  StyleSheet,
  Image,
  Text,
  Pressable,
  TextInput,
} from \\"react-native\\";

function NestedShow(props) {
  return (
    <>
      {props.conditionA ? (
        <>
          {!props.conditionB ? (
            <View>
              <Text>if condition A and condition B</Text>
            </View>
          ) : (
            <View>
              <Text>else-condition-B</Text>
            </View>
          )}
        </>
      ) : (
        <View>
          <Text>else-condition-A</Text>
        </View>
      )}
    </>
  );
}

export default NestedShow;
"
`;

exports[`React Native > jsx > Javascript Test > nestedStyles 1`] = `"Cannot read properties of undefined (reading 'style')"`;

exports[`React Native > jsx > Javascript Test > onClickToPressable 1`] = `"Cannot read properties of undefined (reading 'onClick')"`;

exports[`React Native > jsx > Javascript Test > onEvent 1`] = `"Cannot read properties of undefined (reading 'ref')"`;

exports[`React Native > jsx > Javascript Test > onInit & onMount 1`] = `
"import * as React from \\"react\\";
import {
  FlatList,
  ScrollView,
  View,
  StyleSheet,
  Image,
  Text,
  Pressable,
  TextInput,
} from \\"react-native\\";
import { useEffect } from \\"react\\";

function OnInit(props) {
  useEffect(() => {
    console.log(\\"onInit\\");
  }, []);

  useEffect(() => {
    console.log(\\"onMount\\");
  }, []);

  return <View />;
}

export default OnInit;
"
`;

exports[`React Native > jsx > Javascript Test > onInit 1`] = `
"import * as React from \\"react\\";
import {
  FlatList,
  ScrollView,
  View,
  StyleSheet,
  Image,
  Text,
  Pressable,
  TextInput,
} from \\"react-native\\";
import { useState, useEffect } from \\"react\\";

export const defaultValues = {
  name: \\"PatrickJS\\",
};

function OnInit(props) {
  const [name, setName] = useState(() => \\"\\");

  useEffect(() => {
    setName(defaultValues.name || props.name);
    console.log(\\"set defaults with props\\");
  }, []);

  return (
    <View>
      <Text>Default name defined by parent </Text>
      <Text>{name}</Text>
    </View>
  );
}

export default OnInit;
"
`;

exports[`React Native > jsx > Javascript Test > onMount 1`] = `
"import * as React from \\"react\\";
import {
  FlatList,
  ScrollView,
  View,
  StyleSheet,
  Image,
  Text,
  Pressable,
  TextInput,
} from \\"react-native\\";
import { useEffect } from \\"react\\";

function Comp(props) {
  useEffect(() => {
    console.log(\\"Runs on mount\\");
  }, []);

  useEffect(() => {
    return () => {
      console.log(\\"Runs on unMount\\");
    };
  }, []);

  return <View />;
}

export default Comp;
"
`;

exports[`React Native > jsx > Javascript Test > onMountMultiple 1`] = `
"import * as React from \\"react\\";
import {
  FlatList,
  ScrollView,
  View,
  StyleSheet,
  Image,
  Text,
  Pressable,
  TextInput,
} from \\"react-native\\";
import { useEffect } from \\"react\\";

function Comp(props) {
  useEffect(() => {
    console.log(\\"Runs on mount\\");
  }, []);
  useEffect(() => {
    console.log(\\"Another one runs on Mount\\");
  }, []);
  useEffect(() => {
    console.log(\\"SSR runs on Mount\\");
  }, []);

  return <View />;
}

export default Comp;
"
`;

exports[`React Native > jsx > Javascript Test > onUpdate 1`] = `
"import * as React from \\"react\\";
import {
  FlatList,
  ScrollView,
  View,
  StyleSheet,
  Image,
  Text,
  Pressable,
  TextInput,
} from \\"react-native\\";
import { useEffect } from \\"react\\";

function OnUpdate(props) {
  useEffect(() => {
    console.log(\\"Runs on every update/rerender\\");
  });

  return <View />;
}

export default OnUpdate;
"
`;

exports[`React Native > jsx > Javascript Test > onUpdateWithDeps 1`] = `
"import * as React from \\"react\\";
import {
  FlatList,
  ScrollView,
  View,
  StyleSheet,
  Image,
  Text,
  Pressable,
  TextInput,
} from \\"react-native\\";
import { useState, useEffect } from \\"react\\";

function OnUpdateWithDeps(props) {
  const [a, setA] = useState(() => \\"a\\");

  const [b, setB] = useState(() => \\"b\\");

  useEffect(() => {
    console.log(\\"Runs when a, b or size changes\\", a, b, props.size);
  }, [a, b, props.size]);

  return <View />;
}

export default OnUpdateWithDeps;
"
`;

exports[`React Native > jsx > Javascript Test > preserveExportOrLocalStatement 1`] = `
"import * as React from \\"react\\";
import {
  FlatList,
  ScrollView,
  View,
  StyleSheet,
  Image,
  Text,
  Pressable,
  TextInput,
} from \\"react-native\\";

const b = 3;
const foo = () => {};
export const a = 3;
export const bar = () => {};
export function run(value) {}

function MyBasicComponent(props) {
  return <View />;
}

export default MyBasicComponent;
"
`;

exports[`React Native > jsx > Javascript Test > preserveTyping 1`] = `
"import * as React from \\"react\\";
import {
  FlatList,
  ScrollView,
  View,
  StyleSheet,
  Image,
  Text,
  Pressable,
  TextInput,
} from \\"react-native\\";

function MyBasicComponent(props) {
  return (
    <View>
      <Text>Hello! I can run in React, Vue, Solid, or Liquid! </Text>
      <Text>{props.name}</Text>
    </View>
  );
}

export default MyBasicComponent;
"
`;

exports[`React Native > jsx > Javascript Test > propsDestructure 1`] = `
"import * as React from \\"react\\";
import {
  FlatList,
  ScrollView,
  View,
  StyleSheet,
  Image,
  Text,
  Pressable,
  TextInput,
} from \\"react-native\\";
import { useState } from \\"react\\";

function MyBasicComponent(props) {
  const [name, setName] = useState(() => \\"Decadef20\\");

  return (
    <View>
      {props.children}
      <Text>{props.type}</Text>
      <Text>Hello! I can run in React, Vue, Solid, or Liquid!</Text>
    </View>
  );
}

export default MyBasicComponent;
"
`;

exports[`React Native > jsx > Javascript Test > propsInterface 1`] = `
"import * as React from \\"react\\";
import {
  FlatList,
  ScrollView,
  View,
  StyleSheet,
  Image,
  Text,
  Pressable,
  TextInput,
} from \\"react-native\\";

function MyBasicComponent(props) {
  return (
    <View>
      <Text>Hello! I can run in React, Vue, Solid, or Liquid! </Text>
      <Text>{props.name}</Text>
    </View>
  );
}

export default MyBasicComponent;
"
`;

exports[`React Native > jsx > Javascript Test > propsType 1`] = `
"import * as React from \\"react\\";
import {
  FlatList,
  ScrollView,
  View,
  StyleSheet,
  Image,
  Text,
  Pressable,
  TextInput,
} from \\"react-native\\";

function MyBasicComponent(props) {
  return (
    <View>
      <Text>Hello! I can run in React, Vue, Solid, or Liquid! </Text>
      <Text>{props.name}</Text>
    </View>
  );
}

export default MyBasicComponent;
"
`;

exports[`React Native > jsx > Javascript Test > referencingFunInsideHook 1`] = `
"import * as React from \\"react\\";
import {
  FlatList,
  ScrollView,
  View,
  StyleSheet,
  Image,
  Text,
  Pressable,
  TextInput,
} from \\"react-native\\";
import { useEffect } from \\"react\\";

function OnUpdate(props) {
  function foo(params) {}

  function bar() {}

  function zoo() {
    const params = {
      cb: bar,
    };
  }

  useEffect(() => {
    foo({
      someOption: bar,
    });
  });

  return <View />;
}

export default OnUpdate;
"
`;

exports[`React Native > jsx > Javascript Test > renderBlock 1`] = `"Cannot read properties of undefined (reading 'state.attributes')"`;

exports[`React Native > jsx > Javascript Test > renderContentExample 1`] = `"Cannot read properties of undefined (reading 'value')"`;

exports[`React Native > jsx > Javascript Test > rootFragmentMultiNode 1`] = `"Cannot read properties of undefined (reading 'props.attributes')"`;

exports[`React Native > jsx > Javascript Test > rootShow 1`] = `
"import * as React from \\"react\\";
import {
  FlatList,
  ScrollView,
  View,
  StyleSheet,
  Image,
  Text,
  Pressable,
  TextInput,
} from \\"react-native\\";

function RenderStyles(props) {
  return (
    <>
      {props.foo === \\"bar\\" ? (
        <>
          <View>
            <Text>Bar</Text>
          </View>
        </>
      ) : (
        <View>
          <Text>Foo</Text>
        </View>
      )}
    </>
  );
}

export default RenderStyles;
"
`;

exports[`React Native > jsx > Javascript Test > self-referencing component 1`] = `
"import * as React from \\"react\\";
import {
  FlatList,
  ScrollView,
  View,
  StyleSheet,
  Image,
  Text,
  Pressable,
  TextInput,
} from \\"react-native\\";

function MyComponent(props) {
  return (
    <View>
      <Text>{props.name}</Text>
      {props.name === \\"Batman\\" ? <MyComponent name=\\"Bruce Wayne\\" /> : null}
    </View>
  );
}

export default MyComponent;
"
`;

exports[`React Native > jsx > Javascript Test > self-referencing component with children 1`] = `
"import * as React from \\"react\\";
import {
  FlatList,
  ScrollView,
  View,
  StyleSheet,
  Image,
  Text,
  Pressable,
  TextInput,
} from \\"react-native\\";

function MyComponent(props) {
  return (
    <View>
      <Text>{props.name}</Text>
      {props.children}
      {props.name === \\"Batman\\" ? (
        <MyComponent name=\\"Bruce\\">
          <View>
            <Text>Wayne</Text>
          </View>
        </MyComponent>
      ) : null}
    </View>
  );
}

export default MyComponent;
"
`;

exports[`React Native > jsx > Javascript Test > showWithFor 1`] = `"Cannot read properties of undefined (reading 'key')"`;

exports[`React Native > jsx > Javascript Test > showWithRootText 1`] = `
"import * as React from \\"react\\";
import {
  FlatList,
  ScrollView,
  View,
  StyleSheet,
  Image,
  Text,
  Pressable,
  TextInput,
} from \\"react-native\\";

function ShowRootText(props) {
  return (
    <>
      {props.conditionA ? (
        <>
          <Text>ContentA</Text>
        </>
      ) : (
        <View>
          <Text>else-condition-A</Text>
        </View>
      )}
    </>
  );
}

export default ShowRootText;
"
`;

exports[`React Native > jsx > Javascript Test > signalsOnUpdate 1`] = `"Cannot read properties of undefined (reading 'style')"`;

exports[`React Native > jsx > Javascript Test > spreadAttrs 1`] = `"Cannot read properties of undefined (reading 'attrs')"`;

exports[`React Native > jsx > Javascript Test > spreadNestedProps 1`] = `"Cannot read properties of undefined (reading 'props.nested')"`;

exports[`React Native > jsx > Javascript Test > spreadProps 1`] = `"Cannot read properties of undefined (reading 'props')"`;

exports[`React Native > jsx > Javascript Test > styleClassAndCss 1`] = `"Cannot read properties of undefined (reading 'style')"`;

exports[`React Native > jsx > Javascript Test > stylePropClassAndCss 1`] = `"Cannot read properties of undefined (reading 'style')"`;

exports[`React Native > jsx > Javascript Test > subComponent 1`] = `
"import * as React from \\"react\\";
import {
  FlatList,
  ScrollView,
  View,
  StyleSheet,
  Image,
  Text,
  Pressable,
  TextInput,
} from \\"react-native\\";
import Foo from \\"./foo-sub-component\\";

function SubComponent(props) {
  return <Foo />;
}

export default SubComponent;
"
`;

exports[`React Native > jsx > Javascript Test > svgComponent 1`] = `"Cannot read properties of undefined (reading 'viewBox')"`;

exports[`React Native > jsx > Javascript Test > typeDependency 1`] = `
"import * as React from \\"react\\";
import {
  FlatList,
  ScrollView,
  View,
  StyleSheet,
  Image,
  Text,
  Pressable,
  TextInput,
} from \\"react-native\\";

function TypeDependency(props) {
  return (
    <View>
      <Text>{props.foo}</Text>
    </View>
  );
}

export default TypeDependency;
"
`;

exports[`React Native > jsx > Javascript Test > use-style 1`] = `
"import * as React from \\"react\\";
import {
  FlatList,
  ScrollView,
  View,
  StyleSheet,
  Image,
  Text,
  Pressable,
  TextInput,
} from \\"react-native\\";

function MyComponent(props) {
  return (
    <View type=\\"button\\">
      <Text>Button</Text>
    </View>
  );
}

const styles = StyleSheet.create({});

export default MyComponent;
"
`;

exports[`React Native > jsx > Javascript Test > use-style-and-css 1`] = `"Cannot read properties of undefined (reading 'style')"`;

exports[`React Native > jsx > Javascript Test > use-style-outside-component 1`] = `
"import * as React from \\"react\\";
import {
  FlatList,
  ScrollView,
  View,
  StyleSheet,
  Image,
  Text,
  Pressable,
  TextInput,
} from \\"react-native\\";

function MyComponent(props) {
  return (
    <View type=\\"button\\">
      <Text>Button</Text>
    </View>
  );
}

const styles = StyleSheet.create({});

export default MyComponent;
"
`;

exports[`React Native > jsx > Javascript Test > useTarget 1`] = `
"import * as React from \\"react\\";
import {
  FlatList,
  ScrollView,
  View,
  StyleSheet,
  Image,
  Text,
  Pressable,
  TextInput,
} from \\"react-native\\";
import { useState, useEffect } from \\"react\\";

function UseTargetComponent(props) {
  function name() {
    const prefix = \\"rn\\";
    return prefix + \\"foo\\";
  }

  const [lastName, setLastName] = useState(() => \\"bar\\");

  useEffect(() => {}, []);

  return (
    <View>
      <Text>{name()}</Text>
    </View>
  );
}

export default UseTargetComponent;
"
`;

exports[`React Native > jsx > Javascript Test > webComponent 1`] = `
"import * as React from \\"react\\";
import {
  FlatList,
  ScrollView,
  View,
  StyleSheet,
  Image,
  Text,
  Pressable,
  TextInput,
} from \\"react-native\\";
import { useEffect } from \\"react\\";
import { register } from \\"swiper/element/bundle\\";

function MyBasicWebComponent(props) {
  useEffect(() => {
    register();
  }, []);

  return (
    <swiper-container slides-per-view=\\"3\\" navigation=\\"true\\" pagination=\\"true\\">
      <swiper-slide>
        <Text>Slide 1</Text>
      </swiper-slide>
      <swiper-slide>
        <Text>Slide 2</Text>
      </swiper-slide>
      <swiper-slide>
        <Text>Slide 3</Text>
      </swiper-slide>
    </swiper-container>
  );
}

export default MyBasicWebComponent;
"
`;

exports[`React Native > jsx > Remove Internal mitosis package 1`] = `
"import * as React from \\"react\\";
import {
  FlatList,
  ScrollView,
  View,
  StyleSheet,
  Image,
  Text,
  Pressable,
  TextInput,
} from \\"react-native\\";
import { useState } from \\"react\\";

function MyBasicComponent(props) {
  const [name, setName] = useState(() => \\"PatrickJS\\");

  return (
    <View>
      <Text>Hello </Text>
      <Text>{name}</Text>
      <Text>! I can run in React, Qwik, Vue, Solid, or Liquid!</Text>
    </View>
  );
}

export default MyBasicComponent;
"
`;

exports[`React Native > jsx > Typescript Test > AdvancedRef 1`] = `"Cannot read properties of undefined (reading 'ref')"`;

exports[`React Native > jsx > Typescript Test > Basic 1`] = `"Cannot read properties of undefined (reading 'style')"`;

exports[`React Native > jsx > Typescript Test > Basic Context 1`] = `"Cannot read properties of undefined (reading 'value')"`;

exports[`React Native > jsx > Typescript Test > Basic OnMount Update 1`] = `
"import * as React from \\"react\\";
import {
  FlatList,
  ScrollView,
  View,
  StyleSheet,
  Image,
  Text,
  Pressable,
  TextInput,
} from \\"react-native\\";
import { useState, useEffect } from \\"react\\";

export interface Props {
  hi: string;
  bye: string;
}

function MyBasicOnMountUpdateComponent(props: Props) {
  const [name, setName] = useState(() => \\"PatrickJS\\");

  const [names, setNames] = useState(() => [\\"Steve\\", \\"PatrickJS\\"]);

  useEffect(() => {
    setName(\\"PatrickJS onInit\\" + props.hi);
  }, []);

  useEffect(() => {
    setName(\\"PatrickJS onMount\\" + props.bye);
  }, []);

  return (
    <View>
      <Text>Hello </Text>
      <Text>{name}</Text>
    </View>
  );
}

export default MyBasicOnMountUpdateComponent;
"
`;

exports[`React Native > jsx > Typescript Test > Basic Outputs 1`] = `
"import * as React from \\"react\\";
import {
  FlatList,
  ScrollView,
  View,
  StyleSheet,
  Image,
  Text,
  Pressable,
  TextInput,
} from \\"react-native\\";
import { useState, useEffect } from \\"react\\";

function MyBasicOutputsComponent(props: any) {
  const [name, setName] = useState(() => \\"PatrickJS\\");

  useEffect(() => {
    props.onMessage(name);
    props.onEvent(props.message);
  }, []);

  return <View />;
}

export default MyBasicOutputsComponent;
"
`;

exports[`React Native > jsx > Typescript Test > Basic Outputs Meta 1`] = `
"import * as React from \\"react\\";
import {
  FlatList,
  ScrollView,
  View,
  StyleSheet,
  Image,
  Text,
  Pressable,
  TextInput,
} from \\"react-native\\";
import { useState, useEffect } from \\"react\\";

function MyBasicOutputsComponent(props: any) {
  const [name, setName] = useState(() => \\"PatrickJS\\");

  useEffect(() => {
    props.onMessage(name);
    props.onEvent(props.message);
  }, []);

  return <View />;
}

export default MyBasicOutputsComponent;
"
`;

exports[`React Native > jsx > Typescript Test > BasicAttribute 1`] = `"Cannot read properties of undefined (reading 'spellcheck')"`;

exports[`React Native > jsx > Typescript Test > BasicBooleanAttribute 1`] = `"Cannot read properties of undefined (reading 'toggle')"`;

exports[`React Native > jsx > Typescript Test > BasicChildComponent 1`] = `"Cannot read properties of undefined (reading 'id')"`;

exports[`React Native > jsx > Typescript Test > BasicFor 1`] = `"Cannot read properties of undefined (reading 'value')"`;

exports[`React Native > jsx > Typescript Test > BasicRef 1`] = `"Cannot read properties of undefined (reading 'ref')"`;

exports[`React Native > jsx > Typescript Test > BasicRefAssignment 1`] = `"Cannot read properties of undefined (reading 'onClick')"`;

exports[`React Native > jsx > Typescript Test > BasicRefPrevious 1`] = `"Cannot read properties of undefined (reading 'onClick')"`;

exports[`React Native > jsx > Typescript Test > Button 1`] = `"Cannot read properties of undefined (reading 'props.attributes')"`;

exports[`React Native > jsx > Typescript Test > Columns 1`] = `"Cannot read properties of undefined (reading 'style')"`;

exports[`React Native > jsx > Typescript Test > ContentSlotHtml 1`] = `
"import * as React from \\"react\\";
import {
  FlatList,
  ScrollView,
  View,
  StyleSheet,
  Image,
  Text,
  Pressable,
  TextInput,
} from \\"react-native\\";

type Props = {
  [key: string]: string | JSX.Element;
  slotTesting: JSX.Element;
};
import type { JSX } from \\"../../../../jsx-runtime\\";

function ContentSlotCode(props: Props) {
  return (
    <View>
      <>{props.slotTesting}</>
      <View>
        <View />
      </View>
      <View>
        <>{props.children}</>
      </View>
    </View>
  );
}

export default ContentSlotCode;
"
`;

exports[`React Native > jsx > Typescript Test > ContentSlotJSX 1`] = `"Cannot read properties of undefined (reading 'name')"`;

exports[`React Native > jsx > Typescript Test > CustomCode 1`] = `"Cannot read properties of undefined (reading 'ref')"`;

exports[`React Native > jsx > Typescript Test > Embed 1`] = `"Cannot read properties of undefined (reading 'ref')"`;

exports[`React Native > jsx > Typescript Test > Form 1`] = `"Cannot read properties of undefined (reading 'validate')"`;

exports[`React Native > jsx > Typescript Test > Image 1`] = `"Cannot read properties of undefined (reading 'ref')"`;

exports[`React Native > jsx > Typescript Test > Image State 1`] = `"Cannot read properties of undefined (reading 'src')"`;

exports[`React Native > jsx > Typescript Test > Img 1`] = `"Cannot read properties of undefined (reading 'style')"`;

exports[`React Native > jsx > Typescript Test > Input 1`] = `"Cannot read properties of undefined (reading 'props.attributes')"`;

exports[`React Native > jsx > Typescript Test > InputParent 1`] = `"Cannot read properties of undefined (reading 'onChange')"`;

exports[`React Native > jsx > Typescript Test > RawText 1`] = `"Cannot read properties of undefined (reading 'innerHTML')"`;

exports[`React Native > jsx > Typescript Test > Section 1`] = `"Cannot read properties of undefined (reading 'props.attributes')"`;

exports[`React Native > jsx > Typescript Test > Select 1`] = `"Cannot read properties of undefined (reading 'props.attributes')"`;

exports[`React Native > jsx > Typescript Test > SlotDefault 1`] = `
"import * as React from \\"react\\";
import {
  FlatList,
  ScrollView,
  View,
  StyleSheet,
  Image,
  Text,
  Pressable,
  TextInput,
} from \\"react-native\\";

type Props = {
  [key: string]: string;
};

function SlotCode(props: Props) {
  return (
    <View>
      <>
        {props.children || (
          <View>
            <Text>Default content</Text>
          </View>
        )}
      </>
    </View>
  );
}

export default SlotCode;
"
`;

exports[`React Native > jsx > Typescript Test > SlotHtml 1`] = `
"import * as React from \\"react\\";
import {
  FlatList,
  ScrollView,
  View,
  StyleSheet,
  Image,
  Text,
  Pressable,
  TextInput,
} from \\"react-native\\";

type Props = {
  [key: string]: string;
};
import ContentSlotCode from \\"./content-slot-jsx.raw\\";

function SlotCode(props: Props) {
  return (
    <View>
      <ContentSlotCode testing={<div>Hello</div>}></ContentSlotCode>
    </View>
  );
}

export default SlotCode;
"
`;

exports[`React Native > jsx > Typescript Test > SlotJsx 1`] = `
"import * as React from \\"react\\";
import {
  FlatList,
  ScrollView,
  View,
  StyleSheet,
  Image,
  Text,
  Pressable,
  TextInput,
} from \\"react-native\\";

type Props = {
  [key: string]: string;
};
import ContentSlotCode from \\"./content-slot-jsx.raw\\";

function SlotCode(props: Props) {
  return (
    <View>
      <ContentSlotCode
        slotTesting={
          <View>
            <Text>Hello</Text>
          </View>
        }
      />
    </View>
  );
}

export default SlotCode;
"
`;

exports[`React Native > jsx > Typescript Test > SlotNamed 1`] = `
"import * as React from \\"react\\";
import {
  FlatList,
  ScrollView,
  View,
  StyleSheet,
  Image,
  Text,
  Pressable,
  TextInput,
} from \\"react-native\\";

type Props = {
  [key: string]: string;
};

function SlotCode(props: Props) {
  return (
    <View>
      <>{props.myAwesomeSlot}</>
      <>{props.top}</>
      <>{props.left || <Text>Default left</Text>}</>
      <>{props.children || <Text>Default Child</Text>}</>
    </View>
  );
}

export default SlotCode;
"
`;

exports[`React Native > jsx > Typescript Test > Stamped.io 1`] = `"Cannot read properties of undefined (reading 'data-user')"`;

exports[`React Native > jsx > Typescript Test > Submit 1`] = `"Cannot read properties of undefined (reading 'props.attributes')"`;

exports[`React Native > jsx > Typescript Test > Text 1`] = `"Cannot read properties of undefined (reading 'contentEditable')"`;

exports[`React Native > jsx > Typescript Test > Textarea 1`] = `"Cannot read properties of undefined (reading 'props.attributes')"`;

exports[`React Native > jsx > Typescript Test > Video 1`] = `"Cannot read properties of undefined (reading 'props.attributes')"`;

exports[`React Native > jsx > Typescript Test > arrowFunctionInUseStore 1`] = `
"import * as React from \\"react\\";
import {
  FlatList,
  ScrollView,
  View,
  StyleSheet,
  Image,
  Text,
  Pressable,
  TextInput,
} from \\"react-native\\";
import { useState } from \\"react\\";

function MyComponent(props: any) {
  const [name, setName] = useState(() => \\"steve\\");

  function setName(value) {
    setName(value);
  }

  function updateNameWithArrowFn(value) {
    setName(value);
  }

  return (
    <View>
      <Text>Hello </Text>
      <Text>{name}</Text>
    </View>
  );
}

export default MyComponent;
"
`;

exports[`React Native > jsx > Typescript Test > basicForNoTagReference 1`] = `
"import * as React from \\"react\\";
import {
  FlatList,
  ScrollView,
  View,
  StyleSheet,
  Image,
  Text,
  Pressable,
  TextInput,
} from \\"react-native\\";
import { useState } from \\"react\\";

function MyBasicForNoTagRefComponent(props: any) {
  const [name, setName] = useState(() => \\"VincentW\\");

  const [TagName, setTagName] = useState(() => \\"div\\");

  function TagNameGetter() {
    return \\"span\\";
  }

  const [Tag, setTag] = useState(() => \\"span\\");

  const TagNameGetterRef = TagNameGetter();

  return (
    <TagNameGetterRef>
      <Text>Hello </Text>
      <Tag>
        <Text>{name}</Text>
      </Tag>
      {props.actions?.map((action) => (
        <TagName>
          <action.icon />
          <View>
            <Text>{action.text}</Text>
          </View>
        </TagName>
      ))}
    </TagNameGetterRef>
  );
}

export default MyBasicForNoTagRefComponent;
"
`;

exports[`React Native > jsx > Typescript Test > basicForwardRef 1`] = `"Cannot read properties of undefined (reading 'ref')"`;

exports[`React Native > jsx > Typescript Test > basicForwardRefMetadata 1`] = `"Cannot read properties of undefined (reading 'ref')"`;

exports[`React Native > jsx > Typescript Test > basicOnUpdateReturn 1`] = `
"import * as React from \\"react\\";
import {
  FlatList,
  ScrollView,
  View,
  StyleSheet,
  Image,
  Text,
  Pressable,
  TextInput,
} from \\"react-native\\";
import { useState, useEffect } from \\"react\\";

function MyBasicOnUpdateReturnComponent(props: any) {
  const [name, setName] = useState(() => \\"PatrickJS\\");

  useEffect(() => {
    const controller = new AbortController();
    const signal = controller.signal;
    fetch(\\"https://patrickjs.com/api/resource.json\\", {
      signal,
    })
      .then((response) => response.json())
      .then((data) => {
        setName(data.name);
      });
    return () => {
      if (!signal.aborted) {
        controller.abort();
      }
    };
  }, [name]);

  return (
    <View>
      <Text>Hello! </Text>
      <Text>{name}</Text>
    </View>
  );
}

export default MyBasicOnUpdateReturnComponent;
"
`;

exports[`React Native > jsx > Typescript Test > class + ClassName + css 1`] = `"Cannot read properties of undefined (reading 'style')"`;

exports[`React Native > jsx > Typescript Test > class + css 1`] = `"Cannot read properties of undefined (reading 'style')"`;

exports[`React Native > jsx > Typescript Test > className + css 1`] = `"Cannot read properties of undefined (reading 'style')"`;

exports[`React Native > jsx > Typescript Test > className 1`] = `
"import * as React from \\"react\\";
import {
  FlatList,
  ScrollView,
  View,
  StyleSheet,
  Image,
  Text,
  Pressable,
  TextInput,
} from \\"react-native\\";
import { useState } from \\"react\\";

type Props = {
  [key: string]: string | JSX.Element;
  slotTesting: JSX.Element;
};
import type { JSX } from \\"../../../../jsx-runtime\\";

function ClassNameCode(props: Props) {
  const [bindings, setBindings] = useState(() => \\"a binding\\");

  return (
    <View>
      <View>
        <Text>Without Binding</Text>
      </View>
      <View>
        <Text>With binding</Text>
      </View>
    </View>
  );
}

export default ClassNameCode;
"
`;

exports[`React Native > jsx > Typescript Test > classState 1`] = `"Cannot read properties of undefined (reading 'style')"`;

exports[`React Native > jsx > Typescript Test > componentWithContext 1`] = `"Cannot read properties of undefined (reading 'value')"`;

exports[`React Native > jsx > Typescript Test > componentWithContextMultiRoot 1`] = `"Cannot read properties of undefined (reading 'value')"`;

exports[`React Native > jsx > Typescript Test > contentState 1`] = `"Cannot read properties of undefined (reading 'value')"`;

exports[`React Native > jsx > Typescript Test > defaultProps 1`] = `"Cannot read properties of undefined (reading 'props.attributes')"`;

exports[`React Native > jsx > Typescript Test > defaultPropsOutsideComponent 1`] = `"Cannot read properties of undefined (reading 'props.attributes')"`;

exports[`React Native > jsx > Typescript Test > defaultValsWithTypes 1`] = `
"import * as React from \\"react\\";
import {
  FlatList,
  ScrollView,
  View,
  StyleSheet,
  Image,
  Text,
  Pressable,
  TextInput,
} from \\"react-native\\";

type Props = {
  name: string;
};

const DEFAULT_VALUES: Props = {
  name: \\"Sami\\",
};

function ComponentWithTypes(props: Props) {
  return (
    <View>
      <Text> Hello </Text>
      <Text>{props.name || DEFAULT_VALUES.name}</Text>
    </View>
  );
}

export default ComponentWithTypes;
"
`;

exports[`React Native > jsx > Typescript Test > expressionState 1`] = `
"import * as React from \\"react\\";
import {
  FlatList,
  ScrollView,
  View,
  StyleSheet,
  Image,
  Text,
  Pressable,
  TextInput,
} from \\"react-native\\";
import { useState } from \\"react\\";

function MyComponent(props: any) {
  const [refToUse, setRefToUse] = useState(() =>
    !(props.componentRef instanceof Function) ? props.componentRef : null
  );

  return (
    <View>
      <Text>{refToUse}</Text>
    </View>
  );
}

export default MyComponent;
"
`;

exports[`React Native > jsx > Typescript Test > getterState 1`] = `
"import * as React from \\"react\\";
import {
  FlatList,
  ScrollView,
  View,
  StyleSheet,
  Image,
  Text,
  Pressable,
  TextInput,
} from \\"react-native\\";

export interface ButtonProps {
  foo: string;
}

function Button(props: ButtonProps) {
  function foo2() {
    return props.foo + \\"foo\\";
  }

  function bar() {
    return \\"bar\\";
  }

  function baz(i: number) {
    return i + foo2().length;
  }

  return (
    <View>
      <View>
        <Text>{foo2()}</Text>
      </View>
      <View>
        <Text>{bar()}</Text>
      </View>
      <View>
        <Text>{baz(1)}</Text>
      </View>
    </View>
  );
}

export default Button;
"
`;

exports[`React Native > jsx > Typescript Test > import types 1`] = `"Cannot read properties of undefined (reading 'state.getRenderContentProps(props.renderContentProps.block, 0)')"`;

exports[`React Native > jsx > Typescript Test > inputToTextInputRN 1`] = `"Cannot read properties of undefined (reading 'value')"`;

exports[`React Native > jsx > Typescript Test > multipleOnUpdate 1`] = `
"import * as React from \\"react\\";
import {
  FlatList,
  ScrollView,
  View,
  StyleSheet,
  Image,
  Text,
  Pressable,
  TextInput,
} from \\"react-native\\";
import { useEffect } from \\"react\\";

function MultipleOnUpdate(props: any) {
  useEffect(() => {
    console.log(\\"Runs on every update/rerender\\");
  });
  useEffect(() => {
    console.log(\\"Runs on every update/rerender as well\\");
  });

  return <View />;
}

export default MultipleOnUpdate;
"
`;

exports[`React Native > jsx > Typescript Test > multipleOnUpdateWithDeps 1`] = `
"import * as React from \\"react\\";
import {
  FlatList,
  ScrollView,
  View,
  StyleSheet,
  Image,
  Text,
  Pressable,
  TextInput,
} from \\"react-native\\";
import { useState, useEffect } from \\"react\\";

function MultipleOnUpdateWithDeps(props: any) {
  const [a, setA] = useState(() => \\"a\\");

  const [b, setB] = useState(() => \\"b\\");

  const [c, setC] = useState(() => \\"c\\");

  const [d, setD] = useState(() => \\"d\\");

  useEffect(() => {
    console.log(\\"Runs when a or b changes\\", a, b);

    if (a === \\"a\\") {
      setA(\\"b\\");
    }
  }, [a, b]);
  useEffect(() => {
    console.log(\\"Runs when c or d changes\\", c, d);

    if (a === \\"a\\") {
      setA(\\"b\\");
    }
  }, [c, d]);

  return <View />;
}

export default MultipleOnUpdateWithDeps;
"
`;

exports[`React Native > jsx > Typescript Test > multipleSpreads 1`] = `"Cannot read properties of undefined (reading 'attrs')"`;

exports[`React Native > jsx > Typescript Test > nestedShow 1`] = `
"import * as React from \\"react\\";
import {
  FlatList,
  ScrollView,
  View,
  StyleSheet,
  Image,
  Text,
  Pressable,
  TextInput,
} from \\"react-native\\";

interface Props {
  conditionA: boolean;
  conditionB: boolean;
}

function NestedShow(props: Props) {
  return (
    <>
      {props.conditionA ? (
        <>
          {!props.conditionB ? (
            <View>
              <Text>if condition A and condition B</Text>
            </View>
          ) : (
            <View>
              <Text>else-condition-B</Text>
            </View>
          )}
        </>
      ) : (
        <View>
          <Text>else-condition-A</Text>
        </View>
      )}
    </>
  );
}

export default NestedShow;
"
`;

exports[`React Native > jsx > Typescript Test > nestedStyles 1`] = `"Cannot read properties of undefined (reading 'style')"`;

exports[`React Native > jsx > Typescript Test > onClickToPressable 1`] = `"Cannot read properties of undefined (reading 'onClick')"`;

exports[`React Native > jsx > Typescript Test > onEvent 1`] = `"Cannot read properties of undefined (reading 'ref')"`;

exports[`React Native > jsx > Typescript Test > onInit & onMount 1`] = `
"import * as React from \\"react\\";
import {
  FlatList,
  ScrollView,
  View,
  StyleSheet,
  Image,
  Text,
  Pressable,
  TextInput,
} from \\"react-native\\";
import { useEffect } from \\"react\\";

function OnInit(props: any) {
  useEffect(() => {
    console.log(\\"onInit\\");
  }, []);

  useEffect(() => {
    console.log(\\"onMount\\");
  }, []);

  return <View />;
}

export default OnInit;
"
`;

exports[`React Native > jsx > Typescript Test > onInit 1`] = `
"import * as React from \\"react\\";
import {
  FlatList,
  ScrollView,
  View,
  StyleSheet,
  Image,
  Text,
  Pressable,
  TextInput,
} from \\"react-native\\";
import { useState, useEffect } from \\"react\\";

type Props = {
  name: string;
};

export const defaultValues = {
  name: \\"PatrickJS\\",
};

function OnInit(props: Props) {
  const [name, setName] = useState(() => \\"\\");

  useEffect(() => {
    setName(defaultValues.name || props.name);
    console.log(\\"set defaults with props\\");
  }, []);

  return (
    <View>
      <Text>Default name defined by parent </Text>
      <Text>{name}</Text>
    </View>
  );
}

export default OnInit;
"
`;

exports[`React Native > jsx > Typescript Test > onMount 1`] = `
"import * as React from \\"react\\";
import {
  FlatList,
  ScrollView,
  View,
  StyleSheet,
  Image,
  Text,
  Pressable,
  TextInput,
} from \\"react-native\\";
import { useEffect } from \\"react\\";

function Comp(props: any) {
  useEffect(() => {
    console.log(\\"Runs on mount\\");
  }, []);

  useEffect(() => {
    return () => {
      console.log(\\"Runs on unMount\\");
    };
  }, []);

  return <View />;
}

export default Comp;
"
`;

exports[`React Native > jsx > Typescript Test > onMountMultiple 1`] = `
"import * as React from \\"react\\";
import {
  FlatList,
  ScrollView,
  View,
  StyleSheet,
  Image,
  Text,
  Pressable,
  TextInput,
} from \\"react-native\\";
import { useEffect } from \\"react\\";

function Comp(props: any) {
  useEffect(() => {
    console.log(\\"Runs on mount\\");
  }, []);
  useEffect(() => {
    console.log(\\"Another one runs on Mount\\");
  }, []);
  useEffect(() => {
    console.log(\\"SSR runs on Mount\\");
  }, []);

  return <View />;
}

export default Comp;
"
`;

exports[`React Native > jsx > Typescript Test > onUpdate 1`] = `
"import * as React from \\"react\\";
import {
  FlatList,
  ScrollView,
  View,
  StyleSheet,
  Image,
  Text,
  Pressable,
  TextInput,
} from \\"react-native\\";
import { useEffect } from \\"react\\";

function OnUpdate(props: any) {
  useEffect(() => {
    console.log(\\"Runs on every update/rerender\\");
  });

  return <View />;
}

export default OnUpdate;
"
`;

exports[`React Native > jsx > Typescript Test > onUpdateWithDeps 1`] = `
"import * as React from \\"react\\";
import {
  FlatList,
  ScrollView,
  View,
  StyleSheet,
  Image,
  Text,
  Pressable,
  TextInput,
} from \\"react-native\\";
import { useState, useEffect } from \\"react\\";

type Props = {
  size: string;
};

function OnUpdateWithDeps(props: Props) {
  const [a, setA] = useState(() => \\"a\\");

  const [b, setB] = useState(() => \\"b\\");

  useEffect(() => {
    console.log(\\"Runs when a, b or size changes\\", a, b, props.size);
  }, [a, b, props.size]);

  return <View />;
}

export default OnUpdateWithDeps;
"
`;

exports[`React Native > jsx > Typescript Test > preserveExportOrLocalStatement 1`] = `
"import * as React from \\"react\\";
import {
  FlatList,
  ScrollView,
  View,
  StyleSheet,
  Image,
  Text,
  Pressable,
  TextInput,
} from \\"react-native\\";

type Types = {
  s: any[];
};
interface IPost {
  len: number;
}
export interface MyBasicComponentProps {
  id: string;
}

const b = 3;
const foo = () => {};
export const a = 3;
export const bar = () => {};
export function run<T>(value: T) {}

function MyBasicComponent(props: MyBasicComponentProps) {
  return <View />;
}

export default MyBasicComponent;
"
`;

exports[`React Native > jsx > Typescript Test > preserveTyping 1`] = `
"import * as React from \\"react\\";
import {
  FlatList,
  ScrollView,
  View,
  StyleSheet,
  Image,
  Text,
  Pressable,
  TextInput,
} from \\"react-native\\";

export type A = \\"test\\";
export interface C {
  n: \\"test\\";
}
type B = \\"test2\\";
interface D {
  n: \\"test\\";
}
export interface MyBasicComponentProps {
  name: string;
  age?: number;
}

function MyBasicComponent(props: MyBasicComponentProps) {
  return (
    <View>
      <Text>Hello! I can run in React, Vue, Solid, or Liquid! </Text>
      <Text>{props.name}</Text>
    </View>
  );
}

export default MyBasicComponent;
"
`;

exports[`React Native > jsx > Typescript Test > propsDestructure 1`] = `
"import * as React from \\"react\\";
import {
  FlatList,
  ScrollView,
  View,
  StyleSheet,
  Image,
  Text,
  Pressable,
  TextInput,
} from \\"react-native\\";
import { useState } from \\"react\\";

type Props = {
  children: any;
  type: string;
};

function MyBasicComponent(props: Props) {
  const [name, setName] = useState(() => \\"Decadef20\\");

  return (
    <View>
      {props.children}
      <Text>{props.type}</Text>
      <Text>Hello! I can run in React, Vue, Solid, or Liquid!</Text>
    </View>
  );
}

export default MyBasicComponent;
"
`;

exports[`React Native > jsx > Typescript Test > propsInterface 1`] = `
"import * as React from \\"react\\";
import {
  FlatList,
  ScrollView,
  View,
  StyleSheet,
  Image,
  Text,
  Pressable,
  TextInput,
} from \\"react-native\\";

interface Person {
  name: string;
  age?: number;
}

function MyBasicComponent(props: Person | never) {
  return (
    <View>
      <Text>Hello! I can run in React, Vue, Solid, or Liquid! </Text>
      <Text>{props.name}</Text>
    </View>
  );
}

export default MyBasicComponent;
"
`;

exports[`React Native > jsx > Typescript Test > propsType 1`] = `
"import * as React from \\"react\\";
import {
  FlatList,
  ScrollView,
  View,
  StyleSheet,
  Image,
  Text,
  Pressable,
  TextInput,
} from \\"react-native\\";

type Person = {
  name: string;
  age?: number;
};

function MyBasicComponent(props: Person) {
  return (
    <View>
      <Text>Hello! I can run in React, Vue, Solid, or Liquid! </Text>
      <Text>{props.name}</Text>
    </View>
  );
}

export default MyBasicComponent;
"
`;

exports[`React Native > jsx > Typescript Test > referencingFunInsideHook 1`] = `
"import * as React from \\"react\\";
import {
  FlatList,
  ScrollView,
  View,
  StyleSheet,
  Image,
  Text,
  Pressable,
  TextInput,
} from \\"react-native\\";
import { useEffect } from \\"react\\";

function OnUpdate(props: any) {
  function foo(params) {}

  function bar() {}

  function zoo() {
    const params = {
      cb: bar,
    };
  }

  useEffect(() => {
    foo({
      someOption: bar,
    });
  });

  return <View />;
}

export default OnUpdate;
"
`;

exports[`React Native > jsx > Typescript Test > renderBlock 1`] = `"Cannot read properties of undefined (reading 'state.attributes')"`;

exports[`React Native > jsx > Typescript Test > renderContentExample 1`] = `"Cannot read properties of undefined (reading 'value')"`;

exports[`React Native > jsx > Typescript Test > rootFragmentMultiNode 1`] = `"Cannot read properties of undefined (reading 'props.attributes')"`;

exports[`React Native > jsx > Typescript Test > rootShow 1`] = `
"import * as React from \\"react\\";
import {
  FlatList,
  ScrollView,
  View,
  StyleSheet,
  Image,
  Text,
  Pressable,
  TextInput,
} from \\"react-native\\";

export interface RenderStylesProps {
  foo: string;
}

function RenderStyles(props: RenderStylesProps) {
  return (
    <>
      {props.foo === \\"bar\\" ? (
        <>
          <View>
            <Text>Bar</Text>
          </View>
        </>
      ) : (
        <View>
          <Text>Foo</Text>
        </View>
      )}
    </>
  );
}

export default RenderStyles;
"
`;

exports[`React Native > jsx > Typescript Test > self-referencing component 1`] = `
"import * as React from \\"react\\";
import {
  FlatList,
  ScrollView,
  View,
  StyleSheet,
  Image,
  Text,
  Pressable,
  TextInput,
} from \\"react-native\\";

function MyComponent(props: any) {
  return (
    <View>
      <Text>{props.name}</Text>
      {props.name === \\"Batman\\" ? <MyComponent name=\\"Bruce Wayne\\" /> : null}
    </View>
  );
}

export default MyComponent;
"
`;

exports[`React Native > jsx > Typescript Test > self-referencing component with children 1`] = `
"import * as React from \\"react\\";
import {
  FlatList,
  ScrollView,
  View,
  StyleSheet,
  Image,
  Text,
  Pressable,
  TextInput,
} from \\"react-native\\";

function MyComponent(props: any) {
  return (
    <View>
      <Text>{props.name}</Text>
      {props.children}
      {props.name === \\"Batman\\" ? (
        <MyComponent name=\\"Bruce\\">
          <View>
            <Text>Wayne</Text>
          </View>
        </MyComponent>
      ) : null}
    </View>
  );
}

export default MyComponent;
"
`;

exports[`React Native > jsx > Typescript Test > showWithFor 1`] = `"Cannot read properties of undefined (reading 'key')"`;

exports[`React Native > jsx > Typescript Test > showWithRootText 1`] = `
"import * as React from \\"react\\";
import {
  FlatList,
  ScrollView,
  View,
  StyleSheet,
  Image,
  Text,
  Pressable,
  TextInput,
} from \\"react-native\\";

interface Props {
  conditionA: boolean;
}

function ShowRootText(props: Props) {
  return (
    <>
      {props.conditionA ? (
        <>
          <Text>ContentA</Text>
        </>
      ) : (
        <View>
          <Text>else-condition-A</Text>
        </View>
      )}
    </>
  );
}

export default ShowRootText;
"
`;

exports[`React Native > jsx > Typescript Test > signalsOnUpdate 1`] = `"Cannot read properties of undefined (reading 'style')"`;

exports[`React Native > jsx > Typescript Test > spreadAttrs 1`] = `"Cannot read properties of undefined (reading 'attrs')"`;

exports[`React Native > jsx > Typescript Test > spreadNestedProps 1`] = `"Cannot read properties of undefined (reading 'props.nested')"`;

exports[`React Native > jsx > Typescript Test > spreadProps 1`] = `"Cannot read properties of undefined (reading 'props')"`;

exports[`React Native > jsx > Typescript Test > styleClassAndCss 1`] = `"Cannot read properties of undefined (reading 'style')"`;

exports[`React Native > jsx > Typescript Test > stylePropClassAndCss 1`] = `"Cannot read properties of undefined (reading 'style')"`;

exports[`React Native > jsx > Typescript Test > subComponent 1`] = `
"import * as React from \\"react\\";
import {
  FlatList,
  ScrollView,
  View,
  StyleSheet,
  Image,
  Text,
  Pressable,
  TextInput,
} from \\"react-native\\";
import Foo from \\"./foo-sub-component\\";

function SubComponent(props: any) {
  return <Foo />;
}

export default SubComponent;
"
`;

exports[`React Native > jsx > Typescript Test > svgComponent 1`] = `"Cannot read properties of undefined (reading 'viewBox')"`;

exports[`React Native > jsx > Typescript Test > typeDependency 1`] = `
"import * as React from \\"react\\";
import {
  FlatList,
  ScrollView,
  View,
  StyleSheet,
  Image,
  Text,
  Pressable,
  TextInput,
} from \\"react-native\\";

export type TypeDependencyProps = {
  foo: Foo;
  foo2: Foo2;
};
import type { Foo } from \\"./foo-type\\";
import type { Foo as Foo2 } from \\"./type-export\\";

function TypeDependency(props: TypeDependencyProps) {
  return (
    <View>
      <Text>{props.foo}</Text>
    </View>
  );
}

export default TypeDependency;
"
`;

exports[`React Native > jsx > Typescript Test > use-style 1`] = `
"import * as React from \\"react\\";
import {
  FlatList,
  ScrollView,
  View,
  StyleSheet,
  Image,
  Text,
  Pressable,
  TextInput,
} from \\"react-native\\";

function MyComponent(props: any) {
  return (
    <View type=\\"button\\">
      <Text>Button</Text>
    </View>
  );
}

const styles = StyleSheet.create({});

export default MyComponent;
"
`;

exports[`React Native > jsx > Typescript Test > use-style-and-css 1`] = `"Cannot read properties of undefined (reading 'style')"`;

exports[`React Native > jsx > Typescript Test > use-style-outside-component 1`] = `
"import * as React from \\"react\\";
import {
  FlatList,
  ScrollView,
  View,
  StyleSheet,
  Image,
  Text,
  Pressable,
  TextInput,
} from \\"react-native\\";

function MyComponent(props: any) {
  return (
    <View type=\\"button\\">
      <Text>Button</Text>
    </View>
  );
}

const styles = StyleSheet.create({});

export default MyComponent;
"
`;

exports[`React Native > jsx > Typescript Test > useTarget 1`] = `
"import * as React from \\"react\\";
import {
  FlatList,
  ScrollView,
  View,
  StyleSheet,
  Image,
  Text,
  Pressable,
  TextInput,
} from \\"react-native\\";
import { useState, useEffect } from \\"react\\";

function UseTargetComponent(props: any) {
  function name() {
    const prefix = \\"rn\\";
    return prefix + \\"foo\\";
  }

  const [lastName, setLastName] = useState(() => \\"bar\\");

  useEffect(() => {}, []);

  return (
    <View>
      <Text>{name()}</Text>
    </View>
  );
}

export default UseTargetComponent;
"
`;

exports[`React Native > jsx > Typescript Test > webComponent 1`] = `
"import * as React from \\"react\\";
import {
  FlatList,
  ScrollView,
  View,
  StyleSheet,
  Image,
  Text,
  Pressable,
  TextInput,
} from \\"react-native\\";
import { useEffect } from \\"react\\";
import { register } from \\"swiper/element/bundle\\";

function MyBasicWebComponent(props: any) {
  useEffect(() => {
    register();
  }, []);

  return (
    <swiper-container slides-per-view=\\"3\\" navigation=\\"true\\" pagination=\\"true\\">
      <swiper-slide>
        <Text>Slide 1</Text>
      </swiper-slide>
      <swiper-slide>
        <Text>Slide 2</Text>
      </swiper-slide>
      <swiper-slide>
        <Text>Slide 3</Text>
      </swiper-slide>
    </swiper-container>
  );
}

export default MyBasicWebComponent;
"
`;

exports[`React Native > svelte > Javascript Test > basic 1`] = `
"import * as React from \\"react\\";
import {
  FlatList,
  ScrollView,
  View,
  StyleSheet,
  Image,
  Text,
  Pressable,
  TextInput,
} from \\"react-native\\";
import { useState } from \\"react\\";

function MyComponent(props) {
  const [name, setName] = useState(() => \\"Steve\\");

  return (
    <View>
      <TextInput
        onChange={(event) => setName(event.target.value)}
        value={name}
      />
      <Text>Hello! I can run in React, Vue, Solid, or Liquid!</Text>
    </View>
  );
}

export default MyComponent;
"
`;

exports[`React Native > svelte > Javascript Test > bindGroup 1`] = `
"import * as React from \\"react\\";
import {
  FlatList,
  ScrollView,
  View,
  StyleSheet,
  Image,
  Text,
  Pressable,
  TextInput,
} from \\"react-native\\";
import { useState } from \\"react\\";

function MyComponent(props) {
  const [tortilla, setTortilla] = useState(() => \\"Plain\\");

  const [fillings, setFillings] = useState(() => []);

  return (
    <View>
      <TextInput
        type=\\"radio\\"
        value=\\"Plain\\"
        checked={tortilla === \\"Plain\\"}
        onChange={(event) => setTortilla(event.target.value)}
      />
      <TextInput
        type=\\"radio\\"
        value=\\"Whole wheat\\"
        checked={tortilla === \\"Whole wheat\\"}
        onChange={(event) => setTortilla(event.target.value)}
      />
      <TextInput
        type=\\"radio\\"
        value=\\"Spinach\\"
        checked={tortilla === \\"Spinach\\"}
        onChange={(event) => setTortilla(event.target.value)}
      />
      <View />
      <View />
      <TextInput
        type=\\"checkbox\\"
        value=\\"Rice\\"
        checked={fillings === \\"Rice\\"}
        onChange={(event) => setFillings(event.target.value)}
      />
      <TextInput
        type=\\"checkbox\\"
        value=\\"Beans\\"
        checked={fillings === \\"Beans\\"}
        onChange={(event) => setFillings(event.target.value)}
      />
      <TextInput
        type=\\"checkbox\\"
        value=\\"Cheese\\"
        checked={fillings === \\"Cheese\\"}
        onChange={(event) => setFillings(event.target.value)}
      />
      <TextInput
        type=\\"checkbox\\"
        value=\\"Guac (extra)\\"
        checked={fillings === \\"Guac (extra)\\"}
        onChange={(event) => setFillings(event.target.value)}
      />
      <View>
        <Text>Tortilla: </Text>
        <Text>{tortilla}</Text>
      </View>
      <View>
        <Text>Fillings: </Text>
        <Text>{fillings}</Text>
      </View>
    </View>
  );
}

export default MyComponent;
"
`;

exports[`React Native > svelte > Javascript Test > bindProperty 1`] = `
"import * as React from \\"react\\";
import {
  FlatList,
  ScrollView,
  View,
  StyleSheet,
  Image,
  Text,
  Pressable,
  TextInput,
} from \\"react-native\\";
import { useState } from \\"react\\";

function MyComponent(props) {
  const [value, setValue] = useState(() => \\"hello\\");

  return <TextInput value={value} />;
}

export default MyComponent;
"
`;

exports[`React Native > svelte > Javascript Test > classDirective 1`] = `
"import * as React from \\"react\\";
import {
  FlatList,
  ScrollView,
  View,
  StyleSheet,
  Image,
  Text,
  Pressable,
  TextInput,
} from \\"react-native\\";
import { useState } from \\"react\\";

function MyComponent(props) {
  const [focus, setFocus] = useState(() => true);

  return <TextInput />;
}

MyComponent.defaultProps = {};

export default MyComponent;
"
`;

exports[`React Native > svelte > Javascript Test > context 1`] = `"Cannot read properties of undefined (reading 'value')"`;

exports[`React Native > svelte > Javascript Test > each 1`] = `
"import * as React from \\"react\\";
import {
  FlatList,
  ScrollView,
  View,
  StyleSheet,
  Image,
  Text,
  Pressable,
  TextInput,
} from \\"react-native\\";
import { useState } from \\"react\\";

function MyComponent(props) {
  const [numbers, setNumbers] = useState(() => [\\"one\\", \\"two\\", \\"three\\"]);

  return (
    <View>
      {numbers?.map((num) => (
        <View>
          <Text>{num}</Text>
        </View>
      ))}
    </View>
  );
}

export default MyComponent;
"
`;

exports[`React Native > svelte > Javascript Test > eventHandlers 1`] = `
"import * as React from \\"react\\";
import {
  FlatList,
  ScrollView,
  View,
  StyleSheet,
  Image,
  Text,
  Pressable,
  TextInput,
} from \\"react-native\\";

function MyComponent(props) {
  function log(msg = \\"hello\\") {
    console.log(msg);
  }

  return (
    <View>
      <Pressable onPress={(a) => log(\\"hi\\")}>
        <Text>Log</Text>
      </Pressable>
      <Pressable onPress={(event) => log(event)}>
        <Text>Log</Text>
      </Pressable>
      <Pressable onPress={(event) => log(event)}>
        <Text>Log</Text>
      </Pressable>
    </View>
  );
}

export default MyComponent;
"
`;

exports[`React Native > svelte > Javascript Test > html 1`] = `
"import * as React from \\"react\\";
import {
  FlatList,
  ScrollView,
  View,
  StyleSheet,
  Image,
  Text,
  Pressable,
  TextInput,
} from \\"react-native\\";
import { useState } from \\"react\\";

function MyComponent(props) {
  const [html, setHtml] = useState(() => \\"<b>bold</b>\\");

  return <View dangerouslySetInnerHTML={{ __html: html }} />;
}

export default MyComponent;
"
`;

exports[`React Native > svelte > Javascript Test > ifElse 1`] = `
"import * as React from \\"react\\";
import {
  FlatList,
  ScrollView,
  View,
  StyleSheet,
  Image,
  Text,
  Pressable,
  TextInput,
} from \\"react-native\\";
import { useState } from \\"react\\";

function MyComponent(props) {
  const [show, setShow] = useState(() => true);

  function toggle() {
    setShow(!show);
  }

  return (
    <>
      {show ? (
        <>
          <Pressable onPress={(event) => toggle(event)}>
            <Text> Hide </Text>
          </Pressable>
        </>
      ) : (
        <Pressable onPress={(event) => toggle(event)}>
          <Text> Show </Text>
        </Pressable>
      )}
    </>
  );
}

export default MyComponent;
"
`;

exports[`React Native > svelte > Javascript Test > imports 1`] = `
"import * as React from \\"react\\";
import {
  FlatList,
  ScrollView,
  View,
  StyleSheet,
  Image,
  Text,
  Pressable,
  TextInput,
} from \\"react-native\\";
import { useState } from \\"react\\";
import Button from \\"./Button\\";

function MyComponent(props) {
  const [disabled, setDisabled] = useState(() => false);

  return (
    <View>
      <Button type=\\"button\\" disabled={disabled}>
        <>{props.children}</>
      </Button>
    </View>
  );
}

export default MyComponent;
"
`;

exports[`React Native > svelte > Javascript Test > lifecycleHooks 1`] = `
"import * as React from \\"react\\";
import {
  FlatList,
  ScrollView,
  View,
  StyleSheet,
  Image,
  Text,
  Pressable,
  TextInput,
} from \\"react-native\\";
import { useEffect } from \\"react\\";

function MyComponent(props) {
  useEffect(() => {
    console.log(\\"onMount\\");
  }, []);

  useEffect(() => {
    console.log(\\"onAfterUpdate\\");
  });

  useEffect(() => {
    return () => {
      console.log(\\"onDestroy\\");
    };
  }, []);

  return <View />;
}

export default MyComponent;
"
`;

exports[`React Native > svelte > Javascript Test > reactive 1`] = `
"import * as React from \\"react\\";
import {
  FlatList,
  ScrollView,
  View,
  StyleSheet,
  Image,
  Text,
  Pressable,
  TextInput,
} from \\"react-native\\";
import { useState } from \\"react\\";

function MyComponent(props) {
  const [name, setName] = useState(() => \\"Steve\\");

  function lowercaseName() {
    return name.toLowerCase();
  }

  return (
    <View>
      <TextInput value={name} />
      <Text>Lowercase: </Text>
      <Text>{lowercaseName()}</Text>
    </View>
  );
}

export default MyComponent;
"
`;

exports[`React Native > svelte > Javascript Test > reactiveWithFn 1`] = `
"import * as React from \\"react\\";
import {
  FlatList,
  ScrollView,
  View,
  StyleSheet,
  Image,
  Text,
  Pressable,
  TextInput,
} from \\"react-native\\";
import { useState, useEffect } from \\"react\\";

function MyComponent(props) {
  const [a, setA] = useState(() => 2);

  const [b, setB] = useState(() => 5);

  const [result, setResult] = useState(() => null);

  function calculateResult(a_, b_) {
    setResult(a_ * b_);
  }

  useEffect(() => {
    calculateResult(a, b);
  }, [a, b]);

  return (
    <View>
      <TextInput
        type=\\"number\\"
        onChange={(event) => setA(event.target.value)}
        value={a}
      />
      <TextInput
        type=\\"number\\"
        onChange={(event) => setB(event.target.value)}
        value={b}
      />
      <Text>Result: </Text>
      <Text>{result}</Text>
    </View>
  );
}

export default MyComponent;
"
`;

exports[`React Native > svelte > Javascript Test > slots 1`] = `
"import * as React from \\"react\\";
import {
  FlatList,
  ScrollView,
  View,
  StyleSheet,
  Image,
  Text,
  Pressable,
  TextInput,
} from \\"react-native\\";

function MyComponent(props) {
  return (
    <View>
      <>{props.children || <Text>default</Text>}</>
      <>
        {props.Test || (
          <View>
            <Text>default</Text>
          </View>
        )}
      </>
    </View>
  );
}

export default MyComponent;
"
`;

exports[`React Native > svelte > Javascript Test > style 1`] = `
"import * as React from \\"react\\";
import {
  FlatList,
  ScrollView,
  View,
  StyleSheet,
  Image,
  Text,
  Pressable,
  TextInput,
} from \\"react-native\\";

function MyComponent(props) {
  return <TextInput />;
}

const styles = StyleSheet.create({});

export default MyComponent;
"
`;

exports[`React Native > svelte > Javascript Test > textExpressions 1`] = `
"import * as React from \\"react\\";
import {
  FlatList,
  ScrollView,
  View,
  StyleSheet,
  Image,
  Text,
  Pressable,
  TextInput,
} from \\"react-native\\";
import { useState } from \\"react\\";

function MyComponent(props) {
  const [a, setA] = useState(() => 5);

  const [b, setB] = useState(() => 12);

  return (
    <View>
      <Text>normal:</Text>
      <Text>{a + b}</Text>
      <View />
      <Text>conditional</Text>
      <Text>{a > 2 ? \\"hello\\" : \\"bye\\"}</Text>
    </View>
  );
}

export default MyComponent;
"
`;

exports[`React Native > svelte > Typescript Test > basic 1`] = `
"import * as React from \\"react\\";
import {
  FlatList,
  ScrollView,
  View,
  StyleSheet,
  Image,
  Text,
  Pressable,
  TextInput,
} from \\"react-native\\";
import { useState } from \\"react\\";

function MyComponent(props: any) {
  const [name, setName] = useState(() => \\"Steve\\");

  return (
    <View>
      <TextInput
        onChange={(event) => setName(event.target.value)}
        value={name}
      />
      <Text>Hello! I can run in React, Vue, Solid, or Liquid!</Text>
    </View>
  );
}

export default MyComponent;
"
`;

exports[`React Native > svelte > Typescript Test > bindGroup 1`] = `
"import * as React from \\"react\\";
import {
  FlatList,
  ScrollView,
  View,
  StyleSheet,
  Image,
  Text,
  Pressable,
  TextInput,
} from \\"react-native\\";
import { useState } from \\"react\\";

function MyComponent(props: any) {
  const [tortilla, setTortilla] = useState(() => \\"Plain\\");

  const [fillings, setFillings] = useState(() => []);

  return (
    <View>
      <TextInput
        type=\\"radio\\"
        value=\\"Plain\\"
        checked={tortilla === \\"Plain\\"}
        onChange={(event) => setTortilla(event.target.value)}
      />
      <TextInput
        type=\\"radio\\"
        value=\\"Whole wheat\\"
        checked={tortilla === \\"Whole wheat\\"}
        onChange={(event) => setTortilla(event.target.value)}
      />
      <TextInput
        type=\\"radio\\"
        value=\\"Spinach\\"
        checked={tortilla === \\"Spinach\\"}
        onChange={(event) => setTortilla(event.target.value)}
      />
      <View />
      <View />
      <TextInput
        type=\\"checkbox\\"
        value=\\"Rice\\"
        checked={fillings === \\"Rice\\"}
        onChange={(event) => setFillings(event.target.value)}
      />
      <TextInput
        type=\\"checkbox\\"
        value=\\"Beans\\"
        checked={fillings === \\"Beans\\"}
        onChange={(event) => setFillings(event.target.value)}
      />
      <TextInput
        type=\\"checkbox\\"
        value=\\"Cheese\\"
        checked={fillings === \\"Cheese\\"}
        onChange={(event) => setFillings(event.target.value)}
      />
      <TextInput
        type=\\"checkbox\\"
        value=\\"Guac (extra)\\"
        checked={fillings === \\"Guac (extra)\\"}
        onChange={(event) => setFillings(event.target.value)}
      />
      <View>
        <Text>Tortilla: </Text>
        <Text>{tortilla}</Text>
      </View>
      <View>
        <Text>Fillings: </Text>
        <Text>{fillings}</Text>
      </View>
    </View>
  );
}

export default MyComponent;
"
`;

exports[`React Native > svelte > Typescript Test > bindProperty 1`] = `
"import * as React from \\"react\\";
import {
  FlatList,
  ScrollView,
  View,
  StyleSheet,
  Image,
  Text,
  Pressable,
  TextInput,
} from \\"react-native\\";
import { useState } from \\"react\\";

function MyComponent(props: any) {
  const [value, setValue] = useState(() => \\"hello\\");

  return <TextInput value={value} />;
}

export default MyComponent;
"
`;

exports[`React Native > svelte > Typescript Test > classDirective 1`] = `
"import * as React from \\"react\\";
import {
  FlatList,
  ScrollView,
  View,
  StyleSheet,
  Image,
  Text,
  Pressable,
  TextInput,
} from \\"react-native\\";
import { useState } from \\"react\\";

function MyComponent(props: any) {
  const [focus, setFocus] = useState(() => true);

  return <TextInput />;
}

MyComponent.defaultProps = {};

export default MyComponent;
"
`;

exports[`React Native > svelte > Typescript Test > context 1`] = `"Cannot read properties of undefined (reading 'value')"`;

exports[`React Native > svelte > Typescript Test > each 1`] = `
"import * as React from \\"react\\";
import {
  FlatList,
  ScrollView,
  View,
  StyleSheet,
  Image,
  Text,
  Pressable,
  TextInput,
} from \\"react-native\\";
import { useState } from \\"react\\";

function MyComponent(props: any) {
  const [numbers, setNumbers] = useState(() => [\\"one\\", \\"two\\", \\"three\\"]);

  return (
    <View>
      {numbers?.map((num) => (
        <View>
          <Text>{num}</Text>
        </View>
      ))}
    </View>
  );
}

export default MyComponent;
"
`;

exports[`React Native > svelte > Typescript Test > eventHandlers 1`] = `
"import * as React from \\"react\\";
import {
  FlatList,
  ScrollView,
  View,
  StyleSheet,
  Image,
  Text,
  Pressable,
  TextInput,
} from \\"react-native\\";

function MyComponent(props: any) {
  function log(msg = \\"hello\\") {
    console.log(msg);
  }

  return (
    <View>
      <Pressable onPress={(a) => log(\\"hi\\")}>
        <Text>Log</Text>
      </Pressable>
      <Pressable onPress={(event) => log(event)}>
        <Text>Log</Text>
      </Pressable>
      <Pressable onPress={(event) => log(event)}>
        <Text>Log</Text>
      </Pressable>
    </View>
  );
}

export default MyComponent;
"
`;

exports[`React Native > svelte > Typescript Test > html 1`] = `
"import * as React from \\"react\\";
import {
  FlatList,
  ScrollView,
  View,
  StyleSheet,
  Image,
  Text,
  Pressable,
  TextInput,
} from \\"react-native\\";
import { useState } from \\"react\\";

function MyComponent(props: any) {
  const [html, setHtml] = useState(() => \\"<b>bold</b>\\");

  return <View dangerouslySetInnerHTML={{ __html: html }} />;
}

export default MyComponent;
"
`;

exports[`React Native > svelte > Typescript Test > ifElse 1`] = `
"import * as React from \\"react\\";
import {
  FlatList,
  ScrollView,
  View,
  StyleSheet,
  Image,
  Text,
  Pressable,
  TextInput,
} from \\"react-native\\";
import { useState } from \\"react\\";

function MyComponent(props: any) {
  const [show, setShow] = useState(() => true);

  function toggle() {
    setShow(!show);
  }

  return (
    <>
      {show ? (
        <>
          <Pressable onPress={(event) => toggle(event)}>
            <Text> Hide </Text>
          </Pressable>
        </>
      ) : (
        <Pressable onPress={(event) => toggle(event)}>
          <Text> Show </Text>
        </Pressable>
      )}
    </>
  );
}

export default MyComponent;
"
`;

exports[`React Native > svelte > Typescript Test > imports 1`] = `
"import * as React from \\"react\\";
import {
  FlatList,
  ScrollView,
  View,
  StyleSheet,
  Image,
  Text,
  Pressable,
  TextInput,
} from \\"react-native\\";
import { useState } from \\"react\\";
import Button from \\"./Button\\";

function MyComponent(props: any) {
  const [disabled, setDisabled] = useState(() => false);

  return (
    <View>
      <Button type=\\"button\\" disabled={disabled}>
        <>{props.children}</>
      </Button>
    </View>
  );
}

export default MyComponent;
"
`;

exports[`React Native > svelte > Typescript Test > lifecycleHooks 1`] = `
"import * as React from \\"react\\";
import {
  FlatList,
  ScrollView,
  View,
  StyleSheet,
  Image,
  Text,
  Pressable,
  TextInput,
} from \\"react-native\\";
import { useEffect } from \\"react\\";

function MyComponent(props: any) {
  useEffect(() => {
    console.log(\\"onMount\\");
  }, []);

  useEffect(() => {
    console.log(\\"onAfterUpdate\\");
  });

  useEffect(() => {
    return () => {
      console.log(\\"onDestroy\\");
    };
  }, []);

  return <View />;
}

export default MyComponent;
"
`;

exports[`React Native > svelte > Typescript Test > reactive 1`] = `
"import * as React from \\"react\\";
import {
  FlatList,
  ScrollView,
  View,
  StyleSheet,
  Image,
  Text,
  Pressable,
  TextInput,
} from \\"react-native\\";
import { useState } from \\"react\\";

function MyComponent(props: any) {
  const [name, setName] = useState(() => \\"Steve\\");

  function lowercaseName() {
    return name.toLowerCase();
  }

  return (
    <View>
      <TextInput value={name} />
      <Text>Lowercase: </Text>
      <Text>{lowercaseName()}</Text>
    </View>
  );
}

export default MyComponent;
"
`;

exports[`React Native > svelte > Typescript Test > reactiveWithFn 1`] = `
"import * as React from \\"react\\";
import {
  FlatList,
  ScrollView,
  View,
  StyleSheet,
  Image,
  Text,
  Pressable,
  TextInput,
} from \\"react-native\\";
import { useState, useEffect } from \\"react\\";

function MyComponent(props: any) {
  const [a, setA] = useState(() => 2);

  const [b, setB] = useState(() => 5);

  const [result, setResult] = useState(() => null);

  function calculateResult(a_, b_) {
    setResult(a_ * b_);
  }

  useEffect(() => {
    calculateResult(a, b);
  }, [a, b]);

  return (
    <View>
      <TextInput
        type=\\"number\\"
        onChange={(event) => setA(event.target.value)}
        value={a}
      />
      <TextInput
        type=\\"number\\"
        onChange={(event) => setB(event.target.value)}
        value={b}
      />
      <Text>Result: </Text>
      <Text>{result}</Text>
    </View>
  );
}

export default MyComponent;
"
`;

exports[`React Native > svelte > Typescript Test > slots 1`] = `
"import * as React from \\"react\\";
import {
  FlatList,
  ScrollView,
  View,
  StyleSheet,
  Image,
  Text,
  Pressable,
  TextInput,
} from \\"react-native\\";

function MyComponent(props: any) {
  return (
    <View>
      <>{props.children || <Text>default</Text>}</>
      <>
        {props.Test || (
          <View>
            <Text>default</Text>
          </View>
        )}
      </>
    </View>
  );
}

export default MyComponent;
"
`;

exports[`React Native > svelte > Typescript Test > style 1`] = `
"import * as React from \\"react\\";
import {
  FlatList,
  ScrollView,
  View,
  StyleSheet,
  Image,
  Text,
  Pressable,
  TextInput,
} from \\"react-native\\";

function MyComponent(props: any) {
  return <TextInput />;
}

const styles = StyleSheet.create({});

export default MyComponent;
"
`;

exports[`React Native > svelte > Typescript Test > textExpressions 1`] = `
"import * as React from \\"react\\";
import {
  FlatList,
  ScrollView,
  View,
  StyleSheet,
  Image,
  Text,
  Pressable,
  TextInput,
} from \\"react-native\\";
import { useState } from \\"react\\";

function MyComponent(props: any) {
  const [a, setA] = useState(() => 5);

  const [b, setB] = useState(() => 12);

  return (
    <View>
      <Text>normal:</Text>
      <Text>{a + b}</Text>
      <View />
      <Text>conditional</Text>
      <Text>{a > 2 ? \\"hello\\" : \\"bye\\"}</Text>
    </View>
  );
}

export default MyComponent;
"
`;
