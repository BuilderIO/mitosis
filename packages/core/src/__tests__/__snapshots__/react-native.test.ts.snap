// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`React Basic 1`] = `
"import * as React from \\"react\\";
import { View, StyleSheet, Image, Text } from \\"react-native\\";
import { useState } from \\"react\\";

export default function MyBasicComponent(props) {
  const [name, setName] = useState(() => \\"Steve\\");

  return (
    <View>
      <View value={name} onChange={(event) => setName(event.target.value)} />
      <Text>Hello! I can run in React, Vue, Solid, or Liquid!</Text>
    </View>
  );
}
"
`;

exports[`React Button 1`] = `
"import * as React from \\"react\\";
import { View, StyleSheet, Image, Text } from \\"react-native\\";

export default function Button(props) {
  return (
    <>
      {props.link ? (
        <>
          <View
            {...props.attributes}
            href={props.link}
            target={props.openLinkInNewTab ? \\"_blank\\" : undefined}
          >
            <Text>{props.text}</Text>
          </View>
        </>
      ) : null}

      {!props.link ? (
        <>
          <View {...props.attributes} type=\\"button\\">
            <Text>{props.text}</Text>
          </View>
        </>
      ) : null}
    </>
  );
}
"
`;

exports[`React Columns 1`] = `
"import * as React from \\"react\\";
import { View, StyleSheet, Image, Text } from \\"react-native\\";

export default function Column(props) {
  function getColumns() {
    return props.columns || [];
  }

  function getGutterSize() {
    return typeof props.space === \\"number\\" ? props.space || 0 : 20;
  }

  function getWidth(index) {
    const columns = getColumns();
    return (columns[index] && columns[index].width) || 100 / columns.length;
  }

  function getColumnCssWidth(index) {
    const columns = getColumns();
    const gutterSize = getGutterSize();
    const subtractWidth = (gutterSize * (columns.length - 1)) / columns.length;
    return \`calc(\${getWidth(index)}% - \${subtractWidth}px)\`;
  }

  return (
    <View style={styles.view1}>
      {props.columns?.map((column, index) => (
        <View style={styles.view2}>
          <Text>{column.content}</Text>

          <Text>{index}</Text>
        </View>
      ))}
    </View>
  );
}

const styles = StyleSheet.create({
  view1: { display: \\"flex\\", flexDirection: \\"column\\", alignItems: \\"stretch\\" },
  view2: { flexGrow: 1 },
});
"
`;

exports[`React CustomCode 1`] = `
"import * as React from \\"react\\";
import { View, StyleSheet, Image, Text } from \\"react-native\\";
import { useState, useRef, useEffect } from \\"react\\";

export default function CustomCode(props) {
  const [scriptsInserted, setScriptsInserted] = useState(() => []);

  const [scriptsRun, setScriptsRun] = useState(() => []);

  function findAndRunScripts() {
    // TODO: Move this function to standalone one in '@builder.io/utils'
    if (elem.current && typeof window !== \\"undefined\\") {
      /** @type {HTMLScriptElement[]} */
      const scripts = elem.current.getElementsByTagName(\\"script\\");

      for (let i = 0; i < scripts.length; i++) {
        const script = scripts[i];

        if (script.src) {
          if (scriptsInserted.includes(script.src)) {
            continue;
          }

          scriptsInserted.push(script.src);
          const newScript = document.createElement(\\"script\\");
          newScript.async = true;
          newScript.src = script.src;
          document.head.appendChild(newScript);
        } else if (
          !script.type ||
          [
            \\"text/javascript\\",
            \\"application/javascript\\",
            \\"application/ecmascript\\",
          ].includes(script.type)
        ) {
          if (scriptsRun.includes(script.innerText)) {
            continue;
          }

          try {
            scriptsRun.push(script.innerText);
            new Function(script.innerText)();
          } catch (error) {
            console.warn(\\"\`CustomCode\`: Error running script:\\", error);
          }
        }
      }
    }
  }

  const elem = useRef();

  useEffect(() => {
    findAndRunScripts();
  }, []);

  return <View ref={elem} dangerouslySetInnerHTML={{ __html: \\"props.code\\" }} />;
}
"
`;

exports[`React Embed 1`] = `
"import * as React from \\"react\\";
import { View, StyleSheet, Image, Text } from \\"react-native\\";
import { useState, useRef, useEffect } from \\"react\\";

export default function CustomCode(props) {
  const [scriptsInserted, setScriptsInserted] = useState(() => []);

  const [scriptsRun, setScriptsRun] = useState(() => []);

  function findAndRunScripts() {
    // TODO: Move this function to standalone one in '@builder.io/utils'
    if (elem.current && typeof window !== \\"undefined\\") {
      /** @type {HTMLScriptElement[]} */
      const scripts = elem.current.getElementsByTagName(\\"script\\");

      for (let i = 0; i < scripts.length; i++) {
        const script = scripts[i];

        if (script.src) {
          if (scriptsInserted.includes(script.src)) {
            continue;
          }

          scriptsInserted.push(script.src);
          const newScript = document.createElement(\\"script\\");
          newScript.async = true;
          newScript.src = script.src;
          document.head.appendChild(newScript);
        } else if (
          !script.type ||
          [
            \\"text/javascript\\",
            \\"application/javascript\\",
            \\"application/ecmascript\\",
          ].includes(script.type)
        ) {
          if (scriptsRun.includes(script.innerText)) {
            continue;
          }

          try {
            scriptsRun.push(script.innerText);
            new Function(script.innerText)();
          } catch (error) {
            console.warn(\\"\`CustomCode\`: Error running script:\\", error);
          }
        }
      }
    }
  }

  const elem = useRef();

  useEffect(() => {
    findAndRunScripts();
  }, []);

  return <View ref={elem} dangerouslySetInnerHTML={{ __html: \\"props.code\\" }} />;
}
"
`;

exports[`React Form block 1`] = `
"import * as React from \\"react\\";
import { View, StyleSheet, Image, Text } from \\"react-native\\";
import { useState, useRef } from \\"react\\";
import { BuilderBlockComponent as BuilderBlock } from \\"@fake\\";
import { Builder, builder } from \\"@builder.io/sdk\\";
import { BuilderBlocks } from \\"@fake\\";
import { set } from \\"@fake\\";
import { get } from \\"@fake\\";

export default function FormComponent(props) {
  const [state, setState] = useState(() => \\"unsubmitted\\");

  const [responseData, setResponseData] = useState(() => null);

  const [formErrorMessage, setFormErrorMessage] = useState(() => \\"\\");

  function submissionState() {
    return (Builder.isEditing && props.previewState) || state;
  }

  function onSubmit(event) {
    const sendWithJs = props.sendWithJs || props.sendSubmissionsTo === \\"email\\";

    if (props.sendSubmissionsTo === \\"zapier\\") {
      event.preventDefault();
    } else if (sendWithJs) {
      if (!(props.action || props.sendSubmissionsTo === \\"email\\")) {
        event.preventDefault();
        return;
      }

      event.preventDefault();
      const el = event.currentTarget;
      const headers = props.customHeaders || {};
      let body;
      const formData = new FormData(el); // TODO: maybe support null

      const formPairs = Array.from(
        event.currentTarget.querySelectorAll(\\"input,select,textarea\\")
      )
        .filter((el) => !!el.name)
        .map((el) => {
          let value;
          const key = el.name;

          if (el instanceof HTMLInputElement) {
            if (el.type === \\"radio\\") {
              if (el.checked) {
                value = el.name;
                return {
                  key,
                  value,
                };
              }
            } else if (el.type === \\"checkbox\\") {
              value = el.checked;
            } else if (el.type === \\"number\\" || el.type === \\"range\\") {
              const num = el.valueAsNumber;

              if (!isNaN(num)) {
                value = num;
              }
            } else if (el.type === \\"file\\") {
              // TODO: one vs multiple files
              value = el.files;
            } else {
              value = el.value;
            }
          } else {
            value = el.value;
          }

          return {
            key,
            value,
          };
        });
      let contentType = props.contentType;

      if (props.sendSubmissionsTo === \\"email\\") {
        contentType = \\"multipart/form-data\\";
      }

      Array.from(formPairs).forEach(({ value }) => {
        if (
          value instanceof File ||
          (Array.isArray(value) && value[0] instanceof File) ||
          value instanceof FileList
        ) {
          contentType = \\"multipart/form-data\\";
        }
      }); // TODO: send as urlEncoded or multipart by default
      // because of ease of use and reliability in browser API
      // for encoding the form?

      if (contentType !== \\"application/json\\") {
        body = formData;
      } else {
        // Json
        const json = {};
        Array.from(formPairs).forEach(({ value, key }) => {
          set(json, key, value);
        });
        body = JSON.stringify(json);
      }

      if (contentType && contentType !== \\"multipart/form-data\\") {
        if (
          /* Zapier doesn't allow content-type header to be sent from browsers */ !(
            sendWithJs && props.action?.includes(\\"zapier.com\\")
          )
        ) {
          headers[\\"content-type\\"] = contentType;
        }
      }
      const presubmitEvent = new CustomEvent(\\"presubmit\\", { detail: { body } });
      if (formRef.current) {
        formRef.current.dispatchEvent(presubmitEvent);
        if (presubmitEvent.defaultPrevented) {
          return;
        }
      }
      setState(\\"sending\\");
      const formUrl = \`\${
        builder.env === \\"dev\\" ? \\"http://localhost:5000\\" : \\"https://builder.io\\"
      }/api/v1/form-submit?apiKey=\${builder.apiKey}&to=\${btoa(
        props.sendSubmissionsToEmail || \\"\\"
      )}&name=\${encodeURIComponent(props.name || \\"\\")}\`;
      fetch(
        props.sendSubmissionsTo === \\"email\\"
          ? formUrl
          : props.action /* TODO: throw error if no action URL */,
        { body, headers, method: props.method || \\"post\\" }
      ).then(
        async (res) => {
          let body;
          const contentType = res.headers.get(\\"content-type\\");
          if (contentType && contentType.indexOf(\\"application/json\\") !== -1) {
            body = await res.json();
          } else {
            body = await res.text();
          }
          if (!res.ok && props.errorMessagePath) {
            /* TODO: allow supplying an error formatter function */ let message =
              get(body, props.errorMessagePath);
            if (message) {
              if (typeof message !== \\"string\\") {
                /* TODO: ideally convert json to yaml so it woul dbe like            error: - email has been taken */ message =
                  JSON.stringify(message);
              }
              setFormErrorMessage(message);
            }
          }
          setResponseData(body);
          setState(res.ok ? \\"success\\" : \\"error\\");
          if (res.ok) {
            const submitSuccessEvent = new CustomEvent(\\"submit:success\\", {
              detail: { res, body },
            });
            if (formRef.current) {
              formRef.current.dispatchEvent(submitSuccessEvent);
              if (submitSuccessEvent.defaultPrevented) {
                return;
              }
              /* TODO: option to turn this on/off? */ if (
                props.resetFormOnSubmit !== false
              ) {
                formRef.current.reset();
              }
            }
            /* TODO: client side route event first that can be preventDefaulted */ if (
              props.successUrl
            ) {
              if (formRef.current) {
                const event = new CustomEvent(\\"route\\", {
                  detail: { url: props.successUrl },
                });
                formRef.current.dispatchEvent(event);
                if (!event.defaultPrevented) {
                  location.href = props.successUrl;
                }
              } else {
                location.href = props.successUrl;
              }
            }
          }
        },
        (err) => {
          const submitErrorEvent = new CustomEvent(\\"submit:error\\", {
            detail: { error: err },
          });
          if (formRef.current) {
            formRef.current.dispatchEvent(submitErrorEvent);
            if (submitErrorEvent.defaultPrevented) {
              return;
            }
          }
          setResponseData(err);
          setState(\\"error\\");
        }
      );
    }
  }
  const formRef = useRef();
  return (
    <View
      {...props.attributes}
      validate={props.validate}
      ref={formRef}
      action={!props.sendWithJs && props.action}
      method={props.method}
      name={props.name}
      onSubmit={(event) => onSubmit(event)}
    >
      {\\" \\"}
      {props.builderBlock && props.builderBlock.children ? (
        <>
          {props.builderBlock?.children?.map((block, index) => (
            <BuilderBlockComponent key={block.id} block={block} index={index} />
          ))}
        </>
      ) : null}{\\" \\"}
      {submissionState() === \\"error\\" ? (
        <>
          <BuilderBlocks dataPath=\\"errorMessage\\" blocks={props.errorMessage} />
        </>
      ) : null}{\\" \\"}
      {submissionState() === \\"sending\\" ? (
        <>
          <BuilderBlocks
            dataPath=\\"sendingMessage\\"
            blocks={props.sendingMessage}
          />
        </>
      ) : null}{\\" \\"}
      {submissionState() === \\"error\\" && responseData ? (
        <>
          <View style={styles.view1}>
            {\\" \\"}
            <Text>{JSON.stringify(responseData, null, 2)}</Text>{\\" \\"}
          </View>
        </>
      ) : null}{\\" \\"}
      {submissionState() === \\"success\\" ? (
        <>
          <BuilderBlocks
            dataPath=\\"successMessage\\"
            blocks={props.successMessage}
          />
        </>
      ) : null}{\\" \\"}
    </View>
  );
}
const styles = StyleSheet.create({
  view1: { padding: 10, color: \\"red\\", textAlign: \\"center\\" },
});
"
`;

exports[`React Image 1`] = `
"import * as React from \\"react\\";
import { View, StyleSheet, Image, Text } from \\"react-native\\";
import { useState, useRef, useEffect } from \\"react\\";

export default function Image(props) {
  const [scrollListener, setScrollListener] = useState(() => null);

  const [imageLoaded, setImageLoaded] = useState(() => false);

  const [load, setLoad] = useState(() => false);

  function setLoaded() {
    setImageLoaded(true);
  }

  function isBrowser() {
    return (
      typeof window !== \\"undefined\\" && window.navigator.product != \\"ReactNative\\"
    );
  }

  function useLazyLoading() {
    // TODO: Add more checks here, like testing for real web browsers
    return !!props.lazy && isBrowser();
  }

  const pictureRef = useRef();

  useEffect(() => {
    if (useLazyLoading()) {
      // throttled scroll capture listener
      const listener = () => {
        if (pictureRef.current) {
          const rect = pictureRef.current.getBoundingClientRect();
          const buffer = window.innerHeight / 2;

          if (rect.top < window.innerHeight + buffer) {
            setLoad(true);
            setScrollListener(null);
            window.removeEventListener(\\"scroll\\", listener);
          }
        }
      };

      setScrollListener(listener);
      window.addEventListener(\\"scroll\\", listener, {
        capture: true,
        passive: true,
      });
      listener();
    }
  }, []);

  useEffect(() => {
    return () => {
      if (scrollListener) {
        window.removeEventListener(\\"scroll\\", scrollListener);
      }
    };
  }, []);

  return (
    <>
      <View ref={pictureRef}>
        {!useLazyLoading() || load ? (
          <>
            <View
              alt={props.altText}
              aria-role={props.altText ? \\"presentation\\" : undefined}
              src={props.image}
              onLoad={(event) => setLoaded()}
              srcset={props.srcset}
              sizes={props.sizes}
              style={styles.view1}
            />
          </>
        ) : null}

        <View srcset={props.srcset} />
      </View>

      <Text>{props.children}</Text>
    </>
  );
}

const styles = StyleSheet.create({
  view1: {
    opacity: 1,
    transition: \\"opacity 0.2s ease-in-out\\",
    objectFit: \\"cover\\",
    objectPosition: \\"center\\",
  },
});
"
`;

exports[`React Img 1`] = `
"import * as React from \\"react\\";
import { View, StyleSheet, Image, Text } from \\"react-native\\";
import { Builder } from \\"@builder.io/sdk\\";

export default function ImgComponent(props) {
  return (
    <View
      {...props.attributes}
      style={{
        objectFit: props.backgroundSize || \\"cover\\",
        objectPosition: props.backgroundPosition || \\"center\\",
      }}
      key={(Builder.isEditing && props.imgSrc) || \\"default-key\\"}
      alt={props.altText}
      src={props.imgSrc}
    />
  );
}
"
`;

exports[`React Input block 1`] = `
"import * as React from \\"react\\";
import { View, StyleSheet, Image, Text } from \\"react-native\\";
import { Builder } from \\"@builder.io/sdk\\";

export default function FormInputComponent(props) {
  return (
    <View
      {...props.attributes}
      key={
        Builder.isEditing && props.defaultValue
          ? props.defaultValue
          : \\"default-key\\"
      }
      placeholder={props.placeholder}
      type={props.type}
      name={props.name}
      value={props.value}
      defaultValue={props.defaultValue}
      required={props.required}
    />
  );
}
"
`;

exports[`React RawText 1`] = `
"import * as React from \\"react\\";
import { View, StyleSheet, Image, Text } from \\"react-native\\";

export default function RawText(props) {
  return <View dangerouslySetInnerHTML={{ __html: \\"props.text || ''\\" }} />;
}
"
`;

exports[`React Section 1`] = `
"import * as React from \\"react\\";
import { View, StyleSheet, Image, Text } from \\"react-native\\";

export default function SectionComponent(props) {
  return (
    <View
      {...props.attributes}
      style={
        props.maxWidth && typeof props.maxWidth === \\"number\\"
          ? {
              maxWidth: props.maxWidth,
            }
          : undefined
      }
    >
      <Text>{props.children}</Text>
    </View>
  );
}
"
`;

exports[`React Select block 1`] = `
"import * as React from \\"react\\";
import { View, StyleSheet, Image, Text } from \\"react-native\\";
import { Builder } from \\"@builder.io/sdk\\";

export default function SelectComponent(props) {
  return (
    <View
      {...props.attributes}
      value={props.value}
      key={
        Builder.isEditing && props.defaultValue
          ? props.defaultValue
          : \\"default-key\\"
      }
      defaultValue={props.defaultValue}
      name={props.name}
    >
      {props.options?.map((option, index) => (
        <View value={option.value} data-index={index}>
          <Text>{option.name || option.value}</Text>
        </View>
      ))}
    </View>
  );
}
"
`;

exports[`React Stamped.io 1`] = `
"import * as React from \\"react\\";
import { View, StyleSheet, Image, Text } from \\"react-native\\";
import { useState, useEffect } from \\"react\\";
import { kebabCase } from \\"lodash\\";
import { snakeCase } from \\"lodash\\";

export default function SmileReviews(props) {
  const [reviews, setReviews] = useState(() => []);

  const [name, setName] = useState(() => \\"test\\");

  const [showReviewPrompt, setShowReviewPrompt] = useState(() => false);

  function kebabCaseValue() {
    return kebabCase(\\"testThat\\");
  }

  function snakeCaseValue() {
    return snakeCase(\\"testThis\\");
  }

  useEffect(() => {
    fetch(
      \`https://stamped.io/api/widget/reviews?storeUrl=builder-io.myshopify.com&apiKey=\${
        props.apiKey || \\"pubkey-8bbDq7W6w4sB3OWeM1HUy2s47702hM\\"
      }&productId=\${props.productId || \\"2410511106127\\"}\`
    )
      .then((res) => res.json())
      .then((data) => {
        setReviews(data.data);
      });
  }, []);

  return (
    <View data-user={name}>
      <View onClick={(event) => setShowReviewPrompt(true)}>
        <Text>Write a review</Text>
      </View>

      {showReviewPrompt ? (
        <>
          <View placeholder=\\"Email\\" />
          <View placeholder=\\"Title\\" style={styles.view1} />
          <View placeholder=\\"How was your experience?\\" style={styles.view2} />
          <View
            onClick={(event) => {
              setShowReviewPrompt(false);
            }}
            style={styles.view3}
          >
            <Text>Submit</Text>
          </View>
        </>
      ) : null}

      {reviews?.map((review, index) => (
        <View key={review.id} style={styles.view4}>
          <View src={review.avatar} style={styles.view5} />

          <View>
            <View>
              <Text>N: </Text>
              <Text>{index}</Text>
            </View>

            <View>
              <Text>{review.author}</Text>
            </View>

            <View>
              <Text>{review.reviewMessage}</Text>
            </View>
          </View>
        </View>
      ))}
    </View>
  );
}

const styles = StyleSheet.create({
  view1: { display: \\"block\\" },
  view2: { display: \\"block\\" },
  view3: { display: \\"block\\" },
  view4: {
    margin: 10,
    padding: 10,
    background: \\"white\\",
    display: \\"flex\\",
    borderRadius: 5,
    boxShadow: 0,
  },
  view5: { height: 30, width: 30, marginRight: 10 },
});
"
`;

exports[`React Submit button block 1`] = `
"import * as React from \\"react\\";
import { View, StyleSheet, Image, Text } from \\"react-native\\";

export default function SubmitButton(props) {
  return (
    <View {...props.attributes} type=\\"submit\\">
      <Text>{props.text}</Text>
    </View>
  );
}
"
`;

exports[`React Text 1`] = `
"import * as React from \\"react\\";
import { View, StyleSheet, Image, Text } from \\"react-native\\";
import { Builder } from \\"@builder.io/sdk\\";

export default function Text(props) {
  return (
    <View
      contentEditable={allowEditingText || undefined}
      dangerouslySetInnerHTML={{ __html: \\"props.text || props.content || ''\\" }}
    />
  );
}
"
`;

exports[`React Textarea 1`] = `
"import * as React from \\"react\\";
import { View, StyleSheet, Image, Text } from \\"react-native\\";

export default function Textarea(props) {
  return (
    <View
      {...props.attributes}
      placeholder={props.placeholder}
      name={props.name}
      value={props.value}
      defaultValue={props.defaultValue}
    />
  );
}
"
`;

exports[`React Video 1`] = `
"import * as React from \\"react\\";
import { View, StyleSheet, Image, Text } from \\"react-native\\";

export default function Video(props) {
  return (
    <View
      {...props.attributes}
      preload=\\"none\\"
      style={{
        width: \\"100%\\",
        height: \\"100%\\",
        ...props.attributes?.style,
        objectFit: props.fit,
        objectPosition: props.position,
        // Hack to get object fit to work as expected and
        // not have the video overflow
        borderRadius: 1,
      }}
      key={props.video || \\"no-src\\"}
      poster={props.posterImage}
      autoPlay={props.autoPlay}
      muted={props.muted}
      controls={props.controls}
      loop={props.loop}
    />
  );
}
"
`;

exports[`React onMount & onUnMount 1`] = `
"import * as React from \\"react\\";
import { View, StyleSheet, Image, Text } from \\"react-native\\";
import { useEffect } from \\"react\\";

export default function Comp(props) {
  useEffect(() => {
    console.log(\\"Runs on mount\\");
  }, []);

  useEffect(() => {
    return () => {
      console.log(\\"Runs on unMount\\");
    };
  }, []);

  return <View />;
}
"
`;

exports[`React onUpdate 1`] = `
"import * as React from \\"react\\";
import { View, StyleSheet, Image, Text } from \\"react-native\\";
import { useEffect } from \\"react\\";

export default function OnUpdate(props) {
  useEffect(() => {
    console.log(\\"Runs on every update/rerender\\");
  });

  return <View />;
}
"
`;

exports[`React onUpdateWithDeps 1`] = `
"import * as React from \\"react\\";
import { View, StyleSheet, Image, Text } from \\"react-native\\";
import { useEffect } from \\"react\\";

export default function OnUpdateWithDeps(props) {
  useEffect(() => {
    console.log(\\"Runs when a or b changes\\");
  }, [a, b]);

  return <View />;
}
"
`;
