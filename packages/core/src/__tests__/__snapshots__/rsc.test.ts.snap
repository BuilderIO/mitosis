// Vitest Snapshot v1

exports[`RSC > Javascript Test > AdvancedRef 1`] = `
"import * as React from \\"react\\";

export interface Props {
  showInput: boolean;
}

export default function MyBasicRefComponent(props: Props) {
  const _context = { ...props[\\"_context\\"] };

  const state = {
    name: \\"PatrickJS\\",
    onBlur: function onBlur() {
      // Maintain focus
      inputRef.focus();
    },
    lowerCaseName: function lowerCaseName() {
      return state.name.toLowerCase();
    },
  };

  return (
    <>
      <div>
        {props.showInput ? (
          <>
            <input className=\\"input-9fa26074\\" value={state.name} />

            <label for=\\"cars\\">Choose a car:</label>

            <select name=\\"cars\\" id=\\"cars\\">
              <option value=\\"supra\\">GR Supra</option>

              <option value=\\"86\\">GR 86</option>
            </select>
          </>
        ) : null}
        Hello
        {state.lowerCaseName()}! I can run in React, Qwik, Vue, Solid, or Web
        Component!
      </div>
      <style>{\`.input-9fa26074 { 
color: red; }\`}</style>
    </>
  );
}
"
`;

exports[`RSC > Javascript Test > Basic 1`] = `
"import * as React from \\"react\\";

export interface MyBasicComponentProps {
  id: string;
}

export const DEFAULT_VALUES = {
  name: \\"Steve\\",
};

export default function MyBasicComponent(props: MyBasicComponentProps) {
  const _context = { ...props[\\"_context\\"] };

  const state = {
    name: \\"Steve\\",
    underscore_fn_name() {
      return \\"bar\\";
    },
    age: 1,
    sports: [\\"\\"],
  };

  return (
    <>
      <div className=\\"test div-1b7dd817\\">
        <input value={DEFAULT_VALUES.name || state.name} />
        Hello! I can run in React, Vue, Solid, or Liquid!
      </div>
      <style>{\`.div-1b7dd817 { 
padding: 10px; }\`}</style>
    </>
  );
}
"
`;

exports[`RSC > Javascript Test > Basic Context 1`] = `
"import * as React from \\"react\\";
import { useEffect } from \\"react\\";
import { Injector, createInjector, MyService } from \\"@dummy/injection-js\\";

export default function MyBasicComponent(props: any) {
  const _context = { ...props[\\"_context\\"] };

  const state = {
    name: \\"PatrickJS\\",
    onChange: function onChange() {
      const change = myService.method(\\"change\\");
      console.log(change);
    },
  };

  const myService = _context[\\"MyService\\"];

  useEffect(() => {
    const hi = myService.method(\\"hi\\");
    console.log(hi);
  });

  return (
    <div>
      {myService.method(\\"hello\\") + state.name}
      Hello! I can run in React, Vue, Solid, or Liquid!
      <input />
    </div>
  );
}
"
`;

exports[`RSC > Javascript Test > Basic OnMount Update 1`] = `
"import * as React from \\"react\\";
import { useEffect } from \\"react\\";

export interface Props {
  hi: string;
  bye: string;
}

export default function MyBasicOnMountUpdateComponent(props: Props) {
  const _context = { ...props[\\"_context\\"] };

  const state = { name: \\"PatrickJS\\", names: [\\"Steve\\", \\"PatrickJS\\"] };

  useEffect(() => {
    state.name = \\"PatrickJS onInit\\" + props.hi;
  });

  return (
    <div>
      Hello
      {state.name}
    </div>
  );
}
"
`;

exports[`RSC > Javascript Test > Basic Outputs 1`] = `
"import * as React from \\"react\\";

export default function MyBasicOutputsComponent(props: any) {
  const _context = { ...props[\\"_context\\"] };

  const state = { name: \\"PatrickJS\\" };

  return <div />;
}
"
`;

exports[`RSC > Javascript Test > Basic Outputs Meta 1`] = `
"import * as React from \\"react\\";

export default function MyBasicOutputsComponent(props: any) {
  const _context = { ...props[\\"_context\\"] };

  const state = { name: \\"PatrickJS\\" };

  return <div />;
}
"
`;

exports[`RSC > Javascript Test > BasicAttribute 1`] = `
"import * as React from \\"react\\";

export default function MyComponent(props: any) {
  const _context = { ...props[\\"_context\\"] };

  return <input autoCapitalize=\\"on\\" autoComplete=\\"on\\" spellCheck={true} />;
}
"
`;

exports[`RSC > Javascript Test > BasicBooleanAttribute 1`] = `
"import * as React from \\"react\\";

type Props = {
  children: any;
  type: string;
};
import MyBooleanAttributeComponent from \\"./basic-boolean-attribute-component.raw\\";

export default function MyBooleanAttribute(props: Props) {
  const _context = { ...props[\\"_context\\"] };

  return (
    <div>
      {props.children}

      {props.type}

      <MyBooleanAttributeComponent toggle={true} _context={_context} />

      <MyBooleanAttributeComponent toggle={true} _context={_context} />

      <MyBooleanAttributeComponent list={null} _context={_context} />
    </div>
  );
}
"
`;

exports[`RSC > Javascript Test > BasicChildComponent 1`] = `
"import * as React from \\"react\\";
import MyBasicComponent from \\"./basic.raw\\";
import MyBasicOnMountUpdateComponent from \\"./basic-onMount-update.raw\\";

export default function MyBasicChildComponent(props: any) {
  const _context = { ...props[\\"_context\\"] };

  const state = { name: \\"Steve\\", dev: \\"PatrickJS\\" };

  return (
    <div>
      <MyBasicComponent id={state.dev} _context={_context} />

      <div>
        <MyBasicOnMountUpdateComponent
          hi={state.name}
          bye={state.dev}
          _context={_context}
        />
      </div>
    </div>
  );
}
"
`;

exports[`RSC > Javascript Test > BasicFor 1`] = `
"import * as React from \\"react\\";

export default function MyBasicForComponent(props: any) {
  const _context = { ...props[\\"_context\\"] };

  const state = { name: \\"PatrickJS\\", names: [\\"Steve\\", \\"PatrickJS\\"] };

  return (
    <div>
      {state.names?.map((person) => (
        <>
          <input value={state.name} />
          Hello
          {person}! I can run in Qwik, Web Component, React, Vue, Solid, or
          Liquid!
        </>
      ))}
    </div>
  );
}
"
`;

exports[`RSC > Javascript Test > BasicRef 1`] = `
"import * as React from \\"react\\";

export interface Props {
  showInput: boolean;
}

export default function MyBasicRefComponent(props: Props) {
  const _context = { ...props[\\"_context\\"] };

  const state = {
    name: \\"PatrickJS\\",
    onBlur: function onBlur() {
      // Maintain focus
      inputRef.focus();
    },
    lowerCaseName: function lowerCaseName() {
      return state.name.toLowerCase();
    },
  };

  return (
    <>
      <div>
        {props.showInput ? (
          <>
            <input className=\\"input-9fa26074\\" value={state.name} />

            <label for=\\"cars\\">Choose a car:</label>

            <select name=\\"cars\\" id=\\"cars\\">
              <option value=\\"supra\\">GR Supra</option>

              <option value=\\"86\\">GR 86</option>
            </select>
          </>
        ) : null}
        Hello
        {state.lowerCaseName()}! I can run in React, Qwik, Vue, Solid, or Web
        Component!
      </div>
      <style>{\`.input-9fa26074 { 
color: red; }\`}</style>
    </>
  );
}
"
`;

exports[`RSC > Javascript Test > BasicRefAssignment 1`] = `
"import * as React from \\"react\\";

export interface Props {
  showInput: boolean;
}

export default function MyBasicRefAssignmentComponent(props: Props) {
  const _context = { ...props[\\"_context\\"] };

  const state = {
    handlerClick: function handlerClick(event) {
      event.preventDefault();
      console.log(\\"current value\\", holdValueRef);
      holdValueRef = holdValueRef + \\"JS\\";
    },
  };

  return (
    <div>
      <button>Click</button>
    </div>
  );
}
"
`;

exports[`RSC > Javascript Test > BasicRefPrevious 1`] = `
"import * as React from \\"react\\";

export interface Props {
  showInput: boolean;
}

export function usePrevious<T>(value: T) {
  // The ref object is a generic container whose current property is mutable ...
  // ... and can hold any value, similar to an instance property on a class
  let ref = useRef<T>(null); // Store current value in ref

  onUpdate(() => {
    ref = value;
  }, [value]); // Only re-run if value changes
  // Return previous value (happens before update in useEffect above)

  return ref;
}

export default function MyPreviousComponent(props: Props) {
  const _context = { ...props[\\"_context\\"] };

  const state = { count: 0 };

  return (
    <div>
      <h1>
        Now:
        {state.count}, before:
        {prevCount}
      </h1>

      <button>Increment</button>
    </div>
  );
}
"
`;

exports[`RSC > Javascript Test > Button 1`] = `
"import * as React from \\"react\\";

export interface ButtonProps {
  attributes?: any;
  text?: string;
  link?: string;
  openLinkInNewTab?: boolean;
}

export default function Button(props: ButtonProps) {
  const _context = { ...props[\\"_context\\"] };

  return (
    <div>
      {props.link ? (
        <>
          <a
            {...props.attributes}
            href={props.link}
            target={props.openLinkInNewTab ? \\"_blank\\" : undefined}
          >
            {props.text}
          </a>
        </>
      ) : null}

      {!props.link ? (
        <>
          <button type=\\"button\\" {...props.attributes}>
            {props.text}
          </button>
        </>
      ) : null}
    </div>
  );
}
"
`;

exports[`RSC > Javascript Test > Columns 1`] = `
"import * as React from \\"react\\";

type Column = {
  content: any; // TODO: Implement this when support for dynamic CSS lands

  width?: number;
};
export interface ColumnProps {
  columns?: Column[]; // TODO: Implement this when support for dynamic CSS lands

  space?: number; // TODO: Implement this when support for dynamic CSS lands

  stackColumnsAt?: \\"tablet\\" | \\"mobile\\" | \\"never\\"; // TODO: Implement this when support for dynamic CSS lands

  reverseColumnsWhenStacked?: boolean;
}

export default function Column(props: ColumnProps) {
  const _context = { ...props[\\"_context\\"] };

  const state = {
    getColumns() {
      return props.columns || [];
    },
    getGutterSize() {
      return typeof props.space === \\"number\\" ? props.space || 0 : 20;
    },
    getWidth(index) {
      const columns = state.getColumns();
      return (columns[index] && columns[index].width) || 100 / columns.length;
    },
    getColumnCssWidth(index) {
      const columns = state.getColumns();
      const gutterSize = state.getGutterSize();
      const subtractWidth =
        (gutterSize * (columns.length - 1)) / columns.length;
      return \`calc(\${state.getWidth(index)}% - \${subtractWidth}px)\`;
    },
  };

  return (
    <>
      <div className=\\"builder-columns div-47a9ecfb\\">
        {props.columns?.map((column, index) => (
          <div className=\\"builder-column div-47a9ecfb-2\\">
            {column.content}

            {index}
          </div>
        ))}
      </div>
      <style>{\`.div-47a9ecfb { 
display: flex;
flex-direction: column;
align-items: stretch;
line-height: normal; }@media (max-width: 999px) { .div-47a9ecfb { 
flex-direction: row; } }@media (max-width: 639px) { .div-47a9ecfb { 
flex-direction: row-reverse; } }.div-47a9ecfb-2 { 
flex-grow: 1; }\`}</style>
    </>
  );
}
"
`;

exports[`RSC > Javascript Test > ContentSlotHtml 1`] = `
"import * as React from \\"react\\";

type Props = {
  [key: string]: string | JSX.Element;
  slotTesting: JSX.Element;
};

export default function ContentSlotCode(props: Props) {
  const _context = { ...props[\\"_context\\"] };

  return (
    <div>
      {props.slotTesting}

      <div>
        <hr />
      </div>

      <div slotContext={_context}></div>
    </div>
  );
}
"
`;

exports[`RSC > Javascript Test > ContentSlotJSX 1`] = `
"import * as React from \\"react\\";

type Props = {
  [key: string]: string | JSX.Element;
};

export default function ContentSlotJsxCode(props: Props) {
  const _context = { ...props[\\"_context\\"] };

  return (
    <div>
      {props.slotTesting ? (
        <>
          <div>{props.slotTesting}</div>
        </>
      ) : null}

      <div>
        <hr />
      </div>

      <div>{props.children}</div>
    </div>
  );
}
"
`;

exports[`RSC > Javascript Test > CustomCode 1`] = `
"import * as React from \\"react\\";

export interface CustomCodeProps {
  code: string;
  replaceNodes?: boolean;
}

export default function CustomCode(props: CustomCodeProps) {
  const _context = { ...props[\\"_context\\"] };

  const state = {
    scriptsInserted: [],
    scriptsRun: [],
    findAndRunScripts() {
      // TODO: Move this function to standalone one in '@builder.io/utils'
      if (elem && typeof window !== \\"undefined\\") {
        /** @type {HTMLScriptElement[]} */
        const scripts = elem.getElementsByTagName(\\"script\\");

        for (let i = 0; i < scripts.length; i++) {
          const script = scripts[i];

          if (script.src) {
            if (state.scriptsInserted.includes(script.src)) {
              continue;
            }

            state.scriptsInserted.push(script.src);
            const newScript = document.createElement(\\"script\\");
            newScript.async = true;
            newScript.src = script.src;
            document.head.appendChild(newScript);
          } else if (
            !script.type ||
            [
              \\"text/javascript\\",
              \\"application/javascript\\",
              \\"application/ecmascript\\",
            ].includes(script.type)
          ) {
            if (state.scriptsRun.includes(script.innerText)) {
              continue;
            }

            try {
              state.scriptsRun.push(script.innerText);
              new Function(script.innerText)();
            } catch (error) {
              console.warn(\\"\`CustomCode\`: Error running script:\\", error);
            }
          }
        }
      }
    },
  };

  return (
    <div
      className={
        \\"builder-custom-code\\" + (props.replaceNodes ? \\" replace-nodes\\" : \\"\\")
      }
      dangerouslySetInnerHTML={{ __html: props.code }}
    />
  );
}
"
`;

exports[`RSC > Javascript Test > Embed 1`] = `
"import * as React from \\"react\\";

export interface CustomCodeProps {
  code: string;
  replaceNodes?: boolean;
}

export default function CustomCode(props: CustomCodeProps) {
  const _context = { ...props[\\"_context\\"] };

  const state = {
    scriptsInserted: [],
    scriptsRun: [],
    findAndRunScripts() {
      // TODO: Move this function to standalone one in '@builder.io/utils'
      if (elem && typeof window !== \\"undefined\\") {
        /** @type {HTMLScriptElement[]} */
        const scripts = elem.getElementsByTagName(\\"script\\");

        for (let i = 0; i < scripts.length; i++) {
          const script = scripts[i];

          if (script.src) {
            if (state.scriptsInserted.includes(script.src)) {
              continue;
            }

            state.scriptsInserted.push(script.src);
            const newScript = document.createElement(\\"script\\");
            newScript.async = true;
            newScript.src = script.src;
            document.head.appendChild(newScript);
          } else if (
            !script.type ||
            [
              \\"text/javascript\\",
              \\"application/javascript\\",
              \\"application/ecmascript\\",
            ].includes(script.type)
          ) {
            if (state.scriptsRun.includes(script.innerText)) {
              continue;
            }

            try {
              state.scriptsRun.push(script.innerText);
              new Function(script.innerText)();
            } catch (error) {
              console.warn(\\"\`CustomCode\`: Error running script:\\", error);
            }
          }
        }
      }
    },
  };

  return (
    <div
      className={
        \\"builder-custom-code\\" + (props.replaceNodes ? \\" replace-nodes\\" : \\"\\")
      }
      dangerouslySetInnerHTML={{ __html: props.code }}
    />
  );
}
"
`;

exports[`RSC > Javascript Test > Form 1`] = `
"import * as React from \\"react\\";

export interface FormProps {
  attributes?: any;
  name?: string;
  action?: string;
  validate?: boolean;
  method?: string;
  builderBlock?: BuilderElement;
  sendSubmissionsTo?: string;
  sendSubmissionsToEmail?: string;
  sendWithJs?: boolean;
  contentType?: string;
  customHeaders?: {
    [key: string]: string;
  };
  successUrl?: string;
  previewState?: FormState;
  successMessage?: BuilderElement[];
  errorMessage?: BuilderElement[];
  sendingMessage?: BuilderElement[];
  resetFormOnSubmit?: boolean;
  errorMessagePath?: string;
}
export type FormState = \\"unsubmitted\\" | \\"sending\\" | \\"success\\" | \\"error\\";
import { BuilderBlock as BuilderBlockComponent } from \\"@fake\\";
import { Builder, builder } from \\"@builder.io/sdk\\";
import { BuilderBlocks } from \\"@fake\\";
import { set } from \\"@fake\\";
import { get } from \\"@fake\\";

export default function FormComponent(props: FormProps) {
  const _context = { ...props[\\"_context\\"] };

  const state = {
    formState: \\"unsubmitted\\",
    responseData: null,
    formErrorMessage: \\"\\",
    get submissionState() {
      return (Builder.isEditing && props.previewState) || state.formState;
    },
    onSubmit(event) {
      const sendWithJs =
        props.sendWithJs || props.sendSubmissionsTo === \\"email\\";

      if (props.sendSubmissionsTo === \\"zapier\\") {
        event.preventDefault();
      } else if (sendWithJs) {
        if (!(props.action || props.sendSubmissionsTo === \\"email\\")) {
          event.preventDefault();
          return;
        }

        event.preventDefault();
        const el = event.currentTarget;
        const headers = props.customHeaders || {};
        let body;
        const formData = new FormData(el); // TODO: maybe support null

        const formPairs = Array.from(
          event.currentTarget.querySelectorAll(\\"input,select,textarea\\")
        )
          .filter((el) => !!el.name)
          .map((el) => {
            let value;
            const key = el.name;

            if (el instanceof HTMLInputElement) {
              if (el.type === \\"radio\\") {
                if (el.checked) {
                  value = el.name;
                  return {
                    key,
                    value,
                  };
                }
              } else if (el.type === \\"checkbox\\") {
                value = el.checked;
              } else if (el.type === \\"number\\" || el.type === \\"range\\") {
                const num = el.valueAsNumber;

                if (!isNaN(num)) {
                  value = num;
                }
              } else if (el.type === \\"file\\") {
                // TODO: one vs multiple files
                value = el.files;
              } else {
                value = el.value;
              }
            } else {
              value = el.value;
            }

            return {
              key,
              value,
            };
          });
        let contentType = props.contentType;

        if (props.sendSubmissionsTo === \\"email\\") {
          contentType = \\"multipart/form-data\\";
        }

        Array.from(formPairs).forEach(({ value }) => {
          if (
            value instanceof File ||
            (Array.isArray(value) && value[0] instanceof File) ||
            value instanceof FileList
          ) {
            contentType = \\"multipart/form-data\\";
          }
        }); // TODO: send as urlEncoded or multipart by default
        // because of ease of use and reliability in browser API
        // for encoding the form?

        if (contentType !== \\"application/json\\") {
          body = formData;
        } else {
          // Json
          const json = {};
          Array.from(formPairs).forEach(({ value, key }) => {
            set(json, key, value);
          });
          body = JSON.stringify(json);
        }

        if (contentType && contentType !== \\"multipart/form-data\\") {
          if (
            /* Zapier doesn't allow content-type header to be sent from browsers */ !(
              sendWithJs && props.action?.includes(\\"zapier.com\\")
            )
          ) {
            headers[\\"content-type\\"] = contentType;
          }
        }
        const presubmitEvent = new CustomEvent(\\"presubmit\\", {
          detail: { body },
        });
        if (formRef) {
          formRef.dispatchEvent(presubmitEvent);
          if (presubmitEvent.defaultPrevented) {
            return;
          }
        }
        state.formState = \\"sending\\";
        const formUrl = \`\${
          builder.env === \\"dev\\" ? \\"http://localhost:5000\\" : \\"https://builder.io\\"
        }/api/v1/form-submit?apiKey=\${builder.apiKey}&to=\${btoa(
          props.sendSubmissionsToEmail || \\"\\"
        )}&name=\${encodeURIComponent(props.name || \\"\\")}\`;
        fetch(
          props.sendSubmissionsTo === \\"email\\"
            ? formUrl
            : props.action /* TODO: throw error if no action URL */,
          { body, headers, method: props.method || \\"post\\" }
        ).then(
          async (res) => {
            let body;
            const contentType = res.headers.get(\\"content-type\\");
            if (contentType && contentType.indexOf(\\"application/json\\") !== -1) {
              body = await res.json();
            } else {
              body = await res.text();
            }
            if (!res.ok && props.errorMessagePath) {
              /* TODO: allow supplying an error formatter function */ let message =
                get(body, props.errorMessagePath);
              if (message) {
                if (typeof message !== \\"string\\") {
                  /* TODO: ideally convert json to yaml so it woul dbe like            error: - email has been taken */ message =
                    JSON.stringify(message);
                }
                state.formErrorMessage = message;
              }
            }
            state.responseData = body;
            state.formState = res.ok ? \\"success\\" : \\"error\\";
            if (res.ok) {
              const submitSuccessEvent = new CustomEvent(\\"submit:success\\", {
                detail: { res, body },
              });
              if (formRef) {
                formRef.dispatchEvent(submitSuccessEvent);
                if (submitSuccessEvent.defaultPrevented) {
                  return;
                }
                /* TODO: option to turn this on/off? */ if (
                  props.resetFormOnSubmit !== false
                ) {
                  formRef.reset();
                }
              }
              /* TODO: client side route event first that can be preventDefaulted */ if (
                props.successUrl
              ) {
                if (formRef) {
                  const event = new CustomEvent(\\"route\\", {
                    detail: { url: props.successUrl },
                  });
                  formRef.dispatchEvent(event);
                  if (!event.defaultPrevented) {
                    location.href = props.successUrl;
                  }
                } else {
                  location.href = props.successUrl;
                }
              }
            }
          },
          (err) => {
            const submitErrorEvent = new CustomEvent(\\"submit:error\\", {
              detail: { error: err },
            });
            if (formRef) {
              formRef.dispatchEvent(submitErrorEvent);
              if (submitErrorEvent.defaultPrevented) {
                return;
              }
            }
            state.responseData = err;
            state.formState = \\"error\\";
          }
        );
      }
    },
  };
  return (
    <>
      {\\" \\"}
      <form
        validate={props.validate}
        action={!props.sendWithJs && props.action}
        method={props.method}
        name={props.name}
        {...props.attributes}
      >
        {\\" \\"}
        {props.builderBlock && props.builderBlock.children ? (
          <>
            {props.builderBlock?.children?.map((block, index) => (
              <BuilderBlockComponent
                key={block.id}
                block={block}
                index={index}
                _context={_context}
              />
            ))}
          </>
        ) : null}{\\" \\"}
        {state.submissionState === \\"error\\" ? (
          <>
            <BuilderBlocks
              dataPath=\\"errorMessage\\"
              blocks={props.errorMessage}
              _context={_context}
            />
          </>
        ) : null}{\\" \\"}
        {state.submissionState === \\"sending\\" ? (
          <>
            <BuilderBlocks
              dataPath=\\"sendingMessage\\"
              blocks={props.sendingMessage}
              _context={_context}
            />
          </>
        ) : null}{\\" \\"}
        {state.submissionState === \\"error\\" && state.responseData ? (
          <>
            <pre className=\\"builder-form-error-text pre-3f22586c\\">
              {\\" \\"}
              {JSON.stringify(state.responseData, null, 2)}{\\" \\"}
            </pre>
          </>
        ) : null}{\\" \\"}
        {state.submissionState === \\"success\\" ? (
          <>
            <BuilderBlocks
              dataPath=\\"successMessage\\"
              blocks={props.successMessage}
              _context={_context}
            />
          </>
        ) : null}{\\" \\"}
      </form>{\\" \\"}
      <style>{\`.pre-3f22586c {  padding: 10px; color: red; text-align: center; }\`}</style>{\\" \\"}
    </>
  );
}
"
`;

exports[`RSC > Javascript Test > Image 1`] = `
"import * as React from \\"react\\";

// TODO: AMP Support?
export interface ImageProps {
  _class?: string;
  image: string;
  sizes?: string;
  lazy?: boolean;
  height?: number;
  width?: number;
  altText?: string;
  backgroundSize?: string;
  backgroundPosition?: string; // TODO: Support generating Builder.io and or Shopify \`srcset\`s when needed

  srcset?: string; // TODO: Implement support for custom aspect ratios

  aspectRatio?: number; // TODO: This might not work as expected in terms of positioning

  children?: any;
}

export default function Image(props: ImageProps) {
  const _context = { ...props[\\"_context\\"] };

  const state = {
    scrollListener: null,
    imageLoaded: false,
    setLoaded() {
      state.imageLoaded = true;
    },
    useLazyLoading() {
      // TODO: Add more checks here, like testing for real web browsers
      return !!props.lazy && isBrowser();
    },
    isBrowser: function isBrowser() {
      return (
        typeof window !== \\"undefined\\" &&
        window.navigator.product != \\"ReactNative\\"
      );
    },
    load: false,
  };

  return (
    <>
      <div>
        <picture>
          {!state.useLazyLoading() || state.load ? (
            <>
              <img
                alt={props.altText}
                aria-role={props.altText ? \\"presentation\\" : undefined}
                className={
                  \\"builder-image\\" +
                  (props._class ? \\" \\" + props._class : \\"\\") +
                  \\" img-6748f1f2\\"
                }
                src={props.image}
                srcset={props.srcset}
                sizes={props.sizes}
              />
            </>
          ) : null}

          <source srcset={props.srcset} />
        </picture>

        {props.children}
      </div>
      <style>{\`.img-6748f1f2 { 
opacity: 1;
transition: opacity 0.2s ease-in-out;
object-fit: cover;
object-position: center; }\`}</style>
    </>
  );
}
"
`;

exports[`RSC > Javascript Test > Image State 1`] = `
"import * as React from \\"react\\";

export default function ImgStateComponent(props: any) {
  const _context = { ...props[\\"_context\\"] };

  const state = { canShow: true, images: [\\"http://example.com/qwik.png\\"] };

  return (
    <div>
      {state.images?.map((item, itemIndex) => (
        <>
          <img className=\\"custom-class\\" src={item} key={itemIndex} />
        </>
      ))}
    </div>
  );
}
"
`;

exports[`RSC > Javascript Test > Img 1`] = `
"import * as React from \\"react\\";

export interface ImgProps {
  attributes?: any;
  imgSrc?: string;
  altText?: string;
  backgroundSize?: \\"cover\\" | \\"contain\\";
  backgroundPosition?:
    | \\"center\\"
    | \\"top\\"
    | \\"left\\"
    | \\"right\\"
    | \\"bottom\\"
    | \\"top left\\"
    | \\"top right\\"
    | \\"bottom left\\"
    | \\"bottom right\\";
}

import { Builder } from \\"@builder.io/sdk\\";

export default function ImgComponent(props: ImgProps) {
  const _context = { ...props[\\"_context\\"] };

  return (
    <img
      style={{
        objectFit: props.backgroundSize || \\"cover\\",
        objectPosition: props.backgroundPosition || \\"center\\",
      }}
      {...props.attributes}
      key={(Builder.isEditing && props.imgSrc) || \\"default-key\\"}
      alt={props.altText}
      src={props.imgSrc}
    />
  );
}
"
`;

exports[`RSC > Javascript Test > Input 1`] = `
"import * as React from \\"react\\";

export interface FormInputProps {
  type?: string;
  attributes?: any;
  name?: string;
  value?: string;
  placeholder?: string;
  defaultValue?: string;
  required?: boolean;
}

import { Builder } from \\"@builder.io/sdk\\";

export default function FormInputComponent(props: FormInputProps) {
  const _context = { ...props[\\"_context\\"] };

  return (
    <input
      {...props.attributes}
      key={
        Builder.isEditing && props.defaultValue
          ? props.defaultValue
          : \\"default-key\\"
      }
      placeholder={props.placeholder}
      type={props.type}
      name={props.name}
      value={props.value}
      defaultValue={props.defaultValue}
      required={props.required}
    />
  );
}
"
`;

exports[`RSC > Javascript Test > RawText 1`] = `
"import * as React from \\"react\\";

export interface RawTextProps {
  attributes?: any;
  text?: string; // builderBlock?: any;
}

export default function RawText(props: RawTextProps) {
  const _context = { ...props[\\"_context\\"] };

  return (
    <span
      className={props.attributes?.class || props.attributes?.className}
      dangerouslySetInnerHTML={{ __html: props.text || \\"\\" }}
    />
  );
}
"
`;

exports[`RSC > Javascript Test > Section 1`] = `
"import * as React from \\"react\\";

export interface SectionProps {
  maxWidth?: number;
  attributes?: any;
  children?: any;
}

export default function SectionComponent(props: SectionProps) {
  const _context = { ...props[\\"_context\\"] };

  return (
    <section
      {...props.attributes}
      style={
        props.maxWidth && typeof props.maxWidth === \\"number\\"
          ? {
              maxWidth: props.maxWidth,
            }
          : undefined
      }
    >
      {props.children}
    </section>
  );
}
"
`;

exports[`RSC > Javascript Test > Select 1`] = `
"import * as React from \\"react\\";

export interface FormSelectProps {
  options?: {
    name?: string;
    value: string;
  }[];
  attributes?: any;
  name?: string;
  value?: string;
  defaultValue?: string;
}

import { Builder } from \\"@builder.io/sdk\\";

export default function SelectComponent(props: FormSelectProps) {
  const _context = { ...props[\\"_context\\"] };

  return (
    <select
      {...props.attributes}
      value={props.value}
      key={
        Builder.isEditing && props.defaultValue
          ? props.defaultValue
          : \\"default-key\\"
      }
      defaultValue={props.defaultValue}
      name={props.name}
    >
      {props.options?.map((option, index) => (
        <option value={option.value} data-index={index}>
          {option.name || option.value}
        </option>
      ))}
    </select>
  );
}
"
`;

exports[`RSC > Javascript Test > SlotHtml 1`] = `
"import * as React from \\"react\\";

type Props = {
  [key: string]: string;
};
import ContentSlotCode from \\"./content-slot-jsx.raw\\";

export default function SlotCode(props: Props) {
  const _context = { ...props[\\"_context\\"] };

  return (
    <div>
      <ContentSlotCode
        _context={_context}
        slotTesting={<div>Hello</div>}
      ></ContentSlotCode>
    </div>
  );
}
"
`;

exports[`RSC > Javascript Test > SlotJsx 1`] = `
"import * as React from \\"react\\";

type Props = {
  [key: string]: string;
};
import ContentSlotCode from \\"./content-slot-jsx.raw\\";

export default function SlotCode(props: Props) {
  const _context = { ...props[\\"_context\\"] };

  return (
    <div>
      <ContentSlotCode slotTesting={<div>Hello</div>} _context={_context} />
    </div>
  );
}
"
`;

exports[`RSC > Javascript Test > Stamped.io 1`] = `
"import * as React from \\"react\\";

type SmileReviewsProps = {
  productId: string;
  apiKey: string;
};
import { kebabCase } from \\"lodash\\";
import { snakeCase } from \\"lodash\\";

export default function SmileReviews(props: SmileReviewsProps) {
  const _context = { ...props[\\"_context\\"] };

  const state = {
    reviews: [],
    name: \\"test\\",
    showReviewPrompt: false,
    kebabCaseValue() {
      return kebabCase(\\"testThat\\");
    },
    snakeCaseValue() {
      return snakeCase(\\"testThis\\");
    },
  };

  return (
    <>
      <div data-user={state.name}>
        <button>Write a review</button>

        {state.showReviewPrompt || \\"asdf\\" ? (
          <>
            <input placeholder=\\"Email\\" />
            <input placeholder=\\"Title\\" className=\\"input-31d03b9e\\" />
            <textarea
              placeholder=\\"How was your experience?\\"
              className=\\"textarea-31d03b9e\\"
            />
            <button className=\\"button-31d03b9e\\">Submit</button>
          </>
        ) : null}

        {state.reviews?.map((review, index) => (
          <div className=\\"review-31d03b9e\\" key={review.id}>
            <img className=\\"img-31d03b9e\\" src={review.avatar} />

            <div
              className={state.showReviewPrompt ? \\"bg-primary\\" : \\"bg-secondary\\"}
            >
              <div>
                N:
                {index}
              </div>

              <div>{review.author}</div>

              <div>{review.reviewMessage}</div>
            </div>
          </div>
        ))}
      </div>
      <style>{\`.input-31d03b9e { 
display: block; }.textarea-31d03b9e { 
display: block; }.button-31d03b9e { 
display: block; }.review-31d03b9e { 
margin: 10px;
padding: 10px;
background: white;
display: flex;
border-radius: 5px;
box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1); }.img-31d03b9e { 
height: 30px;
width: 30px;
margin-right: 10px; }\`}</style>
    </>
  );
}
"
`;

exports[`RSC > Javascript Test > Submit 1`] = `
"import * as React from \\"react\\";

export interface ButtonProps {
  attributes?: any;
  text?: string;
}

export default function SubmitButton(props: ButtonProps) {
  const _context = { ...props[\\"_context\\"] };

  return (
    <button type=\\"submit\\" {...props.attributes}>
      {props.text}
    </button>
  );
}
"
`;

exports[`RSC > Javascript Test > Text 1`] = `
"import * as React from \\"react\\";

export interface TextProps {
  attributes?: any;
  rtlMode: boolean;
  text?: string;
  content?: string;
  builderBlock?: any;
}

import { Builder } from \\"@builder.io/sdk\\";

export default function Text(props: TextProps) {
  const _context = { ...props[\\"_context\\"] };

  const state = { name: \\"Decadef20\\" };

  return (
    <div
      contentEditable={allowEditingText || undefined}
      data-name={{
        test: state.name || \\"any name\\",
      }}
      dangerouslySetInnerHTML={{
        __html:
          props.text ||
          props.content ||
          state.name ||
          '<p class=\\"text-lg\\">my name</p>',
      }}
    />
  );
}
"
`;

exports[`RSC > Javascript Test > Textarea 1`] = `
"import * as React from \\"react\\";

export interface TextareaProps {
  attributes?: any;
  name?: string;
  value?: string;
  defaultValue?: string;
  placeholder?: string;
}

export default function Textarea(props: TextareaProps) {
  const _context = { ...props[\\"_context\\"] };

  return (
    <textarea
      {...props.attributes}
      placeholder={props.placeholder}
      name={props.name}
      value={props.value}
      defaultValue={props.defaultValue}
    />
  );
}
"
`;

exports[`RSC > Javascript Test > Video 1`] = `
"import * as React from \\"react\\";

export interface VideoProps {
  attributes?: any;
  video?: string;
  autoPlay?: boolean;
  controls?: boolean;
  muted?: boolean;
  loop?: boolean;
  playsInline?: boolean;
  aspectRatio?: number;
  width?: number;
  height?: number;
  fit?: \\"contain\\" | \\"cover\\" | \\"fill\\";
  position?:
    | \\"center\\"
    | \\"top\\"
    | \\"left\\"
    | \\"right\\"
    | \\"bottom\\"
    | \\"top left\\"
    | \\"top right\\"
    | \\"bottom left\\"
    | \\"bottom right\\";
  posterImage?: string;
  lazyLoad?: boolean;
}

export default function Video(props: VideoProps) {
  const _context = { ...props[\\"_context\\"] };

  return (
    <video
      preload=\\"none\\"
      {...props.attributes}
      style={{
        width: \\"100%\\",
        height: \\"100%\\",
        ...props.attributes?.style,
        objectFit: props.fit,
        objectPosition: props.position,
        // Hack to get object fit to work as expected and
        // not have the video overflow
        borderRadius: 1,
      }}
      key={props.video || \\"no-src\\"}
      poster={props.posterImage}
      autoplay={props.autoPlay}
      muted={props.muted}
      controls={props.controls}
      loop={props.loop}
    />
  );
}
"
`;

exports[`RSC > Javascript Test > arrowFunctionInUseStore 1`] = `
"import * as React from \\"react\\";

export default function MyComponent(props: any) {
  const _context = { ...props[\\"_context\\"] };

  const state = {
    name: \\"steve\\",
    setName(value) {
      state.name = value;
    },
    updateNameWithArrowFn(value) {
      state.name = value;
    },
  };

  return (
    <div>
      Hello
      {state.name}
    </div>
  );
}
"
`;

exports[`RSC > Javascript Test > basicForwardRef 1`] = `
"import * as React from \\"react\\";

export interface Props {
  showInput: boolean;
  inputRef: HTMLInputElement;
}

export default function MyBasicForwardRefComponent(props: Props) {
  const _context = { ...props[\\"_context\\"] };

  const state = { name: \\"PatrickJS\\" };

  return (
    <>
      <div>
        <input className=\\"input-49d4be1e\\" value={state.name} />
      </div>
      <style>{\`.input-49d4be1e { 
color: red; }\`}</style>
    </>
  );
}
"
`;

exports[`RSC > Javascript Test > basicForwardRefMetadata 1`] = `
"import * as React from \\"react\\";

export interface Props {
  showInput: boolean;
  inputRef: HTMLInputElement;
}

export default forwardRef(function MyBasicForwardRefComponent(
  props: Props,
  inputRef
) {
  const _context = { ...props[\\"_context\\"] };

  const state = { name: \\"PatrickJS\\" };

  return (
    <>
      <div>
        <input className=\\"input-110f222e\\" value={state.name} />
      </div>
      <style>{\`.input-110f222e { 
color: red; }\`}</style>
    </>
  );
});
"
`;

exports[`RSC > Javascript Test > basicOnUpdateReturn 1`] = `
"import * as React from \\"react\\";

export default function MyBasicOnUpdateReturnComponent(props: any) {
  const _context = { ...props[\\"_context\\"] };

  const state = { name: \\"PatrickJS\\" };

  return (
    <div>
      Hello!
      {state.name}
    </div>
  );
}
"
`;

exports[`RSC > Javascript Test > class + ClassName + css 1`] = `
"import * as React from \\"react\\";

export default function MyBasicComponent(props: any) {
  const _context = { ...props[\\"_context\\"] };

  return (
    <>
      <div className=\\"test2 test div-3e2c6b1c\\">
        Hello! I can run in React, Vue, Solid, or Liquid!
      </div>
      <style>{\`.div-3e2c6b1c { 
padding: 10px; }\`}</style>
    </>
  );
}
"
`;

exports[`RSC > Javascript Test > class + css 1`] = `
"import * as React from \\"react\\";

export default function MyBasicComponent(props: any) {
  const _context = { ...props[\\"_context\\"] };

  return (
    <>
      <div className=\\"test div-2d73eb46\\">
        Hello! I can run in React, Vue, Solid, or Liquid!
      </div>
      <style>{\`.div-2d73eb46 { 
padding: 10px; }\`}</style>
    </>
  );
}
"
`;

exports[`RSC > Javascript Test > className + css 1`] = `
"import * as React from \\"react\\";

export default function MyBasicComponent(props: any) {
  const _context = { ...props[\\"_context\\"] };

  return (
    <>
      <div className=\\"test div-2d73eb46\\">
        Hello! I can run in React, Vue, Solid, or Liquid!
      </div>
      <style>{\`.div-2d73eb46 { 
padding: 10px; }\`}</style>
    </>
  );
}
"
`;

exports[`RSC > Javascript Test > className 1`] = `
"import * as React from \\"react\\";

type Props = {
  [key: string]: string | JSX.Element;
  slotTesting: JSX.Element;
};

export default function ClassNameCode(props: Props) {
  const _context = { ...props[\\"_context\\"] };

  const state = { bindings: \\"a binding\\" };

  return (
    <div>
      <div className=\\"no binding\\">Without Binding</div>

      <div className={state.bindings}>With binding</div>
    </div>
  );
}
"
`;

exports[`RSC > Javascript Test > classState 1`] = `
"import * as React from \\"react\\";

export default function MyBasicComponent(props: any) {
  const _context = { ...props[\\"_context\\"] };

  const state = {
    classState: \\"testClassName\\",
    styleState: {
      color: \\"red\\",
    },
  };

  return (
    <>
      <div
        className={state.classState + \\" div-788e1d1e\\"}
        style={state.styleState}
      >
        Hello! I can run in React, Vue, Solid, or Liquid!
      </div>
      <style>{\`.div-788e1d1e { 
padding: 10px; }\`}</style>
    </>
  );
}
"
`;

exports[`RSC > Javascript Test > componentWithContext 1`] = `
"import * as React from \\"react\\";

export interface ComponentWithContextProps {
  content: string;
}

import Context1 from \\"@dummy/1\\";
import Context2 from \\"@dummy/2\\";

export default function ComponentWithContext(props: ComponentWithContextProps) {
  const _context = { ...props[\\"_context\\"] };

  const foo = _context[\\"Context1\\"];

  _context.Context1 = {
    foo: \\"bar\\",
    content() {
      return props.content;
    },
  };

  _context.Context2 = { bar: \\"baz\\" };

  return <>{foo.value}</>;
}
"
`;

exports[`RSC > Javascript Test > contentState 1`] = `
"import * as React from \\"react\\";
import BuilderContext from \\"@dummy/context.lite\\";

export default function RenderContent(props: any) {
  const _context = { ...props[\\"_context\\"] };

  _context.BuilderContext = {
    content: props.content,
    registeredComponents: props.customComponents,
  };

  return <div>setting context</div>;
}
"
`;

exports[`RSC > Javascript Test > defaultProps 1`] = `
"import * as React from \\"react\\";

export interface ButtonProps {
  attributes?: any;
  text?: string;
  link?: string;
  openLinkInNewTab?: boolean;
}

export default function Button(props: ButtonProps) {
  const _context = { ...props[\\"_context\\"] };

  return (
    <div>
      {props.link ? (
        <>
          <a
            {...props.attributes}
            href={props.link}
            target={props.openLinkInNewTab ? \\"_blank\\" : undefined}
          >
            {props.text}
          </a>
        </>
      ) : null}

      {!props.link ? (
        <>
          <button type=\\"button\\" {...props.attributes}>
            {props.text}
          </button>
        </>
      ) : null}
    </div>
  );
}

Button.defaultProps = {
  text: \\"default text\\",
  link: \\"https://builder.io/\\",
  openLinkInNewTab: false,
};
"
`;

exports[`RSC > Javascript Test > defaultPropsOutsideComponent 1`] = `
"import * as React from \\"react\\";

export interface ButtonProps {
  attributes?: any;
  text?: string;
  link?: string;
  openLinkInNewTab?: boolean;
}

export default function Button(props: ButtonProps) {
  const _context = { ...props[\\"_context\\"] };

  return (
    <div>
      {props.link ? (
        <>
          <a
            {...props.attributes}
            href={props.link}
            target={props.openLinkInNewTab ? \\"_blank\\" : undefined}
          >
            {props.text}
          </a>
        </>
      ) : null}

      {!props.link ? (
        <>
          <button type=\\"button\\" {...props.attributes}>
            {props.text}
          </button>
        </>
      ) : null}
    </div>
  );
}

Button.defaultProps = {
  text: \\"default text\\",
  link: \\"https://builder.io/\\",
  openLinkInNewTab: false,
};
"
`;

exports[`RSC > Javascript Test > defaultValsWithTypes 1`] = `
"import * as React from \\"react\\";

type Props = {
  name: string;
};

const DEFAULT_VALUES: Props = {
  name: \\"Sami\\",
};

export default function ComponentWithTypes(props: Props) {
  const _context = { ...props[\\"_context\\"] };

  return (
    <div>
      {\\" \\"}
      Hello
      {props.name || DEFAULT_VALUES.name}
    </div>
  );
}
"
`;

exports[`RSC > Javascript Test > expressionState 1`] = `
"import * as React from \\"react\\";

export default function MyComponent(props: any) {
  const _context = { ...props[\\"_context\\"] };

  const state = {
    refToUse: !(props.componentRef instanceof Function)
      ? props.componentRef
      : null,
  };

  return <div>{state.refToUse}</div>;
}
"
`;

exports[`RSC > Javascript Test > import types 1`] = `
"import * as React from \\"react\\";

type RenderContentProps = {
  options?: GetContentOptions;
  content: BuilderContent;
  renderContentProps: RenderBlockProps;
};
import RenderBlock from \\"./builder-render-block.raw\\";

export default function RenderContent(props: RenderContentProps) {
  const _context = { ...props[\\"_context\\"] };

  const state = {
    getRenderContentProps(block, index) {
      return {
        block: block,
        index: index,
      };
    },
  };

  return (
    <RenderBlock
      {...state.getRenderContentProps(props.renderContentProps.block, 0)}
      _context={_context}
    />
  );
}
"
`;

exports[`RSC > Javascript Test > multipleOnUpdate 1`] = `
"import * as React from \\"react\\";

export default function MultipleOnUpdate(props: any) {
  const _context = { ...props[\\"_context\\"] };

  return <div />;
}
"
`;

exports[`RSC > Javascript Test > multipleOnUpdateWithDeps 1`] = `
"import * as React from \\"react\\";

export default function MultipleOnUpdateWithDeps(props: any) {
  const _context = { ...props[\\"_context\\"] };

  const state = { a: \\"a\\", b: \\"b\\", c: \\"c\\", d: \\"d\\" };

  return <div />;
}
"
`;

exports[`RSC > Javascript Test > multipleSpreads 1`] = `
"import * as React from \\"react\\";

export default function MyBasicComponent(props: any) {
  const _context = { ...props[\\"_context\\"] };

  const state = {
    attrs: {
      hello: \\"world\\",
    },
  };

  return <input {...state.attrs} {...props} />;
}
"
`;

exports[`RSC > Javascript Test > nestedShow 1`] = `
"import * as React from \\"react\\";

interface Props {
  conditionA: boolean;
  conditionB: boolean;
}

export default function NestedShow(props: Props) {
  const _context = { ...props[\\"_context\\"] };

  return (
    <>
      {props.conditionA ? (
        <>
          {!props.conditionB ? (
            <>
              <div>if condition A and condition B</div>
            </>
          ) : (
            <div>else-condition-B</div>
          )}
        </>
      ) : (
        <div>else-condition-A</div>
      )}
    </>
  );
}
"
`;

exports[`RSC > Javascript Test > nestedStyles 1`] = `
"import * as React from \\"react\\";

export default function NestedStyles(props: any) {
  const _context = { ...props[\\"_context\\"] };

  return (
    <>
      <div className=\\"div-28db5af5\\">Hello world</div>
      <style>{\`.div-28db5af5 { 
display: flex;
foo: var(--bar); }@media (max-width: env(--mobile)) { .div-28db5af5 { 
display: block; } }.div-28db5af5:hover { 
display: flex; }.div-28db5af5 .nested-selector { 
display: grid; }\`}</style>
    </>
  );
}
"
`;

exports[`RSC > Javascript Test > onInit & onMount 1`] = `
"import * as React from \\"react\\";
import { useEffect } from \\"react\\";

export default function OnInit(props: any) {
  const _context = { ...props[\\"_context\\"] };

  useEffect(() => {
    console.log(\\"onInit\\");
  });

  return <div />;
}
"
`;

exports[`RSC > Javascript Test > onInit 1`] = `
"import * as React from \\"react\\";
import { useEffect } from \\"react\\";

type Props = {
  name: string;
};

export const defaultValues = {
  name: \\"PatrickJS\\",
};

export default function OnInit(props: Props) {
  const _context = { ...props[\\"_context\\"] };

  const state = { name: \\"\\" };

  useEffect(() => {
    state.name = defaultValues.name || props.name;
    console.log(\\"set defaults with props\\");
  });

  return (
    <div>
      Default name defined by parent
      {state.name}
    </div>
  );
}
"
`;

exports[`RSC > Javascript Test > onMount 1`] = `
"import * as React from \\"react\\";

export default function Comp(props: any) {
  const _context = { ...props[\\"_context\\"] };

  return <div />;
}
"
`;

exports[`RSC > Javascript Test > onUpdate 1`] = `
"import * as React from \\"react\\";

export default function OnUpdate(props: any) {
  const _context = { ...props[\\"_context\\"] };

  return <div />;
}
"
`;

exports[`RSC > Javascript Test > onUpdateWithDeps 1`] = `
"import * as React from \\"react\\";

type Props = {
  size: string;
};

export default function OnUpdateWithDeps(props: Props) {
  const _context = { ...props[\\"_context\\"] };

  const state = { a: \\"a\\", b: \\"b\\" };

  return <div />;
}
"
`;

exports[`RSC > Javascript Test > preserveExportOrLocalStatement 1`] = `
"import * as React from \\"react\\";

type Types = {
  s: any[];
};
interface IPost {
  len: number;
}
export interface MyBasicComponentProps {
  id: string;
}

const b = 3;
const foo = () => {};
export const a = 3;
export const bar = () => {};
export function run<T>(value: T) {}

export default function MyBasicComponent(props: MyBasicComponentProps) {
  const _context = { ...props[\\"_context\\"] };

  return <div />;
}
"
`;

exports[`RSC > Javascript Test > preserveTyping 1`] = `
"import * as React from \\"react\\";

export type A = \\"test\\";
export interface C {
  n: \\"test\\";
}
type B = \\"test2\\";
interface D {
  n: \\"test\\";
}
export interface MyBasicComponentProps {
  name: string;
  age?: number;
}

export default function MyBasicComponent(props: MyBasicComponentProps) {
  const _context = { ...props[\\"_context\\"] };

  return (
    <div>
      Hello! I can run in React, Vue, Solid, or Liquid!
      {props.name}
    </div>
  );
}
"
`;

exports[`RSC > Javascript Test > propsDestructure 1`] = `
"import * as React from \\"react\\";

type Props = {
  children: any;
  type: string;
};

export default function MyBasicComponent(props: Props) {
  const _context = { ...props[\\"_context\\"] };

  const state = { name: \\"Decadef20\\" };

  return (
    <div>
      {props.children}
      {props.type}
      Hello! I can run in React, Vue, Solid, or Liquid!
    </div>
  );
}
"
`;

exports[`RSC > Javascript Test > propsInterface 1`] = `
"import * as React from \\"react\\";

interface Person {
  name: string;
  age?: number;
}

export default function MyBasicComponent(props: Person | never) {
  const _context = { ...props[\\"_context\\"] };

  return (
    <div>
      Hello! I can run in React, Vue, Solid, or Liquid!
      {props.name}
    </div>
  );
}
"
`;

exports[`RSC > Javascript Test > propsType 1`] = `
"import * as React from \\"react\\";

type Person = {
  name: string;
  age?: number;
};

export default function MyBasicComponent(props: Person) {
  const _context = { ...props[\\"_context\\"] };

  return (
    <div>
      Hello! I can run in React, Vue, Solid, or Liquid!
      {props.name}
    </div>
  );
}
"
`;

exports[`RSC > Javascript Test > renderContentExample 1`] = `
"import * as React from \\"react\\";

type Props = {
  customComponents: string[];
  content: {
    blocks: any[];
    id: string;
  };
};
import {
  sendComponentsToVisualEditor,
  dispatchNewContentToVisualEditor,
  trackClick,
} from \\"@dummy/injection-js\\";
import BuilderContext from \\"@dummy/context.lite\\";
import RenderBlocks from \\"@dummy/RenderBlocks.lite.tsx\\";

export default function RenderContent(props: Props) {
  const _context = { ...props[\\"_context\\"] };

  _context.BuilderContext = {
    get content() {
      return 3;
    },
    get registeredComponents() {
      return 4;
    },
  };

  return (
    <>
      <div className=\\"div-0c70c6dc\\">
        <RenderBlocks blocks={props.content.blocks} _context={_context} />
      </div>
      <style>{\`.div-0c70c6dc { 
display: flex;
flex-direction: columns; }\`}</style>
    </>
  );
}
"
`;

exports[`RSC > Javascript Test > rootFragmentMultiNode 1`] = `
"import * as React from \\"react\\";

export interface ButtonProps {
  attributes?: any;
  text?: string;
  link?: string;
  openLinkInNewTab?: boolean;
}

export default function Button(props: ButtonProps) {
  const _context = { ...props[\\"_context\\"] };

  return (
    <>
      {props.link ? (
        <>
          <a
            {...props.attributes}
            href={props.link}
            target={props.openLinkInNewTab ? \\"_blank\\" : undefined}
          >
            {props.text}
          </a>
        </>
      ) : null}

      {!props.link ? (
        <>
          <button type=\\"button\\" {...props.attributes}>
            {props.text}
          </button>
        </>
      ) : null}
    </>
  );
}
"
`;

exports[`RSC > Javascript Test > rootShow 1`] = `
"import * as React from \\"react\\";

export interface RenderStylesProps {
  foo: string;
}

export default function RenderStyles(props: RenderStylesProps) {
  const _context = { ...props[\\"_context\\"] };

  return (
    <>
      {props.foo === \\"bar\\" ? (
        <>
          <div>Bar</div>
        </>
      ) : (
        <div>Foo</div>
      )}
    </>
  );
}
"
`;

exports[`RSC > Javascript Test > self-referencing component 1`] = `
"import * as React from \\"react\\";

export default function MyComponent(props: any) {
  const _context = { ...props[\\"_context\\"] };

  return (
    <div>
      {props.name}

      {props.name === \\"Batman\\" ? (
        <>
          <MyComponent name=\\"Bruce Wayne\\" _context={_context} />
        </>
      ) : null}
    </div>
  );
}
"
`;

exports[`RSC > Javascript Test > self-referencing component with children 1`] = `
"import * as React from \\"react\\";

export default function MyComponent(props: any) {
  const _context = { ...props[\\"_context\\"] };

  return (
    <div>
      {props.name}

      {props.children}

      {props.name === \\"Batman\\" ? (
        <>
          <MyComponent name=\\"Bruce\\" _context={_context}>
            <div>Wayne</div>
          </MyComponent>
        </>
      ) : null}
    </div>
  );
}
"
`;

exports[`RSC > Javascript Test > showWithFor 1`] = `
"import * as React from \\"react\\";

interface Props {
  conditionA: boolean;
  items: string[];
}

export default function NestedShow(props: Props) {
  const _context = { ...props[\\"_context\\"] };

  return (
    <>
      {props.conditionA ? (
        <>
          {props.items?.map((item, idx) => (
            <div key={idx}>{item}</div>
          ))}
        </>
      ) : (
        <div>else-condition-A</div>
      )}
    </>
  );
}
"
`;

exports[`RSC > Javascript Test > spreadAttrs 1`] = `
"import * as React from \\"react\\";

export default function MyBasicComponent(props: any) {
  const _context = { ...props[\\"_context\\"] };

  return <input {...attrs} />;
}
"
`;

exports[`RSC > Javascript Test > spreadNestedProps 1`] = `
"import * as React from \\"react\\";

export default function MyBasicComponent(props: any) {
  const _context = { ...props[\\"_context\\"] };

  return <input {...props.nested} />;
}
"
`;

exports[`RSC > Javascript Test > spreadProps 1`] = `
"import * as React from \\"react\\";

export default function MyBasicComponent(props: any) {
  const _context = { ...props[\\"_context\\"] };

  return <input {...props} />;
}
"
`;

exports[`RSC > Javascript Test > subComponent 1`] = `
"import * as React from \\"react\\";
import Foo from \\"./foo-sub-component.lite\\";

export default function SubComponent(props: any) {
  const _context = { ...props[\\"_context\\"] };

  return <Foo _context={_context} />;
}
"
`;

exports[`RSC > Javascript Test > typeDependency 1`] = `
"import * as React from \\"react\\";
import type { Foo } from \\"./foo-type\\";
import type { Foo as Foo2 } from \\"./type-export\\";
export type TypeDependencyProps = {
  foo: Foo;
  foo2: Foo2;
};

export default function TypeDependency(props: TypeDependencyProps) {
  const _context = { ...props[\\"_context\\"] };

  return <div>{props.foo}</div>;
}
"
`;

exports[`RSC > Javascript Test > use-style 1`] = `
"import * as React from \\"react\\";

export default function MyComponent(props: any) {
  const _context = { ...props[\\"_context\\"] };

  return (
    <>
      <button type=\\"button\\">Button</button>
      <style>{\`

      button {
          background: blue;
          color: white;
          font-size: 12px;
          outline: 1px solid black;
      }
  \`}</style>
    </>
  );
}
"
`;

exports[`RSC > Javascript Test > use-style-and-css 1`] = `
"import * as React from \\"react\\";

export default function MyComponent(props: any) {
  const _context = { ...props[\\"_context\\"] };

  return (
    <>
      <button type=\\"button\\" className=\\"button-07aeef55\\">
        Button
      </button>
      <style>{\`.button-07aeef55 { 
background: blue;
color: white; }

      button {
          font-size: 12px;
          outline: 1px solid black;
      }
  \`}</style>
    </>
  );
}
"
`;

exports[`RSC > Javascript Test > use-style-outside-component 1`] = `
"import * as React from \\"react\\";

export default function MyComponent(props: any) {
  const _context = { ...props[\\"_context\\"] };

  return (
    <>
      <button type=\\"button\\">Button</button>
      <style>{\`

button {
    background: blue;
    color: white;
    font-size: 12px;
    outline: 1px solid black;
}
\`}</style>
    </>
  );
}
"
`;

exports[`RSC > Remove Internal mitosis package 1`] = `
"import * as React from \\"react\\";

export default function MyBasicComponent(props: any) {
  const _context = { ...props[\\"_context\\"] };

  const state = { name: \\"PatrickJS\\" };

  return (
    <div>
      Hello
      {state.name}! I can run in React, Qwik, Vue, Solid, or Liquid!
    </div>
  );
}
"
`;

exports[`RSC > Typescript Test > AdvancedRef 1`] = `
"import * as React from \\"react\\";

export interface Props {
  showInput: boolean;
}

export default function MyBasicRefComponent(props: Props) {
  const _context = { ...props[\\"_context\\"] };

  const state = {
    name: \\"PatrickJS\\",
    onBlur: function onBlur() {
      // Maintain focus
      inputRef.focus();
    },
    lowerCaseName: function lowerCaseName() {
      return state.name.toLowerCase();
    },
  };

  return (
    <>
      <div>
        {props.showInput ? (
          <>
            <input className=\\"input-9fa26074\\" value={state.name} />

            <label for=\\"cars\\">Choose a car:</label>

            <select name=\\"cars\\" id=\\"cars\\">
              <option value=\\"supra\\">GR Supra</option>

              <option value=\\"86\\">GR 86</option>
            </select>
          </>
        ) : null}
        Hello
        {state.lowerCaseName()}! I can run in React, Qwik, Vue, Solid, or Web
        Component!
      </div>
      <style>{\`.input-9fa26074 { 
color: red; }\`}</style>
    </>
  );
}
"
`;

exports[`RSC > Typescript Test > Basic 1`] = `
"import * as React from \\"react\\";

export interface MyBasicComponentProps {
  id: string;
}

export const DEFAULT_VALUES = {
  name: \\"Steve\\",
};

export default function MyBasicComponent(props: MyBasicComponentProps) {
  const _context = { ...props[\\"_context\\"] };

  const state = {
    name: \\"Steve\\",
    underscore_fn_name() {
      return \\"bar\\";
    },
    age: 1,
    sports: [\\"\\"],
  };

  return (
    <>
      <div className=\\"test div-1b7dd817\\">
        <input value={DEFAULT_VALUES.name || state.name} />
        Hello! I can run in React, Vue, Solid, or Liquid!
      </div>
      <style>{\`.div-1b7dd817 { 
padding: 10px; }\`}</style>
    </>
  );
}
"
`;

exports[`RSC > Typescript Test > Basic Context 1`] = `
"import * as React from \\"react\\";
import { useEffect } from \\"react\\";
import { Injector, createInjector, MyService } from \\"@dummy/injection-js\\";

export default function MyBasicComponent(props: any) {
  const _context = { ...props[\\"_context\\"] };

  const state = {
    name: \\"PatrickJS\\",
    onChange: function onChange() {
      const change = myService.method(\\"change\\");
      console.log(change);
    },
  };

  const myService = _context[\\"MyService\\"];

  useEffect(() => {
    const hi = myService.method(\\"hi\\");
    console.log(hi);
  });

  return (
    <div>
      {myService.method(\\"hello\\") + state.name}
      Hello! I can run in React, Vue, Solid, or Liquid!
      <input />
    </div>
  );
}
"
`;

exports[`RSC > Typescript Test > Basic OnMount Update 1`] = `
"import * as React from \\"react\\";
import { useEffect } from \\"react\\";

export interface Props {
  hi: string;
  bye: string;
}

export default function MyBasicOnMountUpdateComponent(props: Props) {
  const _context = { ...props[\\"_context\\"] };

  const state = { name: \\"PatrickJS\\", names: [\\"Steve\\", \\"PatrickJS\\"] };

  useEffect(() => {
    state.name = \\"PatrickJS onInit\\" + props.hi;
  });

  return (
    <div>
      Hello
      {state.name}
    </div>
  );
}
"
`;

exports[`RSC > Typescript Test > Basic Outputs 1`] = `
"import * as React from \\"react\\";

export default function MyBasicOutputsComponent(props: any) {
  const _context = { ...props[\\"_context\\"] };

  const state = { name: \\"PatrickJS\\" };

  return <div />;
}
"
`;

exports[`RSC > Typescript Test > Basic Outputs Meta 1`] = `
"import * as React from \\"react\\";

export default function MyBasicOutputsComponent(props: any) {
  const _context = { ...props[\\"_context\\"] };

  const state = { name: \\"PatrickJS\\" };

  return <div />;
}
"
`;

exports[`RSC > Typescript Test > BasicAttribute 1`] = `
"import * as React from \\"react\\";

export default function MyComponent(props: any) {
  const _context = { ...props[\\"_context\\"] };

  return <input autoCapitalize=\\"on\\" autoComplete=\\"on\\" spellCheck={true} />;
}
"
`;

exports[`RSC > Typescript Test > BasicBooleanAttribute 1`] = `
"import * as React from \\"react\\";

type Props = {
  children: any;
  type: string;
};
import MyBooleanAttributeComponent from \\"./basic-boolean-attribute-component.raw\\";

export default function MyBooleanAttribute(props: Props) {
  const _context = { ...props[\\"_context\\"] };

  return (
    <div>
      {props.children}

      {props.type}

      <MyBooleanAttributeComponent toggle={true} _context={_context} />

      <MyBooleanAttributeComponent toggle={true} _context={_context} />

      <MyBooleanAttributeComponent list={null} _context={_context} />
    </div>
  );
}
"
`;

exports[`RSC > Typescript Test > BasicChildComponent 1`] = `
"import * as React from \\"react\\";
import MyBasicComponent from \\"./basic.raw\\";
import MyBasicOnMountUpdateComponent from \\"./basic-onMount-update.raw\\";

export default function MyBasicChildComponent(props: any) {
  const _context = { ...props[\\"_context\\"] };

  const state = { name: \\"Steve\\", dev: \\"PatrickJS\\" };

  return (
    <div>
      <MyBasicComponent id={state.dev} _context={_context} />

      <div>
        <MyBasicOnMountUpdateComponent
          hi={state.name}
          bye={state.dev}
          _context={_context}
        />
      </div>
    </div>
  );
}
"
`;

exports[`RSC > Typescript Test > BasicFor 1`] = `
"import * as React from \\"react\\";

export default function MyBasicForComponent(props: any) {
  const _context = { ...props[\\"_context\\"] };

  const state = { name: \\"PatrickJS\\", names: [\\"Steve\\", \\"PatrickJS\\"] };

  return (
    <div>
      {state.names?.map((person) => (
        <>
          <input value={state.name} />
          Hello
          {person}! I can run in Qwik, Web Component, React, Vue, Solid, or
          Liquid!
        </>
      ))}
    </div>
  );
}
"
`;

exports[`RSC > Typescript Test > BasicRef 1`] = `
"import * as React from \\"react\\";

export interface Props {
  showInput: boolean;
}

export default function MyBasicRefComponent(props: Props) {
  const _context = { ...props[\\"_context\\"] };

  const state = {
    name: \\"PatrickJS\\",
    onBlur: function onBlur() {
      // Maintain focus
      inputRef.focus();
    },
    lowerCaseName: function lowerCaseName() {
      return state.name.toLowerCase();
    },
  };

  return (
    <>
      <div>
        {props.showInput ? (
          <>
            <input className=\\"input-9fa26074\\" value={state.name} />

            <label for=\\"cars\\">Choose a car:</label>

            <select name=\\"cars\\" id=\\"cars\\">
              <option value=\\"supra\\">GR Supra</option>

              <option value=\\"86\\">GR 86</option>
            </select>
          </>
        ) : null}
        Hello
        {state.lowerCaseName()}! I can run in React, Qwik, Vue, Solid, or Web
        Component!
      </div>
      <style>{\`.input-9fa26074 { 
color: red; }\`}</style>
    </>
  );
}
"
`;

exports[`RSC > Typescript Test > BasicRefAssignment 1`] = `
"import * as React from \\"react\\";

export interface Props {
  showInput: boolean;
}

export default function MyBasicRefAssignmentComponent(props: Props) {
  const _context = { ...props[\\"_context\\"] };

  const state = {
    handlerClick: function handlerClick(event) {
      event.preventDefault();
      console.log(\\"current value\\", holdValueRef);
      holdValueRef = holdValueRef + \\"JS\\";
    },
  };

  return (
    <div>
      <button>Click</button>
    </div>
  );
}
"
`;

exports[`RSC > Typescript Test > BasicRefPrevious 1`] = `
"import * as React from \\"react\\";

export interface Props {
  showInput: boolean;
}

export function usePrevious<T>(value: T) {
  // The ref object is a generic container whose current property is mutable ...
  // ... and can hold any value, similar to an instance property on a class
  let ref = useRef<T>(null); // Store current value in ref

  onUpdate(() => {
    ref = value;
  }, [value]); // Only re-run if value changes
  // Return previous value (happens before update in useEffect above)

  return ref;
}

export default function MyPreviousComponent(props: Props) {
  const _context = { ...props[\\"_context\\"] };

  const state = { count: 0 };

  return (
    <div>
      <h1>
        Now:
        {state.count}, before:
        {prevCount}
      </h1>

      <button>Increment</button>
    </div>
  );
}
"
`;

exports[`RSC > Typescript Test > Button 1`] = `
"import * as React from \\"react\\";

export interface ButtonProps {
  attributes?: any;
  text?: string;
  link?: string;
  openLinkInNewTab?: boolean;
}

export default function Button(props: ButtonProps) {
  const _context = { ...props[\\"_context\\"] };

  return (
    <div>
      {props.link ? (
        <>
          <a
            {...props.attributes}
            href={props.link}
            target={props.openLinkInNewTab ? \\"_blank\\" : undefined}
          >
            {props.text}
          </a>
        </>
      ) : null}

      {!props.link ? (
        <>
          <button type=\\"button\\" {...props.attributes}>
            {props.text}
          </button>
        </>
      ) : null}
    </div>
  );
}
"
`;

exports[`RSC > Typescript Test > Columns 1`] = `
"import * as React from \\"react\\";

type Column = {
  content: any; // TODO: Implement this when support for dynamic CSS lands

  width?: number;
};
export interface ColumnProps {
  columns?: Column[]; // TODO: Implement this when support for dynamic CSS lands

  space?: number; // TODO: Implement this when support for dynamic CSS lands

  stackColumnsAt?: \\"tablet\\" | \\"mobile\\" | \\"never\\"; // TODO: Implement this when support for dynamic CSS lands

  reverseColumnsWhenStacked?: boolean;
}

export default function Column(props: ColumnProps) {
  const _context = { ...props[\\"_context\\"] };

  const state = {
    getColumns() {
      return props.columns || [];
    },
    getGutterSize() {
      return typeof props.space === \\"number\\" ? props.space || 0 : 20;
    },
    getWidth(index) {
      const columns = state.getColumns();
      return (columns[index] && columns[index].width) || 100 / columns.length;
    },
    getColumnCssWidth(index) {
      const columns = state.getColumns();
      const gutterSize = state.getGutterSize();
      const subtractWidth =
        (gutterSize * (columns.length - 1)) / columns.length;
      return \`calc(\${state.getWidth(index)}% - \${subtractWidth}px)\`;
    },
  };

  return (
    <>
      <div className=\\"builder-columns div-47a9ecfb\\">
        {props.columns?.map((column, index) => (
          <div className=\\"builder-column div-47a9ecfb-2\\">
            {column.content}

            {index}
          </div>
        ))}
      </div>
      <style>{\`.div-47a9ecfb { 
display: flex;
flex-direction: column;
align-items: stretch;
line-height: normal; }@media (max-width: 999px) { .div-47a9ecfb { 
flex-direction: row; } }@media (max-width: 639px) { .div-47a9ecfb { 
flex-direction: row-reverse; } }.div-47a9ecfb-2 { 
flex-grow: 1; }\`}</style>
    </>
  );
}
"
`;

exports[`RSC > Typescript Test > ContentSlotHtml 1`] = `
"import * as React from \\"react\\";

type Props = {
  [key: string]: string | JSX.Element;
  slotTesting: JSX.Element;
};

export default function ContentSlotCode(props: Props) {
  const _context = { ...props[\\"_context\\"] };

  return (
    <div>
      {props.slotTesting}

      <div>
        <hr />
      </div>

      <div slotContext={_context}></div>
    </div>
  );
}
"
`;

exports[`RSC > Typescript Test > ContentSlotJSX 1`] = `
"import * as React from \\"react\\";

type Props = {
  [key: string]: string | JSX.Element;
};

export default function ContentSlotJsxCode(props: Props) {
  const _context = { ...props[\\"_context\\"] };

  return (
    <div>
      {props.slotTesting ? (
        <>
          <div>{props.slotTesting}</div>
        </>
      ) : null}

      <div>
        <hr />
      </div>

      <div>{props.children}</div>
    </div>
  );
}
"
`;

exports[`RSC > Typescript Test > CustomCode 1`] = `
"import * as React from \\"react\\";

export interface CustomCodeProps {
  code: string;
  replaceNodes?: boolean;
}

export default function CustomCode(props: CustomCodeProps) {
  const _context = { ...props[\\"_context\\"] };

  const state = {
    scriptsInserted: [],
    scriptsRun: [],
    findAndRunScripts() {
      // TODO: Move this function to standalone one in '@builder.io/utils'
      if (elem && typeof window !== \\"undefined\\") {
        /** @type {HTMLScriptElement[]} */
        const scripts = elem.getElementsByTagName(\\"script\\");

        for (let i = 0; i < scripts.length; i++) {
          const script = scripts[i];

          if (script.src) {
            if (state.scriptsInserted.includes(script.src)) {
              continue;
            }

            state.scriptsInserted.push(script.src);
            const newScript = document.createElement(\\"script\\");
            newScript.async = true;
            newScript.src = script.src;
            document.head.appendChild(newScript);
          } else if (
            !script.type ||
            [
              \\"text/javascript\\",
              \\"application/javascript\\",
              \\"application/ecmascript\\",
            ].includes(script.type)
          ) {
            if (state.scriptsRun.includes(script.innerText)) {
              continue;
            }

            try {
              state.scriptsRun.push(script.innerText);
              new Function(script.innerText)();
            } catch (error) {
              console.warn(\\"\`CustomCode\`: Error running script:\\", error);
            }
          }
        }
      }
    },
  };

  return (
    <div
      className={
        \\"builder-custom-code\\" + (props.replaceNodes ? \\" replace-nodes\\" : \\"\\")
      }
      dangerouslySetInnerHTML={{ __html: props.code }}
    />
  );
}
"
`;

exports[`RSC > Typescript Test > Embed 1`] = `
"import * as React from \\"react\\";

export interface CustomCodeProps {
  code: string;
  replaceNodes?: boolean;
}

export default function CustomCode(props: CustomCodeProps) {
  const _context = { ...props[\\"_context\\"] };

  const state = {
    scriptsInserted: [],
    scriptsRun: [],
    findAndRunScripts() {
      // TODO: Move this function to standalone one in '@builder.io/utils'
      if (elem && typeof window !== \\"undefined\\") {
        /** @type {HTMLScriptElement[]} */
        const scripts = elem.getElementsByTagName(\\"script\\");

        for (let i = 0; i < scripts.length; i++) {
          const script = scripts[i];

          if (script.src) {
            if (state.scriptsInserted.includes(script.src)) {
              continue;
            }

            state.scriptsInserted.push(script.src);
            const newScript = document.createElement(\\"script\\");
            newScript.async = true;
            newScript.src = script.src;
            document.head.appendChild(newScript);
          } else if (
            !script.type ||
            [
              \\"text/javascript\\",
              \\"application/javascript\\",
              \\"application/ecmascript\\",
            ].includes(script.type)
          ) {
            if (state.scriptsRun.includes(script.innerText)) {
              continue;
            }

            try {
              state.scriptsRun.push(script.innerText);
              new Function(script.innerText)();
            } catch (error) {
              console.warn(\\"\`CustomCode\`: Error running script:\\", error);
            }
          }
        }
      }
    },
  };

  return (
    <div
      className={
        \\"builder-custom-code\\" + (props.replaceNodes ? \\" replace-nodes\\" : \\"\\")
      }
      dangerouslySetInnerHTML={{ __html: props.code }}
    />
  );
}
"
`;

exports[`RSC > Typescript Test > Form 1`] = `
"import * as React from \\"react\\";

export interface FormProps {
  attributes?: any;
  name?: string;
  action?: string;
  validate?: boolean;
  method?: string;
  builderBlock?: BuilderElement;
  sendSubmissionsTo?: string;
  sendSubmissionsToEmail?: string;
  sendWithJs?: boolean;
  contentType?: string;
  customHeaders?: {
    [key: string]: string;
  };
  successUrl?: string;
  previewState?: FormState;
  successMessage?: BuilderElement[];
  errorMessage?: BuilderElement[];
  sendingMessage?: BuilderElement[];
  resetFormOnSubmit?: boolean;
  errorMessagePath?: string;
}
export type FormState = \\"unsubmitted\\" | \\"sending\\" | \\"success\\" | \\"error\\";
import { BuilderBlock as BuilderBlockComponent } from \\"@fake\\";
import { BuilderElement, Builder, builder } from \\"@builder.io/sdk\\";
import { BuilderBlocks } from \\"@fake\\";
import { set } from \\"@fake\\";
import { get } from \\"@fake\\";

export default function FormComponent(props: FormProps) {
  const _context = { ...props[\\"_context\\"] };

  const state = {
    formState: \\"unsubmitted\\",
    responseData: null,
    formErrorMessage: \\"\\",
    get submissionState() {
      return (Builder.isEditing && props.previewState) || state.formState;
    },
    onSubmit(event) {
      const sendWithJs =
        props.sendWithJs || props.sendSubmissionsTo === \\"email\\";

      if (props.sendSubmissionsTo === \\"zapier\\") {
        event.preventDefault();
      } else if (sendWithJs) {
        if (!(props.action || props.sendSubmissionsTo === \\"email\\")) {
          event.preventDefault();
          return;
        }

        event.preventDefault();
        const el = event.currentTarget;
        const headers = props.customHeaders || {};
        let body;
        const formData = new FormData(el); // TODO: maybe support null

        const formPairs = Array.from(
          event.currentTarget.querySelectorAll(\\"input,select,textarea\\")
        )
          .filter((el) => !!el.name)
          .map((el) => {
            let value;
            const key = el.name;

            if (el instanceof HTMLInputElement) {
              if (el.type === \\"radio\\") {
                if (el.checked) {
                  value = el.name;
                  return {
                    key,
                    value,
                  };
                }
              } else if (el.type === \\"checkbox\\") {
                value = el.checked;
              } else if (el.type === \\"number\\" || el.type === \\"range\\") {
                const num = el.valueAsNumber;

                if (!isNaN(num)) {
                  value = num;
                }
              } else if (el.type === \\"file\\") {
                // TODO: one vs multiple files
                value = el.files;
              } else {
                value = el.value;
              }
            } else {
              value = el.value;
            }

            return {
              key,
              value,
            };
          });
        let contentType = props.contentType;

        if (props.sendSubmissionsTo === \\"email\\") {
          contentType = \\"multipart/form-data\\";
        }

        Array.from(formPairs).forEach(({ value }) => {
          if (
            value instanceof File ||
            (Array.isArray(value) && value[0] instanceof File) ||
            value instanceof FileList
          ) {
            contentType = \\"multipart/form-data\\";
          }
        }); // TODO: send as urlEncoded or multipart by default
        // because of ease of use and reliability in browser API
        // for encoding the form?

        if (contentType !== \\"application/json\\") {
          body = formData;
        } else {
          // Json
          const json = {};
          Array.from(formPairs).forEach(({ value, key }) => {
            set(json, key, value);
          });
          body = JSON.stringify(json);
        }

        if (contentType && contentType !== \\"multipart/form-data\\") {
          if (
            /* Zapier doesn't allow content-type header to be sent from browsers */ !(
              sendWithJs && props.action?.includes(\\"zapier.com\\")
            )
          ) {
            headers[\\"content-type\\"] = contentType;
          }
        }
        const presubmitEvent = new CustomEvent(\\"presubmit\\", {
          detail: { body },
        });
        if (formRef) {
          formRef.dispatchEvent(presubmitEvent);
          if (presubmitEvent.defaultPrevented) {
            return;
          }
        }
        state.formState = \\"sending\\";
        const formUrl = \`\${
          builder.env === \\"dev\\" ? \\"http://localhost:5000\\" : \\"https://builder.io\\"
        }/api/v1/form-submit?apiKey=\${builder.apiKey}&to=\${btoa(
          props.sendSubmissionsToEmail || \\"\\"
        )}&name=\${encodeURIComponent(props.name || \\"\\")}\`;
        fetch(
          props.sendSubmissionsTo === \\"email\\"
            ? formUrl
            : props.action /* TODO: throw error if no action URL */,
          { body, headers, method: props.method || \\"post\\" }
        ).then(
          async (res) => {
            let body;
            const contentType = res.headers.get(\\"content-type\\");
            if (contentType && contentType.indexOf(\\"application/json\\") !== -1) {
              body = await res.json();
            } else {
              body = await res.text();
            }
            if (!res.ok && props.errorMessagePath) {
              /* TODO: allow supplying an error formatter function */ let message =
                get(body, props.errorMessagePath);
              if (message) {
                if (typeof message !== \\"string\\") {
                  /* TODO: ideally convert json to yaml so it woul dbe like            error: - email has been taken */ message =
                    JSON.stringify(message);
                }
                state.formErrorMessage = message;
              }
            }
            state.responseData = body;
            state.formState = res.ok ? \\"success\\" : \\"error\\";
            if (res.ok) {
              const submitSuccessEvent = new CustomEvent(\\"submit:success\\", {
                detail: { res, body },
              });
              if (formRef) {
                formRef.dispatchEvent(submitSuccessEvent);
                if (submitSuccessEvent.defaultPrevented) {
                  return;
                }
                /* TODO: option to turn this on/off? */ if (
                  props.resetFormOnSubmit !== false
                ) {
                  formRef.reset();
                }
              }
              /* TODO: client side route event first that can be preventDefaulted */ if (
                props.successUrl
              ) {
                if (formRef) {
                  const event = new CustomEvent(\\"route\\", {
                    detail: { url: props.successUrl },
                  });
                  formRef.dispatchEvent(event);
                  if (!event.defaultPrevented) {
                    location.href = props.successUrl;
                  }
                } else {
                  location.href = props.successUrl;
                }
              }
            }
          },
          (err) => {
            const submitErrorEvent = new CustomEvent(\\"submit:error\\", {
              detail: { error: err },
            });
            if (formRef) {
              formRef.dispatchEvent(submitErrorEvent);
              if (submitErrorEvent.defaultPrevented) {
                return;
              }
            }
            state.responseData = err;
            state.formState = \\"error\\";
          }
        );
      }
    },
  };
  return (
    <>
      {\\" \\"}
      <form
        validate={props.validate}
        action={!props.sendWithJs && props.action}
        method={props.method}
        name={props.name}
        {...props.attributes}
      >
        {\\" \\"}
        {props.builderBlock && props.builderBlock.children ? (
          <>
            {props.builderBlock?.children?.map((block, index) => (
              <BuilderBlockComponent
                key={block.id}
                block={block}
                index={index}
                _context={_context}
              />
            ))}
          </>
        ) : null}{\\" \\"}
        {state.submissionState === \\"error\\" ? (
          <>
            <BuilderBlocks
              dataPath=\\"errorMessage\\"
              blocks={props.errorMessage}
              _context={_context}
            />
          </>
        ) : null}{\\" \\"}
        {state.submissionState === \\"sending\\" ? (
          <>
            <BuilderBlocks
              dataPath=\\"sendingMessage\\"
              blocks={props.sendingMessage}
              _context={_context}
            />
          </>
        ) : null}{\\" \\"}
        {state.submissionState === \\"error\\" && state.responseData ? (
          <>
            <pre className=\\"builder-form-error-text pre-4bab5794\\">
              {\\" \\"}
              {JSON.stringify(state.responseData, null, 2)}{\\" \\"}
            </pre>
          </>
        ) : null}{\\" \\"}
        {state.submissionState === \\"success\\" ? (
          <>
            <BuilderBlocks
              dataPath=\\"successMessage\\"
              blocks={props.successMessage}
              _context={_context}
            />
          </>
        ) : null}{\\" \\"}
      </form>{\\" \\"}
      <style>{\`.pre-4bab5794 {  padding: 10px; color: red; text-align: center; }\`}</style>{\\" \\"}
    </>
  );
}
"
`;

exports[`RSC > Typescript Test > Image 1`] = `
"import * as React from \\"react\\";

// TODO: AMP Support?
export interface ImageProps {
  _class?: string;
  image: string;
  sizes?: string;
  lazy?: boolean;
  height?: number;
  width?: number;
  altText?: string;
  backgroundSize?: string;
  backgroundPosition?: string; // TODO: Support generating Builder.io and or Shopify \`srcset\`s when needed

  srcset?: string; // TODO: Implement support for custom aspect ratios

  aspectRatio?: number; // TODO: This might not work as expected in terms of positioning

  children?: any;
}

export default function Image(props: ImageProps) {
  const _context = { ...props[\\"_context\\"] };

  const state = {
    scrollListener: null,
    imageLoaded: false,
    setLoaded() {
      state.imageLoaded = true;
    },
    useLazyLoading() {
      // TODO: Add more checks here, like testing for real web browsers
      return !!props.lazy && isBrowser();
    },
    isBrowser: function isBrowser() {
      return (
        typeof window !== \\"undefined\\" &&
        window.navigator.product != \\"ReactNative\\"
      );
    },
    load: false,
  };

  return (
    <>
      <div>
        <picture>
          {!state.useLazyLoading() || state.load ? (
            <>
              <img
                alt={props.altText}
                aria-role={props.altText ? \\"presentation\\" : undefined}
                className={
                  \\"builder-image\\" +
                  (props._class ? \\" \\" + props._class : \\"\\") +
                  \\" img-6748f1f2\\"
                }
                src={props.image}
                srcset={props.srcset}
                sizes={props.sizes}
              />
            </>
          ) : null}

          <source srcset={props.srcset} />
        </picture>

        {props.children}
      </div>
      <style>{\`.img-6748f1f2 { 
opacity: 1;
transition: opacity 0.2s ease-in-out;
object-fit: cover;
object-position: center; }\`}</style>
    </>
  );
}
"
`;

exports[`RSC > Typescript Test > Image State 1`] = `
"import * as React from \\"react\\";

export default function ImgStateComponent(props: any) {
  const _context = { ...props[\\"_context\\"] };

  const state = { canShow: true, images: [\\"http://example.com/qwik.png\\"] };

  return (
    <div>
      {state.images?.map((item, itemIndex) => (
        <>
          <img className=\\"custom-class\\" src={item} key={itemIndex} />
        </>
      ))}
    </div>
  );
}
"
`;

exports[`RSC > Typescript Test > Img 1`] = `
"import * as React from \\"react\\";

export interface ImgProps {
  attributes?: any;
  imgSrc?: string;
  altText?: string;
  backgroundSize?: \\"cover\\" | \\"contain\\";
  backgroundPosition?:
    | \\"center\\"
    | \\"top\\"
    | \\"left\\"
    | \\"right\\"
    | \\"bottom\\"
    | \\"top left\\"
    | \\"top right\\"
    | \\"bottom left\\"
    | \\"bottom right\\";
}

import { Builder } from \\"@builder.io/sdk\\";

export default function ImgComponent(props: ImgProps) {
  const _context = { ...props[\\"_context\\"] };

  return (
    <img
      style={{
        objectFit: props.backgroundSize || \\"cover\\",
        objectPosition: props.backgroundPosition || \\"center\\",
      }}
      {...props.attributes}
      key={(Builder.isEditing && props.imgSrc) || \\"default-key\\"}
      alt={props.altText}
      src={props.imgSrc}
    />
  );
}
"
`;

exports[`RSC > Typescript Test > Input 1`] = `
"import * as React from \\"react\\";

export interface FormInputProps {
  type?: string;
  attributes?: any;
  name?: string;
  value?: string;
  placeholder?: string;
  defaultValue?: string;
  required?: boolean;
}

import { Builder } from \\"@builder.io/sdk\\";

export default function FormInputComponent(props: FormInputProps) {
  const _context = { ...props[\\"_context\\"] };

  return (
    <input
      {...props.attributes}
      key={
        Builder.isEditing && props.defaultValue
          ? props.defaultValue
          : \\"default-key\\"
      }
      placeholder={props.placeholder}
      type={props.type}
      name={props.name}
      value={props.value}
      defaultValue={props.defaultValue}
      required={props.required}
    />
  );
}
"
`;

exports[`RSC > Typescript Test > RawText 1`] = `
"import * as React from \\"react\\";

export interface RawTextProps {
  attributes?: any;
  text?: string; // builderBlock?: any;
}

export default function RawText(props: RawTextProps) {
  const _context = { ...props[\\"_context\\"] };

  return (
    <span
      className={props.attributes?.class || props.attributes?.className}
      dangerouslySetInnerHTML={{ __html: props.text || \\"\\" }}
    />
  );
}
"
`;

exports[`RSC > Typescript Test > Section 1`] = `
"import * as React from \\"react\\";

export interface SectionProps {
  maxWidth?: number;
  attributes?: any;
  children?: any;
}

export default function SectionComponent(props: SectionProps) {
  const _context = { ...props[\\"_context\\"] };

  return (
    <section
      {...props.attributes}
      style={
        props.maxWidth && typeof props.maxWidth === \\"number\\"
          ? {
              maxWidth: props.maxWidth,
            }
          : undefined
      }
    >
      {props.children}
    </section>
  );
}
"
`;

exports[`RSC > Typescript Test > Select 1`] = `
"import * as React from \\"react\\";

export interface FormSelectProps {
  options?: {
    name?: string;
    value: string;
  }[];
  attributes?: any;
  name?: string;
  value?: string;
  defaultValue?: string;
}

import { Builder } from \\"@builder.io/sdk\\";

export default function SelectComponent(props: FormSelectProps) {
  const _context = { ...props[\\"_context\\"] };

  return (
    <select
      {...props.attributes}
      value={props.value}
      key={
        Builder.isEditing && props.defaultValue
          ? props.defaultValue
          : \\"default-key\\"
      }
      defaultValue={props.defaultValue}
      name={props.name}
    >
      {props.options?.map((option, index) => (
        <option value={option.value} data-index={index}>
          {option.name || option.value}
        </option>
      ))}
    </select>
  );
}
"
`;

exports[`RSC > Typescript Test > SlotHtml 1`] = `
"import * as React from \\"react\\";

type Props = {
  [key: string]: string;
};
import ContentSlotCode from \\"./content-slot-jsx.raw\\";

export default function SlotCode(props: Props) {
  const _context = { ...props[\\"_context\\"] };

  return (
    <div>
      <ContentSlotCode
        _context={_context}
        slotTesting={<div>Hello</div>}
      ></ContentSlotCode>
    </div>
  );
}
"
`;

exports[`RSC > Typescript Test > SlotJsx 1`] = `
"import * as React from \\"react\\";

type Props = {
  [key: string]: string;
};
import ContentSlotCode from \\"./content-slot-jsx.raw\\";

export default function SlotCode(props: Props) {
  const _context = { ...props[\\"_context\\"] };

  return (
    <div>
      <ContentSlotCode slotTesting={<div>Hello</div>} _context={_context} />
    </div>
  );
}
"
`;

exports[`RSC > Typescript Test > Stamped.io 1`] = `
"import * as React from \\"react\\";

type SmileReviewsProps = {
  productId: string;
  apiKey: string;
};
import { kebabCase } from \\"lodash\\";
import { snakeCase } from \\"lodash\\";

export default function SmileReviews(props: SmileReviewsProps) {
  const _context = { ...props[\\"_context\\"] };

  const state = {
    reviews: [],
    name: \\"test\\",
    showReviewPrompt: false,
    kebabCaseValue() {
      return kebabCase(\\"testThat\\");
    },
    snakeCaseValue() {
      return snakeCase(\\"testThis\\");
    },
  };

  return (
    <>
      <div data-user={state.name}>
        <button>Write a review</button>

        {state.showReviewPrompt || \\"asdf\\" ? (
          <>
            <input placeholder=\\"Email\\" />
            <input placeholder=\\"Title\\" className=\\"input-31d03b9e\\" />
            <textarea
              placeholder=\\"How was your experience?\\"
              className=\\"textarea-31d03b9e\\"
            />
            <button className=\\"button-31d03b9e\\">Submit</button>
          </>
        ) : null}

        {state.reviews?.map((review, index) => (
          <div className=\\"review-31d03b9e\\" key={review.id}>
            <img className=\\"img-31d03b9e\\" src={review.avatar} />

            <div
              className={state.showReviewPrompt ? \\"bg-primary\\" : \\"bg-secondary\\"}
            >
              <div>
                N:
                {index}
              </div>

              <div>{review.author}</div>

              <div>{review.reviewMessage}</div>
            </div>
          </div>
        ))}
      </div>
      <style>{\`.input-31d03b9e { 
display: block; }.textarea-31d03b9e { 
display: block; }.button-31d03b9e { 
display: block; }.review-31d03b9e { 
margin: 10px;
padding: 10px;
background: white;
display: flex;
border-radius: 5px;
box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1); }.img-31d03b9e { 
height: 30px;
width: 30px;
margin-right: 10px; }\`}</style>
    </>
  );
}
"
`;

exports[`RSC > Typescript Test > Submit 1`] = `
"import * as React from \\"react\\";

export interface ButtonProps {
  attributes?: any;
  text?: string;
}

export default function SubmitButton(props: ButtonProps) {
  const _context = { ...props[\\"_context\\"] };

  return (
    <button type=\\"submit\\" {...props.attributes}>
      {props.text}
    </button>
  );
}
"
`;

exports[`RSC > Typescript Test > Text 1`] = `
"import * as React from \\"react\\";

export interface TextProps {
  attributes?: any;
  rtlMode: boolean;
  text?: string;
  content?: string;
  builderBlock?: any;
}

import { Builder } from \\"@builder.io/sdk\\";

export default function Text(props: TextProps) {
  const _context = { ...props[\\"_context\\"] };

  const state = { name: \\"Decadef20\\" };

  return (
    <div
      contentEditable={allowEditingText || undefined}
      data-name={{
        test: state.name || \\"any name\\",
      }}
      dangerouslySetInnerHTML={{
        __html:
          props.text ||
          props.content ||
          state.name ||
          '<p class=\\"text-lg\\">my name</p>',
      }}
    />
  );
}
"
`;

exports[`RSC > Typescript Test > Textarea 1`] = `
"import * as React from \\"react\\";

export interface TextareaProps {
  attributes?: any;
  name?: string;
  value?: string;
  defaultValue?: string;
  placeholder?: string;
}

export default function Textarea(props: TextareaProps) {
  const _context = { ...props[\\"_context\\"] };

  return (
    <textarea
      {...props.attributes}
      placeholder={props.placeholder}
      name={props.name}
      value={props.value}
      defaultValue={props.defaultValue}
    />
  );
}
"
`;

exports[`RSC > Typescript Test > Video 1`] = `
"import * as React from \\"react\\";

export interface VideoProps {
  attributes?: any;
  video?: string;
  autoPlay?: boolean;
  controls?: boolean;
  muted?: boolean;
  loop?: boolean;
  playsInline?: boolean;
  aspectRatio?: number;
  width?: number;
  height?: number;
  fit?: \\"contain\\" | \\"cover\\" | \\"fill\\";
  position?:
    | \\"center\\"
    | \\"top\\"
    | \\"left\\"
    | \\"right\\"
    | \\"bottom\\"
    | \\"top left\\"
    | \\"top right\\"
    | \\"bottom left\\"
    | \\"bottom right\\";
  posterImage?: string;
  lazyLoad?: boolean;
}

export default function Video(props: VideoProps) {
  const _context = { ...props[\\"_context\\"] };

  return (
    <video
      preload=\\"none\\"
      {...props.attributes}
      style={{
        width: \\"100%\\",
        height: \\"100%\\",
        ...props.attributes?.style,
        objectFit: props.fit,
        objectPosition: props.position,
        // Hack to get object fit to work as expected and
        // not have the video overflow
        borderRadius: 1,
      }}
      key={props.video || \\"no-src\\"}
      poster={props.posterImage}
      autoplay={props.autoPlay}
      muted={props.muted}
      controls={props.controls}
      loop={props.loop}
    />
  );
}
"
`;

exports[`RSC > Typescript Test > arrowFunctionInUseStore 1`] = `
"import * as React from \\"react\\";

export default function MyComponent(props: any) {
  const _context = { ...props[\\"_context\\"] };

  const state = {
    name: \\"steve\\",
    setName(value) {
      state.name = value;
    },
    updateNameWithArrowFn(value) {
      state.name = value;
    },
  };

  return (
    <div>
      Hello
      {state.name}
    </div>
  );
}
"
`;

exports[`RSC > Typescript Test > basicForwardRef 1`] = `
"import * as React from \\"react\\";

export interface Props {
  showInput: boolean;
  inputRef: HTMLInputElement;
}

export default function MyBasicForwardRefComponent(props: Props) {
  const _context = { ...props[\\"_context\\"] };

  const state = { name: \\"PatrickJS\\" };

  return (
    <>
      <div>
        <input className=\\"input-49d4be1e\\" value={state.name} />
      </div>
      <style>{\`.input-49d4be1e { 
color: red; }\`}</style>
    </>
  );
}
"
`;

exports[`RSC > Typescript Test > basicForwardRefMetadata 1`] = `
"import * as React from \\"react\\";

export interface Props {
  showInput: boolean;
  inputRef: HTMLInputElement;
}

export default forwardRef(function MyBasicForwardRefComponent(
  props: Props,
  inputRef
) {
  const _context = { ...props[\\"_context\\"] };

  const state = { name: \\"PatrickJS\\" };

  return (
    <>
      <div>
        <input className=\\"input-110f222e\\" value={state.name} />
      </div>
      <style>{\`.input-110f222e { 
color: red; }\`}</style>
    </>
  );
});
"
`;

exports[`RSC > Typescript Test > basicOnUpdateReturn 1`] = `
"import * as React from \\"react\\";

export default function MyBasicOnUpdateReturnComponent(props: any) {
  const _context = { ...props[\\"_context\\"] };

  const state = { name: \\"PatrickJS\\" };

  return (
    <div>
      Hello!
      {state.name}
    </div>
  );
}
"
`;

exports[`RSC > Typescript Test > class + ClassName + css 1`] = `
"import * as React from \\"react\\";

export default function MyBasicComponent(props: any) {
  const _context = { ...props[\\"_context\\"] };

  return (
    <>
      <div className=\\"test2 test div-3e2c6b1c\\">
        Hello! I can run in React, Vue, Solid, or Liquid!
      </div>
      <style>{\`.div-3e2c6b1c { 
padding: 10px; }\`}</style>
    </>
  );
}
"
`;

exports[`RSC > Typescript Test > class + css 1`] = `
"import * as React from \\"react\\";

export default function MyBasicComponent(props: any) {
  const _context = { ...props[\\"_context\\"] };

  return (
    <>
      <div className=\\"test div-2d73eb46\\">
        Hello! I can run in React, Vue, Solid, or Liquid!
      </div>
      <style>{\`.div-2d73eb46 { 
padding: 10px; }\`}</style>
    </>
  );
}
"
`;

exports[`RSC > Typescript Test > className + css 1`] = `
"import * as React from \\"react\\";

export default function MyBasicComponent(props: any) {
  const _context = { ...props[\\"_context\\"] };

  return (
    <>
      <div className=\\"test div-2d73eb46\\">
        Hello! I can run in React, Vue, Solid, or Liquid!
      </div>
      <style>{\`.div-2d73eb46 { 
padding: 10px; }\`}</style>
    </>
  );
}
"
`;

exports[`RSC > Typescript Test > className 1`] = `
"import * as React from \\"react\\";

type Props = {
  [key: string]: string | JSX.Element;
  slotTesting: JSX.Element;
};

export default function ClassNameCode(props: Props) {
  const _context = { ...props[\\"_context\\"] };

  const state = { bindings: \\"a binding\\" };

  return (
    <div>
      <div className=\\"no binding\\">Without Binding</div>

      <div className={state.bindings}>With binding</div>
    </div>
  );
}
"
`;

exports[`RSC > Typescript Test > classState 1`] = `
"import * as React from \\"react\\";

export default function MyBasicComponent(props: any) {
  const _context = { ...props[\\"_context\\"] };

  const state = {
    classState: \\"testClassName\\",
    styleState: {
      color: \\"red\\",
    },
  };

  return (
    <>
      <div
        className={state.classState + \\" div-788e1d1e\\"}
        style={state.styleState}
      >
        Hello! I can run in React, Vue, Solid, or Liquid!
      </div>
      <style>{\`.div-788e1d1e { 
padding: 10px; }\`}</style>
    </>
  );
}
"
`;

exports[`RSC > Typescript Test > componentWithContext 1`] = `
"import * as React from \\"react\\";

export interface ComponentWithContextProps {
  content: string;
}

import Context1 from \\"@dummy/1\\";
import Context2 from \\"@dummy/2\\";

export default function ComponentWithContext(props: ComponentWithContextProps) {
  const _context = { ...props[\\"_context\\"] };

  const foo = _context[\\"Context1\\"];

  _context.Context1 = {
    foo: \\"bar\\",
    content() {
      return props.content;
    },
  };

  _context.Context2 = { bar: \\"baz\\" };

  return <>{foo.value}</>;
}
"
`;

exports[`RSC > Typescript Test > contentState 1`] = `
"import * as React from \\"react\\";
import BuilderContext from \\"@dummy/context.lite\\";

export default function RenderContent(props: any) {
  const _context = { ...props[\\"_context\\"] };

  _context.BuilderContext = {
    content: props.content,
    registeredComponents: props.customComponents,
  };

  return <div>setting context</div>;
}
"
`;

exports[`RSC > Typescript Test > defaultProps 1`] = `
"import * as React from \\"react\\";

export interface ButtonProps {
  attributes?: any;
  text?: string;
  link?: string;
  openLinkInNewTab?: boolean;
}

export default function Button(props: ButtonProps) {
  const _context = { ...props[\\"_context\\"] };

  return (
    <div>
      {props.link ? (
        <>
          <a
            {...props.attributes}
            href={props.link}
            target={props.openLinkInNewTab ? \\"_blank\\" : undefined}
          >
            {props.text}
          </a>
        </>
      ) : null}

      {!props.link ? (
        <>
          <button type=\\"button\\" {...props.attributes}>
            {props.text}
          </button>
        </>
      ) : null}
    </div>
  );
}

Button.defaultProps = {
  text: \\"default text\\",
  link: \\"https://builder.io/\\",
  openLinkInNewTab: false,
};
"
`;

exports[`RSC > Typescript Test > defaultPropsOutsideComponent 1`] = `
"import * as React from \\"react\\";

export interface ButtonProps {
  attributes?: any;
  text?: string;
  link?: string;
  openLinkInNewTab?: boolean;
}

export default function Button(props: ButtonProps) {
  const _context = { ...props[\\"_context\\"] };

  return (
    <div>
      {props.link ? (
        <>
          <a
            {...props.attributes}
            href={props.link}
            target={props.openLinkInNewTab ? \\"_blank\\" : undefined}
          >
            {props.text}
          </a>
        </>
      ) : null}

      {!props.link ? (
        <>
          <button type=\\"button\\" {...props.attributes}>
            {props.text}
          </button>
        </>
      ) : null}
    </div>
  );
}

Button.defaultProps = {
  text: \\"default text\\",
  link: \\"https://builder.io/\\",
  openLinkInNewTab: false,
};
"
`;

exports[`RSC > Typescript Test > defaultValsWithTypes 1`] = `
"import * as React from \\"react\\";

type Props = {
  name: string;
};

const DEFAULT_VALUES: Props = {
  name: \\"Sami\\",
};

export default function ComponentWithTypes(props: Props) {
  const _context = { ...props[\\"_context\\"] };

  return (
    <div>
      {\\" \\"}
      Hello
      {props.name || DEFAULT_VALUES.name}
    </div>
  );
}
"
`;

exports[`RSC > Typescript Test > expressionState 1`] = `
"import * as React from \\"react\\";

export default function MyComponent(props: any) {
  const _context = { ...props[\\"_context\\"] };

  const state = {
    refToUse: !(props.componentRef instanceof Function)
      ? props.componentRef
      : null,
  };

  return <div>{state.refToUse}</div>;
}
"
`;

exports[`RSC > Typescript Test > import types 1`] = `
"import * as React from \\"react\\";

type RenderContentProps = {
  options?: GetContentOptions;
  content: BuilderContent;
  renderContentProps: RenderBlockProps;
};
import { BuilderContent, GetContentOptions } from \\"@builder.io/sdk\\";
import RenderBlock, { RenderBlockProps } from \\"./builder-render-block.raw\\";

export default function RenderContent(props: RenderContentProps) {
  const _context = { ...props[\\"_context\\"] };

  const state = {
    getRenderContentProps(block, index) {
      return {
        block: block,
        index: index,
      };
    },
  };

  return (
    <RenderBlock
      {...state.getRenderContentProps(props.renderContentProps.block, 0)}
      _context={_context}
    />
  );
}
"
`;

exports[`RSC > Typescript Test > multipleOnUpdate 1`] = `
"import * as React from \\"react\\";

export default function MultipleOnUpdate(props: any) {
  const _context = { ...props[\\"_context\\"] };

  return <div />;
}
"
`;

exports[`RSC > Typescript Test > multipleOnUpdateWithDeps 1`] = `
"import * as React from \\"react\\";

export default function MultipleOnUpdateWithDeps(props: any) {
  const _context = { ...props[\\"_context\\"] };

  const state = { a: \\"a\\", b: \\"b\\", c: \\"c\\", d: \\"d\\" };

  return <div />;
}
"
`;

exports[`RSC > Typescript Test > multipleSpreads 1`] = `
"import * as React from \\"react\\";

export default function MyBasicComponent(props: any) {
  const _context = { ...props[\\"_context\\"] };

  const state = {
    attrs: {
      hello: \\"world\\",
    },
  };

  return <input {...state.attrs} {...props} />;
}
"
`;

exports[`RSC > Typescript Test > nestedShow 1`] = `
"import * as React from \\"react\\";

interface Props {
  conditionA: boolean;
  conditionB: boolean;
}

export default function NestedShow(props: Props) {
  const _context = { ...props[\\"_context\\"] };

  return (
    <>
      {props.conditionA ? (
        <>
          {!props.conditionB ? (
            <>
              <div>if condition A and condition B</div>
            </>
          ) : (
            <div>else-condition-B</div>
          )}
        </>
      ) : (
        <div>else-condition-A</div>
      )}
    </>
  );
}
"
`;

exports[`RSC > Typescript Test > nestedStyles 1`] = `
"import * as React from \\"react\\";

export default function NestedStyles(props: any) {
  const _context = { ...props[\\"_context\\"] };

  return (
    <>
      <div className=\\"div-28db5af5\\">Hello world</div>
      <style>{\`.div-28db5af5 { 
display: flex;
foo: var(--bar); }@media (max-width: env(--mobile)) { .div-28db5af5 { 
display: block; } }.div-28db5af5:hover { 
display: flex; }.div-28db5af5 .nested-selector { 
display: grid; }\`}</style>
    </>
  );
}
"
`;

exports[`RSC > Typescript Test > onInit & onMount 1`] = `
"import * as React from \\"react\\";
import { useEffect } from \\"react\\";

export default function OnInit(props: any) {
  const _context = { ...props[\\"_context\\"] };

  useEffect(() => {
    console.log(\\"onInit\\");
  });

  return <div />;
}
"
`;

exports[`RSC > Typescript Test > onInit 1`] = `
"import * as React from \\"react\\";
import { useEffect } from \\"react\\";

type Props = {
  name: string;
};

export const defaultValues = {
  name: \\"PatrickJS\\",
};

export default function OnInit(props: Props) {
  const _context = { ...props[\\"_context\\"] };

  const state = { name: \\"\\" };

  useEffect(() => {
    state.name = defaultValues.name || props.name;
    console.log(\\"set defaults with props\\");
  });

  return (
    <div>
      Default name defined by parent
      {state.name}
    </div>
  );
}
"
`;

exports[`RSC > Typescript Test > onMount 1`] = `
"import * as React from \\"react\\";

export default function Comp(props: any) {
  const _context = { ...props[\\"_context\\"] };

  return <div />;
}
"
`;

exports[`RSC > Typescript Test > onUpdate 1`] = `
"import * as React from \\"react\\";

export default function OnUpdate(props: any) {
  const _context = { ...props[\\"_context\\"] };

  return <div />;
}
"
`;

exports[`RSC > Typescript Test > onUpdateWithDeps 1`] = `
"import * as React from \\"react\\";

type Props = {
  size: string;
};

export default function OnUpdateWithDeps(props: Props) {
  const _context = { ...props[\\"_context\\"] };

  const state = { a: \\"a\\", b: \\"b\\" };

  return <div />;
}
"
`;

exports[`RSC > Typescript Test > preserveExportOrLocalStatement 1`] = `
"import * as React from \\"react\\";

type Types = {
  s: any[];
};
interface IPost {
  len: number;
}
export interface MyBasicComponentProps {
  id: string;
}

const b = 3;
const foo = () => {};
export const a = 3;
export const bar = () => {};
export function run<T>(value: T) {}

export default function MyBasicComponent(props: MyBasicComponentProps) {
  const _context = { ...props[\\"_context\\"] };

  return <div />;
}
"
`;

exports[`RSC > Typescript Test > preserveTyping 1`] = `
"import * as React from \\"react\\";

export type A = \\"test\\";
export interface C {
  n: \\"test\\";
}
type B = \\"test2\\";
interface D {
  n: \\"test\\";
}
export interface MyBasicComponentProps {
  name: string;
  age?: number;
}

export default function MyBasicComponent(props: MyBasicComponentProps) {
  const _context = { ...props[\\"_context\\"] };

  return (
    <div>
      Hello! I can run in React, Vue, Solid, or Liquid!
      {props.name}
    </div>
  );
}
"
`;

exports[`RSC > Typescript Test > propsDestructure 1`] = `
"import * as React from \\"react\\";

type Props = {
  children: any;
  type: string;
};

export default function MyBasicComponent(props: Props) {
  const _context = { ...props[\\"_context\\"] };

  const state = { name: \\"Decadef20\\" };

  return (
    <div>
      {props.children}
      {props.type}
      Hello! I can run in React, Vue, Solid, or Liquid!
    </div>
  );
}
"
`;

exports[`RSC > Typescript Test > propsInterface 1`] = `
"import * as React from \\"react\\";

interface Person {
  name: string;
  age?: number;
}

export default function MyBasicComponent(props: Person | never) {
  const _context = { ...props[\\"_context\\"] };

  return (
    <div>
      Hello! I can run in React, Vue, Solid, or Liquid!
      {props.name}
    </div>
  );
}
"
`;

exports[`RSC > Typescript Test > propsType 1`] = `
"import * as React from \\"react\\";

type Person = {
  name: string;
  age?: number;
};

export default function MyBasicComponent(props: Person) {
  const _context = { ...props[\\"_context\\"] };

  return (
    <div>
      Hello! I can run in React, Vue, Solid, or Liquid!
      {props.name}
    </div>
  );
}
"
`;

exports[`RSC > Typescript Test > renderContentExample 1`] = `
"import * as React from \\"react\\";

type Props = {
  customComponents: string[];
  content: {
    blocks: any[];
    id: string;
  };
};
import {
  sendComponentsToVisualEditor,
  dispatchNewContentToVisualEditor,
  trackClick,
} from \\"@dummy/injection-js\\";
import BuilderContext from \\"@dummy/context.lite\\";
import RenderBlocks from \\"@dummy/RenderBlocks.lite.tsx\\";

export default function RenderContent(props: Props) {
  const _context = { ...props[\\"_context\\"] };

  _context.BuilderContext = {
    get content() {
      return 3;
    },
    get registeredComponents() {
      return 4;
    },
  };

  return (
    <>
      <div className=\\"div-0c70c6dc\\">
        <RenderBlocks blocks={props.content.blocks} _context={_context} />
      </div>
      <style>{\`.div-0c70c6dc { 
display: flex;
flex-direction: columns; }\`}</style>
    </>
  );
}
"
`;

exports[`RSC > Typescript Test > rootFragmentMultiNode 1`] = `
"import * as React from \\"react\\";

export interface ButtonProps {
  attributes?: any;
  text?: string;
  link?: string;
  openLinkInNewTab?: boolean;
}

export default function Button(props: ButtonProps) {
  const _context = { ...props[\\"_context\\"] };

  return (
    <>
      {props.link ? (
        <>
          <a
            {...props.attributes}
            href={props.link}
            target={props.openLinkInNewTab ? \\"_blank\\" : undefined}
          >
            {props.text}
          </a>
        </>
      ) : null}

      {!props.link ? (
        <>
          <button type=\\"button\\" {...props.attributes}>
            {props.text}
          </button>
        </>
      ) : null}
    </>
  );
}
"
`;

exports[`RSC > Typescript Test > rootShow 1`] = `
"import * as React from \\"react\\";

export interface RenderStylesProps {
  foo: string;
}

export default function RenderStyles(props: RenderStylesProps) {
  const _context = { ...props[\\"_context\\"] };

  return (
    <>
      {props.foo === \\"bar\\" ? (
        <>
          <div>Bar</div>
        </>
      ) : (
        <div>Foo</div>
      )}
    </>
  );
}
"
`;

exports[`RSC > Typescript Test > self-referencing component 1`] = `
"import * as React from \\"react\\";

export default function MyComponent(props: any) {
  const _context = { ...props[\\"_context\\"] };

  return (
    <div>
      {props.name}

      {props.name === \\"Batman\\" ? (
        <>
          <MyComponent name=\\"Bruce Wayne\\" _context={_context} />
        </>
      ) : null}
    </div>
  );
}
"
`;

exports[`RSC > Typescript Test > self-referencing component with children 1`] = `
"import * as React from \\"react\\";

export default function MyComponent(props: any) {
  const _context = { ...props[\\"_context\\"] };

  return (
    <div>
      {props.name}

      {props.children}

      {props.name === \\"Batman\\" ? (
        <>
          <MyComponent name=\\"Bruce\\" _context={_context}>
            <div>Wayne</div>
          </MyComponent>
        </>
      ) : null}
    </div>
  );
}
"
`;

exports[`RSC > Typescript Test > showWithFor 1`] = `
"import * as React from \\"react\\";

interface Props {
  conditionA: boolean;
  items: string[];
}

export default function NestedShow(props: Props) {
  const _context = { ...props[\\"_context\\"] };

  return (
    <>
      {props.conditionA ? (
        <>
          {props.items?.map((item, idx) => (
            <div key={idx}>{item}</div>
          ))}
        </>
      ) : (
        <div>else-condition-A</div>
      )}
    </>
  );
}
"
`;

exports[`RSC > Typescript Test > spreadAttrs 1`] = `
"import * as React from \\"react\\";

export default function MyBasicComponent(props: any) {
  const _context = { ...props[\\"_context\\"] };

  return <input {...attrs} />;
}
"
`;

exports[`RSC > Typescript Test > spreadNestedProps 1`] = `
"import * as React from \\"react\\";

export default function MyBasicComponent(props: any) {
  const _context = { ...props[\\"_context\\"] };

  return <input {...props.nested} />;
}
"
`;

exports[`RSC > Typescript Test > spreadProps 1`] = `
"import * as React from \\"react\\";

export default function MyBasicComponent(props: any) {
  const _context = { ...props[\\"_context\\"] };

  return <input {...props} />;
}
"
`;

exports[`RSC > Typescript Test > subComponent 1`] = `
"import * as React from \\"react\\";
import Foo from \\"./foo-sub-component.lite\\";

export default function SubComponent(props: any) {
  const _context = { ...props[\\"_context\\"] };

  return <Foo _context={_context} />;
}
"
`;

exports[`RSC > Typescript Test > typeDependency 1`] = `
"import * as React from \\"react\\";
import type { Foo } from \\"./foo-type\\";
import type { Foo as Foo2 } from \\"./type-export\\";
export type TypeDependencyProps = {
  foo: Foo;
  foo2: Foo2;
};

export default function TypeDependency(props: TypeDependencyProps) {
  const _context = { ...props[\\"_context\\"] };

  return <div>{props.foo}</div>;
}
"
`;

exports[`RSC > Typescript Test > use-style 1`] = `
"import * as React from \\"react\\";

export default function MyComponent(props: any) {
  const _context = { ...props[\\"_context\\"] };

  return (
    <>
      <button type=\\"button\\">Button</button>
      <style>{\`

      button {
          background: blue;
          color: white;
          font-size: 12px;
          outline: 1px solid black;
      }
  \`}</style>
    </>
  );
}
"
`;

exports[`RSC > Typescript Test > use-style-and-css 1`] = `
"import * as React from \\"react\\";

export default function MyComponent(props: any) {
  const _context = { ...props[\\"_context\\"] };

  return (
    <>
      <button type=\\"button\\" className=\\"button-07aeef55\\">
        Button
      </button>
      <style>{\`.button-07aeef55 { 
background: blue;
color: white; }

      button {
          font-size: 12px;
          outline: 1px solid black;
      }
  \`}</style>
    </>
  );
}
"
`;

exports[`RSC > Typescript Test > use-style-outside-component 1`] = `
"import * as React from \\"react\\";

export default function MyComponent(props: any) {
  const _context = { ...props[\\"_context\\"] };

  return (
    <>
      <button type=\\"button\\">Button</button>
      <style>{\`

button {
    background: blue;
    color: white;
    font-size: 12px;
    outline: 1px solid black;
}
\`}</style>
    </>
  );
}
"
`;
