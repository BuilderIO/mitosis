import todosState from "../shared/todos-state.lite";

/**
 * Usage:
 *
 *  <todo></todo>
 *
 */
class Todo extends HTMLElement {
  constructor() {
    super();
    const self = this;

    this.state = {
      editing: false,
      toggle() {
        self.props.todo.completed = !self.props.todo.completed;
      },
    };
    this.props = {};

    // used to keep track of all nodes created by show/for
    this.nodesToDestroy = [];
    // batch updates
    this.pendingUpdate = false;

    // Event handler for 'click' event on input-todo-1
    this.onInputTodo1Click = (event) => {
      this.state.toggle();
    };

    // Event handler for 'dblclick' event on label-todo-1
    this.onLabelTodo1Dblclick = (event) => {
      this.state.editing = true;
      this.update();
    };

    // Event handler for 'click' event on button-todo-1
    this.onButtonTodo1Click = (event) => {
      todosState.todos.splice(todosState.todos.indexOf(this.props.todo));
    };

    // Event handler for 'blur' event on input-todo-2
    this.onInputTodo2Blur = (event) => {
      this.state.editing = false;
      this.update();
    };

    // Event handler for 'keyup' event on input-todo-2
    this.onInputTodo2Keyup = (event) => {
      this.props.todo.text = event.target.value;
    };

    if (undefined) {
      this.attachShadow({ mode: "open" });
    }
  }

  destroyAnyNodes() {
    // destroy current view template refs before rendering again
    this.nodesToDestroy.forEach((el) => el.remove());
    this.nodesToDestroy = [];
  }

  get _root() {
    return this.shadowRoot || this;
  }

  connectedCallback() {
    this._root.innerHTML = `
      <li data-name="li-todo-1">
        <div class="view">
          <input class="toggle" type="checkbox" data-name="input-todo-1" />
      
          <label data-name="label-todo-1">
            <template data-name="div-todo-1"><!-- props.todo.text --></template>
          </label>
      
          <button class="destroy" data-name="button-todo-1"></button>
        </div>
      
        <template data-name="show-todo">
          <input class="edit" data-name="input-todo-2" />
        </template>
      </li>
      <style></style>`;
    this.pendingUpdate = true;
    this.render();

    this.onMount();
    this.pendingUpdate = false;
    this.update();
  }

  showContent(el) {
    // https://developer.mozilla.org/en-US/docs/Web/API/HTMLTemplateElement/content
    // grabs the content of a node that is between <template> tags
    // iterates through child nodes to register all content including text elements
    // attaches the content after the template

    const elementFragment = el.content.cloneNode(true);
    const children = Array.from(elementFragment.childNodes);
    children.forEach((child) => {
      if (el?.scope) {
        child.scope = el.scope;
      }
      this.nodesToDestroy.push(child);
    });
    el.after(elementFragment);
  }

  onMount() {}

  onUpdate() {}

  update() {
    if (this.pendingUpdate === true) {
      return;
    }
    this.pendingUpdate = true;

    this.render();
    this.onUpdate();

    this.pendingUpdate = false;
  }

  render() {
    // re-rendering needs to ensure that all nodes generated by for/show are refreshed
    this.destroyAnyNodes();
    this.updateBindings();
  }

  updateBindings() {
    this._root.querySelectorAll("[data-name='li-todo-1']").forEach((el) => {
      el.setAttribute(
        "class",
        `${this.props.todo.completed ? "completed" : ""} ${
          this.state.editing ? "editing" : ""
        }`
      );
    });

    this._root.querySelectorAll("[data-name='input-todo-1']").forEach((el) => {
      el.setAttribute("checked", this.props.todo.completed);

      el.removeEventListener("click", this.onInputTodo1Click);
      el.addEventListener("click", this.onInputTodo1Click);
    });

    this._root.querySelectorAll("[data-name='label-todo-1']").forEach((el) => {
      el.removeEventListener("dblclick", this.onLabelTodo1Dblclick);
      el.addEventListener("dblclick", this.onLabelTodo1Dblclick);
    });

    this._root.querySelectorAll("[data-name='div-todo-1']").forEach((el) => {
      this.renderTextNode(el, this.props.todo.text);
    });

    this._root.querySelectorAll("[data-name='button-todo-1']").forEach((el) => {
      el.removeEventListener("click", this.onButtonTodo1Click);
      el.addEventListener("click", this.onButtonTodo1Click);
    });

    this._root.querySelectorAll("[data-name='show-todo']").forEach((el) => {
      const whenCondition = this.state.editing;
      if (whenCondition) {
        this.showContent(el);
      }
    });

    this._root.querySelectorAll("[data-name='input-todo-2']").forEach((el) => {
      el.setAttribute("value", this.props.todo.text);

      el.removeEventListener("blur", this.onInputTodo2Blur);
      el.addEventListener("blur", this.onInputTodo2Blur);

      el.removeEventListener("keyup", this.onInputTodo2Keyup);
      el.addEventListener("keyup", this.onInputTodo2Keyup);
    });
  }

  // Helper to render content
  renderTextNode(el, text) {
    const textNode = document.createTextNode(text);
    if (el?.scope) {
      textNode.scope = el.scope;
    }
    el.after(textNode);
    this.nodesToDestroy.push(el.nextSibling);
  }
}

customElements.define("todo", Todo);
